{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","sourceNew":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new TreeMap<>();\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new TreeMap<String, Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new TreeMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","sourceOld":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new TreeMap<>();\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new TreeMap<String, Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new TreeMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b3034cd34b8cb87874ebdd7b1cfb2281200623","date":1498354741,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","sourceNew":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new HashMap<>();\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new HashMap<String, Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new HashMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","sourceOld":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new TreeMap<>();\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new TreeMap<String, Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new TreeMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","sourceNew":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new HashMap<>();\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new HashMap<String, Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new HashMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","sourceOld":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new TreeMap<>();\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new TreeMap<String, Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new TreeMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2d13525f1dc36cdefcb92f649c930405104dbe8","date":1498512806,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","sourceNew":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new TreeMap<>();\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new TreeMap<String, Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new TreeMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","sourceOld":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new HashMap<>();\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new HashMap<String, Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new HashMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","sourceNew":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new TreeMap<>();\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new TreeMap<String, Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new TreeMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","sourceOld":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new HashMap<>();\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new HashMap<String, Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new HashMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","sourceNew":null,"sourceOld":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new TreeMap<>();\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new TreeMap<String, Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new TreeMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","sourceNew":null,"sourceOld":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new TreeMap<>();\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new TreeMap<String, Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new TreeMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","sourceNew":null,"sourceOld":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new TreeMap<>();\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new TreeMap<String, Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new TreeMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a2d13525f1dc36cdefcb92f649c930405104dbe8":["43b3034cd34b8cb87874ebdd7b1cfb2281200623"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","a2d13525f1dc36cdefcb92f649c930405104dbe8"],"43b3034cd34b8cb87874ebdd7b1cfb2281200623":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a2d13525f1dc36cdefcb92f649c930405104dbe8"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["0f719faa74f7213d4a395510dbc1f1b7cb178484","43b3034cd34b8cb87874ebdd7b1cfb2281200623"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["0f719faa74f7213d4a395510dbc1f1b7cb178484","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a2d13525f1dc36cdefcb92f649c930405104dbe8":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["30c8e5574b55d57947e989443dfde611646530ee"],"43b3034cd34b8cb87874ebdd7b1cfb2281200623":["a2d13525f1dc36cdefcb92f649c930405104dbe8","b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["43b3034cd34b8cb87874ebdd7b1cfb2281200623","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}