{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","sourceNew":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link org.apache.lucene.analysis.shingle.ShingleMatrixFilter#next(org.apache.lucene.analysis.Token)} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n  }\n\n","sourceOld":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link org.apache.lucene.analysis.shingle.ShingleMatrixFilter#next(org.apache.lucene.analysis.Token)} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dda87e5ad7246b25d0da56a16ead95360499d86","date":1249273990,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","sourceNew":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link org.apache.lucene.analysis.shingle.ShingleMatrixFilter#next(org.apache.lucene.analysis.Token)} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n    payloadAtt = (PayloadAttribute) addAttribute(PayloadAttribute.class);\n    offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n    typeAtt = (TypeAttribute) addAttribute(TypeAttribute.class);\n    flagsAtt = (FlagsAttribute) addAttribute(FlagsAttribute.class);\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n    \n    in_termAtt = (TermAttribute) input.addAttribute(TermAttribute.class);\n    in_posIncrAtt = (PositionIncrementAttribute) input.addAttribute(PositionIncrementAttribute.class);\n    in_payloadAtt = (PayloadAttribute) input.addAttribute(PayloadAttribute.class);\n    in_offsetAtt = (OffsetAttribute) input.addAttribute(OffsetAttribute.class);\n    in_typeAtt = (TypeAttribute) input.addAttribute(TypeAttribute.class);\n    in_flagsAtt = (FlagsAttribute) input.addAttribute(FlagsAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link org.apache.lucene.analysis.shingle.ShingleMatrixFilter#next(org.apache.lucene.analysis.Token)} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","sourceNew":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link org.apache.lucene.analysis.shingle.ShingleMatrixFilter#next(org.apache.lucene.analysis.Token)} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    termAtt = addAttribute(TermAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n    \n    in_termAtt = input.addAttribute(TermAttribute.class);\n    in_posIncrAtt = input.addAttribute(PositionIncrementAttribute.class);\n    in_payloadAtt = input.addAttribute(PayloadAttribute.class);\n    in_offsetAtt = input.addAttribute(OffsetAttribute.class);\n    in_typeAtt = input.addAttribute(TypeAttribute.class);\n    in_flagsAtt = input.addAttribute(FlagsAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link org.apache.lucene.analysis.shingle.ShingleMatrixFilter#next(org.apache.lucene.analysis.Token)} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n    payloadAtt = (PayloadAttribute) addAttribute(PayloadAttribute.class);\n    offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n    typeAtt = (TypeAttribute) addAttribute(TypeAttribute.class);\n    flagsAtt = (FlagsAttribute) addAttribute(FlagsAttribute.class);\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n    \n    in_termAtt = (TermAttribute) input.addAttribute(TermAttribute.class);\n    in_posIncrAtt = (PositionIncrementAttribute) input.addAttribute(PositionIncrementAttribute.class);\n    in_payloadAtt = (PayloadAttribute) input.addAttribute(PayloadAttribute.class);\n    in_offsetAtt = (OffsetAttribute) input.addAttribute(OffsetAttribute.class);\n    in_typeAtt = (TypeAttribute) input.addAttribute(TypeAttribute.class);\n    in_flagsAtt = (FlagsAttribute) input.addAttribute(FlagsAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0d7af7923eb20ee09475be28bf8053f8af5be53","date":1254575831,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","sourceNew":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link org.apache.lucene.analysis.shingle.ShingleMatrixFilter#next(org.apache.lucene.analysis.Token)} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    termAtt = addAttribute(TermAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n\n    in_termAtt = input.addAttribute(TermAttribute.class);\n    in_posIncrAtt = input.addAttribute(PositionIncrementAttribute.class);\n    in_payloadAtt = input.addAttribute(PayloadAttribute.class);\n    in_offsetAtt = input.addAttribute(OffsetAttribute.class);\n    in_typeAtt = input.addAttribute(TypeAttribute.class);\n    in_flagsAtt = input.addAttribute(FlagsAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link org.apache.lucene.analysis.shingle.ShingleMatrixFilter#next(org.apache.lucene.analysis.Token)} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    termAtt = addAttribute(TermAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n    \n    in_termAtt = input.addAttribute(TermAttribute.class);\n    in_posIncrAtt = input.addAttribute(PositionIncrementAttribute.class);\n    in_payloadAtt = input.addAttribute(PayloadAttribute.class);\n    in_offsetAtt = input.addAttribute(OffsetAttribute.class);\n    in_typeAtt = input.addAttribute(TypeAttribute.class);\n    in_flagsAtt = input.addAttribute(FlagsAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"612d211e62a842ea53f880a85af7846471ac24d5","date":1258369705,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","sourceNew":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link #incrementToken()} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    termAtt = addAttribute(TermAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n\n    in_termAtt = input.addAttribute(TermAttribute.class);\n    in_posIncrAtt = input.addAttribute(PositionIncrementAttribute.class);\n    in_payloadAtt = input.addAttribute(PayloadAttribute.class);\n    in_offsetAtt = input.addAttribute(OffsetAttribute.class);\n    in_typeAtt = input.addAttribute(TypeAttribute.class);\n    in_flagsAtt = input.addAttribute(FlagsAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link org.apache.lucene.analysis.shingle.ShingleMatrixFilter#next(org.apache.lucene.analysis.Token)} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    termAtt = addAttribute(TermAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n\n    in_termAtt = input.addAttribute(TermAttribute.class);\n    in_posIncrAtt = input.addAttribute(PositionIncrementAttribute.class);\n    in_payloadAtt = input.addAttribute(PayloadAttribute.class);\n    in_offsetAtt = input.addAttribute(OffsetAttribute.class);\n    in_typeAtt = input.addAttribute(TypeAttribute.class);\n    in_flagsAtt = input.addAttribute(FlagsAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","sourceNew":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link #incrementToken()} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    termAtt = addAttribute(TermAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n\n    in_termAtt = input.addAttribute(TermAttribute.class);\n    in_posIncrAtt = input.addAttribute(PositionIncrementAttribute.class);\n    in_payloadAtt = input.addAttribute(PayloadAttribute.class);\n    in_offsetAtt = input.addAttribute(OffsetAttribute.class);\n    in_typeAtt = input.addAttribute(TypeAttribute.class);\n    in_flagsAtt = input.addAttribute(FlagsAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link #incrementToken()} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    termAtt = addAttribute(TermAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n\n    in_termAtt = input.addAttribute(TermAttribute.class);\n    in_posIncrAtt = input.addAttribute(PositionIncrementAttribute.class);\n    in_payloadAtt = input.addAttribute(PayloadAttribute.class);\n    in_offsetAtt = input.addAttribute(OffsetAttribute.class);\n    in_typeAtt = input.addAttribute(TypeAttribute.class);\n    in_flagsAtt = input.addAttribute(FlagsAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"612d211e62a842ea53f880a85af7846471ac24d5":["b0d7af7923eb20ee09475be28bf8053f8af5be53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b0d7af7923eb20ee09475be28bf8053f8af5be53":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"0dda87e5ad7246b25d0da56a16ead95360499d86":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["612d211e62a842ea53f880a85af7846471ac24d5"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"612d211e62a842ea53f880a85af7846471ac24d5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"b0d7af7923eb20ee09475be28bf8053f8af5be53":["612d211e62a842ea53f880a85af7846471ac24d5"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["b0d7af7923eb20ee09475be28bf8053f8af5be53"],"0dda87e5ad7246b25d0da56a16ead95360499d86":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}