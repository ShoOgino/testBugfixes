{"path":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","sourceNew":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    for (final String fileName: files) {\n      if (!refCounts.containsKey(fileName))\n        deleteFile(fileName);\n    }\n  }\n\n","sourceOld":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    for (final String fileName: files) {\n      if (!refCounts.containsKey(fileName))\n        deleteFile(fileName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"257da767277782760db0814096b999899995b2b1","date":1289498882,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","sourceNew":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    for (final String fileName: files) {\n      if (!refCounts.containsKey(fileName)) {\n        if (infoStream != null) {\n          message(\"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    for (final String fileName: files) {\n      if (!refCounts.containsKey(fileName))\n        deleteFile(fileName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","sourceNew":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    for (final String fileName: files) {\n      if (!refCounts.containsKey(fileName)) {\n        if (infoStream != null) {\n          message(\"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    for (final String fileName: files) {\n      if (!refCounts.containsKey(fileName))\n        deleteFile(fileName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","sourceNew":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    for (final String fileName: files) {\n      if (!refCounts.containsKey(fileName)) {\n        if (infoStream != null) {\n          message(\"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    for (final String fileName: files) {\n      if (!refCounts.containsKey(fileName))\n        deleteFile(fileName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7719bda090a2ae5bab940a27ba7bb9054b29818","date":1315503197,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","sourceNew":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    for (final String fileName: files) {\n      if (!refCounts.containsKey(fileName)) {\n        if (infoStream != null) {\n          message(\"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    for (final String fileName: files) {\n      if (!refCounts.containsKey(fileName)) {\n        if (infoStream != null) {\n          message(\"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","sourceNew":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    for (final String fileName: files) {\n      if (!refCounts.containsKey(fileName)) {\n        if (infoStream != null) {\n          infoStream.message(\"IFD\", \"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    for (final String fileName: files) {\n      if (!refCounts.containsKey(fileName)) {\n        if (infoStream != null) {\n          message(\"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","sourceNew":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    for (final String fileName: files) {\n      if (!refCounts.containsKey(fileName)) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    for (final String fileName: files) {\n      if (!refCounts.containsKey(fileName)) {\n        if (infoStream != null) {\n          infoStream.message(\"IFD\", \"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","sourceNew":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    for (final String fileName: files) {\n      if (!refCounts.containsKey(fileName)) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    for (final String fileName: files) {\n      if (!refCounts.containsKey(fileName)) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"f7719bda090a2ae5bab940a27ba7bb9054b29818":["257da767277782760db0814096b999899995b2b1"],"257da767277782760db0814096b999899995b2b1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"06584e6e98d592b34e1329b384182f368d2025e8":["f7719bda090a2ae5bab940a27ba7bb9054b29818"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["9454a6510e2db155fb01faa5c049b06ece95fab9","257da767277782760db0814096b999899995b2b1"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","257da767277782760db0814096b999899995b2b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f7719bda090a2ae5bab940a27ba7bb9054b29818":["06584e6e98d592b34e1329b384182f368d2025e8"],"257da767277782760db0814096b999899995b2b1":["f7719bda090a2ae5bab940a27ba7bb9054b29818","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85a883878c0af761245ab048babc63d099f835f3":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["257da767277782760db0814096b999899995b2b1","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}