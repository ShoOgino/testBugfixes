{"path":"solr/core/src/test/org/apache/solr/util/TestSolrJacksonAnnotation#testSerDe().mjava","commits":[{"id":"856d72a5f63c995cad4c6fd92b7c121aa140285c","date":1572845901,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrJacksonAnnotation#testSerDe().mjava","pathOld":"/dev/null","sourceNew":"  public void testSerDe() throws Exception {\n    ObjectMapper mapper = new ObjectMapper();\n    mapper.setAnnotationIntrospector(new SolrJacksonAnnotationInspector());\n\n    TestObj o = new TestObj();\n    o.field = \"v1\";\n    o.f2 = \"v2\";\n    o.ifld = 1234;\n    String json = mapper.writeValueAsString(o);\n\n    Map m = (Map) Utils.fromJSONString(json);\n    assertEquals(\"v1\",  m.get(\"field\"));\n    assertEquals(\"v2\",  m.get(\"friendlyName\"));\n    assertEquals(\"1234\",  String.valueOf(m.get(\"friendlyIntFld\")));\n    TestObj o1 = mapper.readValue(json, TestObj.class);\n\n    assertEquals(\"v1\", o1.field);\n    assertEquals(\"v2\", o1.f2);\n    assertEquals(1234, o1.ifld);\n\n    Map<String, Object> schema = JsonSchemaCreator.getSchema(TestObj.class);\n    assertEquals(\"string\", Utils.getObjectByPath(schema,true,\"/properties/friendlyName/type\"));\n    assertEquals(\"integer\", Utils.getObjectByPath(schema,true,\"/properties/friendlyIntFld/type\"));\n    assertEquals(\"friendlyName\", Utils.getObjectByPath(schema,true,\"/required[0]\"));\n\n\n    JsonSchemaValidator validator = new JsonSchemaValidator(schema);\n    List<String> errs = validator.validateJson(m);\n    assertNull(errs);\n    m.remove(\"friendlyName\");\n    errs = validator.validateJson(m);\n    assertFalse(errs.isEmpty());\n    assertTrue(errs.get(0).contains(\"Missing required attribute\"));\n    m.put(\"friendlyIntFld\", Boolean.TRUE);\n    errs = validator.validateJson(m);\n    m.put(\"friendlyIntFld\", \"another String\");\n    assertTrue(errs.get(0).contains(\"Value is not valid\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrJacksonAnnotation#testSerDe().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrJacksonAnnotation#testSerDe().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testSerDe() throws Exception {\n    ObjectMapper mapper = new ObjectMapper();\n    mapper.setAnnotationIntrospector(new SolrJacksonAnnotationInspector());\n\n    TestObj o = new TestObj();\n    o.field = \"v1\";\n    o.f2 = \"v2\";\n    o.ifld = 1234;\n    String json = mapper.writeValueAsString(o);\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = (Map) Utils.fromJSONString(json);\n    assertEquals(\"v1\",  m.get(\"field\"));\n    assertEquals(\"v2\",  m.get(\"friendlyName\"));\n    assertEquals(\"1234\",  String.valueOf(m.get(\"friendlyIntFld\")));\n    TestObj o1 = mapper.readValue(json, TestObj.class);\n\n    assertEquals(\"v1\", o1.field);\n    assertEquals(\"v2\", o1.f2);\n    assertEquals(1234, o1.ifld);\n\n    Map<String, Object> schema = JsonSchemaCreator.getSchema(TestObj.class);\n    assertEquals(\"string\", Utils.getObjectByPath(schema,true,\"/properties/friendlyName/type\"));\n    assertEquals(\"integer\", Utils.getObjectByPath(schema,true,\"/properties/friendlyIntFld/type\"));\n    assertEquals(\"friendlyName\", Utils.getObjectByPath(schema,true,\"/required[0]\"));\n\n\n    JsonSchemaValidator validator = new JsonSchemaValidator(schema);\n    List<String> errs = validator.validateJson(m);\n    assertNull(errs);\n    m.remove(\"friendlyName\");\n    errs = validator.validateJson(m);\n    assertFalse(errs.isEmpty());\n    assertTrue(errs.get(0).contains(\"Missing required attribute\"));\n    m.put(\"friendlyIntFld\", Boolean.TRUE);\n    errs = validator.validateJson(m);\n    m.put(\"friendlyIntFld\", \"another String\");\n    assertTrue(errs.get(0).contains(\"Value is not valid\"));\n  }\n\n","sourceOld":"  public void testSerDe() throws Exception {\n    ObjectMapper mapper = new ObjectMapper();\n    mapper.setAnnotationIntrospector(new SolrJacksonAnnotationInspector());\n\n    TestObj o = new TestObj();\n    o.field = \"v1\";\n    o.f2 = \"v2\";\n    o.ifld = 1234;\n    String json = mapper.writeValueAsString(o);\n\n    Map m = (Map) Utils.fromJSONString(json);\n    assertEquals(\"v1\",  m.get(\"field\"));\n    assertEquals(\"v2\",  m.get(\"friendlyName\"));\n    assertEquals(\"1234\",  String.valueOf(m.get(\"friendlyIntFld\")));\n    TestObj o1 = mapper.readValue(json, TestObj.class);\n\n    assertEquals(\"v1\", o1.field);\n    assertEquals(\"v2\", o1.f2);\n    assertEquals(1234, o1.ifld);\n\n    Map<String, Object> schema = JsonSchemaCreator.getSchema(TestObj.class);\n    assertEquals(\"string\", Utils.getObjectByPath(schema,true,\"/properties/friendlyName/type\"));\n    assertEquals(\"integer\", Utils.getObjectByPath(schema,true,\"/properties/friendlyIntFld/type\"));\n    assertEquals(\"friendlyName\", Utils.getObjectByPath(schema,true,\"/required[0]\"));\n\n\n    JsonSchemaValidator validator = new JsonSchemaValidator(schema);\n    List<String> errs = validator.validateJson(m);\n    assertNull(errs);\n    m.remove(\"friendlyName\");\n    errs = validator.validateJson(m);\n    assertFalse(errs.isEmpty());\n    assertTrue(errs.get(0).contains(\"Missing required attribute\"));\n    m.put(\"friendlyIntFld\", Boolean.TRUE);\n    errs = validator.validateJson(m);\n    m.put(\"friendlyIntFld\", \"another String\");\n    assertTrue(errs.get(0).contains(\"Value is not valid\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"856d72a5f63c995cad4c6fd92b7c121aa140285c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["856d72a5f63c995cad4c6fd92b7c121aa140285c"]},"commit2Childs":{"856d72a5f63c995cad4c6fd92b7c121aa140285c":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["856d72a5f63c995cad4c6fd92b7c121aa140285c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}