{"path":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrClassLoader,String,String,Node).mjava","commits":[{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrClassLoader,String,String,Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrResourceLoader,String,String,Node).mjava","sourceNew":"  @Override\n  protected FieldType create( SolrClassLoader loader,\n                              String name, \n                              String className,\n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    if (null != simFactory) {\n      ft.setSimilarity(simFactory);\n    }\n\n    if (ft instanceof HasImplicitIndexAnalyzer) {\n      ft.setIsExplicitAnalyzer(false);\n      if (null != queryAnalyzer && null != analyzer) {\n        log.warn(\"Ignoring index-time analyzer for field: {}\", name);\n      } else if (null == queryAnalyzer) { // Accept non-query-time analyzer as a query-time analyzer\n        queryAnalyzer = analyzer;\n      }\n      if (null != queryAnalyzer) {\n        ft.setIsExplicitQueryAnalyzer(true);\n        ft.setQueryAnalyzer(queryAnalyzer);\n      }\n    } else {\n      if (null == queryAnalyzer) {\n        queryAnalyzer = analyzer;\n        ft.setIsExplicitQueryAnalyzer(false);\n      } else {\n        ft.setIsExplicitQueryAnalyzer(true);\n      }\n      if (null == analyzer) {\n        analyzer = queryAnalyzer;\n        ft.setIsExplicitAnalyzer(false);\n      } else {\n        ft.setIsExplicitAnalyzer(true);\n      }\n  \n      if (null != analyzer) {\n        ft.setIndexAnalyzer(analyzer);\n        ft.setQueryAnalyzer(queryAnalyzer);\n        if (ft instanceof TextField) {\n          if (null == multiAnalyzer) {\n            multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(false);\n          } else {\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(true);\n          }\n          ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n        }\n      }\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","sourceOld":"  @Override\n  protected FieldType create( SolrResourceLoader loader, \n                              String name, \n                              String className,\n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    if (null != simFactory) {\n      ft.setSimilarity(simFactory);\n    }\n\n    if (ft instanceof HasImplicitIndexAnalyzer) {\n      ft.setIsExplicitAnalyzer(false);\n      if (null != queryAnalyzer && null != analyzer) {\n        log.warn(\"Ignoring index-time analyzer for field: {}\", name);\n      } else if (null == queryAnalyzer) { // Accept non-query-time analyzer as a query-time analyzer\n        queryAnalyzer = analyzer;\n      }\n      if (null != queryAnalyzer) {\n        ft.setIsExplicitQueryAnalyzer(true);\n        ft.setQueryAnalyzer(queryAnalyzer);\n      }\n    } else {\n      if (null == queryAnalyzer) {\n        queryAnalyzer = analyzer;\n        ft.setIsExplicitQueryAnalyzer(false);\n      } else {\n        ft.setIsExplicitQueryAnalyzer(true);\n      }\n      if (null == analyzer) {\n        analyzer = queryAnalyzer;\n        ft.setIsExplicitAnalyzer(false);\n      } else {\n        ft.setIsExplicitAnalyzer(true);\n      }\n  \n      if (null != analyzer) {\n        ft.setIndexAnalyzer(analyzer);\n        ft.setQueryAnalyzer(queryAnalyzer);\n        if (ft instanceof TextField) {\n          if (null == multiAnalyzer) {\n            multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(false);\n          } else {\n            ((TextField)ft).setIsExplicitMultiTermAnalyzer(true);\n          }\n          ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n        }\n      }\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"]},"commit2Childs":{"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}