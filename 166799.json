{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(String,Directory,int,IndexInput).mjava","commits":[{"id":"352763be0465236f8e2ac188aa1b761cb3e1c9ee","date":1337516554,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(String,Directory,int,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(Directory,int,IndexInput).mjava","sourceNew":"  private SegmentInfo readSegmentInfo(String segmentName, Directory dir, int format, IndexInput input) throws IOException {\n    // check that it is a format we can understand\n    if (format > Lucene3xSegmentInfosFormat.FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_MINIMUM, Lucene3xSegmentInfosFormat.FORMAT_CURRENT);\n    }\n    if (format < Lucene3xSegmentInfosFormat.FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_MINIMUM, Lucene3xSegmentInfosFormat.FORMAT_CURRENT);\n    }\n    final String version;\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n\n    // NOTE: we ignore this and use the incoming arg\n    // instead, if it's non-null:\n    final String name = input.readString();\n    if (segmentName == null) {\n      segmentName = name;\n    }\n\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n\n    //System.out.println(\"version=\" + version + \" name=\" + name + \" docCount=\" + docCount + \" delGen=\" + delGen + \" dso=\" + docStoreOffset + \" dss=\" + docStoreSegment + \" dssCFs=\" + docStoreIsCompoundFile + \" b=\" + b + \" format=\" + format);\n\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_HAS_VECTORS) {\n      input.readByte();\n    }\n\n    // nocommit we can use hasProx/hasVectors from the 3.x\n    // si... if we can pass this to the other components...?\n\n    SegmentInfo info = new SegmentInfo(dir, version, segmentName, docCount, docStoreOffset,\n                                       docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                       delCount, null, diagnostics);\n    info.setDelGen(delGen);\n    return info;\n  }\n\n","sourceOld":"  private SegmentInfo readSegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    // check that it is a format we can understand\n    if (format > Lucene3xSegmentInfosFormat.FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_MINIMUM, Lucene3xSegmentInfosFormat.FORMAT_CURRENT);\n    }\n    if (format < Lucene3xSegmentInfosFormat.FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_MINIMUM, Lucene3xSegmentInfosFormat.FORMAT_CURRENT);\n    }\n    final String version;\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n\n    System.out.println(\"version=\" + version + \" name=\" + name + \" docCount=\" + docCount + \" delGen=\" + delGen + \" dso=\" + docStoreOffset + \" dss=\" + docStoreSegment + \" dssCFs=\" + docStoreIsCompoundFile + \" b=\" + b + \" format=\" + format);\n\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_HAS_VECTORS) {\n      input.readByte();\n    }\n\n    // nocommit we can use hasProx/hasVectors from the 3.x\n    // si... if we can pass this to the other components...?\n\n    SegmentInfo info = new SegmentInfo(dir, version, name, docCount, docStoreOffset,\n                                       docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                       delCount, null, diagnostics);\n    info.setDelGen(delGen);\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b2af6b2c05418fb9df466c739ed5b3a153eadde","date":1337520269,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(String,Directory,int,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(String,Directory,int,IndexInput).mjava","sourceNew":"  private SegmentInfo readSegmentInfo(String segmentName, Directory dir, int format, IndexInput input) throws IOException {\n    // check that it is a format we can understand\n    if (format > Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS) {\n      throw new IndexFormatTooOldException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE);\n    }\n    if (format < Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE) {\n      throw new IndexFormatTooNewException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE);\n    }\n    final String version;\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n\n    // NOTE: we ignore this and use the incoming arg\n    // instead, if it's non-null:\n    final String name = input.readString();\n    if (segmentName == null) {\n      segmentName = name;\n    }\n\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n\n    //System.out.println(\"version=\" + version + \" name=\" + name + \" docCount=\" + docCount + \" delGen=\" + delGen + \" dso=\" + docStoreOffset + \" dss=\" + docStoreSegment + \" dssCFs=\" + docStoreIsCompoundFile + \" b=\" + b + \" format=\" + format);\n\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_HAS_VECTORS) {\n      input.readByte();\n    }\n\n    // nocommit we can use hasProx/hasVectors from the 3.x\n    // si... if we can pass this to the other components...?\n\n    SegmentInfo info = new SegmentInfo(dir, version, segmentName, docCount, docStoreOffset,\n                                       docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                       delCount, null, diagnostics);\n    info.setDelGen(delGen);\n    return info;\n  }\n\n","sourceOld":"  private SegmentInfo readSegmentInfo(String segmentName, Directory dir, int format, IndexInput input) throws IOException {\n    // check that it is a format we can understand\n    if (format > Lucene3xSegmentInfosFormat.FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_MINIMUM, Lucene3xSegmentInfosFormat.FORMAT_CURRENT);\n    }\n    if (format < Lucene3xSegmentInfosFormat.FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_MINIMUM, Lucene3xSegmentInfosFormat.FORMAT_CURRENT);\n    }\n    final String version;\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n\n    // NOTE: we ignore this and use the incoming arg\n    // instead, if it's non-null:\n    final String name = input.readString();\n    if (segmentName == null) {\n      segmentName = name;\n    }\n\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n\n    //System.out.println(\"version=\" + version + \" name=\" + name + \" docCount=\" + docCount + \" delGen=\" + delGen + \" dso=\" + docStoreOffset + \" dss=\" + docStoreSegment + \" dssCFs=\" + docStoreIsCompoundFile + \" b=\" + b + \" format=\" + format);\n\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_HAS_VECTORS) {\n      input.readByte();\n    }\n\n    // nocommit we can use hasProx/hasVectors from the 3.x\n    // si... if we can pass this to the other components...?\n\n    SegmentInfo info = new SegmentInfo(dir, version, segmentName, docCount, docStoreOffset,\n                                       docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                       delCount, null, diagnostics);\n    info.setDelGen(delGen);\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1494abe5dc85557ec2e2772f87660d48f831c3a5","date":1337614370,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(String,Directory,int,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(String,Directory,int,IndexInput).mjava","sourceNew":"  private SegmentInfo readSegmentInfo(String segmentName, Directory dir, int format, IndexInput input) throws IOException {\n    // check that it is a format we can understand\n    if (format > Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS) {\n      throw new IndexFormatTooOldException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE);\n    }\n    if (format < Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE) {\n      throw new IndexFormatTooNewException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE);\n    }\n    final String version;\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n\n    // NOTE: we ignore this and use the incoming arg\n    // instead, if it's non-null:\n    final String name = input.readString();\n    if (segmentName == null) {\n      segmentName = name;\n    }\n\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n\n    //System.out.println(\"version=\" + version + \" name=\" + name + \" docCount=\" + docCount + \" delGen=\" + delGen + \" dso=\" + docStoreOffset + \" dss=\" + docStoreSegment + \" dssCFs=\" + docStoreIsCompoundFile + \" b=\" + b + \" format=\" + format);\n\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    // nocommit unused...\n    final int hasVectors;\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      hasVectors = -1;\n    }\n\n    final Set<String> files;\n    if (format == Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE) {\n      files = input.readStringSet();\n    } else {\n      // Replicate logic from 3.x's SegmentInfo.files():\n      files = new HashSet<String>();\n      if (isCompoundFile) {\n        files.add(IndexFileNames.segmentFileName(name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      } else {\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", \"fnm\"));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", \"frq\"));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", \"prx\"));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", \"tis\"));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", \"tii\"));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", \"nrm\"));\n      }\n\n      if (docStoreOffset != -1) {\n        if (docStoreIsCompoundFile) {\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", \"cfx\"));\n        } else {\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", \"fdx\"));\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", \"fdt\"));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", \"tvx\"));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", \"tvf\"));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", \"tvd\"));\n        }\n      } else if (!isCompoundFile) {\n        files.add(IndexFileNames.segmentFileName(segmentName, \"\", \"fdx\"));\n        files.add(IndexFileNames.segmentFileName(segmentName, \"\", \"fdt\"));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", \"tvx\"));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", \"tvf\"));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", \"tvd\"));\n      }\n\n      if (normGen != null) {\n        for(Map.Entry<Integer,Long> ent : normGen.entrySet()) {\n          long gen = ent.getValue();\n          if (gen >= SegmentInfo.YES) {\n            // Definitely a separate norm file, with generation:\n            files.add(IndexFileNames.fileNameFromGeneration(segmentName, \"s\" + ent.getKey(), gen));\n          } else if (gen == SegmentInfo.NO) {\n            // No seaprate norm\n          } else {\n            // nocommit -- i thought _X_N.sY files were pre-3.0...????\n            assert false;\n            /*\n            System.out.println(\"FILES: \" + Arrays.toString(dir.listAll()) + \"; seg=\" + segmentName);\n            addIfExists(dir, files, IndexFileNames.fileNameFromGeneration(segmentName, \"s\" + ent.getKey(), gen));\n            assert false: \"gen=\" + gen;\n            */\n          }\n        }\n      }\n    }\n\n    // nocommit we can use hasProx/hasVectors from the 3.x\n    // si... if we can pass this to the other components...?\n\n    SegmentInfo info = new SegmentInfo(dir, version, segmentName, docCount, docStoreOffset,\n                                       docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                       delCount, null, diagnostics);\n    info.setDelGen(delGen);\n    info.setFiles(files);\n    return info;\n  }\n\n","sourceOld":"  private SegmentInfo readSegmentInfo(String segmentName, Directory dir, int format, IndexInput input) throws IOException {\n    // check that it is a format we can understand\n    if (format > Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS) {\n      throw new IndexFormatTooOldException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE);\n    }\n    if (format < Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE) {\n      throw new IndexFormatTooNewException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE);\n    }\n    final String version;\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n\n    // NOTE: we ignore this and use the incoming arg\n    // instead, if it's non-null:\n    final String name = input.readString();\n    if (segmentName == null) {\n      segmentName = name;\n    }\n\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n\n    //System.out.println(\"version=\" + version + \" name=\" + name + \" docCount=\" + docCount + \" delGen=\" + delGen + \" dso=\" + docStoreOffset + \" dss=\" + docStoreSegment + \" dssCFs=\" + docStoreIsCompoundFile + \" b=\" + b + \" format=\" + format);\n\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_HAS_VECTORS) {\n      input.readByte();\n    }\n\n    // nocommit we can use hasProx/hasVectors from the 3.x\n    // si... if we can pass this to the other components...?\n\n    SegmentInfo info = new SegmentInfo(dir, version, segmentName, docCount, docStoreOffset,\n                                       docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                       delCount, null, diagnostics);\n    info.setDelGen(delGen);\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6dce319de558e8b80705326dd04d578f74767d9","date":1337618331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(String,Directory,int,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(String,Directory,int,IndexInput).mjava","sourceNew":"  private SegmentInfo readSegmentInfo(String segmentName, Directory dir, int format, IndexInput input) throws IOException {\n    // check that it is a format we can understand\n    if (format > Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS) {\n      throw new IndexFormatTooOldException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE);\n    }\n    if (format < Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE) {\n      throw new IndexFormatTooNewException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE);\n    }\n    final String version;\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n\n    // NOTE: we ignore this and use the incoming arg\n    // instead, if it's non-null:\n    final String name = input.readString();\n    if (segmentName == null) {\n      segmentName = name;\n    }\n\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n\n    //System.out.println(\"version=\" + version + \" name=\" + name + \" docCount=\" + docCount + \" delGen=\" + delGen + \" dso=\" + docStoreOffset + \" dss=\" + docStoreSegment + \" dssCFs=\" + docStoreIsCompoundFile + \" b=\" + b + \" format=\" + format);\n\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    // nocommit unused...\n    final int hasVectors;\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      hasVectors = -1;\n    }\n\n    final Set<String> files;\n    if (format == Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE) {\n      files = input.readStringSet();\n    } else {\n      // Replicate logic from 3.x's SegmentInfo.files():\n      files = new HashSet<String>();\n      if (isCompoundFile) {\n        files.add(IndexFileNames.segmentFileName(name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      } else {\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xFieldInfosReader.FIELD_INFOS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.FREQ_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.PROX_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xNormsProducer.NORMS_EXTENSION));\n      }\n\n      if (docStoreOffset != -1) {\n        if (docStoreIsCompoundFile) {\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION));\n        } else {\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xStoredFieldsReader.FIELDS_INDEX_EXTENSION));\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xStoredFieldsReader.FIELDS_EXTENSION));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xTermVectorsReader.VECTORS_FIELDS_EXTENSION));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xTermVectorsReader.VECTORS_DOCUMENTS_EXTENSION));\n        }\n      } else if (!isCompoundFile) {\n        files.add(IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xStoredFieldsReader.FIELDS_INDEX_EXTENSION));\n        files.add(IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xStoredFieldsReader.FIELDS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xTermVectorsReader.VECTORS_FIELDS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xTermVectorsReader.VECTORS_DOCUMENTS_EXTENSION));\n      }\n\n      if (normGen != null) {\n        for(Map.Entry<Integer,Long> ent : normGen.entrySet()) {\n          long gen = ent.getValue();\n          if (gen >= SegmentInfo.YES) {\n            // Definitely a separate norm file, with generation:\n            files.add(IndexFileNames.fileNameFromGeneration(segmentName, \"s\" + ent.getKey(), gen));\n          } else if (gen == SegmentInfo.NO) {\n            // No seaprate norm\n          } else {\n            // nocommit -- i thought _X_N.sY files were pre-3.0...????\n            assert false;\n            /*\n            System.out.println(\"FILES: \" + Arrays.toString(dir.listAll()) + \"; seg=\" + segmentName);\n            addIfExists(dir, files, IndexFileNames.fileNameFromGeneration(segmentName, \"s\" + ent.getKey(), gen));\n            assert false: \"gen=\" + gen;\n            */\n          }\n        }\n      }\n    }\n\n    // nocommit we can use hasProx/hasVectors from the 3.x\n    // si... if we can pass this to the other components...?\n\n    SegmentInfo info = new SegmentInfo(dir, version, segmentName, docCount, docStoreOffset,\n                                       docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                       delCount, null, diagnostics);\n    info.setDelGen(delGen);\n    info.setFiles(files);\n    return info;\n  }\n\n","sourceOld":"  private SegmentInfo readSegmentInfo(String segmentName, Directory dir, int format, IndexInput input) throws IOException {\n    // check that it is a format we can understand\n    if (format > Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS) {\n      throw new IndexFormatTooOldException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE);\n    }\n    if (format < Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE) {\n      throw new IndexFormatTooNewException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE);\n    }\n    final String version;\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n\n    // NOTE: we ignore this and use the incoming arg\n    // instead, if it's non-null:\n    final String name = input.readString();\n    if (segmentName == null) {\n      segmentName = name;\n    }\n\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n\n    //System.out.println(\"version=\" + version + \" name=\" + name + \" docCount=\" + docCount + \" delGen=\" + delGen + \" dso=\" + docStoreOffset + \" dss=\" + docStoreSegment + \" dssCFs=\" + docStoreIsCompoundFile + \" b=\" + b + \" format=\" + format);\n\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    // nocommit unused...\n    final int hasVectors;\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      hasVectors = -1;\n    }\n\n    final Set<String> files;\n    if (format == Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE) {\n      files = input.readStringSet();\n    } else {\n      // Replicate logic from 3.x's SegmentInfo.files():\n      files = new HashSet<String>();\n      if (isCompoundFile) {\n        files.add(IndexFileNames.segmentFileName(name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      } else {\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", \"fnm\"));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", \"frq\"));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", \"prx\"));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", \"tis\"));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", \"tii\"));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", \"nrm\"));\n      }\n\n      if (docStoreOffset != -1) {\n        if (docStoreIsCompoundFile) {\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", \"cfx\"));\n        } else {\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", \"fdx\"));\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", \"fdt\"));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", \"tvx\"));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", \"tvf\"));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", \"tvd\"));\n        }\n      } else if (!isCompoundFile) {\n        files.add(IndexFileNames.segmentFileName(segmentName, \"\", \"fdx\"));\n        files.add(IndexFileNames.segmentFileName(segmentName, \"\", \"fdt\"));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", \"tvx\"));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", \"tvf\"));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", \"tvd\"));\n      }\n\n      if (normGen != null) {\n        for(Map.Entry<Integer,Long> ent : normGen.entrySet()) {\n          long gen = ent.getValue();\n          if (gen >= SegmentInfo.YES) {\n            // Definitely a separate norm file, with generation:\n            files.add(IndexFileNames.fileNameFromGeneration(segmentName, \"s\" + ent.getKey(), gen));\n          } else if (gen == SegmentInfo.NO) {\n            // No seaprate norm\n          } else {\n            // nocommit -- i thought _X_N.sY files were pre-3.0...????\n            assert false;\n            /*\n            System.out.println(\"FILES: \" + Arrays.toString(dir.listAll()) + \"; seg=\" + segmentName);\n            addIfExists(dir, files, IndexFileNames.fileNameFromGeneration(segmentName, \"s\" + ent.getKey(), gen));\n            assert false: \"gen=\" + gen;\n            */\n          }\n        }\n      }\n    }\n\n    // nocommit we can use hasProx/hasVectors from the 3.x\n    // si... if we can pass this to the other components...?\n\n    SegmentInfo info = new SegmentInfo(dir, version, segmentName, docCount, docStoreOffset,\n                                       docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                       delCount, null, diagnostics);\n    info.setDelGen(delGen);\n    info.setFiles(files);\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22b3128eea8c61f8f1f387dac6b3e9504bc8036e","date":1337625491,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(String,Directory,int,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(String,Directory,int,IndexInput).mjava","sourceNew":"  private SegmentInfo readSegmentInfo(String segmentName, Directory dir, int format, IndexInput input) throws IOException {\n    // check that it is a format we can understand\n    if (format > Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS) {\n      throw new IndexFormatTooOldException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE);\n    }\n    if (format < Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE) {\n      throw new IndexFormatTooNewException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE);\n    }\n    final String version;\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n\n    // NOTE: we ignore this and use the incoming arg\n    // instead, if it's non-null:\n    final String name = input.readString();\n    if (segmentName == null) {\n      segmentName = name;\n    }\n\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n\n    //System.out.println(\"version=\" + version + \" name=\" + name + \" docCount=\" + docCount + \" delGen=\" + delGen + \" dso=\" + docStoreOffset + \" dss=\" + docStoreSegment + \" dssCFs=\" + docStoreIsCompoundFile + \" b=\" + b + \" format=\" + format);\n\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_HAS_VECTORS) {\n      // NOTE: unused\n      final int hasVectors = input.readByte();\n    }\n\n    final Set<String> files;\n    if (format == Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE) {\n      files = input.readStringSet();\n    } else {\n      // Replicate logic from 3.x's SegmentInfo.files():\n      files = new HashSet<String>();\n      if (isCompoundFile) {\n        files.add(IndexFileNames.segmentFileName(name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      } else {\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xFieldInfosReader.FIELD_INFOS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.FREQ_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.PROX_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xNormsProducer.NORMS_EXTENSION));\n      }\n\n      if (docStoreOffset != -1) {\n        if (docStoreIsCompoundFile) {\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION));\n        } else {\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xStoredFieldsReader.FIELDS_INDEX_EXTENSION));\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xStoredFieldsReader.FIELDS_EXTENSION));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xTermVectorsReader.VECTORS_FIELDS_EXTENSION));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xTermVectorsReader.VECTORS_DOCUMENTS_EXTENSION));\n        }\n      } else if (!isCompoundFile) {\n        files.add(IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xStoredFieldsReader.FIELDS_INDEX_EXTENSION));\n        files.add(IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xStoredFieldsReader.FIELDS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xTermVectorsReader.VECTORS_FIELDS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xTermVectorsReader.VECTORS_DOCUMENTS_EXTENSION));\n      }\n\n      if (normGen != null) {\n        for(Map.Entry<Integer,Long> ent : normGen.entrySet()) {\n          long gen = ent.getValue();\n          if (gen >= SegmentInfo.YES) {\n            // Definitely a separate norm file, with generation:\n            files.add(IndexFileNames.fileNameFromGeneration(segmentName, \"s\" + ent.getKey(), gen));\n          } else if (gen == SegmentInfo.NO) {\n            // No seaprate norm\n          } else {\n            // nocommit -- i thought _X_N.sY files were pre-3.0...????\n            assert false;\n          }\n        }\n      }\n    }\n\n    SegmentInfo info = new SegmentInfo(dir, version, segmentName, docCount, docStoreOffset,\n                                       docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                       delCount, null, diagnostics);\n    info.setDelGen(delGen);\n    info.setFiles(files);\n    return info;\n  }\n\n","sourceOld":"  private SegmentInfo readSegmentInfo(String segmentName, Directory dir, int format, IndexInput input) throws IOException {\n    // check that it is a format we can understand\n    if (format > Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS) {\n      throw new IndexFormatTooOldException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE);\n    }\n    if (format < Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE) {\n      throw new IndexFormatTooNewException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE);\n    }\n    final String version;\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n\n    // NOTE: we ignore this and use the incoming arg\n    // instead, if it's non-null:\n    final String name = input.readString();\n    if (segmentName == null) {\n      segmentName = name;\n    }\n\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n\n    //System.out.println(\"version=\" + version + \" name=\" + name + \" docCount=\" + docCount + \" delGen=\" + delGen + \" dso=\" + docStoreOffset + \" dss=\" + docStoreSegment + \" dssCFs=\" + docStoreIsCompoundFile + \" b=\" + b + \" format=\" + format);\n\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    // nocommit unused...\n    final int hasVectors;\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      hasVectors = -1;\n    }\n\n    final Set<String> files;\n    if (format == Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE) {\n      files = input.readStringSet();\n    } else {\n      // Replicate logic from 3.x's SegmentInfo.files():\n      files = new HashSet<String>();\n      if (isCompoundFile) {\n        files.add(IndexFileNames.segmentFileName(name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      } else {\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xFieldInfosReader.FIELD_INFOS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.FREQ_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.PROX_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xNormsProducer.NORMS_EXTENSION));\n      }\n\n      if (docStoreOffset != -1) {\n        if (docStoreIsCompoundFile) {\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION));\n        } else {\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xStoredFieldsReader.FIELDS_INDEX_EXTENSION));\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xStoredFieldsReader.FIELDS_EXTENSION));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xTermVectorsReader.VECTORS_FIELDS_EXTENSION));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xTermVectorsReader.VECTORS_DOCUMENTS_EXTENSION));\n        }\n      } else if (!isCompoundFile) {\n        files.add(IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xStoredFieldsReader.FIELDS_INDEX_EXTENSION));\n        files.add(IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xStoredFieldsReader.FIELDS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xTermVectorsReader.VECTORS_FIELDS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xTermVectorsReader.VECTORS_DOCUMENTS_EXTENSION));\n      }\n\n      if (normGen != null) {\n        for(Map.Entry<Integer,Long> ent : normGen.entrySet()) {\n          long gen = ent.getValue();\n          if (gen >= SegmentInfo.YES) {\n            // Definitely a separate norm file, with generation:\n            files.add(IndexFileNames.fileNameFromGeneration(segmentName, \"s\" + ent.getKey(), gen));\n          } else if (gen == SegmentInfo.NO) {\n            // No seaprate norm\n          } else {\n            // nocommit -- i thought _X_N.sY files were pre-3.0...????\n            assert false;\n            /*\n            System.out.println(\"FILES: \" + Arrays.toString(dir.listAll()) + \"; seg=\" + segmentName);\n            addIfExists(dir, files, IndexFileNames.fileNameFromGeneration(segmentName, \"s\" + ent.getKey(), gen));\n            assert false: \"gen=\" + gen;\n            */\n          }\n        }\n      }\n    }\n\n    // nocommit we can use hasProx/hasVectors from the 3.x\n    // si... if we can pass this to the other components...?\n\n    SegmentInfo info = new SegmentInfo(dir, version, segmentName, docCount, docStoreOffset,\n                                       docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                       delCount, null, diagnostics);\n    info.setDelGen(delGen);\n    info.setFiles(files);\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ace9b78896617dcee984890f3300d45c539c1b15","date":1337655022,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoReader#readSegmentInfo(String,Directory,int,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(String,Directory,int,IndexInput).mjava","sourceNew":"  private SegmentInfo readSegmentInfo(String segmentName, Directory dir, int format, IndexInput input) throws IOException {\n    // check that it is a format we can understand\n    if (format > Lucene3xSegmentInfoFormat.FORMAT_DIAGNOSTICS) {\n      throw new IndexFormatTooOldException(input, format,\n                                           Lucene3xSegmentInfoFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfoFormat.FORMAT_4X_UPGRADE);\n    }\n    if (format < Lucene3xSegmentInfoFormat.FORMAT_4X_UPGRADE) {\n      throw new IndexFormatTooNewException(input, format,\n                                           Lucene3xSegmentInfoFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfoFormat.FORMAT_4X_UPGRADE);\n    }\n    final String version;\n    if (format <= Lucene3xSegmentInfoFormat.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n\n    // NOTE: we ignore this and use the incoming arg\n    // instead, if it's non-null:\n    final String name = input.readString();\n    if (segmentName == null) {\n      segmentName = name;\n    }\n\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n\n    //System.out.println(\"version=\" + version + \" name=\" + name + \" docCount=\" + docCount + \" delGen=\" + delGen + \" dso=\" + docStoreOffset + \" dss=\" + docStoreSegment + \" dssCFs=\" + docStoreIsCompoundFile + \" b=\" + b + \" format=\" + format);\n\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    if (format <= Lucene3xSegmentInfoFormat.FORMAT_HAS_VECTORS) {\n      // NOTE: unused\n      final int hasVectors = input.readByte();\n    }\n\n    final Set<String> files;\n    if (format == Lucene3xSegmentInfoFormat.FORMAT_4X_UPGRADE) {\n      files = input.readStringSet();\n    } else {\n      // Replicate logic from 3.x's SegmentInfo.files():\n      files = new HashSet<String>();\n      if (isCompoundFile) {\n        files.add(IndexFileNames.segmentFileName(name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      } else {\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xFieldInfosReader.FIELD_INFOS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.FREQ_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.PROX_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xNormsProducer.NORMS_EXTENSION));\n      }\n\n      if (docStoreOffset != -1) {\n        if (docStoreIsCompoundFile) {\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION));\n        } else {\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xStoredFieldsReader.FIELDS_INDEX_EXTENSION));\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xStoredFieldsReader.FIELDS_EXTENSION));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xTermVectorsReader.VECTORS_FIELDS_EXTENSION));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xTermVectorsReader.VECTORS_DOCUMENTS_EXTENSION));\n        }\n      } else if (!isCompoundFile) {\n        files.add(IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xStoredFieldsReader.FIELDS_INDEX_EXTENSION));\n        files.add(IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xStoredFieldsReader.FIELDS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xTermVectorsReader.VECTORS_FIELDS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xTermVectorsReader.VECTORS_DOCUMENTS_EXTENSION));\n      }\n\n      if (normGen != null) {\n        for(Map.Entry<Integer,Long> ent : normGen.entrySet()) {\n          long gen = ent.getValue();\n          if (gen >= SegmentInfo.YES) {\n            // Definitely a separate norm file, with generation:\n            files.add(IndexFileNames.fileNameFromGeneration(segmentName, \"s\" + ent.getKey(), gen));\n          } else if (gen == SegmentInfo.NO) {\n            // No separate norm\n          } else {\n            // nocommit -- i thought _X_N.sY files were pre-3.0...????\n            assert false;\n          }\n        }\n      }\n    }\n\n    SegmentInfo info = new SegmentInfo(dir, version, segmentName, docCount, docStoreOffset,\n                                       docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                       delCount, null, diagnostics);\n    info.setDelGen(delGen);\n    info.setFiles(files);\n    return info;\n  }\n\n","sourceOld":"  private SegmentInfo readSegmentInfo(String segmentName, Directory dir, int format, IndexInput input) throws IOException {\n    // check that it is a format we can understand\n    if (format > Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS) {\n      throw new IndexFormatTooOldException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE);\n    }\n    if (format < Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE) {\n      throw new IndexFormatTooNewException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE);\n    }\n    final String version;\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n\n    // NOTE: we ignore this and use the incoming arg\n    // instead, if it's non-null:\n    final String name = input.readString();\n    if (segmentName == null) {\n      segmentName = name;\n    }\n\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n\n    //System.out.println(\"version=\" + version + \" name=\" + name + \" docCount=\" + docCount + \" delGen=\" + delGen + \" dso=\" + docStoreOffset + \" dss=\" + docStoreSegment + \" dssCFs=\" + docStoreIsCompoundFile + \" b=\" + b + \" format=\" + format);\n\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_HAS_VECTORS) {\n      // NOTE: unused\n      final int hasVectors = input.readByte();\n    }\n\n    final Set<String> files;\n    if (format == Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE) {\n      files = input.readStringSet();\n    } else {\n      // Replicate logic from 3.x's SegmentInfo.files():\n      files = new HashSet<String>();\n      if (isCompoundFile) {\n        files.add(IndexFileNames.segmentFileName(name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      } else {\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xFieldInfosReader.FIELD_INFOS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.FREQ_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.PROX_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xNormsProducer.NORMS_EXTENSION));\n      }\n\n      if (docStoreOffset != -1) {\n        if (docStoreIsCompoundFile) {\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION));\n        } else {\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xStoredFieldsReader.FIELDS_INDEX_EXTENSION));\n          files.add(IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xStoredFieldsReader.FIELDS_EXTENSION));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xTermVectorsReader.VECTORS_FIELDS_EXTENSION));\n          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, \"\", Lucene3xTermVectorsReader.VECTORS_DOCUMENTS_EXTENSION));\n        }\n      } else if (!isCompoundFile) {\n        files.add(IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xStoredFieldsReader.FIELDS_INDEX_EXTENSION));\n        files.add(IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xStoredFieldsReader.FIELDS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xTermVectorsReader.VECTORS_FIELDS_EXTENSION));\n        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, \"\", Lucene3xTermVectorsReader.VECTORS_DOCUMENTS_EXTENSION));\n      }\n\n      if (normGen != null) {\n        for(Map.Entry<Integer,Long> ent : normGen.entrySet()) {\n          long gen = ent.getValue();\n          if (gen >= SegmentInfo.YES) {\n            // Definitely a separate norm file, with generation:\n            files.add(IndexFileNames.fileNameFromGeneration(segmentName, \"s\" + ent.getKey(), gen));\n          } else if (gen == SegmentInfo.NO) {\n            // No seaprate norm\n          } else {\n            // nocommit -- i thought _X_N.sY files were pre-3.0...????\n            assert false;\n          }\n        }\n      }\n    }\n\n    SegmentInfo info = new SegmentInfo(dir, version, segmentName, docCount, docStoreOffset,\n                                       docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                       delCount, null, diagnostics);\n    info.setDelGen(delGen);\n    info.setFiles(files);\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"352763be0465236f8e2ac188aa1b761cb3e1c9ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b2af6b2c05418fb9df466c739ed5b3a153eadde":["352763be0465236f8e2ac188aa1b761cb3e1c9ee"],"22b3128eea8c61f8f1f387dac6b3e9504bc8036e":["b6dce319de558e8b80705326dd04d578f74767d9"],"b6dce319de558e8b80705326dd04d578f74767d9":["1494abe5dc85557ec2e2772f87660d48f831c3a5"],"ace9b78896617dcee984890f3300d45c539c1b15":["22b3128eea8c61f8f1f387dac6b3e9504bc8036e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["9b2af6b2c05418fb9df466c739ed5b3a153eadde"]},"commit2Childs":{"352763be0465236f8e2ac188aa1b761cb3e1c9ee":["9b2af6b2c05418fb9df466c739ed5b3a153eadde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["352763be0465236f8e2ac188aa1b761cb3e1c9ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9b2af6b2c05418fb9df466c739ed5b3a153eadde":["1494abe5dc85557ec2e2772f87660d48f831c3a5"],"22b3128eea8c61f8f1f387dac6b3e9504bc8036e":["ace9b78896617dcee984890f3300d45c539c1b15"],"b6dce319de558e8b80705326dd04d578f74767d9":["22b3128eea8c61f8f1f387dac6b3e9504bc8036e"],"ace9b78896617dcee984890f3300d45c539c1b15":[],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["b6dce319de558e8b80705326dd04d578f74767d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ace9b78896617dcee984890f3300d45c539c1b15","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}