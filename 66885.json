{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#write(Fields).mjava","commits":[{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#write(Fields).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n    try {\n      for(String field : fields) {\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        boolean hasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        TermsEnum termsEnum = terms.iterator(null);\n        TermsWriter termsWriter = new TermsWriter(fieldInfo);\n\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        FixedBitSet docsSeen = new FixedBitSet(maxDoc);\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          BlockTermState termState = postingsWriter.writeTerm(term, termsEnum, docsSeen);\n          if (termState != null) {\n            termsWriter.finishTerm(term, termState);\n            sumTotalTermFreq += termState.totalTermFreq;\n            sumDocFreq += termState.docFreq;\n          }\n        }\n\n        termsWriter.finish(hasFreq ? sumTotalTermFreq : -1, sumDocFreq, docsSeen.cardinality());\n      }\n    } finally {\n      close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63","date":1398957288,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#write(Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      boolean hasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n      TermsEnum termsEnum = terms.iterator(null);\n      TermsWriter termsWriter = new TermsWriter(fieldInfo);\n\n      long sumTotalTermFreq = 0;\n      long sumDocFreq = 0;\n      FixedBitSet docsSeen = new FixedBitSet(maxDoc);\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        BlockTermState termState = postingsWriter.writeTerm(term, termsEnum, docsSeen);\n        if (termState != null) {\n          termsWriter.finishTerm(term, termState);\n          sumTotalTermFreq += termState.totalTermFreq;\n          sumDocFreq += termState.docFreq;\n        }\n      }\n\n      termsWriter.finish(hasFreq ? sumTotalTermFreq : -1, sumDocFreq, docsSeen.cardinality());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n    try {\n      for(String field : fields) {\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        boolean hasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        TermsEnum termsEnum = terms.iterator(null);\n        TermsWriter termsWriter = new TermsWriter(fieldInfo);\n\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        FixedBitSet docsSeen = new FixedBitSet(maxDoc);\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          BlockTermState termState = postingsWriter.writeTerm(term, termsEnum, docsSeen);\n          if (termState != null) {\n            termsWriter.finishTerm(term, termState);\n            sumTotalTermFreq += termState.totalTermFreq;\n            sumDocFreq += termState.docFreq;\n          }\n        }\n\n        termsWriter.finish(hasFreq ? sumTotalTermFreq : -1, sumDocFreq, docsSeen.cardinality());\n      }\n    } finally {\n      close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#write(Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      boolean hasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n      TermsEnum termsEnum = terms.iterator();\n      TermsWriter termsWriter = new TermsWriter(fieldInfo);\n\n      long sumTotalTermFreq = 0;\n      long sumDocFreq = 0;\n      FixedBitSet docsSeen = new FixedBitSet(maxDoc);\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        BlockTermState termState = postingsWriter.writeTerm(term, termsEnum, docsSeen);\n        if (termState != null) {\n          termsWriter.finishTerm(term, termState);\n          sumTotalTermFreq += termState.totalTermFreq;\n          sumDocFreq += termState.docFreq;\n        }\n      }\n\n      termsWriter.finish(hasFreq ? sumTotalTermFreq : -1, sumDocFreq, docsSeen.cardinality());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      boolean hasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n      TermsEnum termsEnum = terms.iterator(null);\n      TermsWriter termsWriter = new TermsWriter(fieldInfo);\n\n      long sumTotalTermFreq = 0;\n      long sumDocFreq = 0;\n      FixedBitSet docsSeen = new FixedBitSet(maxDoc);\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        BlockTermState termState = postingsWriter.writeTerm(term, termsEnum, docsSeen);\n        if (termState != null) {\n          termsWriter.finishTerm(term, termState);\n          sumTotalTermFreq += termState.totalTermFreq;\n          sumDocFreq += termState.docFreq;\n        }\n      }\n\n      termsWriter.finish(hasFreq ? sumTotalTermFreq : -1, sumDocFreq, docsSeen.cardinality());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#write(Fields,NormsProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields, NormsProducer norms) throws IOException {\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      boolean hasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n      TermsEnum termsEnum = terms.iterator();\n      TermsWriter termsWriter = new TermsWriter(fieldInfo);\n\n      long sumTotalTermFreq = 0;\n      long sumDocFreq = 0;\n      FixedBitSet docsSeen = new FixedBitSet(maxDoc);\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        BlockTermState termState = postingsWriter.writeTerm(term, termsEnum, docsSeen, norms);\n        if (termState != null) {\n          termsWriter.finishTerm(term, termState);\n          sumTotalTermFreq += termState.totalTermFreq;\n          sumDocFreq += termState.docFreq;\n        }\n      }\n\n      termsWriter.finish(hasFreq ? sumTotalTermFreq : -1, sumDocFreq, docsSeen.cardinality());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      boolean hasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n      TermsEnum termsEnum = terms.iterator();\n      TermsWriter termsWriter = new TermsWriter(fieldInfo);\n\n      long sumTotalTermFreq = 0;\n      long sumDocFreq = 0;\n      FixedBitSet docsSeen = new FixedBitSet(maxDoc);\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        BlockTermState termState = postingsWriter.writeTerm(term, termsEnum, docsSeen);\n        if (termState != null) {\n          termsWriter.finishTerm(term, termState);\n          sumTotalTermFreq += termState.totalTermFreq;\n          sumDocFreq += termState.docFreq;\n        }\n      }\n\n      termsWriter.finish(hasFreq ? sumTotalTermFreq : -1, sumDocFreq, docsSeen.cardinality());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["7afb64ff3a701f68b2689cafff6c5bdeb4f67f63"],"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["622a708571e534680618b3c5e0c28ac539a47776"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["622a708571e534680618b3c5e0c28ac539a47776"],"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"622a708571e534680618b3c5e0c28ac539a47776":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["7afb64ff3a701f68b2689cafff6c5bdeb4f67f63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}