{"path":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#FixedBitSet(long[],int).mjava","commits":[{"id":"0274c27988a26cb0cda3a0d15b282221b1b453f0","date":1343923460,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#FixedBitSet(long[],int).mjava","pathOld":"/dev/null","sourceNew":"  public FixedBitSet(long[]storedBits,int numBits) {\n    this.numBits = numBits;\n    this.bits = storedBits;\n  }      \n\n","sourceOld":null,"bugFix":null,"bugIntro":["4e991ef3a1dcc08cddb533f26f17a958fd64f982"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#FixedBitSet(long[],int).mjava","pathOld":"/dev/null","sourceNew":"  public FixedBitSet(long[]storedBits,int numBits) {\n    this.numBits = numBits;\n    this.bits = storedBits;\n  }      \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#FixedBitSet(long[],int).mjava","pathOld":"/dev/null","sourceNew":"  public FixedBitSet(long[]storedBits,int numBits) {\n    this.numBits = numBits;\n    this.bits = storedBits;\n  }      \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e991ef3a1dcc08cddb533f26f17a958fd64f982","date":1358522758,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#FixedBitSet(long[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#FixedBitSet(long[],int).mjava","sourceNew":"  public FixedBitSet(long[] storedBits, int numBits) {\n    this.wordLength = bits2words(numBits);\n    if (wordLength > storedBits.length) {\n      throw new IllegalArgumentException(\"The given long array is too small  to hold \" + numBits + \" bits\");\n    }\n    this.numBits = numBits;\n    this.bits = storedBits;\n  }      \n\n","sourceOld":"  public FixedBitSet(long[]storedBits,int numBits) {\n    this.numBits = numBits;\n    this.bits = storedBits;\n  }      \n\n","bugFix":["0274c27988a26cb0cda3a0d15b282221b1b453f0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#FixedBitSet(long[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#FixedBitSet(long[],int).mjava","sourceNew":"  public FixedBitSet(long[] storedBits, int numBits) {\n    this.wordLength = bits2words(numBits);\n    if (wordLength > storedBits.length) {\n      throw new IllegalArgumentException(\"The given long array is too small  to hold \" + numBits + \" bits\");\n    }\n    this.numBits = numBits;\n    this.bits = storedBits;\n  }      \n\n","sourceOld":"  public FixedBitSet(long[]storedBits,int numBits) {\n    this.numBits = numBits;\n    this.bits = storedBits;\n  }      \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0549fc9f9fd9b0fcade08eefc5e220d473ece901","date":1381652492,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#FixedBitSet(long[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#FixedBitSet(long[],int).mjava","sourceNew":"  public FixedBitSet(long[] storedBits, int numBits) {\n    this.wordLength = bits2words(numBits);\n    if (wordLength > storedBits.length) {\n      throw new IllegalArgumentException(\"The given long array is too small  to hold \" + numBits + \" bits\");\n    }\n    this.numBits = numBits;\n    this.bits = storedBits;\n  }\n\n","sourceOld":"  public FixedBitSet(long[] storedBits, int numBits) {\n    this.wordLength = bits2words(numBits);\n    if (wordLength > storedBits.length) {\n      throw new IllegalArgumentException(\"The given long array is too small  to hold \" + numBits + \" bits\");\n    }\n    this.numBits = numBits;\n    this.bits = storedBits;\n  }      \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","date":1392536197,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#FixedBitSet(long[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#FixedBitSet(long[],int).mjava","sourceNew":"  public FixedBitSet(long[] storedBits, int numBits) {\n    this.numWords = bits2words(numBits);\n    if (numWords > storedBits.length) {\n      throw new IllegalArgumentException(\"The given long array is too small  to hold \" + numBits + \" bits\");\n    }\n    this.numBits = numBits;\n    this.bits = storedBits;\n  }\n\n","sourceOld":"  public FixedBitSet(long[] storedBits, int numBits) {\n    this.wordLength = bits2words(numBits);\n    if (wordLength > storedBits.length) {\n      throw new IllegalArgumentException(\"The given long array is too small  to hold \" + numBits + \" bits\");\n    }\n    this.numBits = numBits;\n    this.bits = storedBits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af918c7c328775f9fadd5870c21f0fafc2a059cc","date":1430253435,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#FixedBitSet(long[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#FixedBitSet(long[],int).mjava","sourceNew":"  /**\n   * Creates a new LongBitSet using the provided long[] array as backing store.\n   * The storedBits array must be large enough to accommodate the numBits specified, but may be larger.\n   * In that case the 'extra' or 'ghost' bits must be clear (or they may provoke spurious side-effects)\n   * @param storedBits the array to use as backing store\n   * @param numBits the number of bits actually needed\n   */\n  public FixedBitSet(long[] storedBits, int numBits) {\n    this.numWords = bits2words(numBits);\n    if (numWords > storedBits.length) {\n      throw new IllegalArgumentException(\"The given long array is too small  to hold \" + numBits + \" bits\");\n    }\n    this.numBits = numBits;\n    this.bits = storedBits;\n\n    assert verifyGhostBitsClear();\n  }\n\n","sourceOld":"  public FixedBitSet(long[] storedBits, int numBits) {\n    this.numWords = bits2words(numBits);\n    if (numWords > storedBits.length) {\n      throw new IllegalArgumentException(\"The given long array is too small  to hold \" + numBits + \" bits\");\n    }\n    this.numBits = numBits;\n    this.bits = storedBits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0549fc9f9fd9b0fcade08eefc5e220d473ece901":["4e991ef3a1dcc08cddb533f26f17a958fd64f982"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["0274c27988a26cb0cda3a0d15b282221b1b453f0","4e991ef3a1dcc08cddb533f26f17a958fd64f982"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["0549fc9f9fd9b0fcade08eefc5e220d473ece901"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"0274c27988a26cb0cda3a0d15b282221b1b453f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0274c27988a26cb0cda3a0d15b282221b1b453f0"],"4e991ef3a1dcc08cddb533f26f17a958fd64f982":["0274c27988a26cb0cda3a0d15b282221b1b453f0"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0274c27988a26cb0cda3a0d15b282221b1b453f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af918c7c328775f9fadd5870c21f0fafc2a059cc"]},"commit2Childs":{"0549fc9f9fd9b0fcade08eefc5e220d473ece901":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["af918c7c328775f9fadd5870c21f0fafc2a059cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0274c27988a26cb0cda3a0d15b282221b1b453f0","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"0274c27988a26cb0cda3a0d15b282221b1b453f0":["c4015cd39dff8d4dec562d909f9766debac53aa6","d6f074e73200c07d54f242d3880a8da5a35ff97b","4e991ef3a1dcc08cddb533f26f17a958fd64f982","8fd5be977c105554c6a7b68afcdbc511439723ab"],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"4e991ef3a1dcc08cddb533f26f17a958fd64f982":["0549fc9f9fd9b0fcade08eefc5e220d473ece901","c4015cd39dff8d4dec562d909f9766debac53aa6"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}