{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(boolean).mjava","commits":[{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(ScoredDocIDs,boolean).mjava","sourceNew":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    sfa.setComplementThreshold(withComplement ? StandardFacetsAccumulator.FORCE_COMPLEMENT : StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, sfa.isUsingComplements);\n    \n    return res;\n  }\n\n","sourceOld":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(ScoredDocIDs sDocids, boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    FacetsAccumulator fAccumulator = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    \n    fAccumulator.setComplementThreshold(\n        withComplement ? \n            FacetsAccumulator.FORCE_COMPLEMENT: \n              FacetsAccumulator.DISABLE_COMPLEMENT);\n    \n    List<FacetResult> res = fAccumulator.accumulate(sDocids);\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, ((StandardFacetsAccumulator) fAccumulator).isUsingComplements);\n    \n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestFacetsAccumulatorWithComplement#findFacets(boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#findFacets(boolean).mjava","sourceNew":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    sfa.setComplementThreshold(withComplement ? StandardFacetsAccumulator.FORCE_COMPLEMENT : StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, sfa.isUsingComplements());\n    \n    return res;\n  }\n\n","sourceOld":"  /** compute facets with certain facet requests and docs */\n  private List<FacetResult> findFacets(boolean withComplement) throws IOException {\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10));\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    sfa.setComplementThreshold(withComplement ? StandardFacetsAccumulator.FORCE_COMPLEMENT : StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    FacetsCollector fc = FacetsCollector.create(sfa);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    \n    // Results are ready, printing them...\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      if (VERBOSE) {\n        System.out.println(\"Res \"+(i++)+\": \"+facetResult);\n      }\n    }\n    \n    assertEquals(withComplement, sfa.isUsingComplements);\n    \n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["607428da722dcb3e86bbd11c63de8986e6275c36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}