{"path":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,IndexReader,boolean).mjava","commits":[{"id":"b00d44ccb616bf40482a9ba5302cb256c26c6e4c","date":1249308735,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,IndexReader,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, IndexReader reader, boolean collectPayloads)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    this.collectPayloads = collectPayloads;\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new PayloadSpans[clauses.length];\n    matchPayload = new LinkedList();\n    subSpansByDoc = new PayloadSpans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getPayloadSpans(reader);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff93c6759a7da468c20c64fb459f85bccd0af370","date":1249413002,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,IndexReader,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,IndexReader,boolean).mjava","sourceNew":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, IndexReader reader, boolean collectPayloads)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    this.collectPayloads = collectPayloads;\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new Spans[clauses.length];\n    matchPayload = new LinkedList();\n    subSpansByDoc = new Spans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getSpans(reader);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","sourceOld":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, IndexReader reader, boolean collectPayloads)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    this.collectPayloads = collectPayloads;\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new PayloadSpans[clauses.length];\n    matchPayload = new LinkedList();\n    subSpansByDoc = new PayloadSpans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getPayloadSpans(reader);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,IndexReader,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,IndexReader,boolean).mjava","sourceNew":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, IndexReader reader, boolean collectPayloads)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    this.collectPayloads = collectPayloads;\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new Spans[clauses.length];\n    matchPayload = new LinkedList<byte[]>();\n    subSpansByDoc = new Spans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getSpans(reader);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","sourceOld":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, IndexReader reader, boolean collectPayloads)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    this.collectPayloads = collectPayloads;\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new Spans[clauses.length];\n    matchPayload = new LinkedList();\n    subSpansByDoc = new Spans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getSpans(reader);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,IndexReader,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,IndexReader,boolean).mjava","sourceNew":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, IndexReader reader, boolean collectPayloads)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    this.collectPayloads = collectPayloads;\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new Spans[clauses.length];\n    matchPayload = new LinkedList<byte[]>();\n    subSpansByDoc = new Spans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getSpans(reader);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","sourceOld":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, IndexReader reader, boolean collectPayloads)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    this.collectPayloads = collectPayloads;\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new Spans[clauses.length];\n    matchPayload = new LinkedList<byte[]>();\n    subSpansByDoc = new Spans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getSpans(reader);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b00d44ccb616bf40482a9ba5302cb256c26c6e4c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef82ff03e4016c705811b2658e81471a645c0e49":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff93c6759a7da468c20c64fb459f85bccd0af370":["b00d44ccb616bf40482a9ba5302cb256c26c6e4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"b00d44ccb616bf40482a9ba5302cb256c26c6e4c":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b00d44ccb616bf40482a9ba5302cb256c26c6e4c"],"ef82ff03e4016c705811b2658e81471a645c0e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["ef82ff03e4016c705811b2658e81471a645c0e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}