{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#gridSnap(Shape).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#gridSnap(Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#gridSnap(Shape).mjava","sourceNew":"  protected Shape gridSnap(Shape snapMe) {\n    if (snapMe == null)\n      return null;\n    if (snapMe instanceof ShapePair) {\n      ShapePair me = (ShapePair) snapMe;\n      return new ShapePair(gridSnap(me.shape1), gridSnap(me.shape2), me.biasContainsThenWithin);\n    }\n    if (snapMe instanceof Point) {\n      snapMe = snapMe.getBoundingBox();\n    }\n    //The next 4 lines mimic PrefixTreeStrategy.createIndexableFields()\n    double distErrPct = ((PrefixTreeStrategy) strategy).getDistErrPct();\n    double distErr = SpatialArgs.calcDistanceFromErrPct(snapMe, distErrPct, ctx);\n    int detailLevel = grid.getLevelForDistance(distErr);\n    CellIterator cells = grid.getTreeCellIterator(snapMe, detailLevel);\n\n    //calc bounding box of cells.\n    List<Shape> cellShapes = new ArrayList<>(1024);\n    while (cells.hasNext()) {\n      Cell cell = cells.next();\n      if (!cell.isLeaf())\n        continue;\n      cellShapes.add(cell.getShape());\n    }\n    return new ShapeCollection<>(cellShapes, ctx).getBoundingBox();\n  }\n\n","sourceOld":"  protected Shape gridSnap(Shape snapMe) {\n    if (snapMe == null)\n      return null;\n    if (snapMe instanceof ShapePair) {\n      ShapePair me = (ShapePair) snapMe;\n      return new ShapePair(gridSnap(me.shape1), gridSnap(me.shape2), me.biasContainsThenWithin);\n    }\n    if (snapMe instanceof Point) {\n      snapMe = snapMe.getBoundingBox();\n    }\n    //The next 4 lines mimic PrefixTreeStrategy.createIndexableFields()\n    double distErrPct = ((PrefixTreeStrategy) strategy).getDistErrPct();\n    double distErr = SpatialArgs.calcDistanceFromErrPct(snapMe, distErrPct, ctx);\n    int detailLevel = grid.getLevelForDistance(distErr);\n    CellIterator cells = grid.getTreeCellIterator(snapMe, detailLevel);\n\n    //calc bounding box of cells.\n    List<Shape> cellShapes = new ArrayList<>(1024);\n    while (cells.hasNext()) {\n      Cell cell = cells.next();\n      if (!cell.isLeaf())\n        continue;\n      cellShapes.add(cell.getShape());\n    }\n    return new ShapeCollection<>(cellShapes, ctx).getBoundingBox();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#gridSnap(Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#gridSnap(Shape).mjava","sourceNew":"  protected Shape gridSnap(Shape snapMe) {\n    if (snapMe == null)\n      return null;\n    if (snapMe instanceof ShapePair) {\n      ShapePair me = (ShapePair) snapMe;\n      return new ShapePair(gridSnap(me.shape1), gridSnap(me.shape2), me.biasContainsThenWithin);\n    }\n    if (snapMe instanceof Point) {\n      snapMe = snapMe.getBoundingBox();\n    }\n    //The next 4 lines mimic PrefixTreeStrategy.createIndexableFields()\n    double distErrPct = ((PrefixTreeStrategy) strategy).getDistErrPct();\n    double distErr = SpatialArgs.calcDistanceFromErrPct(snapMe, distErrPct, ctx);\n    int detailLevel = grid.getLevelForDistance(distErr);\n    CellIterator cells = grid.getTreeCellIterator(snapMe, detailLevel);\n\n    //calc bounding box of cells.\n    List<Shape> cellShapes = new ArrayList<>(1024);\n    while (cells.hasNext()) {\n      Cell cell = cells.next();\n      if (!cell.isLeaf())\n        continue;\n      cellShapes.add(cell.getShape());\n    }\n    return new ShapeCollection<>(cellShapes, ctx).getBoundingBox();\n  }\n\n","sourceOld":"  protected Shape gridSnap(Shape snapMe) {\n    if (snapMe == null)\n      return null;\n    if (snapMe instanceof ShapePair) {\n      ShapePair me = (ShapePair) snapMe;\n      return new ShapePair(gridSnap(me.shape1), gridSnap(me.shape2), me.biasContainsThenWithin);\n    }\n    if (snapMe instanceof Point) {\n      snapMe = snapMe.getBoundingBox();\n    }\n    //The next 4 lines mimic PrefixTreeStrategy.createIndexableFields()\n    double distErrPct = ((PrefixTreeStrategy) strategy).getDistErrPct();\n    double distErr = SpatialArgs.calcDistanceFromErrPct(snapMe, distErrPct, ctx);\n    int detailLevel = grid.getLevelForDistance(distErr);\n    CellIterator cells = grid.getTreeCellIterator(snapMe, detailLevel);\n\n    //calc bounding box of cells.\n    List<Shape> cellShapes = new ArrayList<>(1024);\n    while (cells.hasNext()) {\n      Cell cell = cells.next();\n      if (!cell.isLeaf())\n        continue;\n      cellShapes.add(cell.getShape());\n    }\n    return new ShapeCollection<>(cellShapes, ctx).getBoundingBox();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}