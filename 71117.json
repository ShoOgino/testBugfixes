{"path":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","commits":[{"id":"16efeb5e41e35037f154efba9fdbbc13f8bc5cc2","date":1202772354,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","pathOld":"/dev/null","sourceNew":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      ArrayList fields = new ArrayList();      \n      int id = base + nextInt(range);\n      String idString = \"\"+id;\n      Field idField =  new Field(\"id\", idString, Field.Store.YES, Field.Index.NO_NORMS);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        switch (nextInt(4)) {\n          case 0:\n            fields.add(new Field(\"f0\", getString(1), Field.Store.YES, Field.Index.NO_NORMS));\n            break;\n          case 1:\n            fields.add(new Field(\"f1\", getString(0), Field.Store.NO, Field.Index.TOKENIZED));\n            break;\n          case 2:\n            fields.add(new Field(\"f2\", getString(0), Field.Store.YES, Field.Index.NO));\n            break;\n          case 3:\n            fields.add(new Field(\"f3\", getString(bigFieldSize), Field.Store.YES, Field.Index.TOKENIZED));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add((Fieldable) fields.get(i));\n      }\n      w.updateDocument(idTerm.createTerm(idString), d);\n      // System.out.println(\"indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["49adbad5232116eb2448ea8166464e6a68bca007","a5061c2bd3ae625ce9808a1291f32140d3609997"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"49adbad5232116eb2448ea8166464e6a68bca007","date":1202851885,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","sourceNew":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      ArrayList fields = new ArrayList();      \n      int id = base + nextInt(range);\n      String idString = \"\"+id;\n      Field idField =  new Field(\"id\", idString, Field.Store.YES, Field.Index.NO_NORMS);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        Field.TermVector tvVal = Field.TermVector.NO;\n        switch (nextInt(4)) {\n        case 0:\n          tvVal = Field.TermVector.NO;\n          break;\n        case 1:\n          tvVal = Field.TermVector.YES;\n          break;\n        case 2:\n          tvVal = Field.TermVector.WITH_POSITIONS;\n          break;\n        case 3:\n          tvVal = Field.TermVector.WITH_POSITIONS_OFFSETS;\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            fields.add(new Field(\"f0\", getString(1), Field.Store.YES, Field.Index.NO_NORMS, tvVal));\n            break;\n          case 1:\n            fields.add(new Field(\"f1\", getString(0), Field.Store.NO, Field.Index.TOKENIZED, tvVal));\n            break;\n          case 2:\n            fields.add(new Field(\"f2\", getString(0), Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n            break;\n          case 3:\n            fields.add(new Field(\"f3\", getString(bigFieldSize), Field.Store.YES, Field.Index.TOKENIZED, tvVal));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add((Fieldable) fields.get(i));\n      }\n      w.updateDocument(idTerm.createTerm(idString), d);\n      // System.out.println(\"indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","sourceOld":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      ArrayList fields = new ArrayList();      \n      int id = base + nextInt(range);\n      String idString = \"\"+id;\n      Field idField =  new Field(\"id\", idString, Field.Store.YES, Field.Index.NO_NORMS);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        switch (nextInt(4)) {\n          case 0:\n            fields.add(new Field(\"f0\", getString(1), Field.Store.YES, Field.Index.NO_NORMS));\n            break;\n          case 1:\n            fields.add(new Field(\"f1\", getString(0), Field.Store.NO, Field.Index.TOKENIZED));\n            break;\n          case 2:\n            fields.add(new Field(\"f2\", getString(0), Field.Store.YES, Field.Index.NO));\n            break;\n          case 3:\n            fields.add(new Field(\"f3\", getString(bigFieldSize), Field.Store.YES, Field.Index.TOKENIZED));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add((Fieldable) fields.get(i));\n      }\n      w.updateDocument(idTerm.createTerm(idString), d);\n      // System.out.println(\"indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","bugFix":["16efeb5e41e35037f154efba9fdbbc13f8bc5cc2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5061c2bd3ae625ce9808a1291f32140d3609997","date":1204824056,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","sourceNew":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      ArrayList fields = new ArrayList();      \n      String idString = getIdString();\n      Field idField =  new Field(idTerm.field(), idString, Field.Store.YES, Field.Index.NO_NORMS);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        Field.TermVector tvVal = Field.TermVector.NO;\n        switch (nextInt(4)) {\n        case 0:\n          tvVal = Field.TermVector.NO;\n          break;\n        case 1:\n          tvVal = Field.TermVector.YES;\n          break;\n        case 2:\n          tvVal = Field.TermVector.WITH_POSITIONS;\n          break;\n        case 3:\n          tvVal = Field.TermVector.WITH_POSITIONS_OFFSETS;\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            fields.add(new Field(\"f0\", getString(1), Field.Store.YES, Field.Index.NO_NORMS, tvVal));\n            break;\n          case 1:\n            fields.add(new Field(\"f1\", getString(0), Field.Store.NO, Field.Index.TOKENIZED, tvVal));\n            break;\n          case 2:\n            fields.add(new Field(\"f2\", getString(0), Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n            break;\n          case 3:\n            fields.add(new Field(\"f3\", getString(bigFieldSize), Field.Store.YES, Field.Index.TOKENIZED, tvVal));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add((Fieldable) fields.get(i));\n      }\n      w.updateDocument(idTerm.createTerm(idString), d);\n      // System.out.println(\"indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","sourceOld":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      ArrayList fields = new ArrayList();      \n      int id = base + nextInt(range);\n      String idString = \"\"+id;\n      Field idField =  new Field(\"id\", idString, Field.Store.YES, Field.Index.NO_NORMS);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        Field.TermVector tvVal = Field.TermVector.NO;\n        switch (nextInt(4)) {\n        case 0:\n          tvVal = Field.TermVector.NO;\n          break;\n        case 1:\n          tvVal = Field.TermVector.YES;\n          break;\n        case 2:\n          tvVal = Field.TermVector.WITH_POSITIONS;\n          break;\n        case 3:\n          tvVal = Field.TermVector.WITH_POSITIONS_OFFSETS;\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            fields.add(new Field(\"f0\", getString(1), Field.Store.YES, Field.Index.NO_NORMS, tvVal));\n            break;\n          case 1:\n            fields.add(new Field(\"f1\", getString(0), Field.Store.NO, Field.Index.TOKENIZED, tvVal));\n            break;\n          case 2:\n            fields.add(new Field(\"f2\", getString(0), Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n            break;\n          case 3:\n            fields.add(new Field(\"f3\", getString(bigFieldSize), Field.Store.YES, Field.Index.TOKENIZED, tvVal));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add((Fieldable) fields.get(i));\n      }\n      w.updateDocument(idTerm.createTerm(idString), d);\n      // System.out.println(\"indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","bugFix":["16efeb5e41e35037f154efba9fdbbc13f8bc5cc2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8f450af7a7b034413833ed2a9508f99264ea49a","date":1211042958,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","sourceNew":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      ArrayList fields = new ArrayList();      \n      String idString = getIdString();\n      Field idField =  new Field(idTerm.field(), idString, Field.Store.YES, Field.Index.NO_NORMS);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        Field.TermVector tvVal = Field.TermVector.NO;\n        switch (nextInt(4)) {\n        case 0:\n          tvVal = Field.TermVector.NO;\n          break;\n        case 1:\n          tvVal = Field.TermVector.YES;\n          break;\n        case 2:\n          tvVal = Field.TermVector.WITH_POSITIONS;\n          break;\n        case 3:\n          tvVal = Field.TermVector.WITH_POSITIONS_OFFSETS;\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            fields.add(new Field(\"f\" + nextInt(100), getString(1), Field.Store.YES, Field.Index.NO_NORMS, tvVal));\n            break;\n          case 1:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.NO, Field.Index.TOKENIZED, tvVal));\n            break;\n          case 2:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n            break;\n          case 3:\n            fields.add(new Field(\"f\" + nextInt(100), getString(bigFieldSize), Field.Store.YES, Field.Index.TOKENIZED, tvVal));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add((Fieldable) fields.get(i));\n      }\n      w.updateDocument(idTerm.createTerm(idString), d);\n      // System.out.println(\"indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","sourceOld":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      ArrayList fields = new ArrayList();      \n      String idString = getIdString();\n      Field idField =  new Field(idTerm.field(), idString, Field.Store.YES, Field.Index.NO_NORMS);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        Field.TermVector tvVal = Field.TermVector.NO;\n        switch (nextInt(4)) {\n        case 0:\n          tvVal = Field.TermVector.NO;\n          break;\n        case 1:\n          tvVal = Field.TermVector.YES;\n          break;\n        case 2:\n          tvVal = Field.TermVector.WITH_POSITIONS;\n          break;\n        case 3:\n          tvVal = Field.TermVector.WITH_POSITIONS_OFFSETS;\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            fields.add(new Field(\"f0\", getString(1), Field.Store.YES, Field.Index.NO_NORMS, tvVal));\n            break;\n          case 1:\n            fields.add(new Field(\"f1\", getString(0), Field.Store.NO, Field.Index.TOKENIZED, tvVal));\n            break;\n          case 2:\n            fields.add(new Field(\"f2\", getString(0), Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n            break;\n          case 3:\n            fields.add(new Field(\"f3\", getString(bigFieldSize), Field.Store.YES, Field.Index.TOKENIZED, tvVal));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add((Fieldable) fields.get(i));\n      }\n      w.updateDocument(idTerm.createTerm(idString), d);\n      // System.out.println(\"indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","sourceNew":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      ArrayList fields = new ArrayList();      \n      String idString = getIdString();\n      Field idField =  new Field(idTerm.field(), idString, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        Field.TermVector tvVal = Field.TermVector.NO;\n        switch (nextInt(4)) {\n        case 0:\n          tvVal = Field.TermVector.NO;\n          break;\n        case 1:\n          tvVal = Field.TermVector.YES;\n          break;\n        case 2:\n          tvVal = Field.TermVector.WITH_POSITIONS;\n          break;\n        case 3:\n          tvVal = Field.TermVector.WITH_POSITIONS_OFFSETS;\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            fields.add(new Field(\"f\" + nextInt(100), getString(1), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, tvVal));\n            break;\n          case 1:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.NO, Field.Index.ANALYZED, tvVal));\n            break;\n          case 2:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n            break;\n          case 3:\n            fields.add(new Field(\"f\" + nextInt(100), getString(bigFieldSize), Field.Store.YES, Field.Index.ANALYZED, tvVal));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add((Fieldable) fields.get(i));\n      }\n      w.updateDocument(idTerm.createTerm(idString), d);\n      // System.out.println(\"indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","sourceOld":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      ArrayList fields = new ArrayList();      \n      String idString = getIdString();\n      Field idField =  new Field(idTerm.field(), idString, Field.Store.YES, Field.Index.NO_NORMS);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        Field.TermVector tvVal = Field.TermVector.NO;\n        switch (nextInt(4)) {\n        case 0:\n          tvVal = Field.TermVector.NO;\n          break;\n        case 1:\n          tvVal = Field.TermVector.YES;\n          break;\n        case 2:\n          tvVal = Field.TermVector.WITH_POSITIONS;\n          break;\n        case 3:\n          tvVal = Field.TermVector.WITH_POSITIONS_OFFSETS;\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            fields.add(new Field(\"f\" + nextInt(100), getString(1), Field.Store.YES, Field.Index.NO_NORMS, tvVal));\n            break;\n          case 1:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.NO, Field.Index.TOKENIZED, tvVal));\n            break;\n          case 2:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n            break;\n          case 3:\n            fields.add(new Field(\"f\" + nextInt(100), getString(bigFieldSize), Field.Store.YES, Field.Index.TOKENIZED, tvVal));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add((Fieldable) fields.get(i));\n      }\n      w.updateDocument(idTerm.createTerm(idString), d);\n      // System.out.println(\"indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","sourceNew":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      ArrayList<Field> fields = new ArrayList<Field>();      \n      String idString = getIdString();\n      Field idField =  new Field(idTerm.field(), idString, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        Field.TermVector tvVal = Field.TermVector.NO;\n        switch (nextInt(4)) {\n        case 0:\n          tvVal = Field.TermVector.NO;\n          break;\n        case 1:\n          tvVal = Field.TermVector.YES;\n          break;\n        case 2:\n          tvVal = Field.TermVector.WITH_POSITIONS;\n          break;\n        case 3:\n          tvVal = Field.TermVector.WITH_POSITIONS_OFFSETS;\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            fields.add(new Field(\"f\" + nextInt(100), getString(1), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, tvVal));\n            break;\n          case 1:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.NO, Field.Index.ANALYZED, tvVal));\n            break;\n          case 2:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n            break;\n          case 3:\n            fields.add(new Field(\"f\" + nextInt(100), getString(bigFieldSize), Field.Store.YES, Field.Index.ANALYZED, tvVal));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add(fields.get(i));\n      }\n      w.updateDocument(idTerm.createTerm(idString), d);\n      // System.out.println(\"indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","sourceOld":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      ArrayList fields = new ArrayList();      \n      String idString = getIdString();\n      Field idField =  new Field(idTerm.field(), idString, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        Field.TermVector tvVal = Field.TermVector.NO;\n        switch (nextInt(4)) {\n        case 0:\n          tvVal = Field.TermVector.NO;\n          break;\n        case 1:\n          tvVal = Field.TermVector.YES;\n          break;\n        case 2:\n          tvVal = Field.TermVector.WITH_POSITIONS;\n          break;\n        case 3:\n          tvVal = Field.TermVector.WITH_POSITIONS_OFFSETS;\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            fields.add(new Field(\"f\" + nextInt(100), getString(1), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, tvVal));\n            break;\n          case 1:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.NO, Field.Index.ANALYZED, tvVal));\n            break;\n          case 2:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n            break;\n          case 3:\n            fields.add(new Field(\"f\" + nextInt(100), getString(bigFieldSize), Field.Store.YES, Field.Index.ANALYZED, tvVal));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add((Fieldable) fields.get(i));\n      }\n      w.updateDocument(idTerm.createTerm(idString), d);\n      // System.out.println(\"indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","sourceNew":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      ArrayList<Field> fields = new ArrayList<Field>();      \n      String idString = getIdString();\n      Field idField =  new Field(idTerm.field(), idString, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        Field.TermVector tvVal = Field.TermVector.NO;\n        switch (nextInt(4)) {\n        case 0:\n          tvVal = Field.TermVector.NO;\n          break;\n        case 1:\n          tvVal = Field.TermVector.YES;\n          break;\n        case 2:\n          tvVal = Field.TermVector.WITH_POSITIONS;\n          break;\n        case 3:\n          tvVal = Field.TermVector.WITH_POSITIONS_OFFSETS;\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            fields.add(new Field(\"f\" + nextInt(100), getString(1), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, tvVal));\n            break;\n          case 1:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.NO, Field.Index.ANALYZED, tvVal));\n            break;\n          case 2:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n            break;\n          case 3:\n            fields.add(new Field(\"f\" + nextInt(100), getString(bigFieldSize), Field.Store.YES, Field.Index.ANALYZED, tvVal));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add(fields.get(i));\n      }\n      w.updateDocument(idTerm.createTerm(idString), d);\n      // System.out.println(\"indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","sourceOld":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      ArrayList<Field> fields = new ArrayList<Field>();      \n      String idString = getIdString();\n      Field idField =  new Field(idTerm.field(), idString, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        Field.TermVector tvVal = Field.TermVector.NO;\n        switch (nextInt(4)) {\n        case 0:\n          tvVal = Field.TermVector.NO;\n          break;\n        case 1:\n          tvVal = Field.TermVector.YES;\n          break;\n        case 2:\n          tvVal = Field.TermVector.WITH_POSITIONS;\n          break;\n        case 3:\n          tvVal = Field.TermVector.WITH_POSITIONS_OFFSETS;\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            fields.add(new Field(\"f\" + nextInt(100), getString(1), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, tvVal));\n            break;\n          case 1:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.NO, Field.Index.ANALYZED, tvVal));\n            break;\n          case 2:\n            fields.add(new Field(\"f\" + nextInt(100), getString(0), Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n            break;\n          case 3:\n            fields.add(new Field(\"f\" + nextInt(100), getString(bigFieldSize), Field.Store.YES, Field.Index.ANALYZED, tvVal));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add(fields.get(i));\n      }\n      w.updateDocument(idTerm.createTerm(idString), d);\n      // System.out.println(\"indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"49adbad5232116eb2448ea8166464e6a68bca007":["16efeb5e41e35037f154efba9fdbbc13f8bc5cc2"],"e8f450af7a7b034413833ed2a9508f99264ea49a":["a5061c2bd3ae625ce9808a1291f32140d3609997"],"a5061c2bd3ae625ce9808a1291f32140d3609997":["49adbad5232116eb2448ea8166464e6a68bca007"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["e8f450af7a7b034413833ed2a9508f99264ea49a"],"16efeb5e41e35037f154efba9fdbbc13f8bc5cc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"49adbad5232116eb2448ea8166464e6a68bca007":["a5061c2bd3ae625ce9808a1291f32140d3609997"],"e8f450af7a7b034413833ed2a9508f99264ea49a":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"a5061c2bd3ae625ce9808a1291f32140d3609997":["e8f450af7a7b034413833ed2a9508f99264ea49a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16efeb5e41e35037f154efba9fdbbc13f8bc5cc2"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"16efeb5e41e35037f154efba9fdbbc13f8bc5cc2":["49adbad5232116eb2448ea8166464e6a68bca007"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}