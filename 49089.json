{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testPartialReplicationWithTruncatedTlog().mjava","commits":[{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testPartialReplicationWithTruncatedTlog().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest#testPartialReplicationWithTruncatedTlog().mjava","sourceNew":"  /**\n   * Test the scenario where the slave is killed before receiving a commit. This creates a truncated tlog\n   * file on the slave node. The replication strategy should detect this truncated file, and fetch the\n   * non-truncated file from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplicationWithTruncatedTlog() throws Exception {\n    CloudSolrClient client = createCloudClient(SOURCE_COLLECTION);\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    try {\n      for (int i = 0; i < 10; i++) {\n        for (int j = i * 20; j < (i * 20) + 20; j++) {\n          client.add(getDoc(id, Integer.toString(j)));\n\n          // Stop the slave in the middle of a batch to create a truncated tlog on the slave\n          if (j == 45) {\n            ChaosMonkey.stop(slaves.get(0).jetty);\n          }\n\n        }\n        commit(SOURCE_COLLECTION);\n      }\n    } finally {\n      client.close();\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication recovery\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","sourceOld":"  /**\n   * Test the scenario where the slave is killed before receiving a commit. This creates a truncated tlog\n   * file on the slave node. The replication strategy should detect this truncated file, and fetch the\n   * non-truncated file from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplicationWithTruncatedTlog() throws Exception {\n    CloudSolrClient client = createCloudClient(SOURCE_COLLECTION);\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    try {\n      for (int i = 0; i < 10; i++) {\n        for (int j = i * 20; j < (i * 20) + 20; j++) {\n          client.add(getDoc(id, Integer.toString(j)));\n\n          // Stop the slave in the middle of a batch to create a truncated tlog on the slave\n          if (j == 45) {\n            ChaosMonkey.stop(slaves.get(0).jetty);\n          }\n\n        }\n        commit(SOURCE_COLLECTION);\n      }\n    } finally {\n      client.close();\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication recovery\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest#testPartialReplicationWithTruncatedTlog().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testPartialReplicationWithTruncatedTlog().mjava","sourceNew":"  /**\n   * Test the scenario where the slave is killed before receiving a commit. This creates a truncated tlog\n   * file on the slave node. The replication strategy should detect this truncated file, and fetch the\n   * non-truncated file from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplicationWithTruncatedTlog() throws Exception {\n    CloudSolrClient client = createCloudClient(SOURCE_COLLECTION);\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    try {\n      for (int i = 0; i < 10; i++) {\n        for (int j = i * 20; j < (i * 20) + 20; j++) {\n          client.add(getDoc(id, Integer.toString(j)));\n\n          // Stop the slave in the middle of a batch to create a truncated tlog on the slave\n          if (j == 45) {\n            ChaosMonkey.stop(slaves.get(0).jetty);\n          }\n\n        }\n        commit(SOURCE_COLLECTION);\n      }\n    } finally {\n      client.close();\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication recovery\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","sourceOld":"  /**\n   * Test the scenario where the slave is killed before receiving a commit. This creates a truncated tlog\n   * file on the slave node. The replication strategy should detect this truncated file, and fetch the\n   * non-truncated file from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplicationWithTruncatedTlog() throws Exception {\n    CloudSolrClient client = createCloudClient(SOURCE_COLLECTION);\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    try {\n      for (int i = 0; i < 10; i++) {\n        for (int j = i * 20; j < (i * 20) + 20; j++) {\n          client.add(getDoc(id, Integer.toString(j)));\n\n          // Stop the slave in the middle of a batch to create a truncated tlog on the slave\n          if (j == 45) {\n            ChaosMonkey.stop(slaves.get(0).jetty);\n          }\n\n        }\n        commit(SOURCE_COLLECTION);\n      }\n    } finally {\n      client.close();\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication recovery\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testPartialReplicationWithTruncatedTlog().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest#testPartialReplicationWithTruncatedTlog().mjava","sourceNew":"  /**\n   * Test the scenario where the slave is killed before receiving a commit. This creates a truncated tlog\n   * file on the slave node. The replication strategy should detect this truncated file, and fetch the\n   * non-truncated file from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplicationWithTruncatedTlog() throws Exception {\n    CloudSolrClient client = createCloudClient(SOURCE_COLLECTION);\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    try {\n      for (int i = 0; i < 10; i++) {\n        for (int j = i * 20; j < (i * 20) + 20; j++) {\n          client.add(getDoc(id, Integer.toString(j)));\n\n          // Stop the slave in the middle of a batch to create a truncated tlog on the slave\n          if (j == 45) {\n            ChaosMonkey.stop(slaves.get(0).jetty);\n          }\n\n        }\n        commit(SOURCE_COLLECTION);\n      }\n    } finally {\n      client.close();\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication recovery\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","sourceOld":"  /**\n   * Test the scenario where the slave is killed before receiving a commit. This creates a truncated tlog\n   * file on the slave node. The replication strategy should detect this truncated file, and fetch the\n   * non-truncated file from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplicationWithTruncatedTlog() throws Exception {\n    CloudSolrClient client = createCloudClient(SOURCE_COLLECTION);\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    try {\n      for (int i = 0; i < 10; i++) {\n        for (int j = i * 20; j < (i * 20) + 20; j++) {\n          client.add(getDoc(id, Integer.toString(j)));\n\n          // Stop the slave in the middle of a batch to create a truncated tlog on the slave\n          if (j == 45) {\n            ChaosMonkey.stop(slaves.get(0).jetty);\n          }\n\n        }\n        commit(SOURCE_COLLECTION);\n      }\n    } finally {\n      client.close();\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication recovery\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testPartialReplicationWithTruncatedTlog().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest#testPartialReplicationWithTruncatedTlog().mjava","sourceNew":"  /**\n   * Test the scenario where the slave is killed before receiving a commit. This creates a truncated tlog\n   * file on the slave node. The replication strategy should detect this truncated file, and fetch the\n   * non-truncated file from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplicationWithTruncatedTlog() throws Exception {\n    CloudSolrClient client = createCloudClient(SOURCE_COLLECTION);\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    try {\n      for (int i = 0; i < 10; i++) {\n        for (int j = i * 20; j < (i * 20) + 20; j++) {\n          client.add(getDoc(id, Integer.toString(j)));\n\n          // Stop the slave in the middle of a batch to create a truncated tlog on the slave\n          if (j == 45) {\n            ChaosMonkey.stop(slaves.get(0).jetty);\n          }\n\n        }\n        commit(SOURCE_COLLECTION);\n      }\n    } finally {\n      client.close();\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication recovery\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","sourceOld":"  /**\n   * Test the scenario where the slave is killed before receiving a commit. This creates a truncated tlog\n   * file on the slave node. The replication strategy should detect this truncated file, and fetch the\n   * non-truncated file from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplicationWithTruncatedTlog() throws Exception {\n    CloudSolrClient client = createCloudClient(SOURCE_COLLECTION);\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    try {\n      for (int i = 0; i < 10; i++) {\n        for (int j = i * 20; j < (i * 20) + 20; j++) {\n          client.add(getDoc(id, Integer.toString(j)));\n\n          // Stop the slave in the middle of a batch to create a truncated tlog on the slave\n          if (j == 45) {\n            ChaosMonkey.stop(slaves.get(0).jetty);\n          }\n\n        }\n        commit(SOURCE_COLLECTION);\n      }\n    } finally {\n      client.close();\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication recovery\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testPartialReplicationWithTruncatedTlog().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testPartialReplicationWithTruncatedTlog().mjava","sourceNew":"  /**\n   * Test the scenario where the slave is killed before receiving a commit. This creates a truncated tlog\n   * file on the slave node. The replication strategy should detect this truncated file, and fetch the\n   * non-truncated file from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplicationWithTruncatedTlog() throws Exception {\n    CloudSolrClient client = createCloudClient(SOURCE_COLLECTION);\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    try {\n      for (int i = 0; i < 10; i++) {\n        for (int j = i * 20; j < (i * 20) + 20; j++) {\n          client.add(getDoc(id, Integer.toString(j)));\n\n          // Stop the slave in the middle of a batch to create a truncated tlog on the slave\n          if (j == 45) {\n            slaves.get(0).jetty.stop();\n          }\n\n        }\n        commit(SOURCE_COLLECTION);\n      }\n    } finally {\n      client.close();\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication recovery\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","sourceOld":"  /**\n   * Test the scenario where the slave is killed before receiving a commit. This creates a truncated tlog\n   * file on the slave node. The replication strategy should detect this truncated file, and fetch the\n   * non-truncated file from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplicationWithTruncatedTlog() throws Exception {\n    CloudSolrClient client = createCloudClient(SOURCE_COLLECTION);\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    try {\n      for (int i = 0; i < 10; i++) {\n        for (int j = i * 20; j < (i * 20) + 20; j++) {\n          client.add(getDoc(id, Integer.toString(j)));\n\n          // Stop the slave in the middle of a batch to create a truncated tlog on the slave\n          if (j == 45) {\n            ChaosMonkey.stop(slaves.get(0).jetty);\n          }\n\n        }\n        commit(SOURCE_COLLECTION);\n      }\n    } finally {\n      client.close();\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication recovery\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","bugFix":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testPartialReplicationWithTruncatedTlog().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testPartialReplicationWithTruncatedTlog().mjava","sourceNew":"  /**\n   * Test the scenario where the follower is killed before receiving a commit. This creates a truncated tlog\n   * file on the follower node. The replication strategy should detect this truncated file, and fetch the\n   * non-truncated file from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplicationWithTruncatedTlog() throws Exception {\n    CloudSolrClient client = createCloudClient(SOURCE_COLLECTION);\n    List<CloudJettyRunner> followers = this.getShardToFollowerJetty(SOURCE_COLLECTION, SHARD1);\n\n    try {\n      for (int i = 0; i < 10; i++) {\n        for (int j = i * 20; j < (i * 20) + 20; j++) {\n          client.add(getDoc(id, Integer.toString(j)));\n\n          // Stop the follower in the middle of a batch to create a truncated tlog on the follower\n          if (j == 45) {\n            followers.get(0).jetty.stop();\n          }\n\n        }\n        commit(SOURCE_COLLECTION);\n      }\n    } finally {\n      client.close();\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the follower node to trigger Replication recovery\n    this.restartServer(followers.get(0));\n\n    // at this stage, the follower should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","sourceOld":"  /**\n   * Test the scenario where the slave is killed before receiving a commit. This creates a truncated tlog\n   * file on the slave node. The replication strategy should detect this truncated file, and fetch the\n   * non-truncated file from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplicationWithTruncatedTlog() throws Exception {\n    CloudSolrClient client = createCloudClient(SOURCE_COLLECTION);\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n\n    try {\n      for (int i = 0; i < 10; i++) {\n        for (int j = i * 20; j < (i * 20) + 20; j++) {\n          client.add(getDoc(id, Integer.toString(j)));\n\n          // Stop the slave in the middle of a batch to create a truncated tlog on the slave\n          if (j == 45) {\n            slaves.get(0).jetty.stop();\n          }\n\n        }\n        commit(SOURCE_COLLECTION);\n      }\n    } finally {\n      client.close();\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication recovery\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testPartialReplicationWithTruncatedTlog().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test the scenario where the follower is killed before receiving a commit. This creates a truncated tlog\n   * file on the follower node. The replication strategy should detect this truncated file, and fetch the\n   * non-truncated file from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplicationWithTruncatedTlog() throws Exception {\n    CloudSolrClient client = createCloudClient(SOURCE_COLLECTION);\n    List<CloudJettyRunner> followers = this.getShardToFollowerJetty(SOURCE_COLLECTION, SHARD1);\n\n    try {\n      for (int i = 0; i < 10; i++) {\n        for (int j = i * 20; j < (i * 20) + 20; j++) {\n          client.add(getDoc(id, Integer.toString(j)));\n\n          // Stop the follower in the middle of a batch to create a truncated tlog on the follower\n          if (j == 45) {\n            followers.get(0).jetty.stop();\n          }\n\n        }\n        commit(SOURCE_COLLECTION);\n      }\n    } finally {\n      client.close();\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the follower node to trigger Replication recovery\n    this.restartServer(followers.get(0));\n\n    // at this stage, the follower should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e7da9d8536c11576df10e348efa79d2739170936":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7da9d8536c11576df10e348efa79d2739170936"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}