{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","commits":[{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","sourceNew":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      if (compressedLength > compressed.length) {\n        compressed = new byte[ArrayUtil.oversize(compressedLength, 1)];\n      }\n      in.readBytes(compressed, 0, compressedLength);\n\n      decompressor.reset();\n      decompressor.setInput(compressed, 0, compressedLength);\n\n      bytes.offset = bytes.length = 0;\n      while (true) {\n        final int count;\n        try {\n          final int remaining = bytes.bytes.length - bytes.length;\n          count = decompressor.inflate(bytes.bytes, bytes.length, remaining);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        bytes.length += count;\n        if (decompressor.finished()) {\n          break;\n        } else {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes);\n        }\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength);\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","sourceOld":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      if (compressedLength > compressed.length) {\n        compressed = new byte[ArrayUtil.oversize(compressedLength, 1)];\n      }\n      in.readBytes(compressed, 0, compressedLength);\n\n      decompressor.reset();\n      decompressor.setInput(compressed, 0, compressedLength);\n\n      bytes.offset = bytes.length = 0;\n      while (true) {\n        final int count;\n        try {\n          final int remaining = bytes.bytes.length - bytes.length;\n          count = decompressor.inflate(bytes.bytes, bytes.length, remaining);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        bytes.length += count;\n        if (decompressor.finished()) {\n          break;\n        } else {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes);\n        }\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength);\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      if (compressedLength > compressed.length) {\n        compressed = new byte[ArrayUtil.oversize(compressedLength, 1)];\n      }\n      in.readBytes(compressed, 0, compressedLength);\n\n      decompressor.reset();\n      decompressor.setInput(compressed, 0, compressedLength);\n\n      bytes.offset = bytes.length = 0;\n      while (true) {\n        final int count;\n        try {\n          final int remaining = bytes.bytes.length - bytes.length;\n          count = decompressor.inflate(bytes.bytes, bytes.length, remaining);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        bytes.length += count;\n        if (decompressor.finished()) {\n          break;\n        } else {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes);\n        }\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength);\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90f762b9c981401224de7f0a7c1ffc8fbc67574f","date":1366475889,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","sourceNew":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      if (compressedLength > compressed.length) {\n        compressed = new byte[ArrayUtil.oversize(compressedLength, 1)];\n      }\n      in.readBytes(compressed, 0, compressedLength);\n\n      decompressor.reset();\n      decompressor.setInput(compressed, 0, compressedLength);\n\n      bytes.offset = bytes.length = 0;\n      while (true) {\n        final int count;\n        try {\n          final int remaining = bytes.bytes.length - bytes.length;\n          count = decompressor.inflate(bytes.bytes, bytes.length, remaining);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        bytes.length += count;\n        if (decompressor.finished()) {\n          break;\n        } else {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes);\n        }\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength + \" (resource=\" + in + \")\");\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","sourceOld":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      if (compressedLength > compressed.length) {\n        compressed = new byte[ArrayUtil.oversize(compressedLength, 1)];\n      }\n      in.readBytes(compressed, 0, compressedLength);\n\n      decompressor.reset();\n      decompressor.setInput(compressed, 0, compressedLength);\n\n      bytes.offset = bytes.length = 0;\n      while (true) {\n        final int count;\n        try {\n          final int remaining = bytes.bytes.length - bytes.length;\n          count = decompressor.inflate(bytes.bytes, bytes.length, remaining);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        bytes.length += count;\n        if (decompressor.finished()) {\n          break;\n        } else {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes);\n        }\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength);\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","sourceNew":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      if (compressedLength > compressed.length) {\n        compressed = new byte[ArrayUtil.oversize(compressedLength, 1)];\n      }\n      in.readBytes(compressed, 0, compressedLength);\n\n      decompressor.reset();\n      decompressor.setInput(compressed, 0, compressedLength);\n\n      bytes.offset = bytes.length = 0;\n      while (true) {\n        final int count;\n        try {\n          final int remaining = bytes.bytes.length - bytes.length;\n          count = decompressor.inflate(bytes.bytes, bytes.length, remaining);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        bytes.length += count;\n        if (decompressor.finished()) {\n          break;\n        } else {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes);\n        }\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength, in);\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","sourceOld":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      if (compressedLength > compressed.length) {\n        compressed = new byte[ArrayUtil.oversize(compressedLength, 1)];\n      }\n      in.readBytes(compressed, 0, compressedLength);\n\n      decompressor.reset();\n      decompressor.setInput(compressed, 0, compressedLength);\n\n      bytes.offset = bytes.length = 0;\n      while (true) {\n        final int count;\n        try {\n          final int remaining = bytes.bytes.length - bytes.length;\n          count = decompressor.inflate(bytes.bytes, bytes.length, remaining);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        bytes.length += count;\n        if (decompressor.finished()) {\n          break;\n        } else {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes);\n        }\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength + \" (resource=\" + in + \")\");\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","bugFix":["90f762b9c981401224de7f0a7c1ffc8fbc67574f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f9d6780ddcbc546087d0b8a2b6db9cd8f9b4f74","date":1417601354,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","sourceNew":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      // pad with extra \"dummy byte\": see javadocs for using Inflater(true)\n      // we do it for compliance, but its unnecessary for years in zlib.\n      final int paddedLength = compressedLength + 1;\n      if (paddedLength > compressed.length) {\n        compressed = new byte[ArrayUtil.oversize(paddedLength, 1)];\n      }\n      in.readBytes(compressed, 0, compressedLength);\n      compressed[compressedLength] = 0; // explicitly set dummy byte to 0\n\n      decompressor.reset();\n      // extra \"dummy byte\"\n      decompressor.setInput(compressed, 0, paddedLength);\n\n      bytes.offset = bytes.length = 0;\n      while (true) {\n        final int count;\n        try {\n          final int remaining = bytes.bytes.length - bytes.length;\n          count = decompressor.inflate(bytes.bytes, bytes.length, remaining);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        bytes.length += count;\n        if (decompressor.finished()) {\n          break;\n        } else {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes);\n        }\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength, in);\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","sourceOld":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      if (compressedLength > compressed.length) {\n        compressed = new byte[ArrayUtil.oversize(compressedLength, 1)];\n      }\n      in.readBytes(compressed, 0, compressedLength);\n\n      decompressor.reset();\n      decompressor.setInput(compressed, 0, compressedLength);\n\n      bytes.offset = bytes.length = 0;\n      while (true) {\n        final int count;\n        try {\n          final int remaining = bytes.bytes.length - bytes.length;\n          count = decompressor.inflate(bytes.bytes, bytes.length, remaining);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        bytes.length += count;\n        if (decompressor.finished()) {\n          break;\n        } else {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes);\n        }\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength, in);\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","bugFix":null,"bugIntro":["3c1f2351d093e8006e8c74a1cb6cdf4b2cbdb401"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","sourceNew":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      // pad with extra \"dummy byte\": see javadocs for using Inflater(true)\n      // we do it for compliance, but it's unnecessary for years in zlib.\n      final int paddedLength = compressedLength + 1;\n      if (paddedLength > compressed.length) {\n        compressed = new byte[ArrayUtil.oversize(paddedLength, 1)];\n      }\n      in.readBytes(compressed, 0, compressedLength);\n      compressed[compressedLength] = 0; // explicitly set dummy byte to 0\n\n      decompressor.reset();\n      // extra \"dummy byte\"\n      decompressor.setInput(compressed, 0, paddedLength);\n\n      bytes.offset = bytes.length = 0;\n      while (true) {\n        final int count;\n        try {\n          final int remaining = bytes.bytes.length - bytes.length;\n          count = decompressor.inflate(bytes.bytes, bytes.length, remaining);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        bytes.length += count;\n        if (decompressor.finished()) {\n          break;\n        } else {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes);\n        }\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength, in);\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","sourceOld":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      // pad with extra \"dummy byte\": see javadocs for using Inflater(true)\n      // we do it for compliance, but its unnecessary for years in zlib.\n      final int paddedLength = compressedLength + 1;\n      if (paddedLength > compressed.length) {\n        compressed = new byte[ArrayUtil.oversize(paddedLength, 1)];\n      }\n      in.readBytes(compressed, 0, compressedLength);\n      compressed[compressedLength] = 0; // explicitly set dummy byte to 0\n\n      decompressor.reset();\n      // extra \"dummy byte\"\n      decompressor.setInput(compressed, 0, paddedLength);\n\n      bytes.offset = bytes.length = 0;\n      while (true) {\n        final int count;\n        try {\n          final int remaining = bytes.bytes.length - bytes.length;\n          count = decompressor.inflate(bytes.bytes, bytes.length, remaining);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        bytes.length += count;\n        if (decompressor.finished()) {\n          break;\n        } else {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes);\n        }\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength, in);\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96b48885f09e1b37ef92039d171e8543b5df201f","date":1419783324,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","sourceNew":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      // pad with extra \"dummy byte\": see javadocs for using Inflater(true)\n      // we do it for compliance, but it's unnecessary for years in zlib.\n      final int paddedLength = compressedLength + 1;\n      compressed = ArrayUtil.grow(compressed, paddedLength);\n      in.readBytes(compressed, 0, compressedLength);\n      compressed[compressedLength] = 0; // explicitly set dummy byte to 0\n\n      decompressor.reset();\n      // extra \"dummy byte\"\n      decompressor.setInput(compressed, 0, paddedLength);\n\n      bytes.offset = bytes.length = 0;\n      bytes.bytes = ArrayUtil.grow(bytes.bytes, originalLength);\n      try {\n        bytes.length = decompressor.inflate(bytes.bytes, bytes.length, originalLength);\n      } catch (DataFormatException e) {\n        throw new IOException(e);\n      }\n      if (!decompressor.finished()) {\n        throw new CorruptIndexException(\"Invalid decoder state: needsInput=\" + decompressor.needsInput() \n                                                            + \", needsDict=\" + decompressor.needsDictionary(), in);\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength, in);\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","sourceOld":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      // pad with extra \"dummy byte\": see javadocs for using Inflater(true)\n      // we do it for compliance, but it's unnecessary for years in zlib.\n      final int paddedLength = compressedLength + 1;\n      if (paddedLength > compressed.length) {\n        compressed = new byte[ArrayUtil.oversize(paddedLength, 1)];\n      }\n      in.readBytes(compressed, 0, compressedLength);\n      compressed[compressedLength] = 0; // explicitly set dummy byte to 0\n\n      decompressor.reset();\n      // extra \"dummy byte\"\n      decompressor.setInput(compressed, 0, paddedLength);\n\n      bytes.offset = bytes.length = 0;\n      while (true) {\n        final int count;\n        try {\n          final int remaining = bytes.bytes.length - bytes.length;\n          count = decompressor.inflate(bytes.bytes, bytes.length, remaining);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        bytes.length += count;\n        if (decompressor.finished()) {\n          break;\n        } else {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes);\n        }\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength, in);\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","bugFix":null,"bugIntro":["3c1f2351d093e8006e8c74a1cb6cdf4b2cbdb401"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3c1f2351d093e8006e8c74a1cb6cdf4b2cbdb401","date":1485357304,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","sourceNew":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      // pad with extra \"dummy byte\": see javadocs for using Inflater(true)\n      // we do it for compliance, but it's unnecessary for years in zlib.\n      final int paddedLength = compressedLength + 1;\n      compressed = ArrayUtil.grow(compressed, paddedLength);\n      in.readBytes(compressed, 0, compressedLength);\n      compressed[compressedLength] = 0; // explicitly set dummy byte to 0\n\n      final Inflater decompressor = new Inflater(true);\n      try {\n        // extra \"dummy byte\"\n        decompressor.setInput(compressed, 0, paddedLength);\n\n        bytes.offset = bytes.length = 0;\n        bytes.bytes = ArrayUtil.grow(bytes.bytes, originalLength);\n        try {\n          bytes.length = decompressor.inflate(bytes.bytes, bytes.length, originalLength);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        if (!decompressor.finished()) {\n          throw new CorruptIndexException(\"Invalid decoder state: needsInput=\" + decompressor.needsInput()\n                                                              + \", needsDict=\" + decompressor.needsDictionary(), in);\n        }\n      } finally {\n        decompressor.end();\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength, in);\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","sourceOld":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      // pad with extra \"dummy byte\": see javadocs for using Inflater(true)\n      // we do it for compliance, but it's unnecessary for years in zlib.\n      final int paddedLength = compressedLength + 1;\n      compressed = ArrayUtil.grow(compressed, paddedLength);\n      in.readBytes(compressed, 0, compressedLength);\n      compressed[compressedLength] = 0; // explicitly set dummy byte to 0\n\n      decompressor.reset();\n      // extra \"dummy byte\"\n      decompressor.setInput(compressed, 0, paddedLength);\n\n      bytes.offset = bytes.length = 0;\n      bytes.bytes = ArrayUtil.grow(bytes.bytes, originalLength);\n      try {\n        bytes.length = decompressor.inflate(bytes.bytes, bytes.length, originalLength);\n      } catch (DataFormatException e) {\n        throw new IOException(e);\n      }\n      if (!decompressor.finished()) {\n        throw new CorruptIndexException(\"Invalid decoder state: needsInput=\" + decompressor.needsInput() \n                                                            + \", needsDict=\" + decompressor.needsDictionary(), in);\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength, in);\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","bugFix":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","5af6a67fb827380f7fe2fdf3baa34b10b783f2f1","96b48885f09e1b37ef92039d171e8543b5df201f","9ee663728a95682ffb5dee37517ac9e863cd0820","3f9d6780ddcbc546087d0b8a2b6db9cd8f9b4f74"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","sourceNew":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      // pad with extra \"dummy byte\": see javadocs for using Inflater(true)\n      // we do it for compliance, but it's unnecessary for years in zlib.\n      final int paddedLength = compressedLength + 1;\n      compressed = ArrayUtil.grow(compressed, paddedLength);\n      in.readBytes(compressed, 0, compressedLength);\n      compressed[compressedLength] = 0; // explicitly set dummy byte to 0\n\n      final Inflater decompressor = new Inflater(true);\n      try {\n        // extra \"dummy byte\"\n        decompressor.setInput(compressed, 0, paddedLength);\n\n        bytes.offset = bytes.length = 0;\n        bytes.bytes = ArrayUtil.grow(bytes.bytes, originalLength);\n        try {\n          bytes.length = decompressor.inflate(bytes.bytes, bytes.length, originalLength);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        if (!decompressor.finished()) {\n          throw new CorruptIndexException(\"Invalid decoder state: needsInput=\" + decompressor.needsInput()\n                                                              + \", needsDict=\" + decompressor.needsDictionary(), in);\n        }\n      } finally {\n        decompressor.end();\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength, in);\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","sourceOld":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      // pad with extra \"dummy byte\": see javadocs for using Inflater(true)\n      // we do it for compliance, but it's unnecessary for years in zlib.\n      final int paddedLength = compressedLength + 1;\n      compressed = ArrayUtil.grow(compressed, paddedLength);\n      in.readBytes(compressed, 0, compressedLength);\n      compressed[compressedLength] = 0; // explicitly set dummy byte to 0\n\n      decompressor.reset();\n      // extra \"dummy byte\"\n      decompressor.setInput(compressed, 0, paddedLength);\n\n      bytes.offset = bytes.length = 0;\n      bytes.bytes = ArrayUtil.grow(bytes.bytes, originalLength);\n      try {\n        bytes.length = decompressor.inflate(bytes.bytes, bytes.length, originalLength);\n      } catch (DataFormatException e) {\n        throw new IOException(e);\n      }\n      if (!decompressor.finished()) {\n        throw new CorruptIndexException(\"Invalid decoder state: needsInput=\" + decompressor.needsInput() \n                                                            + \", needsDict=\" + decompressor.needsDictionary(), in);\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength, in);\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90f762b9c981401224de7f0a7c1ffc8fbc67574f":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["3f9d6780ddcbc546087d0b8a2b6db9cd8f9b4f74"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["90f762b9c981401224de7f0a7c1ffc8fbc67574f"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["96b48885f09e1b37ef92039d171e8543b5df201f","3c1f2351d093e8006e8c74a1cb6cdf4b2cbdb401"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"3f9d6780ddcbc546087d0b8a2b6db9cd8f9b4f74":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"3c1f2351d093e8006e8c74a1cb6cdf4b2cbdb401":["96b48885f09e1b37ef92039d171e8543b5df201f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c1f2351d093e8006e8c74a1cb6cdf4b2cbdb401"],"96b48885f09e1b37ef92039d171e8543b5df201f":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"90f762b9c981401224de7f0a7c1ffc8fbc67574f":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["96b48885f09e1b37ef92039d171e8543b5df201f"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["3f9d6780ddcbc546087d0b8a2b6db9cd8f9b4f74"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["90f762b9c981401224de7f0a7c1ffc8fbc67574f","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3f9d6780ddcbc546087d0b8a2b6db9cd8f9b4f74":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"3c1f2351d093e8006e8c74a1cb6cdf4b2cbdb401":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"96b48885f09e1b37ef92039d171e8543b5df201f":["598b5d23aa7c9732bf473c21a9cd309c44599394","3c1f2351d093e8006e8c74a1cb6cdf4b2cbdb401"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}