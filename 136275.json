{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#checkOutput(String,String,String,String,String).mjava","commits":[{"id":"47777586dd4c026834be0b2cc454d527cf8884b3","date":1330348390,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#checkOutput(String,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkOutput(String input, String pattern, String replacement,\n      String expectedOutput, String expectedIndexMatchedOutput) throws IOException {\n    CharStream cs = new PatternReplaceCharFilter(pattern(pattern), replacement,\n        CharReader.get(new StringReader(input)));\n\n    StringBuilder output = new StringBuilder();\n    for (int chr = cs.read(); chr > 0; chr = cs.read()) {\n      output.append((char) chr);\n    }\n\n    StringBuilder indexMatched = new StringBuilder();\n    for (int i = 0; i < output.length(); i++) {\n      indexMatched.append((cs.correctOffset(i) < 0 ? \"-\" : input.charAt(cs.correctOffset(i))));\n    }\n\n    boolean outputGood = expectedOutput.equals(output.toString());\n    boolean indexMatchedGood = expectedIndexMatchedOutput.equals(indexMatched.toString());\n\n    if (!outputGood || !indexMatchedGood || false) {\n      System.out.println(\"Pattern : \" + pattern);\n      System.out.println(\"Replac. : \" + replacement);\n      System.out.println(\"Input   : \" + input);\n      System.out.println(\"Output  : \" + output);\n      System.out.println(\"Expected: \" + expectedOutput);\n      System.out.println(\"Output/i: \" + indexMatched);\n      System.out.println(\"Expected: \" + expectedIndexMatchedOutput);\n      System.out.println();\n    }\n\n    assertTrue(\"Output doesn't match.\", outputGood);\n    assertTrue(\"Index-matched output doesn't match.\", indexMatchedGood);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#checkOutput(String,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkOutput(String input, String pattern, String replacement,\n      String expectedOutput, String expectedIndexMatchedOutput) throws IOException {\n    CharStream cs = new PatternReplaceCharFilter(pattern(pattern), replacement,\n        CharReader.get(new StringReader(input)));\n\n    StringBuilder output = new StringBuilder();\n    for (int chr = cs.read(); chr > 0; chr = cs.read()) {\n      output.append((char) chr);\n    }\n\n    StringBuilder indexMatched = new StringBuilder();\n    for (int i = 0; i < output.length(); i++) {\n      indexMatched.append((cs.correctOffset(i) < 0 ? \"-\" : input.charAt(cs.correctOffset(i))));\n    }\n\n    boolean outputGood = expectedOutput.equals(output.toString());\n    boolean indexMatchedGood = expectedIndexMatchedOutput.equals(indexMatched.toString());\n\n    if (!outputGood || !indexMatchedGood || false) {\n      System.out.println(\"Pattern : \" + pattern);\n      System.out.println(\"Replac. : \" + replacement);\n      System.out.println(\"Input   : \" + input);\n      System.out.println(\"Output  : \" + output);\n      System.out.println(\"Expected: \" + expectedOutput);\n      System.out.println(\"Output/i: \" + indexMatched);\n      System.out.println(\"Expected: \" + expectedIndexMatchedOutput);\n      System.out.println();\n    }\n\n    assertTrue(\"Output doesn't match.\", outputGood);\n    assertTrue(\"Index-matched output doesn't match.\", indexMatchedGood);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#checkOutput(String,String,String,String,String).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#checkOutput(String,String,String,String,String).mjava","sourceNew":"  private void checkOutput(String input, String pattern, String replacement,\n      String expectedOutput, String expectedIndexMatchedOutput) throws IOException {\n    CharStream cs = new PatternReplaceCharFilter(pattern(pattern), replacement,\n        CharReader.get(new StringReader(input)));\n\n    StringBuilder output = new StringBuilder();\n    for (int chr = cs.read(); chr > 0; chr = cs.read()) {\n      output.append((char) chr);\n    }\n\n    StringBuilder indexMatched = new StringBuilder();\n    for (int i = 0; i < output.length(); i++) {\n      indexMatched.append((cs.correctOffset(i) < 0 ? \"-\" : input.charAt(cs.correctOffset(i))));\n    }\n\n    boolean outputGood = expectedOutput.equals(output.toString());\n    boolean indexMatchedGood = expectedIndexMatchedOutput.equals(indexMatched.toString());\n\n    if (!outputGood || !indexMatchedGood || false) {\n      System.out.println(\"Pattern : \" + pattern);\n      System.out.println(\"Replac. : \" + replacement);\n      System.out.println(\"Input   : \" + input);\n      System.out.println(\"Output  : \" + output);\n      System.out.println(\"Expected: \" + expectedOutput);\n      System.out.println(\"Output/i: \" + indexMatched);\n      System.out.println(\"Expected: \" + expectedIndexMatchedOutput);\n      System.out.println();\n    }\n\n    assertTrue(\"Output doesn't match.\", outputGood);\n    assertTrue(\"Index-matched output doesn't match.\", indexMatchedGood);\n  }\n\n","sourceOld":"  private void checkOutput(String input, String pattern, String replacement,\n      String expectedOutput, String expectedIndexMatchedOutput) throws IOException {\n    CharStream cs = new PatternReplaceCharFilter(pattern(pattern), replacement,\n        CharReader.get(new StringReader(input)));\n\n    StringBuilder output = new StringBuilder();\n    for (int chr = cs.read(); chr > 0; chr = cs.read()) {\n      output.append((char) chr);\n    }\n\n    StringBuilder indexMatched = new StringBuilder();\n    for (int i = 0; i < output.length(); i++) {\n      indexMatched.append((cs.correctOffset(i) < 0 ? \"-\" : input.charAt(cs.correctOffset(i))));\n    }\n\n    boolean outputGood = expectedOutput.equals(output.toString());\n    boolean indexMatchedGood = expectedIndexMatchedOutput.equals(indexMatched.toString());\n\n    if (!outputGood || !indexMatchedGood || false) {\n      System.out.println(\"Pattern : \" + pattern);\n      System.out.println(\"Replac. : \" + replacement);\n      System.out.println(\"Input   : \" + input);\n      System.out.println(\"Output  : \" + output);\n      System.out.println(\"Expected: \" + expectedOutput);\n      System.out.println(\"Output/i: \" + indexMatched);\n      System.out.println(\"Expected: \" + expectedIndexMatchedOutput);\n      System.out.println();\n    }\n\n    assertTrue(\"Output doesn't match.\", outputGood);\n    assertTrue(\"Index-matched output doesn't match.\", indexMatchedGood);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["47777586dd4c026834be0b2cc454d527cf8884b3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","47777586dd4c026834be0b2cc454d527cf8884b3"],"47777586dd4c026834be0b2cc454d527cf8884b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"47777586dd4c026834be0b2cc454d527cf8884b3":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","47777586dd4c026834be0b2cc454d527cf8884b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}