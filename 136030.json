{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorerSupplier(LeafReaderContext).mjava","commits":[{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    int minShouldMatch = query.getMinimumNumberShouldMatch();\n\n    final Map<Occur, Collection<ScorerSupplier>> scorers = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      scorers.put(occur, new ArrayList<>());\n    }\n\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      ScorerSupplier subScorer = w.scorerSupplier(context);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else {\n        scorers.get(c.getOccur()).add(subScorer);\n      }\n    }\n\n    // scorer simplifications:\n    \n    if (scorers.get(Occur.SHOULD).size() == minShouldMatch) {\n      // any optional clauses are in fact required\n      scorers.get(Occur.MUST).addAll(scorers.get(Occur.SHOULD));\n      scorers.get(Occur.SHOULD).clear();\n      minShouldMatch = 0;\n    }\n    \n    if (scorers.get(Occur.FILTER).isEmpty() && scorers.get(Occur.MUST).isEmpty() && scorers.get(Occur.SHOULD).isEmpty()) {\n      // no required and optional clauses.\n      return null;\n    } else if (scorers.get(Occur.SHOULD).size() < minShouldMatch) {\n      // either >1 req scorer, or there are 0 req scorers and at least 1\n      // optional scorer. Therefore if there are not enough optional scorers\n      // no documents will be matched by the query\n      return null;\n    }\n\n    // we don't need scores, so if we have required clauses, drop optional clauses completely\n    if (!needsScores && minShouldMatch == 0 && scorers.get(Occur.MUST).size() + scorers.get(Occur.FILTER).size() > 0) {\n      scorers.get(Occur.SHOULD).clear();\n    }\n\n    return new Boolean2ScorerSupplier(this, scorers, needsScores, minShouldMatch);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    int minShouldMatch = query.getMinimumNumberShouldMatch();\n\n    final Map<Occur, Collection<ScorerSupplier>> scorers = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      scorers.put(occur, new ArrayList<>());\n    }\n\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      ScorerSupplier subScorer = w.scorerSupplier(context);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else {\n        scorers.get(c.getOccur()).add(subScorer);\n      }\n    }\n\n    // scorer simplifications:\n    \n    if (scorers.get(Occur.SHOULD).size() == minShouldMatch) {\n      // any optional clauses are in fact required\n      scorers.get(Occur.MUST).addAll(scorers.get(Occur.SHOULD));\n      scorers.get(Occur.SHOULD).clear();\n      minShouldMatch = 0;\n    }\n    \n    if (scorers.get(Occur.FILTER).isEmpty() && scorers.get(Occur.MUST).isEmpty() && scorers.get(Occur.SHOULD).isEmpty()) {\n      // no required and optional clauses.\n      return null;\n    } else if (scorers.get(Occur.SHOULD).size() < minShouldMatch) {\n      // either >1 req scorer, or there are 0 req scorers and at least 1\n      // optional scorer. Therefore if there are not enough optional scorers\n      // no documents will be matched by the query\n      return null;\n    }\n\n    // we don't need scores, so if we have required clauses, drop optional clauses completely\n    if (!needsScores && minShouldMatch == 0 && scorers.get(Occur.MUST).size() + scorers.get(Occur.FILTER).size() > 0) {\n      scorers.get(Occur.SHOULD).clear();\n    }\n\n    return new Boolean2ScorerSupplier(this, scorers, needsScores, minShouldMatch);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorerSupplier(LeafReaderContext).mjava","sourceNew":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    int minShouldMatch = query.getMinimumNumberShouldMatch();\n\n    final Map<Occur, Collection<ScorerSupplier>> scorers = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      scorers.put(occur, new ArrayList<>());\n    }\n\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      ScorerSupplier subScorer = w.scorerSupplier(context);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else {\n        scorers.get(c.getOccur()).add(subScorer);\n      }\n    }\n\n    // scorer simplifications:\n    \n    if (scorers.get(Occur.SHOULD).size() == minShouldMatch) {\n      // any optional clauses are in fact required\n      scorers.get(Occur.MUST).addAll(scorers.get(Occur.SHOULD));\n      scorers.get(Occur.SHOULD).clear();\n      minShouldMatch = 0;\n    }\n    \n    if (scorers.get(Occur.FILTER).isEmpty() && scorers.get(Occur.MUST).isEmpty() && scorers.get(Occur.SHOULD).isEmpty()) {\n      // no required and optional clauses.\n      return null;\n    } else if (scorers.get(Occur.SHOULD).size() < minShouldMatch) {\n      // either >1 req scorer, or there are 0 req scorers and at least 1\n      // optional scorer. Therefore if there are not enough optional scorers\n      // no documents will be matched by the query\n      return null;\n    }\n\n    // we don't need scores, so if we have required clauses, drop optional clauses completely\n    if (scoreMode.needsScores() == false && minShouldMatch == 0 && scorers.get(Occur.MUST).size() + scorers.get(Occur.FILTER).size() > 0) {\n      scorers.get(Occur.SHOULD).clear();\n    }\n\n    return new Boolean2ScorerSupplier(this, scorers, scoreMode, minShouldMatch);\n  }\n\n","sourceOld":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    int minShouldMatch = query.getMinimumNumberShouldMatch();\n\n    final Map<Occur, Collection<ScorerSupplier>> scorers = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      scorers.put(occur, new ArrayList<>());\n    }\n\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      ScorerSupplier subScorer = w.scorerSupplier(context);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else {\n        scorers.get(c.getOccur()).add(subScorer);\n      }\n    }\n\n    // scorer simplifications:\n    \n    if (scorers.get(Occur.SHOULD).size() == minShouldMatch) {\n      // any optional clauses are in fact required\n      scorers.get(Occur.MUST).addAll(scorers.get(Occur.SHOULD));\n      scorers.get(Occur.SHOULD).clear();\n      minShouldMatch = 0;\n    }\n    \n    if (scorers.get(Occur.FILTER).isEmpty() && scorers.get(Occur.MUST).isEmpty() && scorers.get(Occur.SHOULD).isEmpty()) {\n      // no required and optional clauses.\n      return null;\n    } else if (scorers.get(Occur.SHOULD).size() < minShouldMatch) {\n      // either >1 req scorer, or there are 0 req scorers and at least 1\n      // optional scorer. Therefore if there are not enough optional scorers\n      // no documents will be matched by the query\n      return null;\n    }\n\n    // we don't need scores, so if we have required clauses, drop optional clauses completely\n    if (!needsScores && minShouldMatch == 0 && scorers.get(Occur.MUST).size() + scorers.get(Occur.FILTER).size() > 0) {\n      scorers.get(Occur.SHOULD).clear();\n    }\n\n    return new Boolean2ScorerSupplier(this, scorers, needsScores, minShouldMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorerSupplier(LeafReaderContext).mjava","sourceNew":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    int minShouldMatch = query.getMinimumNumberShouldMatch();\n\n    final Map<Occur, Collection<ScorerSupplier>> scorers = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      scorers.put(occur, new ArrayList<>());\n    }\n\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      ScorerSupplier subScorer = w.scorerSupplier(context);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else {\n        scorers.get(c.getOccur()).add(subScorer);\n      }\n    }\n\n    // scorer simplifications:\n    \n    if (scorers.get(Occur.SHOULD).size() == minShouldMatch) {\n      // any optional clauses are in fact required\n      scorers.get(Occur.MUST).addAll(scorers.get(Occur.SHOULD));\n      scorers.get(Occur.SHOULD).clear();\n      minShouldMatch = 0;\n    }\n    \n    if (scorers.get(Occur.FILTER).isEmpty() && scorers.get(Occur.MUST).isEmpty() && scorers.get(Occur.SHOULD).isEmpty()) {\n      // no required and optional clauses.\n      return null;\n    } else if (scorers.get(Occur.SHOULD).size() < minShouldMatch) {\n      // either >1 req scorer, or there are 0 req scorers and at least 1\n      // optional scorer. Therefore if there are not enough optional scorers\n      // no documents will be matched by the query\n      return null;\n    }\n\n    // we don't need scores, so if we have required clauses, drop optional clauses completely\n    if (scoreMode.needsScores() == false && minShouldMatch == 0 && scorers.get(Occur.MUST).size() + scorers.get(Occur.FILTER).size() > 0) {\n      scorers.get(Occur.SHOULD).clear();\n    }\n\n    return new Boolean2ScorerSupplier(this, scorers, scoreMode, minShouldMatch);\n  }\n\n","sourceOld":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    int minShouldMatch = query.getMinimumNumberShouldMatch();\n\n    final Map<Occur, Collection<ScorerSupplier>> scorers = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      scorers.put(occur, new ArrayList<>());\n    }\n\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      ScorerSupplier subScorer = w.scorerSupplier(context);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else {\n        scorers.get(c.getOccur()).add(subScorer);\n      }\n    }\n\n    // scorer simplifications:\n    \n    if (scorers.get(Occur.SHOULD).size() == minShouldMatch) {\n      // any optional clauses are in fact required\n      scorers.get(Occur.MUST).addAll(scorers.get(Occur.SHOULD));\n      scorers.get(Occur.SHOULD).clear();\n      minShouldMatch = 0;\n    }\n    \n    if (scorers.get(Occur.FILTER).isEmpty() && scorers.get(Occur.MUST).isEmpty() && scorers.get(Occur.SHOULD).isEmpty()) {\n      // no required and optional clauses.\n      return null;\n    } else if (scorers.get(Occur.SHOULD).size() < minShouldMatch) {\n      // either >1 req scorer, or there are 0 req scorers and at least 1\n      // optional scorer. Therefore if there are not enough optional scorers\n      // no documents will be matched by the query\n      return null;\n    }\n\n    // we don't need scores, so if we have required clauses, drop optional clauses completely\n    if (!needsScores && minShouldMatch == 0 && scorers.get(Occur.MUST).size() + scorers.get(Occur.FILTER).size() > 0) {\n      scorers.get(Occur.SHOULD).clear();\n    }\n\n    return new Boolean2ScorerSupplier(this, scorers, needsScores, minShouldMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3b18b7e0f913460bf896d65b6de19fad9cdf6fb","date":1557385218,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorerSupplier(LeafReaderContext).mjava","sourceNew":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    int minShouldMatch = query.getMinimumNumberShouldMatch();\n\n    final Map<Occur, Collection<ScorerSupplier>> scorers = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      scorers.put(occur, new ArrayList<>());\n    }\n\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      ScorerSupplier subScorer = w.scorerSupplier(context);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else {\n        scorers.get(c.getOccur()).add(subScorer);\n      }\n    }\n\n    // scorer simplifications:\n    \n    if (scorers.get(Occur.SHOULD).size() == minShouldMatch) {\n      // any optional clauses are in fact required\n      scorers.get(Occur.MUST).addAll(scorers.get(Occur.SHOULD));\n      scorers.get(Occur.SHOULD).clear();\n      minShouldMatch = 0;\n    }\n    \n    if (scorers.get(Occur.FILTER).isEmpty() && scorers.get(Occur.MUST).isEmpty() && scorers.get(Occur.SHOULD).isEmpty()) {\n      // no required and optional clauses.\n      return null;\n    } else if (scorers.get(Occur.SHOULD).size() < minShouldMatch) {\n      // either >1 req scorer, or there are 0 req scorers and at least 1\n      // optional scorer. Therefore if there are not enough optional scorers\n      // no documents will be matched by the query\n      return null;\n    }\n\n    return new Boolean2ScorerSupplier(this, scorers, scoreMode, minShouldMatch);\n  }\n\n","sourceOld":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    int minShouldMatch = query.getMinimumNumberShouldMatch();\n\n    final Map<Occur, Collection<ScorerSupplier>> scorers = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      scorers.put(occur, new ArrayList<>());\n    }\n\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      ScorerSupplier subScorer = w.scorerSupplier(context);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else {\n        scorers.get(c.getOccur()).add(subScorer);\n      }\n    }\n\n    // scorer simplifications:\n    \n    if (scorers.get(Occur.SHOULD).size() == minShouldMatch) {\n      // any optional clauses are in fact required\n      scorers.get(Occur.MUST).addAll(scorers.get(Occur.SHOULD));\n      scorers.get(Occur.SHOULD).clear();\n      minShouldMatch = 0;\n    }\n    \n    if (scorers.get(Occur.FILTER).isEmpty() && scorers.get(Occur.MUST).isEmpty() && scorers.get(Occur.SHOULD).isEmpty()) {\n      // no required and optional clauses.\n      return null;\n    } else if (scorers.get(Occur.SHOULD).size() < minShouldMatch) {\n      // either >1 req scorer, or there are 0 req scorers and at least 1\n      // optional scorer. Therefore if there are not enough optional scorers\n      // no documents will be matched by the query\n      return null;\n    }\n\n    // we don't need scores, so if we have required clauses, drop optional clauses completely\n    if (scoreMode.needsScores() == false && minShouldMatch == 0 && scorers.get(Occur.MUST).size() + scorers.get(Occur.FILTER).size() > 0) {\n      scorers.get(Occur.SHOULD).clear();\n    }\n\n    return new Boolean2ScorerSupplier(this, scorers, scoreMode, minShouldMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a13f208db1e7d2e6004f070428b8dc9f533a14c","date":1561708237,"type":3,"author":"Sven Amann","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorerSupplier(LeafReaderContext).mjava","sourceNew":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    int minShouldMatch = query.getMinimumNumberShouldMatch();\n\n    final Map<Occur, Collection<ScorerSupplier>> scorers = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      scorers.put(occur, new ArrayList<>());\n    }\n\n    for (WeightedBooleanClause wc : weightedClauses) {\n      Weight w = wc.weight;\n      BooleanClause c = wc.clause;\n      ScorerSupplier subScorer = w.scorerSupplier(context);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else {\n        scorers.get(c.getOccur()).add(subScorer);\n      }\n    }\n\n    // scorer simplifications:\n    \n    if (scorers.get(Occur.SHOULD).size() == minShouldMatch) {\n      // any optional clauses are in fact required\n      scorers.get(Occur.MUST).addAll(scorers.get(Occur.SHOULD));\n      scorers.get(Occur.SHOULD).clear();\n      minShouldMatch = 0;\n    }\n    \n    if (scorers.get(Occur.FILTER).isEmpty() && scorers.get(Occur.MUST).isEmpty() && scorers.get(Occur.SHOULD).isEmpty()) {\n      // no required and optional clauses.\n      return null;\n    } else if (scorers.get(Occur.SHOULD).size() < minShouldMatch) {\n      // either >1 req scorer, or there are 0 req scorers and at least 1\n      // optional scorer. Therefore if there are not enough optional scorers\n      // no documents will be matched by the query\n      return null;\n    }\n\n    return new Boolean2ScorerSupplier(this, scorers, scoreMode, minShouldMatch);\n  }\n\n","sourceOld":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    int minShouldMatch = query.getMinimumNumberShouldMatch();\n\n    final Map<Occur, Collection<ScorerSupplier>> scorers = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      scorers.put(occur, new ArrayList<>());\n    }\n\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      ScorerSupplier subScorer = w.scorerSupplier(context);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else {\n        scorers.get(c.getOccur()).add(subScorer);\n      }\n    }\n\n    // scorer simplifications:\n    \n    if (scorers.get(Occur.SHOULD).size() == minShouldMatch) {\n      // any optional clauses are in fact required\n      scorers.get(Occur.MUST).addAll(scorers.get(Occur.SHOULD));\n      scorers.get(Occur.SHOULD).clear();\n      minShouldMatch = 0;\n    }\n    \n    if (scorers.get(Occur.FILTER).isEmpty() && scorers.get(Occur.MUST).isEmpty() && scorers.get(Occur.SHOULD).isEmpty()) {\n      // no required and optional clauses.\n      return null;\n    } else if (scorers.get(Occur.SHOULD).size() < minShouldMatch) {\n      // either >1 req scorer, or there are 0 req scorers and at least 1\n      // optional scorer. Therefore if there are not enough optional scorers\n      // no documents will be matched by the query\n      return null;\n    }\n\n    return new Boolean2ScorerSupplier(this, scorers, scoreMode, minShouldMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f3b18b7e0f913460bf896d65b6de19fad9cdf6fb":["417142ff08fda9cf0b72d5133e63097a166c6458"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"3a13f208db1e7d2e6004f070428b8dc9f533a14c":["f3b18b7e0f913460bf896d65b6de19fad9cdf6fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a13f208db1e7d2e6004f070428b8dc9f533a14c"],"417142ff08fda9cf0b72d5133e63097a166c6458":["dca67e06c96e95a8d9ef07418b6299bfd981523b","9fc47cb7b4346802411bb432f501ed0673d7119e"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dca67e06c96e95a8d9ef07418b6299bfd981523b"]},"commit2Childs":{"f3b18b7e0f913460bf896d65b6de19fad9cdf6fb":["3a13f208db1e7d2e6004f070428b8dc9f533a14c"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dca67e06c96e95a8d9ef07418b6299bfd981523b","302d34f2c66e8d489ee13078305c330cbf67b226"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"3a13f208db1e7d2e6004f070428b8dc9f533a14c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"417142ff08fda9cf0b72d5133e63097a166c6458":["f3b18b7e0f913460bf896d65b6de19fad9cdf6fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}