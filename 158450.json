{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#copyToCharArray(char[],int,int,char).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#copyToCharArray(char[],int,int,char).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#copyToCharArray(char[],int,int,char).mjava","sourceNew":"  /**\n   * Copies the specified number of components from this category path to the\n   * specified character array, with the components separated by a given\n   * delimiter character. The array must be large enough to hold the\n   * components and separators - the amount of needed space can be calculated\n   * with {@link #charsNeededForFullPath()}.\n   * <P>\n   * This method returns the number of characters written to the array.\n   * \n   * @param outputBuffer\n   *            The destination character array.\n   * @param outputBufferStart\n   *            The first location to write in the output array.\n   * @param numberOfComponentsToCopy\n   *            The number of path components to write to the destination\n   *            buffer.\n   * @param separatorChar\n   *            The separator inserted between every pair of path components\n   *            in the output buffer.\n   * @see #charsNeededForFullPath()\n   */\n  public int copyToCharArray(char[] outputBuffer, int outputBufferStart,\n      int numberOfComponentsToCopy, char separatorChar) {\n    if (numberOfComponentsToCopy == 0) {\n      return 0;\n    }\n    if (numberOfComponentsToCopy < 0\n        || numberOfComponentsToCopy > ncomponents) {\n      numberOfComponentsToCopy = ncomponents;\n    }\n    int outputBufferInitialStart = outputBufferStart; // for calculating\n                              // chars copied.\n    int sourceStart = 0;\n    int sourceLength = ends[0];\n    for (int component = 0; component < numberOfComponentsToCopy; component++) {\n      if (component > 0) {\n        sourceStart = ends[component - 1];\n        sourceLength = ends[component] - sourceStart;\n        outputBuffer[outputBufferStart++] = separatorChar;\n      }\n      System.arraycopy(chars, sourceStart, outputBuffer,\n          outputBufferStart, sourceLength);\n      outputBufferStart += sourceLength;\n    }\n    return outputBufferStart - outputBufferInitialStart;\n  }\n\n","sourceOld":"  /**\n   * Copies the specified number of components from this category path to the\n   * specified character array, with the components separated by a given\n   * delimiter character. The array must be large enough to hold the\n   * components and separators - the amount of needed space can be calculated\n   * with {@link #charsNeededForFullPath()}.\n   * <P>\n   * This method returns the number of characters written to the array.\n   * \n   * @param outputBuffer\n   *            The destination character array.\n   * @param outputBufferStart\n   *            The first location to write in the output array.\n   * @param numberOfComponentsToCopy\n   *            The number of path components to write to the destination\n   *            buffer.\n   * @param separatorChar\n   *            The separator inserted between every pair of path components\n   *            in the output buffer.\n   * @see #charsNeededForFullPath()\n   */\n  public int copyToCharArray(char[] outputBuffer, int outputBufferStart,\n      int numberOfComponentsToCopy, char separatorChar) {\n    if (numberOfComponentsToCopy == 0) {\n      return 0;\n    }\n    if (numberOfComponentsToCopy < 0\n        || numberOfComponentsToCopy > ncomponents) {\n      numberOfComponentsToCopy = ncomponents;\n    }\n    int outputBufferInitialStart = outputBufferStart; // for calculating\n                              // chars copied.\n    int sourceStart = 0;\n    int sourceLength = ends[0];\n    for (int component = 0; component < numberOfComponentsToCopy; component++) {\n      if (component > 0) {\n        sourceStart = ends[component - 1];\n        sourceLength = ends[component] - sourceStart;\n        outputBuffer[outputBufferStart++] = separatorChar;\n      }\n      System.arraycopy(chars, sourceStart, outputBuffer,\n          outputBufferStart, sourceLength);\n      outputBufferStart += sourceLength;\n    }\n    return outputBufferStart - outputBufferInitialStart;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#copyToCharArray(char[],int,int,char).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copies the specified number of components from this category path to the\n   * specified character array, with the components separated by a given\n   * delimiter character. The array must be large enough to hold the\n   * components and separators - the amount of needed space can be calculated\n   * with {@link #charsNeededForFullPath()}.\n   * <P>\n   * This method returns the number of characters written to the array.\n   * \n   * @param outputBuffer\n   *            The destination character array.\n   * @param outputBufferStart\n   *            The first location to write in the output array.\n   * @param numberOfComponentsToCopy\n   *            The number of path components to write to the destination\n   *            buffer.\n   * @param separatorChar\n   *            The separator inserted between every pair of path components\n   *            in the output buffer.\n   * @see #charsNeededForFullPath()\n   */\n  public int copyToCharArray(char[] outputBuffer, int outputBufferStart,\n      int numberOfComponentsToCopy, char separatorChar) {\n    if (numberOfComponentsToCopy == 0) {\n      return 0;\n    }\n    if (numberOfComponentsToCopy < 0\n        || numberOfComponentsToCopy > ncomponents) {\n      numberOfComponentsToCopy = ncomponents;\n    }\n    int outputBufferInitialStart = outputBufferStart; // for calculating\n                              // chars copied.\n    int sourceStart = 0;\n    int sourceLength = ends[0];\n    for (int component = 0; component < numberOfComponentsToCopy; component++) {\n      if (component > 0) {\n        sourceStart = ends[component - 1];\n        sourceLength = ends[component] - sourceStart;\n        outputBuffer[outputBufferStart++] = separatorChar;\n      }\n      System.arraycopy(chars, sourceStart, outputBuffer,\n          outputBufferStart, sourceLength);\n      outputBufferStart += sourceLength;\n    }\n    return outputBufferStart - outputBufferInitialStart;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#copyToCharArray(char[],int,int,char).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copies the specified number of components from this category path to the\n   * specified character array, with the components separated by a given\n   * delimiter character. The array must be large enough to hold the\n   * components and separators - the amount of needed space can be calculated\n   * with {@link #charsNeededForFullPath()}.\n   * <P>\n   * This method returns the number of characters written to the array.\n   * \n   * @param outputBuffer\n   *            The destination character array.\n   * @param outputBufferStart\n   *            The first location to write in the output array.\n   * @param numberOfComponentsToCopy\n   *            The number of path components to write to the destination\n   *            buffer.\n   * @param separatorChar\n   *            The separator inserted between every pair of path components\n   *            in the output buffer.\n   * @see #charsNeededForFullPath()\n   */\n  public int copyToCharArray(char[] outputBuffer, int outputBufferStart,\n      int numberOfComponentsToCopy, char separatorChar) {\n    if (numberOfComponentsToCopy == 0) {\n      return 0;\n    }\n    if (numberOfComponentsToCopy < 0\n        || numberOfComponentsToCopy > ncomponents) {\n      numberOfComponentsToCopy = ncomponents;\n    }\n    int outputBufferInitialStart = outputBufferStart; // for calculating\n                              // chars copied.\n    int sourceStart = 0;\n    int sourceLength = ends[0];\n    for (int component = 0; component < numberOfComponentsToCopy; component++) {\n      if (component > 0) {\n        sourceStart = ends[component - 1];\n        sourceLength = ends[component] - sourceStart;\n        outputBuffer[outputBufferStart++] = separatorChar;\n      }\n      System.arraycopy(chars, sourceStart, outputBuffer,\n          outputBufferStart, sourceLength);\n      outputBufferStart += sourceLength;\n    }\n    return outputBufferStart - outputBufferInitialStart;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}