{"path":"src/java/org/apache/lucene/index/SegmentTermEnum#scanTo(Term).mjava","commits":[{"id":"3778b73bb813f2d72a86f83c78f3fd5a988eb08c","date":1097251129,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermEnum#scanTo(Term).mjava","pathOld":"/dev/null","sourceNew":"  /** Optimized scan, without allocating new terms. */\n  final void scanTo(Term term) throws IOException {\n    if (scratch == null)\n      scratch = new TermBuffer();\n    scratch.set(term);\n    while (scratch.compareTo(termBuffer) > 0 && next()) {}\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0bc744249d66c3743dcaedac96bb259820f2aca","date":1203734114,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermEnum#scanTo(Term).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentTermEnum#scanTo(Term).mjava","sourceNew":"  /** Optimized scan, without allocating new terms. */\n  final void scanTo(Term term) throws IOException {\n    scanBuffer.set(term);\n    while (scanBuffer.compareTo(termBuffer) > 0 && next()) {}\n  }\n\n","sourceOld":"  /** Optimized scan, without allocating new terms. */\n  final void scanTo(Term term) throws IOException {\n    if (scratch == null)\n      scratch = new TermBuffer();\n    scratch.set(term);\n    while (scratch.compareTo(termBuffer) > 0 && next()) {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b30678d88259b68d3d1e3faba3ea3bccdf0c751","date":1211563231,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermEnum#scanTo(Term).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentTermEnum#scanTo(Term).mjava","sourceNew":"  /** Optimized scan, without allocating new terms. \n   *  Return number of invocations to next(). */\n  final int scanTo(Term term) throws IOException {\n    scanBuffer.set(term);\n    int count = 0;\n    while (scanBuffer.compareTo(termBuffer) > 0 && next()) {\n      count++;\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Optimized scan, without allocating new terms. */\n  final void scanTo(Term term) throws IOException {\n    scanBuffer.set(term);\n    while (scanBuffer.compareTo(termBuffer) > 0 && next()) {}\n  }\n\n","bugFix":null,"bugIntro":["773f3441f7263f3a1b78e69ba2a38600c336c420"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentTermEnum#scanTo(Term).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentTermEnum#scanTo(Term).mjava","sourceNew":"  /** Optimized scan, without allocating new terms. \n   *  Return number of invocations to next(). */\n  final int scanTo(Term term) throws IOException {\n    scanBuffer.set(term);\n    int count = 0;\n    while (scanBuffer.compareTo(termBuffer) > 0 && next()) {\n      count++;\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Optimized scan, without allocating new terms. \n   *  Return number of invocations to next(). */\n  final int scanTo(Term term) throws IOException {\n    scanBuffer.set(term);\n    int count = 0;\n    while (scanBuffer.compareTo(termBuffer) > 0 && next()) {\n      count++;\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3778b73bb813f2d72a86f83c78f3fd5a988eb08c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1b30678d88259b68d3d1e3faba3ea3bccdf0c751":["e0bc744249d66c3743dcaedac96bb259820f2aca"],"e0bc744249d66c3743dcaedac96bb259820f2aca":["3778b73bb813f2d72a86f83c78f3fd5a988eb08c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1b30678d88259b68d3d1e3faba3ea3bccdf0c751"]},"commit2Childs":{"3778b73bb813f2d72a86f83c78f3fd5a988eb08c":["e0bc744249d66c3743dcaedac96bb259820f2aca"],"1b30678d88259b68d3d1e3faba3ea3bccdf0c751":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e0bc744249d66c3743dcaedac96bb259820f2aca":["1b30678d88259b68d3d1e3faba3ea3bccdf0c751"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3778b73bb813f2d72a86f83c78f3fd5a988eb08c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}