{"path":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestLaoBreakIterator#assertBreaksTo(BreakIterator,String,String[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestLaoBreakIterator#assertBreaksTo(BreakIterator,String,String[]).mjava","pathOld":"modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestLaoBreakIterator#assertBreaksTo(BreakIterator,String,String[]).mjava","sourceNew":"  private void assertBreaksTo(BreakIterator iterator, String sourceText, String tokens[]) {\n    char text[] = sourceText.toCharArray();\n    CharArrayIterator ci = new CharArrayIterator();\n    ci.setText(text, 0, text.length);\n    iterator.setText(ci);\n    \n    for (int i = 0; i < tokens.length; i++) {\n      int start, end;\n      do {\n        start = iterator.current();\n        end = iterator.next();\n      } while (end != BreakIterator.DONE && !isWord(text, start, end));\n      assertTrue(start != BreakIterator.DONE);\n      assertTrue(end != BreakIterator.DONE);\n      assertEquals(tokens[i], new String(text, start, end - start));\n    }\n    \n    assertTrue(iterator.next() == BreakIterator.DONE);\n  }\n\n","sourceOld":"  private void assertBreaksTo(BreakIterator iterator, String sourceText, String tokens[]) {\n    char text[] = sourceText.toCharArray();\n    CharArrayIterator ci = new CharArrayIterator();\n    ci.setText(text, 0, text.length);\n    iterator.setText(ci);\n    \n    for (int i = 0; i < tokens.length; i++) {\n      int start, end;\n      do {\n        start = iterator.current();\n        end = iterator.next();\n      } while (end != BreakIterator.DONE && !isWord(text, start, end));\n      assertTrue(start != BreakIterator.DONE);\n      assertTrue(end != BreakIterator.DONE);\n      assertEquals(tokens[i], new String(text, start, end - start));\n    }\n    \n    assertTrue(iterator.next() == BreakIterator.DONE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b07bc5b253e2373a655fc734d650af4ac46c8614","date":1386093923,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestLaoBreakIterator#assertBreaksTo(BreakIterator,String,String[]).mjava","sourceNew":null,"sourceOld":"  private void assertBreaksTo(BreakIterator iterator, String sourceText, String tokens[]) {\n    char text[] = sourceText.toCharArray();\n    CharArrayIterator ci = new CharArrayIterator();\n    ci.setText(text, 0, text.length);\n    iterator.setText(ci);\n    \n    for (int i = 0; i < tokens.length; i++) {\n      int start, end;\n      do {\n        start = iterator.current();\n        end = iterator.next();\n      } while (end != BreakIterator.DONE && !isWord(text, start, end));\n      assertTrue(start != BreakIterator.DONE);\n      assertTrue(end != BreakIterator.DONE);\n      assertEquals(tokens[i], new String(text, start, end - start));\n    }\n    \n    assertTrue(iterator.next() == BreakIterator.DONE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestLaoBreakIterator#assertBreaksTo(BreakIterator,String,String[]).mjava","sourceNew":null,"sourceOld":"  private void assertBreaksTo(BreakIterator iterator, String sourceText, String tokens[]) {\n    char text[] = sourceText.toCharArray();\n    CharArrayIterator ci = new CharArrayIterator();\n    ci.setText(text, 0, text.length);\n    iterator.setText(ci);\n    \n    for (int i = 0; i < tokens.length; i++) {\n      int start, end;\n      do {\n        start = iterator.current();\n        end = iterator.next();\n      } while (end != BreakIterator.DONE && !isWord(text, start, end));\n      assertTrue(start != BreakIterator.DONE);\n      assertTrue(end != BreakIterator.DONE);\n      assertEquals(tokens[i], new String(text, start, end - start));\n    }\n    \n    assertTrue(iterator.next() == BreakIterator.DONE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b07bc5b253e2373a655fc734d650af4ac46c8614":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b07bc5b253e2373a655fc734d650af4ac46c8614"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b07bc5b253e2373a655fc734d650af4ac46c8614"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b07bc5b253e2373a655fc734d650af4ac46c8614","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"b07bc5b253e2373a655fc734d650af4ac46c8614":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}