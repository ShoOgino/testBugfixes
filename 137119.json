{"path":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int,IOContext).mjava","commits":[{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int).mjava","sourceNew":"  /**\n   * Creates a new {@link IndexDocValues} instance that provides either memory\n   * resident or iterative access to a per-document stored <tt>byte[]</tt>\n   * value. The returned {@link IndexDocValues} instance will be initialized without\n   * consuming a significant amount of memory.\n   * \n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param id\n   *          the file ID in the {@link Directory} to load the values from.\n   * @param mode\n   *          the mode used to store the values\n   * @param fixedSize\n   *          <code>true</code> iff the values are stored with fixed-size,\n   *          otherwise <code>false</code>\n   * @param maxDoc\n   *          the number of document values stored for the given ID\n   * @return an initialized {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public static IndexDocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc, IOContext context) throws IOException {\n\n    // TODO -- I can peek @ header to determing fixed/mode?\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        return new FixedStraightBytesImpl.Reader(dir, id, maxDoc, context);\n      } else if (mode == Mode.DEREF) {\n        return new FixedDerefBytesImpl.Reader(dir, id, maxDoc, context);\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc, context);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc, context);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc, context);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc, context);\n      }\n    }\n\n    throw new IllegalArgumentException(\"Illegal Mode: \" + mode);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link IndexDocValues} instance that provides either memory\n   * resident or iterative access to a per-document stored <tt>byte[]</tt>\n   * value. The returned {@link IndexDocValues} instance will be initialized without\n   * consuming a significant amount of memory.\n   * \n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param id\n   *          the file ID in the {@link Directory} to load the values from.\n   * @param mode\n   *          the mode used to store the values\n   * @param fixedSize\n   *          <code>true</code> iff the values are stored with fixed-size,\n   *          otherwise <code>false</code>\n   * @param maxDoc\n   *          the number of document values stored for the given ID\n   * @return an initialized {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public static IndexDocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc) throws IOException {\n    //nocommit this and all the readers below need an IOContext too\n\n    // TODO -- I can peek @ header to determing fixed/mode?\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    }\n\n    throw new IllegalArgumentException(\"Illegal Mode: \" + mode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int,Comparator[BytesRef],IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int,IOContext).mjava","sourceNew":"  /**\n   * Creates a new {@link IndexDocValues} instance that provides either memory\n   * resident or iterative access to a per-document stored <tt>byte[]</tt>\n   * value. The returned {@link IndexDocValues} instance will be initialized without\n   * consuming a significant amount of memory.\n   * \n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param id\n   *          the file ID in the {@link Directory} to load the values from.\n   * @param mode\n   *          the mode used to store the values\n   * @param fixedSize\n   *          <code>true</code> iff the values are stored with fixed-size,\n   *          otherwise <code>false</code>\n   * @param maxDoc\n   *          the number of document values stored for the given ID\n   * @param sortComparator byte comparator used by sorted variants\n   * @return an initialized {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public static IndexDocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc, Comparator<BytesRef> sortComparator, IOContext context) throws IOException {\n\n    // TODO -- I can peek @ header to determing fixed/mode?\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        return new FixedStraightBytesImpl.Reader(dir, id, maxDoc, context);\n      } else if (mode == Mode.DEREF) {\n        return new FixedDerefBytesImpl.Reader(dir, id, maxDoc, context);\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc, context);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc, context);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc, context);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc, sortComparator, context);\n      }\n    }\n\n    throw new IllegalArgumentException(\"Illegal Mode: \" + mode);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link IndexDocValues} instance that provides either memory\n   * resident or iterative access to a per-document stored <tt>byte[]</tt>\n   * value. The returned {@link IndexDocValues} instance will be initialized without\n   * consuming a significant amount of memory.\n   * \n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param id\n   *          the file ID in the {@link Directory} to load the values from.\n   * @param mode\n   *          the mode used to store the values\n   * @param fixedSize\n   *          <code>true</code> iff the values are stored with fixed-size,\n   *          otherwise <code>false</code>\n   * @param maxDoc\n   *          the number of document values stored for the given ID\n   * @return an initialized {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public static IndexDocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc, IOContext context) throws IOException {\n\n    // TODO -- I can peek @ header to determing fixed/mode?\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        return new FixedStraightBytesImpl.Reader(dir, id, maxDoc, context);\n      } else if (mode == Mode.DEREF) {\n        return new FixedDerefBytesImpl.Reader(dir, id, maxDoc, context);\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc, context);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc, context);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc, context);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc, context);\n      }\n    }\n\n    throw new IllegalArgumentException(\"Illegal Mode: \" + mode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["b6f9be74ca7baaef11857ad002cad40419979516","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"b6f9be74ca7baaef11857ad002cad40419979516":["1291e4568eb7d9463d751627596ef14baf4c1603"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1291e4568eb7d9463d751627596ef14baf4c1603","b6f9be74ca7baaef11857ad002cad40419979516","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}