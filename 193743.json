{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#toExpression(StreamFactory).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#toExpression(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // stream\n    expression.addParameter(tupleStream.toExpression(factory));\n    \n    // over\n    if(comp instanceof ExpressibleComparator){\n      expression.addParameter(new StreamExpressionNamedParameter(\"by\",((ExpressibleComparator)comp).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This ReducerStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e431b0806b8db369da896b66a74e304a49953c7b","date":1434740037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // stream\n    expression.addParameter(tupleStream.toExpression(factory));\n    \n    // over\n    if(comp instanceof Expressible){\n      expression.addParameter(new StreamExpressionNamedParameter(\"by\",((Expressible)comp).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This ReducerStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // stream\n    expression.addParameter(tupleStream.toExpression(factory));\n    \n    // over\n    if(comp instanceof ExpressibleComparator){\n      expression.addParameter(new StreamExpressionNamedParameter(\"by\",((ExpressibleComparator)comp).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This ReducerStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // stream\n    expression.addParameter(stream.toExpression(factory));\n    \n    // over\n    if(comp instanceof Expressible){\n      expression.addParameter(new StreamExpressionNamedParameter(\"by\",((Expressible)comp).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This ReducerStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // stream\n    expression.addParameter(tupleStream.toExpression(factory));\n    \n    // over\n    if(comp instanceof Expressible){\n      expression.addParameter(new StreamExpressionNamedParameter(\"by\",((Expressible)comp).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This ReducerStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1833f6d07cc5000544dfe89f26c81e2eb8afb4c","date":1446951913,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // stream\n    expression.addParameter(stream.toExpression(factory));\n    \n    // over\n    if(eq instanceof Expressible){\n      expression.addParameter(new StreamExpressionNamedParameter(\"by\",((Expressible)eq).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This ReducerStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // stream\n    expression.addParameter(stream.toExpression(factory));\n    \n    // over\n    if(comp instanceof Expressible){\n      expression.addParameter(new StreamExpressionNamedParameter(\"by\",((Expressible)comp).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This ReducerStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7","date":1449800905,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // stream\n    expression.addParameter(stream.toExpression(factory));\n    \n    // over\n    if(eq instanceof Expressible){\n      expression.addParameter(new StreamExpressionNamedParameter(\"by\",((Expressible)eq).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This ReducerStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n\n    if(op instanceof Expressible) {\n      expression.addParameter(op.toExpression(factory));\n    } else {\n      throw new IOException(\"This ReducerStream contains a non-expressible operation - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // stream\n    expression.addParameter(stream.toExpression(factory));\n    \n    // over\n    if(eq instanceof Expressible){\n      expression.addParameter(new StreamExpressionNamedParameter(\"by\",((Expressible)eq).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This ReducerStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941","date":1461079048,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException{\n    return toExpression(factory, true);\n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // stream\n    expression.addParameter(stream.toExpression(factory));\n    \n    // over\n    if(eq instanceof Expressible){\n      expression.addParameter(new StreamExpressionNamedParameter(\"by\",((Expressible)eq).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This ReducerStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n\n    if(op instanceof Expressible) {\n      expression.addParameter(op.toExpression(factory));\n    } else {\n      throw new IOException(\"This ReducerStream contains a non-expressible operation - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b71fe681187ac8552caaff9d5a7f1f3cac47b56","date":1461081992,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException{\n    return toExpression(factory, true);\n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // stream\n    expression.addParameter(stream.toExpression(factory));\n    \n    // over\n    if(eq instanceof Expressible){\n      expression.addParameter(new StreamExpressionNamedParameter(\"by\",((Expressible)eq).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This ReducerStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n\n    if(op instanceof Expressible) {\n      expression.addParameter(op.toExpression(factory));\n    } else {\n      throw new IOException(\"This ReducerStream contains a non-expressible operation - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1833f6d07cc5000544dfe89f26c81e2eb8afb4c":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["e431b0806b8db369da896b66a74e304a49953c7b"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["c1833f6d07cc5000544dfe89f26c81e2eb8afb4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"e431b0806b8db369da896b66a74e304a49953c7b":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["e431b0806b8db369da896b66a74e304a49953c7b"],"c1833f6d07cc5000544dfe89f26c81e2eb8afb4c":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["c1833f6d07cc5000544dfe89f26c81e2eb8afb4c"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"e431b0806b8db369da896b66a74e304a49953c7b":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}