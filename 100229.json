{"path":"client/java/solrj/test/org/apache/solr/client/solrj/SolrExampleTestBase#testExampleConfig().mjava","commits":[{"id":"acdd729ace9db5d0803eea4849ddc3c2ba196127","date":1181861605,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/test/org/apache/solr/client/solrj/SolrExampleTestBase#testExampleConfig().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * query the example\n   */\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID );\n    doc.addField( \"name\", \"my name!\" );\n    \n    Assert.assertEquals( null, doc.getFieldValue(\"foo\"));\n    Assert.assertTrue(doc.getFieldValue(\"name\") != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\" );\n    doc2.addField( \"inStock\", true );\n    doc2.addField( \"price\", 2 );\n    doc2.addField( \"timestamp\", new java.util.Date() );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\" );\n    doc3.addField( \"inStock\", false );\n    doc3.addField( \"price\", 3 );\n    doc3.addField( \"timestamp\", new java.util.Date() );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\" );\n    doc4.addField( \"inStock\", true );\n    doc4.addField( \"price\", 4 );\n    doc4.addField( \"timestamp\", new java.util.Date() );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\" );\n    doc5.addField( \"inStock\", false );\n    doc5.addField( \"price\", 5 );\n    doc5.addField( \"timestamp\", new java.util.Date() );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b686ecc52b102b7e9b5bdf760b673b73ac8b634b","b686ecc52b102b7e9b5bdf760b673b73ac8b634b","b686ecc52b102b7e9b5bdf760b673b73ac8b634b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ebb24ab555aab7c4dd5d2264c06a4f19fb217913","date":1183353562,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/test/org/apache/solr/client/solrj/SolrExampleTestBase#testExampleConfig().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/SolrExampleTestBase#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, null );\n    doc.addField( \"name\", \"my name!\", null );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", null );\n    doc2.addField( \"inStock\", true, null );\n    doc2.addField( \"price\", 2, null );\n    doc2.addField( \"timestamp\", new java.util.Date(), null );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", null );\n    doc3.addField( \"inStock\", false, null );\n    doc3.addField( \"price\", 3, null );\n    doc3.addField( \"timestamp\", new java.util.Date(), null );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", null );\n    doc4.addField( \"inStock\", true, null );\n    doc4.addField( \"price\", 4, null );\n    doc4.addField( \"timestamp\", new java.util.Date(), null );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", null );\n    doc5.addField( \"inStock\", false, null );\n    doc5.addField( \"price\", 5, null );\n    doc5.addField( \"timestamp\", new java.util.Date(), null );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID );\n    doc.addField( \"name\", \"my name!\" );\n    \n    Assert.assertEquals( null, doc.getFieldValue(\"foo\"));\n    Assert.assertTrue(doc.getFieldValue(\"name\") != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\" );\n    doc2.addField( \"inStock\", true );\n    doc2.addField( \"price\", 2 );\n    doc2.addField( \"timestamp\", new java.util.Date() );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\" );\n    doc3.addField( \"inStock\", false );\n    doc3.addField( \"price\", 3 );\n    doc3.addField( \"timestamp\", new java.util.Date() );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\" );\n    doc4.addField( \"inStock\", true );\n    doc4.addField( \"price\", 4 );\n    doc4.addField( \"timestamp\", new java.util.Date() );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\" );\n    doc5.addField( \"inStock\", false );\n    doc5.addField( \"price\", 5 );\n    doc5.addField( \"timestamp\", new java.util.Date() );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a51897f565610bcb8cd260561430de517d3de46","date":1183391823,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/test/org/apache/solr/client/solrj/SolrExampleTestBase#testExampleConfig().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/SolrExampleTestBase#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, null );\n    doc.addField( \"name\", \"my name!\", null );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", null );\n    doc2.addField( \"inStock\", true, null );\n    doc2.addField( \"price\", 2, null );\n    doc2.addField( \"timestamp\", new java.util.Date(), null );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", null );\n    doc3.addField( \"inStock\", false, null );\n    doc3.addField( \"price\", 3, null );\n    doc3.addField( \"timestamp\", new java.util.Date(), null );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", null );\n    doc4.addField( \"inStock\", true, null );\n    doc4.addField( \"price\", 4, null );\n    doc4.addField( \"timestamp\", new java.util.Date(), null );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", null );\n    doc5.addField( \"inStock\", false, null );\n    doc5.addField( \"price\", 5, null );\n    doc5.addField( \"timestamp\", new java.util.Date(), null );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0f4e27ea5f3ae20d9c37b7f233610c286c5739f","date":1190223065,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/SolrExampleTestBase#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ebb24ab555aab7c4dd5d2264c06a4f19fb217913":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"9a51897f565610bcb8cd260561430de517d3de46":["ebb24ab555aab7c4dd5d2264c06a4f19fb217913"],"acdd729ace9db5d0803eea4849ddc3c2ba196127":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b0f4e27ea5f3ae20d9c37b7f233610c286c5739f":["9a51897f565610bcb8cd260561430de517d3de46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ebb24ab555aab7c4dd5d2264c06a4f19fb217913":["9a51897f565610bcb8cd260561430de517d3de46"],"acdd729ace9db5d0803eea4849ddc3c2ba196127":["ebb24ab555aab7c4dd5d2264c06a4f19fb217913"],"9a51897f565610bcb8cd260561430de517d3de46":["b0f4e27ea5f3ae20d9c37b7f233610c286c5739f"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0f4e27ea5f3ae20d9c37b7f233610c286c5739f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b0f4e27ea5f3ae20d9c37b7f233610c286c5739f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}