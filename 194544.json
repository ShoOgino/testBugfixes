{"path":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#test().mjava","commits":[{"id":"6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0","date":1515077688,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    // determine custom search handler name (the exact name should not matter)\n    final String customSearchHandlerName = \"/custom_select\"+random().nextInt();\n\n    final String defaultHighlightComponentName = HighlightComponent.COMPONENT_NAME;\n    final String highlightComponentName;\n\n    // add custom component (if needed) and handler\n    {\n      if (random().nextBoolean()) {\n        // default component\n        highlightComponentName = defaultHighlightComponentName;\n      } else {\n        // custom component\n        highlightComponentName = \"customhighlight\"+random().nextInt();\n        cluster.getSolrClient().request(\n            new ConfigRequest(\n                SolrRequest.METHOD.POST,\n                \"/config\",\n                \"{\\n\" +\n                \"  'add-searchcomponent': {\\n\" +\n                \"    'name': '\"+highlightComponentName+\"',\\n\" +\n                \"    'class': '\"+customHighlightComponentClassName()+\"'\\n\" +\n                \"  }\\n\" +\n                \"}\"),\n            COLLECTION);\n      }\n      // handler\n      cluster.getSolrClient().request(\n          new ConfigRequest(\n              SolrRequest.METHOD.POST,\n              \"/config\",\n              \"{\\n\" +\n              \"  'add-requesthandler': {\\n\" +\n              \"    'name' : '\"+customSearchHandlerName+\"',\\n\" +\n              \"    'class' : 'org.apache.solr.handler.component.SearchHandler',\\n\" +\n              \"    'components' : [ '\"+QueryComponent.COMPONENT_NAME+\"', '\"+highlightComponentName+\"' ]\\n\" +\n              \"  }\\n\" +\n              \"}\"),\n          COLLECTION);\n    }\n\n    // add some documents\n    final String id = \"id\";\n    final String t1 = \"a_t\";\n    final String t2 = \"b_t\";\n    {\n      new UpdateRequest()\n          .add(sdoc(id, 1, t1, \"bumble bee\", t2, \"bumble bee\"))\n          .add(sdoc(id, 2, t1, \"honey bee\", t2, \"honey bee\"))\n          .add(sdoc(id, 3, t1, \"solitary bee\", t2, \"solitary bee\"))\n          .commit(cluster.getSolrClient(), COLLECTION);\n    }\n\n    // search for the documents\n    {\n      // compose the query\n      final SolrQuery solrQuery =  new SolrQuery(t1+\":bee\");\n      solrQuery.setRequestHandler(customSearchHandlerName);\n      solrQuery.setHighlight(true);\n      final boolean t1Highlights = random().nextBoolean();\n      if (t1Highlights) {\n        solrQuery.addHighlightField(t1);\n      }\n      final boolean t2Highlights = random().nextBoolean();\n      if (t2Highlights) {\n        solrQuery.addHighlightField(t2);\n      }\n\n      // make the query\n      final QueryResponse queryResponse = new QueryRequest(solrQuery)\n          .process(cluster.getSolrClient(), COLLECTION);\n\n      // analyse the response\n      final Map<String, Map<String, List<String>>> highlighting = queryResponse.getHighlighting();\n      final ArrayList<SimpleOrderedMap<Object>> custom_highlighting =\n          (ArrayList<SimpleOrderedMap<Object>>)queryResponse.getResponse().get(\"custom_highlighting\");\n\n      if (defaultHighlightComponentName.equals(highlightComponentName)) {\n        // regular 'highlighting' ...\n        if (t1Highlights) {\n          checkHighlightingResponseMap(highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseMap(highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseMap(highlighting, null);\n        }\n        // ... and no 'custom_highlighting'\n        assertNull(custom_highlighting);\n      } else {\n        // no regular 'highlighting' ...\n        assertNull(highlighting);\n        // ... but 'custom_highlighting'\n        assertNotNull(custom_highlighting);\n        if (t1Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, null);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    // determine custom search handler name (the exact name should not matter)\n    final String customSearchHandlerName = \"/custom_select\"+random().nextInt();\n\n    final String defaultHighlightComponentName = HighlightComponent.COMPONENT_NAME;\n    final String highlightComponentName;\n\n    // add custom component (if needed) and handler\n    {\n      if (random().nextBoolean()) {\n        // default component\n        highlightComponentName = defaultHighlightComponentName;\n      } else {\n        // custom component\n        highlightComponentName = \"customhighlight\"+random().nextInt();\n        cluster.getSolrClient().request(\n            new ConfigRequest(\n                SolrRequest.METHOD.POST,\n                \"/config\",\n                \"{\\n\" +\n                \"  'add-searchcomponent': {\\n\" +\n                \"    'name': '\"+highlightComponentName+\"',\\n\" +\n                \"    'class': '\"+customHighlightComponentClassName()+\"'\\n\" +\n                \"  }\\n\" +\n                \"}\"),\n            COLLECTION);\n      }\n      // handler\n      cluster.getSolrClient().request(\n          new ConfigRequest(\n              SolrRequest.METHOD.POST,\n              \"/config\",\n              \"{\\n\" +\n              \"  'add-requesthandler': {\\n\" +\n              \"    'name' : '\"+customSearchHandlerName+\"',\\n\" +\n              \"    'class' : 'org.apache.solr.handler.component.SearchHandler',\\n\" +\n              \"    'components' : [ '\"+QueryComponent.COMPONENT_NAME+\"', '\"+highlightComponentName+\"' ]\\n\" +\n              \"  }\\n\" +\n              \"}\"),\n          COLLECTION);\n    }\n\n    // add some documents\n    final String id = \"id\";\n    final String t1 = \"a_t\";\n    final String t2 = \"b_t\";\n    {\n      new UpdateRequest()\n          .add(sdoc(id, 1, t1, \"bumble bee\", t2, \"bumble bee\"))\n          .add(sdoc(id, 2, t1, \"honey bee\", t2, \"honey bee\"))\n          .add(sdoc(id, 3, t1, \"solitary bee\", t2, \"solitary bee\"))\n          .commit(cluster.getSolrClient(), COLLECTION);\n    }\n\n    // search for the documents\n    {\n      // compose the query\n      final SolrQuery solrQuery =  new SolrQuery(t1+\":bee\");\n      solrQuery.setRequestHandler(customSearchHandlerName);\n      solrQuery.setHighlight(true);\n      final boolean t1Highlights = random().nextBoolean();\n      if (t1Highlights) {\n        solrQuery.addHighlightField(t1);\n      }\n      final boolean t2Highlights = random().nextBoolean();\n      if (t2Highlights) {\n        solrQuery.addHighlightField(t2);\n      }\n\n      // make the query\n      final QueryResponse queryResponse = new QueryRequest(solrQuery)\n          .process(cluster.getSolrClient(), COLLECTION);\n\n      // analyse the response\n      final Map<String, Map<String, List<String>>> highlighting = queryResponse.getHighlighting();\n      final ArrayList<SimpleOrderedMap<Object>> custom_highlighting =\n          (ArrayList<SimpleOrderedMap<Object>>)queryResponse.getResponse().get(\"custom_highlighting\");\n\n      if (defaultHighlightComponentName.equals(highlightComponentName)) {\n        // regular 'highlighting' ...\n        if (t1Highlights) {\n          checkHighlightingResponseMap(highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseMap(highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseMap(highlighting, null);\n        }\n        // ... and no 'custom_highlighting'\n        assertNull(custom_highlighting);\n      } else {\n        // no regular 'highlighting' ...\n        assertNull(highlighting);\n        // ... but 'custom_highlighting'\n        assertNotNull(custom_highlighting);\n        if (t1Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, null);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"751e212ed6f8a4a43b591e4d6cd4637d15a4219a","date":1530638837,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    // determine custom search handler name (the exact name should not matter)\n    final String customSearchHandlerName = \"/custom_select\"+random().nextInt();\n\n    final String defaultHighlightComponentName = HighlightComponent.COMPONENT_NAME;\n    final String highlightComponentName;\n\n    // add custom component (if needed) and handler\n    {\n      if (random().nextBoolean()) {\n        // default component\n        highlightComponentName = defaultHighlightComponentName;\n      } else {\n        // custom component\n        highlightComponentName = \"customhighlight\"+random().nextInt();\n        cluster.getSolrClient().request(\n            new ConfigRequest(\n                \"{\\n\" +\n                \"  'add-searchcomponent': {\\n\" +\n                \"    'name': '\"+highlightComponentName+\"',\\n\" +\n                \"    'class': '\"+customHighlightComponentClassName()+\"'\\n\" +\n                \"  }\\n\" +\n                \"}\"),\n            COLLECTION);\n      }\n      // handler\n      cluster.getSolrClient().request(\n          new ConfigRequest(\n              \"{\\n\" +\n              \"  'add-requesthandler': {\\n\" +\n              \"    'name' : '\"+customSearchHandlerName+\"',\\n\" +\n              \"    'class' : 'org.apache.solr.handler.component.SearchHandler',\\n\" +\n              \"    'components' : [ '\"+QueryComponent.COMPONENT_NAME+\"', '\"+highlightComponentName+\"' ]\\n\" +\n              \"  }\\n\" +\n              \"}\"),\n          COLLECTION);\n    }\n\n    // add some documents\n    final String id = \"id\";\n    final String t1 = \"a_t\";\n    final String t2 = \"b_t\";\n    {\n      new UpdateRequest()\n          .add(sdoc(id, 1, t1, \"bumble bee\", t2, \"bumble bee\"))\n          .add(sdoc(id, 2, t1, \"honey bee\", t2, \"honey bee\"))\n          .add(sdoc(id, 3, t1, \"solitary bee\", t2, \"solitary bee\"))\n          .commit(cluster.getSolrClient(), COLLECTION);\n    }\n\n    // search for the documents\n    {\n      // compose the query\n      final SolrQuery solrQuery =  new SolrQuery(t1+\":bee\");\n      solrQuery.setRequestHandler(customSearchHandlerName);\n      solrQuery.setHighlight(true);\n      final boolean t1Highlights = random().nextBoolean();\n      if (t1Highlights) {\n        solrQuery.addHighlightField(t1);\n      }\n      final boolean t2Highlights = random().nextBoolean();\n      if (t2Highlights) {\n        solrQuery.addHighlightField(t2);\n      }\n\n      // make the query\n      final QueryResponse queryResponse = new QueryRequest(solrQuery)\n          .process(cluster.getSolrClient(), COLLECTION);\n\n      // analyse the response\n      final Map<String, Map<String, List<String>>> highlighting = queryResponse.getHighlighting();\n      final ArrayList<SimpleOrderedMap<Object>> custom_highlighting =\n          (ArrayList<SimpleOrderedMap<Object>>)queryResponse.getResponse().get(\"custom_highlighting\");\n\n      if (defaultHighlightComponentName.equals(highlightComponentName)) {\n        // regular 'highlighting' ...\n        if (t1Highlights) {\n          checkHighlightingResponseMap(highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseMap(highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseMap(highlighting, null);\n        }\n        // ... and no 'custom_highlighting'\n        assertNull(custom_highlighting);\n      } else {\n        // no regular 'highlighting' ...\n        assertNull(highlighting);\n        // ... but 'custom_highlighting'\n        assertNotNull(custom_highlighting);\n        if (t1Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, null);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    // determine custom search handler name (the exact name should not matter)\n    final String customSearchHandlerName = \"/custom_select\"+random().nextInt();\n\n    final String defaultHighlightComponentName = HighlightComponent.COMPONENT_NAME;\n    final String highlightComponentName;\n\n    // add custom component (if needed) and handler\n    {\n      if (random().nextBoolean()) {\n        // default component\n        highlightComponentName = defaultHighlightComponentName;\n      } else {\n        // custom component\n        highlightComponentName = \"customhighlight\"+random().nextInt();\n        cluster.getSolrClient().request(\n            new ConfigRequest(\n                SolrRequest.METHOD.POST,\n                \"/config\",\n                \"{\\n\" +\n                \"  'add-searchcomponent': {\\n\" +\n                \"    'name': '\"+highlightComponentName+\"',\\n\" +\n                \"    'class': '\"+customHighlightComponentClassName()+\"'\\n\" +\n                \"  }\\n\" +\n                \"}\"),\n            COLLECTION);\n      }\n      // handler\n      cluster.getSolrClient().request(\n          new ConfigRequest(\n              SolrRequest.METHOD.POST,\n              \"/config\",\n              \"{\\n\" +\n              \"  'add-requesthandler': {\\n\" +\n              \"    'name' : '\"+customSearchHandlerName+\"',\\n\" +\n              \"    'class' : 'org.apache.solr.handler.component.SearchHandler',\\n\" +\n              \"    'components' : [ '\"+QueryComponent.COMPONENT_NAME+\"', '\"+highlightComponentName+\"' ]\\n\" +\n              \"  }\\n\" +\n              \"}\"),\n          COLLECTION);\n    }\n\n    // add some documents\n    final String id = \"id\";\n    final String t1 = \"a_t\";\n    final String t2 = \"b_t\";\n    {\n      new UpdateRequest()\n          .add(sdoc(id, 1, t1, \"bumble bee\", t2, \"bumble bee\"))\n          .add(sdoc(id, 2, t1, \"honey bee\", t2, \"honey bee\"))\n          .add(sdoc(id, 3, t1, \"solitary bee\", t2, \"solitary bee\"))\n          .commit(cluster.getSolrClient(), COLLECTION);\n    }\n\n    // search for the documents\n    {\n      // compose the query\n      final SolrQuery solrQuery =  new SolrQuery(t1+\":bee\");\n      solrQuery.setRequestHandler(customSearchHandlerName);\n      solrQuery.setHighlight(true);\n      final boolean t1Highlights = random().nextBoolean();\n      if (t1Highlights) {\n        solrQuery.addHighlightField(t1);\n      }\n      final boolean t2Highlights = random().nextBoolean();\n      if (t2Highlights) {\n        solrQuery.addHighlightField(t2);\n      }\n\n      // make the query\n      final QueryResponse queryResponse = new QueryRequest(solrQuery)\n          .process(cluster.getSolrClient(), COLLECTION);\n\n      // analyse the response\n      final Map<String, Map<String, List<String>>> highlighting = queryResponse.getHighlighting();\n      final ArrayList<SimpleOrderedMap<Object>> custom_highlighting =\n          (ArrayList<SimpleOrderedMap<Object>>)queryResponse.getResponse().get(\"custom_highlighting\");\n\n      if (defaultHighlightComponentName.equals(highlightComponentName)) {\n        // regular 'highlighting' ...\n        if (t1Highlights) {\n          checkHighlightingResponseMap(highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseMap(highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseMap(highlighting, null);\n        }\n        // ... and no 'custom_highlighting'\n        assertNull(custom_highlighting);\n      } else {\n        // no regular 'highlighting' ...\n        assertNull(highlighting);\n        // ... but 'custom_highlighting'\n        assertNotNull(custom_highlighting);\n        if (t1Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, null);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    // determine custom search handler name (the exact name should not matter)\n    final String customSearchHandlerName = \"/custom_select\"+random().nextInt();\n\n    final String defaultHighlightComponentName = HighlightComponent.COMPONENT_NAME;\n    final String highlightComponentName;\n\n    // add custom component (if needed) and handler\n    {\n      if (random().nextBoolean()) {\n        // default component\n        highlightComponentName = defaultHighlightComponentName;\n      } else {\n        // custom component\n        highlightComponentName = \"customhighlight\"+random().nextInt();\n        cluster.getSolrClient().request(\n            new ConfigRequest(\n                \"{\\n\" +\n                \"  'add-searchcomponent': {\\n\" +\n                \"    'name': '\"+highlightComponentName+\"',\\n\" +\n                \"    'class': '\"+customHighlightComponentClassName()+\"'\\n\" +\n                \"  }\\n\" +\n                \"}\"),\n            COLLECTION);\n      }\n      // handler\n      cluster.getSolrClient().request(\n          new ConfigRequest(\n              \"{\\n\" +\n              \"  'add-requesthandler': {\\n\" +\n              \"    'name' : '\"+customSearchHandlerName+\"',\\n\" +\n              \"    'class' : 'org.apache.solr.handler.component.SearchHandler',\\n\" +\n              \"    'components' : [ '\"+QueryComponent.COMPONENT_NAME+\"', '\"+highlightComponentName+\"' ]\\n\" +\n              \"  }\\n\" +\n              \"}\"),\n          COLLECTION);\n    }\n\n    // add some documents\n    final String id = \"id\";\n    final String t1 = \"a_t\";\n    final String t2 = \"b_t\";\n    {\n      new UpdateRequest()\n          .add(sdoc(id, 1, t1, \"bumble bee\", t2, \"bumble bee\"))\n          .add(sdoc(id, 2, t1, \"honey bee\", t2, \"honey bee\"))\n          .add(sdoc(id, 3, t1, \"solitary bee\", t2, \"solitary bee\"))\n          .commit(cluster.getSolrClient(), COLLECTION);\n    }\n\n    // search for the documents\n    {\n      // compose the query\n      final SolrQuery solrQuery =  new SolrQuery(t1+\":bee\");\n      solrQuery.setRequestHandler(customSearchHandlerName);\n      solrQuery.setHighlight(true);\n      final boolean t1Highlights = random().nextBoolean();\n      if (t1Highlights) {\n        solrQuery.addHighlightField(t1);\n      }\n      final boolean t2Highlights = random().nextBoolean();\n      if (t2Highlights) {\n        solrQuery.addHighlightField(t2);\n      }\n\n      // make the query\n      final QueryResponse queryResponse = new QueryRequest(solrQuery)\n          .process(cluster.getSolrClient(), COLLECTION);\n\n      // analyse the response\n      final Map<String, Map<String, List<String>>> highlighting = queryResponse.getHighlighting();\n      final ArrayList<SimpleOrderedMap<Object>> custom_highlighting =\n          (ArrayList<SimpleOrderedMap<Object>>)queryResponse.getResponse().get(\"custom_highlighting\");\n\n      if (defaultHighlightComponentName.equals(highlightComponentName)) {\n        // regular 'highlighting' ...\n        if (t1Highlights) {\n          checkHighlightingResponseMap(highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseMap(highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseMap(highlighting, null);\n        }\n        // ... and no 'custom_highlighting'\n        assertNull(custom_highlighting);\n      } else {\n        // no regular 'highlighting' ...\n        assertNull(highlighting);\n        // ... but 'custom_highlighting'\n        assertNotNull(custom_highlighting);\n        if (t1Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, null);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    // determine custom search handler name (the exact name should not matter)\n    final String customSearchHandlerName = \"/custom_select\"+random().nextInt();\n\n    final String defaultHighlightComponentName = HighlightComponent.COMPONENT_NAME;\n    final String highlightComponentName;\n\n    // add custom component (if needed) and handler\n    {\n      if (random().nextBoolean()) {\n        // default component\n        highlightComponentName = defaultHighlightComponentName;\n      } else {\n        // custom component\n        highlightComponentName = \"customhighlight\"+random().nextInt();\n        cluster.getSolrClient().request(\n            new ConfigRequest(\n                SolrRequest.METHOD.POST,\n                \"/config\",\n                \"{\\n\" +\n                \"  'add-searchcomponent': {\\n\" +\n                \"    'name': '\"+highlightComponentName+\"',\\n\" +\n                \"    'class': '\"+customHighlightComponentClassName()+\"'\\n\" +\n                \"  }\\n\" +\n                \"}\"),\n            COLLECTION);\n      }\n      // handler\n      cluster.getSolrClient().request(\n          new ConfigRequest(\n              SolrRequest.METHOD.POST,\n              \"/config\",\n              \"{\\n\" +\n              \"  'add-requesthandler': {\\n\" +\n              \"    'name' : '\"+customSearchHandlerName+\"',\\n\" +\n              \"    'class' : 'org.apache.solr.handler.component.SearchHandler',\\n\" +\n              \"    'components' : [ '\"+QueryComponent.COMPONENT_NAME+\"', '\"+highlightComponentName+\"' ]\\n\" +\n              \"  }\\n\" +\n              \"}\"),\n          COLLECTION);\n    }\n\n    // add some documents\n    final String id = \"id\";\n    final String t1 = \"a_t\";\n    final String t2 = \"b_t\";\n    {\n      new UpdateRequest()\n          .add(sdoc(id, 1, t1, \"bumble bee\", t2, \"bumble bee\"))\n          .add(sdoc(id, 2, t1, \"honey bee\", t2, \"honey bee\"))\n          .add(sdoc(id, 3, t1, \"solitary bee\", t2, \"solitary bee\"))\n          .commit(cluster.getSolrClient(), COLLECTION);\n    }\n\n    // search for the documents\n    {\n      // compose the query\n      final SolrQuery solrQuery =  new SolrQuery(t1+\":bee\");\n      solrQuery.setRequestHandler(customSearchHandlerName);\n      solrQuery.setHighlight(true);\n      final boolean t1Highlights = random().nextBoolean();\n      if (t1Highlights) {\n        solrQuery.addHighlightField(t1);\n      }\n      final boolean t2Highlights = random().nextBoolean();\n      if (t2Highlights) {\n        solrQuery.addHighlightField(t2);\n      }\n\n      // make the query\n      final QueryResponse queryResponse = new QueryRequest(solrQuery)\n          .process(cluster.getSolrClient(), COLLECTION);\n\n      // analyse the response\n      final Map<String, Map<String, List<String>>> highlighting = queryResponse.getHighlighting();\n      final ArrayList<SimpleOrderedMap<Object>> custom_highlighting =\n          (ArrayList<SimpleOrderedMap<Object>>)queryResponse.getResponse().get(\"custom_highlighting\");\n\n      if (defaultHighlightComponentName.equals(highlightComponentName)) {\n        // regular 'highlighting' ...\n        if (t1Highlights) {\n          checkHighlightingResponseMap(highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseMap(highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseMap(highlighting, null);\n        }\n        // ... and no 'custom_highlighting'\n        assertNull(custom_highlighting);\n      } else {\n        // no regular 'highlighting' ...\n        assertNull(highlighting);\n        // ... but 'custom_highlighting'\n        assertNotNull(custom_highlighting);\n        if (t1Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, null);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    // determine custom search handler name (the exact name should not matter)\n    final String customSearchHandlerName = \"/custom_select\"+random().nextInt();\n\n    final String defaultHighlightComponentName = HighlightComponent.COMPONENT_NAME;\n    final String highlightComponentName;\n\n    // add custom component (if needed) and handler\n    {\n      if (random().nextBoolean()) {\n        // default component\n        highlightComponentName = defaultHighlightComponentName;\n      } else {\n        // custom component\n        highlightComponentName = \"customhighlight\"+random().nextInt();\n        cluster.getSolrClient().request(\n            new ConfigRequest(\n                \"{\\n\" +\n                \"  'add-searchcomponent': {\\n\" +\n                \"    'name': '\"+highlightComponentName+\"',\\n\" +\n                \"    'class': '\"+customHighlightComponentClassName()+\"'\\n\" +\n                \"  }\\n\" +\n                \"}\"),\n            COLLECTION);\n      }\n      // handler\n      cluster.getSolrClient().request(\n          new ConfigRequest(\n              \"{\\n\" +\n              \"  'add-requesthandler': {\\n\" +\n              \"    'name' : '\"+customSearchHandlerName+\"',\\n\" +\n              \"    'class' : 'org.apache.solr.handler.component.SearchHandler',\\n\" +\n              \"    'components' : [ '\"+QueryComponent.COMPONENT_NAME+\"', '\"+highlightComponentName+\"' ]\\n\" +\n              \"  }\\n\" +\n              \"}\"),\n          COLLECTION);\n    }\n\n    // add some documents\n    final String id = \"id\";\n    final String t1 = \"a_t\";\n    final String t2 = \"b_t\";\n    {\n      new UpdateRequest()\n          .add(sdoc(id, 1, t1, \"bumble bee\", t2, \"bumble bee\"))\n          .add(sdoc(id, 2, t1, \"honey bee\", t2, \"honey bee\"))\n          .add(sdoc(id, 3, t1, \"solitary bee\", t2, \"solitary bee\"))\n          .commit(cluster.getSolrClient(), COLLECTION);\n    }\n\n    // search for the documents\n    {\n      // compose the query\n      final SolrQuery solrQuery =  new SolrQuery(t1+\":bee\");\n      solrQuery.setRequestHandler(customSearchHandlerName);\n      solrQuery.setHighlight(true);\n      final boolean t1Highlights = random().nextBoolean();\n      if (t1Highlights) {\n        solrQuery.addHighlightField(t1);\n      }\n      final boolean t2Highlights = random().nextBoolean();\n      if (t2Highlights) {\n        solrQuery.addHighlightField(t2);\n      }\n\n      // make the query\n      final QueryResponse queryResponse = new QueryRequest(solrQuery)\n          .process(cluster.getSolrClient(), COLLECTION);\n\n      // analyse the response\n      final Map<String, Map<String, List<String>>> highlighting = queryResponse.getHighlighting();\n      final ArrayList<SimpleOrderedMap<Object>> custom_highlighting =\n          (ArrayList<SimpleOrderedMap<Object>>)queryResponse.getResponse().get(\"custom_highlighting\");\n\n      if (defaultHighlightComponentName.equals(highlightComponentName)) {\n        // regular 'highlighting' ...\n        if (t1Highlights) {\n          checkHighlightingResponseMap(highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseMap(highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseMap(highlighting, null);\n        }\n        // ... and no 'custom_highlighting'\n        assertNull(custom_highlighting);\n      } else {\n        // no regular 'highlighting' ...\n        assertNull(highlighting);\n        // ... but 'custom_highlighting'\n        assertNotNull(custom_highlighting);\n        if (t1Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, null);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    // determine custom search handler name (the exact name should not matter)\n    final String customSearchHandlerName = \"/custom_select\"+random().nextInt();\n\n    final String defaultHighlightComponentName = HighlightComponent.COMPONENT_NAME;\n    final String highlightComponentName;\n\n    // add custom component (if needed) and handler\n    {\n      if (random().nextBoolean()) {\n        // default component\n        highlightComponentName = defaultHighlightComponentName;\n      } else {\n        // custom component\n        highlightComponentName = \"customhighlight\"+random().nextInt();\n        cluster.getSolrClient().request(\n            new ConfigRequest(\n                SolrRequest.METHOD.POST,\n                \"/config\",\n                \"{\\n\" +\n                \"  'add-searchcomponent': {\\n\" +\n                \"    'name': '\"+highlightComponentName+\"',\\n\" +\n                \"    'class': '\"+customHighlightComponentClassName()+\"'\\n\" +\n                \"  }\\n\" +\n                \"}\"),\n            COLLECTION);\n      }\n      // handler\n      cluster.getSolrClient().request(\n          new ConfigRequest(\n              SolrRequest.METHOD.POST,\n              \"/config\",\n              \"{\\n\" +\n              \"  'add-requesthandler': {\\n\" +\n              \"    'name' : '\"+customSearchHandlerName+\"',\\n\" +\n              \"    'class' : 'org.apache.solr.handler.component.SearchHandler',\\n\" +\n              \"    'components' : [ '\"+QueryComponent.COMPONENT_NAME+\"', '\"+highlightComponentName+\"' ]\\n\" +\n              \"  }\\n\" +\n              \"}\"),\n          COLLECTION);\n    }\n\n    // add some documents\n    final String id = \"id\";\n    final String t1 = \"a_t\";\n    final String t2 = \"b_t\";\n    {\n      new UpdateRequest()\n          .add(sdoc(id, 1, t1, \"bumble bee\", t2, \"bumble bee\"))\n          .add(sdoc(id, 2, t1, \"honey bee\", t2, \"honey bee\"))\n          .add(sdoc(id, 3, t1, \"solitary bee\", t2, \"solitary bee\"))\n          .commit(cluster.getSolrClient(), COLLECTION);\n    }\n\n    // search for the documents\n    {\n      // compose the query\n      final SolrQuery solrQuery =  new SolrQuery(t1+\":bee\");\n      solrQuery.setRequestHandler(customSearchHandlerName);\n      solrQuery.setHighlight(true);\n      final boolean t1Highlights = random().nextBoolean();\n      if (t1Highlights) {\n        solrQuery.addHighlightField(t1);\n      }\n      final boolean t2Highlights = random().nextBoolean();\n      if (t2Highlights) {\n        solrQuery.addHighlightField(t2);\n      }\n\n      // make the query\n      final QueryResponse queryResponse = new QueryRequest(solrQuery)\n          .process(cluster.getSolrClient(), COLLECTION);\n\n      // analyse the response\n      final Map<String, Map<String, List<String>>> highlighting = queryResponse.getHighlighting();\n      final ArrayList<SimpleOrderedMap<Object>> custom_highlighting =\n          (ArrayList<SimpleOrderedMap<Object>>)queryResponse.getResponse().get(\"custom_highlighting\");\n\n      if (defaultHighlightComponentName.equals(highlightComponentName)) {\n        // regular 'highlighting' ...\n        if (t1Highlights) {\n          checkHighlightingResponseMap(highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseMap(highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseMap(highlighting, null);\n        }\n        // ... and no 'custom_highlighting'\n        assertNull(custom_highlighting);\n      } else {\n        // no regular 'highlighting' ...\n        assertNull(highlighting);\n        // ... but 'custom_highlighting'\n        assertNotNull(custom_highlighting);\n        if (t1Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, null);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#test().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void test() throws Exception {\n\n    // determine custom search handler name (the exact name should not matter)\n    final String customSearchHandlerName = \"/custom_select\"+random().nextInt();\n\n    final String defaultHighlightComponentName = HighlightComponent.COMPONENT_NAME;\n    final String highlightComponentName;\n\n    // add custom component (if needed) and handler\n    {\n      if (random().nextBoolean()) {\n        // default component\n        highlightComponentName = defaultHighlightComponentName;\n      } else {\n        // custom component\n        highlightComponentName = \"customhighlight\"+random().nextInt();\n        cluster.getSolrClient().request(\n            new ConfigRequest(\n                \"{\\n\" +\n                \"  'add-searchcomponent': {\\n\" +\n                \"    'name': '\"+highlightComponentName+\"',\\n\" +\n                \"    'class': '\"+customHighlightComponentClassName()+\"'\\n\" +\n                \"  }\\n\" +\n                \"}\"),\n            COLLECTION);\n      }\n      // handler\n      cluster.getSolrClient().request(\n          new ConfigRequest(\n              \"{\\n\" +\n              \"  'add-requesthandler': {\\n\" +\n              \"    'name' : '\"+customSearchHandlerName+\"',\\n\" +\n              \"    'class' : 'org.apache.solr.handler.component.SearchHandler',\\n\" +\n              \"    'components' : [ '\"+QueryComponent.COMPONENT_NAME+\"', '\"+highlightComponentName+\"' ]\\n\" +\n              \"  }\\n\" +\n              \"}\"),\n          COLLECTION);\n    }\n\n    // add some documents\n    final String id = \"id\";\n    final String t1 = \"a_t\";\n    final String t2 = \"b_t\";\n    {\n      new UpdateRequest()\n          .add(sdoc(id, 1, t1, \"bumble bee\", t2, \"bumble bee\"))\n          .add(sdoc(id, 2, t1, \"honey bee\", t2, \"honey bee\"))\n          .add(sdoc(id, 3, t1, \"solitary bee\", t2, \"solitary bee\"))\n          .commit(cluster.getSolrClient(), COLLECTION);\n    }\n\n    // search for the documents\n    {\n      // compose the query\n      final SolrQuery solrQuery =  new SolrQuery(t1+\":bee\");\n      solrQuery.setRequestHandler(customSearchHandlerName);\n      solrQuery.setHighlight(true);\n      final boolean t1Highlights = random().nextBoolean();\n      if (t1Highlights) {\n        solrQuery.addHighlightField(t1);\n      }\n      final boolean t2Highlights = random().nextBoolean();\n      if (t2Highlights) {\n        solrQuery.addHighlightField(t2);\n      }\n\n      // make the query\n      final QueryResponse queryResponse = new QueryRequest(solrQuery)\n          .process(cluster.getSolrClient(), COLLECTION);\n\n      // analyse the response\n      final Map<String, Map<String, List<String>>> highlighting = queryResponse.getHighlighting();\n      final ArrayList<SimpleOrderedMap<Object>> custom_highlighting =\n          (ArrayList<SimpleOrderedMap<Object>>)queryResponse.getResponse().get(\"custom_highlighting\");\n\n      if (defaultHighlightComponentName.equals(highlightComponentName)) {\n        // regular 'highlighting' ...\n        if (t1Highlights) {\n          checkHighlightingResponseMap(highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseMap(highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseMap(highlighting, null);\n        }\n        // ... and no 'custom_highlighting'\n        assertNull(custom_highlighting);\n      } else {\n        // no regular 'highlighting' ...\n        assertNull(highlighting);\n        // ... but 'custom_highlighting'\n        assertNotNull(custom_highlighting);\n        if (t1Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, null);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    // determine custom search handler name (the exact name should not matter)\n    final String customSearchHandlerName = \"/custom_select\"+random().nextInt();\n\n    final String defaultHighlightComponentName = HighlightComponent.COMPONENT_NAME;\n    final String highlightComponentName;\n\n    // add custom component (if needed) and handler\n    {\n      if (random().nextBoolean()) {\n        // default component\n        highlightComponentName = defaultHighlightComponentName;\n      } else {\n        // custom component\n        highlightComponentName = \"customhighlight\"+random().nextInt();\n        cluster.getSolrClient().request(\n            new ConfigRequest(\n                \"{\\n\" +\n                \"  'add-searchcomponent': {\\n\" +\n                \"    'name': '\"+highlightComponentName+\"',\\n\" +\n                \"    'class': '\"+customHighlightComponentClassName()+\"'\\n\" +\n                \"  }\\n\" +\n                \"}\"),\n            COLLECTION);\n      }\n      // handler\n      cluster.getSolrClient().request(\n          new ConfigRequest(\n              \"{\\n\" +\n              \"  'add-requesthandler': {\\n\" +\n              \"    'name' : '\"+customSearchHandlerName+\"',\\n\" +\n              \"    'class' : 'org.apache.solr.handler.component.SearchHandler',\\n\" +\n              \"    'components' : [ '\"+QueryComponent.COMPONENT_NAME+\"', '\"+highlightComponentName+\"' ]\\n\" +\n              \"  }\\n\" +\n              \"}\"),\n          COLLECTION);\n    }\n\n    // add some documents\n    final String id = \"id\";\n    final String t1 = \"a_t\";\n    final String t2 = \"b_t\";\n    {\n      new UpdateRequest()\n          .add(sdoc(id, 1, t1, \"bumble bee\", t2, \"bumble bee\"))\n          .add(sdoc(id, 2, t1, \"honey bee\", t2, \"honey bee\"))\n          .add(sdoc(id, 3, t1, \"solitary bee\", t2, \"solitary bee\"))\n          .commit(cluster.getSolrClient(), COLLECTION);\n    }\n\n    // search for the documents\n    {\n      // compose the query\n      final SolrQuery solrQuery =  new SolrQuery(t1+\":bee\");\n      solrQuery.setRequestHandler(customSearchHandlerName);\n      solrQuery.setHighlight(true);\n      final boolean t1Highlights = random().nextBoolean();\n      if (t1Highlights) {\n        solrQuery.addHighlightField(t1);\n      }\n      final boolean t2Highlights = random().nextBoolean();\n      if (t2Highlights) {\n        solrQuery.addHighlightField(t2);\n      }\n\n      // make the query\n      final QueryResponse queryResponse = new QueryRequest(solrQuery)\n          .process(cluster.getSolrClient(), COLLECTION);\n\n      // analyse the response\n      final Map<String, Map<String, List<String>>> highlighting = queryResponse.getHighlighting();\n      final ArrayList<SimpleOrderedMap<Object>> custom_highlighting =\n          (ArrayList<SimpleOrderedMap<Object>>)queryResponse.getResponse().get(\"custom_highlighting\");\n\n      if (defaultHighlightComponentName.equals(highlightComponentName)) {\n        // regular 'highlighting' ...\n        if (t1Highlights) {\n          checkHighlightingResponseMap(highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseMap(highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseMap(highlighting, null);\n        }\n        // ... and no 'custom_highlighting'\n        assertNull(custom_highlighting);\n      } else {\n        // no regular 'highlighting' ...\n        assertNull(highlighting);\n        // ... but 'custom_highlighting'\n        assertNotNull(custom_highlighting);\n        if (t1Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, null);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#test().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void test() throws Exception {\n\n    // determine custom search handler name (the exact name should not matter)\n    final String customSearchHandlerName = \"/custom_select\"+random().nextInt();\n\n    final String defaultHighlightComponentName = HighlightComponent.COMPONENT_NAME;\n    final String highlightComponentName;\n\n    // add custom component (if needed) and handler\n    {\n      if (random().nextBoolean()) {\n        // default component\n        highlightComponentName = defaultHighlightComponentName;\n      } else {\n        // custom component\n        highlightComponentName = \"customhighlight\"+random().nextInt();\n        cluster.getSolrClient().request(\n            new ConfigRequest(\n                \"{\\n\" +\n                \"  'add-searchcomponent': {\\n\" +\n                \"    'name': '\"+highlightComponentName+\"',\\n\" +\n                \"    'class': '\"+customHighlightComponentClassName()+\"'\\n\" +\n                \"  }\\n\" +\n                \"}\"),\n            COLLECTION);\n      }\n      // handler\n      cluster.getSolrClient().request(\n          new ConfigRequest(\n              \"{\\n\" +\n              \"  'add-requesthandler': {\\n\" +\n              \"    'name' : '\"+customSearchHandlerName+\"',\\n\" +\n              \"    'class' : 'org.apache.solr.handler.component.SearchHandler',\\n\" +\n              \"    'components' : [ '\"+QueryComponent.COMPONENT_NAME+\"', '\"+highlightComponentName+\"' ]\\n\" +\n              \"  }\\n\" +\n              \"}\"),\n          COLLECTION);\n    }\n\n    // add some documents\n    final String id = \"id\";\n    final String t1 = \"a_t\";\n    final String t2 = \"b_t\";\n    {\n      new UpdateRequest()\n          .add(sdoc(id, 1, t1, \"bumble bee\", t2, \"bumble bee\"))\n          .add(sdoc(id, 2, t1, \"honey bee\", t2, \"honey bee\"))\n          .add(sdoc(id, 3, t1, \"solitary bee\", t2, \"solitary bee\"))\n          .commit(cluster.getSolrClient(), COLLECTION);\n    }\n\n    // search for the documents\n    {\n      // compose the query\n      final SolrQuery solrQuery =  new SolrQuery(t1+\":bee\");\n      solrQuery.setRequestHandler(customSearchHandlerName);\n      solrQuery.setHighlight(true);\n      final boolean t1Highlights = random().nextBoolean();\n      if (t1Highlights) {\n        solrQuery.addHighlightField(t1);\n      }\n      final boolean t2Highlights = random().nextBoolean();\n      if (t2Highlights) {\n        solrQuery.addHighlightField(t2);\n      }\n\n      // make the query\n      final QueryResponse queryResponse = new QueryRequest(solrQuery)\n          .process(cluster.getSolrClient(), COLLECTION);\n\n      // analyse the response\n      final Map<String, Map<String, List<String>>> highlighting = queryResponse.getHighlighting();\n      final ArrayList<SimpleOrderedMap<Object>> custom_highlighting =\n          (ArrayList<SimpleOrderedMap<Object>>)queryResponse.getResponse().get(\"custom_highlighting\");\n\n      if (defaultHighlightComponentName.equals(highlightComponentName)) {\n        // regular 'highlighting' ...\n        if (t1Highlights) {\n          checkHighlightingResponseMap(highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseMap(highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseMap(highlighting, null);\n        }\n        // ... and no 'custom_highlighting'\n        assertNull(custom_highlighting);\n      } else {\n        // no regular 'highlighting' ...\n        assertNull(highlighting);\n        // ... but 'custom_highlighting'\n        assertNotNull(custom_highlighting);\n        if (t1Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, null);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void test() throws Exception {\n\n    // determine custom search handler name (the exact name should not matter)\n    final String customSearchHandlerName = \"/custom_select\"+random().nextInt();\n\n    final String defaultHighlightComponentName = HighlightComponent.COMPONENT_NAME;\n    final String highlightComponentName;\n\n    // add custom component (if needed) and handler\n    {\n      if (random().nextBoolean()) {\n        // default component\n        highlightComponentName = defaultHighlightComponentName;\n      } else {\n        // custom component\n        highlightComponentName = \"customhighlight\"+random().nextInt();\n        cluster.getSolrClient().request(\n            new ConfigRequest(\n                \"{\\n\" +\n                \"  'add-searchcomponent': {\\n\" +\n                \"    'name': '\"+highlightComponentName+\"',\\n\" +\n                \"    'class': '\"+customHighlightComponentClassName()+\"'\\n\" +\n                \"  }\\n\" +\n                \"}\"),\n            COLLECTION);\n      }\n      // handler\n      cluster.getSolrClient().request(\n          new ConfigRequest(\n              \"{\\n\" +\n              \"  'add-requesthandler': {\\n\" +\n              \"    'name' : '\"+customSearchHandlerName+\"',\\n\" +\n              \"    'class' : 'org.apache.solr.handler.component.SearchHandler',\\n\" +\n              \"    'components' : [ '\"+QueryComponent.COMPONENT_NAME+\"', '\"+highlightComponentName+\"' ]\\n\" +\n              \"  }\\n\" +\n              \"}\"),\n          COLLECTION);\n    }\n\n    // add some documents\n    final String id = \"id\";\n    final String t1 = \"a_t\";\n    final String t2 = \"b_t\";\n    {\n      new UpdateRequest()\n          .add(sdoc(id, 1, t1, \"bumble bee\", t2, \"bumble bee\"))\n          .add(sdoc(id, 2, t1, \"honey bee\", t2, \"honey bee\"))\n          .add(sdoc(id, 3, t1, \"solitary bee\", t2, \"solitary bee\"))\n          .commit(cluster.getSolrClient(), COLLECTION);\n    }\n\n    // search for the documents\n    {\n      // compose the query\n      final SolrQuery solrQuery =  new SolrQuery(t1+\":bee\");\n      solrQuery.setRequestHandler(customSearchHandlerName);\n      solrQuery.setHighlight(true);\n      final boolean t1Highlights = random().nextBoolean();\n      if (t1Highlights) {\n        solrQuery.addHighlightField(t1);\n      }\n      final boolean t2Highlights = random().nextBoolean();\n      if (t2Highlights) {\n        solrQuery.addHighlightField(t2);\n      }\n\n      // make the query\n      final QueryResponse queryResponse = new QueryRequest(solrQuery)\n          .process(cluster.getSolrClient(), COLLECTION);\n\n      // analyse the response\n      final Map<String, Map<String, List<String>>> highlighting = queryResponse.getHighlighting();\n      final ArrayList<SimpleOrderedMap<Object>> custom_highlighting =\n          (ArrayList<SimpleOrderedMap<Object>>)queryResponse.getResponse().get(\"custom_highlighting\");\n\n      if (defaultHighlightComponentName.equals(highlightComponentName)) {\n        // regular 'highlighting' ...\n        if (t1Highlights) {\n          checkHighlightingResponseMap(highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseMap(highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseMap(highlighting, null);\n        }\n        // ... and no 'custom_highlighting'\n        assertNull(custom_highlighting);\n      } else {\n        // no regular 'highlighting' ...\n        assertNull(highlighting);\n        // ... but 'custom_highlighting'\n        assertNotNull(custom_highlighting);\n        if (t1Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, null);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#test().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void test() throws Exception {\n\n    // determine custom search handler name (the exact name should not matter)\n    final String customSearchHandlerName = \"/custom_select\"+random().nextInt();\n\n    final String defaultHighlightComponentName = HighlightComponent.COMPONENT_NAME;\n    final String highlightComponentName;\n\n    // add custom component (if needed) and handler\n    {\n      if (random().nextBoolean()) {\n        // default component\n        highlightComponentName = defaultHighlightComponentName;\n      } else {\n        // custom component\n        highlightComponentName = \"customhighlight\"+random().nextInt();\n        cluster.getSolrClient().request(\n            new ConfigRequest(\n                \"{\\n\" +\n                \"  'add-searchcomponent': {\\n\" +\n                \"    'name': '\"+highlightComponentName+\"',\\n\" +\n                \"    'class': '\"+customHighlightComponentClassName()+\"'\\n\" +\n                \"  }\\n\" +\n                \"}\"),\n            COLLECTION);\n      }\n      // handler\n      cluster.getSolrClient().request(\n          new ConfigRequest(\n              \"{\\n\" +\n              \"  'add-requesthandler': {\\n\" +\n              \"    'name' : '\"+customSearchHandlerName+\"',\\n\" +\n              \"    'class' : 'org.apache.solr.handler.component.SearchHandler',\\n\" +\n              \"    'components' : [ '\"+QueryComponent.COMPONENT_NAME+\"', '\"+highlightComponentName+\"' ]\\n\" +\n              \"  }\\n\" +\n              \"}\"),\n          COLLECTION);\n    }\n\n    // add some documents\n    final String id = \"id\";\n    final String t1 = \"a_t\";\n    final String t2 = \"b_t\";\n    {\n      new UpdateRequest()\n          .add(sdoc(id, 1, t1, \"bumble bee\", t2, \"bumble bee\"))\n          .add(sdoc(id, 2, t1, \"honey bee\", t2, \"honey bee\"))\n          .add(sdoc(id, 3, t1, \"solitary bee\", t2, \"solitary bee\"))\n          .commit(cluster.getSolrClient(), COLLECTION);\n    }\n\n    // search for the documents\n    {\n      // compose the query\n      final SolrQuery solrQuery =  new SolrQuery(t1+\":bee\");\n      solrQuery.setRequestHandler(customSearchHandlerName);\n      solrQuery.setHighlight(true);\n      final boolean t1Highlights = random().nextBoolean();\n      if (t1Highlights) {\n        solrQuery.addHighlightField(t1);\n      }\n      final boolean t2Highlights = random().nextBoolean();\n      if (t2Highlights) {\n        solrQuery.addHighlightField(t2);\n      }\n\n      // make the query\n      final QueryResponse queryResponse = new QueryRequest(solrQuery)\n          .process(cluster.getSolrClient(), COLLECTION);\n\n      // analyse the response\n      final Map<String, Map<String, List<String>>> highlighting = queryResponse.getHighlighting();\n      @SuppressWarnings({\"unchecked\"})\n      final ArrayList<SimpleOrderedMap<Object>> custom_highlighting =\n          (ArrayList<SimpleOrderedMap<Object>>)queryResponse.getResponse().get(\"custom_highlighting\");\n\n      if (defaultHighlightComponentName.equals(highlightComponentName)) {\n        // regular 'highlighting' ...\n        if (t1Highlights) {\n          checkHighlightingResponseMap(highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseMap(highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseMap(highlighting, null);\n        }\n        // ... and no 'custom_highlighting'\n        assertNull(custom_highlighting);\n      } else {\n        // no regular 'highlighting' ...\n        assertNull(highlighting);\n        // ... but 'custom_highlighting'\n        assertNotNull(custom_highlighting);\n        if (t1Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, null);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void test() throws Exception {\n\n    // determine custom search handler name (the exact name should not matter)\n    final String customSearchHandlerName = \"/custom_select\"+random().nextInt();\n\n    final String defaultHighlightComponentName = HighlightComponent.COMPONENT_NAME;\n    final String highlightComponentName;\n\n    // add custom component (if needed) and handler\n    {\n      if (random().nextBoolean()) {\n        // default component\n        highlightComponentName = defaultHighlightComponentName;\n      } else {\n        // custom component\n        highlightComponentName = \"customhighlight\"+random().nextInt();\n        cluster.getSolrClient().request(\n            new ConfigRequest(\n                \"{\\n\" +\n                \"  'add-searchcomponent': {\\n\" +\n                \"    'name': '\"+highlightComponentName+\"',\\n\" +\n                \"    'class': '\"+customHighlightComponentClassName()+\"'\\n\" +\n                \"  }\\n\" +\n                \"}\"),\n            COLLECTION);\n      }\n      // handler\n      cluster.getSolrClient().request(\n          new ConfigRequest(\n              \"{\\n\" +\n              \"  'add-requesthandler': {\\n\" +\n              \"    'name' : '\"+customSearchHandlerName+\"',\\n\" +\n              \"    'class' : 'org.apache.solr.handler.component.SearchHandler',\\n\" +\n              \"    'components' : [ '\"+QueryComponent.COMPONENT_NAME+\"', '\"+highlightComponentName+\"' ]\\n\" +\n              \"  }\\n\" +\n              \"}\"),\n          COLLECTION);\n    }\n\n    // add some documents\n    final String id = \"id\";\n    final String t1 = \"a_t\";\n    final String t2 = \"b_t\";\n    {\n      new UpdateRequest()\n          .add(sdoc(id, 1, t1, \"bumble bee\", t2, \"bumble bee\"))\n          .add(sdoc(id, 2, t1, \"honey bee\", t2, \"honey bee\"))\n          .add(sdoc(id, 3, t1, \"solitary bee\", t2, \"solitary bee\"))\n          .commit(cluster.getSolrClient(), COLLECTION);\n    }\n\n    // search for the documents\n    {\n      // compose the query\n      final SolrQuery solrQuery =  new SolrQuery(t1+\":bee\");\n      solrQuery.setRequestHandler(customSearchHandlerName);\n      solrQuery.setHighlight(true);\n      final boolean t1Highlights = random().nextBoolean();\n      if (t1Highlights) {\n        solrQuery.addHighlightField(t1);\n      }\n      final boolean t2Highlights = random().nextBoolean();\n      if (t2Highlights) {\n        solrQuery.addHighlightField(t2);\n      }\n\n      // make the query\n      final QueryResponse queryResponse = new QueryRequest(solrQuery)\n          .process(cluster.getSolrClient(), COLLECTION);\n\n      // analyse the response\n      final Map<String, Map<String, List<String>>> highlighting = queryResponse.getHighlighting();\n      final ArrayList<SimpleOrderedMap<Object>> custom_highlighting =\n          (ArrayList<SimpleOrderedMap<Object>>)queryResponse.getResponse().get(\"custom_highlighting\");\n\n      if (defaultHighlightComponentName.equals(highlightComponentName)) {\n        // regular 'highlighting' ...\n        if (t1Highlights) {\n          checkHighlightingResponseMap(highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseMap(highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseMap(highlighting, null);\n        }\n        // ... and no 'custom_highlighting'\n        assertNull(custom_highlighting);\n      } else {\n        // no regular 'highlighting' ...\n        assertNull(highlighting);\n        // ... but 'custom_highlighting'\n        assertNotNull(custom_highlighting);\n        if (t1Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t1);\n        }\n        if (t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, t2);\n        }\n        if (!t1Highlights && !t2Highlights) {\n          checkHighlightingResponseList(custom_highlighting, null);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["751e212ed6f8a4a43b591e4d6cd4637d15a4219a"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","751e212ed6f8a4a43b591e4d6cd4637d15a4219a"],"751e212ed6f8a4a43b591e4d6cd4637d15a4219a":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b94236357aaa22b76c10629851fe4e376e0cea82","751e212ed6f8a4a43b591e4d6cd4637d15a4219a"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"b94236357aaa22b76c10629851fe4e376e0cea82":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","751e212ed6f8a4a43b591e4d6cd4637d15a4219a","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"751e212ed6f8a4a43b591e4d6cd4637d15a4219a":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0"],"6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["e98520789adb1d5ad05afb4956eca0944a929688"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}