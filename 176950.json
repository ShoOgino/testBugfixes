{"path":"backwards/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not store norms, then\n   * this method call will silently do nothing.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not store norms, then\n   * this method call will silently do nothing.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not store norms, then\n   * this method call will silently do nothing.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}