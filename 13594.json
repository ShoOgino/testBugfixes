{"path":"src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"61da3ca2ecb2710b1cc3080ea9d08114b9365cca","date":1243484201,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    boolean doPersist = false;\n    SolrParams params = req.getParams();\n    SolrParams required = params.required();\n    String cname = required.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    if (core != null) {\n      try {\n        doPersist = coreContainer.isPersistent();\n\n        String p = required.get(CoreAdminParams.INDEX_DIRS);\n        String[] dirNames = p.split(\",\");\n\n        DirectoryFactory dirFactory = core.getDirectoryFactory();\n        Directory[] dirs = new Directory[dirNames.length];\n        for (int i = 0; i < dirNames.length; i++) {\n          dirs[i] = dirFactory.open(dirNames[i]);\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(req, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(dirs));\n      } finally {\n        core.close();\n      }\n    }\n    return doPersist;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaf69600ea9210f60dfe579174c8d7493c7c7ae8","date":1244106481,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    boolean doPersist = false;\n    SolrParams params = req.getParams();\n    SolrParams required = params.required();\n    String cname = required.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    if (core != null) {\n      try {\n        doPersist = coreContainer.isPersistent();\n\n        String[] dirNames = required.getParams(CoreAdminParams.INDEX_DIR);\n\n        DirectoryFactory dirFactory = core.getDirectoryFactory();\n        Directory[] dirs = new Directory[dirNames.length];\n        for (int i = 0; i < dirNames.length; i++) {\n          dirs[i] = dirFactory.open(dirNames[i]);\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        SolrQueryRequest wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(dirs));\n      } finally {\n        core.close();\n      }\n    }\n    return doPersist;\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    boolean doPersist = false;\n    SolrParams params = req.getParams();\n    SolrParams required = params.required();\n    String cname = required.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    if (core != null) {\n      try {\n        doPersist = coreContainer.isPersistent();\n\n        String p = required.get(CoreAdminParams.INDEX_DIRS);\n        String[] dirNames = p.split(\",\");\n\n        DirectoryFactory dirFactory = core.getDirectoryFactory();\n        Directory[] dirs = new Directory[dirNames.length];\n        for (int i = 0; i < dirNames.length; i++) {\n          dirs[i] = dirFactory.open(dirNames[i]);\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(req, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(dirs));\n      } finally {\n        core.close();\n      }\n    }\n    return doPersist;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    boolean doPersist = false;\n    SolrParams params = req.getParams();\n    SolrParams required = params.required();\n    String cname = required.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    if (core != null) {\n      try {\n        doPersist = coreContainer.isPersistent();\n\n        String[] dirNames = required.getParams(CoreAdminParams.INDEX_DIR);\n\n        DirectoryFactory dirFactory = core.getDirectoryFactory();\n        Directory[] dirs = new Directory[dirNames.length];\n        for (int i = 0; i < dirNames.length; i++) {\n          dirs[i] = dirFactory.open(dirNames[i]);\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        SolrQueryRequest wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(dirs));\n      } finally {\n        core.close();\n      }\n    }\n    return doPersist;\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    boolean doPersist = false;\n    SolrParams params = req.getParams();\n    SolrParams required = params.required();\n    String cname = required.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    if (core != null) {\n      try {\n        doPersist = coreContainer.isPersistent();\n\n        String[] dirNames = required.getParams(CoreAdminParams.INDEX_DIR);\n\n        DirectoryFactory dirFactory = core.getDirectoryFactory();\n        Directory[] dirs = new Directory[dirNames.length];\n        for (int i = 0; i < dirNames.length; i++) {\n          dirs[i] = dirFactory.open(dirNames[i]);\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        SolrQueryRequest wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(dirs));\n      } finally {\n        core.close();\n      }\n    }\n    return doPersist;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"61da3ca2ecb2710b1cc3080ea9d08114b9365cca":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["eaf69600ea9210f60dfe579174c8d7493c7c7ae8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eaf69600ea9210f60dfe579174c8d7493c7c7ae8":["61da3ca2ecb2710b1cc3080ea9d08114b9365cca"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["61da3ca2ecb2710b1cc3080ea9d08114b9365cca"],"61da3ca2ecb2710b1cc3080ea9d08114b9365cca":["eaf69600ea9210f60dfe579174c8d7493c7c7ae8"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"eaf69600ea9210f60dfe579174c8d7493c7c7ae8":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}