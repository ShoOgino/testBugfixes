{"path":"src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","commits":[{"id":"5e316f9ea0ab451f736a2a2b65103c3910bfad8e","date":1009307680,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    return directory.fileExists(\"segments\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["569a9403799d39d2fcc83f4e6d8d0693b69a3bf4","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd6eb8b1d71f36e7d134adc278a3d27c2559414c","date":1118080332,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    return directory.fileExists(Constants.INDEX_SEGMENTS_FILENAME);\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    return directory.fileExists(\"segments\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24157515079eea65faeec4e1dbb01fea58444c8e","date":1118343636,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    return directory.fileExists(IndexFileNames.SEGMENTS);\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    return directory.fileExists(Constants.INDEX_SEGMENTS_FILENAME);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    return SegmentInfos.getCurrentSegmentGeneration(directory) != -1;\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    return directory.fileExists(IndexFileNames.SEGMENTS);\n  }\n\n","bugFix":null,"bugIntro":["569a9403799d39d2fcc83f4e6d8d0693b69a3bf4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    return SegmentInfos.getCurrentSegmentGeneration(directory) != -1;\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    return SegmentInfos.getCurrentSegmentGeneration(directory) != -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fd6eb8b1d71f36e7d134adc278a3d27c2559414c":["5e316f9ea0ab451f736a2a2b65103c3910bfad8e"],"24157515079eea65faeec4e1dbb01fea58444c8e":["fd6eb8b1d71f36e7d134adc278a3d27c2559414c"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["24157515079eea65faeec4e1dbb01fea58444c8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5e316f9ea0ab451f736a2a2b65103c3910bfad8e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["284c1d3c8b19931bf6f312fae7470487f5d9e580"]},"commit2Childs":{"fd6eb8b1d71f36e7d134adc278a3d27c2559414c":["24157515079eea65faeec4e1dbb01fea58444c8e"],"24157515079eea65faeec4e1dbb01fea58444c8e":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e316f9ea0ab451f736a2a2b65103c3910bfad8e"],"5e316f9ea0ab451f736a2a2b65103c3910bfad8e":["fd6eb8b1d71f36e7d134adc278a3d27c2559414c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}