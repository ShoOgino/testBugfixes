{"path":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","sourceNew":"    /** This test creates compound file based on a single file.\n     *  Files of different sizes are tested: 0, 1, 10, 100 bytes.\n     */\n    public void testSingleFile() throws IOException {\n        int data[] = new int[] { 0, 1, 10, 100 };\n        for (int i=0; i<data.length; i++) {\n            String name = \"t\" + data[i];\n            createSequenceFile(dir, name, (byte) 0, data[i]);\n            CompoundFileDirectory csw = new CompoundFileDirectory(dir, name + \".cfs\", newIOContext(random), true);\n            dir.copy(csw, name, name, newIOContext(random));\n            csw.close();\n\n            CompoundFileDirectory csr = new CompoundFileDirectory(dir, name + \".cfs\", newIOContext(random), false);\n            IndexInput expected = dir.openInput(name, newIOContext(random));\n            IndexInput actual = csr.openInput(name, newIOContext(random));\n            assertSameStreams(name, expected, actual);\n            assertSameSeekBehavior(name, expected, actual);\n            expected.close();\n            actual.close();\n            csr.close();\n        }\n    }\n\n","sourceOld":"    /** This test creates compound file based on a single file.\n     *  Files of different sizes are tested: 0, 1, 10, 100 bytes.\n     */\n    public void testSingleFile() throws IOException {\n        int data[] = new int[] { 0, 1, 10, 100 };\n        for (int i=0; i<data.length; i++) {\n            String name = \"t\" + data[i];\n            createSequenceFile(dir, name, (byte) 0, data[i]);\n            CompoundFileDirectory csw = new CompoundFileDirectory(dir, name + \".cfs\", newIOContext(random), true);\n            dir.copy(csw, name, name, newIOContext(random));\n            csw.close();\n\n            CompoundFileDirectory csr = new CompoundFileDirectory(dir, name + \".cfs\", newIOContext(random), false);\n            IndexInput expected = dir.openInput(name, newIOContext(random));\n            IndexInput actual = csr.openInput(name, newIOContext(random));\n            assertSameStreams(name, expected, actual);\n            assertSameSeekBehavior(name, expected, actual);\n            expected.close();\n            actual.close();\n            csr.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","sourceNew":"    /** This test creates compound file based on a single file.\n     *  Files of different sizes are tested: 0, 1, 10, 100 bytes.\n     */\n    public void testSingleFile() throws IOException {\n        int data[] = new int[] { 0, 1, 10, 100 };\n        for (int i=0; i<data.length; i++) {\n            String name = \"t\" + data[i];\n            createSequenceFile(dir, name, (byte) 0, data[i]);\n            CompoundFileDirectory csw = new CompoundFileDirectory(dir, name + \".cfs\", newIOContext(random()), true);\n            dir.copy(csw, name, name, newIOContext(random()));\n            csw.close();\n\n            CompoundFileDirectory csr = new CompoundFileDirectory(dir, name + \".cfs\", newIOContext(random()), false);\n            IndexInput expected = dir.openInput(name, newIOContext(random()));\n            IndexInput actual = csr.openInput(name, newIOContext(random()));\n            assertSameStreams(name, expected, actual);\n            assertSameSeekBehavior(name, expected, actual);\n            expected.close();\n            actual.close();\n            csr.close();\n        }\n    }\n\n","sourceOld":"    /** This test creates compound file based on a single file.\n     *  Files of different sizes are tested: 0, 1, 10, 100 bytes.\n     */\n    public void testSingleFile() throws IOException {\n        int data[] = new int[] { 0, 1, 10, 100 };\n        for (int i=0; i<data.length; i++) {\n            String name = \"t\" + data[i];\n            createSequenceFile(dir, name, (byte) 0, data[i]);\n            CompoundFileDirectory csw = new CompoundFileDirectory(dir, name + \".cfs\", newIOContext(random), true);\n            dir.copy(csw, name, name, newIOContext(random));\n            csw.close();\n\n            CompoundFileDirectory csr = new CompoundFileDirectory(dir, name + \".cfs\", newIOContext(random), false);\n            IndexInput expected = dir.openInput(name, newIOContext(random));\n            IndexInput actual = csr.openInput(name, newIOContext(random));\n            assertSameStreams(name, expected, actual);\n            assertSameSeekBehavior(name, expected, actual);\n            expected.close();\n            actual.close();\n            csr.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","date":1412231650,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","sourceNew":"  /** \n   * This test creates compound file based on a single file.\n   * Files of different sizes are tested: 0, 1, 10, 100 bytes.\n   */\n  public void testSingleFile() throws IOException {\n    int data[] = new int[] { 0, 1, 10, 100 };\n    for (int i=0; i<data.length; i++) {\n      byte id[] = StringHelper.randomId();\n      String name = \"t\" + data[i];\n      createSequenceFile(dir, name, (byte) 0, data[i]);\n      CompoundFileDirectory csw = new CompoundFileDirectory(id, dir, name + \".cfs\", newIOContext(random()), true);\n      dir.copy(csw, name, name, newIOContext(random()));\n      csw.close();\n      \n      CompoundFileDirectory csr = new CompoundFileDirectory(id, dir, name + \".cfs\", newIOContext(random()), false);\n      IndexInput expected = dir.openInput(name, newIOContext(random()));\n      IndexInput actual = csr.openInput(name, newIOContext(random()));\n      assertSameStreams(name, expected, actual);\n      assertSameSeekBehavior(name, expected, actual);\n      expected.close();\n      actual.close();\n      csr.close();\n    }\n  }\n\n","sourceOld":"    /** This test creates compound file based on a single file.\n     *  Files of different sizes are tested: 0, 1, 10, 100 bytes.\n     */\n    public void testSingleFile() throws IOException {\n        int data[] = new int[] { 0, 1, 10, 100 };\n        for (int i=0; i<data.length; i++) {\n            String name = \"t\" + data[i];\n            createSequenceFile(dir, name, (byte) 0, data[i]);\n            CompoundFileDirectory csw = new CompoundFileDirectory(dir, name + \".cfs\", newIOContext(random()), true);\n            dir.copy(csw, name, name, newIOContext(random()));\n            csw.close();\n\n            CompoundFileDirectory csr = new CompoundFileDirectory(dir, name + \".cfs\", newIOContext(random()), false);\n            IndexInput expected = dir.openInput(name, newIOContext(random()));\n            IndexInput actual = csr.openInput(name, newIOContext(random()));\n            assertSameStreams(name, expected, actual);\n            assertSameSeekBehavior(name, expected, actual);\n            expected.close();\n            actual.close();\n            csr.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","sourceNew":null,"sourceOld":"  /** \n   * This test creates compound file based on a single file.\n   * Files of different sizes are tested: 0, 1, 10, 100 bytes.\n   */\n  public void testSingleFile() throws IOException {\n    int data[] = new int[] { 0, 1, 10, 100 };\n    for (int i=0; i<data.length; i++) {\n      byte id[] = StringHelper.randomId();\n      String name = \"t\" + data[i];\n      createSequenceFile(dir, name, (byte) 0, data[i]);\n      CompoundFileDirectory csw = new CompoundFileDirectory(id, dir, name + \".cfs\", newIOContext(random()), true);\n      dir.copy(csw, name, name, newIOContext(random()));\n      csw.close();\n      \n      CompoundFileDirectory csr = new CompoundFileDirectory(id, dir, name + \".cfs\", newIOContext(random()), false);\n      IndexInput expected = dir.openInput(name, newIOContext(random()));\n      IndexInput actual = csr.openInput(name, newIOContext(random()));\n      assertSameStreams(name, expected, actual);\n      assertSameSeekBehavior(name, expected, actual);\n      expected.close();\n      actual.close();\n      csr.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","sourceNew":null,"sourceOld":"    /** This test creates compound file based on a single file.\n     *  Files of different sizes are tested: 0, 1, 10, 100 bytes.\n     */\n    public void testSingleFile() throws IOException {\n        int data[] = new int[] { 0, 1, 10, 100 };\n        for (int i=0; i<data.length; i++) {\n            String name = \"t\" + data[i];\n            createSequenceFile(dir, name, (byte) 0, data[i]);\n            CompoundFileDirectory csw = new CompoundFileDirectory(dir, name + \".cfs\", newIOContext(random()), true);\n            dir.copy(csw, name, name, newIOContext(random()));\n            csw.close();\n\n            CompoundFileDirectory csr = new CompoundFileDirectory(dir, name + \".cfs\", newIOContext(random()), false);\n            IndexInput expected = dir.openInput(name, newIOContext(random()));\n            IndexInput actual = csr.openInput(name, newIOContext(random()));\n            assertSameStreams(name, expected, actual);\n            assertSameSeekBehavior(name, expected, actual);\n            expected.close();\n            actual.close();\n            csr.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"989d940c4bf402188f4f0ae13736836885227383":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","989d940c4bf402188f4f0ae13736836885227383"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"989d940c4bf402188f4f0ae13736836885227383":["9bb9a29a5e71a90295f175df8919802993142c9a"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["989d940c4bf402188f4f0ae13736836885227383"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}