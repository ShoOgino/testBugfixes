{"path":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testTopPhrases().mjava","commits":[{"id":"33eef98c565ee21b199f04b92acd6e00b842bd1e","date":1514538360,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testTopPhrases().mjava","pathOld":"/dev/null","sourceNew":"  public void testTopPhrases() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    String[] docs = Arrays.copyOf(DOCS, DOCS.length);\n    Collections.shuffle(Arrays.asList(docs), random());\n    for (String value : DOCS) {\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", value, Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(r);\n    for (Query query : Arrays.asList(\n        new PhraseQuery(\"f\", \"b\", \"c\"), // common phrase\n        new PhraseQuery(\"f\", \"e\", \"f\"), // always appear next to each other\n        new PhraseQuery(\"f\", \"d\", \"d\")  // repeated term\n        )) {\n      for (int topN = 1; topN <= 2; ++topN) {\n        TopScoreDocCollector collector1 = TopScoreDocCollector.create(topN, null, true);\n        searcher.search(query, collector1);\n        ScoreDoc[] hits1 = collector1.topDocs().scoreDocs;\n        TopScoreDocCollector collector2 = TopScoreDocCollector.create(topN, null, false);\n        searcher.search(query, collector2);\n        ScoreDoc[] hits2 = collector2.topDocs().scoreDocs;\n        assertTrue(\"\" + query, hits1.length > 0);\n        CheckHits.checkEqual(query, hits1, hits2);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testTopPhrases().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testTopPhrases().mjava","sourceNew":"  public void testTopPhrases() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    String[] docs = ArrayUtil.copyOfSubArray(DOCS, 0, DOCS.length);\n    Collections.shuffle(Arrays.asList(docs), random());\n    for (String value : DOCS) {\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", value, Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(r);\n    for (Query query : Arrays.asList(\n        new PhraseQuery(\"f\", \"b\", \"c\"), // common phrase\n        new PhraseQuery(\"f\", \"e\", \"f\"), // always appear next to each other\n        new PhraseQuery(\"f\", \"d\", \"d\")  // repeated term\n        )) {\n      for (int topN = 1; topN <= 2; ++topN) {\n        TopScoreDocCollector collector1 = TopScoreDocCollector.create(topN, null, true);\n        searcher.search(query, collector1);\n        ScoreDoc[] hits1 = collector1.topDocs().scoreDocs;\n        TopScoreDocCollector collector2 = TopScoreDocCollector.create(topN, null, false);\n        searcher.search(query, collector2);\n        ScoreDoc[] hits2 = collector2.topDocs().scoreDocs;\n        assertTrue(\"\" + query, hits1.length > 0);\n        CheckHits.checkEqual(query, hits1, hits2);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTopPhrases() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    String[] docs = Arrays.copyOf(DOCS, DOCS.length);\n    Collections.shuffle(Arrays.asList(docs), random());\n    for (String value : DOCS) {\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", value, Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(r);\n    for (Query query : Arrays.asList(\n        new PhraseQuery(\"f\", \"b\", \"c\"), // common phrase\n        new PhraseQuery(\"f\", \"e\", \"f\"), // always appear next to each other\n        new PhraseQuery(\"f\", \"d\", \"d\")  // repeated term\n        )) {\n      for (int topN = 1; topN <= 2; ++topN) {\n        TopScoreDocCollector collector1 = TopScoreDocCollector.create(topN, null, true);\n        searcher.search(query, collector1);\n        ScoreDoc[] hits1 = collector1.topDocs().scoreDocs;\n        TopScoreDocCollector collector2 = TopScoreDocCollector.create(topN, null, false);\n        searcher.search(query, collector2);\n        ScoreDoc[] hits2 = collector2.topDocs().scoreDocs;\n        assertTrue(\"\" + query, hits1.length > 0);\n        CheckHits.checkEqual(query, hits1, hits2);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testTopPhrases().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testTopPhrases().mjava","sourceNew":"  public void testTopPhrases() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    String[] docs = ArrayUtil.copyOfSubArray(DOCS, 0, DOCS.length);\n    Collections.shuffle(Arrays.asList(docs), random());\n    for (String value : DOCS) {\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", value, Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(r);\n    for (Query query : Arrays.asList(\n        new PhraseQuery(\"f\", \"b\", \"c\"), // common phrase\n        new PhraseQuery(\"f\", \"e\", \"f\"), // always appear next to each other\n        new PhraseQuery(\"f\", \"d\", \"d\")  // repeated term\n        )) {\n      for (int topN = 1; topN <= 2; ++topN) {\n        TopScoreDocCollector collector1 = TopScoreDocCollector.create(topN, null, true);\n        searcher.search(query, collector1);\n        ScoreDoc[] hits1 = collector1.topDocs().scoreDocs;\n        TopScoreDocCollector collector2 = TopScoreDocCollector.create(topN, null, false);\n        searcher.search(query, collector2);\n        ScoreDoc[] hits2 = collector2.topDocs().scoreDocs;\n        assertTrue(\"\" + query, hits1.length > 0);\n        CheckHits.checkEqual(query, hits1, hits2);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTopPhrases() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    String[] docs = Arrays.copyOf(DOCS, DOCS.length);\n    Collections.shuffle(Arrays.asList(docs), random());\n    for (String value : DOCS) {\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", value, Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(r);\n    for (Query query : Arrays.asList(\n        new PhraseQuery(\"f\", \"b\", \"c\"), // common phrase\n        new PhraseQuery(\"f\", \"e\", \"f\"), // always appear next to each other\n        new PhraseQuery(\"f\", \"d\", \"d\")  // repeated term\n        )) {\n      for (int topN = 1; topN <= 2; ++topN) {\n        TopScoreDocCollector collector1 = TopScoreDocCollector.create(topN, null, true);\n        searcher.search(query, collector1);\n        ScoreDoc[] hits1 = collector1.topDocs().scoreDocs;\n        TopScoreDocCollector collector2 = TopScoreDocCollector.create(topN, null, false);\n        searcher.search(query, collector2);\n        ScoreDoc[] hits2 = collector2.topDocs().scoreDocs;\n        assertTrue(\"\" + query, hits1.length > 0);\n        CheckHits.checkEqual(query, hits1, hits2);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testTopPhrases().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testTopPhrases().mjava","sourceNew":"  public void testTopPhrases() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    String[] docs = ArrayUtil.copyOfSubArray(DOCS, 0, DOCS.length);\n    Collections.shuffle(Arrays.asList(docs), random());\n    for (String value : DOCS) {\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", value, Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(r);\n    for (Query query : Arrays.asList(\n        new PhraseQuery(\"f\", \"b\", \"c\"), // common phrase\n        new PhraseQuery(\"f\", \"e\", \"f\"), // always appear next to each other\n        new PhraseQuery(\"f\", \"d\", \"d\")  // repeated term\n        )) {\n      for (int topN = 1; topN <= 2; ++topN) {\n        TopScoreDocCollector collector1 = TopScoreDocCollector.create(topN, null, true);\n        searcher.search(query, collector1);\n        ScoreDoc[] hits1 = collector1.topDocs().scoreDocs;\n        TopScoreDocCollector collector2 = TopScoreDocCollector.create(topN, null, false);\n        searcher.search(query, collector2);\n        ScoreDoc[] hits2 = collector2.topDocs().scoreDocs;\n        assertTrue(\"\" + query, hits1.length > 0);\n        CheckHits.checkEqual(query, hits1, hits2);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTopPhrases() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    String[] docs = Arrays.copyOf(DOCS, DOCS.length);\n    Collections.shuffle(Arrays.asList(docs), random());\n    for (String value : DOCS) {\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", value, Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(r);\n    for (Query query : Arrays.asList(\n        new PhraseQuery(\"f\", \"b\", \"c\"), // common phrase\n        new PhraseQuery(\"f\", \"e\", \"f\"), // always appear next to each other\n        new PhraseQuery(\"f\", \"d\", \"d\")  // repeated term\n        )) {\n      for (int topN = 1; topN <= 2; ++topN) {\n        TopScoreDocCollector collector1 = TopScoreDocCollector.create(topN, null, true);\n        searcher.search(query, collector1);\n        ScoreDoc[] hits1 = collector1.topDocs().scoreDocs;\n        TopScoreDocCollector collector2 = TopScoreDocCollector.create(topN, null, false);\n        searcher.search(query, collector2);\n        ScoreDoc[] hits2 = collector2.topDocs().scoreDocs;\n        assertTrue(\"\" + query, hits1.length > 0);\n        CheckHits.checkEqual(query, hits1, hits2);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testTopPhrases().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testTopPhrases().mjava","sourceNew":"  public void testTopPhrases() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    String[] docs = ArrayUtil.copyOfSubArray(DOCS, 0, DOCS.length);\n    Collections.shuffle(Arrays.asList(docs), random());\n    for (String value : DOCS) {\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", value, Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(r);\n    for (Query query : Arrays.asList(\n        new PhraseQuery(\"f\", \"b\", \"c\"), // common phrase\n        new PhraseQuery(\"f\", \"e\", \"f\"), // always appear next to each other\n        new PhraseQuery(\"f\", \"d\", \"d\")  // repeated term\n        )) {\n      for (int topN = 1; topN <= 2; ++topN) {\n        TopScoreDocCollector collector1 = TopScoreDocCollector.create(topN, null, Integer.MAX_VALUE);\n        searcher.search(query, collector1);\n        ScoreDoc[] hits1 = collector1.topDocs().scoreDocs;\n        TopScoreDocCollector collector2 = TopScoreDocCollector.create(topN, null, 1);\n        searcher.search(query, collector2);\n        ScoreDoc[] hits2 = collector2.topDocs().scoreDocs;\n        assertTrue(\"\" + query, hits1.length > 0);\n        CheckHits.checkEqual(query, hits1, hits2);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTopPhrases() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    String[] docs = ArrayUtil.copyOfSubArray(DOCS, 0, DOCS.length);\n    Collections.shuffle(Arrays.asList(docs), random());\n    for (String value : DOCS) {\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", value, Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(r);\n    for (Query query : Arrays.asList(\n        new PhraseQuery(\"f\", \"b\", \"c\"), // common phrase\n        new PhraseQuery(\"f\", \"e\", \"f\"), // always appear next to each other\n        new PhraseQuery(\"f\", \"d\", \"d\")  // repeated term\n        )) {\n      for (int topN = 1; topN <= 2; ++topN) {\n        TopScoreDocCollector collector1 = TopScoreDocCollector.create(topN, null, true);\n        searcher.search(query, collector1);\n        ScoreDoc[] hits1 = collector1.topDocs().scoreDocs;\n        TopScoreDocCollector collector2 = TopScoreDocCollector.create(topN, null, false);\n        searcher.search(query, collector2);\n        ScoreDoc[] hits2 = collector2.topDocs().scoreDocs;\n        assertTrue(\"\" + query, hits1.length > 0);\n        CheckHits.checkEqual(query, hits1, hits2);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33eef98c565ee21b199f04b92acd6e00b842bd1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["33eef98c565ee21b199f04b92acd6e00b842bd1e","9798d0818e7a880546802b509792d3f3d57babd2"],"9798d0818e7a880546802b509792d3f3d57babd2":["33eef98c565ee21b199f04b92acd6e00b842bd1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["33eef98c565ee21b199f04b92acd6e00b842bd1e","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"33eef98c565ee21b199f04b92acd6e00b842bd1e":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33eef98c565ee21b199f04b92acd6e00b842bd1e"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","fe3c6364bed04a73ad0884b05401d80ce96027a9","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}