{"path":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testClassLoaderLibs().mjava","commits":[{"id":"5268b3b46fa91a88e4d8fdd00f16f42577e6da11","date":1368012863,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testClassLoaderLibs().mjava","pathOld":"/dev/null","sourceNew":"  public void testClassLoaderLibs() throws Exception {\n    File tmpRoot = _TestUtil.getTempDir(\"testClassLoaderLibs\");\n\n    File lib = new File(tmpRoot, \"lib\");\n    lib.mkdirs();\n\n    JarOutputStream jar1 = new JarOutputStream(new FileOutputStream(new File(lib, \"jar1.jar\")));\n    jar1.putNextEntry(new JarEntry(\"aLibFile\"));\n    jar1.closeEntry();\n    jar1.close();\n\n    File otherLib = new File(tmpRoot, \"otherLib\");\n    otherLib.mkdirs();\n\n    JarOutputStream jar2 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar2.jar\")));\n    jar2.putNextEntry(new JarEntry(\"explicitFile\"));\n    jar2.closeEntry();\n    jar2.close();\n    JarOutputStream jar3 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar3.jar\")));\n    jar3.putNextEntry(new JarEntry(\"otherFile\"));\n    jar3.closeEntry();\n    jar3.close();\n\n    SolrResourceLoader loader = new SolrResourceLoader(tmpRoot.getAbsolutePath());\n\n    // ./lib is accessible by default\n    assertNotNull(loader.getClassLoader().getResource(\"aLibFile\"));\n\n    // file filter works (and doesn't add other files in the same dir)\n    final File explicitFileJar = new File(otherLib, \"jar2.jar\").getAbsoluteFile();\n    loader.addToClassLoader(\"otherLib\",\n        new FileFilter() {\n          @Override\n          public boolean accept(File pathname) {\n            return pathname.equals(explicitFileJar);\n          }\n        }, false);\n    assertNotNull(loader.getClassLoader().getResource(\"explicitFile\"));\n    assertNull(loader.getClassLoader().getResource(\"otherFile\"));\n\n\n    // null file filter means accept all (making otherFile accessible)\n    loader.addToClassLoader(\"otherLib\", null, false);\n    assertNotNull(loader.getClassLoader().getResource(\"otherFile\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d7032150736f83396eb1fd9fc65e18b918099be","date":1368033706,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testClassLoaderLibs().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testClassLoaderLibs().mjava","sourceNew":"  public void testClassLoaderLibs() throws Exception {\n    File tmpRoot = _TestUtil.getTempDir(\"testClassLoaderLibs\");\n\n    File lib = new File(tmpRoot, \"lib\");\n    lib.mkdirs();\n\n    JarOutputStream jar1 = new JarOutputStream(new FileOutputStream(new File(lib, \"jar1.jar\")));\n    jar1.putNextEntry(new JarEntry(\"aLibFile\"));\n    jar1.closeEntry();\n    jar1.close();\n\n    File otherLib = new File(tmpRoot, \"otherLib\");\n    otherLib.mkdirs();\n\n    JarOutputStream jar2 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar2.jar\")));\n    jar2.putNextEntry(new JarEntry(\"explicitFile\"));\n    jar2.closeEntry();\n    jar2.close();\n    JarOutputStream jar3 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar3.jar\")));\n    jar3.putNextEntry(new JarEntry(\"otherFile\"));\n    jar3.closeEntry();\n    jar3.close();\n\n    SolrResourceLoader loader = new SolrResourceLoader(tmpRoot.getAbsolutePath());\n\n    // ./lib is accessible by default\n    assertNotNull(loader.getClassLoader().getResource(\"aLibFile\"));\n\n    // file filter works (and doesn't add other files in the same dir)\n    final File explicitFileJar = new File(otherLib, \"jar2.jar\").getAbsoluteFile();\n    loader.addToClassLoader(\"otherLib\",\n        new FileFilter() {\n          @Override\n          public boolean accept(File pathname) {\n            return pathname.equals(explicitFileJar);\n          }\n        }, false);\n    assertNotNull(loader.getClassLoader().getResource(\"explicitFile\"));\n    assertNull(loader.getClassLoader().getResource(\"otherFile\"));\n\n\n    // null file filter means accept all (making otherFile accessible)\n    loader.addToClassLoader(\"otherLib\", null, false);\n    assertNotNull(loader.getClassLoader().getResource(\"otherFile\"));\n    loader.close();\n  }\n\n","sourceOld":"  public void testClassLoaderLibs() throws Exception {\n    File tmpRoot = _TestUtil.getTempDir(\"testClassLoaderLibs\");\n\n    File lib = new File(tmpRoot, \"lib\");\n    lib.mkdirs();\n\n    JarOutputStream jar1 = new JarOutputStream(new FileOutputStream(new File(lib, \"jar1.jar\")));\n    jar1.putNextEntry(new JarEntry(\"aLibFile\"));\n    jar1.closeEntry();\n    jar1.close();\n\n    File otherLib = new File(tmpRoot, \"otherLib\");\n    otherLib.mkdirs();\n\n    JarOutputStream jar2 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar2.jar\")));\n    jar2.putNextEntry(new JarEntry(\"explicitFile\"));\n    jar2.closeEntry();\n    jar2.close();\n    JarOutputStream jar3 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar3.jar\")));\n    jar3.putNextEntry(new JarEntry(\"otherFile\"));\n    jar3.closeEntry();\n    jar3.close();\n\n    SolrResourceLoader loader = new SolrResourceLoader(tmpRoot.getAbsolutePath());\n\n    // ./lib is accessible by default\n    assertNotNull(loader.getClassLoader().getResource(\"aLibFile\"));\n\n    // file filter works (and doesn't add other files in the same dir)\n    final File explicitFileJar = new File(otherLib, \"jar2.jar\").getAbsoluteFile();\n    loader.addToClassLoader(\"otherLib\",\n        new FileFilter() {\n          @Override\n          public boolean accept(File pathname) {\n            return pathname.equals(explicitFileJar);\n          }\n        }, false);\n    assertNotNull(loader.getClassLoader().getResource(\"explicitFile\"));\n    assertNull(loader.getClassLoader().getResource(\"otherFile\"));\n\n\n    // null file filter means accept all (making otherFile accessible)\n    loader.addToClassLoader(\"otherLib\", null, false);\n    assertNotNull(loader.getClassLoader().getResource(\"otherFile\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testClassLoaderLibs().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testClassLoaderLibs().mjava","sourceNew":"  public void testClassLoaderLibs() throws Exception {\n    File tmpRoot = TestUtil.getTempDir(\"testClassLoaderLibs\");\n\n    File lib = new File(tmpRoot, \"lib\");\n    lib.mkdirs();\n\n    JarOutputStream jar1 = new JarOutputStream(new FileOutputStream(new File(lib, \"jar1.jar\")));\n    jar1.putNextEntry(new JarEntry(\"aLibFile\"));\n    jar1.closeEntry();\n    jar1.close();\n\n    File otherLib = new File(tmpRoot, \"otherLib\");\n    otherLib.mkdirs();\n\n    JarOutputStream jar2 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar2.jar\")));\n    jar2.putNextEntry(new JarEntry(\"explicitFile\"));\n    jar2.closeEntry();\n    jar2.close();\n    JarOutputStream jar3 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar3.jar\")));\n    jar3.putNextEntry(new JarEntry(\"otherFile\"));\n    jar3.closeEntry();\n    jar3.close();\n\n    SolrResourceLoader loader = new SolrResourceLoader(tmpRoot.getAbsolutePath());\n\n    // ./lib is accessible by default\n    assertNotNull(loader.getClassLoader().getResource(\"aLibFile\"));\n\n    // file filter works (and doesn't add other files in the same dir)\n    final File explicitFileJar = new File(otherLib, \"jar2.jar\").getAbsoluteFile();\n    loader.addToClassLoader(\"otherLib\",\n        new FileFilter() {\n          @Override\n          public boolean accept(File pathname) {\n            return pathname.equals(explicitFileJar);\n          }\n        }, false);\n    assertNotNull(loader.getClassLoader().getResource(\"explicitFile\"));\n    assertNull(loader.getClassLoader().getResource(\"otherFile\"));\n\n\n    // null file filter means accept all (making otherFile accessible)\n    loader.addToClassLoader(\"otherLib\", null, false);\n    assertNotNull(loader.getClassLoader().getResource(\"otherFile\"));\n    loader.close();\n  }\n\n","sourceOld":"  public void testClassLoaderLibs() throws Exception {\n    File tmpRoot = _TestUtil.getTempDir(\"testClassLoaderLibs\");\n\n    File lib = new File(tmpRoot, \"lib\");\n    lib.mkdirs();\n\n    JarOutputStream jar1 = new JarOutputStream(new FileOutputStream(new File(lib, \"jar1.jar\")));\n    jar1.putNextEntry(new JarEntry(\"aLibFile\"));\n    jar1.closeEntry();\n    jar1.close();\n\n    File otherLib = new File(tmpRoot, \"otherLib\");\n    otherLib.mkdirs();\n\n    JarOutputStream jar2 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar2.jar\")));\n    jar2.putNextEntry(new JarEntry(\"explicitFile\"));\n    jar2.closeEntry();\n    jar2.close();\n    JarOutputStream jar3 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar3.jar\")));\n    jar3.putNextEntry(new JarEntry(\"otherFile\"));\n    jar3.closeEntry();\n    jar3.close();\n\n    SolrResourceLoader loader = new SolrResourceLoader(tmpRoot.getAbsolutePath());\n\n    // ./lib is accessible by default\n    assertNotNull(loader.getClassLoader().getResource(\"aLibFile\"));\n\n    // file filter works (and doesn't add other files in the same dir)\n    final File explicitFileJar = new File(otherLib, \"jar2.jar\").getAbsoluteFile();\n    loader.addToClassLoader(\"otherLib\",\n        new FileFilter() {\n          @Override\n          public boolean accept(File pathname) {\n            return pathname.equals(explicitFileJar);\n          }\n        }, false);\n    assertNotNull(loader.getClassLoader().getResource(\"explicitFile\"));\n    assertNull(loader.getClassLoader().getResource(\"otherFile\"));\n\n\n    // null file filter means accept all (making otherFile accessible)\n    loader.addToClassLoader(\"otherLib\", null, false);\n    assertNotNull(loader.getClassLoader().getResource(\"otherFile\"));\n    loader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testClassLoaderLibs().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testClassLoaderLibs().mjava","sourceNew":"  public void testClassLoaderLibs() throws Exception {\n    File tmpRoot = TestUtil.createTempDir(\"testClassLoaderLibs\");\n\n    File lib = new File(tmpRoot, \"lib\");\n    lib.mkdirs();\n\n    JarOutputStream jar1 = new JarOutputStream(new FileOutputStream(new File(lib, \"jar1.jar\")));\n    jar1.putNextEntry(new JarEntry(\"aLibFile\"));\n    jar1.closeEntry();\n    jar1.close();\n\n    File otherLib = new File(tmpRoot, \"otherLib\");\n    otherLib.mkdirs();\n\n    JarOutputStream jar2 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar2.jar\")));\n    jar2.putNextEntry(new JarEntry(\"explicitFile\"));\n    jar2.closeEntry();\n    jar2.close();\n    JarOutputStream jar3 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar3.jar\")));\n    jar3.putNextEntry(new JarEntry(\"otherFile\"));\n    jar3.closeEntry();\n    jar3.close();\n\n    SolrResourceLoader loader = new SolrResourceLoader(tmpRoot.getAbsolutePath());\n\n    // ./lib is accessible by default\n    assertNotNull(loader.getClassLoader().getResource(\"aLibFile\"));\n\n    // file filter works (and doesn't add other files in the same dir)\n    final File explicitFileJar = new File(otherLib, \"jar2.jar\").getAbsoluteFile();\n    loader.addToClassLoader(\"otherLib\",\n        new FileFilter() {\n          @Override\n          public boolean accept(File pathname) {\n            return pathname.equals(explicitFileJar);\n          }\n        }, false);\n    assertNotNull(loader.getClassLoader().getResource(\"explicitFile\"));\n    assertNull(loader.getClassLoader().getResource(\"otherFile\"));\n\n\n    // null file filter means accept all (making otherFile accessible)\n    loader.addToClassLoader(\"otherLib\", null, false);\n    assertNotNull(loader.getClassLoader().getResource(\"otherFile\"));\n    loader.close();\n  }\n\n","sourceOld":"  public void testClassLoaderLibs() throws Exception {\n    File tmpRoot = TestUtil.getTempDir(\"testClassLoaderLibs\");\n\n    File lib = new File(tmpRoot, \"lib\");\n    lib.mkdirs();\n\n    JarOutputStream jar1 = new JarOutputStream(new FileOutputStream(new File(lib, \"jar1.jar\")));\n    jar1.putNextEntry(new JarEntry(\"aLibFile\"));\n    jar1.closeEntry();\n    jar1.close();\n\n    File otherLib = new File(tmpRoot, \"otherLib\");\n    otherLib.mkdirs();\n\n    JarOutputStream jar2 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar2.jar\")));\n    jar2.putNextEntry(new JarEntry(\"explicitFile\"));\n    jar2.closeEntry();\n    jar2.close();\n    JarOutputStream jar3 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar3.jar\")));\n    jar3.putNextEntry(new JarEntry(\"otherFile\"));\n    jar3.closeEntry();\n    jar3.close();\n\n    SolrResourceLoader loader = new SolrResourceLoader(tmpRoot.getAbsolutePath());\n\n    // ./lib is accessible by default\n    assertNotNull(loader.getClassLoader().getResource(\"aLibFile\"));\n\n    // file filter works (and doesn't add other files in the same dir)\n    final File explicitFileJar = new File(otherLib, \"jar2.jar\").getAbsoluteFile();\n    loader.addToClassLoader(\"otherLib\",\n        new FileFilter() {\n          @Override\n          public boolean accept(File pathname) {\n            return pathname.equals(explicitFileJar);\n          }\n        }, false);\n    assertNotNull(loader.getClassLoader().getResource(\"explicitFile\"));\n    assertNull(loader.getClassLoader().getResource(\"otherFile\"));\n\n\n    // null file filter means accept all (making otherFile accessible)\n    loader.addToClassLoader(\"otherLib\", null, false);\n    assertNotNull(loader.getClassLoader().getResource(\"otherFile\"));\n    loader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testClassLoaderLibs().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testClassLoaderLibs().mjava","sourceNew":"  public void testClassLoaderLibs() throws Exception {\n    File tmpRoot = createTempDir(\"testClassLoaderLibs\");\n\n    File lib = new File(tmpRoot, \"lib\");\n    lib.mkdirs();\n\n    JarOutputStream jar1 = new JarOutputStream(new FileOutputStream(new File(lib, \"jar1.jar\")));\n    jar1.putNextEntry(new JarEntry(\"aLibFile\"));\n    jar1.closeEntry();\n    jar1.close();\n\n    File otherLib = new File(tmpRoot, \"otherLib\");\n    otherLib.mkdirs();\n\n    JarOutputStream jar2 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar2.jar\")));\n    jar2.putNextEntry(new JarEntry(\"explicitFile\"));\n    jar2.closeEntry();\n    jar2.close();\n    JarOutputStream jar3 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar3.jar\")));\n    jar3.putNextEntry(new JarEntry(\"otherFile\"));\n    jar3.closeEntry();\n    jar3.close();\n\n    SolrResourceLoader loader = new SolrResourceLoader(tmpRoot.getAbsolutePath());\n\n    // ./lib is accessible by default\n    assertNotNull(loader.getClassLoader().getResource(\"aLibFile\"));\n\n    // file filter works (and doesn't add other files in the same dir)\n    final File explicitFileJar = new File(otherLib, \"jar2.jar\").getAbsoluteFile();\n    loader.addToClassLoader(\"otherLib\",\n        new FileFilter() {\n          @Override\n          public boolean accept(File pathname) {\n            return pathname.equals(explicitFileJar);\n          }\n        }, false);\n    assertNotNull(loader.getClassLoader().getResource(\"explicitFile\"));\n    assertNull(loader.getClassLoader().getResource(\"otherFile\"));\n\n\n    // null file filter means accept all (making otherFile accessible)\n    loader.addToClassLoader(\"otherLib\", null, false);\n    assertNotNull(loader.getClassLoader().getResource(\"otherFile\"));\n    loader.close();\n  }\n\n","sourceOld":"  public void testClassLoaderLibs() throws Exception {\n    File tmpRoot = TestUtil.createTempDir(\"testClassLoaderLibs\");\n\n    File lib = new File(tmpRoot, \"lib\");\n    lib.mkdirs();\n\n    JarOutputStream jar1 = new JarOutputStream(new FileOutputStream(new File(lib, \"jar1.jar\")));\n    jar1.putNextEntry(new JarEntry(\"aLibFile\"));\n    jar1.closeEntry();\n    jar1.close();\n\n    File otherLib = new File(tmpRoot, \"otherLib\");\n    otherLib.mkdirs();\n\n    JarOutputStream jar2 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar2.jar\")));\n    jar2.putNextEntry(new JarEntry(\"explicitFile\"));\n    jar2.closeEntry();\n    jar2.close();\n    JarOutputStream jar3 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar3.jar\")));\n    jar3.putNextEntry(new JarEntry(\"otherFile\"));\n    jar3.closeEntry();\n    jar3.close();\n\n    SolrResourceLoader loader = new SolrResourceLoader(tmpRoot.getAbsolutePath());\n\n    // ./lib is accessible by default\n    assertNotNull(loader.getClassLoader().getResource(\"aLibFile\"));\n\n    // file filter works (and doesn't add other files in the same dir)\n    final File explicitFileJar = new File(otherLib, \"jar2.jar\").getAbsoluteFile();\n    loader.addToClassLoader(\"otherLib\",\n        new FileFilter() {\n          @Override\n          public boolean accept(File pathname) {\n            return pathname.equals(explicitFileJar);\n          }\n        }, false);\n    assertNotNull(loader.getClassLoader().getResource(\"explicitFile\"));\n    assertNull(loader.getClassLoader().getResource(\"otherFile\"));\n\n\n    // null file filter means accept all (making otherFile accessible)\n    loader.addToClassLoader(\"otherLib\", null, false);\n    assertNotNull(loader.getClassLoader().getResource(\"otherFile\"));\n    loader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testClassLoaderLibs().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testClassLoaderLibs().mjava","sourceNew":"  public void testClassLoaderLibs() throws Exception {\n    File tmpRoot = createTempDir(\"testClassLoaderLibs\");\n\n    File lib = new File(tmpRoot, \"lib\");\n    lib.mkdirs();\n\n    JarOutputStream jar1 = new JarOutputStream(new FileOutputStream(new File(lib, \"jar1.jar\")));\n    jar1.putNextEntry(new JarEntry(\"aLibFile\"));\n    jar1.closeEntry();\n    jar1.close();\n\n    File otherLib = new File(tmpRoot, \"otherLib\");\n    otherLib.mkdirs();\n\n    JarOutputStream jar2 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar2.jar\")));\n    jar2.putNextEntry(new JarEntry(\"explicitFile\"));\n    jar2.closeEntry();\n    jar2.close();\n    JarOutputStream jar3 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar3.jar\")));\n    jar3.putNextEntry(new JarEntry(\"otherFile\"));\n    jar3.closeEntry();\n    jar3.close();\n\n    SolrResourceLoader loader = new SolrResourceLoader(tmpRoot.getAbsolutePath());\n\n    // ./lib is accessible by default\n    assertNotNull(loader.getClassLoader().getResource(\"aLibFile\"));\n\n    // file filter works (and doesn't add other files in the same dir)\n    final File explicitFileJar = new File(otherLib, \"jar2.jar\").getAbsoluteFile();\n    loader.addToClassLoader(\"otherLib\",\n        new FileFilter() {\n          @Override\n          public boolean accept(File pathname) {\n            return pathname.equals(explicitFileJar);\n          }\n        }, false);\n    assertNotNull(loader.getClassLoader().getResource(\"explicitFile\"));\n    assertNull(loader.getClassLoader().getResource(\"otherFile\"));\n\n\n    // null file filter means accept all (making otherFile accessible)\n    loader.addToClassLoader(\"otherLib\", null, false);\n    assertNotNull(loader.getClassLoader().getResource(\"otherFile\"));\n    loader.close();\n  }\n\n","sourceOld":"  public void testClassLoaderLibs() throws Exception {\n    File tmpRoot = TestUtil.getTempDir(\"testClassLoaderLibs\");\n\n    File lib = new File(tmpRoot, \"lib\");\n    lib.mkdirs();\n\n    JarOutputStream jar1 = new JarOutputStream(new FileOutputStream(new File(lib, \"jar1.jar\")));\n    jar1.putNextEntry(new JarEntry(\"aLibFile\"));\n    jar1.closeEntry();\n    jar1.close();\n\n    File otherLib = new File(tmpRoot, \"otherLib\");\n    otherLib.mkdirs();\n\n    JarOutputStream jar2 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar2.jar\")));\n    jar2.putNextEntry(new JarEntry(\"explicitFile\"));\n    jar2.closeEntry();\n    jar2.close();\n    JarOutputStream jar3 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar3.jar\")));\n    jar3.putNextEntry(new JarEntry(\"otherFile\"));\n    jar3.closeEntry();\n    jar3.close();\n\n    SolrResourceLoader loader = new SolrResourceLoader(tmpRoot.getAbsolutePath());\n\n    // ./lib is accessible by default\n    assertNotNull(loader.getClassLoader().getResource(\"aLibFile\"));\n\n    // file filter works (and doesn't add other files in the same dir)\n    final File explicitFileJar = new File(otherLib, \"jar2.jar\").getAbsoluteFile();\n    loader.addToClassLoader(\"otherLib\",\n        new FileFilter() {\n          @Override\n          public boolean accept(File pathname) {\n            return pathname.equals(explicitFileJar);\n          }\n        }, false);\n    assertNotNull(loader.getClassLoader().getResource(\"explicitFile\"));\n    assertNull(loader.getClassLoader().getResource(\"otherFile\"));\n\n\n    // null file filter means accept all (making otherFile accessible)\n    loader.addToClassLoader(\"otherLib\", null, false);\n    assertNotNull(loader.getClassLoader().getResource(\"otherFile\"));\n    loader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testClassLoaderLibs().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testClassLoaderLibs().mjava","sourceNew":"  public void testClassLoaderLibs() throws Exception {\n    File tmpRoot = createTempDir(\"testClassLoaderLibs\").toFile();\n\n    File lib = new File(tmpRoot, \"lib\");\n    lib.mkdirs();\n\n    JarOutputStream jar1 = new JarOutputStream(new FileOutputStream(new File(lib, \"jar1.jar\")));\n    jar1.putNextEntry(new JarEntry(\"aLibFile\"));\n    jar1.closeEntry();\n    jar1.close();\n\n    File otherLib = new File(tmpRoot, \"otherLib\");\n    otherLib.mkdirs();\n\n    JarOutputStream jar2 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar2.jar\")));\n    jar2.putNextEntry(new JarEntry(\"explicitFile\"));\n    jar2.closeEntry();\n    jar2.close();\n    JarOutputStream jar3 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar3.jar\")));\n    jar3.putNextEntry(new JarEntry(\"otherFile\"));\n    jar3.closeEntry();\n    jar3.close();\n\n    SolrResourceLoader loader = new SolrResourceLoader(tmpRoot.getAbsolutePath());\n\n    // ./lib is accessible by default\n    assertNotNull(loader.getClassLoader().getResource(\"aLibFile\"));\n\n    // file filter works (and doesn't add other files in the same dir)\n    final File explicitFileJar = new File(otherLib, \"jar2.jar\").getAbsoluteFile();\n    loader.addToClassLoader(\"otherLib\",\n        new FileFilter() {\n          @Override\n          public boolean accept(File pathname) {\n            return pathname.equals(explicitFileJar);\n          }\n        }, false);\n    assertNotNull(loader.getClassLoader().getResource(\"explicitFile\"));\n    assertNull(loader.getClassLoader().getResource(\"otherFile\"));\n\n\n    // null file filter means accept all (making otherFile accessible)\n    loader.addToClassLoader(\"otherLib\", null, false);\n    assertNotNull(loader.getClassLoader().getResource(\"otherFile\"));\n    loader.close();\n  }\n\n","sourceOld":"  public void testClassLoaderLibs() throws Exception {\n    File tmpRoot = createTempDir(\"testClassLoaderLibs\");\n\n    File lib = new File(tmpRoot, \"lib\");\n    lib.mkdirs();\n\n    JarOutputStream jar1 = new JarOutputStream(new FileOutputStream(new File(lib, \"jar1.jar\")));\n    jar1.putNextEntry(new JarEntry(\"aLibFile\"));\n    jar1.closeEntry();\n    jar1.close();\n\n    File otherLib = new File(tmpRoot, \"otherLib\");\n    otherLib.mkdirs();\n\n    JarOutputStream jar2 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar2.jar\")));\n    jar2.putNextEntry(new JarEntry(\"explicitFile\"));\n    jar2.closeEntry();\n    jar2.close();\n    JarOutputStream jar3 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar3.jar\")));\n    jar3.putNextEntry(new JarEntry(\"otherFile\"));\n    jar3.closeEntry();\n    jar3.close();\n\n    SolrResourceLoader loader = new SolrResourceLoader(tmpRoot.getAbsolutePath());\n\n    // ./lib is accessible by default\n    assertNotNull(loader.getClassLoader().getResource(\"aLibFile\"));\n\n    // file filter works (and doesn't add other files in the same dir)\n    final File explicitFileJar = new File(otherLib, \"jar2.jar\").getAbsoluteFile();\n    loader.addToClassLoader(\"otherLib\",\n        new FileFilter() {\n          @Override\n          public boolean accept(File pathname) {\n            return pathname.equals(explicitFileJar);\n          }\n        }, false);\n    assertNotNull(loader.getClassLoader().getResource(\"explicitFile\"));\n    assertNull(loader.getClassLoader().getResource(\"otherFile\"));\n\n\n    // null file filter means accept all (making otherFile accessible)\n    loader.addToClassLoader(\"otherLib\", null, false);\n    assertNotNull(loader.getClassLoader().getResource(\"otherFile\"));\n    loader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testClassLoaderLibs().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testClassLoaderLibs().mjava","sourceNew":"  public void testClassLoaderLibs() throws Exception {\n    Path tmpRoot = createTempDir(\"testClassLoaderLibs\");\n\n    Path lib = tmpRoot.resolve(\"lib\");\n    Files.createDirectories(lib);\n\n    try (JarOutputStream os = new JarOutputStream(Files.newOutputStream(lib.resolve(\"jar1.jar\")))) {\n      os.putNextEntry(new JarEntry(\"aLibFile\"));\n      os.closeEntry();\n    }\n\n    Path otherLib = tmpRoot.resolve(\"otherLib\");\n    Files.createDirectories(otherLib);\n\n    try (JarOutputStream os = new JarOutputStream(Files.newOutputStream(otherLib.resolve(\"jar2.jar\")))) {\n      os.putNextEntry(new JarEntry(\"explicitFile\"));\n      os.closeEntry();\n    }\n    try (JarOutputStream os = new JarOutputStream(Files.newOutputStream(otherLib.resolve(\"jar3.jar\")))) {\n      os.putNextEntry(new JarEntry(\"otherFile\"));\n      os.closeEntry();\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(tmpRoot);\n\n    // ./lib is accessible by default\n    assertNotNull(loader.getClassLoader().getResource(\"aLibFile\"));\n\n    // add inidividual jars from other paths\n    loader.addToClassLoader(otherLib.resolve(\"jar2.jar\").toUri().toURL());\n\n    assertNotNull(loader.getClassLoader().getResource(\"explicitFile\"));\n    assertNull(loader.getClassLoader().getResource(\"otherFile\"));\n\n    // add all jars from another path\n    loader.addToClassLoader(SolrResourceLoader.getURLs(otherLib));\n    assertNotNull(loader.getClassLoader().getResource(\"otherFile\"));\n    loader.close();\n  }\n\n","sourceOld":"  public void testClassLoaderLibs() throws Exception {\n    File tmpRoot = createTempDir(\"testClassLoaderLibs\").toFile();\n\n    File lib = new File(tmpRoot, \"lib\");\n    lib.mkdirs();\n\n    JarOutputStream jar1 = new JarOutputStream(new FileOutputStream(new File(lib, \"jar1.jar\")));\n    jar1.putNextEntry(new JarEntry(\"aLibFile\"));\n    jar1.closeEntry();\n    jar1.close();\n\n    File otherLib = new File(tmpRoot, \"otherLib\");\n    otherLib.mkdirs();\n\n    JarOutputStream jar2 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar2.jar\")));\n    jar2.putNextEntry(new JarEntry(\"explicitFile\"));\n    jar2.closeEntry();\n    jar2.close();\n    JarOutputStream jar3 = new JarOutputStream(new FileOutputStream(new File(otherLib, \"jar3.jar\")));\n    jar3.putNextEntry(new JarEntry(\"otherFile\"));\n    jar3.closeEntry();\n    jar3.close();\n\n    SolrResourceLoader loader = new SolrResourceLoader(tmpRoot.getAbsolutePath());\n\n    // ./lib is accessible by default\n    assertNotNull(loader.getClassLoader().getResource(\"aLibFile\"));\n\n    // file filter works (and doesn't add other files in the same dir)\n    final File explicitFileJar = new File(otherLib, \"jar2.jar\").getAbsoluteFile();\n    loader.addToClassLoader(\"otherLib\",\n        new FileFilter() {\n          @Override\n          public boolean accept(File pathname) {\n            return pathname.equals(explicitFileJar);\n          }\n        }, false);\n    assertNotNull(loader.getClassLoader().getResource(\"explicitFile\"));\n    assertNull(loader.getClassLoader().getResource(\"otherFile\"));\n\n\n    // null file filter means accept all (making otherFile accessible)\n    loader.addToClassLoader(\"otherLib\", null, false);\n    assertNotNull(loader.getClassLoader().getResource(\"otherFile\"));\n    loader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testClassLoaderLibs().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testClassLoaderLibs().mjava","sourceNew":"  public void testClassLoaderLibs() throws Exception {\n    Path tmpRoot = createTempDir(\"testClassLoaderLibs\");\n\n    Path lib = tmpRoot.resolve(\"lib\");\n    Files.createDirectories(lib);\n\n    try (JarOutputStream os = new JarOutputStream(Files.newOutputStream(lib.resolve(\"jar1.jar\")))) {\n      os.putNextEntry(new JarEntry(\"aLibFile\"));\n      os.closeEntry();\n    }\n\n    Path otherLib = tmpRoot.resolve(\"otherLib\");\n    Files.createDirectories(otherLib);\n\n    try (JarOutputStream os = new JarOutputStream(Files.newOutputStream(otherLib.resolve(\"jar2.jar\")))) {\n      os.putNextEntry(new JarEntry(\"explicitFile\"));\n      os.closeEntry();\n    }\n    try (JarOutputStream os = new JarOutputStream(Files.newOutputStream(otherLib.resolve(\"jar3.jar\")))) {\n      os.putNextEntry(new JarEntry(\"otherFile\"));\n      os.closeEntry();\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(tmpRoot);\n    loader.addToClassLoader(SolrResourceLoader.getURLs(lib));\n\n    // check \"lib/aLibFile\"\n    assertNotNull(loader.getClassLoader().getResource(\"aLibFile\"));\n\n    // add inidividual jars from other paths\n    loader.addToClassLoader(Collections.singletonList(otherLib.resolve(\"jar2.jar\").toUri().toURL()));\n\n    assertNotNull(loader.getClassLoader().getResource(\"explicitFile\"));\n    assertNull(loader.getClassLoader().getResource(\"otherFile\"));\n\n    // add all jars from another path\n    loader.addToClassLoader(SolrResourceLoader.getURLs(otherLib));\n    assertNotNull(loader.getClassLoader().getResource(\"otherFile\"));\n    loader.close();\n  }\n\n","sourceOld":"  public void testClassLoaderLibs() throws Exception {\n    Path tmpRoot = createTempDir(\"testClassLoaderLibs\");\n\n    Path lib = tmpRoot.resolve(\"lib\");\n    Files.createDirectories(lib);\n\n    try (JarOutputStream os = new JarOutputStream(Files.newOutputStream(lib.resolve(\"jar1.jar\")))) {\n      os.putNextEntry(new JarEntry(\"aLibFile\"));\n      os.closeEntry();\n    }\n\n    Path otherLib = tmpRoot.resolve(\"otherLib\");\n    Files.createDirectories(otherLib);\n\n    try (JarOutputStream os = new JarOutputStream(Files.newOutputStream(otherLib.resolve(\"jar2.jar\")))) {\n      os.putNextEntry(new JarEntry(\"explicitFile\"));\n      os.closeEntry();\n    }\n    try (JarOutputStream os = new JarOutputStream(Files.newOutputStream(otherLib.resolve(\"jar3.jar\")))) {\n      os.putNextEntry(new JarEntry(\"otherFile\"));\n      os.closeEntry();\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(tmpRoot);\n\n    // ./lib is accessible by default\n    assertNotNull(loader.getClassLoader().getResource(\"aLibFile\"));\n\n    // add inidividual jars from other paths\n    loader.addToClassLoader(otherLib.resolve(\"jar2.jar\").toUri().toURL());\n\n    assertNotNull(loader.getClassLoader().getResource(\"explicitFile\"));\n    assertNull(loader.getClassLoader().getResource(\"otherFile\"));\n\n    // add all jars from another path\n    loader.addToClassLoader(SolrResourceLoader.getURLs(otherLib));\n    assertNotNull(loader.getClassLoader().getResource(\"otherFile\"));\n    loader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"5268b3b46fa91a88e4d8fdd00f16f42577e6da11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["f4abec28b874149a7223e32cc7a01704c27790de"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["0d7032150736f83396eb1fd9fc65e18b918099be"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d7032150736f83396eb1fd9fc65e18b918099be":["5268b3b46fa91a88e4d8fdd00f16f42577e6da11"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"]},"commit2Childs":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5268b3b46fa91a88e4d8fdd00f16f42577e6da11":["0d7032150736f83396eb1fd9fc65e18b918099be"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5268b3b46fa91a88e4d8fdd00f16f42577e6da11"],"0d7032150736f83396eb1fd9fc65e18b918099be":["6613659748fe4411a7dcf85266e55db1f95f7315"],"f4abec28b874149a7223e32cc7a01704c27790de":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}