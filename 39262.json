{"path":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#toString().mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#toString().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns true if we were able to drop buffered updates and return to the\n   * ACTIVE state\n   */\n  // public boolean dropBufferedUpdates() {\n  // versionInfo.blockUpdates();\n  // try {\n  // if (state != State.BUFFERING) return false;\n  //\n  // if (log.isInfoEnabled()) {\n  // log.info(\"Dropping buffered updates \" + this);\n  // }\n  //\n  // // since we blocked updates, this synchronization shouldn't strictly be\n  // necessary.\n  // synchronized (this) {\n  // if (tlog != null) {\n  // tlog.rollback(recoveryInfo.positionOfStart);\n  // }\n  // }\n  //\n  // state = State.ACTIVE;\n  // operationFlags &= ~FLAG_GAP;\n  // } catch (IOException e) {\n  // SolrException.log(log,\"Error attempting to roll back log\", e);\n  // return false;\n  // }\n  // finally {\n  // versionInfo.unblockUpdates();\n  // }\n  // return true;\n  // }\n  \n  public String toString() {\n    return \"HDFSUpdateLog{state=\" + getState() + \", tlog=\" + tlog + \"}\";\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#toString().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns true if we were able to drop buffered updates and return to the\n   * ACTIVE state\n   */\n  // public boolean dropBufferedUpdates() {\n  // versionInfo.blockUpdates();\n  // try {\n  // if (state != State.BUFFERING) return false;\n  //\n  // if (log.isInfoEnabled()) {\n  // log.info(\"Dropping buffered updates \" + this);\n  // }\n  //\n  // // since we blocked updates, this synchronization shouldn't strictly be\n  // necessary.\n  // synchronized (this) {\n  // if (tlog != null) {\n  // tlog.rollback(recoveryInfo.positionOfStart);\n  // }\n  // }\n  //\n  // state = State.ACTIVE;\n  // operationFlags &= ~FLAG_GAP;\n  // } catch (IOException e) {\n  // SolrException.log(log,\"Error attempting to roll back log\", e);\n  // return false;\n  // }\n  // finally {\n  // versionInfo.unblockUpdates();\n  // }\n  // return true;\n  // }\n  \n  public String toString() {\n    return \"HDFSUpdateLog{state=\" + getState() + \", tlog=\" + tlog + \"}\";\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["849494cf2f3a96af5c8c84995108ddd8456fcd04"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}