{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/json/JsonQueryRequestFacetingIntegrationTest#assertFacetResponseHasFacetWithBuckets(NamedList[Object],String,FacetBucket...).mjava","commits":[{"id":"e361c91e3f3d36ea61c7ab9f2d4459792480783e","date":1541904265,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/json/JsonQueryRequestFacetingIntegrationTest#assertFacetResponseHasFacetWithBuckets(NamedList[Object],String,FacetBucket...).mjava","pathOld":"/dev/null","sourceNew":"  private void assertFacetResponseHasFacetWithBuckets(NamedList<Object> facetResponse, String expectedFacetName, FacetBucket... expectedBuckets) {\n    Object o = facetResponse.get(expectedFacetName);\n    if (o == null) fail(\"Response has no top-level facet named '\" + expectedFacetName + \"'\");\n    if (!(o instanceof NamedList)) fail(\"Response has a property for the expected facet '\" + expectedFacetName + \"' property, but it is not a NamedList\");\n\n    final NamedList<Object> expectedFacetTopLevel = (NamedList<Object>) o;\n    o = expectedFacetTopLevel.get(\"buckets\");\n    if (o == null) fail(\"Response has no 'buckets' property under 'facets'\");\n    if (!(o instanceof List)) fail(\"Response has no 'buckets' property containing actual facet information.\");\n\n    final List<NamedList> bucketList = (List<NamedList>) o;\n    assertEquals(\"Expected \" + expectedBuckets.length + \" buckets, but found \" + bucketList.size(),\n        expectedBuckets.length, bucketList.size());\n    for (int i = 0; i < expectedBuckets.length; i++) {\n      final FacetBucket expectedBucket = expectedBuckets[i];\n      final NamedList<Object> actualBucket = bucketList.get(i);\n      assertEquals(expectedBucket.getVal(), actualBucket.get(\"val\"));\n      assertEquals(expectedBucket.getCount(), actualBucket.get(\"count\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07feaa572dd3645c2013be127176350b3f4cd6a2","date":1542492880,"type":4,"author":"Jason Gerlowski","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/json/JsonQueryRequestFacetingIntegrationTest#assertFacetResponseHasFacetWithBuckets(NamedList[Object],String,FacetBucket...).mjava","sourceNew":null,"sourceOld":"  private void assertFacetResponseHasFacetWithBuckets(NamedList<Object> facetResponse, String expectedFacetName, FacetBucket... expectedBuckets) {\n    Object o = facetResponse.get(expectedFacetName);\n    if (o == null) fail(\"Response has no top-level facet named '\" + expectedFacetName + \"'\");\n    if (!(o instanceof NamedList)) fail(\"Response has a property for the expected facet '\" + expectedFacetName + \"' property, but it is not a NamedList\");\n\n    final NamedList<Object> expectedFacetTopLevel = (NamedList<Object>) o;\n    o = expectedFacetTopLevel.get(\"buckets\");\n    if (o == null) fail(\"Response has no 'buckets' property under 'facets'\");\n    if (!(o instanceof List)) fail(\"Response has no 'buckets' property containing actual facet information.\");\n\n    final List<NamedList> bucketList = (List<NamedList>) o;\n    assertEquals(\"Expected \" + expectedBuckets.length + \" buckets, but found \" + bucketList.size(),\n        expectedBuckets.length, bucketList.size());\n    for (int i = 0; i < expectedBuckets.length; i++) {\n      final FacetBucket expectedBucket = expectedBuckets[i];\n      final NamedList<Object> actualBucket = bucketList.get(i);\n      assertEquals(expectedBucket.getVal(), actualBucket.get(\"val\"));\n      assertEquals(expectedBucket.getCount(), actualBucket.get(\"count\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e361c91e3f3d36ea61c7ab9f2d4459792480783e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07feaa572dd3645c2013be127176350b3f4cd6a2"],"07feaa572dd3645c2013be127176350b3f4cd6a2":["e361c91e3f3d36ea61c7ab9f2d4459792480783e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e361c91e3f3d36ea61c7ab9f2d4459792480783e"],"e361c91e3f3d36ea61c7ab9f2d4459792480783e":["07feaa572dd3645c2013be127176350b3f4cd6a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"07feaa572dd3645c2013be127176350b3f4cd6a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}