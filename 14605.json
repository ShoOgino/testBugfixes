{"path":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","pathOld":"solr/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<DocIdSetIterator>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, Weight.ScorerContext.def());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<DocIdSetIterator>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, Weight.ScorerContext.def());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","pathOld":"solr/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<DocIdSetIterator>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, Weight.ScorerContext.def());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<DocIdSetIterator>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, Weight.ScorerContext.def());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","pathOld":"solr/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<DocIdSetIterator>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, Weight.ScorerContext.def());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<DocIdSetIterator>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, Weight.ScorerContext.def());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<DocIdSetIterator>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, true, false, context.reader.getLiveDocs());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<DocIdSetIterator>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, Weight.ScorerContext.def());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<DocIdSetIterator>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, true, false, context.reader().getLiveDocs());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<DocIdSetIterator>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, true, false, context.reader.getLiveDocs());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<DocIdSetIterator>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, true, false, context.reader().getLiveDocs());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<DocIdSetIterator>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, true, false, context.reader.getLiveDocs());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a7a379c47cb10a09ea1ff0b2460819a73c5988","date":1394142503,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<DocIdSetIterator>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, context.reader().getLiveDocs());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<DocIdSetIterator>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, true, false, context.reader().getLiveDocs());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<DocIdSetIterator>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, context.reader().getLiveDocs());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<DocIdSetIterator>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, true, false, context.reader().getLiveDocs());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, context.reader().getLiveDocs());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<DocIdSetIterator>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, context.reader().getLiveDocs());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, context.reader().getLiveDocs(), true);\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, context.reader().getLiveDocs());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","bugFix":["f5a7a379c47cb10a09ea1ff0b2460819a73c5988"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, context.reader().getLiveDocs());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, context.reader().getLiveDocs(), true);\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context);\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context, context.reader().getLiveDocs());\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context);\n        if (scorer == null) return null;\n        iterators.add(scorer.iterator());\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context);\n        if (scorer == null) return null;\n        iterators.add(scorer);\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterSet#iterator().mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocIdSetIterator iterator() throws IOException {\n      List<DocIdSetIterator> iterators = new ArrayList<>(weights.size()+1);\n      if (docIdSet != null) {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) return null;\n        iterators.add(iter);\n      }\n      for (Weight w : weights) {\n        Scorer scorer = w.scorer(context);\n        if (scorer == null) return null;\n        iterators.add(scorer.iterator());\n      }\n      if (iterators.size()==0) return null;\n      if (iterators.size()==1) return iterators.get(0);\n      if (iterators.size()==2) return new DualFilterIterator(iterators.get(0), iterators.get(1));\n      return new FilterIterator(iterators.toArray(new DocIdSetIterator[iterators.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"f5a7a379c47cb10a09ea1ff0b2460819a73c5988":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","96d207426bd26fa5c1014e26d21d87603aea68b7"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["fb17639909a369c1e64866842e5c213440acc17e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["5cab9a86bd67202d20b6adc463008c8e982b070a","f5a7a379c47cb10a09ea1ff0b2460819a73c5988"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"f5a7a379c47cb10a09ea1ff0b2460819a73c5988":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["96d207426bd26fa5c1014e26d21d87603aea68b7","5cab9a86bd67202d20b6adc463008c8e982b070a"],"c26f00b574427b55127e869b935845554afde1fa":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["f5a7a379c47cb10a09ea1ff0b2460819a73c5988","acf00221f44c5f08ccea014f2492b53af15ecd66"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}