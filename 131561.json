{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addNewReplica().mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addNewReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","sourceNew":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addNewReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","sourceNew":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addNewReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","sourceNew":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"108a890321e59d70c58d42b1a3fd696037547447","date":1385308380,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addNewReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addNewReplica().mjava","sourceNew":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(SHARD1)) {\n      if (VERBOSE) System.err.println(\"shard1 total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard2\")) {\n      if (VERBOSE) System.err.println(\"shard2 total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(SHARD1);\n    checkShardConsistency(\"shard2\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a5f95bfd4ff530aa8bdc1d75a2103e9d85c706b","date":1385313290,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addNewReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addNewReplica().mjava","sourceNew":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(SHARD1)) {\n      if (VERBOSE) System.err.println(\"shard1 total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    for (CloudJettyRunner cjetty : shardToJetty.get(SHARD2)) {\n      if (VERBOSE) System.err.println(\"shard2 total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(SHARD1);\n    checkShardConsistency(SHARD2);\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(SHARD1)) {\n      if (VERBOSE) System.err.println(\"shard1 total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard2\")) {\n      if (VERBOSE) System.err.println(\"shard2 total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(SHARD1);\n    checkShardConsistency(\"shard2\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addNewReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addNewReplica().mjava","sourceNew":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(SHARD1)) {\n      if (VERBOSE) System.err.println(\"shard1 total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    for (CloudJettyRunner cjetty : shardToJetty.get(SHARD2)) {\n      if (VERBOSE) System.err.println(\"shard2 total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(SHARD1);\n    checkShardConsistency(SHARD2);\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6","date":1423132645,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addNewReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addNewReplica().mjava","sourceNew":"  private void addNewReplica() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(SHARD1)) {\n      if (VERBOSE) System.err.println(\"shard1 total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    for (CloudJettyRunner cjetty : shardToJetty.get(SHARD2)) {\n      if (VERBOSE) System.err.println(\"shard2 total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(SHARD1);\n    checkShardConsistency(SHARD2);\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(SHARD1)) {\n      if (VERBOSE) System.err.println(\"shard1 total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    for (CloudJettyRunner cjetty : shardToJetty.get(SHARD2)) {\n      if (VERBOSE) System.err.println(\"shard2 total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(SHARD1);\n    checkShardConsistency(SHARD2);\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"108a890321e59d70c58d42b1a3fd696037547447":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["2c30e4c1cee08b3b229a77991882594fe7250b66","8a5f95bfd4ff530aa8bdc1d75a2103e9d85c706b"],"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6":["8a5f95bfd4ff530aa8bdc1d75a2103e9d85c706b"],"8a5f95bfd4ff530aa8bdc1d75a2103e9d85c706b":["108a890321e59d70c58d42b1a3fd696037547447"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"108a890321e59d70c58d42b1a3fd696037547447":["8a5f95bfd4ff530aa8bdc1d75a2103e9d85c706b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8a5f95bfd4ff530aa8bdc1d75a2103e9d85c706b":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","108a890321e59d70c58d42b1a3fd696037547447","d6f074e73200c07d54f242d3880a8da5a35ff97b","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}