{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createOtherAccs(int,int).mjava","commits":[{"id":"79759974460bc59933cd169acc94f5c6b16368d5","date":1471318443,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createOtherAccs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#createOtherAccs(int,int).mjava","sourceNew":"  private void createOtherAccs(int numDocs, int numSlots) throws IOException {\n    if (otherAccs != null) {\n      // reuse existing accumulators\n      for (SlotAcc acc : otherAccs) {\n        acc.reset();  // todo - make reset take numDocs and numSlots?\n      }\n      return;\n    }\n\n    int numDeferred = deferredAggs == null ? 0 : deferredAggs.size();\n    if (numDeferred <= 0) return;\n\n    otherAccs = new SlotAcc[ numDeferred ];\n\n    int otherAccIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : deferredAggs.entrySet()) {\n      AggValueSource agg = entry.getValue();\n      SlotAcc acc = agg.createSlotAcc(fcontext, numDocs, numSlots);\n      acc.key = entry.getKey();\n      accMap.put(acc.key, acc);\n      otherAccs[otherAccIdx++] = acc;\n    }\n\n    if (numDeferred == freq.getFacetStats().size()) {\n      // accs and otherAccs are the same...\n      accs = otherAccs;\n    }\n  }\n\n","sourceOld":"  void createOtherAccs(int numDocs, int numSlots) throws IOException {\n    if (otherAccs != null) {\n      // reuse existing accumulators\n      for (SlotAcc acc : otherAccs) {\n        acc.reset();  // todo - make reset take numDocs and numSlots?\n      }\n      return;\n    }\n\n    int numDeferred = deferredAggs == null ? 0 : deferredAggs.size();\n    if (numDeferred <= 0) return;\n\n    otherAccs = new SlotAcc[ numDeferred ];\n\n    int otherAccIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : deferredAggs.entrySet()) {\n      AggValueSource agg = entry.getValue();\n      SlotAcc acc = agg.createSlotAcc(fcontext, numDocs, numSlots);\n      acc.key = entry.getKey();\n      accMap.put(acc.key, acc);\n      otherAccs[otherAccIdx++] = acc;\n    }\n\n    if (numDeferred == freq.getFacetStats().size()) {\n      // accs and otherAccs are the same...\n      accs = otherAccs;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createOtherAccs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#createOtherAccs(int,int).mjava","sourceNew":"  private void createOtherAccs(int numDocs, int numSlots) throws IOException {\n    if (otherAccs != null) {\n      // reuse existing accumulators\n      for (SlotAcc acc : otherAccs) {\n        acc.reset();  // todo - make reset take numDocs and numSlots?\n      }\n      return;\n    }\n\n    int numDeferred = deferredAggs == null ? 0 : deferredAggs.size();\n    if (numDeferred <= 0) return;\n\n    otherAccs = new SlotAcc[ numDeferred ];\n\n    int otherAccIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : deferredAggs.entrySet()) {\n      AggValueSource agg = entry.getValue();\n      SlotAcc acc = agg.createSlotAcc(fcontext, numDocs, numSlots);\n      acc.key = entry.getKey();\n      accMap.put(acc.key, acc);\n      otherAccs[otherAccIdx++] = acc;\n    }\n\n    if (numDeferred == freq.getFacetStats().size()) {\n      // accs and otherAccs are the same...\n      accs = otherAccs;\n    }\n  }\n\n","sourceOld":"  void createOtherAccs(int numDocs, int numSlots) throws IOException {\n    if (otherAccs != null) {\n      // reuse existing accumulators\n      for (SlotAcc acc : otherAccs) {\n        acc.reset();  // todo - make reset take numDocs and numSlots?\n      }\n      return;\n    }\n\n    int numDeferred = deferredAggs == null ? 0 : deferredAggs.size();\n    if (numDeferred <= 0) return;\n\n    otherAccs = new SlotAcc[ numDeferred ];\n\n    int otherAccIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : deferredAggs.entrySet()) {\n      AggValueSource agg = entry.getValue();\n      SlotAcc acc = agg.createSlotAcc(fcontext, numDocs, numSlots);\n      acc.key = entry.getKey();\n      accMap.put(acc.key, acc);\n      otherAccs[otherAccIdx++] = acc;\n    }\n\n    if (numDeferred == freq.getFacetStats().size()) {\n      // accs and otherAccs are the same...\n      accs = otherAccs;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createOtherAccs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#createOtherAccs(int,int).mjava","sourceNew":"  private void createOtherAccs(int numDocs, int numSlots) throws IOException {\n    if (otherAccs != null) {\n      // reuse existing accumulators\n      for (SlotAcc acc : otherAccs) {\n        acc.reset();  // todo - make reset take numDocs and numSlots?\n      }\n      return;\n    }\n\n    int numDeferred = deferredAggs == null ? 0 : deferredAggs.size();\n    if (numDeferred <= 0) return;\n\n    otherAccs = new SlotAcc[ numDeferred ];\n\n    int otherAccIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : deferredAggs.entrySet()) {\n      AggValueSource agg = entry.getValue();\n      SlotAcc acc = agg.createSlotAcc(fcontext, numDocs, numSlots);\n      acc.key = entry.getKey();\n      accMap.put(acc.key, acc);\n      otherAccs[otherAccIdx++] = acc;\n    }\n\n    if (numDeferred == freq.getFacetStats().size()) {\n      // accs and otherAccs are the same...\n      accs = otherAccs;\n    }\n  }\n\n","sourceOld":"  void createOtherAccs(int numDocs, int numSlots) throws IOException {\n    if (otherAccs != null) {\n      // reuse existing accumulators\n      for (SlotAcc acc : otherAccs) {\n        acc.reset();  // todo - make reset take numDocs and numSlots?\n      }\n      return;\n    }\n\n    int numDeferred = deferredAggs == null ? 0 : deferredAggs.size();\n    if (numDeferred <= 0) return;\n\n    otherAccs = new SlotAcc[ numDeferred ];\n\n    int otherAccIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : deferredAggs.entrySet()) {\n      AggValueSource agg = entry.getValue();\n      SlotAcc acc = agg.createSlotAcc(fcontext, numDocs, numSlots);\n      acc.key = entry.getKey();\n      accMap.put(acc.key, acc);\n      otherAccs[otherAccIdx++] = acc;\n    }\n\n    if (numDeferred == freq.getFacetStats().size()) {\n      // accs and otherAccs are the same...\n      accs = otherAccs;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createOtherAccs(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void createOtherAccs(int numDocs, int numSlots) throws IOException {\n    if (otherAccs != null) {\n      // reuse existing accumulators\n      for (SlotAcc acc : otherAccs) {\n        acc.reset();  // todo - make reset take numDocs and numSlots?\n      }\n      return;\n    }\n\n    int numDeferred = deferredAggs == null ? 0 : deferredAggs.size();\n    if (numDeferred <= 0) return;\n\n    otherAccs = new SlotAcc[ numDeferred ];\n\n    int otherAccIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : deferredAggs.entrySet()) {\n      AggValueSource agg = entry.getValue();\n      SlotAcc acc = agg.createSlotAcc(fcontext, numDocs, numSlots);\n      acc.key = entry.getKey();\n      accMap.put(acc.key, acc);\n      otherAccs[otherAccIdx++] = acc;\n    }\n\n    if (numDeferred == freq.getFacetStats().size()) {\n      // accs and otherAccs are the same...\n      accs = otherAccs;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ce69d020f939568b84a1dbbfbd11bfd9907b73","date":1543618146,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createOtherAccs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createOtherAccs(int,int).mjava","sourceNew":"  private void createOtherAccs(int numDocs, int numSlots) throws IOException {\n    if (otherAccs != null) {\n      // reuse existing accumulators\n      for (SlotAcc acc : otherAccs) {\n        acc.reset();  // todo - make reset take numDocs and numSlots?\n      }\n      return;\n    }\n\n    final int numDeferred = deferredAggs.size();\n    if (numDeferred <= 0) return;\n\n    otherAccs = new SlotAcc[ numDeferred ];\n\n    int otherAccIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : deferredAggs.entrySet()) {\n      AggValueSource agg = entry.getValue();\n      SlotAcc acc = agg.createSlotAcc(fcontext, numDocs, numSlots);\n      acc.key = entry.getKey();\n      accMap.put(acc.key, acc);\n      otherAccs[otherAccIdx++] = acc;\n    }\n\n    if (numDeferred == freq.getFacetStats().size()) {\n      // accs and otherAccs are the same...\n      accs = otherAccs;\n    }\n  }\n\n","sourceOld":"  private void createOtherAccs(int numDocs, int numSlots) throws IOException {\n    if (otherAccs != null) {\n      // reuse existing accumulators\n      for (SlotAcc acc : otherAccs) {\n        acc.reset();  // todo - make reset take numDocs and numSlots?\n      }\n      return;\n    }\n\n    int numDeferred = deferredAggs == null ? 0 : deferredAggs.size();\n    if (numDeferred <= 0) return;\n\n    otherAccs = new SlotAcc[ numDeferred ];\n\n    int otherAccIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : deferredAggs.entrySet()) {\n      AggValueSource agg = entry.getValue();\n      SlotAcc acc = agg.createSlotAcc(fcontext, numDocs, numSlots);\n      acc.key = entry.getKey();\n      accMap.put(acc.key, acc);\n      otherAccs[otherAccIdx++] = acc;\n    }\n\n    if (numDeferred == freq.getFacetStats().size()) {\n      // accs and otherAccs are the same...\n      accs = otherAccs;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79759974460bc59933cd169acc94f5c6b16368d5"],"79759974460bc59933cd169acc94f5c6b16368d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["94ce69d020f939568b84a1dbbfbd11bfd9907b73","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","79759974460bc59933cd169acc94f5c6b16368d5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"79759974460bc59933cd169acc94f5c6b16368d5":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}