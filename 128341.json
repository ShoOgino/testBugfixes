{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","commits":[{"id":"d7a738ebbf9537051521dcc7e49f69208f91e2fc","date":1358194026,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      DocValues.Type type = infos.fieldInfo(fieldNumber).getDocValuesType();\n      if (DocValues.isNumber(type) || DocValues.isFloat(type)) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (DocValues.isBytes(type)) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        if (b.minLength != b.maxLength) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"binary entry for field: \" + fieldNumber + \" is corrupt\");\n          }\n          // variable length byte[]: read addresses as a numeric dv field\n          numerics.put(fieldNumber, readNumericEntry(meta));\n        }\n      } else if (DocValues.isSortedBytes(type)) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        if (b.minLength != b.maxLength) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n          }\n          // variable length byte[]: read addresses as a numeric dv field\n          numerics.put(fieldNumber, readNumericEntry(meta));\n        }\n        // sorted byte[]: read ords as a numeric dv field\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        ords.put(fieldNumber, readNumericEntry(meta));\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      DocValues.Type type = infos.fieldInfo(fieldNumber).getDocValuesType();\n      if (DocValues.isNumber(type) || DocValues.isFloat(type)) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (DocValues.isBytes(type)) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        if (b.minLength != b.maxLength) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"binary entry for field: \" + fieldNumber + \" is corrupt\");\n          }\n          // variable length byte[]: read addresses as a numeric dv field\n          numerics.put(fieldNumber, readNumericEntry(meta));\n        }\n      } else if (DocValues.isSortedBytes(type)) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        if (b.minLength != b.maxLength) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n          }\n          // variable length byte[]: read addresses as a numeric dv field\n          numerics.put(fieldNumber, readNumericEntry(meta));\n        }\n        // sorted byte[]: read ords as a numeric dv field\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        ords.put(fieldNumber, readNumericEntry(meta));\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      DocValuesType type = infos.fieldInfo(fieldNumber).getDocValuesType();\n      if (type == DocValuesType.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DocValuesType.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        if (b.minLength != b.maxLength) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"binary entry for field: \" + fieldNumber + \" is corrupt\");\n          }\n          // variable length byte[]: read addresses as a numeric dv field\n          numerics.put(fieldNumber, readNumericEntry(meta));\n        }\n      } else if (type == DocValuesType.SORTED) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        if (b.minLength != b.maxLength) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n          }\n          // variable length byte[]: read addresses as a numeric dv field\n          numerics.put(fieldNumber, readNumericEntry(meta));\n        }\n        // sorted byte[]: read ords as a numeric dv field\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        ords.put(fieldNumber, readNumericEntry(meta));\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      DocValues.Type type = infos.fieldInfo(fieldNumber).getDocValuesType();\n      if (DocValues.isNumber(type) || DocValues.isFloat(type)) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (DocValues.isBytes(type)) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        if (b.minLength != b.maxLength) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"binary entry for field: \" + fieldNumber + \" is corrupt\");\n          }\n          // variable length byte[]: read addresses as a numeric dv field\n          numerics.put(fieldNumber, readNumericEntry(meta));\n        }\n      } else if (DocValues.isSortedBytes(type)) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        if (b.minLength != b.maxLength) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n          }\n          // variable length byte[]: read addresses as a numeric dv field\n          numerics.put(fieldNumber, readNumericEntry(meta));\n        }\n        // sorted byte[]: read ords as a numeric dv field\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        ords.put(fieldNumber, readNumericEntry(meta));\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e76d3450662dab47d54e3f462c7b3eba4e38b9ac","date":1358866496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      DocValuesType type = infos.fieldInfo(fieldNumber).getDocValuesType();\n      if (type == DocValuesType.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DocValuesType.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DocValuesType.SORTED) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      DocValuesType type = infos.fieldInfo(fieldNumber).getDocValuesType();\n      if (type == DocValuesType.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DocValuesType.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        if (b.minLength != b.maxLength) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"binary entry for field: \" + fieldNumber + \" is corrupt\");\n          }\n          // variable length byte[]: read addresses as a numeric dv field\n          numerics.put(fieldNumber, readNumericEntry(meta));\n        }\n      } else if (type == DocValuesType.SORTED) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        if (b.minLength != b.maxLength) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n          }\n          // variable length byte[]: read addresses as a numeric dv field\n          numerics.put(fieldNumber, readNumericEntry(meta));\n        }\n        // sorted byte[]: read ords as a numeric dv field\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        ords.put(fieldNumber, readNumericEntry(meta));\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f2be786bbf3746ffcd9720e0b473f4b121c4228","date":1359663177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      DocValuesType type = infos.fieldInfo(fieldNumber).getDocValuesType();\n      if (type == DocValuesType.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DocValuesType.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DocValuesType.SORTED) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15adb143a3097f2342f07eb0929f6ce1877ad7e","date":1361027406,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == DiskDocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == DiskDocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90f762b9c981401224de7f0a7c1ffc8fbc67574f","date":1366475889,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == DiskDocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == DiskDocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == DiskDocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == DiskDocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":null,"sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == DiskDocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90f762b9c981401224de7f0a7c1ffc8fbc67574f":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["0837ab0472feecb3a54260729d845f839e1cbd72"],"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["90f762b9c981401224de7f0a7c1ffc8fbc67574f","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["90f762b9c981401224de7f0a7c1ffc8fbc67574f","11a746437bc5c0a0b3df0337ed249c387c812871"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","f15adb143a3097f2342f07eb0929f6ce1877ad7e"],"f15adb143a3097f2342f07eb0929f6ce1877ad7e":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"11a746437bc5c0a0b3df0337ed249c387c812871":["90f762b9c981401224de7f0a7c1ffc8fbc67574f"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["d7a738ebbf9537051521dcc7e49f69208f91e2fc"],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"90f762b9c981401224de7f0a7c1ffc8fbc67574f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","11a746437bc5c0a0b3df0337ed249c387c812871"],"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["90f762b9c981401224de7f0a7c1ffc8fbc67574f"],"f15adb143a3097f2342f07eb0929f6ce1877ad7e":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ddbb72a33557d2b5bc22ee95daf3281c43560502","f15adb143a3097f2342f07eb0929f6ce1877ad7e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","d7a738ebbf9537051521dcc7e49f69208f91e2fc"],"0837ab0472feecb3a54260729d845f839e1cbd72":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":["0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}