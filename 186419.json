{"path":"src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","pathOld":"/dev/null","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, false, null);\n    runTest(directory, true, null);\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    String tempDir = System.getProperty(\"tempDir\");\n    if (tempDir == null)\n      throw new IOException(\"tempDir undefined, cannot run test\");\n\n    String dirName = tempDir + \"/luceneTestThreadedOptimize\";\n    directory = FSDirectory.getDirectory(dirName);\n    runTest(directory, false, null);\n    runTest(directory, true, null);\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b583d3621fe173e7296abcf62f82fb707c901234","date":1194717060,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, false, null);\n    runTest(directory, true, null);\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    String tempDir = System.getProperty(\"tempDir\");\n    if (tempDir == null)\n      throw new IOException(\"tempDir undefined, cannot run test\");\n\n    String dirName = tempDir + \"/luceneTestThreadedOptimize\";\n    directory = FSDirectory.getDirectory(dirName, null, false);\n    runTest(directory, false, null);\n    runTest(directory, true, null);\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, false, null);\n    runTest(directory, true, null);\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    String tempDir = System.getProperty(\"tempDir\");\n    if (tempDir == null)\n      throw new IOException(\"tempDir undefined, cannot run test\");\n\n    String dirName = tempDir + \"/luceneTestThreadedOptimize\";\n    directory = FSDirectory.getDirectory(dirName);\n    runTest(directory, false, null);\n    runTest(directory, true, null);\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015c55424dd37249054283bedc90388bd45358f","date":1197049353,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, false, null);\n    runTest(directory, true, null);\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    String tempDir = System.getProperty(\"tempDir\");\n    if (tempDir == null)\n      throw new IOException(\"tempDir undefined, cannot run test\");\n\n    String dirName = tempDir + \"/luceneTestThreadedOptimize\";\n    directory = FSDirectory.getDirectory(dirName);\n    runTest(directory, false, null);\n    runTest(directory, true, null);\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, false, null);\n    runTest(directory, true, null);\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    String tempDir = System.getProperty(\"tempDir\");\n    if (tempDir == null)\n      throw new IOException(\"tempDir undefined, cannot run test\");\n\n    String dirName = tempDir + \"/luceneTestThreadedOptimize\";\n    directory = FSDirectory.getDirectory(dirName, null, false);\n    runTest(directory, false, null);\n    runTest(directory, true, null);\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, false, new SerialMergeScheduler());\n    runTest(directory, true, new SerialMergeScheduler());\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    String tempDir = System.getProperty(\"tempDir\");\n    if (tempDir == null)\n      throw new IOException(\"tempDir undefined, cannot run test\");\n\n    String dirName = tempDir + \"/luceneTestThreadedOptimize\";\n    directory = FSDirectory.getDirectory(dirName);\n    runTest(directory, false, new SerialMergeScheduler());\n    runTest(directory, true, new SerialMergeScheduler());\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, false, null);\n    runTest(directory, true, null);\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    String tempDir = System.getProperty(\"tempDir\");\n    if (tempDir == null)\n      throw new IOException(\"tempDir undefined, cannot run test\");\n\n    String dirName = tempDir + \"/luceneTestThreadedOptimize\";\n    directory = FSDirectory.getDirectory(dirName);\n    runTest(directory, false, null);\n    runTest(directory, true, null);\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","date":1243677645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, false, new SerialMergeScheduler());\n    runTest(directory, true, new SerialMergeScheduler());\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    String tempDir = System.getProperty(\"tempDir\");\n    if (tempDir == null)\n      throw new IOException(\"tempDir undefined, cannot run test\");\n\n    String dirName = tempDir + \"/luceneTestThreadedOptimize\";\n    directory = FSDirectory.open(new File(dirName));\n    runTest(directory, false, new SerialMergeScheduler());\n    runTest(directory, true, new SerialMergeScheduler());\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, false, new SerialMergeScheduler());\n    runTest(directory, true, new SerialMergeScheduler());\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    String tempDir = System.getProperty(\"tempDir\");\n    if (tempDir == null)\n      throw new IOException(\"tempDir undefined, cannot run test\");\n\n    String dirName = tempDir + \"/luceneTestThreadedOptimize\";\n    directory = FSDirectory.getDirectory(dirName);\n    runTest(directory, false, new SerialMergeScheduler());\n    runTest(directory, true, new SerialMergeScheduler());\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    String tempDir = System.getProperty(\"tempDir\");\n    if (tempDir == null)\n      throw new IOException(\"tempDir undefined, cannot run test\");\n\n    String dirName = tempDir + \"/luceneTestThreadedOptimize\";\n    directory = FSDirectory.open(new File(dirName));\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, false, new SerialMergeScheduler());\n    runTest(directory, true, new SerialMergeScheduler());\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    String tempDir = System.getProperty(\"tempDir\");\n    if (tempDir == null)\n      throw new IOException(\"tempDir undefined, cannot run test\");\n\n    String dirName = tempDir + \"/luceneTestThreadedOptimize\";\n    directory = FSDirectory.open(new File(dirName));\n    runTest(directory, false, new SerialMergeScheduler());\n    runTest(directory, true, new SerialMergeScheduler());\n    runTest(directory, false, new ConcurrentMergeScheduler());\n    runTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d16275d75dfe0b780ed62df4c811d083187c71a","date":1268583591,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    File dirName = new File(TEMP_DIR, \"luceneTestThreadedOptimize\");\n    directory = FSDirectory.open(dirName);\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    String tempDir = System.getProperty(\"tempDir\");\n    if (tempDir == null)\n      throw new IOException(\"tempDir undefined, cannot run test\");\n\n    String dirName = tempDir + \"/luceneTestThreadedOptimize\";\n    directory = FSDirectory.open(new File(dirName));\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    File dirName = new File(TEMP_DIR, \"luceneTestThreadedOptimize\");\n    directory = FSDirectory.open(dirName);\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    File dirName = new File(TEMP_DIR, \"luceneTestThreadedOptimize\");\n    directory = FSDirectory.open(dirName);\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b583d3621fe173e7296abcf62f82fb707c901234":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a015c55424dd37249054283bedc90388bd45358f":["b583d3621fe173e7296abcf62f82fb707c901234"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["e82780afe6097066eb5befb86e9432f077667e3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d16275d75dfe0b780ed62df4c811d083187c71a":["87c966e9308847938a7c905c2e46a56d8df788b8"],"e82780afe6097066eb5befb86e9432f077667e3d":["a015c55424dd37249054283bedc90388bd45358f"],"87c966e9308847938a7c905c2e46a56d8df788b8":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1d16275d75dfe0b780ed62df4c811d083187c71a"]},"commit2Childs":{"b583d3621fe173e7296abcf62f82fb707c901234":["a015c55424dd37249054283bedc90388bd45358f"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["b583d3621fe173e7296abcf62f82fb707c901234"],"a015c55424dd37249054283bedc90388bd45358f":["e82780afe6097066eb5befb86e9432f077667e3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["87c966e9308847938a7c905c2e46a56d8df788b8"],"e82780afe6097066eb5befb86e9432f077667e3d":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"1d16275d75dfe0b780ed62df4c811d083187c71a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"87c966e9308847938a7c905c2e46a56d8df788b8":["1d16275d75dfe0b780ed62df4c811d083187c71a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}