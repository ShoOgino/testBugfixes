{"path":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,FacetIndexingParams,int,String...).mjava","commits":[{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,FacetIndexingParams,int,String...).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,DefaultFacetIndexingParams,int,String...).mjava","sourceNew":"  public static Collector[] search(IndexSearcher searcher,\n      TaxonomyReader taxonomyReader, FacetIndexingParams iParams, int k,\n      String... facetNames) throws IOException {\n    \n    Collector[] collectors = new Collector[2];\n    \n    List<FacetRequest> fRequests = new ArrayList<FacetRequest>();\n    for (String facetName : facetNames) {\n      CategoryPath cp = new CategoryPath(facetName);\n      FacetRequest fq = new CountFacetRequest(cp, k);\n      fRequests.add(fq);\n    }\n    FacetSearchParams facetSearchParams = new FacetSearchParams(fRequests, iParams);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(\n        searcher.getIndexReader().maxDoc(), true);\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, searcher.getIndexReader(), taxonomyReader);\n    Collector mColl = MultiCollector.wrap(topDocsCollector, facetsCollector);\n    \n    collectors[0] = topDocsCollector;\n    collectors[1] = facetsCollector;\n\n    searcher.search(new MatchAllDocsQuery(), mColl);\n    return collectors;\n  }\n\n","sourceOld":"  public static Collector[] search(IndexSearcher searcher,\n      TaxonomyReader taxonomyReader, DefaultFacetIndexingParams iParams,\n      int k, String... facetNames) throws IOException {\n    \n    Collector[] collectors = new Collector[2];\n    \n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n    Collection<FacetRequest> fRequests = new ArrayList<FacetRequest>();\n    for (String facetName : facetNames) {\n      CategoryPath cp = new CategoryPath(facetName);\n      FacetRequest fq = new CountFacetRequest(cp, k);\n      facetSearchParams.addFacetRequest(fq);\n      fRequests.add(fq);\n    }\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(\n        searcher.getIndexReader().maxDoc(), true);\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, searcher.getIndexReader(), taxonomyReader);\n    Collector mColl = MultiCollector.wrap(topDocsCollector, facetsCollector);\n    \n    collectors[0] = topDocsCollector;\n    collectors[1] = facetsCollector;\n\n    searcher.search(new MatchAllDocsQuery(), mColl);\n    return collectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,FacetIndexingParams,int,String...).mjava","pathOld":"/dev/null","sourceNew":"  public static Collector[] search(IndexSearcher searcher,\n      TaxonomyReader taxonomyReader, FacetIndexingParams iParams, int k,\n      String... facetNames) throws IOException {\n    \n    Collector[] collectors = new Collector[2];\n    \n    List<FacetRequest> fRequests = new ArrayList<FacetRequest>();\n    for (String facetName : facetNames) {\n      CategoryPath cp = new CategoryPath(facetName);\n      FacetRequest fq = new CountFacetRequest(cp, k);\n      fRequests.add(fq);\n    }\n    FacetSearchParams facetSearchParams = new FacetSearchParams(fRequests, iParams);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(\n        searcher.getIndexReader().maxDoc(), true);\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, searcher.getIndexReader(), taxonomyReader);\n    Collector mColl = MultiCollector.wrap(topDocsCollector, facetsCollector);\n    \n    collectors[0] = topDocsCollector;\n    collectors[1] = facetsCollector;\n\n    searcher.search(new MatchAllDocsQuery(), mColl);\n    return collectors;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,FacetIndexingParams,int,String...).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,FacetIndexingParams,int,String...).mjava","sourceNew":"  public static Collector[] search(IndexSearcher searcher, TaxonomyReader taxonomyReader, FacetIndexingParams iParams, \n      int k, String... facetNames) throws IOException {\n    \n    Collector[] collectors = new Collector[2];\n    \n    List<FacetRequest> fRequests = new ArrayList<FacetRequest>();\n    for (String facetName : facetNames) {\n      CategoryPath cp = new CategoryPath(facetName);\n      FacetRequest fq = new CountFacetRequest(cp, k);\n      fRequests.add(fq);\n    }\n    FacetSearchParams facetSearchParams = new FacetSearchParams(fRequests, iParams);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(searcher.getIndexReader().maxDoc(), true);\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, searcher.getIndexReader(), taxonomyReader);\n    Collector mColl = MultiCollector.wrap(topDocsCollector, facetsCollector);\n    \n    collectors[0] = topDocsCollector;\n    collectors[1] = facetsCollector;\n\n    searcher.search(new MatchAllDocsQuery(), mColl);\n    return collectors;\n  }\n\n","sourceOld":"  public static Collector[] search(IndexSearcher searcher,\n      TaxonomyReader taxonomyReader, FacetIndexingParams iParams, int k,\n      String... facetNames) throws IOException {\n    \n    Collector[] collectors = new Collector[2];\n    \n    List<FacetRequest> fRequests = new ArrayList<FacetRequest>();\n    for (String facetName : facetNames) {\n      CategoryPath cp = new CategoryPath(facetName);\n      FacetRequest fq = new CountFacetRequest(cp, k);\n      fRequests.add(fq);\n    }\n    FacetSearchParams facetSearchParams = new FacetSearchParams(fRequests, iParams);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(\n        searcher.getIndexReader().maxDoc(), true);\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, searcher.getIndexReader(), taxonomyReader);\n    Collector mColl = MultiCollector.wrap(topDocsCollector, facetsCollector);\n    \n    collectors[0] = topDocsCollector;\n    collectors[1] = facetsCollector;\n\n    searcher.search(new MatchAllDocsQuery(), mColl);\n    return collectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,FacetIndexingParams,int,String...).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,FacetIndexingParams,int,String...).mjava","sourceNew":"  public static Collector[] search(IndexSearcher searcher, TaxonomyReader taxonomyReader, FacetIndexingParams iParams, \n      int k, String... facetNames) throws IOException {\n    \n    Collector[] collectors = new Collector[2];\n    \n    List<FacetRequest> fRequests = new ArrayList<FacetRequest>();\n    for (String facetName : facetNames) {\n      CategoryPath cp = new CategoryPath(facetName);\n      FacetRequest fq = new CountFacetRequest(cp, k);\n      fRequests.add(fq);\n    }\n    FacetSearchParams facetSearchParams = new FacetSearchParams(fRequests, iParams);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(searcher.getIndexReader().maxDoc(), true);\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, searcher.getIndexReader(), taxonomyReader);\n    Collector mColl = MultiCollector.wrap(topDocsCollector, facetsCollector);\n    \n    collectors[0] = topDocsCollector;\n    collectors[1] = facetsCollector;\n\n    searcher.search(new MatchAllDocsQuery(), mColl);\n    return collectors;\n  }\n\n","sourceOld":"  public static Collector[] search(IndexSearcher searcher,\n      TaxonomyReader taxonomyReader, FacetIndexingParams iParams, int k,\n      String... facetNames) throws IOException {\n    \n    Collector[] collectors = new Collector[2];\n    \n    List<FacetRequest> fRequests = new ArrayList<FacetRequest>();\n    for (String facetName : facetNames) {\n      CategoryPath cp = new CategoryPath(facetName);\n      FacetRequest fq = new CountFacetRequest(cp, k);\n      fRequests.add(fq);\n    }\n    FacetSearchParams facetSearchParams = new FacetSearchParams(fRequests, iParams);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(\n        searcher.getIndexReader().maxDoc(), true);\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, searcher.getIndexReader(), taxonomyReader);\n    Collector mColl = MultiCollector.wrap(topDocsCollector, facetsCollector);\n    \n    collectors[0] = topDocsCollector;\n    collectors[1] = facetsCollector;\n\n    searcher.search(new MatchAllDocsQuery(), mColl);\n    return collectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90213788e5007cc5e2b3d88200a8265de9d4e6d4","date":1359060940,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,FacetIndexingParams,int,String...).mjava","sourceNew":null,"sourceOld":"  public static Collector[] search(IndexSearcher searcher, TaxonomyReader taxonomyReader, FacetIndexingParams iParams, \n      int k, String... facetNames) throws IOException {\n    \n    Collector[] collectors = new Collector[2];\n    \n    List<FacetRequest> fRequests = new ArrayList<FacetRequest>();\n    for (String facetName : facetNames) {\n      CategoryPath cp = new CategoryPath(facetName);\n      FacetRequest fq = new CountFacetRequest(cp, k);\n      fRequests.add(fq);\n    }\n    FacetSearchParams facetSearchParams = new FacetSearchParams(fRequests, iParams);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(searcher.getIndexReader().maxDoc(), true);\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, searcher.getIndexReader(), taxonomyReader);\n    Collector mColl = MultiCollector.wrap(topDocsCollector, facetsCollector);\n    \n    collectors[0] = topDocsCollector;\n    collectors[1] = facetsCollector;\n\n    searcher.search(new MatchAllDocsQuery(), mColl);\n    return collectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,FacetIndexingParams,int,String...).mjava","sourceNew":null,"sourceOld":"  public static Collector[] search(IndexSearcher searcher, TaxonomyReader taxonomyReader, FacetIndexingParams iParams, \n      int k, String... facetNames) throws IOException {\n    \n    Collector[] collectors = new Collector[2];\n    \n    List<FacetRequest> fRequests = new ArrayList<FacetRequest>();\n    for (String facetName : facetNames) {\n      CategoryPath cp = new CategoryPath(facetName);\n      FacetRequest fq = new CountFacetRequest(cp, k);\n      fRequests.add(fq);\n    }\n    FacetSearchParams facetSearchParams = new FacetSearchParams(fRequests, iParams);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(searcher.getIndexReader().maxDoc(), true);\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, searcher.getIndexReader(), taxonomyReader);\n    Collector mColl = MultiCollector.wrap(topDocsCollector, facetsCollector);\n    \n    collectors[0] = topDocsCollector;\n    collectors[1] = facetsCollector;\n\n    searcher.search(new MatchAllDocsQuery(), mColl);\n    return collectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"90213788e5007cc5e2b3d88200a8265de9d4e6d4":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["07155cdd910937cdf6877e48884d5782845c8b8b","90213788e5007cc5e2b3d88200a8265de9d4e6d4"],"07155cdd910937cdf6877e48884d5782845c8b8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90213788e5007cc5e2b3d88200a8265de9d4e6d4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["07155cdd910937cdf6877e48884d5782845c8b8b"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["90213788e5007cc5e2b3d88200a8265de9d4e6d4","07155cdd910937cdf6877e48884d5782845c8b8b"],"90213788e5007cc5e2b3d88200a8265de9d4e6d4":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["dd45d4a2ee01a1932d33eec42f5272c2402da679"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}