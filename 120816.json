{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40NormsReader#getNormFilename(String,Map[Integer,Long],int).mjava","commits":[{"id":"10acb7e55ffd7d041a1028653d0defa4a50bfec3","date":1323041492,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40NormsReader#getNormFilename(String,Map[Integer,Long],int).mjava","pathOld":"/dev/null","sourceNew":"  private static String getNormFilename(String segmentName, Map<Integer,Long> normGen, int number) {\n    if (hasSeparateNorms(normGen, number)) {\n      return IndexFileNames.fileNameFromGeneration(segmentName, IndexFileNames.SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(segmentName, IndexFileNames.NORMS_EXTENSION, SegmentInfo.WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"091eda9854cc9e0ece4516ce6bc0bcac3a10226a","date":1323046561,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40NormsReader#getNormFilename(String,Map[Integer,Long],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40NormsReader#getNormFilename(String,Map[Integer,Long],int).mjava","sourceNew":"  private static String getNormFilename(String segmentName, Map<Integer,Long> normGen, int number) {\n    if (hasSeparateNorms(normGen, number)) {\n      return IndexFileNames.fileNameFromGeneration(segmentName, IndexFileNames.SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(segmentName, Lucene40NormsWriter.NORMS_EXTENSION, SegmentInfo.WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":"  private static String getNormFilename(String segmentName, Map<Integer,Long> normGen, int number) {\n    if (hasSeparateNorms(normGen, number)) {\n      return IndexFileNames.fileNameFromGeneration(segmentName, IndexFileNames.SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(segmentName, IndexFileNames.NORMS_EXTENSION, SegmentInfo.WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae7b1abd869bbf7d8ae72b0e7ae3852b363bb074","date":1323052749,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40NormsReader#getNormFilename(String,Map[Integer,Long],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40NormsReader#getNormFilename(String,Map[Integer,Long],int).mjava","sourceNew":"  private static String getNormFilename(String segmentName, Map<Integer,Long> normGen, int number) {\n    if (hasSeparateNorms(normGen, number)) {\n      return IndexFileNames.fileNameFromGeneration(segmentName, Lucene40NormsWriter.SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(segmentName, Lucene40NormsWriter.NORMS_EXTENSION, SegmentInfo.WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":"  private static String getNormFilename(String segmentName, Map<Integer,Long> normGen, int number) {\n    if (hasSeparateNorms(normGen, number)) {\n      return IndexFileNames.fileNameFromGeneration(segmentName, IndexFileNames.SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(segmentName, Lucene40NormsWriter.NORMS_EXTENSION, SegmentInfo.WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40NormsReader#getNormFilename(String,Map[Integer,Long],int).mjava","pathOld":"/dev/null","sourceNew":"  private static String getNormFilename(String segmentName, Map<Integer,Long> normGen, int number) {\n    if (hasSeparateNorms(normGen, number)) {\n      return IndexFileNames.fileNameFromGeneration(segmentName, Lucene40NormsWriter.SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(segmentName, Lucene40NormsWriter.NORMS_EXTENSION, SegmentInfo.WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40NormsReader#getNormFilename(String,Map[Integer,Long],int).mjava","pathOld":"/dev/null","sourceNew":"  private static String getNormFilename(String segmentName, Map<Integer,Long> normGen, int number) {\n    if (hasSeparateNorms(normGen, number)) {\n      return IndexFileNames.fileNameFromGeneration(segmentName, Lucene40NormsWriter.SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(segmentName, Lucene40NormsWriter.NORMS_EXTENSION, SegmentInfo.WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsReader#getNormFilename(String,Map[Integer,Long],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40NormsReader#getNormFilename(String,Map[Integer,Long],int).mjava","sourceNew":"  private static String getNormFilename(String segmentName, Map<Integer,Long> normGen, int number) {\n    if (hasSeparateNorms(normGen, number)) {\n      return IndexFileNames.fileNameFromGeneration(segmentName, Lucene40NormsWriter.SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(segmentName, Lucene40NormsWriter.NORMS_EXTENSION, SegmentInfo.WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":"  private static String getNormFilename(String segmentName, Map<Integer,Long> normGen, int number) {\n    if (hasSeparateNorms(normGen, number)) {\n      return IndexFileNames.fileNameFromGeneration(segmentName, Lucene40NormsWriter.SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(segmentName, Lucene40NormsWriter.NORMS_EXTENSION, SegmentInfo.WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10acb7e55ffd7d041a1028653d0defa4a50bfec3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7b1abd869bbf7d8ae72b0e7ae3852b363bb074"],"ae7b1abd869bbf7d8ae72b0e7ae3852b363bb074":["091eda9854cc9e0ece4516ce6bc0bcac3a10226a"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"091eda9854cc9e0ece4516ce6bc0bcac3a10226a":["10acb7e55ffd7d041a1028653d0defa4a50bfec3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"10acb7e55ffd7d041a1028653d0defa4a50bfec3":["091eda9854cc9e0ece4516ce6bc0bcac3a10226a"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10acb7e55ffd7d041a1028653d0defa4a50bfec3","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"ae7b1abd869bbf7d8ae72b0e7ae3852b363bb074":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"091eda9854cc9e0ece4516ce6bc0bcac3a10226a":["ae7b1abd869bbf7d8ae72b0e7ae3852b363bb074"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}