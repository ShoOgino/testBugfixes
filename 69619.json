{"path":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsCategoryTokenizer#setPayload().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsCategoryTokenizer#setPayload().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsCategoryTokenizer#setPayload().mjava","sourceNew":"  @Override\n  protected void setPayload() {\n    this.payloadAttribute.setPayload(null);\n    if (enhancements == null) {\n      return;\n    }\n    // clear previous payload content\n    int nBytes = nStart;\n    int i = 0;\n    int nEnhancementBytes = 0;\n    for (CategoryEnhancement enhancement : enhancements) {\n      // get payload bytes from each enhancement\n      enhancementBytes[i] = enhancement\n          .getCategoryTokenBytes(categoryAttribute);\n      // write the number of bytes in the payload\n      if (enhancementBytes[i] == null) {\n        nBytes += Vint8.encode(0, payloadBytes, nBytes);\n      } else {\n        nBytes += Vint8.encode(enhancementBytes[i].length,\n            payloadBytes, nBytes);\n        nEnhancementBytes += enhancementBytes[i].length;\n      }\n      i++;\n    }\n    if (nEnhancementBytes > 0) {\n      // make sure we have space for all bytes\n      if (payloadBytes.length < nBytes + nEnhancementBytes) {\n        byte[] temp = new byte[(nBytes + nEnhancementBytes) * 2];\n        System.arraycopy(payloadBytes, 0, temp, 0, nBytes);\n        payloadBytes = temp;\n      }\n      for (i = 0; i < enhancementBytes.length; i++) {\n        // add the enhancement payload bytes after the existing bytes\n        if (enhancementBytes[i] != null) {\n          System.arraycopy(enhancementBytes[i], 0, payloadBytes,\n              nBytes, enhancementBytes[i].length);\n          nBytes += enhancementBytes[i].length;\n        }\n      }\n      payload.setData(payloadBytes, 0, nBytes);\n      payloadAttribute.setPayload(payload);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void setPayload() {\n    this.payloadAttribute.setPayload(null);\n    if (enhancements == null) {\n      return;\n    }\n    // clear previous payload content\n    int nBytes = nStart;\n    int i = 0;\n    int nEnhancementBytes = 0;\n    for (CategoryEnhancement enhancement : enhancements) {\n      // get payload bytes from each enhancement\n      enhancementBytes[i] = enhancement\n          .getCategoryTokenBytes(categoryAttribute);\n      // write the number of bytes in the payload\n      if (enhancementBytes[i] == null) {\n        nBytes += Vint8.encode(0, payloadBytes, nBytes);\n      } else {\n        nBytes += Vint8.encode(enhancementBytes[i].length,\n            payloadBytes, nBytes);\n        nEnhancementBytes += enhancementBytes[i].length;\n      }\n      i++;\n    }\n    if (nEnhancementBytes > 0) {\n      // make sure we have space for all bytes\n      if (payloadBytes.length < nBytes + nEnhancementBytes) {\n        byte[] temp = new byte[(nBytes + nEnhancementBytes) * 2];\n        System.arraycopy(payloadBytes, 0, temp, 0, nBytes);\n        payloadBytes = temp;\n      }\n      for (i = 0; i < enhancementBytes.length; i++) {\n        // add the enhancement payload bytes after the existing bytes\n        if (enhancementBytes[i] != null) {\n          System.arraycopy(enhancementBytes[i], 0, payloadBytes,\n              nBytes, enhancementBytes[i].length);\n          nBytes += enhancementBytes[i].length;\n        }\n      }\n      payload.setData(payloadBytes, 0, nBytes);\n      payloadAttribute.setPayload(payload);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsCategoryTokenizer#setPayload().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsCategoryTokenizer#setPayload().mjava","sourceNew":"  @Override\n  protected void setPayload() {\n    this.payloadAttribute.setPayload(null);\n    if (enhancements == null) {\n      return;\n    }\n    // clear previous payload content\n    int nBytes = nStart;\n    int i = 0;\n    int nEnhancementBytes = 0;\n    for (CategoryEnhancement enhancement : enhancements) {\n      // get payload bytes from each enhancement\n      enhancementBytes[i] = enhancement\n          .getCategoryTokenBytes(categoryAttribute);\n      // write the number of bytes in the payload\n      if (enhancementBytes[i] == null) {\n        nBytes += Vint8.encode(0, payloadBytes, nBytes);\n      } else {\n        nBytes += Vint8.encode(enhancementBytes[i].length,\n            payloadBytes, nBytes);\n        nEnhancementBytes += enhancementBytes[i].length;\n      }\n      i++;\n    }\n    if (nEnhancementBytes > 0) {\n      // make sure we have space for all bytes\n      if (payloadBytes.length < nBytes + nEnhancementBytes) {\n        byte[] temp = new byte[(nBytes + nEnhancementBytes) * 2];\n        System.arraycopy(payloadBytes, 0, temp, 0, nBytes);\n        payloadBytes = temp;\n      }\n      for (i = 0; i < enhancementBytes.length; i++) {\n        // add the enhancement payload bytes after the existing bytes\n        if (enhancementBytes[i] != null) {\n          System.arraycopy(enhancementBytes[i], 0, payloadBytes,\n              nBytes, enhancementBytes[i].length);\n          nBytes += enhancementBytes[i].length;\n        }\n      }\n      payload.bytes = payloadBytes;\n      payload.offset = 0;\n      payload.length = nBytes;\n      payloadAttribute.setPayload(payload);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void setPayload() {\n    this.payloadAttribute.setPayload(null);\n    if (enhancements == null) {\n      return;\n    }\n    // clear previous payload content\n    int nBytes = nStart;\n    int i = 0;\n    int nEnhancementBytes = 0;\n    for (CategoryEnhancement enhancement : enhancements) {\n      // get payload bytes from each enhancement\n      enhancementBytes[i] = enhancement\n          .getCategoryTokenBytes(categoryAttribute);\n      // write the number of bytes in the payload\n      if (enhancementBytes[i] == null) {\n        nBytes += Vint8.encode(0, payloadBytes, nBytes);\n      } else {\n        nBytes += Vint8.encode(enhancementBytes[i].length,\n            payloadBytes, nBytes);\n        nEnhancementBytes += enhancementBytes[i].length;\n      }\n      i++;\n    }\n    if (nEnhancementBytes > 0) {\n      // make sure we have space for all bytes\n      if (payloadBytes.length < nBytes + nEnhancementBytes) {\n        byte[] temp = new byte[(nBytes + nEnhancementBytes) * 2];\n        System.arraycopy(payloadBytes, 0, temp, 0, nBytes);\n        payloadBytes = temp;\n      }\n      for (i = 0; i < enhancementBytes.length; i++) {\n        // add the enhancement payload bytes after the existing bytes\n        if (enhancementBytes[i] != null) {\n          System.arraycopy(enhancementBytes[i], 0, payloadBytes,\n              nBytes, enhancementBytes[i].length);\n          nBytes += enhancementBytes[i].length;\n        }\n      }\n      payload.setData(payloadBytes, 0, nBytes);\n      payloadAttribute.setPayload(payload);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsCategoryTokenizer#setPayload().mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void setPayload() {\n    this.payloadAttribute.setPayload(null);\n    if (enhancements == null) {\n      return;\n    }\n    // clear previous payload content\n    int nBytes = nStart;\n    int i = 0;\n    int nEnhancementBytes = 0;\n    for (CategoryEnhancement enhancement : enhancements) {\n      // get payload bytes from each enhancement\n      enhancementBytes[i] = enhancement\n          .getCategoryTokenBytes(categoryAttribute);\n      // write the number of bytes in the payload\n      if (enhancementBytes[i] == null) {\n        nBytes += Vint8.encode(0, payloadBytes, nBytes);\n      } else {\n        nBytes += Vint8.encode(enhancementBytes[i].length,\n            payloadBytes, nBytes);\n        nEnhancementBytes += enhancementBytes[i].length;\n      }\n      i++;\n    }\n    if (nEnhancementBytes > 0) {\n      // make sure we have space for all bytes\n      if (payloadBytes.length < nBytes + nEnhancementBytes) {\n        byte[] temp = new byte[(nBytes + nEnhancementBytes) * 2];\n        System.arraycopy(payloadBytes, 0, temp, 0, nBytes);\n        payloadBytes = temp;\n      }\n      for (i = 0; i < enhancementBytes.length; i++) {\n        // add the enhancement payload bytes after the existing bytes\n        if (enhancementBytes[i] != null) {\n          System.arraycopy(enhancementBytes[i], 0, payloadBytes,\n              nBytes, enhancementBytes[i].length);\n          nBytes += enhancementBytes[i].length;\n        }\n      }\n      payload.bytes = payloadBytes;\n      payload.offset = 0;\n      payload.length = nBytes;\n      payloadAttribute.setPayload(payload);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsCategoryTokenizer#setPayload().mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void setPayload() {\n    this.payloadAttribute.setPayload(null);\n    if (enhancements == null) {\n      return;\n    }\n    // clear previous payload content\n    int nBytes = nStart;\n    int i = 0;\n    int nEnhancementBytes = 0;\n    for (CategoryEnhancement enhancement : enhancements) {\n      // get payload bytes from each enhancement\n      enhancementBytes[i] = enhancement\n          .getCategoryTokenBytes(categoryAttribute);\n      // write the number of bytes in the payload\n      if (enhancementBytes[i] == null) {\n        nBytes += Vint8.encode(0, payloadBytes, nBytes);\n      } else {\n        nBytes += Vint8.encode(enhancementBytes[i].length,\n            payloadBytes, nBytes);\n        nEnhancementBytes += enhancementBytes[i].length;\n      }\n      i++;\n    }\n    if (nEnhancementBytes > 0) {\n      // make sure we have space for all bytes\n      if (payloadBytes.length < nBytes + nEnhancementBytes) {\n        byte[] temp = new byte[(nBytes + nEnhancementBytes) * 2];\n        System.arraycopy(payloadBytes, 0, temp, 0, nBytes);\n        payloadBytes = temp;\n      }\n      for (i = 0; i < enhancementBytes.length; i++) {\n        // add the enhancement payload bytes after the existing bytes\n        if (enhancementBytes[i] != null) {\n          System.arraycopy(enhancementBytes[i], 0, payloadBytes,\n              nBytes, enhancementBytes[i].length);\n          nBytes += enhancementBytes[i].length;\n        }\n      }\n      payload.bytes = payloadBytes;\n      payload.offset = 0;\n      payload.length = nBytes;\n      payloadAttribute.setPayload(payload);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["76fa9933adb0556e752e8af9734c4d0ae14622ff","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}