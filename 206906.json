{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#zzScanError(int).mjava","commits":[{"id":"3a5582df130621a89a150891fa2fa492fdce73e0","date":1332126832,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#zzScanError(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Reports an error that occured while scanning.\r\n   *\r\n   * In a wellformed scanner (no or only correct usage of \r\n   * yypushback(int) and a match-all fallback rule) this method \r\n   * will only be called with things that \"Can't Possibly Happen\".\r\n   * If this method is called, something is seriously wrong\r\n   * (e.g. a JFlex bug producing a faulty scanner etc.).\r\n   *\r\n   * Usual syntax/scanner level error handling should be done\r\n   * in error fallback rules.\r\n   *\r\n   * @param   errorCode  the code of the errormessage to display\r\n   */\r\n  private void zzScanError(int errorCode) {\r\n    String message;\r\n    try {\r\n      message = ZZ_ERROR_MSG[errorCode];\r\n    }\r\n    catch (ArrayIndexOutOfBoundsException e) {\r\n      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];\r\n    }\r\n\r\n    throw new Error(message);\r\n  } \r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d76dfc2581b6998f72c0e749c6200e9c2432c36f","date":1332788228,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#zzScanError(int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#zzScanError(int).mjava","sourceNew":"  /**\n   * Reports an error that occured while scanning.\n   *\n   * In a wellformed scanner (no or only correct usage of \n   * yypushback(int) and a match-all fallback rule) this method \n   * will only be called with things that \"Can't Possibly Happen\".\n   * If this method is called, something is seriously wrong\n   * (e.g. a JFlex bug producing a faulty scanner etc.).\n   *\n   * Usual syntax/scanner level error handling should be done\n   * in error fallback rules.\n   *\n   * @param   errorCode  the code of the errormessage to display\n   */\n  private void zzScanError(int errorCode) {\n    String message;\n    try {\n      message = ZZ_ERROR_MSG[errorCode];\n    }\n    catch (ArrayIndexOutOfBoundsException e) {\n      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];\n    }\n\n    throw new Error(message);\n  } \n\n","sourceOld":"  /**\r\n   * Reports an error that occured while scanning.\r\n   *\r\n   * In a wellformed scanner (no or only correct usage of \r\n   * yypushback(int) and a match-all fallback rule) this method \r\n   * will only be called with things that \"Can't Possibly Happen\".\r\n   * If this method is called, something is seriously wrong\r\n   * (e.g. a JFlex bug producing a faulty scanner etc.).\r\n   *\r\n   * Usual syntax/scanner level error handling should be done\r\n   * in error fallback rules.\r\n   *\r\n   * @param   errorCode  the code of the errormessage to display\r\n   */\r\n  private void zzScanError(int errorCode) {\r\n    String message;\r\n    try {\r\n      message = ZZ_ERROR_MSG[errorCode];\r\n    }\r\n    catch (ArrayIndexOutOfBoundsException e) {\r\n      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];\r\n    }\r\n\r\n    throw new Error(message);\r\n  } \r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#zzScanError(int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#zzScanError(int).mjava","sourceNew":"  /**\n   * Reports an error that occured while scanning.\n   *\n   * In a wellformed scanner (no or only correct usage of \n   * yypushback(int) and a match-all fallback rule) this method \n   * will only be called with things that \"Can't Possibly Happen\".\n   * If this method is called, something is seriously wrong\n   * (e.g. a JFlex bug producing a faulty scanner etc.).\n   *\n   * Usual syntax/scanner level error handling should be done\n   * in error fallback rules.\n   *\n   * @param   errorCode  the code of the errormessage to display\n   */\n  private void zzScanError(int errorCode) {\n    String message;\n    try {\n      message = ZZ_ERROR_MSG[errorCode];\n    }\n    catch (ArrayIndexOutOfBoundsException e) {\n      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];\n    }\n\n    throw new Error(message);\n  } \n\n","sourceOld":"  /**\n   * Reports an error that occured while scanning.\n   *\n   * In a wellformed scanner (no or only correct usage of \n   * yypushback(int) and a match-all fallback rule) this method \n   * will only be called with things that \"Can't Possibly Happen\".\n   * If this method is called, something is seriously wrong\n   * (e.g. a JFlex bug producing a faulty scanner etc.).\n   *\n   * Usual syntax/scanner level error handling should be done\n   * in error fallback rules.\n   *\n   * @param   errorCode  the code of the errormessage to display\n   */\n  private void zzScanError(int errorCode) {\n    String message;\n    try {\n      message = ZZ_ERROR_MSG[errorCode];\n    }\n    catch (ArrayIndexOutOfBoundsException e) {\n      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];\n    }\n\n    throw new Error(message);\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d76dfc2581b6998f72c0e749c6200e9c2432c36f"],"3a5582df130621a89a150891fa2fa492fdce73e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d76dfc2581b6998f72c0e749c6200e9c2432c36f":["3a5582df130621a89a150891fa2fa492fdce73e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a5582df130621a89a150891fa2fa492fdce73e0":["d76dfc2581b6998f72c0e749c6200e9c2432c36f"],"d76dfc2581b6998f72c0e749c6200e9c2432c36f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a5582df130621a89a150891fa2fa492fdce73e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}