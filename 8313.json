{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer#ValueSourceScorer(IndexReader,FunctionValues).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer#ValueSourceScorer(IndexReader,FunctionValues).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer#ValueSourceScorer(IndexReader,FunctionValues).mjava","sourceNew":"  protected ValueSourceScorer(IndexReader reader, FunctionValues values) {\n    super(null);\n    this.reader = reader;\n    this.maxDoc = reader.maxDoc();\n    this.values = values;\n    setCheckDeletes(true);\n    this.liveDocs = MultiFields.getLiveDocs(reader);\n  }\n\n","sourceOld":"  protected ValueSourceScorer(IndexReader reader, FunctionValues values) {\n    super(null);\n    this.reader = reader;\n    this.maxDoc = reader.maxDoc();\n    this.values = values;\n    setCheckDeletes(true);\n    this.liveDocs = MultiFields.getLiveDocs(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5639d0d5bffb5076883b28d9b3329fbd52812137","date":1438883244,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer#ValueSourceScorer(IndexReader,FunctionValues).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer#ValueSourceScorer(IndexReader,FunctionValues).mjava","sourceNew":"  //TODO use LeafReaderContext not IndexReader?\n  protected ValueSourceScorer(IndexReader reader, FunctionValues values) {\n    super(null);//no weight\n    this.values = values;\n    this.twoPhaseIterator = new TwoPhaseIterator(DocIdSetIterator.all(reader.maxDoc())) { // no approximation!\n      @Override\n      public boolean matches() throws IOException {\n        return ValueSourceScorer.this.matches(docID());\n      }\n    };\n    this.disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n  }\n\n","sourceOld":"  protected ValueSourceScorer(IndexReader reader, FunctionValues values) {\n    super(null);\n    this.reader = reader;\n    this.maxDoc = reader.maxDoc();\n    this.values = values;\n    setCheckDeletes(true);\n    this.liveDocs = MultiFields.getLiveDocs(reader);\n  }\n\n","bugFix":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","c0d9871701755df956b8bb5e417776dacc7dc1f2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer#ValueSourceScorer(IndexReader,FunctionValues).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer#ValueSourceScorer(IndexReader,FunctionValues).mjava","sourceNew":"  //TODO use LeafReaderContext not IndexReader?\n  protected ValueSourceScorer(IndexReader reader, FunctionValues values) {\n    super(null);//no weight\n    this.values = values;\n    this.twoPhaseIterator = new TwoPhaseIterator(DocIdSetIterator.all(reader.maxDoc())) { // no approximation!\n      @Override\n      public boolean matches() throws IOException {\n        return ValueSourceScorer.this.matches(docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 100; // TODO: use cost of ValueSourceScorer.this.matches()\n      }\n    };\n    this.disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n  }\n\n","sourceOld":"  //TODO use LeafReaderContext not IndexReader?\n  protected ValueSourceScorer(IndexReader reader, FunctionValues values) {\n    super(null);//no weight\n    this.values = values;\n    this.twoPhaseIterator = new TwoPhaseIterator(DocIdSetIterator.all(reader.maxDoc())) { // no approximation!\n      @Override\n      public boolean matches() throws IOException {\n        return ValueSourceScorer.this.matches(docID());\n      }\n    };\n    this.disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer#ValueSourceScorer(IndexReader,FunctionValues).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer#ValueSourceScorer(IndexReader,FunctionValues).mjava","sourceNew":"  //TODO use LeafReaderContext not IndexReader?\n  protected ValueSourceScorer(IndexReader reader, FunctionValues values) {\n    super(null);//no weight\n    this.values = values;\n    final DocIdSetIterator approximation = DocIdSetIterator.all(reader.maxDoc()); // no approximation!\n    this.twoPhaseIterator = new TwoPhaseIterator(approximation) {\n      @Override\n      public boolean matches() throws IOException {\n        return ValueSourceScorer.this.matches(approximation.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 100; // TODO: use cost of ValueSourceScorer.this.matches()\n      }\n    };\n    this.disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n  }\n\n","sourceOld":"  //TODO use LeafReaderContext not IndexReader?\n  protected ValueSourceScorer(IndexReader reader, FunctionValues values) {\n    super(null);//no weight\n    this.values = values;\n    this.twoPhaseIterator = new TwoPhaseIterator(DocIdSetIterator.all(reader.maxDoc())) { // no approximation!\n      @Override\n      public boolean matches() throws IOException {\n        return ValueSourceScorer.this.matches(docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 100; // TODO: use cost of ValueSourceScorer.this.matches()\n      }\n    };\n    this.disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57cfa96e1cacc0f1f98d8732aa54935875187781","date":1458248307,"type":5,"author":"yonik","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer#ValueSourceScorer(LeafReaderContext,FunctionValues).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer#ValueSourceScorer(IndexReader,FunctionValues).mjava","sourceNew":"  protected ValueSourceScorer(LeafReaderContext readerContext, FunctionValues values) {\n    super(null);//no weight\n    this.values = values;\n    final DocIdSetIterator approximation = DocIdSetIterator.all(readerContext.reader().maxDoc()); // no approximation!\n    this.twoPhaseIterator = new TwoPhaseIterator(approximation) {\n      @Override\n      public boolean matches() throws IOException {\n        return ValueSourceScorer.this.matches(approximation.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 100; // TODO: use cost of ValueSourceScorer.this.matches()\n      }\n    };\n    this.disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n  }\n\n","sourceOld":"  //TODO use LeafReaderContext not IndexReader?\n  protected ValueSourceScorer(IndexReader reader, FunctionValues values) {\n    super(null);//no weight\n    this.values = values;\n    final DocIdSetIterator approximation = DocIdSetIterator.all(reader.maxDoc()); // no approximation!\n    this.twoPhaseIterator = new TwoPhaseIterator(approximation) {\n      @Override\n      public boolean matches() throws IOException {\n        return ValueSourceScorer.this.matches(approximation.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 100; // TODO: use cost of ValueSourceScorer.this.matches()\n      }\n    };\n    this.disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"d277693481ea6007c1d83cd503d0859bb3b64d20":["5639d0d5bffb5076883b28d9b3329fbd52812137"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5639d0d5bffb5076883b28d9b3329fbd52812137":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57cfa96e1cacc0f1f98d8732aa54935875187781"]},"commit2Childs":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d277693481ea6007c1d83cd503d0859bb3b64d20":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5639d0d5bffb5076883b28d9b3329fbd52812137"],"5639d0d5bffb5076883b28d9b3329fbd52812137":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["57cfa96e1cacc0f1f98d8732aa54935875187781"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}