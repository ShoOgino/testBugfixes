{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyLiveDocs().mjava","commits":[{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyLiveDocs().mjava","pathOld":"/dev/null","sourceNew":"    public synchronized BitVector getReadOnlyLiveDocs() {\n      //System.out.println(\"getROLiveDocs seg=\" + info);\n      assert Thread.holdsLock(IndexWriter.this);\n      shared = true;\n      assert countsMatch();\n      //if (liveDocs != null) {\n      //System.out.println(\"  liveCount=\" + liveDocs.count());\n      //}\n      return liveDocs;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7","date":1326996651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyLiveDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyLiveDocs().mjava","sourceNew":"    // nocommit: if this is read-only live docs, why doesn't it return Bits?!\n    public synchronized MutableBits getReadOnlyLiveDocs() {\n      //System.out.println(\"getROLiveDocs seg=\" + info);\n      assert Thread.holdsLock(IndexWriter.this);\n      shared = true;\n      assert countsMatch();\n      //if (liveDocs != null) {\n      //System.out.println(\"  liveCount=\" + liveDocs.count());\n      //}\n      return liveDocs;\n    }\n\n","sourceOld":"    public synchronized BitVector getReadOnlyLiveDocs() {\n      //System.out.println(\"getROLiveDocs seg=\" + info);\n      assert Thread.holdsLock(IndexWriter.this);\n      shared = true;\n      assert countsMatch();\n      //if (liveDocs != null) {\n      //System.out.println(\"  liveCount=\" + liveDocs.count());\n      //}\n      return liveDocs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a16d06e7522604de20b2d758d9b9464bb30fe02","date":1327070101,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyLiveDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyLiveDocs().mjava","sourceNew":"    // nocommit: if this is read-only live docs, why doesn't it return Bits?!\n    public synchronized Bits getReadOnlyLiveDocs() {\n      //System.out.println(\"getROLiveDocs seg=\" + info);\n      assert Thread.holdsLock(IndexWriter.this);\n      shared = true;\n      assert countsMatch();\n      //if (liveDocs != null) {\n      //System.out.println(\"  liveCount=\" + liveDocs.count());\n      //}\n      return liveDocs;\n    }\n\n","sourceOld":"    // nocommit: if this is read-only live docs, why doesn't it return Bits?!\n    public synchronized MutableBits getReadOnlyLiveDocs() {\n      //System.out.println(\"getROLiveDocs seg=\" + info);\n      assert Thread.holdsLock(IndexWriter.this);\n      shared = true;\n      assert countsMatch();\n      //if (liveDocs != null) {\n      //System.out.println(\"  liveCount=\" + liveDocs.count());\n      //}\n      return liveDocs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b076786671a545458acda73a81c53fea2e4845","date":1327070862,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyLiveDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyLiveDocs().mjava","sourceNew":"    public synchronized Bits getReadOnlyLiveDocs() {\n      //System.out.println(\"getROLiveDocs seg=\" + info);\n      assert Thread.holdsLock(IndexWriter.this);\n      shared = true;\n      assert countsMatch();\n      //if (liveDocs != null) {\n      //System.out.println(\"  liveCount=\" + liveDocs.count());\n      //}\n      return liveDocs;\n    }\n\n","sourceOld":"    // nocommit: if this is read-only live docs, why doesn't it return Bits?!\n    public synchronized Bits getReadOnlyLiveDocs() {\n      //System.out.println(\"getROLiveDocs seg=\" + info);\n      assert Thread.holdsLock(IndexWriter.this);\n      shared = true;\n      assert countsMatch();\n      //if (liveDocs != null) {\n      //System.out.println(\"  liveCount=\" + liveDocs.count());\n      //}\n      return liveDocs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e","date":1327757020,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyLiveDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyLiveDocs().mjava","sourceNew":"    public synchronized Bits getReadOnlyLiveDocs() {\n      //System.out.println(\"getROLiveDocs seg=\" + info);\n      assert Thread.holdsLock(IndexWriter.this);\n      shared = true;\n      //if (liveDocs != null) {\n      //System.out.println(\"  liveCount=\" + liveDocs.count());\n      //}\n      return liveDocs;\n    }\n\n","sourceOld":"    public synchronized Bits getReadOnlyLiveDocs() {\n      //System.out.println(\"getROLiveDocs seg=\" + info);\n      assert Thread.holdsLock(IndexWriter.this);\n      shared = true;\n      assert countsMatch();\n      //if (liveDocs != null) {\n      //System.out.println(\"  liveCount=\" + liveDocs.count());\n      //}\n      return liveDocs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyLiveDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyLiveDocs().mjava","sourceNew":"    public synchronized Bits getReadOnlyLiveDocs() {\n      //System.out.println(\"getROLiveDocs seg=\" + info);\n      assert Thread.holdsLock(IndexWriter.this);\n      shared = true;\n      //if (liveDocs != null) {\n      //System.out.println(\"  liveCount=\" + liveDocs.count());\n      //}\n      return liveDocs;\n    }\n\n","sourceOld":"    public synchronized BitVector getReadOnlyLiveDocs() {\n      //System.out.println(\"getROLiveDocs seg=\" + info);\n      assert Thread.holdsLock(IndexWriter.this);\n      shared = true;\n      assert countsMatch();\n      //if (liveDocs != null) {\n      //System.out.println(\"  liveCount=\" + liveDocs.count());\n      //}\n      return liveDocs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyLiveDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyLiveDocs().mjava","sourceNew":"    public synchronized Bits getReadOnlyLiveDocs() {\n      //System.out.println(\"getROLiveDocs seg=\" + info);\n      assert Thread.holdsLock(IndexWriter.this);\n      shared = true;\n      //if (liveDocs != null) {\n      //System.out.println(\"  liveCount=\" + liveDocs.count());\n      //}\n      return liveDocs;\n    }\n\n","sourceOld":"    public synchronized BitVector getReadOnlyLiveDocs() {\n      //System.out.println(\"getROLiveDocs seg=\" + info);\n      assert Thread.holdsLock(IndexWriter.this);\n      shared = true;\n      assert countsMatch();\n      //if (liveDocs != null) {\n      //System.out.println(\"  liveCount=\" + liveDocs.count());\n      //}\n      return liveDocs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyLiveDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyLiveDocs().mjava","sourceNew":"    public synchronized Bits getReadOnlyLiveDocs() {\n      //System.out.println(\"getROLiveDocs seg=\" + info);\n      assert Thread.holdsLock(IndexWriter.this);\n      shared = true;\n      //if (liveDocs != null) {\n      //System.out.println(\"  liveCount=\" + liveDocs.count());\n      //}\n      return liveDocs;\n    }\n\n","sourceOld":"    public synchronized Bits getReadOnlyLiveDocs() {\n      //System.out.println(\"getROLiveDocs seg=\" + info);\n      assert Thread.holdsLock(IndexWriter.this);\n      shared = true;\n      //if (liveDocs != null) {\n      //System.out.println(\"  liveCount=\" + liveDocs.count());\n      //}\n      return liveDocs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66b076786671a545458acda73a81c53fea2e4845":["8a16d06e7522604de20b2d758d9b9464bb30fe02"],"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e":["66b076786671a545458acda73a81c53fea2e4845"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["9ce667c6d3400b22523701c549c0d35e26da8b46","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["9ce667c6d3400b22523701c549c0d35e26da8b46","d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8a16d06e7522604de20b2d758d9b9464bb30fe02":["ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7"]},"commit2Childs":{"ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7":["8a16d06e7522604de20b2d758d9b9464bb30fe02"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"66b076786671a545458acda73a81c53fea2e4845":["d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e"],"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fd92b8bcc88e969302510acf77bd6970da3994c4"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7","fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"8a16d06e7522604de20b2d758d9b9464bb30fe02":["66b076786671a545458acda73a81c53fea2e4845"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}