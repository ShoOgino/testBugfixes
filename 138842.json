{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#slices(List[AtomicReaderContext]).mjava","commits":[{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#slices(List[AtomicReaderContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#slices(AtomicReaderContext...).mjava","sourceNew":"  /**\n   * Expert: Creates an array of leaf slices each holding a subset of the given leaves.\n   * Each {@link LeafSlice} is executed in a single thread. By default there\n   * will be one {@link LeafSlice} per leaf ({@link AtomicReaderContext}).\n   */\n  protected LeafSlice[] slices(List<AtomicReaderContext> leaves) {\n    LeafSlice[] slices = new LeafSlice[leaves.size()];\n    for (int i = 0; i < slices.length; i++) {\n      slices[i] = new LeafSlice(leaves.get(i));\n    }\n    return slices;\n  }\n\n","sourceOld":"  /**\n   * Expert: Creates an array of leaf slices each holding a subset of the given leaves.\n   * Each {@link LeafSlice} is executed in a single thread. By default there\n   * will be one {@link LeafSlice} per leaf ({@link AtomicReaderContext}).\n   */\n  protected LeafSlice[] slices(AtomicReaderContext...leaves) {\n    LeafSlice[] slices = new LeafSlice[leaves.length];\n    for (int i = 0; i < slices.length; i++) {\n      slices[i] = new LeafSlice(leaves[i]);\n    }\n    return slices;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#slices(List[AtomicReaderContext]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: Creates an array of leaf slices each holding a subset of the given leaves.\n   * Each {@link LeafSlice} is executed in a single thread. By default there\n   * will be one {@link LeafSlice} per leaf ({@link AtomicReaderContext}).\n   */\n  protected LeafSlice[] slices(List<AtomicReaderContext> leaves) {\n    LeafSlice[] slices = new LeafSlice[leaves.size()];\n    for (int i = 0; i < slices.length; i++) {\n      slices[i] = new LeafSlice(leaves.get(i));\n    }\n    return slices;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}