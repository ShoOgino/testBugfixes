{"path":"solr/core/src/test/org/apache/solr/core/TestConfig#testConvertAutoCommitMaxSizeStringToBytes().mjava","commits":[{"id":"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd","date":1525384847,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testConvertAutoCommitMaxSizeStringToBytes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConvertAutoCommitMaxSizeStringToBytes() {\n\n    // Valid values\n    Assert.assertEquals(300, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300\"));\n    Assert.assertEquals(307200, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300k\"));\n    Assert.assertEquals(307200, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300K\"));\n    Assert.assertEquals(314572800, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300m\"));\n    Assert.assertEquals(314572800, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300M\"));\n    Assert.assertEquals(322122547200L, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300g\"));\n    Assert.assertEquals(322122547200L, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300G\"));\n    Assert.assertEquals(-1, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"\"));\n\n    // Invalid values\n    try {\n      SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"3jbk32k\"); // valid suffix but non-numeric prefix\n      Assert.fail();\n    } catch (RuntimeException e) {\n      Assert.assertTrue(e.getMessage().contains(\"Invalid\"));\n    }\n    try {\n      SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300x\"); // valid prefix but invalid suffix\n      Assert.fail();\n    } catch (RuntimeException e) {\n      Assert.assertTrue(e.getMessage().contains(\"Invalid\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68cb00b5f16300efa7bd172de723d9ac91d38cc2","date":1543702774,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testConvertAutoCommitMaxSizeStringToBytes().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testConvertAutoCommitMaxSizeStringToBytes().mjava","sourceNew":"  @Test\n  public void testConvertAutoCommitMaxSizeStringToBytes() {\n\n    // Valid values\n    Assert.assertEquals(300, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300\"));\n    Assert.assertEquals(307200, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300k\"));\n    Assert.assertEquals(307200, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300K\"));\n    Assert.assertEquals(314572800, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300m\"));\n    Assert.assertEquals(314572800, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300M\"));\n    Assert.assertEquals(322122547200L, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300g\"));\n    Assert.assertEquals(322122547200L, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300G\"));\n    Assert.assertEquals(-1, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"\"));\n\n    // Invalid values\n    RuntimeException thrown = expectThrows(RuntimeException.class, () -> {\n      SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"3jbk32k\"); // valid suffix but non-numeric prefix\n    });\n    assertTrue(thrown.getMessage().contains(\"Invalid\"));\n\n    thrown = expectThrows(RuntimeException.class, () -> {\n      SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300x\"); // valid prefix but invalid suffix\n    });\n    assertTrue(thrown.getMessage().contains(\"Invalid\"));\n  }\n\n","sourceOld":"  @Test\n  public void testConvertAutoCommitMaxSizeStringToBytes() {\n\n    // Valid values\n    Assert.assertEquals(300, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300\"));\n    Assert.assertEquals(307200, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300k\"));\n    Assert.assertEquals(307200, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300K\"));\n    Assert.assertEquals(314572800, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300m\"));\n    Assert.assertEquals(314572800, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300M\"));\n    Assert.assertEquals(322122547200L, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300g\"));\n    Assert.assertEquals(322122547200L, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300G\"));\n    Assert.assertEquals(-1, SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"\"));\n\n    // Invalid values\n    try {\n      SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"3jbk32k\"); // valid suffix but non-numeric prefix\n      Assert.fail();\n    } catch (RuntimeException e) {\n      Assert.assertTrue(e.getMessage().contains(\"Invalid\"));\n    }\n    try {\n      SolrConfig.convertHeapOptionStyleConfigStringToBytes(\"300x\"); // valid prefix but invalid suffix\n      Assert.fail();\n    } catch (RuntimeException e) {\n      Assert.assertTrue(e.getMessage().contains(\"Invalid\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68cb00b5f16300efa7bd172de723d9ac91d38cc2":["4d07d6c279b65daaca32ee033fa06e4d7e85e0dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68cb00b5f16300efa7bd172de723d9ac91d38cc2"]},"commit2Childs":{"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd":["68cb00b5f16300efa7bd172de723d9ac91d38cc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d07d6c279b65daaca32ee033fa06e4d7e85e0dd"],"68cb00b5f16300efa7bd172de723d9ac91d38cc2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}