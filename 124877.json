{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimpleRegex().mjava","commits":[{"id":"00b6094c3d178b6f9e00c58c11d7d80f282e1fa0","date":1364200171,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimpleRegex().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleRegex() throws ParseException {\n    String[] fields = new String[] {\"a\", \"b\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random()));\n\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(new RegexpQuery(new Term(\"a\", \"[a-z][123]\")), Occur.SHOULD);\n    bq.add(new RegexpQuery(new Term(\"b\", \"[a-z][123]\")), Occur.SHOULD);\n    assertEquals(bq, mfqp.parse(\"/[a-z][123]/\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimpleRegex().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimpleRegex().mjava","sourceNew":"  public void testSimpleRegex() throws ParseException {\n    String[] fields = new String[] {\"a\", \"b\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new MockAnalyzer(random()));\n\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(new RegexpQuery(new Term(\"a\", \"[a-z][123]\")), Occur.SHOULD);\n    bq.add(new RegexpQuery(new Term(\"b\", \"[a-z][123]\")), Occur.SHOULD);\n    assertEquals(bq, mfqp.parse(\"/[a-z][123]/\"));\n  }\n\n","sourceOld":"  public void testSimpleRegex() throws ParseException {\n    String[] fields = new String[] {\"a\", \"b\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random()));\n\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(new RegexpQuery(new Term(\"a\", \"[a-z][123]\")), Occur.SHOULD);\n    bq.add(new RegexpQuery(new Term(\"b\", \"[a-z][123]\")), Occur.SHOULD);\n    assertEquals(bq, mfqp.parse(\"/[a-z][123]/\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimpleRegex().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimpleRegex().mjava","sourceNew":"  public void testSimpleRegex() throws ParseException {\n    String[] fields = new String[] {\"a\", \"b\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random()));\n\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(new RegexpQuery(new Term(\"a\", \"[a-z][123]\")), Occur.SHOULD);\n    bq.add(new RegexpQuery(new Term(\"b\", \"[a-z][123]\")), Occur.SHOULD);\n    assertEquals(bq, mfqp.parse(\"/[a-z][123]/\"));\n  }\n\n","sourceOld":"  public void testSimpleRegex() throws ParseException {\n    String[] fields = new String[] {\"a\", \"b\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new MockAnalyzer(random()));\n\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(new RegexpQuery(new Term(\"a\", \"[a-z][123]\")), Occur.SHOULD);\n    bq.add(new RegexpQuery(new Term(\"b\", \"[a-z][123]\")), Occur.SHOULD);\n    assertEquals(bq, mfqp.parse(\"/[a-z][123]/\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimpleRegex().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimpleRegex().mjava","sourceNew":"  public void testSimpleRegex() throws ParseException {\n    String[] fields = new String[] {\"a\", \"b\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new MockAnalyzer(random()));\n\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(new RegexpQuery(new Term(\"a\", \"[a-z][123]\")), Occur.SHOULD);\n    bq.add(new RegexpQuery(new Term(\"b\", \"[a-z][123]\")), Occur.SHOULD);\n    assertEquals(bq, mfqp.parse(\"/[a-z][123]/\"));\n  }\n\n","sourceOld":"  public void testSimpleRegex() throws ParseException {\n    String[] fields = new String[] {\"a\", \"b\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random()));\n\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(new RegexpQuery(new Term(\"a\", \"[a-z][123]\")), Occur.SHOULD);\n    bq.add(new RegexpQuery(new Term(\"b\", \"[a-z][123]\")), Occur.SHOULD);\n    assertEquals(bq, mfqp.parse(\"/[a-z][123]/\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimpleRegex().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimpleRegex().mjava","sourceNew":"  public void testSimpleRegex() throws ParseException {\n    String[] fields = new String[] {\"a\", \"b\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new MockAnalyzer(random()));\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    bq.add(new RegexpQuery(new Term(\"a\", \"[a-z][123]\")), Occur.SHOULD);\n    bq.add(new RegexpQuery(new Term(\"b\", \"[a-z][123]\")), Occur.SHOULD);\n    assertEquals(bq.build(), mfqp.parse(\"/[a-z][123]/\"));\n  }\n\n","sourceOld":"  public void testSimpleRegex() throws ParseException {\n    String[] fields = new String[] {\"a\", \"b\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new MockAnalyzer(random()));\n\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(new RegexpQuery(new Term(\"a\", \"[a-z][123]\")), Occur.SHOULD);\n    bq.add(new RegexpQuery(new Term(\"b\", \"[a-z][123]\")), Occur.SHOULD);\n    assertEquals(bq, mfqp.parse(\"/[a-z][123]/\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimpleRegex().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimpleRegex().mjava","sourceNew":"  public void testSimpleRegex() throws ParseException {\n    String[] fields = new String[] {\"a\", \"b\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new MockAnalyzer(random()));\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new RegexpQuery(new Term(\"a\", \"[a-z][123]\")), Occur.SHOULD);\n    bq.add(new RegexpQuery(new Term(\"b\", \"[a-z][123]\")), Occur.SHOULD);\n    assertEquals(bq.build(), mfqp.parse(\"/[a-z][123]/\"));\n  }\n\n","sourceOld":"  public void testSimpleRegex() throws ParseException {\n    String[] fields = new String[] {\"a\", \"b\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new MockAnalyzer(random()));\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    bq.add(new RegexpQuery(new Term(\"a\", \"[a-z][123]\")), Occur.SHOULD);\n    bq.add(new RegexpQuery(new Term(\"b\", \"[a-z][123]\")), Occur.SHOULD);\n    assertEquals(bq.build(), mfqp.parse(\"/[a-z][123]/\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimpleRegex().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimpleRegex().mjava","sourceNew":"  public void testSimpleRegex() throws ParseException {\n    String[] fields = new String[] {\"a\", \"b\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new MockAnalyzer(random()));\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new RegexpQuery(new Term(\"a\", \"[a-z][123]\")), Occur.SHOULD);\n    bq.add(new RegexpQuery(new Term(\"b\", \"[a-z][123]\")), Occur.SHOULD);\n    assertEquals(bq.build(), mfqp.parse(\"/[a-z][123]/\"));\n  }\n\n","sourceOld":"  public void testSimpleRegex() throws ParseException {\n    String[] fields = new String[] {\"a\", \"b\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new MockAnalyzer(random()));\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    bq.add(new RegexpQuery(new Term(\"a\", \"[a-z][123]\")), Occur.SHOULD);\n    bq.add(new RegexpQuery(new Term(\"b\", \"[a-z][123]\")), Occur.SHOULD);\n    assertEquals(bq.build(), mfqp.parse(\"/[a-z][123]/\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["00b6094c3d178b6f9e00c58c11d7d80f282e1fa0"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"00b6094c3d178b6f9e00c58c11d7d80f282e1fa0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"00b6094c3d178b6f9e00c58c11d7d80f282e1fa0":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00b6094c3d178b6f9e00c58c11d7d80f282e1fa0"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}