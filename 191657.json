{"path":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","sourceNew":"  private static void encoderTest(IntEncoder encoder, int[] values, int loopFactor) throws IOException {\n\n    BytesRef bytes = new BytesRef(values.length); // at least one byte per value\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      IntsRef data = newIntsRef(values);\n      encoder.encode(data, bytes);\n    }\n    // -----------------------------------------------------------\n\n    long encodeTime = 0;\n    for (int factor = loopFactor; factor > 0; --factor) {\n      IntsRef data = newIntsRef(values);\n      long start = System.currentTimeMillis();\n      encoder.encode(data, bytes);\n      encodeTime += System.currentTimeMillis() - start;\n    }\n\n    IntsRef decoded = new IntsRef(values.length);\n    int encodedSize = bytes.length;\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      decoder.decode(bytes, decoded);\n    }\n    // -----------------------------------------------------------\n\n    long decodeTime = 0;\n    for (int i = loopFactor; i > 0; --i) {\n      long start = System.currentTimeMillis();\n      decoder.decode(bytes, decoded);\n      decodeTime += System.currentTimeMillis() - start;\n    }\n    \n    if (decoded.length != values.length) {\n      throw new RuntimeException(\"wrong num values. expected=\" + values.length + \" actual=\" + decoded.length + \n          \" decoder=\" + decoder);\n    }\n\n    System.out.println(String.format(Locale.ROOT, resultsFormat, encoder, \n        nf.format(encodedSize * 8.0 / values.length), \n        encodeTime, \n        nf.format(encodeTime * 1000000.0 / (loopFactor * values.length)), \n        decodeTime, \n        nf.format(decodeTime * 1000000.0 / (loopFactor * values.length))));\n  }\n\n","sourceOld":"  private static void encoderTest(IntEncoder encoder, int[] values, int loopFactor) throws IOException {\n\n    BytesRef bytes = new BytesRef(values.length); // at least one byte per value\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      IntsRef data = newIntsRef(values);\n      encoder.encode(data, bytes);\n    }\n    // -----------------------------------------------------------\n\n    long encodeTime = 0;\n    for (int factor = loopFactor; factor > 0; --factor) {\n      IntsRef data = newIntsRef(values);\n      long start = System.currentTimeMillis();\n      encoder.encode(data, bytes);\n      encodeTime += System.currentTimeMillis() - start;\n    }\n\n    IntsRef decoded = new IntsRef(values.length);\n    int encodedSize = bytes.length;\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      decoder.decode(bytes, decoded);\n    }\n    // -----------------------------------------------------------\n\n    long decodeTime = 0;\n    for (int i = loopFactor; i > 0; --i) {\n      long start = System.currentTimeMillis();\n      decoder.decode(bytes, decoded);\n      decodeTime += System.currentTimeMillis() - start;\n    }\n    \n    if (decoded.length != values.length) {\n      throw new RuntimeException(\"wrong num values. expected=\" + values.length + \" actual=\" + decoded.length + \n          \" decoder=\" + decoder);\n    }\n\n    System.out.println(String.format(Locale.ROOT, resultsFormat, encoder, \n        nf.format(encodedSize * 8.0 / values.length), \n        encodeTime, \n        nf.format(encodeTime * 1000000.0 / (loopFactor * values.length)), \n        decodeTime, \n        nf.format(decodeTime * 1000000.0 / (loopFactor * values.length))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","sourceNew":null,"sourceOld":"  private static void encoderTest(IntEncoder encoder, int[] values, int loopFactor) throws IOException {\n\n    BytesRef bytes = new BytesRef(values.length); // at least one byte per value\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      IntsRef data = newIntsRef(values);\n      encoder.encode(data, bytes);\n    }\n    // -----------------------------------------------------------\n\n    long encodeTime = 0;\n    for (int factor = loopFactor; factor > 0; --factor) {\n      IntsRef data = newIntsRef(values);\n      long start = System.currentTimeMillis();\n      encoder.encode(data, bytes);\n      encodeTime += System.currentTimeMillis() - start;\n    }\n\n    IntsRef decoded = new IntsRef(values.length);\n    int encodedSize = bytes.length;\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      decoder.decode(bytes, decoded);\n    }\n    // -----------------------------------------------------------\n\n    long decodeTime = 0;\n    for (int i = loopFactor; i > 0; --i) {\n      long start = System.currentTimeMillis();\n      decoder.decode(bytes, decoded);\n      decodeTime += System.currentTimeMillis() - start;\n    }\n    \n    if (decoded.length != values.length) {\n      throw new RuntimeException(\"wrong num values. expected=\" + values.length + \" actual=\" + decoded.length + \n          \" decoder=\" + decoder);\n    }\n\n    System.out.println(String.format(Locale.ROOT, resultsFormat, encoder, \n        nf.format(encodedSize * 8.0 / values.length), \n        encodeTime, \n        nf.format(encodeTime * 1000000.0 / (loopFactor * values.length)), \n        decodeTime, \n        nf.format(decodeTime * 1000000.0 / (loopFactor * values.length))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","sourceNew":null,"sourceOld":"  private static void encoderTest(IntEncoder encoder, int[] values, int loopFactor) throws IOException {\n\n    BytesRef bytes = new BytesRef(values.length); // at least one byte per value\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      IntsRef data = newIntsRef(values);\n      encoder.encode(data, bytes);\n    }\n    // -----------------------------------------------------------\n\n    long encodeTime = 0;\n    for (int factor = loopFactor; factor > 0; --factor) {\n      IntsRef data = newIntsRef(values);\n      long start = System.currentTimeMillis();\n      encoder.encode(data, bytes);\n      encodeTime += System.currentTimeMillis() - start;\n    }\n\n    IntsRef decoded = new IntsRef(values.length);\n    int encodedSize = bytes.length;\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      decoder.decode(bytes, decoded);\n    }\n    // -----------------------------------------------------------\n\n    long decodeTime = 0;\n    for (int i = loopFactor; i > 0; --i) {\n      long start = System.currentTimeMillis();\n      decoder.decode(bytes, decoded);\n      decodeTime += System.currentTimeMillis() - start;\n    }\n    \n    if (decoded.length != values.length) {\n      throw new RuntimeException(\"wrong num values. expected=\" + values.length + \" actual=\" + decoded.length + \n          \" decoder=\" + decoder);\n    }\n\n    System.out.println(String.format(Locale.ROOT, resultsFormat, encoder, \n        nf.format(encodedSize * 8.0 / values.length), \n        encodeTime, \n        nf.format(encodeTime * 1000000.0 / (loopFactor * values.length)), \n        decodeTime, \n        nf.format(decodeTime * 1000000.0 / (loopFactor * values.length))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}