{"path":"lucene/core/src/test/org/apache/lucene/util/TestIOUtils#testSymlinkSSD().mjava","commits":[{"id":"0e2f3ed17863d309622d34015331954e61c4f8bf","date":1435376100,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIOUtils#testSymlinkSSD().mjava","pathOld":"/dev/null","sourceNew":"  public void testSymlinkSSD() throws Exception {\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n    Path dir = createTempDir();\n    dir = FilterPath.unwrap(dir).toRealPath();\n    \n    // fake SSD with a symlink mount (Ubuntu-like):\n    Random rnd = random();\n    String partitionUUID = new UUID(rnd.nextLong(), rnd.nextLong()).toString();\n    FileStore root = new MockFileStore(dir.toString() + \" (/dev/disk/by-uuid/\"+partitionUUID+\")\", \"btrfs\", \"/dev/disk/by-uuid/\"+partitionUUID);\n    // make a fake /dev/sda1 for it\n    Path devdir = dir.resolve(\"dev\");\n    Files.createDirectories(devdir);\n    Path deviceFile = devdir.resolve(\"sda1\");\n    Files.createFile(deviceFile);\n    // create a symlink to the above device file\n    Path symlinkdir = devdir.resolve(\"disk\").resolve(\"by-uuid\");\n    Files.createDirectories(symlinkdir);\n    try {\n      Files.createSymbolicLink(symlinkdir.resolve(partitionUUID), deviceFile);\n    } catch (UnsupportedOperationException | IOException e) {\n      assumeNoException(\"test requires filesystem that supports symbolic links\", e);\n    }\n    // make a fake /sys/block/sda/queue/rotational file for it\n    Path sysdir = dir.resolve(\"sys\").resolve(\"block\").resolve(\"sda\").resolve(\"queue\");\n    Files.createDirectories(sysdir);\n    try (OutputStream o = Files.newOutputStream(sysdir.resolve(\"rotational\"))) {\n      o.write(\"0\\n\".getBytes(StandardCharsets.US_ASCII));\n    }\n    Map<String,FileStore> mappings = Collections.singletonMap(dir.toString(), root);\n    FileSystem mockLinux = new MockLinuxFileSystemProvider(dir.getFileSystem(), mappings, dir).getFileSystem(null);\n    \n    Path mockPath = mockLinux.getPath(dir.toString());\n    assertFalse(IOUtils.spinsLinux(mockPath));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e2f3ed17863d309622d34015331954e61c4f8bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e2f3ed17863d309622d34015331954e61c4f8bf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e2f3ed17863d309622d34015331954e61c4f8bf"],"0e2f3ed17863d309622d34015331954e61c4f8bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}