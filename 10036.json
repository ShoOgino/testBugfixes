{"path":"lucene/core/src/test/org/apache/lucene/index/TestCustomTermFreq#testTermVectors().mjava","commits":[{"id":"e72e3ade782716457071fee4033f18689acc4c4f","date":1496770651,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomTermFreq#testTermVectors().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermVectors() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n    Document doc = new Document();\n    FieldType fieldType = new FieldType(TextField.TYPE_NOT_STORED);\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    fieldType.setStoreTermVectors(true);\n    Field field = new Field(\"field\",\n                            new CannedTermFreqs(new String[] {\"foo\", \"bar\", \"foo\", \"bar\"},\n                                                new int[] {42, 128, 17, 100}),\n                            fieldType);\n    doc.add(field);\n    w.addDocument(doc);\n\n    doc = new Document();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    field = new Field(\"field\",\n                      new CannedTermFreqs(new String[] {\"foo\", \"bar\", \"foo\", \"bar\"},\n                                          new int[] {50, 60, 70, 80}),\n                      fieldType);\n    doc.add(field);\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n\n    Fields fields = r.getTermVectors(0);\n    TermsEnum termsEnum = fields.terms(\"field\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"bar\")));\n    assertEquals(228, termsEnum.totalTermFreq());\n    PostingsEnum postings = termsEnum.postings(null);\n    assertNotNull(postings);\n    assertEquals(0, postings.nextDoc());\n    assertEquals(228, postings.freq());\n    assertEquals(NO_MORE_DOCS, postings.nextDoc());\n\n    assertTrue(termsEnum.seekExact(new BytesRef(\"foo\")));\n    assertEquals(59, termsEnum.totalTermFreq());\n    postings = termsEnum.postings(null);\n    assertNotNull(postings);\n    assertEquals(0, postings.nextDoc());\n    assertEquals(59, postings.freq());\n    assertEquals(NO_MORE_DOCS, postings.nextDoc());\n\n    fields = r.getTermVectors(1);\n    termsEnum = fields.terms(\"field\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"bar\")));\n    assertEquals(140, termsEnum.totalTermFreq());\n    postings = termsEnum.postings(null);\n    assertNotNull(postings);\n    assertEquals(0, postings.nextDoc());\n    assertEquals(140, postings.freq());\n    assertEquals(NO_MORE_DOCS, postings.nextDoc());\n\n    assertTrue(termsEnum.seekExact(new BytesRef(\"foo\")));\n    assertEquals(120, termsEnum.totalTermFreq());\n    postings = termsEnum.postings(null);\n    assertNotNull(postings);\n    assertEquals(0, postings.nextDoc());\n    assertEquals(120, postings.freq());\n    assertEquals(NO_MORE_DOCS, postings.nextDoc());\n    \n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f344bb33ca91f48e99c061980115b46fa84fc8f5","date":1496903283,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomTermFreq#testTermVectors().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermVectors() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n    Document doc = new Document();\n    FieldType fieldType = new FieldType(TextField.TYPE_NOT_STORED);\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    fieldType.setStoreTermVectors(true);\n    Field field = new Field(\"field\",\n                            new CannedTermFreqs(new String[] {\"foo\", \"bar\", \"foo\", \"bar\"},\n                                                new int[] {42, 128, 17, 100}),\n                            fieldType);\n    doc.add(field);\n    w.addDocument(doc);\n\n    doc = new Document();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    field = new Field(\"field\",\n                      new CannedTermFreqs(new String[] {\"foo\", \"bar\", \"foo\", \"bar\"},\n                                          new int[] {50, 60, 70, 80}),\n                      fieldType);\n    doc.add(field);\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n\n    Fields fields = r.getTermVectors(0);\n    TermsEnum termsEnum = fields.terms(\"field\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"bar\")));\n    assertEquals(228, termsEnum.totalTermFreq());\n    PostingsEnum postings = termsEnum.postings(null);\n    assertNotNull(postings);\n    assertEquals(0, postings.nextDoc());\n    assertEquals(228, postings.freq());\n    assertEquals(NO_MORE_DOCS, postings.nextDoc());\n\n    assertTrue(termsEnum.seekExact(new BytesRef(\"foo\")));\n    assertEquals(59, termsEnum.totalTermFreq());\n    postings = termsEnum.postings(null);\n    assertNotNull(postings);\n    assertEquals(0, postings.nextDoc());\n    assertEquals(59, postings.freq());\n    assertEquals(NO_MORE_DOCS, postings.nextDoc());\n\n    fields = r.getTermVectors(1);\n    termsEnum = fields.terms(\"field\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"bar\")));\n    assertEquals(140, termsEnum.totalTermFreq());\n    postings = termsEnum.postings(null);\n    assertNotNull(postings);\n    assertEquals(0, postings.nextDoc());\n    assertEquals(140, postings.freq());\n    assertEquals(NO_MORE_DOCS, postings.nextDoc());\n\n    assertTrue(termsEnum.seekExact(new BytesRef(\"foo\")));\n    assertEquals(120, termsEnum.totalTermFreq());\n    postings = termsEnum.postings(null);\n    assertNotNull(postings);\n    assertEquals(0, postings.nextDoc());\n    assertEquals(120, postings.freq());\n    assertEquals(NO_MORE_DOCS, postings.nextDoc());\n    \n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomTermFreq#testTermVectors().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermVectors() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n    Document doc = new Document();\n    FieldType fieldType = new FieldType(TextField.TYPE_NOT_STORED);\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    fieldType.setStoreTermVectors(true);\n    Field field = new Field(\"field\",\n                            new CannedTermFreqs(new String[] {\"foo\", \"bar\", \"foo\", \"bar\"},\n                                                new int[] {42, 128, 17, 100}),\n                            fieldType);\n    doc.add(field);\n    w.addDocument(doc);\n\n    doc = new Document();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    field = new Field(\"field\",\n                      new CannedTermFreqs(new String[] {\"foo\", \"bar\", \"foo\", \"bar\"},\n                                          new int[] {50, 60, 70, 80}),\n                      fieldType);\n    doc.add(field);\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n\n    Fields fields = r.getTermVectors(0);\n    TermsEnum termsEnum = fields.terms(\"field\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"bar\")));\n    assertEquals(228, termsEnum.totalTermFreq());\n    PostingsEnum postings = termsEnum.postings(null);\n    assertNotNull(postings);\n    assertEquals(0, postings.nextDoc());\n    assertEquals(228, postings.freq());\n    assertEquals(NO_MORE_DOCS, postings.nextDoc());\n\n    assertTrue(termsEnum.seekExact(new BytesRef(\"foo\")));\n    assertEquals(59, termsEnum.totalTermFreq());\n    postings = termsEnum.postings(null);\n    assertNotNull(postings);\n    assertEquals(0, postings.nextDoc());\n    assertEquals(59, postings.freq());\n    assertEquals(NO_MORE_DOCS, postings.nextDoc());\n\n    fields = r.getTermVectors(1);\n    termsEnum = fields.terms(\"field\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"bar\")));\n    assertEquals(140, termsEnum.totalTermFreq());\n    postings = termsEnum.postings(null);\n    assertNotNull(postings);\n    assertEquals(0, postings.nextDoc());\n    assertEquals(140, postings.freq());\n    assertEquals(NO_MORE_DOCS, postings.nextDoc());\n\n    assertTrue(termsEnum.seekExact(new BytesRef(\"foo\")));\n    assertEquals(120, termsEnum.totalTermFreq());\n    postings = termsEnum.postings(null);\n    assertNotNull(postings);\n    assertEquals(0, postings.nextDoc());\n    assertEquals(120, postings.freq());\n    assertEquals(NO_MORE_DOCS, postings.nextDoc());\n    \n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomTermFreq#testTermVectors().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermVectors() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n    Document doc = new Document();\n    FieldType fieldType = new FieldType(TextField.TYPE_NOT_STORED);\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    fieldType.setStoreTermVectors(true);\n    Field field = new Field(\"field\",\n                            new CannedTermFreqs(new String[] {\"foo\", \"bar\", \"foo\", \"bar\"},\n                                                new int[] {42, 128, 17, 100}),\n                            fieldType);\n    doc.add(field);\n    w.addDocument(doc);\n\n    doc = new Document();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    field = new Field(\"field\",\n                      new CannedTermFreqs(new String[] {\"foo\", \"bar\", \"foo\", \"bar\"},\n                                          new int[] {50, 60, 70, 80}),\n                      fieldType);\n    doc.add(field);\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n\n    Fields fields = r.getTermVectors(0);\n    TermsEnum termsEnum = fields.terms(\"field\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"bar\")));\n    assertEquals(228, termsEnum.totalTermFreq());\n    PostingsEnum postings = termsEnum.postings(null);\n    assertNotNull(postings);\n    assertEquals(0, postings.nextDoc());\n    assertEquals(228, postings.freq());\n    assertEquals(NO_MORE_DOCS, postings.nextDoc());\n\n    assertTrue(termsEnum.seekExact(new BytesRef(\"foo\")));\n    assertEquals(59, termsEnum.totalTermFreq());\n    postings = termsEnum.postings(null);\n    assertNotNull(postings);\n    assertEquals(0, postings.nextDoc());\n    assertEquals(59, postings.freq());\n    assertEquals(NO_MORE_DOCS, postings.nextDoc());\n\n    fields = r.getTermVectors(1);\n    termsEnum = fields.terms(\"field\").iterator();\n    assertTrue(termsEnum.seekExact(new BytesRef(\"bar\")));\n    assertEquals(140, termsEnum.totalTermFreq());\n    postings = termsEnum.postings(null);\n    assertNotNull(postings);\n    assertEquals(0, postings.nextDoc());\n    assertEquals(140, postings.freq());\n    assertEquals(NO_MORE_DOCS, postings.nextDoc());\n\n    assertTrue(termsEnum.seekExact(new BytesRef(\"foo\")));\n    assertEquals(120, termsEnum.totalTermFreq());\n    postings = termsEnum.postings(null);\n    assertNotNull(postings);\n    assertEquals(0, postings.nextDoc());\n    assertEquals(120, postings.freq());\n    assertEquals(NO_MORE_DOCS, postings.nextDoc());\n    \n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e72e3ade782716457071fee4033f18689acc4c4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e72e3ade782716457071fee4033f18689acc4c4f"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"e72e3ade782716457071fee4033f18689acc4c4f":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e72e3ade782716457071fee4033f18689acc4c4f","f344bb33ca91f48e99c061980115b46fa84fc8f5","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}