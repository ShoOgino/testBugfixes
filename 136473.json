{"path":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseExtendedFieldValue(int,SolrInputField).mjava","commits":[{"id":"9440b5b1eec7788a0edd10385e4d7a614d1024d7","date":1528992889,"type":0,"author":"user","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseExtendedFieldValue(int,SolrInputField).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * A method to either extract an index time boost (deprecated), a map for atomic update, or a child document.\n     * firstly, a solr document SolrInputDocument constructed. It is then determined whether the document is indeed a childDocument(if it has a unique field).\n     * If so, it is added.\n     * Otherwise the document is looped over as a map, and is then parsed as an Atomic Update if that is the case.\n     * @param ev json parser event\n     * @param sif input field to add value to.\n     * @throws IOException in case of parsing exception.\n     */\n    private void parseExtendedFieldValue(int ev, SolrInputField sif) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      SolrInputDocument extendedSolrDocument = parseDoc(ev);\n\n      if (isChildDoc(extendedSolrDocument)) {\n        sif.addValue(extendedSolrDocument);\n        return;\n      }\n\n      Object normalFieldValue = null;\n      Map<String, Object> extendedInfo = null;\n\n      for (SolrInputField entry: extendedSolrDocument) {\n        Object val = entry.getValue();\n        String label = entry.getName();\n        if (\"boost\".equals(label)) {\n          Object boostVal = val;\n          if (!(boostVal instanceof Double)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Boost should have number. \"\n                + \"Unexpected value: \" + boostVal.toString() + \"field=\" + label);\n          }\n\n          String message = \"Ignoring field boost: \" + boostVal.toString() + \" as index-time boosts are not supported anymore\";\n          if (WARNED_ABOUT_INDEX_TIME_BOOSTS.compareAndSet(false, true)) {\n            log.warn(message);\n          } else {\n            log.debug(message);\n          }\n        } else if (\"value\".equals(label)) {\n          normalFieldValue = val;\n        } else {\n          // If we encounter other unknown map keys, then use a map\n          if (extendedInfo == null) {\n            extendedInfo = new HashMap<>(2);\n          }\n          // for now, the only extended info will be field values\n          // we could either store this as an Object or a SolrInputField\n          extendedInfo.put(label, val);\n        }\n        if (extendedInfo != null) {\n          if (normalFieldValue != null) {\n            extendedInfo.put(\"value\", normalFieldValue);\n          }\n          sif.setValue(extendedInfo);\n        } else {\n          sif.setValue(normalFieldValue);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseExtendedFieldValue(int,SolrInputField).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * A method to either extract an index time boost (deprecated), a map for atomic update, or a child document.\n     * firstly, a solr document SolrInputDocument constructed. It is then determined whether the document is indeed a childDocument(if it has a unique field).\n     * If so, it is added.\n     * Otherwise the document is looped over as a map, and is then parsed as an Atomic Update if that is the case.\n     * @param ev json parser event\n     * @param sif input field to add value to.\n     * @throws IOException in case of parsing exception.\n     */\n    private void parseExtendedFieldValue(int ev, SolrInputField sif) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      SolrInputDocument extendedSolrDocument = parseDoc(ev);\n\n      if (isChildDoc(extendedSolrDocument)) {\n        sif.addValue(extendedSolrDocument);\n        return;\n      }\n\n      Object normalFieldValue = null;\n      Map<String, Object> extendedInfo = null;\n\n      for (SolrInputField entry: extendedSolrDocument) {\n        Object val = entry.getValue();\n        String label = entry.getName();\n        if (\"boost\".equals(label)) {\n          Object boostVal = val;\n          if (!(boostVal instanceof Double)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Boost should have number. \"\n                + \"Unexpected value: \" + boostVal.toString() + \"field=\" + label);\n          }\n\n          String message = \"Ignoring field boost: \" + boostVal.toString() + \" as index-time boosts are not supported anymore\";\n          if (WARNED_ABOUT_INDEX_TIME_BOOSTS.compareAndSet(false, true)) {\n            log.warn(message);\n          } else {\n            log.debug(message);\n          }\n        } else if (\"value\".equals(label)) {\n          normalFieldValue = val;\n        } else {\n          // If we encounter other unknown map keys, then use a map\n          if (extendedInfo == null) {\n            extendedInfo = new HashMap<>(2);\n          }\n          // for now, the only extended info will be field values\n          // we could either store this as an Object or a SolrInputField\n          extendedInfo.put(label, val);\n        }\n        if (extendedInfo != null) {\n          if (normalFieldValue != null) {\n            extendedInfo.put(\"value\", normalFieldValue);\n          }\n          sif.setValue(extendedInfo);\n        } else {\n          sif.setValue(normalFieldValue);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseExtendedFieldValue(int,SolrInputField).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * A method to either extract an index time boost (deprecated), a map for atomic update, or a child document.\n     * firstly, a solr document SolrInputDocument constructed. It is then determined whether the document is indeed a childDocument(if it has a unique field).\n     * If so, it is added.\n     * Otherwise the document is looped over as a map, and is then parsed as an Atomic Update if that is the case.\n     * @param ev json parser event\n     * @param sif input field to add value to.\n     * @throws IOException in case of parsing exception.\n     */\n    private void parseExtendedFieldValue(int ev, SolrInputField sif) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      SolrInputDocument extendedSolrDocument = parseDoc(ev);\n\n      if (isChildDoc(extendedSolrDocument)) {\n        sif.addValue(extendedSolrDocument);\n        return;\n      }\n\n      Object normalFieldValue = null;\n      Map<String, Object> extendedInfo = null;\n\n      for (SolrInputField entry: extendedSolrDocument) {\n        Object val = entry.getValue();\n        String label = entry.getName();\n        if (\"boost\".equals(label)) {\n          Object boostVal = val;\n          if (!(boostVal instanceof Double)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Boost should have number. \"\n                + \"Unexpected value: \" + boostVal.toString() + \"field=\" + label);\n          }\n\n          String message = \"Ignoring field boost: \" + boostVal.toString() + \" as index-time boosts are not supported anymore\";\n          if (WARNED_ABOUT_INDEX_TIME_BOOSTS.compareAndSet(false, true)) {\n            log.warn(message);\n          } else {\n            log.debug(message);\n          }\n        } else if (\"value\".equals(label)) {\n          normalFieldValue = val;\n        } else {\n          // If we encounter other unknown map keys, then use a map\n          if (extendedInfo == null) {\n            extendedInfo = new HashMap<>(2);\n          }\n          // for now, the only extended info will be field values\n          // we could either store this as an Object or a SolrInputField\n          extendedInfo.put(label, val);\n        }\n        if (extendedInfo != null) {\n          if (normalFieldValue != null) {\n            extendedInfo.put(\"value\", normalFieldValue);\n          }\n          sif.setValue(extendedInfo);\n        } else {\n          sif.setValue(normalFieldValue);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"204f8269a4f7b5b254cc893f7ae9be8405854fcb","date":1545835182,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseExtendedFieldValue(int,SolrInputField).mjava","sourceNew":null,"sourceOld":"    /**\n     * A method to either extract an index time boost (deprecated), a map for atomic update, or a child document.\n     * firstly, a solr document SolrInputDocument constructed. It is then determined whether the document is indeed a childDocument(if it has a unique field).\n     * If so, it is added.\n     * Otherwise the document is looped over as a map, and is then parsed as an Atomic Update if that is the case.\n     * @param ev json parser event\n     * @param sif input field to add value to.\n     * @throws IOException in case of parsing exception.\n     */\n    private void parseExtendedFieldValue(int ev, SolrInputField sif) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      SolrInputDocument extendedSolrDocument = parseDoc(ev);\n\n      if (isChildDoc(extendedSolrDocument)) {\n        sif.addValue(extendedSolrDocument);\n        return;\n      }\n\n      Object normalFieldValue = null;\n      Map<String, Object> extendedInfo = null;\n\n      for (SolrInputField entry: extendedSolrDocument) {\n        Object val = entry.getValue();\n        String label = entry.getName();\n        if (\"boost\".equals(label)) {\n          Object boostVal = val;\n          if (!(boostVal instanceof Double)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Boost should have number. \"\n                + \"Unexpected value: \" + boostVal.toString() + \"field=\" + label);\n          }\n\n          String message = \"Ignoring field boost: \" + boostVal.toString() + \" as index-time boosts are not supported anymore\";\n          if (WARNED_ABOUT_INDEX_TIME_BOOSTS.compareAndSet(false, true)) {\n            log.warn(message);\n          } else {\n            log.debug(message);\n          }\n        } else if (\"value\".equals(label)) {\n          normalFieldValue = val;\n        } else {\n          // If we encounter other unknown map keys, then use a map\n          if (extendedInfo == null) {\n            extendedInfo = new HashMap<>(2);\n          }\n          // for now, the only extended info will be field values\n          // we could either store this as an Object or a SolrInputField\n          extendedInfo.put(label, val);\n        }\n        if (extendedInfo != null) {\n          if (normalFieldValue != null) {\n            extendedInfo.put(\"value\", normalFieldValue);\n          }\n          sif.setValue(extendedInfo);\n        } else {\n          sif.setValue(normalFieldValue);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9440b5b1eec7788a0edd10385e4d7a614d1024d7"],"204f8269a4f7b5b254cc893f7ae9be8405854fcb":["9440b5b1eec7788a0edd10385e4d7a614d1024d7"],"9440b5b1eec7788a0edd10385e4d7a614d1024d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["204f8269a4f7b5b254cc893f7ae9be8405854fcb"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9440b5b1eec7788a0edd10385e4d7a614d1024d7"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"9440b5b1eec7788a0edd10385e4d7a614d1024d7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","204f8269a4f7b5b254cc893f7ae9be8405854fcb","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"204f8269a4f7b5b254cc893f7ae9be8405854fcb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9440b5b1eec7788a0edd10385e4d7a614d1024d7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}