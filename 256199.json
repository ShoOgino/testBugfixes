{"path":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreUrl(CoreContainer,String,String,ClusterState,Collection[Slice],boolean,boolean).mjava","commits":[{"id":"b4047c1dd7f4eddab92dd1de63093ce5ec64a7ac","date":1385324383,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreUrl(CoreContainer,String,String,ClusterState,Collection[Slice],boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private String getCoreUrl(CoreContainer cores, String collectionName,\n      String origCorename, ClusterState clusterState, Collection<Slice> slices,\n      boolean byCoreName, boolean activeReplicas) {\n    String coreUrl;\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Iterator<Slice> it = slices.iterator();\n    while (it.hasNext()) {\n      Slice slice = it.next();\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (!activeReplicas || (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE))) {\n\n          if (byCoreName && !collectionName.equals(coreNodeProps.getCoreName())) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n\n          if (origCorename != null) {\n            coreUrl = coreNodeProps.getBaseUrl() + \"/\" + origCorename;\n          } else {\n            coreUrl = coreNodeProps.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreUrl(CoreContainer,String,String,ClusterState,Collection[Slice],boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private String getCoreUrl(CoreContainer cores, String collectionName,\n      String origCorename, ClusterState clusterState, Collection<Slice> slices,\n      boolean byCoreName, boolean activeReplicas) {\n    String coreUrl;\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Iterator<Slice> it = slices.iterator();\n    while (it.hasNext()) {\n      Slice slice = it.next();\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (!activeReplicas || (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE))) {\n\n          if (byCoreName && !collectionName.equals(coreNodeProps.getCoreName())) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n\n          if (origCorename != null) {\n            coreUrl = coreNodeProps.getBaseUrl() + \"/\" + origCorename;\n          } else {\n            coreUrl = coreNodeProps.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d805d691fbf3ca8aafa5397568ec761790b88622","date":1417093891,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreUrl(CoreContainer,String,String,ClusterState,Collection[Slice],boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreUrl(CoreContainer,String,String,ClusterState,Collection[Slice],boolean,boolean).mjava","sourceNew":"  private String getCoreUrl(CoreContainer cores, String collectionName,\n      String origCorename, ClusterState clusterState, Collection<Slice> slices,\n      boolean byCoreName, boolean activeReplicas) {\n    String coreUrl;\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    for (Slice slice : slices) {\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (!activeReplicas || (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE))) {\n\n          if (byCoreName && !collectionName.equals(coreNodeProps.getCoreName())) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n\n          if (origCorename != null) {\n            coreUrl = coreNodeProps.getBaseUrl() + \"/\" + origCorename;\n          } else {\n            coreUrl = coreNodeProps.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private String getCoreUrl(CoreContainer cores, String collectionName,\n      String origCorename, ClusterState clusterState, Collection<Slice> slices,\n      boolean byCoreName, boolean activeReplicas) {\n    String coreUrl;\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Iterator<Slice> it = slices.iterator();\n    while (it.hasNext()) {\n      Slice slice = it.next();\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (!activeReplicas || (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE))) {\n\n          if (byCoreName && !collectionName.equals(coreNodeProps.getCoreName())) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n\n          if (origCorename != null) {\n            coreUrl = coreNodeProps.getBaseUrl() + \"/\" + origCorename;\n          } else {\n            coreUrl = coreNodeProps.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreUrl(CoreContainer,String,String,ClusterState,Collection[Slice],boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreUrl(CoreContainer,String,String,ClusterState,Collection[Slice],boolean,boolean).mjava","sourceNew":"  private String getCoreUrl(CoreContainer cores, String collectionName,\n      String origCorename, ClusterState clusterState, Collection<Slice> slices,\n      boolean byCoreName, boolean activeReplicas) {\n    String coreUrl;\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    for (Slice slice : slices) {\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (Replica replica : sliceShards.values()) {\n        if (!activeReplicas || (liveNodes.contains(replica.getNodeName())\n            && replica.getState() == Replica.State.ACTIVE)) {\n\n          if (byCoreName && !collectionName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n\n          if (origCorename != null) {\n            coreUrl = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + origCorename;\n          } else {\n            coreUrl = replica.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private String getCoreUrl(CoreContainer cores, String collectionName,\n      String origCorename, ClusterState clusterState, Collection<Slice> slices,\n      boolean byCoreName, boolean activeReplicas) {\n    String coreUrl;\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    for (Slice slice : slices) {\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (!activeReplicas || (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE))) {\n\n          if (byCoreName && !collectionName.equals(coreNodeProps.getCoreName())) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n\n          if (origCorename != null) {\n            coreUrl = coreNodeProps.getBaseUrl() + \"/\" + origCorename;\n          } else {\n            coreUrl = coreNodeProps.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a760e2135dfe20a04dea360873d4de1c6a0280bb","date":1430762855,"type":5,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreUrl(String,String,ClusterState,Collection[Slice],boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreUrl(CoreContainer,String,String,ClusterState,Collection[Slice],boolean,boolean).mjava","sourceNew":"  private String getCoreUrl(String collectionName,\n                            String origCorename, ClusterState clusterState, Collection<Slice> slices,\n                            boolean byCoreName, boolean activeReplicas) {\n    String coreUrl;\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    for (Slice slice : slices) {\n      Map<String, Replica> sliceShards = slice.getReplicasMap();\n      for (Replica replica : sliceShards.values()) {\n        if (!activeReplicas || (liveNodes.contains(replica.getNodeName())\n            && replica.getState() == Replica.State.ACTIVE)) {\n\n          if (byCoreName && !collectionName.equals(replica.getStr(CORE_NAME_PROP))) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (replica.getStr(BASE_URL_PROP).equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n\n          if (origCorename != null) {\n            coreUrl = replica.getStr(BASE_URL_PROP) + \"/\" + origCorename;\n          } else {\n            coreUrl = replica.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private String getCoreUrl(CoreContainer cores, String collectionName,\n      String origCorename, ClusterState clusterState, Collection<Slice> slices,\n      boolean byCoreName, boolean activeReplicas) {\n    String coreUrl;\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    for (Slice slice : slices) {\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (Replica replica : sliceShards.values()) {\n        if (!activeReplicas || (liveNodes.contains(replica.getNodeName())\n            && replica.getState() == Replica.State.ACTIVE)) {\n\n          if (byCoreName && !collectionName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n\n          if (origCorename != null) {\n            coreUrl = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + origCorename;\n          } else {\n            coreUrl = replica.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["d805d691fbf3ca8aafa5397568ec761790b88622"],"b4047c1dd7f4eddab92dd1de63093ce5ec64a7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d805d691fbf3ca8aafa5397568ec761790b88622":["b4047c1dd7f4eddab92dd1de63093ce5ec64a7ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b4047c1dd7f4eddab92dd1de63093ce5ec64a7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a760e2135dfe20a04dea360873d4de1c6a0280bb"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"b4047c1dd7f4eddab92dd1de63093ce5ec64a7ac":["d805d691fbf3ca8aafa5397568ec761790b88622","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"d805d691fbf3ca8aafa5397568ec761790b88622":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4047c1dd7f4eddab92dd1de63093ce5ec64a7ac","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}