{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testOverwriteOption().mjava","commits":[{"id":"13a60d5cca07cbecc52e08e57ae3416a59b3dfe8","date":1420760947,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testOverwriteOption().mjava","pathOld":"/dev/null","sourceNew":"  private void testOverwriteOption() throws Exception, SolrServerException,\n      IOException {\n    String collectionName = \"overwriteCollection\";\n    createCollection(collectionName, controlClientCloud, 1, 1);\n    waitForRecoveriesToFinish(collectionName, false);\n    CloudSolrClient cloudClient = createCloudClient(collectionName);\n    try {\n      SolrInputDocument doc1 = new SolrInputDocument();\n      doc1.addField(id, \"0\");\n      doc1.addField(\"a_t\", \"hello1\");\n      SolrInputDocument doc2 = new SolrInputDocument();\n      doc2.addField(id, \"0\");\n      doc2.addField(\"a_t\", \"hello2\");\n      \n      UpdateRequest request = new UpdateRequest();\n      request.add(doc1);\n      request.add(doc2);\n      request.setAction(AbstractUpdateRequest.ACTION.COMMIT, false, false);\n      NamedList<Object> response = cloudClient.request(request);\n      QueryResponse resp = cloudClient.query(new SolrQuery(\"*:*\"));\n      \n      assertEquals(\"There should be one document because overwrite=true\", 1, resp.getResults().getNumFound());\n      \n      doc1 = new SolrInputDocument();\n      doc1.addField(id, \"1\");\n      doc1.addField(\"a_t\", \"hello1\");\n      doc2 = new SolrInputDocument();\n      doc2.addField(id, \"1\");\n      doc2.addField(\"a_t\", \"hello2\");\n      \n      request = new UpdateRequest();\n      // overwrite=false\n      request.add(doc1, false);\n      request.add(doc2, false);\n      request.setAction(AbstractUpdateRequest.ACTION.COMMIT, false, false);\n      response = cloudClient.request(request);\n      \n      resp = cloudClient.query(new SolrQuery(\"*:*\"));\n\n      assertEquals(\"There should be 3 documents because there should be two id=1 docs due to overwrite=false\", 3, resp.getResults().getNumFound());\n    } finally {\n      cloudClient.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testOverwriteOption().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testOverwriteOption().mjava","sourceNew":"  private void testOverwriteOption() throws Exception, SolrServerException,\n      IOException {\n    String collectionName = \"overwriteCollection\";\n    createCollection(collectionName, controlClientCloud, 1, 1);\n    waitForRecoveriesToFinish(collectionName, false);\n    try (CloudSolrClient cloudClient = createCloudClient(collectionName)) {\n      SolrInputDocument doc1 = new SolrInputDocument();\n      doc1.addField(id, \"0\");\n      doc1.addField(\"a_t\", \"hello1\");\n      SolrInputDocument doc2 = new SolrInputDocument();\n      doc2.addField(id, \"0\");\n      doc2.addField(\"a_t\", \"hello2\");\n      \n      UpdateRequest request = new UpdateRequest();\n      request.add(doc1);\n      request.add(doc2);\n      request.setAction(AbstractUpdateRequest.ACTION.COMMIT, false, false);\n      NamedList<Object> response = cloudClient.request(request);\n      QueryResponse resp = cloudClient.query(new SolrQuery(\"*:*\"));\n      \n      assertEquals(\"There should be one document because overwrite=true\", 1, resp.getResults().getNumFound());\n      \n      doc1 = new SolrInputDocument();\n      doc1.addField(id, \"1\");\n      doc1.addField(\"a_t\", \"hello1\");\n      doc2 = new SolrInputDocument();\n      doc2.addField(id, \"1\");\n      doc2.addField(\"a_t\", \"hello2\");\n      \n      request = new UpdateRequest();\n      // overwrite=false\n      request.add(doc1, false);\n      request.add(doc2, false);\n      request.setAction(AbstractUpdateRequest.ACTION.COMMIT, false, false);\n      response = cloudClient.request(request);\n      \n      resp = cloudClient.query(new SolrQuery(\"*:*\"));\n\n      assertEquals(\"There should be 3 documents because there should be two id=1 docs due to overwrite=false\", 3, resp.getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void testOverwriteOption() throws Exception, SolrServerException,\n      IOException {\n    String collectionName = \"overwriteCollection\";\n    createCollection(collectionName, controlClientCloud, 1, 1);\n    waitForRecoveriesToFinish(collectionName, false);\n    CloudSolrClient cloudClient = createCloudClient(collectionName);\n    try {\n      SolrInputDocument doc1 = new SolrInputDocument();\n      doc1.addField(id, \"0\");\n      doc1.addField(\"a_t\", \"hello1\");\n      SolrInputDocument doc2 = new SolrInputDocument();\n      doc2.addField(id, \"0\");\n      doc2.addField(\"a_t\", \"hello2\");\n      \n      UpdateRequest request = new UpdateRequest();\n      request.add(doc1);\n      request.add(doc2);\n      request.setAction(AbstractUpdateRequest.ACTION.COMMIT, false, false);\n      NamedList<Object> response = cloudClient.request(request);\n      QueryResponse resp = cloudClient.query(new SolrQuery(\"*:*\"));\n      \n      assertEquals(\"There should be one document because overwrite=true\", 1, resp.getResults().getNumFound());\n      \n      doc1 = new SolrInputDocument();\n      doc1.addField(id, \"1\");\n      doc1.addField(\"a_t\", \"hello1\");\n      doc2 = new SolrInputDocument();\n      doc2.addField(id, \"1\");\n      doc2.addField(\"a_t\", \"hello2\");\n      \n      request = new UpdateRequest();\n      // overwrite=false\n      request.add(doc1, false);\n      request.add(doc2, false);\n      request.setAction(AbstractUpdateRequest.ACTION.COMMIT, false, false);\n      response = cloudClient.request(request);\n      \n      resp = cloudClient.query(new SolrQuery(\"*:*\"));\n\n      assertEquals(\"There should be 3 documents because there should be two id=1 docs due to overwrite=false\", 3, resp.getResults().getNumFound());\n    } finally {\n      cloudClient.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testOverwriteOption().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testOverwriteOption().mjava","sourceNew":"  @Test\n  public void testOverwriteOption() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"overwrite\", \"conf\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"overwrite\", cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(\"id\", \"0\", \"a_t\", \"hello1\")\n        .add(\"id\", \"0\", \"a_t\", \"hello2\")\n        .commit(cluster.getSolrClient(), \"overwrite\");\n\n    QueryResponse resp = cluster.getSolrClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 1, resp.getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello1\"), /* overwrite = */ false)\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello2\"), false)\n        .commit(cluster.getSolrClient(), \"overwrite\");\n      \n    resp = cluster.getSolrClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be 3 documents because there should be two id=1 docs due to overwrite=false\", 3, resp.getResults().getNumFound());\n\n  }\n\n","sourceOld":"  private void testOverwriteOption() throws Exception, SolrServerException,\n      IOException {\n    String collectionName = \"overwriteCollection\";\n    createCollection(collectionName, controlClientCloud, 1, 1);\n    waitForRecoveriesToFinish(collectionName, false);\n    try (CloudSolrClient cloudClient = createCloudClient(collectionName)) {\n      SolrInputDocument doc1 = new SolrInputDocument();\n      doc1.addField(id, \"0\");\n      doc1.addField(\"a_t\", \"hello1\");\n      SolrInputDocument doc2 = new SolrInputDocument();\n      doc2.addField(id, \"0\");\n      doc2.addField(\"a_t\", \"hello2\");\n      \n      UpdateRequest request = new UpdateRequest();\n      request.add(doc1);\n      request.add(doc2);\n      request.setAction(AbstractUpdateRequest.ACTION.COMMIT, false, false);\n      NamedList<Object> response = cloudClient.request(request);\n      QueryResponse resp = cloudClient.query(new SolrQuery(\"*:*\"));\n      \n      assertEquals(\"There should be one document because overwrite=true\", 1, resp.getResults().getNumFound());\n      \n      doc1 = new SolrInputDocument();\n      doc1.addField(id, \"1\");\n      doc1.addField(\"a_t\", \"hello1\");\n      doc2 = new SolrInputDocument();\n      doc2.addField(id, \"1\");\n      doc2.addField(\"a_t\", \"hello2\");\n      \n      request = new UpdateRequest();\n      // overwrite=false\n      request.add(doc1, false);\n      request.add(doc2, false);\n      request.setAction(AbstractUpdateRequest.ACTION.COMMIT, false, false);\n      response = cloudClient.request(request);\n      \n      resp = cloudClient.query(new SolrQuery(\"*:*\"));\n\n      assertEquals(\"There should be 3 documents because there should be two id=1 docs due to overwrite=false\", 3, resp.getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testOverwriteOption().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testOverwriteOption().mjava","sourceNew":"  @Test\n  public void testOverwriteOption() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"overwrite\", \"conf\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"overwrite\", cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(\"id\", \"0\", \"a_t\", \"hello1\")\n        .add(\"id\", \"0\", \"a_t\", \"hello2\")\n        .commit(cluster.getSolrClient(), \"overwrite\");\n\n    QueryResponse resp = cluster.getSolrClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 1, resp.getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello1\"), /* overwrite = */ false)\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello2\"), false)\n        .commit(cluster.getSolrClient(), \"overwrite\");\n      \n    resp = cluster.getSolrClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be 3 documents because there should be two id=1 docs due to overwrite=false\", 3, resp.getResults().getNumFound());\n\n  }\n\n","sourceOld":"  private void testOverwriteOption() throws Exception, SolrServerException,\n      IOException {\n    String collectionName = \"overwriteCollection\";\n    createCollection(collectionName, controlClientCloud, 1, 1);\n    waitForRecoveriesToFinish(collectionName, false);\n    try (CloudSolrClient cloudClient = createCloudClient(collectionName)) {\n      SolrInputDocument doc1 = new SolrInputDocument();\n      doc1.addField(id, \"0\");\n      doc1.addField(\"a_t\", \"hello1\");\n      SolrInputDocument doc2 = new SolrInputDocument();\n      doc2.addField(id, \"0\");\n      doc2.addField(\"a_t\", \"hello2\");\n      \n      UpdateRequest request = new UpdateRequest();\n      request.add(doc1);\n      request.add(doc2);\n      request.setAction(AbstractUpdateRequest.ACTION.COMMIT, false, false);\n      NamedList<Object> response = cloudClient.request(request);\n      QueryResponse resp = cloudClient.query(new SolrQuery(\"*:*\"));\n      \n      assertEquals(\"There should be one document because overwrite=true\", 1, resp.getResults().getNumFound());\n      \n      doc1 = new SolrInputDocument();\n      doc1.addField(id, \"1\");\n      doc1.addField(\"a_t\", \"hello1\");\n      doc2 = new SolrInputDocument();\n      doc2.addField(id, \"1\");\n      doc2.addField(\"a_t\", \"hello2\");\n      \n      request = new UpdateRequest();\n      // overwrite=false\n      request.add(doc1, false);\n      request.add(doc2, false);\n      request.setAction(AbstractUpdateRequest.ACTION.COMMIT, false, false);\n      response = cloudClient.request(request);\n      \n      resp = cloudClient.query(new SolrQuery(\"*:*\"));\n\n      assertEquals(\"There should be 3 documents because there should be two id=1 docs due to overwrite=false\", 3, resp.getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testOverwriteOption().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testOverwriteOption().mjava","sourceNew":"  @Test\n  public void testOverwriteOption() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"overwrite\", \"conf\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"overwrite\", cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(\"id\", \"0\", \"a_t\", \"hello1\")\n        .add(\"id\", \"0\", \"a_t\", \"hello2\")\n        .commit(cluster.getSolrClient(), \"overwrite\");\n\n    QueryResponse resp = cluster.getSolrClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 1, resp.getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello1\"), /* overwrite = */ false)\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello2\"), false)\n        .commit(cluster.getSolrClient(), \"overwrite\");\n      \n    resp = cluster.getSolrClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be 3 documents because there should be two id=1 docs due to overwrite=false\", 3, resp.getResults().getNumFound());\n\n  }\n\n","sourceOld":"  private void testOverwriteOption() throws Exception, SolrServerException,\n      IOException {\n    String collectionName = \"overwriteCollection\";\n    createCollection(collectionName, controlClientCloud, 1, 1);\n    waitForRecoveriesToFinish(collectionName, false);\n    try (CloudSolrClient cloudClient = createCloudClient(collectionName)) {\n      SolrInputDocument doc1 = new SolrInputDocument();\n      doc1.addField(id, \"0\");\n      doc1.addField(\"a_t\", \"hello1\");\n      SolrInputDocument doc2 = new SolrInputDocument();\n      doc2.addField(id, \"0\");\n      doc2.addField(\"a_t\", \"hello2\");\n      \n      UpdateRequest request = new UpdateRequest();\n      request.add(doc1);\n      request.add(doc2);\n      request.setAction(AbstractUpdateRequest.ACTION.COMMIT, false, false);\n      NamedList<Object> response = cloudClient.request(request);\n      QueryResponse resp = cloudClient.query(new SolrQuery(\"*:*\"));\n      \n      assertEquals(\"There should be one document because overwrite=true\", 1, resp.getResults().getNumFound());\n      \n      doc1 = new SolrInputDocument();\n      doc1.addField(id, \"1\");\n      doc1.addField(\"a_t\", \"hello1\");\n      doc2 = new SolrInputDocument();\n      doc2.addField(id, \"1\");\n      doc2.addField(\"a_t\", \"hello2\");\n      \n      request = new UpdateRequest();\n      // overwrite=false\n      request.add(doc1, false);\n      request.add(doc2, false);\n      request.setAction(AbstractUpdateRequest.ACTION.COMMIT, false, false);\n      response = cloudClient.request(request);\n      \n      resp = cloudClient.query(new SolrQuery(\"*:*\"));\n\n      assertEquals(\"There should be 3 documents because there should be two id=1 docs due to overwrite=false\", 3, resp.getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testOverwriteOption().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testOverwriteOption().mjava","sourceNew":"  @Test\n  public void testOverwriteOption() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"overwrite\", \"conf\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"overwrite\", cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(\"id\", \"0\", \"a_t\", \"hello1\")\n        .add(\"id\", \"0\", \"a_t\", \"hello2\")\n        .commit(cluster.getSolrClient(), \"overwrite\");\n\n    QueryResponse resp = cluster.getSolrClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 1, resp.getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello1\"), /* overwrite = */ false)\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello2\"), false)\n        .commit(cluster.getSolrClient(), \"overwrite\");\n      \n    resp = cluster.getSolrClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be 3 documents because there should be two id=1 docs due to overwrite=false\", 3, resp.getResults().getNumFound());\n\n  }\n\n","sourceOld":"  private void testOverwriteOption() throws Exception, SolrServerException,\n      IOException {\n    String collectionName = \"overwriteCollection\";\n    createCollection(collectionName, controlClientCloud, 1, 1);\n    waitForRecoveriesToFinish(collectionName, false);\n    try (CloudSolrClient cloudClient = createCloudClient(collectionName)) {\n      SolrInputDocument doc1 = new SolrInputDocument();\n      doc1.addField(id, \"0\");\n      doc1.addField(\"a_t\", \"hello1\");\n      SolrInputDocument doc2 = new SolrInputDocument();\n      doc2.addField(id, \"0\");\n      doc2.addField(\"a_t\", \"hello2\");\n      \n      UpdateRequest request = new UpdateRequest();\n      request.add(doc1);\n      request.add(doc2);\n      request.setAction(AbstractUpdateRequest.ACTION.COMMIT, false, false);\n      NamedList<Object> response = cloudClient.request(request);\n      QueryResponse resp = cloudClient.query(new SolrQuery(\"*:*\"));\n      \n      assertEquals(\"There should be one document because overwrite=true\", 1, resp.getResults().getNumFound());\n      \n      doc1 = new SolrInputDocument();\n      doc1.addField(id, \"1\");\n      doc1.addField(\"a_t\", \"hello1\");\n      doc2 = new SolrInputDocument();\n      doc2.addField(id, \"1\");\n      doc2.addField(\"a_t\", \"hello2\");\n      \n      request = new UpdateRequest();\n      // overwrite=false\n      request.add(doc1, false);\n      request.add(doc2, false);\n      request.setAction(AbstractUpdateRequest.ACTION.COMMIT, false, false);\n      response = cloudClient.request(request);\n      \n      resp = cloudClient.query(new SolrQuery(\"*:*\"));\n\n      assertEquals(\"There should be 3 documents because there should be two id=1 docs due to overwrite=false\", 3, resp.getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a64b273d51a6540272668680ece9f8b686ff0004","date":1492404078,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testOverwriteOption().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testOverwriteOption().mjava","sourceNew":"  @Test\n  public void testOverwriteOption() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"overwrite\", \"conf\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"overwrite\", cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(\"id\", \"0\", \"a_t\", \"hello1\")\n        .add(\"id\", \"0\", \"a_t\", \"hello2\")\n        .commit(cluster.getSolrClient(), \"overwrite\");\n\n    QueryResponse resp = cluster.getSolrClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 1, resp.getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello1\"), /* overwrite = */ false)\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello2\"), false)\n        .commit(cluster.getSolrClient(), \"overwrite\");\n      \n    resp = getRandomClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be 3 documents because there should be two id=1 docs due to overwrite=false\", 3, resp.getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  public void testOverwriteOption() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"overwrite\", \"conf\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"overwrite\", cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(\"id\", \"0\", \"a_t\", \"hello1\")\n        .add(\"id\", \"0\", \"a_t\", \"hello2\")\n        .commit(cluster.getSolrClient(), \"overwrite\");\n\n    QueryResponse resp = cluster.getSolrClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 1, resp.getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello1\"), /* overwrite = */ false)\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello2\"), false)\n        .commit(cluster.getSolrClient(), \"overwrite\");\n      \n    resp = cluster.getSolrClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be 3 documents because there should be two id=1 docs due to overwrite=false\", 3, resp.getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testOverwriteOption().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testOverwriteOption().mjava","sourceNew":"  @Test\n  public void testOverwriteOption() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"overwrite\", \"conf\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"overwrite\", cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(\"id\", \"0\", \"a_t\", \"hello1\")\n        .add(\"id\", \"0\", \"a_t\", \"hello2\")\n        .commit(cluster.getSolrClient(), \"overwrite\");\n\n    QueryResponse resp = cluster.getSolrClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 1, resp.getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello1\"), /* overwrite = */ false)\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello2\"), false)\n        .commit(cluster.getSolrClient(), \"overwrite\");\n      \n    resp = getRandomClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be 3 documents because there should be two id=1 docs due to overwrite=false\", 3, resp.getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  public void testOverwriteOption() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"overwrite\", \"conf\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"overwrite\", cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(\"id\", \"0\", \"a_t\", \"hello1\")\n        .add(\"id\", \"0\", \"a_t\", \"hello2\")\n        .commit(cluster.getSolrClient(), \"overwrite\");\n\n    QueryResponse resp = cluster.getSolrClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 1, resp.getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello1\"), /* overwrite = */ false)\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello2\"), false)\n        .commit(cluster.getSolrClient(), \"overwrite\");\n      \n    resp = cluster.getSolrClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be 3 documents because there should be two id=1 docs due to overwrite=false\", 3, resp.getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testOverwriteOption().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testOverwriteOption().mjava","sourceNew":"  @Test\n  public void testOverwriteOption() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"overwrite\", \"conf\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(\"overwrite\", 1, 1);\n    \n    new UpdateRequest()\n        .add(\"id\", \"0\", \"a_t\", \"hello1\")\n        .add(\"id\", \"0\", \"a_t\", \"hello2\")\n        .commit(cluster.getSolrClient(), \"overwrite\");\n\n    QueryResponse resp = cluster.getSolrClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 1, resp.getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello1\"), /* overwrite = */ false)\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello2\"), false)\n        .commit(cluster.getSolrClient(), \"overwrite\");\n      \n    resp = getRandomClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be 3 documents because there should be two id=1 docs due to overwrite=false\", 3, resp.getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  public void testOverwriteOption() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"overwrite\", \"conf\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"overwrite\", cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(\"id\", \"0\", \"a_t\", \"hello1\")\n        .add(\"id\", \"0\", \"a_t\", \"hello2\")\n        .commit(cluster.getSolrClient(), \"overwrite\");\n\n    QueryResponse resp = cluster.getSolrClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 1, resp.getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello1\"), /* overwrite = */ false)\n        .add(new SolrInputDocument(id, \"1\", \"a_t\", \"hello2\"), false)\n        .commit(cluster.getSolrClient(), \"overwrite\");\n      \n    resp = getRandomClient().query(\"overwrite\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be 3 documents because there should be two id=1 docs due to overwrite=false\", 3, resp.getResults().getNumFound());\n\n  }\n\n","bugFix":["b940572a59da1b42b6c20ab5278155b12816807a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["73450c0955930295d34703e7ddbfc6973b7a121a"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["cc3b13b430571c2e169f98fe38e1e7666f88522d","b940572a59da1b42b6c20ab5278155b12816807a"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a64b273d51a6540272668680ece9f8b686ff0004"],"a64b273d51a6540272668680ece9f8b686ff0004":["73450c0955930295d34703e7ddbfc6973b7a121a"],"73450c0955930295d34703e7ddbfc6973b7a121a":["cc3b13b430571c2e169f98fe38e1e7666f88522d","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["cc3b13b430571c2e169f98fe38e1e7666f88522d","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13a60d5cca07cbecc52e08e57ae3416a59b3dfe8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["13a60d5cca07cbecc52e08e57ae3416a59b3dfe8"],"b940572a59da1b42b6c20ab5278155b12816807a":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":[],"73450c0955930295d34703e7ddbfc6973b7a121a":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a64b273d51a6540272668680ece9f8b686ff0004","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a64b273d51a6540272668680ece9f8b686ff0004":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["13a60d5cca07cbecc52e08e57ae3416a59b3dfe8"],"13a60d5cca07cbecc52e08e57ae3416a59b3dfe8":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","b940572a59da1b42b6c20ab5278155b12816807a"],"b940572a59da1b42b6c20ab5278155b12816807a":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}