{"path":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,IndexReader).mjava","sourceNew":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  an {@link OpenBitSetDISI}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, IndexReader reader) throws IOException {\n    if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      return (it == null) ? DocIdSet.EMPTY_DOCIDSET : new OpenBitSetDISI(it, reader.maxDoc());\n    }\n  }\n\n","sourceOld":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  an {@link OpenBitSetDISI}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, IndexReader reader) throws IOException {\n    if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      return (it == null) ? DocIdSet.EMPTY_DOCIDSET : new OpenBitSetDISI(it, reader.maxDoc());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"015578b2606eda0c576fd95beaea23e52b32da88","date":1274882272,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,IndexReader).mjava","sourceNew":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  an {@link OpenBitSetDISI}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, IndexReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      return (it == null) ? DocIdSet.EMPTY_DOCIDSET : new OpenBitSetDISI(it, reader.maxDoc());\n    }\n  }\n\n","sourceOld":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  an {@link OpenBitSetDISI}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, IndexReader reader) throws IOException {\n    if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      return (it == null) ? DocIdSet.EMPTY_DOCIDSET : new OpenBitSetDISI(it, reader.maxDoc());\n    }\n  }\n\n","bugFix":["3a0b8ae4ac997de7adea27f34c380588fa28d646"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,IndexReader).mjava","sourceNew":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  an {@link FixedBitSet}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, IndexReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      if (it == null) {\n        return DocIdSet.EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return bits;\n      }\n    }\n  }\n\n","sourceOld":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  an {@link OpenBitSetDISI}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, IndexReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      return (it == null) ? DocIdSet.EMPTY_DOCIDSET : new OpenBitSetDISI(it, reader.maxDoc());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7d9cdceb051035b069ec36719809d0cd837777b","date":1323905856,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,IndexReader).mjava","sourceNew":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  a {@link FixedBitSet}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, IndexReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      if (it == null) {\n        return DocIdSet.EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return bits;\n      }\n    }\n  }\n\n","sourceOld":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  an {@link FixedBitSet}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, IndexReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      if (it == null) {\n        return DocIdSet.EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return bits;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicIndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,IndexReader).mjava","sourceNew":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  a {@link FixedBitSet}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicIndexReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      if (it == null) {\n        return DocIdSet.EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return bits;\n      }\n    }\n  }\n\n","sourceOld":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  a {@link FixedBitSet}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, IndexReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      if (it == null) {\n        return DocIdSet.EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return bits;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,IndexReader).mjava","sourceNew":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  a {@link FixedBitSet}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      if (it == null) {\n        return DocIdSet.EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return bits;\n      }\n    }\n  }\n\n","sourceOld":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  a {@link FixedBitSet}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, IndexReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      if (it == null) {\n        return DocIdSet.EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return bits;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"015578b2606eda0c576fd95beaea23e52b32da88":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7d9cdceb051035b069ec36719809d0cd837777b":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["015578b2606eda0c576fd95beaea23e52b32da88"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b7d9cdceb051035b069ec36719809d0cd837777b","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["b7d9cdceb051035b069ec36719809d0cd837777b"]},"commit2Childs":{"015578b2606eda0c576fd95beaea23e52b32da88":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b7d9cdceb051035b069ec36719809d0cd837777b":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["b7d9cdceb051035b069ec36719809d0cd837777b"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["015578b2606eda0c576fd95beaea23e52b32da88"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}