{"path":"lucene/core/src/java/org/apache/lucene/util/BitUtil#nextBitSet(long[],int,int).mjava","commits":[{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BitUtil#nextBitSet(long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the index of the next bit set following the given bit zero-based index.\n   * <br>For example with bits 100011:\n   * the next bit set after index=-1 is at index=0;\n   * the next bit set after index=0 is at index=1;\n   * the next bit set after index=1 is at index=5;\n   * there is no next bit set after index=5.\n   *\n   * @param bits     The bits stored in an array of long for efficiency.\n   * @param numLongs The number of longs in {@code bits} to consider.\n   * @param bitIndex The bit zero-based index. It must be greater than or equal to -1,\n   *                 and strictly less than {@code numLongs * Long.SIZE}.\n   * @return The zero-based index of the next bit set after the provided {@code bitIndex};\n   * or -1 if none.\n   */\n  public static int nextBitSet(long[] bits, int numLongs, int bitIndex) {\n    assert numLongs >= 0 && numLongs <= bits.length && bitIndex >= -1 && bitIndex < numLongs * Long.SIZE\n        : \"bitIndex=\" + bitIndex + \" numLongs=\" + numLongs + \" bits.length=\" + bits.length;\n    int longIndex = bitIndex / Long.SIZE;\n    // Prepare a mask with 1s on the left down to bitIndex exclusive.\n    long mask = -(1L << (bitIndex + 1)); // Shifts are mod 64.\n    long l = mask == -1 && bitIndex != -1 ? 0 : bits[longIndex] & mask;\n    while (l == 0) {\n      if (++longIndex == numLongs) {\n        return -1;\n      }\n      l = bits[longIndex];\n    }\n    return Long.numberOfTrailingZeros(l) + longIndex * 64;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06086b5bd0f0d57858f0675becc58edf1f6b7c11","date":1586421397,"type":4,"author":"Bruno Roustant","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/BitUtil#nextBitSet(long[],int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the index of the next bit set following the given bit zero-based index.\n   * <br>For example with bits 100011:\n   * the next bit set after index=-1 is at index=0;\n   * the next bit set after index=0 is at index=1;\n   * the next bit set after index=1 is at index=5;\n   * there is no next bit set after index=5.\n   *\n   * @param bits     The bits stored in an array of long for efficiency.\n   * @param numLongs The number of longs in {@code bits} to consider.\n   * @param bitIndex The bit zero-based index. It must be greater than or equal to -1,\n   *                 and strictly less than {@code numLongs * Long.SIZE}.\n   * @return The zero-based index of the next bit set after the provided {@code bitIndex};\n   * or -1 if none.\n   */\n  public static int nextBitSet(long[] bits, int numLongs, int bitIndex) {\n    assert numLongs >= 0 && numLongs <= bits.length && bitIndex >= -1 && bitIndex < numLongs * Long.SIZE\n        : \"bitIndex=\" + bitIndex + \" numLongs=\" + numLongs + \" bits.length=\" + bits.length;\n    int longIndex = bitIndex / Long.SIZE;\n    // Prepare a mask with 1s on the left down to bitIndex exclusive.\n    long mask = -(1L << (bitIndex + 1)); // Shifts are mod 64.\n    long l = mask == -1 && bitIndex != -1 ? 0 : bits[longIndex] & mask;\n    while (l == 0) {\n      if (++longIndex == numLongs) {\n        return -1;\n      }\n      l = bits[longIndex];\n    }\n    return Long.numberOfTrailingZeros(l) + longIndex * 64;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["71d31a7d5773508492505519bb5230b87c8937ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71d31a7d5773508492505519bb5230b87c8937ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"]},"commit2Childs":{"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71d31a7d5773508492505519bb5230b87c8937ad"],"71d31a7d5773508492505519bb5230b87c8937ad":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}