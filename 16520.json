{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newStaticRandom(Class[#-extends-LuceneTestCaseJ4],long).mjava","commits":[{"id":"e00fbdf64cf75e7fbee5ab71742d7b6191356b8a","date":1279455916,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newStaticRandom(Class[#-extends-LuceneTestCaseJ4],long).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newStaticRandom(Class[#],long).mjava","sourceNew":"  /**\n   * Returns a {@link Random} instance for generating random numbers from a beforeclass\n   * annotated method.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public static Random newStaticRandom(Class<? extends LuceneTestCaseJ4> clazz, long seed) {\n    staticSeeds.put(clazz, Long.valueOf(seed));\n    return new Random(seed);\n  }\n\n","sourceOld":"  /**\n   * Returns a {@link Random} instance for generating random numbers from a beforeclass\n   * annotated method.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public static Random newStaticRandom(Class<?> clazz, long seed) {\n    staticSeeds.put(clazz, Long.valueOf(seed));\n    return new Random(seed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newStaticRandom(Class[#-extends-LuceneTestCaseJ4],long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a {@link Random} instance for generating random numbers from a beforeclass\n   * annotated method.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public static Random newStaticRandom(Class<? extends LuceneTestCaseJ4> clazz, long seed) {\n    staticSeeds.put(clazz, Long.valueOf(seed));\n    return new Random(seed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee2d29b7102b7a68e60fc2947f781371c718af4f","date":1279889245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newStaticRandom(Class[#-extends-LuceneTestCaseJ4],long).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newStaticRandom(Class[#-extends-LuceneTestCaseJ4],long).mjava","sourceNew":"  /**\n   * Returns a {@link Random} instance for generating random numbers from a beforeclass\n   * annotated method.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public static Random newStaticRandom(Class<? extends LuceneTestCaseJ4> clazz, long seed) {\n    staticSeeds.put(clazz, Long.valueOf(seed));\n    System.out.println(\"WARNING: random static seed of testclass '\" + clazz + \"' is fixed to: \" + seed);\n    return new Random(seed);\n  }\n\n","sourceOld":"  /**\n   * Returns a {@link Random} instance for generating random numbers from a beforeclass\n   * annotated method.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public static Random newStaticRandom(Class<? extends LuceneTestCaseJ4> clazz, long seed) {\n    staticSeeds.put(clazz, Long.valueOf(seed));\n    return new Random(seed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7f814567907094310b7ce1535a68437e43b28ea","date":1279952745,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newStaticRandom(Class[#-extends-LuceneTestCaseJ4],long).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newStaticRandom(Class[#-extends-LuceneTestCaseJ4],long).mjava","sourceNew":"  /**\n   * Returns a {@link Random} instance for generating random numbers from a beforeclass\n   * annotated method.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public static Random newStaticRandom(Class<? extends LuceneTestCaseJ4> clazz, long seed) {\n    staticSeeds.put(clazz, Long.valueOf(seed));\n    System.out.println(\"WARNING: random static seed of testclass '\" + clazz + \"' is fixed to: \" + seed);\n    return new Random(seed);\n  }\n\n","sourceOld":"  /**\n   * Returns a {@link Random} instance for generating random numbers from a beforeclass\n   * annotated method.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public static Random newStaticRandom(Class<? extends LuceneTestCaseJ4> clazz, long seed) {\n    staticSeeds.put(clazz, Long.valueOf(seed));\n    return new Random(seed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newStaticRandom(Class[#-extends-LuceneTestCase],long).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newStaticRandom(Class[#-extends-LuceneTestCaseJ4],long).mjava","sourceNew":"  /**\n   * Returns a {@link Random} instance for generating random numbers from a beforeclass\n   * annotated method.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public static Random newStaticRandom(Class<? extends LuceneTestCase> clazz, long seed) {\n    staticSeeds.put(clazz, Long.valueOf(seed));\n    System.out.println(\"WARNING: random static seed of testclass '\" + clazz + \"' is fixed to: \" + seed);\n    return new Random(seed);\n  }\n\n","sourceOld":"  /**\n   * Returns a {@link Random} instance for generating random numbers from a beforeclass\n   * annotated method.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public static Random newStaticRandom(Class<? extends LuceneTestCaseJ4> clazz, long seed) {\n    staticSeeds.put(clazz, Long.valueOf(seed));\n    System.out.println(\"WARNING: random static seed of testclass '\" + clazz + \"' is fixed to: \" + seed);\n    return new Random(seed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ca38aecd0204be91049ec782668f642a68d9935","date":1292975343,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newStaticRandom(Class[#-extends-LuceneTestCaseJ4],long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a {@link Random} instance for generating random numbers from a beforeclass\n   * annotated method.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public static Random newStaticRandom(Class<? extends LuceneTestCaseJ4> clazz, long seed) {\n    staticSeeds.put(clazz, Long.valueOf(seed));\n    System.out.println(\"WARNING: random static seed of testclass '\" + clazz + \"' is fixed to: \" + seed);\n    return new Random(seed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee2d29b7102b7a68e60fc2947f781371c718af4f":["e00fbdf64cf75e7fbee5ab71742d7b6191356b8a"],"e00fbdf64cf75e7fbee5ab71742d7b6191356b8a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1ca38aecd0204be91049ec782668f642a68d9935":["b7f814567907094310b7ce1535a68437e43b28ea"],"b7f814567907094310b7ce1535a68437e43b28ea":["5f4e87790277826a2aea119328600dfb07761f32","ee2d29b7102b7a68e60fc2947f781371c718af4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e00fbdf64cf75e7fbee5ab71742d7b6191356b8a"],"43b04c27924fe393e38e9f0986e32c634f261859":["ee2d29b7102b7a68e60fc2947f781371c718af4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43b04c27924fe393e38e9f0986e32c634f261859"]},"commit2Childs":{"ee2d29b7102b7a68e60fc2947f781371c718af4f":["b7f814567907094310b7ce1535a68437e43b28ea","43b04c27924fe393e38e9f0986e32c634f261859"],"e00fbdf64cf75e7fbee5ab71742d7b6191356b8a":["ee2d29b7102b7a68e60fc2947f781371c718af4f","5f4e87790277826a2aea119328600dfb07761f32"],"1ca38aecd0204be91049ec782668f642a68d9935":[],"b7f814567907094310b7ce1535a68437e43b28ea":["1ca38aecd0204be91049ec782668f642a68d9935"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e00fbdf64cf75e7fbee5ab71742d7b6191356b8a","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["b7f814567907094310b7ce1535a68437e43b28ea"],"43b04c27924fe393e38e9f0986e32c634f261859":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1ca38aecd0204be91049ec782668f642a68d9935","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}