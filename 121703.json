{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNotRewriteMultiTermQuery().mjava","commits":[{"id":"203cbba17e28e65424501a76bf0ff5471c8eef06","date":1477315915,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNotRewriteMultiTermQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testNotRewriteMultiTermQuery() throws IOException {\n    // field \"bar\": (not the field we ultimately want to extract)\n    MultiTermQuery mtq = new TermRangeQuery(\"bar\", new BytesRef(\"aa\"), new BytesRef(\"zz\"), true, true) ;\n    WeightedSpanTermExtractor extractor = new WeightedSpanTermExtractor() {\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        assertEquals(mtq, query);\n        super.extract(query, boost, terms);\n      }\n    };\n    extractor.setExpandMultiTermQuery(true);\n    extractor.setMaxDocCharsToAnalyze(51200);\n    extractor.getWeightedSpanTerms(\n        mtq, 3, new CannedTokenStream(new Token(\"aa\",0,2), new Token(\"bb\", 2,4)), \"foo\"); // field \"foo\"\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60b61628d1912768f51eccaa8ead5a5a32ab34c6","date":1477427681,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNotRewriteMultiTermQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testNotRewriteMultiTermQuery() throws IOException {\n    // field \"bar\": (not the field we ultimately want to extract)\n    MultiTermQuery mtq = new TermRangeQuery(\"bar\", new BytesRef(\"aa\"), new BytesRef(\"zz\"), true, true) ;\n    WeightedSpanTermExtractor extractor = new WeightedSpanTermExtractor() {\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        assertEquals(mtq, query);\n        super.extract(query, boost, terms);\n      }\n    };\n    extractor.setExpandMultiTermQuery(true);\n    extractor.setMaxDocCharsToAnalyze(51200);\n    extractor.getWeightedSpanTerms(\n        mtq, 3, new CannedTokenStream(new Token(\"aa\",0,2), new Token(\"bb\", 2,4)), \"foo\"); // field \"foo\"\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNotRewriteMultiTermQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testNotRewriteMultiTermQuery() throws IOException {\n    // field \"bar\": (not the field we ultimately want to extract)\n    MultiTermQuery mtq = new TermRangeQuery(\"bar\", new BytesRef(\"aa\"), new BytesRef(\"zz\"), true, true) ;\n    WeightedSpanTermExtractor extractor = new WeightedSpanTermExtractor() {\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        assertEquals(mtq, query);\n        super.extract(query, boost, terms);\n      }\n    };\n    extractor.setExpandMultiTermQuery(true);\n    extractor.setMaxDocCharsToAnalyze(51200);\n    extractor.getWeightedSpanTerms(\n        mtq, 3, new CannedTokenStream(new Token(\"aa\",0,2), new Token(\"bb\", 2,4)), \"foo\"); // field \"foo\"\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","203cbba17e28e65424501a76bf0ff5471c8eef06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"203cbba17e28e65424501a76bf0ff5471c8eef06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"]},"commit2Childs":{"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60b61628d1912768f51eccaa8ead5a5a32ab34c6","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","203cbba17e28e65424501a76bf0ff5471c8eef06"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"203cbba17e28e65424501a76bf0ff5471c8eef06":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}