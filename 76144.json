{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testObjectContains().mjava","commits":[{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testObjectContains().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testObjectContains().mjava","sourceNew":"  public void testObjectContains() {\n    CharArraySet set = new CharArraySet(10, true);\n    Integer val = Integer.valueOf(1);\n    set.add(val);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n  }\n\n","sourceOld":"  public void testObjectContains() {\n    CharArraySet set = new CharArraySet(10, true);\n    Integer val = Integer.valueOf(1);\n    set.add(val);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testObjectContains().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testObjectContains().mjava","sourceNew":"  public void testObjectContains() {\n    CharArraySet set = new CharArraySet(10, true);\n    Integer val = Integer.valueOf(1);\n    set.add(val);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n  }\n\n","sourceOld":"  public void testObjectContains() {\n    CharArraySet set = new CharArraySet(10, true);\n    Integer val = Integer.valueOf(1);\n    set.add(val);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testObjectContains().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testObjectContains().mjava","sourceNew":"  @SuppressForbidden(reason = \"Explicitly checking new Integers\")\n  public void testObjectContains() {\n    CharArraySet set = new CharArraySet(10, true);\n    Integer val = Integer.valueOf(1);\n    set.add(val);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n  }\n\n","sourceOld":"  public void testObjectContains() {\n    CharArraySet set = new CharArraySet(10, true);\n    Integer val = Integer.valueOf(1);\n    set.add(val);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testObjectContains().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testObjectContains().mjava","sourceNew":"  @SuppressForbidden(reason = \"Explicitly checking new Integers\")\n  public void testObjectContains() {\n    CharArraySet set = new CharArraySet(10, true);\n    Integer val = Integer.valueOf(1);\n    set.add(val);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n  }\n\n","sourceOld":"  public void testObjectContains() {\n    CharArraySet set = new CharArraySet(10, true);\n    Integer val = Integer.valueOf(1);\n    set.add(val);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testObjectContains().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testObjectContains().mjava","sourceNew":"  @SuppressForbidden(reason = \"Explicitly checking new Integers\")\n  public void testObjectContains() {\n    CharArraySet set = new CharArraySet(10, true);\n    Integer val = Integer.valueOf(1);\n    set.add(val);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n  }\n\n","sourceOld":"  public void testObjectContains() {\n    CharArraySet set = new CharArraySet(10, true);\n    Integer val = Integer.valueOf(1);\n    set.add(val);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testObjectContains().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testObjectContains().mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  @SuppressForbidden(reason = \"Explicitly checking new Integers\")\n  public void testObjectContains() {\n    CharArraySet set = new CharArraySet(10, true);\n    Integer val = Integer.valueOf(1);\n    set.add(val);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Explicitly checking new Integers\")\n  public void testObjectContains() {\n    CharArraySet set = new CharArraySet(10, true);\n    Integer val = Integer.valueOf(1);\n    set.add(val);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testObjectContains().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testObjectContains().mjava","sourceNew":"  @SuppressForbidden(reason = \"Explicitly checking new Integers\")\n  public void testObjectContains() {\n    CharArraySet set = new CharArraySet(10, true);\n    Integer val = Integer.valueOf(1);\n    set.add(val);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  @SuppressForbidden(reason = \"Explicitly checking new Integers\")\n  public void testObjectContains() {\n    CharArraySet set = new CharArraySet(10, true);\n    Integer val = Integer.valueOf(1);\n    set.add(val);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testObjectContains().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testObjectContains().mjava","sourceNew":"  @SuppressForbidden(reason = \"Explicitly checking new Integers\")\n  public void testObjectContains() {\n    CharArraySet set = new CharArraySet(10, true);\n    Integer val = Integer.valueOf(1);\n    @SuppressWarnings(\"deprecation\")\n    Integer val1 = new Integer(1);\n    // Verify explicitly the case of different Integer instances\n    assertNotSame(val, val1);\n    set.add(val);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(val1)); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(val1)); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Explicitly checking new Integers\")\n  public void testObjectContains() {\n    CharArraySet set = new CharArraySet(10, true);\n    Integer val = Integer.valueOf(1);\n    set.add(val);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1))); // another integer\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}