{"path":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000);\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        } else {\n          Directory dir = FSDirectory.open(new File(dirOut));\n          IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n          fst.save(out);\n          out.close();\n          System.out.println(\"Saved FST to fst.bin.\");\n        }\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          is.close();\n          is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n          ord = 0;\n          tStart = System.currentTimeMillis();\n          while(true) {\n            String w = is.readLine();\n            if (w == null) {\n              break;\n            }\n            toIntsRef(w, inputMode, intsRef);\n            T expected = getOutput(intsRef, ord);\n            T actual = Util.get(fst, intsRef);\n            if (actual == null) {\n              throw new RuntimeException(\"unexpected null output on input=\" + w);\n            }\n            if (!actual.equals(expected)) {\n              throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n            }\n\n            ord++;\n            if (ord % 500000 == 0) {\n              System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n            }\n            if (ord >= limit) {\n              break;\n            }\n          }\n\n          double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n          System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000);\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        } else {\n          Directory dir = FSDirectory.open(new File(dirOut));\n          IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n          fst.save(out);\n          out.close();\n          System.out.println(\"Saved FST to fst.bin.\");\n        }\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          is.close();\n          is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n          ord = 0;\n          tStart = System.currentTimeMillis();\n          while(true) {\n            String w = is.readLine();\n            if (w == null) {\n              break;\n            }\n            toIntsRef(w, inputMode, intsRef);\n            T expected = getOutput(intsRef, ord);\n            T actual = Util.get(fst, intsRef);\n            if (actual == null) {\n              throw new RuntimeException(\"unexpected null output on input=\" + w);\n            }\n            if (!actual.equals(expected)) {\n              throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n            }\n\n            ord++;\n            if (ord % 500000 == 0) {\n              System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n            }\n            if (ord >= limit) {\n              break;\n            }\n          }\n\n          double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n          System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edcefacba254a0e3d6235c4b9c0a44dceaa626c5","date":1327944256,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000);\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        }\n        \n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          is.close();\n          is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n          ord = 0;\n          tStart = System.currentTimeMillis();\n          while(true) {\n            String w = is.readLine();\n            if (w == null) {\n              break;\n            }\n            toIntsRef(w, inputMode, intsRef);\n            T expected = getOutput(intsRef, ord);\n            T actual = Util.get(fst, intsRef);\n            if (actual == null) {\n              throw new RuntimeException(\"unexpected null output on input=\" + w);\n            }\n            if (!actual.equals(expected)) {\n              throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n            }\n\n            ord++;\n            if (ord % 500000 == 0) {\n              System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n            }\n            if (ord >= limit) {\n              break;\n            }\n          }\n\n          double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n          System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000);\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        } else {\n          Directory dir = FSDirectory.open(new File(dirOut));\n          IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n          fst.save(out);\n          out.close();\n          System.out.println(\"Saved FST to fst.bin.\");\n        }\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          is.close();\n          is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n          ord = 0;\n          tStart = System.currentTimeMillis();\n          while(true) {\n            String w = is.readLine();\n            if (w == null) {\n              break;\n            }\n            toIntsRef(w, inputMode, intsRef);\n            T expected = getOutput(intsRef, ord);\n            T actual = Util.get(fst, intsRef);\n            if (actual == null) {\n              throw new RuntimeException(\"unexpected null output on input=\" + w);\n            }\n            if (!actual.equals(expected)) {\n              throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n            }\n\n            ord++;\n            if (ord % 500000 == 0) {\n              System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n            }\n            if (ord >= limit) {\n              break;\n            }\n          }\n\n          double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n          System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000);\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        }\n        \n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          is.close();\n          is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n          ord = 0;\n          tStart = System.currentTimeMillis();\n          while(true) {\n            String w = is.readLine();\n            if (w == null) {\n              break;\n            }\n            toIntsRef(w, inputMode, intsRef);\n            T expected = getOutput(intsRef, ord);\n            T actual = Util.get(fst, intsRef);\n            if (actual == null) {\n              throw new RuntimeException(\"unexpected null output on input=\" + w);\n            }\n            if (!actual.equals(expected)) {\n              throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n            }\n\n            ord++;\n            if (ord % 500000 == 0) {\n              System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n            }\n            if (ord >= limit) {\n              break;\n            }\n          }\n\n          double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n          System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null)\n          return;\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"410e066f093e407222d9681429d209084e783149","date":1327958394,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000);\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        }\n        \n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          is.close();\n          is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n          ord = 0;\n          tStart = System.currentTimeMillis();\n          while(true) {\n            String w = is.readLine();\n            if (w == null) {\n              break;\n            }\n            toIntsRef(w, inputMode, intsRef);\n            T expected = getOutput(intsRef, ord);\n            T actual = Util.get(fst, intsRef);\n            if (actual == null) {\n              throw new RuntimeException(\"unexpected null output on input=\" + w);\n            }\n            if (!actual.equals(expected)) {\n              throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n            }\n\n            ord++;\n            if (ord % 500000 == 0) {\n              System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n            }\n            if (ord >= limit) {\n              break;\n            }\n          }\n\n          double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n          System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000);\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        } else {\n          Directory dir = FSDirectory.open(new File(dirOut));\n          IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n          fst.save(out);\n          out.close();\n          System.out.println(\"Saved FST to fst.bin.\");\n        }\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          is.close();\n          is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n          ord = 0;\n          tStart = System.currentTimeMillis();\n          while(true) {\n            String w = is.readLine();\n            if (w == null) {\n              break;\n            }\n            toIntsRef(w, inputMode, intsRef);\n            T expected = getOutput(intsRef, ord);\n            T actual = Util.get(fst, intsRef);\n            if (actual == null) {\n              throw new RuntimeException(\"unexpected null output on input=\" + w);\n            }\n            if (!actual.equals(expected)) {\n              throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n            }\n\n            ord++;\n            if (ord % 500000 == 0) {\n              System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n            }\n            if (ord >= limit) {\n              break;\n            }\n          }\n\n          double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n          System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f04dea8ce9675dc75eb2483feb840a86f765fb82","date":1328049049,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","sourceNew":"    public void run(int limit, boolean verify, boolean verifyByOutput) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000);\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        }\n        \n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          for(int iter=0;iter<2;iter++) {\n            is.close();\n            is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n            ord = 0;\n            tStart = System.currentTimeMillis();\n            while(true) {\n              String w = is.readLine();\n              if (w == null) {\n                break;\n              }\n              toIntsRef(w, inputMode, intsRef);\n              if (iter == 0) {\n                T expected = getOutput(intsRef, ord);\n                T actual = Util.get(fst, intsRef);\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null output on input=\" + w);\n                }\n                if (!actual.equals(expected)) {\n                  throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n                }\n              } else {\n                // Get by output\n                final Long output = (Long) getOutput(intsRef, ord);\n                @SuppressWarnings(\"unchecked\") final IntsRef actual = Util.getByOutput((FST<Long>) fst, output.longValue());\n                if (actual == null) {\n                  throw new RuntimeException(\"unexpected null input from output=\" + output);\n                }\n                if (!actual.equals(intsRef)) {\n                  throw new RuntimeException(\"wrong input (got \" + actual + \" but expected \" + intsRef + \" from output=\" + output);\n                }\n              }\n\n              ord++;\n              if (ord % 500000 == 0) {\n                System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n              }\n              if (ord >= limit) {\n                break;\n              }\n            }\n\n            double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n            System.out.println(\"Verify \" + (iter == 1 ? \"(by output) \" : \"\") + \"took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n            if (!verifyByOutput) {\n              break;\n            }\n          }\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        if (dirOut == null) {\n          return;\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        if (doPack) {\n          System.out.println(\"Pack...\");\n          fst = fst.pack(4, 100000000);\n          System.out.println(\"New size \" + fst.sizeInBytes() + \" bytes\");\n        }\n        \n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\", IOContext.DEFAULT);\n        fst.save(out);\n        out.close();\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          return;\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        while(true) {\n          is.close();\n          is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n          ord = 0;\n          tStart = System.currentTimeMillis();\n          while(true) {\n            String w = is.readLine();\n            if (w == null) {\n              break;\n            }\n            toIntsRef(w, inputMode, intsRef);\n            T expected = getOutput(intsRef, ord);\n            T actual = Util.get(fst, intsRef);\n            if (actual == null) {\n              throw new RuntimeException(\"unexpected null output on input=\" + w);\n            }\n            if (!actual.equals(expected)) {\n              throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n            }\n\n            ord++;\n            if (ord % 500000 == 0) {\n              System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n            }\n            if (ord >= limit) {\n              break;\n            }\n          }\n\n          double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n          System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n          // NOTE: comment out to profile lookup...\n          break;\n        }\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":["8405d98acebb7e287bf7ac40e937ba05b8661285","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"410e066f093e407222d9681429d209084e783149":["817882884229bace7dc5d1b75f6b0e4aa1e47122","edcefacba254a0e3d6235c4b9c0a44dceaa626c5"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"edcefacba254a0e3d6235c4b9c0a44dceaa626c5":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["ddc4c914be86e34b54f70023f45a60fa7f04e929","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["ddc4c914be86e34b54f70023f45a60fa7f04e929","edcefacba254a0e3d6235c4b9c0a44dceaa626c5"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f04dea8ce9675dc75eb2483feb840a86f765fb82"],"f04dea8ce9675dc75eb2483feb840a86f765fb82":["edcefacba254a0e3d6235c4b9c0a44dceaa626c5"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"410e066f093e407222d9681429d209084e783149":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"edcefacba254a0e3d6235c4b9c0a44dceaa626c5":["410e066f093e407222d9681429d209084e783149","5b6fdfce35d0adb18836cf8711abe487a934df33","f04dea8ce9675dc75eb2483feb840a86f765fb82"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["410e066f093e407222d9681429d209084e783149"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["edcefacba254a0e3d6235c4b9c0a44dceaa626c5","817882884229bace7dc5d1b75f6b0e4aa1e47122"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f04dea8ce9675dc75eb2483feb840a86f765fb82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["410e066f093e407222d9681429d209084e783149","5b6fdfce35d0adb18836cf8711abe487a934df33","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}