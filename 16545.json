{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createEphemeralLiveNode(String).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createEphemeralLiveNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createEphemeralLiveNode(String).mjava","sourceNew":"  // this method needs to be called under a lock\n  private void createEphemeralLiveNode(String nodeId) throws Exception {\n    DistribStateManager mgr = stateManager.withEphemeralId(nodeId);\n    mgr.makePath(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeId, null, CreateMode.EPHEMERAL, true);\n    AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n    if (cfg.hasTriggerForEvents(TriggerEventType.NODEADDED)) {\n      byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", cloudManager.getTimeSource().getEpochTimeNs()));\n      String path = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeId;\n      log.debug(\"-- creating marker: {}\", path);\n      mgr.makePath(path, json, CreateMode.EPHEMERAL, true);\n    }\n  }\n\n","sourceOld":"  // this method needs to be called under a lock\n  private void createEphemeralLiveNode(String nodeId) throws Exception {\n    DistribStateManager mgr = stateManager.withEphemeralId(nodeId);\n    mgr.makePath(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeId, null, CreateMode.EPHEMERAL, true);\n    AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n    if (cfg.hasTriggerForEvents(TriggerEventType.NODEADDED)) {\n      byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", cloudManager.getTimeSource().getEpochTimeNs()));\n      String path = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeId;\n      log.debug(\"-- creating marker: {}\", path);\n      mgr.makePath(path, json, CreateMode.EPHEMERAL, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createEphemeralLiveNode(String).mjava","sourceNew":null,"sourceOld":"  // this method needs to be called under a lock\n  private void createEphemeralLiveNode(String nodeId) throws Exception {\n    DistribStateManager mgr = stateManager.withEphemeralId(nodeId);\n    mgr.makePath(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeId, null, CreateMode.EPHEMERAL, true);\n    AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n    if (cfg.hasTriggerForEvents(TriggerEventType.NODEADDED)) {\n      byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", cloudManager.getTimeSource().getEpochTimeNs()));\n      String path = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeId;\n      log.debug(\"-- creating marker: {}\", path);\n      mgr.makePath(path, json, CreateMode.EPHEMERAL, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}