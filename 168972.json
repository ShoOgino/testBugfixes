{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#advance(int).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(docIn.clone(),\n                                        Lucene50PostingsWriter.MAX_SKIP_LEVELS,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"load skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        Lucene41PostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene41SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41474419488c9bf7affce00196d7010a7c3dcfdf","date":1413900484,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           BLOCK_SIZE,\n                                           indexHasPos,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(docIn.clone(),\n                                        Lucene50PostingsWriter.MAX_SKIP_LEVELS,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":2,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           BLOCK_SIZE,\n                                           indexHasPos,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"load skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        Lucene41PostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene41SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           indexHasPos,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           BLOCK_SIZE,\n                                           indexHasPos,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           indexHasPos,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      freq = freqBuffer[docBufferUpto];\n      docBufferUpto++;\n      return doc = accum;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           indexHasPos,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(version,\n                                           docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           indexHasPos,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      freq = freqBuffer[docBufferUpto];\n      docBufferUpto++;\n      return doc = accum;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           indexHasPos,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      freq = freqBuffer[docBufferUpto];\n      docBufferUpto++;\n      return doc = accum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9089237f2fb93105f12a1135e60257f4cf8ed41","date":1562086738,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(version,\n                                           docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           indexHasPos,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n          // even if freqs were not read from the previous block, we will mark them as read,\n          // as we don't need to skip the previous block freqs in refillDocs,\n          // as we have already positioned docIn where in needs to be.\n          isFreqsRead = true;\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      docBufferUpto++;\n      return doc = accum;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(version,\n                                           docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           indexHasPos,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      freq = freqBuffer[docBufferUpto];\n      docBufferUpto++;\n      return doc = accum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(version,\n                                           docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           indexHasPos,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n          // even if freqs were not read from the previous block, we will mark them as read,\n          // as we don't need to skip the previous block freqs in refillDocs,\n          // as we have already positioned docIn where in needs to be.\n          isFreqsRead = true;\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      docBufferUpto++;\n      return doc = accum;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene50SkipReader(version,\n                                           docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           indexHasPos,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n          // even if freqs were not read from the previous block, we will mark them as read,\n          // as we don't need to skip the previous block freqs in refillDocs,\n          // as we have already positioned docIn where in needs to be.\n          isFreqsRead = true;\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      docBufferUpto++;\n      return doc = accum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a9089237f2fb93105f12a1135e60257f4cf8ed41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a9089237f2fb93105f12a1135e60257f4cf8ed41":["622a708571e534680618b3c5e0c28ac539a47776"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","41474419488c9bf7affce00196d7010a7c3dcfdf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"41474419488c9bf7affce00196d7010a7c3dcfdf":["99eb4a732d1a908f4636ace52928876136bf1896"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["622a708571e534680618b3c5e0c28ac539a47776"],"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"99eb4a732d1a908f4636ace52928876136bf1896":["41474419488c9bf7affce00196d7010a7c3dcfdf"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"622a708571e534680618b3c5e0c28ac539a47776":["a9089237f2fb93105f12a1135e60257f4cf8ed41"],"a9089237f2fb93105f12a1135e60257f4cf8ed41":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"41474419488c9bf7affce00196d7010a7c3dcfdf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}