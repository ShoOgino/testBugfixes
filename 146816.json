{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoWideDegenerateHorizontalLine#GeoWideDegenerateHorizontalLine(PlanetModel,double,double,double).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoWideDegenerateHorizontalLine#GeoWideDegenerateHorizontalLine(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoWideDegenerateHorizontalLine#GeoWideDegenerateHorizontalLine(PlanetModel,double,double,double).mjava","sourceNew":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, lon: {@code -PI -> PI}.\n   * Horizontal angle must be greater than or equal to PI.\n   */\n  public GeoWideDegenerateHorizontalLine(final PlanetModel planetModel, final double latitude, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (latitude > Math.PI * 0.5 || latitude < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of range\");\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent < Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too small\");\n\n    this.latitude = latitude;\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLatitude = Math.sin(latitude);\n    final double cosLatitude = Math.cos(latitude);\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Now build the two points\n    this.LHC = new GeoPoint(planetModel, sinLatitude, sinLeftLon, cosLatitude, cosLeftLon);\n    this.RHC = new GeoPoint(planetModel, sinLatitude, sinRightLon, cosLatitude, cosRightLon);\n\n    this.plane = new Plane(planetModel, sinLatitude);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    double middleLon = (leftLon + rightLon) * 0.5;\n    double sinMiddleLon = Math.sin(middleLon);\n    double cosMiddleLon = Math.cos(middleLon);\n\n    this.centerPoint = new GeoPoint(planetModel, sinLatitude, sinMiddleLon, cosLatitude, cosMiddleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n    this.planePoints = new GeoPoint[]{LHC, RHC};\n\n    this.eitherBound = new EitherBound();\n\n    this.edgePoints = new GeoPoint[]{centerPoint};\n  }\n\n","sourceOld":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, lon: {@code -PI -> PI}.\n   * Horizontal angle must be greater than or equal to PI.\n   */\n  public GeoWideDegenerateHorizontalLine(final PlanetModel planetModel, final double latitude, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (latitude > Math.PI * 0.5 || latitude < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of range\");\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent < Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too small\");\n\n    this.latitude = latitude;\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLatitude = Math.sin(latitude);\n    final double cosLatitude = Math.cos(latitude);\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Now build the two points\n    this.LHC = new GeoPoint(planetModel, sinLatitude, sinLeftLon, cosLatitude, cosLeftLon);\n    this.RHC = new GeoPoint(planetModel, sinLatitude, sinRightLon, cosLatitude, cosRightLon);\n\n    this.plane = new Plane(planetModel, sinLatitude);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    double middleLon = (leftLon + rightLon) * 0.5;\n    double sinMiddleLon = Math.sin(middleLon);\n    double cosMiddleLon = Math.cos(middleLon);\n\n    this.centerPoint = new GeoPoint(planetModel, sinLatitude, sinMiddleLon, cosLatitude, cosMiddleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n    this.planePoints = new GeoPoint[]{LHC, RHC};\n\n    this.eitherBound = new EitherBound();\n\n    this.edgePoints = new GeoPoint[]{centerPoint};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d48c2726dec3381fb15aa3b90f7857635b6bdf74","date":1436825583,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoWideDegenerateHorizontalLine#GeoWideDegenerateHorizontalLine(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoWideDegenerateHorizontalLine#GeoWideDegenerateHorizontalLine(PlanetModel,double,double,double).mjava","sourceNew":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, lon: {@code -PI -> PI}.\n   * Horizontal angle must be greater than or equal to PI.\n   *@param planetModel is the planet model.\n   *@param latitude is the line latitude.\n   *@param leftLon is the left cutoff longitude.\n   *@param rightLon is the right cutoff longitude.\n   */\n  public GeoWideDegenerateHorizontalLine(final PlanetModel planetModel, final double latitude, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (latitude > Math.PI * 0.5 || latitude < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of range\");\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent < Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too small\");\n\n    this.latitude = latitude;\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLatitude = Math.sin(latitude);\n    final double cosLatitude = Math.cos(latitude);\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Now build the two points\n    this.LHC = new GeoPoint(planetModel, sinLatitude, sinLeftLon, cosLatitude, cosLeftLon);\n    this.RHC = new GeoPoint(planetModel, sinLatitude, sinRightLon, cosLatitude, cosRightLon);\n\n    this.plane = new Plane(planetModel, sinLatitude);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    double middleLon = (leftLon + rightLon) * 0.5;\n    double sinMiddleLon = Math.sin(middleLon);\n    double cosMiddleLon = Math.cos(middleLon);\n\n    this.centerPoint = new GeoPoint(planetModel, sinLatitude, sinMiddleLon, cosLatitude, cosMiddleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n    this.planePoints = new GeoPoint[]{LHC, RHC};\n\n    this.eitherBound = new EitherBound();\n\n    this.edgePoints = new GeoPoint[]{centerPoint};\n  }\n\n","sourceOld":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, lon: {@code -PI -> PI}.\n   * Horizontal angle must be greater than or equal to PI.\n   */\n  public GeoWideDegenerateHorizontalLine(final PlanetModel planetModel, final double latitude, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (latitude > Math.PI * 0.5 || latitude < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of range\");\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent < Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too small\");\n\n    this.latitude = latitude;\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLatitude = Math.sin(latitude);\n    final double cosLatitude = Math.cos(latitude);\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Now build the two points\n    this.LHC = new GeoPoint(planetModel, sinLatitude, sinLeftLon, cosLatitude, cosLeftLon);\n    this.RHC = new GeoPoint(planetModel, sinLatitude, sinRightLon, cosLatitude, cosRightLon);\n\n    this.plane = new Plane(planetModel, sinLatitude);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    double middleLon = (leftLon + rightLon) * 0.5;\n    double sinMiddleLon = Math.sin(middleLon);\n    double cosMiddleLon = Math.cos(middleLon);\n\n    this.centerPoint = new GeoPoint(planetModel, sinLatitude, sinMiddleLon, cosLatitude, cosMiddleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n    this.planePoints = new GeoPoint[]{LHC, RHC};\n\n    this.eitherBound = new EitherBound();\n\n    this.edgePoints = new GeoPoint[]{centerPoint};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoWideDegenerateHorizontalLine#GeoWideDegenerateHorizontalLine(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoWideDegenerateHorizontalLine#GeoWideDegenerateHorizontalLine(PlanetModel,double,double,double).mjava","sourceNew":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, lon: {@code -PI -> PI}.\n   * Horizontal angle must be greater than or equal to PI.\n   *@param planetModel is the planet model.\n   *@param latitude is the line latitude.\n   *@param leftLon is the left cutoff longitude.\n   *@param rightLon is the right cutoff longitude.\n   */\n  public GeoWideDegenerateHorizontalLine(final PlanetModel planetModel, final double latitude, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (latitude > Math.PI * 0.5 || latitude < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of range\");\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent < Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too small\");\n\n    this.latitude = latitude;\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLatitude = Math.sin(latitude);\n    final double cosLatitude = Math.cos(latitude);\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Now build the two points\n    this.LHC = new GeoPoint(planetModel, sinLatitude, sinLeftLon, cosLatitude, cosLeftLon, latitude, leftLon);\n    this.RHC = new GeoPoint(planetModel, sinLatitude, sinRightLon, cosLatitude, cosRightLon, latitude, rightLon);\n\n    this.plane = new Plane(planetModel, sinLatitude);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    double middleLon = (leftLon + rightLon) * 0.5;\n    double sinMiddleLon = Math.sin(middleLon);\n    double cosMiddleLon = Math.cos(middleLon);\n\n    this.centerPoint = new GeoPoint(planetModel, sinLatitude, sinMiddleLon, cosLatitude, cosMiddleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n    this.planePoints = new GeoPoint[]{LHC, RHC};\n\n    this.eitherBound = new EitherBound();\n\n    this.edgePoints = new GeoPoint[]{centerPoint};\n  }\n\n","sourceOld":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, lon: {@code -PI -> PI}.\n   * Horizontal angle must be greater than or equal to PI.\n   *@param planetModel is the planet model.\n   *@param latitude is the line latitude.\n   *@param leftLon is the left cutoff longitude.\n   *@param rightLon is the right cutoff longitude.\n   */\n  public GeoWideDegenerateHorizontalLine(final PlanetModel planetModel, final double latitude, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (latitude > Math.PI * 0.5 || latitude < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of range\");\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent < Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too small\");\n\n    this.latitude = latitude;\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLatitude = Math.sin(latitude);\n    final double cosLatitude = Math.cos(latitude);\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Now build the two points\n    this.LHC = new GeoPoint(planetModel, sinLatitude, sinLeftLon, cosLatitude, cosLeftLon);\n    this.RHC = new GeoPoint(planetModel, sinLatitude, sinRightLon, cosLatitude, cosRightLon);\n\n    this.plane = new Plane(planetModel, sinLatitude);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    double middleLon = (leftLon + rightLon) * 0.5;\n    double sinMiddleLon = Math.sin(middleLon);\n    double cosMiddleLon = Math.cos(middleLon);\n\n    this.centerPoint = new GeoPoint(planetModel, sinLatitude, sinMiddleLon, cosLatitude, cosMiddleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n    this.planePoints = new GeoPoint[]{LHC, RHC};\n\n    this.eitherBound = new EitherBound();\n\n    this.edgePoints = new GeoPoint[]{centerPoint};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoWideDegenerateHorizontalLine#GeoWideDegenerateHorizontalLine(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoWideDegenerateHorizontalLine#GeoWideDegenerateHorizontalLine(PlanetModel,double,double,double).mjava","sourceNew":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, lon: {@code -PI -> PI}.\n   * Horizontal angle must be greater than or equal to PI.\n   *@param planetModel is the planet model.\n   *@param latitude is the line latitude.\n   *@param leftLon is the left cutoff longitude.\n   *@param rightLon is the right cutoff longitude.\n   */\n  public GeoWideDegenerateHorizontalLine(final PlanetModel planetModel, final double latitude, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (latitude > Math.PI * 0.5 || latitude < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of range\");\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent < Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too small\");\n\n    this.latitude = latitude;\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLatitude = Math.sin(latitude);\n    final double cosLatitude = Math.cos(latitude);\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Now build the two points\n    this.LHC = new GeoPoint(planetModel, sinLatitude, sinLeftLon, cosLatitude, cosLeftLon, latitude, leftLon);\n    this.RHC = new GeoPoint(planetModel, sinLatitude, sinRightLon, cosLatitude, cosRightLon, latitude, rightLon);\n\n    this.plane = new Plane(planetModel, sinLatitude);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    double middleLon = (leftLon + rightLon) * 0.5;\n    double sinMiddleLon = Math.sin(middleLon);\n    double cosMiddleLon = Math.cos(middleLon);\n\n    this.centerPoint = new GeoPoint(planetModel, sinLatitude, sinMiddleLon, cosLatitude, cosMiddleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n    this.planePoints = new GeoPoint[]{LHC, RHC};\n\n    this.eitherBound = new EitherBound();\n\n    this.edgePoints = new GeoPoint[]{centerPoint};\n  }\n\n","sourceOld":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, lon: {@code -PI -> PI}.\n   * Horizontal angle must be greater than or equal to PI.\n   *@param planetModel is the planet model.\n   *@param latitude is the line latitude.\n   *@param leftLon is the left cutoff longitude.\n   *@param rightLon is the right cutoff longitude.\n   */\n  public GeoWideDegenerateHorizontalLine(final PlanetModel planetModel, final double latitude, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (latitude > Math.PI * 0.5 || latitude < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of range\");\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent < Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too small\");\n\n    this.latitude = latitude;\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLatitude = Math.sin(latitude);\n    final double cosLatitude = Math.cos(latitude);\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Now build the two points\n    this.LHC = new GeoPoint(planetModel, sinLatitude, sinLeftLon, cosLatitude, cosLeftLon, latitude, leftLon);\n    this.RHC = new GeoPoint(planetModel, sinLatitude, sinRightLon, cosLatitude, cosRightLon, latitude, rightLon);\n\n    this.plane = new Plane(planetModel, sinLatitude);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    double middleLon = (leftLon + rightLon) * 0.5;\n    double sinMiddleLon = Math.sin(middleLon);\n    double cosMiddleLon = Math.cos(middleLon);\n\n    this.centerPoint = new GeoPoint(planetModel, sinLatitude, sinMiddleLon, cosLatitude, cosMiddleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n    this.planePoints = new GeoPoint[]{LHC, RHC};\n\n    this.eitherBound = new EitherBound();\n\n    this.edgePoints = new GeoPoint[]{centerPoint};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f64b7098768253180859cd8faeae6b1a185b06ed":["d48c2726dec3381fb15aa3b90f7857635b6bdf74"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d48c2726dec3381fb15aa3b90f7857635b6bdf74":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"b4e444678504caf66a8060b1d514383aa4feac0c":["f64b7098768253180859cd8faeae6b1a185b06ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"f64b7098768253180859cd8faeae6b1a185b06ed":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["d48c2726dec3381fb15aa3b90f7857635b6bdf74"],"d48c2726dec3381fb15aa3b90f7857635b6bdf74":["f64b7098768253180859cd8faeae6b1a185b06ed"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}