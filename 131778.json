{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isIntersectingPolygon(Node,double,double,double,double).mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isIntersectingPolygon(Node,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Determines if the diagonal of a polygon is intersecting with any polygon elements. **/\n  private static final boolean isIntersectingPolygon(final Node start, final double x0, final double y0,\n                                                     final double x1, final double y1) {\n    Node node = start;\n    Node nextNode;\n    do {\n      nextNode = node.next;\n      if(node.getX() != x0 && node.getY() != y0 && nextNode.getX() != x0\n          && nextNode.getY() != y0 && node.getX() != x1 && node.getY() != y1\n          && nextNode.getX() != x1 && nextNode.getY() != y1) {\n        return linesIntersect(node.getX(), node.getY(), nextNode.getX(), nextNode.getY(), x0, y0, x1, y1);\n      }\n      node = nextNode;\n    } while (node != start);\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7c583199293c7833193231ccedc9ab3ad3976c4e","0ed7235f58ecdcb4212c16c44a402263059aa742"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isIntersectingPolygon(Node,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Determines if the diagonal of a polygon is intersecting with any polygon elements. **/\n  private static final boolean isIntersectingPolygon(final Node start, final double x0, final double y0,\n                                                     final double x1, final double y1) {\n    Node node = start;\n    Node nextNode;\n    do {\n      nextNode = node.next;\n      if(node.getX() != x0 && node.getY() != y0 && nextNode.getX() != x0\n          && nextNode.getY() != y0 && node.getX() != x1 && node.getY() != y1\n          && nextNode.getX() != x1 && nextNode.getY() != y1) {\n        return linesIntersect(node.getX(), node.getY(), nextNode.getX(), nextNode.getY(), x0, y0, x1, y1);\n      }\n      node = nextNode;\n    } while (node != start);\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isIntersectingPolygon(Node,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Determines if the diagonal of a polygon is intersecting with any polygon elements. **/\n  private static final boolean isIntersectingPolygon(final Node start, final double x0, final double y0,\n                                                     final double x1, final double y1) {\n    Node node = start;\n    Node nextNode;\n    do {\n      nextNode = node.next;\n      if(node.getX() != x0 && node.getY() != y0 && nextNode.getX() != x0\n          && nextNode.getY() != y0 && node.getX() != x1 && node.getY() != y1\n          && nextNode.getX() != x1 && nextNode.getY() != y1) {\n        return linesIntersect(node.getX(), node.getY(), nextNode.getX(), nextNode.getY(), x0, y0, x1, y1);\n      }\n      node = nextNode;\n    } while (node != start);\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ed7235f58ecdcb4212c16c44a402263059aa742","date":1541140729,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isIntersectingPolygon(Node,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isIntersectingPolygon(Node,double,double,double,double).mjava","sourceNew":"  /** Determines if the diagonal of a polygon is intersecting with any polygon elements. **/\n  private static final boolean isIntersectingPolygon(final Node start, final double x0, final double y0,\n                                                     final double x1, final double y1) {\n    Node node = start;\n    Node nextNode;\n    do {\n      nextNode = node.next;\n      if(node.getX() != x0 && node.getY() != y0 && nextNode.getX() != x0\n          && nextNode.getY() != y0 && node.getX() != x1 && node.getY() != y1\n          && nextNode.getX() != x1 && nextNode.getY() != y1) {\n        if (linesIntersect(node.getX(), node.getY(), nextNode.getX(), nextNode.getY(), x0, y0, x1, y1)) {\n          return true;\n        }\n      }\n      node = nextNode;\n    } while (node != start);\n\n    return false;\n  }\n\n","sourceOld":"  /** Determines if the diagonal of a polygon is intersecting with any polygon elements. **/\n  private static final boolean isIntersectingPolygon(final Node start, final double x0, final double y0,\n                                                     final double x1, final double y1) {\n    Node node = start;\n    Node nextNode;\n    do {\n      nextNode = node.next;\n      if(node.getX() != x0 && node.getY() != y0 && nextNode.getX() != x0\n          && nextNode.getY() != y0 && node.getX() != x1 && node.getY() != y1\n          && nextNode.getX() != x1 && nextNode.getY() != y1) {\n        return linesIntersect(node.getX(), node.getY(), nextNode.getX(), nextNode.getY(), x0, y0, x1, y1);\n      }\n      node = nextNode;\n    } while (node != start);\n\n    return false;\n  }\n\n","bugFix":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c583199293c7833193231ccedc9ab3ad3976c4e","date":1541573072,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isIntersectingPolygon(Node,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isIntersectingPolygon(Node,double,double,double,double).mjava","sourceNew":"  /** Determines if the diagonal of a polygon is intersecting with any polygon elements. **/\n  private static final boolean isIntersectingPolygon(final Node start, final double x0, final double y0,\n                                                     final double x1, final double y1) {\n    Node node = start;\n    Node nextNode;\n    do {\n      nextNode = node.next;\n      if(isVertexEquals(node, x0, y0) == false && isVertexEquals(node, x1, y1) == false) {\n        if (linesIntersect(node.getX(), node.getY(), nextNode.getX(), nextNode.getY(), x0, y0, x1, y1)) {\n          return true;\n        }\n      }\n      node = nextNode;\n    } while (node != start);\n\n    return false;\n  }\n\n","sourceOld":"  /** Determines if the diagonal of a polygon is intersecting with any polygon elements. **/\n  private static final boolean isIntersectingPolygon(final Node start, final double x0, final double y0,\n                                                     final double x1, final double y1) {\n    Node node = start;\n    Node nextNode;\n    do {\n      nextNode = node.next;\n      if(node.getX() != x0 && node.getY() != y0 && nextNode.getX() != x0\n          && nextNode.getY() != y0 && node.getX() != x1 && node.getY() != y1\n          && nextNode.getX() != x1 && nextNode.getY() != y1) {\n        if (linesIntersect(node.getX(), node.getY(), nextNode.getX(), nextNode.getY(), x0, y0, x1, y1)) {\n          return true;\n        }\n      }\n      node = nextNode;\n    } while (node != start);\n\n    return false;\n  }\n\n","bugFix":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#isIntersectingPolygon(Node,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isIntersectingPolygon(Node,double,double,double,double).mjava","sourceNew":"  /** Determines if the diagonal of a polygon is intersecting with any polygon elements. **/\n  private static final boolean isIntersectingPolygon(final Node start, final double x0, final double y0,\n                                                     final double x1, final double y1) {\n    Node node = start;\n    Node nextNode;\n    do {\n      nextNode = node.next;\n      if(isVertexEquals(node, x0, y0) == false && isVertexEquals(node, x1, y1) == false) {\n        if (linesIntersect(node.getX(), node.getY(), nextNode.getX(), nextNode.getY(), x0, y0, x1, y1)) {\n          return true;\n        }\n      }\n      node = nextNode;\n    } while (node != start);\n\n    return false;\n  }\n\n","sourceOld":"  /** Determines if the diagonal of a polygon is intersecting with any polygon elements. **/\n  private static final boolean isIntersectingPolygon(final Node start, final double x0, final double y0,\n                                                     final double x1, final double y1) {\n    Node node = start;\n    Node nextNode;\n    do {\n      nextNode = node.next;\n      if(isVertexEquals(node, x0, y0) == false && isVertexEquals(node, x1, y1) == false) {\n        if (linesIntersect(node.getX(), node.getY(), nextNode.getX(), nextNode.getY(), x0, y0, x1, y1)) {\n          return true;\n        }\n      }\n      node = nextNode;\n    } while (node != start);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["7c583199293c7833193231ccedc9ab3ad3976c4e"],"7c583199293c7833193231ccedc9ab3ad3976c4e":["0ed7235f58ecdcb4212c16c44a402263059aa742"],"0ed7235f58ecdcb4212c16c44a402263059aa742":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0ed7235f58ecdcb4212c16c44a402263059aa742","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c583199293c7833193231ccedc9ab3ad3976c4e":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"0ed7235f58ecdcb4212c16c44a402263059aa742":["7c583199293c7833193231ccedc9ab3ad3976c4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}