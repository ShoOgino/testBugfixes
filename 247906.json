{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#moveMetrics(String,String,MetricFilter).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#moveMetrics(String,String,MetricFilter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Move all matching metrics from one registry to another. This is useful eg. during\n   * {@link org.apache.solr.core.SolrCore} rename or swap operations.\n   * @param fromRegistry source registry\n   * @param toRegistry target registry\n   * @param filter optional {@link MetricFilter} to select what metrics to move. If null\n   *               then all metrics will be moved.\n   */\n  public void moveMetrics(String fromRegistry, String toRegistry, MetricFilter filter) {\n    MetricRegistry from = registry(fromRegistry);\n    MetricRegistry to = registry(toRegistry);\n    if (from == to) {\n      return;\n    }\n    if (filter == null) {\n      to.registerAll(from);\n      from.removeMatching(MetricFilter.ALL);\n    } else {\n      for (Map.Entry<String, Metric> entry : from.getMetrics().entrySet()) {\n        if (filter.matches(entry.getKey(), entry.getValue())) {\n          to.register(entry.getKey(), entry.getValue());\n        }\n      }\n      from.removeMatching(filter);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#moveMetrics(String,String,MetricFilter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Move all matching metrics from one registry to another. This is useful eg. during\n   * {@link org.apache.solr.core.SolrCore} rename or swap operations.\n   * @param fromRegistry source registry\n   * @param toRegistry target registry\n   * @param filter optional {@link MetricFilter} to select what metrics to move. If null\n   *               then all metrics will be moved.\n   */\n  public void moveMetrics(String fromRegistry, String toRegistry, MetricFilter filter) {\n    MetricRegistry from = registry(fromRegistry);\n    MetricRegistry to = registry(toRegistry);\n    if (from == to) {\n      return;\n    }\n    if (filter == null) {\n      to.registerAll(from);\n      from.removeMatching(MetricFilter.ALL);\n    } else {\n      for (Map.Entry<String, Metric> entry : from.getMetrics().entrySet()) {\n        if (filter.matches(entry.getKey(), entry.getValue())) {\n          to.register(entry.getKey(), entry.getValue());\n        }\n      }\n      from.removeMatching(filter);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a30bfa174128ad6cb3bcf568080886729e347fe9","date":1485967817,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#moveMetrics(String,String,MetricFilter).mjava","sourceNew":null,"sourceOld":"  /**\n   * Move all matching metrics from one registry to another. This is useful eg. during\n   * {@link org.apache.solr.core.SolrCore} rename or swap operations.\n   * @param fromRegistry source registry\n   * @param toRegistry target registry\n   * @param filter optional {@link MetricFilter} to select what metrics to move. If null\n   *               then all metrics will be moved.\n   */\n  public void moveMetrics(String fromRegistry, String toRegistry, MetricFilter filter) {\n    MetricRegistry from = registry(fromRegistry);\n    MetricRegistry to = registry(toRegistry);\n    if (from == to) {\n      return;\n    }\n    if (filter == null) {\n      to.registerAll(from);\n      from.removeMatching(MetricFilter.ALL);\n    } else {\n      for (Map.Entry<String, Metric> entry : from.getMetrics().entrySet()) {\n        if (filter.matches(entry.getKey(), entry.getValue())) {\n          to.register(entry.getKey(), entry.getValue());\n        }\n      }\n      from.removeMatching(filter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#moveMetrics(String,String,MetricFilter).mjava","sourceNew":null,"sourceOld":"  /**\n   * Move all matching metrics from one registry to another. This is useful eg. during\n   * {@link org.apache.solr.core.SolrCore} rename or swap operations.\n   * @param fromRegistry source registry\n   * @param toRegistry target registry\n   * @param filter optional {@link MetricFilter} to select what metrics to move. If null\n   *               then all metrics will be moved.\n   */\n  public void moveMetrics(String fromRegistry, String toRegistry, MetricFilter filter) {\n    MetricRegistry from = registry(fromRegistry);\n    MetricRegistry to = registry(toRegistry);\n    if (from == to) {\n      return;\n    }\n    if (filter == null) {\n      to.registerAll(from);\n      from.removeMatching(MetricFilter.ALL);\n    } else {\n      for (Map.Entry<String, Metric> entry : from.getMetrics().entrySet()) {\n        if (filter.matches(entry.getKey(), entry.getValue())) {\n          to.register(entry.getKey(), entry.getValue());\n        }\n      }\n      from.removeMatching(filter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a30bfa174128ad6cb3bcf568080886729e347fe9":["0265144286422ad99682a00904cc2536b79c8535"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","a30bfa174128ad6cb3bcf568080886729e347fe9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a30bfa174128ad6cb3bcf568080886729e347fe9"]},"commit2Childs":{"0265144286422ad99682a00904cc2536b79c8535":["a30bfa174128ad6cb3bcf568080886729e347fe9","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"a30bfa174128ad6cb3bcf568080886729e347fe9":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}