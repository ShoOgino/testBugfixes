{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#processMessage(CloudState,ZkNodeProps,String).mjava","commits":[{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#processMessage(CloudState,ZkNodeProps,String).mjava","pathOld":"/dev/null","sourceNew":"    private CloudState processMessage(CloudState cloudState,\n        final ZkNodeProps message, final String operation)\n        throws KeeperException, InterruptedException {\n      if (\"state\".equals(operation)) {\n        cloudState = updateState(cloudState, message);\n      } else if (\"deletecore\".equals(operation)) {\n        cloudState = removeCore(cloudState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (!baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb\n            .append(\"/\");\n        cloudState = setShardLeader(cloudState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), sb.toString());\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return cloudState;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#processMessage(CloudState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#processMessage(CloudState,ZkNodeProps,String).mjava","sourceNew":"    private CloudState processMessage(CloudState cloudState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        cloudState = updateState(cloudState, message);\n      } else if (\"deletecore\".equals(operation)) {\n        cloudState = removeCore(cloudState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (!baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb\n            .append(\"/\");\n        cloudState = setShardLeader(cloudState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), sb.toString());\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return cloudState;\n    }\n\n","sourceOld":"    private CloudState processMessage(CloudState cloudState,\n        final ZkNodeProps message, final String operation)\n        throws KeeperException, InterruptedException {\n      if (\"state\".equals(operation)) {\n        cloudState = updateState(cloudState, message);\n      } else if (\"deletecore\".equals(operation)) {\n        cloudState = removeCore(cloudState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (!baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb\n            .append(\"/\");\n        cloudState = setShardLeader(cloudState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), sb.toString());\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return cloudState;\n    }\n\n","bugFix":["a5093a9e893633cc091cf2f729d7863671c2b715"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#processMessage(CloudState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#processMessage(CloudState,ZkNodeProps,String).mjava","sourceNew":"    private CloudState processMessage(CloudState cloudState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        cloudState = updateState(cloudState, message);\n      } else if (DELETECORE.equals(operation)) {\n        cloudState = removeCore(cloudState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (!baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb\n            .append(\"/\");\n        cloudState = setShardLeader(cloudState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), sb.toString());\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return cloudState;\n    }\n\n","sourceOld":"    private CloudState processMessage(CloudState cloudState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        cloudState = updateState(cloudState, message);\n      } else if (\"deletecore\".equals(operation)) {\n        cloudState = removeCore(cloudState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (!baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb\n            .append(\"/\");\n        cloudState = setShardLeader(cloudState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), sb.toString());\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return cloudState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#processMessage(CloudState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#processMessage(CloudState,ZkNodeProps,String).mjava","sourceNew":"    private CloudState processMessage(CloudState cloudState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        cloudState = updateState(cloudState, message);\n      } else if (DELETECORE.equals(operation)) {\n        cloudState = removeCore(cloudState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (!baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb\n            .append(\"/\");\n        cloudState = setShardLeader(cloudState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), sb.toString());\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return cloudState;\n    }\n\n","sourceOld":"    private CloudState processMessage(CloudState cloudState,\n        final ZkNodeProps message, final String operation)\n        throws KeeperException, InterruptedException {\n      if (\"state\".equals(operation)) {\n        cloudState = updateState(cloudState, message);\n      } else if (\"deletecore\".equals(operation)) {\n        cloudState = removeCore(cloudState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (!baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb\n            .append(\"/\");\n        cloudState = setShardLeader(cloudState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), sb.toString());\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return cloudState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#processMessage(CloudState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (!baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb\n            .append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), sb.toString());\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private CloudState processMessage(CloudState cloudState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        cloudState = updateState(cloudState, message);\n      } else if (DELETECORE.equals(operation)) {\n        cloudState = removeCore(cloudState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (!baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb\n            .append(\"/\");\n        cloudState = setShardLeader(cloudState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), sb.toString());\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return cloudState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#processMessage(CloudState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (!baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb\n            .append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), sb.toString());\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private CloudState processMessage(CloudState cloudState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        cloudState = updateState(cloudState, message);\n      } else if (DELETECORE.equals(operation)) {\n        cloudState = removeCore(cloudState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (!baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb\n            .append(\"/\");\n        cloudState = setShardLeader(cloudState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), sb.toString());\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return cloudState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#processMessage(CloudState,ZkNodeProps,String).mjava","sourceNew":null,"sourceOld":"    private CloudState processMessage(CloudState cloudState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        cloudState = updateState(cloudState, message);\n      } else if (DELETECORE.equals(operation)) {\n        cloudState = removeCore(cloudState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (!baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb\n            .append(\"/\");\n        cloudState = setShardLeader(cloudState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), sb.toString());\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return cloudState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a5093a9e893633cc091cf2f729d7863671c2b715","33d0ed80b7b47e34ad3ff033a77544563aba3085"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["33d0ed80b7b47e34ad3ff033a77544563aba3085","3f767f8c99eaedb984df754fe61f21c5de260f94"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["a5093a9e893633cc091cf2f729d7863671c2b715"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["3f767f8c99eaedb984df754fe61f21c5de260f94","fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5093a9e893633cc091cf2f729d7863671c2b715"],"a5093a9e893633cc091cf2f729d7863671c2b715":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}