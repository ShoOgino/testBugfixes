{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#traverse(String,boolean,CreateMode).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#traverse(String,boolean,CreateMode).mjava","pathOld":"/dev/null","sourceNew":"  // this method should always be invoked under lock\n  private Node traverse(String path, boolean create, CreateMode mode) throws IOException {\n    if (path == null || path.isEmpty()) {\n      return null;\n    }\n    throttleOrError(path);\n    if (path.charAt(0) == '/') {\n      path = path.substring(1);\n    }\n    StringBuilder currentPath = new StringBuilder();\n    String[] elements = path.split(\"/\");\n    Node parentNode = root;\n    Node n = null;\n    for (int i = 0; i < elements.length; i++) {\n      String currentName = elements[i];\n      currentPath.append('/');\n      LOG.info(\" - parentNode=\" + parentNode + \", currentName=\" + currentName);\n      n = parentNode.children != null ? parentNode.children.get(currentName) : null;\n      if (n == null) {\n        if (create) {\n          if ((parentNode.mode == CreateMode.EPHEMERAL || parentNode.mode == CreateMode.EPHEMERAL_SEQUENTIAL) &&\n              (mode == CreateMode.EPHEMERAL || mode == CreateMode.EPHEMERAL_SEQUENTIAL)) {\n            throw new IOException(\"NoChildrenEphemerals for \" + parentNode.path);\n          }\n          if (CreateMode.PERSISTENT_SEQUENTIAL == mode || CreateMode.EPHEMERAL_SEQUENTIAL == mode) {\n            currentName = currentName + String.format(Locale.ROOT, \"%010d\", parentNode.seq);\n            parentNode.seq++;\n          }\n          currentPath.append(currentName);\n          n = new Node(parentNode, currentName, currentPath.toString(), mode, id);\n          parentNode.setChild(currentName, n);\n        } else {\n          break;\n        }\n      } else {\n        currentPath.append(currentName);\n      }\n      parentNode = n;\n    }\n    return n;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ca0a4dbf78f24cae23322877249146fecf1f218","date":1513333850,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#traverse(String,boolean,CreateMode).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#traverse(String,boolean,CreateMode).mjava","sourceNew":"  // this method should always be invoked under lock\n  private Node traverse(String path, boolean create, CreateMode mode) throws IOException {\n    if (path == null || path.isEmpty()) {\n      return null;\n    }\n    throttleOrError(path);\n    if (path.charAt(0) == '/') {\n      path = path.substring(1);\n    }\n    StringBuilder currentPath = new StringBuilder();\n    String[] elements = path.split(\"/\");\n    Node parentNode = root;\n    Node n = null;\n    for (int i = 0; i < elements.length; i++) {\n      String currentName = elements[i];\n      currentPath.append('/');\n      n = parentNode.children != null ? parentNode.children.get(currentName) : null;\n      if (n == null) {\n        if (create) {\n          if ((parentNode.mode == CreateMode.EPHEMERAL || parentNode.mode == CreateMode.EPHEMERAL_SEQUENTIAL) &&\n              (mode == CreateMode.EPHEMERAL || mode == CreateMode.EPHEMERAL_SEQUENTIAL)) {\n            throw new IOException(\"NoChildrenEphemerals for \" + parentNode.path);\n          }\n          if (CreateMode.PERSISTENT_SEQUENTIAL == mode || CreateMode.EPHEMERAL_SEQUENTIAL == mode) {\n            currentName = currentName + String.format(Locale.ROOT, \"%010d\", parentNode.seq);\n            parentNode.seq++;\n          }\n          currentPath.append(currentName);\n          n = new Node(parentNode, currentName, currentPath.toString(), mode, id);\n          parentNode.setChild(currentName, n);\n        } else {\n          break;\n        }\n      } else {\n        currentPath.append(currentName);\n      }\n      parentNode = n;\n    }\n    return n;\n  }\n\n","sourceOld":"  // this method should always be invoked under lock\n  private Node traverse(String path, boolean create, CreateMode mode) throws IOException {\n    if (path == null || path.isEmpty()) {\n      return null;\n    }\n    throttleOrError(path);\n    if (path.charAt(0) == '/') {\n      path = path.substring(1);\n    }\n    StringBuilder currentPath = new StringBuilder();\n    String[] elements = path.split(\"/\");\n    Node parentNode = root;\n    Node n = null;\n    for (int i = 0; i < elements.length; i++) {\n      String currentName = elements[i];\n      currentPath.append('/');\n      LOG.info(\" - parentNode=\" + parentNode + \", currentName=\" + currentName);\n      n = parentNode.children != null ? parentNode.children.get(currentName) : null;\n      if (n == null) {\n        if (create) {\n          if ((parentNode.mode == CreateMode.EPHEMERAL || parentNode.mode == CreateMode.EPHEMERAL_SEQUENTIAL) &&\n              (mode == CreateMode.EPHEMERAL || mode == CreateMode.EPHEMERAL_SEQUENTIAL)) {\n            throw new IOException(\"NoChildrenEphemerals for \" + parentNode.path);\n          }\n          if (CreateMode.PERSISTENT_SEQUENTIAL == mode || CreateMode.EPHEMERAL_SEQUENTIAL == mode) {\n            currentName = currentName + String.format(Locale.ROOT, \"%010d\", parentNode.seq);\n            parentNode.seq++;\n          }\n          currentPath.append(currentName);\n          n = new Node(parentNode, currentName, currentPath.toString(), mode, id);\n          parentNode.setChild(currentName, n);\n        } else {\n          break;\n        }\n      } else {\n        currentPath.append(currentName);\n      }\n      parentNode = n;\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59537ce20cda704e6ff3cb03706b6507b289ed81","date":1544700454,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#traverse(String,boolean,CreateMode).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#traverse(String,boolean,CreateMode).mjava","sourceNew":"  // this method should always be invoked under lock\n  private Node traverse(String path, boolean create, CreateMode mode) throws IOException {\n    if (path == null || path.isEmpty()) {\n      return null;\n    }\n    throttleOrError(path);\n    if (path.charAt(0) == '/') {\n      path = path.substring(1);\n    }\n    StringBuilder currentPath = new StringBuilder();\n    String[] elements = path.split(\"/\");\n    Node parentNode = root;\n    Node n = null;\n    for (int i = 0; i < elements.length; i++) {\n      String currentName = elements[i];\n      currentPath.append('/');\n      n = parentNode.children != null ? parentNode.children.get(currentName) : null;\n      if (n == null) {\n        if (create) {\n          n = createNode(parentNode, mode, currentPath, currentName,true);\n        } else {\n          break;\n        }\n      } else {\n        currentPath.append(currentName);\n      }\n      parentNode = n;\n    }\n    return n;\n  }\n\n","sourceOld":"  // this method should always be invoked under lock\n  private Node traverse(String path, boolean create, CreateMode mode) throws IOException {\n    if (path == null || path.isEmpty()) {\n      return null;\n    }\n    throttleOrError(path);\n    if (path.charAt(0) == '/') {\n      path = path.substring(1);\n    }\n    StringBuilder currentPath = new StringBuilder();\n    String[] elements = path.split(\"/\");\n    Node parentNode = root;\n    Node n = null;\n    for (int i = 0; i < elements.length; i++) {\n      String currentName = elements[i];\n      currentPath.append('/');\n      n = parentNode.children != null ? parentNode.children.get(currentName) : null;\n      if (n == null) {\n        if (create) {\n          if ((parentNode.mode == CreateMode.EPHEMERAL || parentNode.mode == CreateMode.EPHEMERAL_SEQUENTIAL) &&\n              (mode == CreateMode.EPHEMERAL || mode == CreateMode.EPHEMERAL_SEQUENTIAL)) {\n            throw new IOException(\"NoChildrenEphemerals for \" + parentNode.path);\n          }\n          if (CreateMode.PERSISTENT_SEQUENTIAL == mode || CreateMode.EPHEMERAL_SEQUENTIAL == mode) {\n            currentName = currentName + String.format(Locale.ROOT, \"%010d\", parentNode.seq);\n            parentNode.seq++;\n          }\n          currentPath.append(currentName);\n          n = new Node(parentNode, currentName, currentPath.toString(), mode, id);\n          parentNode.setChild(currentName, n);\n        } else {\n          break;\n        }\n      } else {\n        currentPath.append(currentName);\n      }\n      parentNode = n;\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59506fa452342983f7cd1faf6d27274c658f3e09","date":1545397484,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#traverse(String,boolean,CreateMode).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#traverse(String,boolean,CreateMode).mjava","sourceNew":"  // this method should always be invoked under lock\n  private Node traverse(String path, boolean create, CreateMode mode) throws IOException {\n    if (path == null || path.isEmpty()) {\n      return null;\n    }\n    throttleOrError(path);\n    if (path.charAt(0) == '/') {\n      path = path.substring(1);\n    }\n    StringBuilder currentPath = new StringBuilder();\n    String[] elements = path.split(\"/\");\n    Node parentNode = root;\n    Node n = null;\n    for (int i = 0; i < elements.length; i++) {\n      String currentName = elements[i];\n      currentPath.append('/');\n      n = parentNode.children != null ? parentNode.children.get(currentName) : null;\n      if (n == null) {\n        if (create) {\n          n = createNode(parentNode, mode, currentPath, currentName,null, true);\n        } else {\n          break;\n        }\n      } else {\n        currentPath.append(currentName);\n      }\n      parentNode = n;\n    }\n    return n;\n  }\n\n","sourceOld":"  // this method should always be invoked under lock\n  private Node traverse(String path, boolean create, CreateMode mode) throws IOException {\n    if (path == null || path.isEmpty()) {\n      return null;\n    }\n    throttleOrError(path);\n    if (path.charAt(0) == '/') {\n      path = path.substring(1);\n    }\n    StringBuilder currentPath = new StringBuilder();\n    String[] elements = path.split(\"/\");\n    Node parentNode = root;\n    Node n = null;\n    for (int i = 0; i < elements.length; i++) {\n      String currentName = elements[i];\n      currentPath.append('/');\n      n = parentNode.children != null ? parentNode.children.get(currentName) : null;\n      if (n == null) {\n        if (create) {\n          n = createNode(parentNode, mode, currentPath, currentName,true);\n        } else {\n          break;\n        }\n      } else {\n        currentPath.append(currentName);\n      }\n      parentNode = n;\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#traverse(String,boolean,CreateMode).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#traverse(String,boolean,CreateMode).mjava","sourceNew":"  // this method should always be invoked under lock\n  private Node traverse(String path, boolean create, CreateMode mode) throws IOException {\n    if (path == null || path.isEmpty()) {\n      return null;\n    }\n    throttleOrError(path);\n    if (path.charAt(0) == '/') {\n      path = path.substring(1);\n    }\n    StringBuilder currentPath = new StringBuilder();\n    String[] elements = path.split(\"/\");\n    Node parentNode = root;\n    Node n = null;\n    for (int i = 0; i < elements.length; i++) {\n      String currentName = elements[i];\n      currentPath.append('/');\n      n = parentNode.children != null ? parentNode.children.get(currentName) : null;\n      if (n == null) {\n        if (create) {\n          n = createNode(parentNode, mode, currentPath, currentName,null, true);\n        } else {\n          break;\n        }\n      } else {\n        currentPath.append(currentName);\n      }\n      parentNode = n;\n    }\n    return n;\n  }\n\n","sourceOld":"  // this method should always be invoked under lock\n  private Node traverse(String path, boolean create, CreateMode mode) throws IOException {\n    if (path == null || path.isEmpty()) {\n      return null;\n    }\n    throttleOrError(path);\n    if (path.charAt(0) == '/') {\n      path = path.substring(1);\n    }\n    StringBuilder currentPath = new StringBuilder();\n    String[] elements = path.split(\"/\");\n    Node parentNode = root;\n    Node n = null;\n    for (int i = 0; i < elements.length; i++) {\n      String currentName = elements[i];\n      currentPath.append('/');\n      n = parentNode.children != null ? parentNode.children.get(currentName) : null;\n      if (n == null) {\n        if (create) {\n          n = createNode(parentNode, mode, currentPath, currentName,null, true);\n        } else {\n          break;\n        }\n      } else {\n        currentPath.append(currentName);\n      }\n      parentNode = n;\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59537ce20cda704e6ff3cb03706b6507b289ed81":["1ca0a4dbf78f24cae23322877249146fecf1f218"],"1ca0a4dbf78f24cae23322877249146fecf1f218":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["59506fa452342983f7cd1faf6d27274c658f3e09"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59506fa452342983f7cd1faf6d27274c658f3e09":["59537ce20cda704e6ff3cb03706b6507b289ed81"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"59537ce20cda704e6ff3cb03706b6507b289ed81":["59506fa452342983f7cd1faf6d27274c658f3e09"],"1ca0a4dbf78f24cae23322877249146fecf1f218":["59537ce20cda704e6ff3cb03706b6507b289ed81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["1ca0a4dbf78f24cae23322877249146fecf1f218"],"59506fa452342983f7cd1faf6d27274c658f3e09":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}