{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/RangeFacetCloudTest#multiGapTest().mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/RangeFacetCloudTest#multiGapTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    String[] params = new String[] {\n        \"o.mi.s.sum\", \"sum(int_id)\",\n        \"o.mi.s.mean\", \"mean(int_id)\",\n        \"o.mi.s.median\", \"median(int_id)\",\n        \"o.mi.s.count\", \"count(int_id)\",\n        \"o.mi.rf\", \"long_ld\",\n        \"o.mi.rf.long_ld.st\", \"5\",\n        \"o.mi.rf.long_ld.e\", \"30\",\n        \"o.mi.rf.long_ld.g\", \"4,2,6,3\",\n        \"o.mi.rf.long_ld.ib\", \"lower\",\n        \"o.mi.rf.long_ld.or\", \"all\",\n        \"o.mi.rf\", \"double_dd\",\n        \"o.mi.rf.double_dd.st\", \"3\",\n        \"o.mi.rf.double_dd.e\", \"39\",\n        \"o.mi.rf.double_dd.g\", \"3,1,7\",\n        \"o.mi.rf.double_dd.ib\", \"upper\",\n        \"o.mi.rf.double_dd.ib\", \"outer\",\n        \"o.mi.rf.double_dd.or\", \"all\",\n        \"o.mi.rf\", \"date_dtd\",\n        \"o.mi.rf.date_dtd.st\", \"1007-01-01T23:59:59Z\",\n        \"o.mi.rf.date_dtd.e\", \"1044-01-01T23:59:59Z\",\n        \"o.mi.rf.date_dtd.g\", \"+2YEARS,+7YEARS\",\n        \"o.mi.rf.date_dtd.ib\", \"lower\",\n        \"o.mi.rf.date_dtd.ib\", \"edge\",\n        \"o.mi.rf.date_dtd.ib\", \"outer\",\n        \"o.mi.rf.date_dtd.or\", \"all\",\n\n        \"o.mf.s.sum\", \"sum(float_fd)\",\n        \"o.mf.s.mean\", \"mean(float_fd)\",\n        \"o.mf.s.median\", \"median(float_fd)\",\n        \"o.mf.s.count\", \"count(float_fd)\",\n        \"o.mf.rf\", \"long_ld\",\n        \"o.mf.rf.long_ld.st\", \"0\",\n        \"o.mf.rf.long_ld.e\", \"29\",\n        \"o.mf.rf.long_ld.g\", \"1,4\",\n        \"o.mf.rf.long_ld.ib\", \"all\",\n        \"o.mf.rf.long_ld.or\", \"all\",\n        \"o.mf.rf\", \"double_dd\",\n        \"o.mf.rf.double_dd.st\", \"4\",\n        \"o.mf.rf.double_dd.e\", \"47\",\n        \"o.mf.rf.double_dd.g\", \"2,3,11\",\n        \"o.mf.rf.double_dd.ib\", \"edge\",\n        \"o.mf.rf.double_dd.or\", \"all\",\n        \"o.mf.rf\", \"date_dtd\",\n        \"o.mf.rf.date_dtd.st\", \"1004-01-01T23:59:59Z\",\n        \"o.mf.rf.date_dtd.e\", \"1046-01-01T23:59:59Z\",\n        \"o.mf.rf.date_dtd.g\", \"+4YEARS,+5YEARS\",\n        \"o.mf.rf.date_dtd.ib\", \"upper\",\n        \"o.mf.rf.date_dtd.ib\", \"edge\",\n        \"o.mf.rf.date_dtd.or\", \"all\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Long\n    ArrayList<Double> intLong = getValueList(response, \"mi\", \"rangeFacets\", \"long_ld\", \"sum\", false);\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(responseStr, intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getValueList(response, \"mi\", \"rangeFacets\", \"double_dd\", \"mean\", false);\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(responseStr, intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getValueList(response, \"mi\", \"rangeFacets\", \"date_dtd\", \"count\", false);\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(responseStr, intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getValueList(response, \"mf\", \"rangeFacets\", \"long_ld\", \"median\", false);\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(responseStr, floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getValueList(response, \"mf\", \"rangeFacets\", \"double_dd\", \"count\", false);\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(responseStr, floatDouble,floatDoubleTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/RangeFacetCloudTest#multiGapTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    String[] params = new String[] {\n        \"o.mi.s.sum\", \"sum(int_id)\",\n        \"o.mi.s.mean\", \"mean(int_id)\",\n        \"o.mi.s.median\", \"median(int_id)\",\n        \"o.mi.s.count\", \"count(int_id)\",\n        \"o.mi.rf\", \"long_ld\",\n        \"o.mi.rf.long_ld.st\", \"5\",\n        \"o.mi.rf.long_ld.e\", \"30\",\n        \"o.mi.rf.long_ld.g\", \"4,2,6,3\",\n        \"o.mi.rf.long_ld.ib\", \"lower\",\n        \"o.mi.rf.long_ld.or\", \"all\",\n        \"o.mi.rf\", \"double_dd\",\n        \"o.mi.rf.double_dd.st\", \"3\",\n        \"o.mi.rf.double_dd.e\", \"39\",\n        \"o.mi.rf.double_dd.g\", \"3,1,7\",\n        \"o.mi.rf.double_dd.ib\", \"upper\",\n        \"o.mi.rf.double_dd.ib\", \"outer\",\n        \"o.mi.rf.double_dd.or\", \"all\",\n        \"o.mi.rf\", \"date_dtd\",\n        \"o.mi.rf.date_dtd.st\", \"1007-01-01T23:59:59Z\",\n        \"o.mi.rf.date_dtd.e\", \"1044-01-01T23:59:59Z\",\n        \"o.mi.rf.date_dtd.g\", \"+2YEARS,+7YEARS\",\n        \"o.mi.rf.date_dtd.ib\", \"lower\",\n        \"o.mi.rf.date_dtd.ib\", \"edge\",\n        \"o.mi.rf.date_dtd.ib\", \"outer\",\n        \"o.mi.rf.date_dtd.or\", \"all\",\n\n        \"o.mf.s.sum\", \"sum(float_fd)\",\n        \"o.mf.s.mean\", \"mean(float_fd)\",\n        \"o.mf.s.median\", \"median(float_fd)\",\n        \"o.mf.s.count\", \"count(float_fd)\",\n        \"o.mf.rf\", \"long_ld\",\n        \"o.mf.rf.long_ld.st\", \"0\",\n        \"o.mf.rf.long_ld.e\", \"29\",\n        \"o.mf.rf.long_ld.g\", \"1,4\",\n        \"o.mf.rf.long_ld.ib\", \"all\",\n        \"o.mf.rf.long_ld.or\", \"all\",\n        \"o.mf.rf\", \"double_dd\",\n        \"o.mf.rf.double_dd.st\", \"4\",\n        \"o.mf.rf.double_dd.e\", \"47\",\n        \"o.mf.rf.double_dd.g\", \"2,3,11\",\n        \"o.mf.rf.double_dd.ib\", \"edge\",\n        \"o.mf.rf.double_dd.or\", \"all\",\n        \"o.mf.rf\", \"date_dtd\",\n        \"o.mf.rf.date_dtd.st\", \"1004-01-01T23:59:59Z\",\n        \"o.mf.rf.date_dtd.e\", \"1046-01-01T23:59:59Z\",\n        \"o.mf.rf.date_dtd.g\", \"+4YEARS,+5YEARS\",\n        \"o.mf.rf.date_dtd.ib\", \"upper\",\n        \"o.mf.rf.date_dtd.ib\", \"edge\",\n        \"o.mf.rf.date_dtd.or\", \"all\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Long\n    ArrayList<Double> intLong = getValueList(response, \"mi\", \"rangeFacets\", \"long_ld\", \"sum\", false);\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(responseStr, intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getValueList(response, \"mi\", \"rangeFacets\", \"double_dd\", \"mean\", false);\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(responseStr, intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getValueList(response, \"mi\", \"rangeFacets\", \"date_dtd\", \"count\", false);\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(responseStr, intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getValueList(response, \"mf\", \"rangeFacets\", \"long_ld\", \"median\", false);\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(responseStr, floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getValueList(response, \"mf\", \"rangeFacets\", \"double_dd\", \"count\", false);\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(responseStr, floatDouble,floatDoubleTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/RangeFacetCloudTest#multiGapTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    String[] params = new String[] {\n        \"o.mi.s.sum\", \"sum(int_id)\",\n        \"o.mi.s.mean\", \"mean(int_id)\",\n        \"o.mi.s.median\", \"median(int_id)\",\n        \"o.mi.s.count\", \"count(int_id)\",\n        \"o.mi.rf\", \"long_ld\",\n        \"o.mi.rf.long_ld.st\", \"5\",\n        \"o.mi.rf.long_ld.e\", \"30\",\n        \"o.mi.rf.long_ld.g\", \"4,2,6,3\",\n        \"o.mi.rf.long_ld.ib\", \"lower\",\n        \"o.mi.rf.long_ld.or\", \"all\",\n        \"o.mi.rf\", \"double_dd\",\n        \"o.mi.rf.double_dd.st\", \"3\",\n        \"o.mi.rf.double_dd.e\", \"39\",\n        \"o.mi.rf.double_dd.g\", \"3,1,7\",\n        \"o.mi.rf.double_dd.ib\", \"upper\",\n        \"o.mi.rf.double_dd.ib\", \"outer\",\n        \"o.mi.rf.double_dd.or\", \"all\",\n        \"o.mi.rf\", \"date_dtd\",\n        \"o.mi.rf.date_dtd.st\", \"1007-01-01T23:59:59Z\",\n        \"o.mi.rf.date_dtd.e\", \"1044-01-01T23:59:59Z\",\n        \"o.mi.rf.date_dtd.g\", \"+2YEARS,+7YEARS\",\n        \"o.mi.rf.date_dtd.ib\", \"lower\",\n        \"o.mi.rf.date_dtd.ib\", \"edge\",\n        \"o.mi.rf.date_dtd.ib\", \"outer\",\n        \"o.mi.rf.date_dtd.or\", \"all\",\n\n        \"o.mf.s.sum\", \"sum(float_fd)\",\n        \"o.mf.s.mean\", \"mean(float_fd)\",\n        \"o.mf.s.median\", \"median(float_fd)\",\n        \"o.mf.s.count\", \"count(float_fd)\",\n        \"o.mf.rf\", \"long_ld\",\n        \"o.mf.rf.long_ld.st\", \"0\",\n        \"o.mf.rf.long_ld.e\", \"29\",\n        \"o.mf.rf.long_ld.g\", \"1,4\",\n        \"o.mf.rf.long_ld.ib\", \"all\",\n        \"o.mf.rf.long_ld.or\", \"all\",\n        \"o.mf.rf\", \"double_dd\",\n        \"o.mf.rf.double_dd.st\", \"4\",\n        \"o.mf.rf.double_dd.e\", \"47\",\n        \"o.mf.rf.double_dd.g\", \"2,3,11\",\n        \"o.mf.rf.double_dd.ib\", \"edge\",\n        \"o.mf.rf.double_dd.or\", \"all\",\n        \"o.mf.rf\", \"date_dtd\",\n        \"o.mf.rf.date_dtd.st\", \"1004-01-01T23:59:59Z\",\n        \"o.mf.rf.date_dtd.e\", \"1046-01-01T23:59:59Z\",\n        \"o.mf.rf.date_dtd.g\", \"+4YEARS,+5YEARS\",\n        \"o.mf.rf.date_dtd.ib\", \"upper\",\n        \"o.mf.rf.date_dtd.ib\", \"edge\",\n        \"o.mf.rf.date_dtd.or\", \"all\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Long\n    ArrayList<Double> intLong = getValueList(response, \"mi\", \"rangeFacets\", \"long_ld\", \"sum\", false);\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(responseStr, intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getValueList(response, \"mi\", \"rangeFacets\", \"double_dd\", \"mean\", false);\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(responseStr, intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getValueList(response, \"mi\", \"rangeFacets\", \"date_dtd\", \"count\", false);\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(responseStr, intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getValueList(response, \"mf\", \"rangeFacets\", \"long_ld\", \"median\", false);\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(responseStr, floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getValueList(response, \"mf\", \"rangeFacets\", \"double_dd\", \"count\", false);\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(responseStr, floatDouble,floatDoubleTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":4,"author":"Houston Putman","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/RangeFacetCloudTest#multiGapTest().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    String[] params = new String[] {\n        \"o.mi.s.sum\", \"sum(int_id)\",\n        \"o.mi.s.mean\", \"mean(int_id)\",\n        \"o.mi.s.median\", \"median(int_id)\",\n        \"o.mi.s.count\", \"count(int_id)\",\n        \"o.mi.rf\", \"long_ld\",\n        \"o.mi.rf.long_ld.st\", \"5\",\n        \"o.mi.rf.long_ld.e\", \"30\",\n        \"o.mi.rf.long_ld.g\", \"4,2,6,3\",\n        \"o.mi.rf.long_ld.ib\", \"lower\",\n        \"o.mi.rf.long_ld.or\", \"all\",\n        \"o.mi.rf\", \"double_dd\",\n        \"o.mi.rf.double_dd.st\", \"3\",\n        \"o.mi.rf.double_dd.e\", \"39\",\n        \"o.mi.rf.double_dd.g\", \"3,1,7\",\n        \"o.mi.rf.double_dd.ib\", \"upper\",\n        \"o.mi.rf.double_dd.ib\", \"outer\",\n        \"o.mi.rf.double_dd.or\", \"all\",\n        \"o.mi.rf\", \"date_dtd\",\n        \"o.mi.rf.date_dtd.st\", \"1007-01-01T23:59:59Z\",\n        \"o.mi.rf.date_dtd.e\", \"1044-01-01T23:59:59Z\",\n        \"o.mi.rf.date_dtd.g\", \"+2YEARS,+7YEARS\",\n        \"o.mi.rf.date_dtd.ib\", \"lower\",\n        \"o.mi.rf.date_dtd.ib\", \"edge\",\n        \"o.mi.rf.date_dtd.ib\", \"outer\",\n        \"o.mi.rf.date_dtd.or\", \"all\",\n\n        \"o.mf.s.sum\", \"sum(float_fd)\",\n        \"o.mf.s.mean\", \"mean(float_fd)\",\n        \"o.mf.s.median\", \"median(float_fd)\",\n        \"o.mf.s.count\", \"count(float_fd)\",\n        \"o.mf.rf\", \"long_ld\",\n        \"o.mf.rf.long_ld.st\", \"0\",\n        \"o.mf.rf.long_ld.e\", \"29\",\n        \"o.mf.rf.long_ld.g\", \"1,4\",\n        \"o.mf.rf.long_ld.ib\", \"all\",\n        \"o.mf.rf.long_ld.or\", \"all\",\n        \"o.mf.rf\", \"double_dd\",\n        \"o.mf.rf.double_dd.st\", \"4\",\n        \"o.mf.rf.double_dd.e\", \"47\",\n        \"o.mf.rf.double_dd.g\", \"2,3,11\",\n        \"o.mf.rf.double_dd.ib\", \"edge\",\n        \"o.mf.rf.double_dd.or\", \"all\",\n        \"o.mf.rf\", \"date_dtd\",\n        \"o.mf.rf.date_dtd.st\", \"1004-01-01T23:59:59Z\",\n        \"o.mf.rf.date_dtd.e\", \"1046-01-01T23:59:59Z\",\n        \"o.mf.rf.date_dtd.g\", \"+4YEARS,+5YEARS\",\n        \"o.mf.rf.date_dtd.ib\", \"upper\",\n        \"o.mf.rf.date_dtd.ib\", \"edge\",\n        \"o.mf.rf.date_dtd.or\", \"all\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Long\n    ArrayList<Double> intLong = getValueList(response, \"mi\", \"rangeFacets\", \"long_ld\", \"sum\", false);\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(responseStr, intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getValueList(response, \"mi\", \"rangeFacets\", \"double_dd\", \"mean\", false);\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(responseStr, intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getValueList(response, \"mi\", \"rangeFacets\", \"date_dtd\", \"count\", false);\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(responseStr, intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getValueList(response, \"mf\", \"rangeFacets\", \"long_ld\", \"median\", false);\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(responseStr, floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getValueList(response, \"mf\", \"rangeFacets\", \"double_dd\", \"count\", false);\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(responseStr, floatDouble,floatDoubleTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","3bd4c6955956e76c96eb12dfe64108ed03522983"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}