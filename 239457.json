{"path":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","commits":[{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(MergeState,IndexDocValues[]).mjava","sourceNew":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, IndexDocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(MergeState,IndexDocValues[]).mjava","sourceNew":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, IndexDocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new Writer.SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(MergeState,DocValues[]).mjava","sourceNew":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link org.apache.lucene.index.MergeState} into\n   * this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the state to merge\n   * @param docValues docValues array containing one instance per reader (\n   *          {@link org.apache.lucene.index.MergeState#readers}) or <code>null</code> if the reader has\n   *          no {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public void merge(MergeState mergeState, DocValues[] docValues) throws IOException {\n    assert mergeState != null;\n    boolean hasMerged = false;\n    for(int readerIDX=0;readerIDX<mergeState.readers.size();readerIDX++) {\n      final org.apache.lucene.index.MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(readerIDX);\n      if (docValues[readerIDX] != null) {\n        hasMerged = true;\n        merge(new SingleSubMergeState(docValues[readerIDX], mergeState.docBase[readerIDX], reader.reader.maxDoc(),\n                                    reader.liveDocs));\n      }\n    }\n    // only finish if no exception is thrown!\n    if (hasMerged) {\n      finish(mergeState.mergedDocCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}