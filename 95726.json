{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","commits":[{"id":"30f9ea0e61a3df8b29a67bce1ea06c83201ad871","date":1457138084,"type":1,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testClusterProp().mjava","sourceNew":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    \n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n    changed = false;\n    while(! timeout.hasTimedOut()) {\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","sourceOld":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    \n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n    changed = false;\n    while(! timeout.hasTimedOut()) {\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testClusterProp().mjava","sourceNew":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    \n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n    changed = false;\n    while(! timeout.hasTimedOut()) {\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","sourceOld":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    \n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n    changed = false;\n    while(! timeout.hasTimedOut()) {\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"115923bc88e5b1dc4bef049b1ded8486723052ed","date":1463216796,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","sourceNew":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    \n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"none\"));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n    changed = false;\n    while(! timeout.hasTimedOut()) {\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProperty(ZkStateReader.LEGACY_CLOUD, (String) null) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","sourceOld":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    \n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n    changed = false;\n    while(! timeout.hasTimedOut()) {\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","sourceNew":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    \n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"none\"));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n    changed = false;\n    while(! timeout.hasTimedOut()) {\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProperty(ZkStateReader.LEGACY_CLOUD, (String) null) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","sourceOld":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    \n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n    changed = false;\n    while(! timeout.hasTimedOut()) {\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","sourceNew":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    \n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"none\"));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n    changed = false;\n    while(! timeout.hasTimedOut()) {\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProperty(ZkStateReader.LEGACY_CLOUD, (String) null) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","sourceOld":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    \n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n    changed = false;\n    while(! timeout.hasTimedOut()) {\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","sourceNew":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    \n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"none\"));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n    changed = false;\n    while(! timeout.hasTimedOut()) {\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProperty(ZkStateReader.LEGACY_CLOUD, (String) null) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","sourceOld":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    \n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n    changed = false;\n    while(! timeout.hasTimedOut()) {\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","sourceNew":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n\n    ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\"), \"false\");\n    \n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\"), \"true\");\n\n  }\n\n","sourceOld":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    \n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"none\"));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n    changed = false;\n    while(! timeout.hasTimedOut()) {\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProperty(ZkStateReader.LEGACY_CLOUD, (String) null) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","sourceNew":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n\n    ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\"), \"false\");\n    \n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\"), \"true\");\n\n  }\n\n","sourceOld":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    \n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"none\"));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n    changed = false;\n    while(! timeout.hasTimedOut()) {\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProperty(ZkStateReader.LEGACY_CLOUD, (String) null) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e021e73178a0be1b0ff15a0894796c23f0556144","date":1493262514,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","sourceNew":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n\n    ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\"), \"false\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\"), \"true\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n\n    ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\"), \"false\");\n    \n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\"), \"true\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","sourceNew":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    // sanity check our expected default\n    final ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Expecting prop to default to unset, test needs upated\",\n                 props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n    \n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n      .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"false\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n\n    ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\"), \"false\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\"), \"true\");\n\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","sourceNew":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    // sanity check our expected default\n    final ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Expecting prop to default to unset, test needs upated\",\n                 props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n    \n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n      .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"false\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n\n    ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\"), \"false\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\"), \"true\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","sourceNew":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    // sanity check our expected default\n    final ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Expecting prop to default to unset, test needs upated\",\n                 props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n    \n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n      .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"false\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n\n    ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\"), \"false\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\"), \"true\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","sourceNew":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    // sanity check our expected default\n    final ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Expecting prop to default to unset, test needs upated\",\n                 props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n    \n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n      .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"false\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n\n    ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\"), \"false\");\n    \n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\"), \"true\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","sourceNew":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    // sanity check our expected default\n    final ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Expecting legacyCloud to false as default\",\n                 props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"false\");\n    \n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\")\n      .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"true\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n\n    response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"false\");\n  }\n\n","sourceOld":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    // sanity check our expected default\n    final ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Expecting prop to default to unset, test needs upated\",\n                 props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n    \n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n      .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"false\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c61b682431fc3a1ef6cf62c8c8d835b88675a72","date":1498098208,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","sourceNew":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    // sanity check our expected default\n    final ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Expecting prop to default to unset, test needs upated\",\n                 props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n    \n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\")\n      .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"true\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n\n    response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"false\");\n  }\n\n","sourceOld":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    // sanity check our expected default\n    final ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Expecting legacyCloud to false as default\",\n                 props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"false\");\n    \n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\")\n      .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"true\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n\n    response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"false\");\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","sourceNew":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    // sanity check our expected default\n    final ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Expecting prop to default to unset, test needs upated\",\n                 props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n    \n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\")\n      .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"true\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n\n    response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"false\");\n  }\n\n","sourceOld":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    // sanity check our expected default\n    final ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Expecting prop to default to unset, test needs upated\",\n                 props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n    \n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n      .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"false\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","sourceNew":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    // sanity check our expected default\n    final ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Expecting prop to default to unset, test needs upated\",\n                 props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n    \n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\")\n      .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"true\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n\n    response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"false\");\n  }\n\n","sourceOld":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    // sanity check our expected default\n    final ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Expecting prop to default to unset, test needs upated\",\n                 props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n    \n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n      .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"false\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","sourceNew":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    // sanity check our expected default\n    final ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Expecting prop to default to unset, test needs upated\",\n                 props.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, null), null);\n    \n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, \"true\")\n      .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, null), \"true\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, null), null);\n\n    response = CollectionAdminRequest.setClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, \"false\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, null), \"false\");\n  }\n\n","sourceOld":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    // sanity check our expected default\n    final ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Expecting prop to default to unset, test needs upated\",\n                 props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n    \n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"true\")\n      .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"true\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), null);\n\n    response = CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, null), \"false\");\n  }\n\n","bugFix":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","636a04bc82e662bf141a55f1d10f52e1c76c727b","4c61b682431fc3a1ef6cf62c8c8d835b88675a72","ac97ea104d893f16aab430d9904473bc1f233f3c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","sourceNew":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    // sanity check our expected default\n    final ClusterProperties props = new ClusterProperties(zkClient());\n    \n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.MAX_CORES_PER_NODE, \"42\")\n      .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.MAX_CORES_PER_NODE, null), \"42\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.MAX_CORES_PER_NODE, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.MAX_CORES_PER_NODE, null), null);\n\n    response = CollectionAdminRequest.setClusterProperty(ZkStateReader.MAX_CORES_PER_NODE, \"1\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.MAX_CORES_PER_NODE, null), \"1\");\n  }\n\n","sourceOld":"  @Test\n  public void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n\n    // sanity check our expected default\n    final ClusterProperties props = new ClusterProperties(zkClient());\n    assertEquals(\"Expecting prop to default to unset, test needs upated\",\n                 props.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, null), null);\n    \n    CollectionAdminResponse response = CollectionAdminRequest.setClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, \"true\")\n      .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, null), \"true\");\n\n    // Unset ClusterProp that we set.\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, null).process(cluster.getSolrClient());\n    assertEquals(\"Cluster property was not unset\", props.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, null), null);\n\n    response = CollectionAdminRequest.setClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, \"false\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertEquals(\"Cluster property was not set\", props.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, null), \"false\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["28288370235ed02234a64753cdbf0c6ec096304a"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"3f504512a03d978990cbff30db0522b354e846db":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"922ddd897402a6df25c766ea8300443be5e82b3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["e021e73178a0be1b0ff15a0894796c23f0556144"],"0ad30c6a479e764150a3316e57263319775f1df2":["922ddd897402a6df25c766ea8300443be5e82b3d","115923bc88e5b1dc4bef049b1ded8486723052ed"],"3217321f3e1d7922898c6c633d17acfa840d6875":["e021e73178a0be1b0ff15a0894796c23f0556144","ac97ea104d893f16aab430d9904473bc1f233f3c"],"4c61b682431fc3a1ef6cf62c8c8d835b88675a72":["a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["e9017cf144952056066919f1ebc7897ff9bd71b1","4c61b682431fc3a1ef6cf62c8c8d835b88675a72"],"28288370235ed02234a64753cdbf0c6ec096304a":["3217321f3e1d7922898c6c633d17acfa840d6875","4c61b682431fc3a1ef6cf62c8c8d835b88675a72"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e021e73178a0be1b0ff15a0894796c23f0556144","3217321f3e1d7922898c6c633d17acfa840d6875"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["922ddd897402a6df25c766ea8300443be5e82b3d","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["922ddd897402a6df25c766ea8300443be5e82b3d","0ad30c6a479e764150a3316e57263319775f1df2"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["636a04bc82e662bf141a55f1d10f52e1c76c727b","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["922ddd897402a6df25c766ea8300443be5e82b3d"],"e021e73178a0be1b0ff15a0894796c23f0556144":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["3f504512a03d978990cbff30db0522b354e846db"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["4c61b682431fc3a1ef6cf62c8c8d835b88675a72"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"922ddd897402a6df25c766ea8300443be5e82b3d":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","115923bc88e5b1dc4bef049b1ded8486723052ed"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3217321f3e1d7922898c6c633d17acfa840d6875":["28288370235ed02234a64753cdbf0c6ec096304a","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"4c61b682431fc3a1ef6cf62c8c8d835b88675a72":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","e9017cf144952056066919f1ebc7897ff9bd71b1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["f03e4bed5023ec3ef93a771b8888cae991cf448d","e9017cf144952056066919f1ebc7897ff9bd71b1","e021e73178a0be1b0ff15a0894796c23f0556144"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["0ad30c6a479e764150a3316e57263319775f1df2"],"e021e73178a0be1b0ff15a0894796c23f0556144":["ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["922ddd897402a6df25c766ea8300443be5e82b3d","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["922ddd897402a6df25c766ea8300443be5e82b3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}