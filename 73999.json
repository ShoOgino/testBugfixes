{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","commits":[{"id":"050ba1ba249733cac50c2612418b7179591d2df9","date":1374633633,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","pathOld":"/dev/null","sourceNew":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    AtomicReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    DocsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","pathOld":"/dev/null","sourceNew":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    AtomicReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    DocsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","sourceNew":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.shutdown();\n    AtomicReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    DocsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    AtomicReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    DocsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","sourceNew":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.shutdown();\n    AtomicReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    LightAutomaton automaton = new RegExp(\".*\", RegExp.NONE).toLightAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    DocsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.shutdown();\n    AtomicReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    DocsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","sourceNew":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.shutdown();\n    AtomicReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    DocsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.shutdown();\n    AtomicReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    LightAutomaton automaton = new RegExp(\".*\", RegExp.NONE).toLightAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    DocsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","sourceNew":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.shutdown();\n    AtomicReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    DocsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.shutdown();\n    AtomicReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    DocsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","sourceNew":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    AtomicReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    DocsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.shutdown();\n    AtomicReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    DocsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","sourceNew":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    LeafReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    DocsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    AtomicReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    DocsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","sourceNew":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    LeafReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    PostingsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.postings(null, null, PostingsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, null, PostingsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, null, PostingsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    LeafReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    DocsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.docs(null, null, DocsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","sourceNew":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    LeafReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    PostingsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.postings(null, null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    LeafReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    PostingsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.postings(null, null, PostingsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, null, PostingsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, null, PostingsEnum.FLAG_NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","sourceNew":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    LeafReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    PostingsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    LeafReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    PostingsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.postings(null, null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","sourceNew":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    LeafReader sub = getOnlyLeafReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    PostingsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    LeafReader sub = getOnlySegmentReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    PostingsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","date":1497408244,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","sourceNew":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    LeafReader sub = getOnlyLeafReader(r);\n    Terms terms = sub.terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    PostingsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    LeafReader sub = getOnlyLeafReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    PostingsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","sourceNew":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    LeafReader sub = getOnlyLeafReader(r);\n    Terms terms = sub.terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    PostingsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    LeafReader sub = getOnlyLeafReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    PostingsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectEmptyString().mjava","sourceNew":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    LeafReader sub = getOnlyLeafReader(r);\n    Terms terms = sub.terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    PostingsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIntersectEmptyString() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(new LogDocMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    // add empty string to both documents, so that singletonDocID == -1.\n    // For a FST-based term dict, we'll expect to see the first arc is \n    // flaged with HAS_FINAL_OUTPUT\n    doc.add(newStringField(\"field\", \"abc\", Field.Store.NO));\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    w.close();\n    LeafReader sub = getOnlyLeafReader(r);\n    Terms terms = sub.fields().terms(\"field\");\n\n    Automaton automaton = new RegExp(\".*\", RegExp.NONE).toAutomaton();  // accept ALL\n    CompiledAutomaton ca = new CompiledAutomaton(automaton, false, false);    \n\n    TermsEnum te = terms.intersect(ca, null);\n    PostingsEnum de;\n\n    assertEquals(\"\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    // pass empty string\n    te = terms.intersect(ca, new BytesRef(\"\"));\n\n    assertEquals(\"abc\", te.next().utf8ToString());\n    de = te.postings(null, PostingsEnum.NONE);\n    assertEquals(0, de.nextDoc());\n    assertEquals(1, de.nextDoc());\n\n    assertNull(te.next());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"51f5280f31484820499077f41fcdfe92d527d9dc":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"28288370235ed02234a64753cdbf0c6ec096304a":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","050ba1ba249733cac50c2612418b7179591d2df9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"050ba1ba249733cac50c2612418b7179591d2df9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["51f5280f31484820499077f41fcdfe92d527d9dc"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f948dd442d23baa6cbb28daf77c8db78b351329","050ba1ba249733cac50c2612418b7179591d2df9"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"050ba1ba249733cac50c2612418b7179591d2df9":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}