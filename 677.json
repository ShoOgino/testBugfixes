{"path":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#step(int,int).mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#step(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#step(int,char).mjava","sourceNew":"  /**\n   * Returns the state obtained by reading the given char from the given state.\n   * Returns -1 if not obtaining any such state. (If the original\n   * <code>Automaton</code> had no dead states, -1 is returned here if and only\n   * if a dead state is entered in an equivalent automaton with a total\n   * transition function.)\n   */\n  public final int step(int state, int c) {\n    if (classmap == null)\n      return transitions[state * points.length + getCharClass(c)];\n    else\n      return transitions[state * points.length + classmap[c]];\n  }\n\n","sourceOld":"  /**\n   * Returns the state obtained by reading the given char from the given state.\n   * Returns -1 if not obtaining any such state. (If the original\n   * <code>Automaton</code> had no dead states, -1 is returned here if and only\n   * if a dead state is entered in an equivalent automaton with a total\n   * transition function.)\n   */\n  public int step(int state, char c) {\n    return transitions[state * points.length + classmap[c]];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#step(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#step(int,int).mjava","sourceNew":"  /**\n   * Returns the state obtained by reading the given char from the given state.\n   * Returns -1 if not obtaining any such state. (If the original\n   * <code>Automaton</code> had no dead states, -1 is returned here if and only\n   * if a dead state is entered in an equivalent automaton with a total\n   * transition function.)\n   */\n  public final int step(int state, int c) {\n    if (classmap == null)\n      return transitions[state * points.length + getCharClass(c)];\n    else\n      return transitions[state * points.length + classmap[c]];\n  }\n\n","sourceOld":"  /**\n   * Returns the state obtained by reading the given char from the given state.\n   * Returns -1 if not obtaining any such state. (If the original\n   * <code>Automaton</code> had no dead states, -1 is returned here if and only\n   * if a dead state is entered in an equivalent automaton with a total\n   * transition function.)\n   */\n  public final int step(int state, int c) {\n    if (classmap == null)\n      return transitions[state * points.length + getCharClass(c)];\n    else\n      return transitions[state * points.length + classmap[c]];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}