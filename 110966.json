{"path":"lucene/core/src/java/org/apache/lucene/index/DocValues#getDefaultSortedSource(Type,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValues#getDefaultSortedSource(Type,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocValues#getDefaultSortedSource(Type,int).mjava","sourceNew":"  /** Returns a SortedSource that always returns default (missing)\n   *  values for all documents. */\n  public static SortedSource getDefaultSortedSource(final Type type, final int size) {\n\n    final PackedInts.Reader docToOrd = new PackedInts.Reader() {\n      @Override\n      public long get(int index) {\n        return 0;\n      }\n\n      @Override\n      public int getBitsPerValue() {\n        return 0;\n      }\n\n      @Override\n      public int size() {\n        return size;\n      }\n\n      @Override\n      public boolean hasArray() {\n        return false;\n      }\n\n      @Override\n      public Object getArray() {\n        return null;\n      }\n    };\n\n    return new SortedSource(type, BytesRef.getUTF8SortedAsUnicodeComparator()) {\n\n      @Override\n      public BytesRef getBytes(int docID, BytesRef ref) {\n        ref.length = 0;\n        return ref;\n      }\n\n      @Override\n      public int ord(int docID) {\n        return 0;\n      }\n\n      @Override\n      public BytesRef getByOrd(int ord, BytesRef bytesRef) {\n        assert ord == 0;\n        bytesRef.length = 0;\n        return bytesRef;\n      }\n\n      @Override\n      public boolean hasPackedDocToOrd() {\n        return true;\n      }\n\n      @Override\n      public PackedInts.Reader getDocToOrd() {\n        return docToOrd;\n      }\n\n      @Override\n      public int getByValue(BytesRef value, BytesRef spare) {\n        if (value.length == 0) {\n          return 0;\n        } else {\n          return -1;\n        }\n      }\n\n      @Override\n        public int getValueCount() {\n        return 1;\n      }\n    };\n  }\n\n","sourceOld":"  /** Returns a SortedSource that always returns default (missing)\n   *  values for all documents. */\n  public static SortedSource getDefaultSortedSource(final Type type, final int size) {\n\n    final PackedInts.Reader docToOrd = new PackedInts.Reader() {\n      @Override\n      public long get(int index) {\n        return 0;\n      }\n\n      @Override\n      public int getBitsPerValue() {\n        return 0;\n      }\n\n      @Override\n      public int size() {\n        return size;\n      }\n\n      @Override\n      public boolean hasArray() {\n        return false;\n      }\n\n      @Override\n      public Object getArray() {\n        return null;\n      }\n    };\n\n    return new SortedSource(type, BytesRef.getUTF8SortedAsUnicodeComparator()) {\n\n      @Override\n      public BytesRef getBytes(int docID, BytesRef ref) {\n        ref.length = 0;\n        return ref;\n      }\n\n      @Override\n      public int ord(int docID) {\n        return 0;\n      }\n\n      @Override\n      public BytesRef getByOrd(int ord, BytesRef bytesRef) {\n        assert ord == 0;\n        bytesRef.length = 0;\n        return bytesRef;\n      }\n\n      @Override\n      public boolean hasPackedDocToOrd() {\n        return true;\n      }\n\n      @Override\n      public PackedInts.Reader getDocToOrd() {\n        return docToOrd;\n      }\n\n      @Override\n      public int getByValue(BytesRef value, BytesRef spare) {\n        if (value.length == 0) {\n          return 0;\n        } else {\n          return -1;\n        }\n      }\n\n      @Override\n        public int getValueCount() {\n        return 1;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7523dd562634d9145b67eb4c8b3b3db2340532b","date":1330467618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValues#getDefaultSortedSource(Type,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValues#getDefaultSortedSource(Type,int).mjava","sourceNew":"  /** Returns a SortedSource that always returns default (missing)\n   *  values for all documents. */\n  public static SortedSource getDefaultSortedSource(final Type type, final int size) {\n\n    final PackedInts.Reader docToOrd = new PackedInts.Reader() {\n      @Override\n      public long get(int index) {\n        return 0;\n      }\n\n      @Override\n      public int getBitsPerValue() {\n        return 0;\n      }\n\n      @Override\n      public int size() {\n        return size;\n      }\n\n      @Override\n      public boolean hasArray() {\n        return false;\n      }\n\n      @Override\n      public Object getArray() {\n        return null;\n      }\n    };\n\n    return new SortedSource(type, BytesRef.getUTF8SortedAsUnicodeComparator()) {\n\n      @Override\n      public BytesRef getBytes(int docID, BytesRef ref) {\n        ref.length = 0;\n        return ref;\n      }\n\n      @Override\n      public int ord(int docID) {\n        return 0;\n      }\n\n      @Override\n      public BytesRef getByOrd(int ord, BytesRef bytesRef) {\n        assert ord == 0;\n        bytesRef.length = 0;\n        return bytesRef;\n      }\n\n      @Override\n      public boolean hasPackedDocToOrd() {\n        return true;\n      }\n\n      @Override\n      public PackedInts.Reader getDocToOrd() {\n        return docToOrd;\n      }\n\n      @Override\n      public int getOrdByValue(BytesRef value, BytesRef spare) {\n        if (value.length == 0) {\n          return 0;\n        } else {\n          return -1;\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return 1;\n      }\n    };\n  }\n\n","sourceOld":"  /** Returns a SortedSource that always returns default (missing)\n   *  values for all documents. */\n  public static SortedSource getDefaultSortedSource(final Type type, final int size) {\n\n    final PackedInts.Reader docToOrd = new PackedInts.Reader() {\n      @Override\n      public long get(int index) {\n        return 0;\n      }\n\n      @Override\n      public int getBitsPerValue() {\n        return 0;\n      }\n\n      @Override\n      public int size() {\n        return size;\n      }\n\n      @Override\n      public boolean hasArray() {\n        return false;\n      }\n\n      @Override\n      public Object getArray() {\n        return null;\n      }\n    };\n\n    return new SortedSource(type, BytesRef.getUTF8SortedAsUnicodeComparator()) {\n\n      @Override\n      public BytesRef getBytes(int docID, BytesRef ref) {\n        ref.length = 0;\n        return ref;\n      }\n\n      @Override\n      public int ord(int docID) {\n        return 0;\n      }\n\n      @Override\n      public BytesRef getByOrd(int ord, BytesRef bytesRef) {\n        assert ord == 0;\n        bytesRef.length = 0;\n        return bytesRef;\n      }\n\n      @Override\n      public boolean hasPackedDocToOrd() {\n        return true;\n      }\n\n      @Override\n      public PackedInts.Reader getDocToOrd() {\n        return docToOrd;\n      }\n\n      @Override\n      public int getByValue(BytesRef value, BytesRef spare) {\n        if (value.length == 0) {\n          return 0;\n        } else {\n          return -1;\n        }\n      }\n\n      @Override\n        public int getValueCount() {\n        return 1;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValues#getDefaultSortedSource(Type,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValues#getDefaultSortedSource(Type,int).mjava","sourceNew":"  /** Returns a SortedSource that always returns default (missing)\n   *  values for all documents. */\n  public static SortedSource getDefaultSortedSource(final Type type, final int size) {\n\n    final PackedInts.Reader docToOrd = new PackedInts.Reader() {\n      @Override\n      public long get(int index) {\n        return 0;\n      }\n\n      @Override\n      public int getBitsPerValue() {\n        return 0;\n      }\n\n      @Override\n      public int size() {\n        return size;\n      }\n\n      @Override\n      public boolean hasArray() {\n        return false;\n      }\n\n      @Override\n      public Object getArray() {\n        return null;\n      }\n    };\n\n    return new SortedSource(type, BytesRef.getUTF8SortedAsUnicodeComparator()) {\n\n      @Override\n      public BytesRef getBytes(int docID, BytesRef ref) {\n        ref.length = 0;\n        return ref;\n      }\n\n      @Override\n      public int ord(int docID) {\n        return 0;\n      }\n\n      @Override\n      public BytesRef getByOrd(int ord, BytesRef bytesRef) {\n        assert ord == 0;\n        bytesRef.length = 0;\n        return bytesRef;\n      }\n\n      @Override\n      public boolean hasPackedDocToOrd() {\n        return true;\n      }\n\n      @Override\n      public PackedInts.Reader getDocToOrd() {\n        return docToOrd;\n      }\n\n      @Override\n      public int getOrdByValue(BytesRef value, BytesRef spare) {\n        if (value.length == 0) {\n          return 0;\n        } else {\n          return -1;\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return 1;\n      }\n    };\n  }\n\n","sourceOld":"  /** Returns a SortedSource that always returns default (missing)\n   *  values for all documents. */\n  public static SortedSource getDefaultSortedSource(final Type type, final int size) {\n\n    final PackedInts.Reader docToOrd = new PackedInts.Reader() {\n      @Override\n      public long get(int index) {\n        return 0;\n      }\n\n      @Override\n      public int getBitsPerValue() {\n        return 0;\n      }\n\n      @Override\n      public int size() {\n        return size;\n      }\n\n      @Override\n      public boolean hasArray() {\n        return false;\n      }\n\n      @Override\n      public Object getArray() {\n        return null;\n      }\n    };\n\n    return new SortedSource(type, BytesRef.getUTF8SortedAsUnicodeComparator()) {\n\n      @Override\n      public BytesRef getBytes(int docID, BytesRef ref) {\n        ref.length = 0;\n        return ref;\n      }\n\n      @Override\n      public int ord(int docID) {\n        return 0;\n      }\n\n      @Override\n      public BytesRef getByOrd(int ord, BytesRef bytesRef) {\n        assert ord == 0;\n        bytesRef.length = 0;\n        return bytesRef;\n      }\n\n      @Override\n      public boolean hasPackedDocToOrd() {\n        return true;\n      }\n\n      @Override\n      public PackedInts.Reader getDocToOrd() {\n        return docToOrd;\n      }\n\n      @Override\n      public int getByValue(BytesRef value, BytesRef spare) {\n        if (value.length == 0) {\n          return 0;\n        } else {\n          return -1;\n        }\n      }\n\n      @Override\n        public int getValueCount() {\n        return 1;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"747628bb19a950ac2141b16756bdce9a47e94cc2","date":1338661284,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValues#getDefaultSortedSource(Type,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValues#getDefaultSortedSource(Type,int).mjava","sourceNew":"  /** Returns a SortedSource that always returns default (missing)\n   *  values for all documents. */\n  public static SortedSource getDefaultSortedSource(final Type type, final int size) {\n\n    final PackedInts.Reader docToOrd = new PackedInts.Reader() {\n      @Override\n      public long get(int index) {\n        return 0;\n      }\n\n      @Override\n      public int getBitsPerValue() {\n        return 0;\n      }\n\n      @Override\n      public int size() {\n        return size;\n      }\n\n      @Override\n      public boolean hasArray() {\n        return false;\n      }\n\n      @Override\n      public Object getArray() {\n        return null;\n      }\n\n      @Override\n      public int get(int index, long[] arr, int off, int len) {\n        len = Math.min(len, size() - index);\n        Arrays.fill(arr, off, off+len, 0);\n        return len;\n      }\n    };\n\n    return new SortedSource(type, BytesRef.getUTF8SortedAsUnicodeComparator()) {\n\n      @Override\n      public BytesRef getBytes(int docID, BytesRef ref) {\n        ref.length = 0;\n        return ref;\n      }\n\n      @Override\n      public int ord(int docID) {\n        return 0;\n      }\n\n      @Override\n      public BytesRef getByOrd(int ord, BytesRef bytesRef) {\n        assert ord == 0;\n        bytesRef.length = 0;\n        return bytesRef;\n      }\n\n      @Override\n      public boolean hasPackedDocToOrd() {\n        return true;\n      }\n\n      @Override\n      public PackedInts.Reader getDocToOrd() {\n        return docToOrd;\n      }\n\n      @Override\n      public int getOrdByValue(BytesRef value, BytesRef spare) {\n        if (value.length == 0) {\n          return 0;\n        } else {\n          return -1;\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return 1;\n      }\n    };\n  }\n\n","sourceOld":"  /** Returns a SortedSource that always returns default (missing)\n   *  values for all documents. */\n  public static SortedSource getDefaultSortedSource(final Type type, final int size) {\n\n    final PackedInts.Reader docToOrd = new PackedInts.Reader() {\n      @Override\n      public long get(int index) {\n        return 0;\n      }\n\n      @Override\n      public int getBitsPerValue() {\n        return 0;\n      }\n\n      @Override\n      public int size() {\n        return size;\n      }\n\n      @Override\n      public boolean hasArray() {\n        return false;\n      }\n\n      @Override\n      public Object getArray() {\n        return null;\n      }\n    };\n\n    return new SortedSource(type, BytesRef.getUTF8SortedAsUnicodeComparator()) {\n\n      @Override\n      public BytesRef getBytes(int docID, BytesRef ref) {\n        ref.length = 0;\n        return ref;\n      }\n\n      @Override\n      public int ord(int docID) {\n        return 0;\n      }\n\n      @Override\n      public BytesRef getByOrd(int ord, BytesRef bytesRef) {\n        assert ord == 0;\n        bytesRef.length = 0;\n        return bytesRef;\n      }\n\n      @Override\n      public boolean hasPackedDocToOrd() {\n        return true;\n      }\n\n      @Override\n      public PackedInts.Reader getDocToOrd() {\n        return docToOrd;\n      }\n\n      @Override\n      public int getOrdByValue(BytesRef value, BytesRef spare) {\n        if (value.length == 0) {\n          return 0;\n        } else {\n          return -1;\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return 1;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edb74c83fff94196b864e08ca033d92823252cb7","date":1339593164,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValues#getDefaultSortedSource(Type,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValues#getDefaultSortedSource(Type,int).mjava","sourceNew":"  /** Returns a SortedSource that always returns default (missing)\n   *  values for all documents. */\n  public static SortedSource getDefaultSortedSource(final Type type, final int size) {\n\n    final PackedInts.Reader docToOrd = new PackedInts.Reader() {\n      @Override\n      public long get(int index) {\n        return 0;\n      }\n\n      @Override\n      public int getBitsPerValue() {\n        return 0;\n      }\n\n      @Override\n      public int size() {\n        return size;\n      }\n\n      @Override\n      public boolean hasArray() {\n        return false;\n      }\n\n      @Override\n      public Object getArray() {\n        return null;\n      }\n\n      @Override\n      public int get(int index, long[] arr, int off, int len) {\n        len = Math.min(len, size() - index);\n        Arrays.fill(arr, off, off+len, 0);\n        return len;\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    };\n\n    return new SortedSource(type, BytesRef.getUTF8SortedAsUnicodeComparator()) {\n\n      @Override\n      public BytesRef getBytes(int docID, BytesRef ref) {\n        ref.length = 0;\n        return ref;\n      }\n\n      @Override\n      public int ord(int docID) {\n        return 0;\n      }\n\n      @Override\n      public BytesRef getByOrd(int ord, BytesRef bytesRef) {\n        assert ord == 0;\n        bytesRef.length = 0;\n        return bytesRef;\n      }\n\n      @Override\n      public boolean hasPackedDocToOrd() {\n        return true;\n      }\n\n      @Override\n      public PackedInts.Reader getDocToOrd() {\n        return docToOrd;\n      }\n\n      @Override\n      public int getOrdByValue(BytesRef value, BytesRef spare) {\n        if (value.length == 0) {\n          return 0;\n        } else {\n          return -1;\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return 1;\n      }\n    };\n  }\n\n","sourceOld":"  /** Returns a SortedSource that always returns default (missing)\n   *  values for all documents. */\n  public static SortedSource getDefaultSortedSource(final Type type, final int size) {\n\n    final PackedInts.Reader docToOrd = new PackedInts.Reader() {\n      @Override\n      public long get(int index) {\n        return 0;\n      }\n\n      @Override\n      public int getBitsPerValue() {\n        return 0;\n      }\n\n      @Override\n      public int size() {\n        return size;\n      }\n\n      @Override\n      public boolean hasArray() {\n        return false;\n      }\n\n      @Override\n      public Object getArray() {\n        return null;\n      }\n\n      @Override\n      public int get(int index, long[] arr, int off, int len) {\n        len = Math.min(len, size() - index);\n        Arrays.fill(arr, off, off+len, 0);\n        return len;\n      }\n    };\n\n    return new SortedSource(type, BytesRef.getUTF8SortedAsUnicodeComparator()) {\n\n      @Override\n      public BytesRef getBytes(int docID, BytesRef ref) {\n        ref.length = 0;\n        return ref;\n      }\n\n      @Override\n      public int ord(int docID) {\n        return 0;\n      }\n\n      @Override\n      public BytesRef getByOrd(int ord, BytesRef bytesRef) {\n        assert ord == 0;\n        bytesRef.length = 0;\n        return bytesRef;\n      }\n\n      @Override\n      public boolean hasPackedDocToOrd() {\n        return true;\n      }\n\n      @Override\n      public PackedInts.Reader getDocToOrd() {\n        return docToOrd;\n      }\n\n      @Override\n      public int getOrdByValue(BytesRef value, BytesRef spare) {\n        if (value.length == 0) {\n          return 0;\n        } else {\n          return -1;\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return 1;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValues#getDefaultSortedSource(Type,int).mjava","sourceNew":null,"sourceOld":"  /** Returns a SortedSource that always returns default (missing)\n   *  values for all documents. */\n  public static SortedSource getDefaultSortedSource(final Type type, final int size) {\n\n    final PackedInts.Reader docToOrd = new PackedInts.Reader() {\n      @Override\n      public long get(int index) {\n        return 0;\n      }\n\n      @Override\n      public int getBitsPerValue() {\n        return 0;\n      }\n\n      @Override\n      public int size() {\n        return size;\n      }\n\n      @Override\n      public boolean hasArray() {\n        return false;\n      }\n\n      @Override\n      public Object getArray() {\n        return null;\n      }\n\n      @Override\n      public int get(int index, long[] arr, int off, int len) {\n        len = Math.min(len, size() - index);\n        Arrays.fill(arr, off, off+len, 0);\n        return len;\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    };\n\n    return new SortedSource(type, BytesRef.getUTF8SortedAsUnicodeComparator()) {\n\n      @Override\n      public BytesRef getBytes(int docID, BytesRef ref) {\n        ref.length = 0;\n        return ref;\n      }\n\n      @Override\n      public int ord(int docID) {\n        return 0;\n      }\n\n      @Override\n      public BytesRef getByOrd(int ord, BytesRef bytesRef) {\n        assert ord == 0;\n        bytesRef.length = 0;\n        return bytesRef;\n      }\n\n      @Override\n      public boolean hasPackedDocToOrd() {\n        return true;\n      }\n\n      @Override\n      public PackedInts.Reader getDocToOrd() {\n        return docToOrd;\n      }\n\n      @Override\n      public int getOrdByValue(BytesRef value, BytesRef spare) {\n        if (value.length == 0) {\n          return 0;\n        } else {\n          return -1;\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return 1;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValues#getDefaultSortedSource(Type,int).mjava","sourceNew":null,"sourceOld":"  /** Returns a SortedSource that always returns default (missing)\n   *  values for all documents. */\n  public static SortedSource getDefaultSortedSource(final Type type, final int size) {\n\n    final PackedInts.Reader docToOrd = new PackedInts.Reader() {\n      @Override\n      public long get(int index) {\n        return 0;\n      }\n\n      @Override\n      public int getBitsPerValue() {\n        return 0;\n      }\n\n      @Override\n      public int size() {\n        return size;\n      }\n\n      @Override\n      public boolean hasArray() {\n        return false;\n      }\n\n      @Override\n      public Object getArray() {\n        return null;\n      }\n\n      @Override\n      public int get(int index, long[] arr, int off, int len) {\n        len = Math.min(len, size() - index);\n        Arrays.fill(arr, off, off+len, 0);\n        return len;\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    };\n\n    return new SortedSource(type, BytesRef.getUTF8SortedAsUnicodeComparator()) {\n\n      @Override\n      public BytesRef getBytes(int docID, BytesRef ref) {\n        ref.length = 0;\n        return ref;\n      }\n\n      @Override\n      public int ord(int docID) {\n        return 0;\n      }\n\n      @Override\n      public BytesRef getByOrd(int ord, BytesRef bytesRef) {\n        assert ord == 0;\n        bytesRef.length = 0;\n        return bytesRef;\n      }\n\n      @Override\n      public boolean hasPackedDocToOrd() {\n        return true;\n      }\n\n      @Override\n      public PackedInts.Reader getDocToOrd() {\n        return docToOrd;\n      }\n\n      @Override\n      public int getOrdByValue(BytesRef value, BytesRef spare) {\n        if (value.length == 0) {\n          return 0;\n        } else {\n          return -1;\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return 1;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["edb74c83fff94196b864e08ca033d92823252cb7","0837ab0472feecb3a54260729d845f839e1cbd72"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b7523dd562634d9145b67eb4c8b3b3db2340532b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["edb74c83fff94196b864e08ca033d92823252cb7"],"edb74c83fff94196b864e08ca033d92823252cb7":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"b7523dd562634d9145b67eb4c8b3b3db2340532b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["b7523dd562634d9145b67eb4c8b3b3db2340532b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7523dd562634d9145b67eb4c8b3b3db2340532b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"edb74c83fff94196b864e08ca033d92823252cb7":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"b7523dd562634d9145b67eb4c8b3b3db2340532b":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","747628bb19a950ac2141b16756bdce9a47e94cc2"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["edb74c83fff94196b864e08ca033d92823252cb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}