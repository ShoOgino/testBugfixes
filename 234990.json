{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DictionaryBrowserSupplier#get().mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DictionaryBrowserSupplier#get().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets or lazy loads the immutable {@link IndexDictionary} thread safely\n   * and creates a new {@link IndexDictionary.Browser}.\n   */\n  @Override\n  public IndexDictionary.Browser get() {\n    // This double-check idiom does not require the dictionary to be volatile\n    // because it is immutable. See section \"Double-Checked Locking Immutable Objects\"\n    // of https://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html.\n    if (dictionary == null) {\n      synchronized (this) {\n        try {\n          if (dictionary == null) {\n            dictionary = FSTDictionary.read(dictionaryInput, blockDecoder);\n          }\n        } catch (IOException e) {\n          throw new IllegalStateException(e);\n        }\n      }\n    }\n    return dictionary.browser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f6185d883389450f593fb00103d2e89a0b8336","date":1577705030,"type":4,"author":"Bruno Roustant","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DictionaryBrowserSupplier#get().mjava","sourceNew":null,"sourceOld":"  /**\n   * Gets or lazy loads the immutable {@link IndexDictionary} thread safely\n   * and creates a new {@link IndexDictionary.Browser}.\n   */\n  @Override\n  public IndexDictionary.Browser get() {\n    // This double-check idiom does not require the dictionary to be volatile\n    // because it is immutable. See section \"Double-Checked Locking Immutable Objects\"\n    // of https://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html.\n    if (dictionary == null) {\n      synchronized (this) {\n        try {\n          if (dictionary == null) {\n            dictionary = FSTDictionary.read(dictionaryInput, blockDecoder);\n          }\n        } catch (IOException e) {\n          throw new IllegalStateException(e);\n        }\n      }\n    }\n    return dictionary.browser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e478fa10594a2ef9d1ddf7d195020300453c4e","date":1577783287,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DictionaryBrowserSupplier#get().mjava","sourceNew":null,"sourceOld":"  /**\n   * Gets or lazy loads the immutable {@link IndexDictionary} thread safely\n   * and creates a new {@link IndexDictionary.Browser}.\n   */\n  @Override\n  public IndexDictionary.Browser get() {\n    // This double-check idiom does not require the dictionary to be volatile\n    // because it is immutable. See section \"Double-Checked Locking Immutable Objects\"\n    // of https://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html.\n    if (dictionary == null) {\n      synchronized (this) {\n        try {\n          if (dictionary == null) {\n            dictionary = FSTDictionary.read(dictionaryInput, blockDecoder);\n          }\n        } catch (IOException e) {\n          throw new IllegalStateException(e);\n        }\n      }\n    }\n    return dictionary.browser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42f6185d883389450f593fb00103d2e89a0b8336":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62e478fa10594a2ef9d1ddf7d195020300453c4e":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","42f6185d883389450f593fb00103d2e89a0b8336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42f6185d883389450f593fb00103d2e89a0b8336"]},"commit2Childs":{"42f6185d883389450f593fb00103d2e89a0b8336":["62e478fa10594a2ef9d1ddf7d195020300453c4e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["42f6185d883389450f593fb00103d2e89a0b8336","62e478fa10594a2ef9d1ddf7d195020300453c4e"],"62e478fa10594a2ef9d1ddf7d195020300453c4e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e478fa10594a2ef9d1ddf7d195020300453c4e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}