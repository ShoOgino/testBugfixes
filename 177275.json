{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#skipPositions().mjava","commits":[{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#skipPositions().mjava","pathOld":"/dev/null","sourceNew":"    // TODO: in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointer ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      // if (DEBUG) {\n      //   System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      // }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        int end = posBufferUpto + toSkip;\n        while(posBufferUpto < end) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n  \n          if (indexHasPayloads && payIn != null) {\n            // Skip payloadLength block:\n            forUtil.skipBlock(payIn);\n\n            // Skip payloadBytes block:\n            int numBytes = payIn.readVInt();\n            payIn.seek(payIn.getFilePointer() + numBytes);\n          }\n\n          if (indexHasOffsets && payIn != null) {\n            forUtil.skipBlock(payIn);\n            forUtil.skipBlock(payIn);\n          }\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        payloadByteUpto = 0;\n        posBufferUpto = 0;\n        while(posBufferUpto < toSkip) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n      }\n\n      position = 0;\n      lastStartOffset = 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9089237f2fb93105f12a1135e60257f4cf8ed41","date":1562086738,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#skipPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#skipPositions().mjava","sourceNew":"    // TODO: in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointer ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freqBuffer[docBufferUpto-1];\n      // if (DEBUG) {\n      //   System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      // }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        int end = posBufferUpto + toSkip;\n        while(posBufferUpto < end) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n  \n          if (indexHasPayloads && payIn != null) {\n            // Skip payloadLength block:\n            forUtil.skipBlock(payIn);\n\n            // Skip payloadBytes block:\n            int numBytes = payIn.readVInt();\n            payIn.seek(payIn.getFilePointer() + numBytes);\n          }\n\n          if (indexHasOffsets && payIn != null) {\n            forUtil.skipBlock(payIn);\n            forUtil.skipBlock(payIn);\n          }\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        payloadByteUpto = 0;\n        posBufferUpto = 0;\n        while(posBufferUpto < toSkip) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n      }\n\n      position = 0;\n      lastStartOffset = 0;\n    }\n\n","sourceOld":"    // TODO: in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointer ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      // if (DEBUG) {\n      //   System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      // }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        int end = posBufferUpto + toSkip;\n        while(posBufferUpto < end) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n  \n          if (indexHasPayloads && payIn != null) {\n            // Skip payloadLength block:\n            forUtil.skipBlock(payIn);\n\n            // Skip payloadBytes block:\n            int numBytes = payIn.readVInt();\n            payIn.seek(payIn.getFilePointer() + numBytes);\n          }\n\n          if (indexHasOffsets && payIn != null) {\n            forUtil.skipBlock(payIn);\n            forUtil.skipBlock(payIn);\n          }\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        payloadByteUpto = 0;\n        posBufferUpto = 0;\n        while(posBufferUpto < toSkip) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n      }\n\n      position = 0;\n      lastStartOffset = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#skipPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#skipPositions().mjava","sourceNew":"    // TODO: in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointer ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freqBuffer[docBufferUpto-1];\n      // if (DEBUG) {\n      //   System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      // }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        int end = posBufferUpto + toSkip;\n        while(posBufferUpto < end) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n  \n          if (indexHasPayloads && payIn != null) {\n            // Skip payloadLength block:\n            forUtil.skipBlock(payIn);\n\n            // Skip payloadBytes block:\n            int numBytes = payIn.readVInt();\n            payIn.seek(payIn.getFilePointer() + numBytes);\n          }\n\n          if (indexHasOffsets && payIn != null) {\n            forUtil.skipBlock(payIn);\n            forUtil.skipBlock(payIn);\n          }\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        payloadByteUpto = 0;\n        posBufferUpto = 0;\n        while(posBufferUpto < toSkip) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n      }\n\n      position = 0;\n      lastStartOffset = 0;\n    }\n\n","sourceOld":"    // TODO: in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointer ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freqBuffer[docBufferUpto-1];\n      // if (DEBUG) {\n      //   System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      // }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        int end = posBufferUpto + toSkip;\n        while(posBufferUpto < end) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n  \n          if (indexHasPayloads && payIn != null) {\n            // Skip payloadLength block:\n            forUtil.skipBlock(payIn);\n\n            // Skip payloadBytes block:\n            int numBytes = payIn.readVInt();\n            payIn.seek(payIn.getFilePointer() + numBytes);\n          }\n\n          if (indexHasOffsets && payIn != null) {\n            forUtil.skipBlock(payIn);\n            forUtil.skipBlock(payIn);\n          }\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        payloadByteUpto = 0;\n        posBufferUpto = 0;\n        while(posBufferUpto < toSkip) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n      }\n\n      position = 0;\n      lastStartOffset = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a9089237f2fb93105f12a1135e60257f4cf8ed41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9089237f2fb93105f12a1135e60257f4cf8ed41":["622a708571e534680618b3c5e0c28ac539a47776"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["622a708571e534680618b3c5e0c28ac539a47776"],"622a708571e534680618b3c5e0c28ac539a47776":["a9089237f2fb93105f12a1135e60257f4cf8ed41"],"a9089237f2fb93105f12a1135e60257f4cf8ed41":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}