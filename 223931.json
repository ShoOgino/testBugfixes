{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","commits":[{"id":"69da1c397a55d488a19e555c8da635417e2dfd47","date":1365020983,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","pathOld":"/dev/null","sourceNew":"    private boolean seekExact(Cell cell) throws IOException {\n      assert new BytesRef(cell.getTokenBytes()).compareTo(termBytes) > 0;\n\n      termBytes.bytes = cell.getTokenBytes();\n      termBytes.length = termBytes.bytes.length;\n      return termsEnum.seekExact(termBytes, cell.getLevel() <= 2);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["656f7931e8a3dc60676fe66839b7fa03afbe8098"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","sourceNew":"    private boolean seekExact(Cell cell) throws IOException {\n      assert new BytesRef(cell.getTokenBytes()).compareTo(termBytes) > 0;\n\n      termBytes.bytes = cell.getTokenBytes();\n      termBytes.length = termBytes.bytes.length;\n      return termsEnum.seekExact(termBytes);\n    }\n\n","sourceOld":"    private boolean seekExact(Cell cell) throws IOException {\n      assert new BytesRef(cell.getTokenBytes()).compareTo(termBytes) > 0;\n\n      termBytes.bytes = cell.getTokenBytes();\n      termBytes.length = termBytes.bytes.length;\n      return termsEnum.seekExact(termBytes, cell.getLevel() <= 2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"656f7931e8a3dc60676fe66839b7fa03afbe8098","date":1374722646,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","sourceNew":"    private boolean seekExact(Cell cell) throws IOException {\n      assert new BytesRef(cell.getTokenBytes()).compareTo(termBytes) > 0;\n      termBytes.bytes = cell.getTokenBytes();\n      termBytes.length = termBytes.bytes.length;\n      if (termsEnum == null)\n        return false;\n      return termsEnum.seekExact(termBytes);\n    }\n\n","sourceOld":"    private boolean seekExact(Cell cell) throws IOException {\n      assert new BytesRef(cell.getTokenBytes()).compareTo(termBytes) > 0;\n\n      termBytes.bytes = cell.getTokenBytes();\n      termBytes.length = termBytes.bytes.length;\n      return termsEnum.seekExact(termBytes);\n    }\n\n","bugFix":["69da1c397a55d488a19e555c8da635417e2dfd47"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","sourceNew":"    private boolean seekExact(Cell cell) throws IOException {\n      assert new BytesRef(cell.getTokenBytes()).compareTo(termBytes) > 0;\n      termBytes.bytes = cell.getTokenBytes();\n      termBytes.length = termBytes.bytes.length;\n      if (termsEnum == null)\n        return false;\n      return termsEnum.seekExact(termBytes);\n    }\n\n","sourceOld":"    private boolean seekExact(Cell cell) throws IOException {\n      assert new BytesRef(cell.getTokenBytes()).compareTo(termBytes) > 0;\n\n      termBytes.bytes = cell.getTokenBytes();\n      termBytes.length = termBytes.bytes.length;\n      return termsEnum.seekExact(termBytes, cell.getLevel() <= 2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4de14be4bd1b857ba37ca138b61c4661c6d1bed3","date":1396628861,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","sourceNew":"    private boolean seekExact(Cell cell) throws IOException {\n      assert cell.getTokenBytesNoLeaf(null).compareTo(termBytes) > 0;\n      cell.getTokenBytesNoLeaf(termBytes);\n      if (termsEnum == null)\n        return false;\n      return termsEnum.seekExact(termBytes);\n    }\n\n","sourceOld":"    private boolean seekExact(Cell cell) throws IOException {\n      assert new BytesRef(cell.getTokenBytes()).compareTo(termBytes) > 0;\n      termBytes.bytes = cell.getTokenBytes();\n      termBytes.length = termBytes.bytes.length;\n      if (termsEnum == null)\n        return false;\n      return termsEnum.seekExact(termBytes);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","sourceNew":"    private boolean seekExact(Cell cell) throws IOException {\n      assert cell.getTokenBytesNoLeaf(null).compareTo(termBytes) > 0;\n      cell.getTokenBytesNoLeaf(termBytes);\n      if (termsEnum == null)\n        return false;\n      return termsEnum.seekExact(termBytes);\n    }\n\n","sourceOld":"    private boolean seekExact(Cell cell) throws IOException {\n      assert new BytesRef(cell.getTokenBytes()).compareTo(termBytes) > 0;\n      termBytes.bytes = cell.getTokenBytes();\n      termBytes.length = termBytes.bytes.length;\n      if (termsEnum == null)\n        return false;\n      return termsEnum.seekExact(termBytes);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","date":1397789149,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","sourceNew":"    private boolean seekExact(Cell cell) throws IOException {\n      assert cell.getTokenBytesNoLeaf(null).compareTo(termBytes) > 0;\n      if (termsEnum == null)\n        return false;\n      termBytes = cell.getTokenBytesNoLeaf(termBytes);\n      return termsEnum.seekExact(termBytes);\n    }\n\n","sourceOld":"    private boolean seekExact(Cell cell) throws IOException {\n      assert cell.getTokenBytesNoLeaf(null).compareTo(termBytes) > 0;\n      cell.getTokenBytesNoLeaf(termBytes);\n      if (termsEnum == null)\n        return false;\n      return termsEnum.seekExact(termBytes);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52a496588fdabf2930f84b7839253fef004251f","date":1400016188,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","sourceNew":"    private boolean seekExact(Cell cell) throws IOException {\n      assert cell.getTokenBytesNoLeaf(null).compareTo(termBytes) > 0;\n      if (termsEnum == null)\n        return false;\n      termBytes = cell.getTokenBytesNoLeaf(termBytes);\n      assert assertCloneTermBytes(); //assertions look at termBytes later on\n      return termsEnum.seekExact(termBytes);\n    }\n\n","sourceOld":"    private boolean seekExact(Cell cell) throws IOException {\n      assert cell.getTokenBytesNoLeaf(null).compareTo(termBytes) > 0;\n      if (termsEnum == null)\n        return false;\n      termBytes = cell.getTokenBytesNoLeaf(termBytes);\n      return termsEnum.seekExact(termBytes);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a957bf27202eab1c9ddabc5aa30c7a0db04bbf36","date":1400053604,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","sourceNew":"    private boolean seekExact(Cell cell) throws IOException {\n      assert cell.getTokenBytesNoLeaf(null).compareTo(termBytes) > 0;\n      if (termsEnum == null)\n        return false;\n      termBytes = cell.getTokenBytesNoLeaf(termBytes);\n      assert assertCloneTermBytes(); //assertions look at termBytes later on\n      return termsEnum.seekExact(termBytes);\n    }\n\n","sourceOld":"    private boolean seekExact(Cell cell) throws IOException {\n      assert cell.getTokenBytesNoLeaf(null).compareTo(termBytes) > 0;\n      if (termsEnum == null)\n        return false;\n      termBytes = cell.getTokenBytesNoLeaf(termBytes);\n      return termsEnum.seekExact(termBytes);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0","date":1426015524,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","sourceNew":null,"sourceOld":"    private boolean seekExact(Cell cell) throws IOException {\n      assert cell.getTokenBytesNoLeaf(null).compareTo(termBytes) > 0;\n      if (termsEnum == null)\n        return false;\n      termBytes = cell.getTokenBytesNoLeaf(termBytes);\n      assert assertCloneTermBytes(); //assertions look at termBytes later on\n      return termsEnum.seekExact(termBytes);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#seekExact(Cell).mjava","sourceNew":null,"sourceOld":"    private boolean seekExact(Cell cell) throws IOException {\n      assert cell.getTokenBytesNoLeaf(null).compareTo(termBytes) > 0;\n      if (termsEnum == null)\n        return false;\n      termBytes = cell.getTokenBytesNoLeaf(termBytes);\n      assert assertCloneTermBytes(); //assertions look at termBytes later on\n      return termsEnum.seekExact(termBytes);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a52a496588fdabf2930f84b7839253fef004251f":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a52a496588fdabf2930f84b7839253fef004251f","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"69da1c397a55d488a19e555c8da635417e2dfd47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["656f7931e8a3dc60676fe66839b7fa03afbe8098","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["69da1c397a55d488a19e555c8da635417e2dfd47"],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["656f7931e8a3dc60676fe66839b7fa03afbe8098"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"a957bf27202eab1c9ddabc5aa30c7a0db04bbf36":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","a52a496588fdabf2930f84b7839253fef004251f"],"656f7931e8a3dc60676fe66839b7fa03afbe8098":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["a52a496588fdabf2930f84b7839253fef004251f"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["69da1c397a55d488a19e555c8da635417e2dfd47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"]},"commit2Childs":{"a52a496588fdabf2930f84b7839253fef004251f":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a957bf27202eab1c9ddabc5aa30c7a0db04bbf36","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"69da1c397a55d488a19e555c8da635417e2dfd47":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69da1c397a55d488a19e555c8da635417e2dfd47"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["a52a496588fdabf2930f84b7839253fef004251f","a957bf27202eab1c9ddabc5aa30c7a0db04bbf36"],"a957bf27202eab1c9ddabc5aa30c7a0db04bbf36":[],"656f7931e8a3dc60676fe66839b7fa03afbe8098":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["656f7931e8a3dc60676fe66839b7fa03afbe8098"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","15e323346eac5e4685c0a9f2df85eb96b4239bbb","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","a957bf27202eab1c9ddabc5aa30c7a0db04bbf36","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}