{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLargeTest#doTest().mjava","commits":[{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLargeTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    this.stress = 0 ;\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    setupDistributedPivotFacetDocuments();\n    \n    QueryResponse rsp = null;\n    \n    List<PivotField> pivots = null;\n    PivotField firstInt = null;\n    PivotField firstBool = null;\n    PivotField firstDate = null;\n    PivotField firstPlace = null;\n    PivotField firstCompany = null;\n\n    // basic check w/ limit & default sort (count)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"12\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(12, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // trivial mincount=0 check\n    rsp = query( \"q\", \"does_not_exist_s:foo\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"company_t\",\n                 FacetParams.FACET_LIMIT, \"10\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    pivots = rsp.getFacetPivot().get(\"company_t\");\n    assertEquals(10, pivots.size());\n    for (PivotField p : pivots) {\n      assertEquals(0, p.getCount());\n    }\n\n    // sanity check limit=0 w/ mincount=0 & missing=true\n    //\n    // SOLR-6328: doesn't work for single node, so can't work for distrib either (yet)\n    //\n    // PivotFacetField's init of needRefinementAtThisLevel as needing potential change\n    // \n    // rsp = query( \"q\", \"*:*\",\n    //              \"rows\", \"0\",\n    //              \"facet\",\"true\",\n    //              \"f.company_t.facet.limit\", \"10\",\n    //              \"facet.pivot\",\"special_s,bogus_s,company_t\",\n    //              \"facet.missing\", \"true\",\n    //              FacetParams.FACET_LIMIT, \"0\",\n    //              FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    // pivots = rsp.getFacetPivot().get(\"special_s,bogus_s,company_t\");\n    // assertEquals(1, pivots.size()); // only the missing\n    // assertPivot(\"special_s\", null, docNumber - 5, pivots.get(0)); // 5 docs w/special_s\n    // assertEquals(pivots.toString(), 1, pivots.get(0).getPivot());\n    // assertPivot(\"bogus_s\", null, docNumber, pivots.get(0).getPivot().get(0));\n    // // TODO: some asserts on company results\n\n    // basic check w/ default sort, limit, & mincount==0\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"50\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(50, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // sort=index + offset + limit w/ some variables\n    for (SolrParams variableParams : \n           new SolrParams[] { // bother variations should kwrk just as well\n             // defauts\n             params(),\n             // force refinement\n             params(FacetParams.FACET_OVERREQUEST_RATIO, \"1\", \n                    FacetParams.FACET_OVERREQUEST_COUNT, \"0\")           }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"f.place_s.facet.limit\", \"20\",\n                                                      \"f.place_s.facet.offset\", \"40\",\n                                                      \"facet.pivot\", \"place_s,company_t\"),\n                                              variableParams );\n\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(20, pivots.size()); // limit\n        for (int i = 0; i < 10; i++) {\n          PivotField place = pivots.get(i); \n          assertTrue(place.toString(), place.getValue().toString().endsWith(\"placeholder\"));\n          assertEquals(3, place.getPivot().size());\n          assertPivot(\"company_t\", \"bbc\", 6, place.getPivot().get(0));\n          assertPivot(\"company_t\", \"microsoft\", 6, place.getPivot().get(1));\n          assertPivot(\"company_t\", \"polecat\", 6, place.getPivot().get(2));\n        }\n        assertPivot(\"place_s\", \"cardiff\", 257, pivots.get(10));\n        assertPivot(\"place_s\", \"krakaw\", 1, pivots.get(11));\n        assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, pivots.get(12));\n        for (int i = 13; i < 20; i++) {\n          PivotField place = pivots.get(i); \n          assertTrue(place.toString(), place.getValue().toString().startsWith(\"placeholder\"));\n          assertEquals(1, place.getPivot().size());\n          PivotField company = place.getPivot().get(0);\n          assertTrue(company.toString(), company.getValue().toString().startsWith(\"compholder\"));\n          assertEquals(company.toString(), 1, company.getCount());\n        }\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount=0\n    //\n    // SOLR-6329: facet.pivot.mincount=0 doesn't work well with distrib\n    //\n    // broken honda\n    //\n    // This is tricky, here's what i think is happening.... \n    // - \"company:honda\" only exists on twoShard, and only w/ \"place:cardiff\"\n    // - twoShard has no other places in it's docs\n    // - twoShard can't return any other places to w/ honda as a count=0 sub-value\n    // - if we refined all other companies places, would twoShard return honda==0 ?\n    //   ... but there's no refinement since mincount==0\n    // - would it even matter\n    //\n    // should we remove the refinement short circut?\n    //\n    // rsp = query( params( \"q\", \"*:*\",\n    //                      \"rows\", \"0\",\n    //                      \"facet\",\"true\",\n    //                      \"facet.sort\",\"index\",\n    //                      \"f.place_s.facet.limit\", \"20\",\n    //                      \"f.place_s.facet.offset\", \"40\",\n    //                      FacetParams.FACET_PIVOT_MINCOUNT,\"0\",\n    //                      \"facet.pivot\", \"place_s,company_t\") );\n    // // TODO: more asserts\n    //\n    //\n    // really trivial demonstration of the above problem\n    // \n    // rsp = query( params( \"q\", \"*:*\",\n    //                      \"rows\", \"0\",\n    //                      \"facet\",\"true\",\n    //                      FacetParams.FACET_PIVOT_MINCOUNT,\"0\",\n    //                      \"facet.pivot\", \"top_s,sub_s\") );\n\n    // basic check w/ limit & index sort\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether local params are used\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params(\"facet.pivot\",\"{!facet.limit=4 facet.sort=index}place_s,company_t\"),\n             // params(\"facet.pivot\",\"{!facet.sort=index}place_s,company_t\",\n             //        FacetParams.FACET_LIMIT, \"4\"),\n             params(\"facet.pivot\",\"place_s,company_t\",\n                    FacetParams.FACET_LIMIT, \"4\",\n                    \"facet.sort\", \"index\")                                  }) {\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\"), \n                                              facetParams );\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(4, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n        firstCompany = firstPlace.getPivot().get(0);\n        assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Pivot Faceting (combined wtih Field Faceting)\n    for (SolrParams facetParams : \n           // with and w/o an excluded fq\n           // (either way, facet results should be the same)\n           new SolrParams[] { \n             params(\"facet.pivot\",\"place_s,company_t\",\n                    \"facet.field\",\"place_s\"),\n             params(\"facet.pivot\",\"{!ex=ok}place_s,company_t\",\n                    \"facet.field\",\"{!ex=ok}place_s\",\n                    \"fq\",\"{!tag=ok}place_s:cardiff\"),\n             params(\"facet.pivot\",\"{!ex=pl,co}place_s,company_t\",\n                    \"fq\",\"{!tag=pl}place_s:cardiff\",\n                    \"fq\",\"{!tag=co}company_t:bbc\")                      }) {\n      \n      // default order (count)\n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  FacetParams.FACET_LIMIT, \"4\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(4, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n      assertEquals(4, firstPlace.getPivot().size());\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n\n      // Index Order\n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  FacetParams.FACET_LIMIT, \"4\",\n                                                  \"facet.sort\", \"index\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(4, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n      assertEquals(3, firstPlace.getPivot().size()); // num vals in data < limit==3\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n      \n      // Field level limits \n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  \"f.place_s.facet.limit\",\"2\",\n                                                  \"f.company_t.facet.limit\",\"4\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(2, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n      assertEquals(4, firstPlace.getPivot().size());\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n    }\n\n    // Pivot Faceting Count w/fq (not excluded)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"place_s:cardiff\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(1, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n\n\n    // Same Pivot - one with exclusion and one w/o\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"{!tag=ff}pay_i:[2000 TO *]\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"{!key=filt}place_s,company_t\",\n                 \"facet.pivot\",\"{!key=nofilt ex=ff}place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"filt\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 105, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"microsoft\", 54, firstPlace.getPivot().get(1));\n    //\n    pivots = rsp.getFacetPivot().get(\"nofilt\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // Same Pivot - one in default (count) order and one in index order\n    //\n    // Broken: SOLR-6193 - the facet.sort localparam isn't being picked up correctly\n    //\n    // rsp = query( \"q\", \"*:*\",\n    //              \"rows\", \"0\",\n    //              \"facet\",\"true\",\n    //              \"fq\",\"pay_i:[2000 TO *]\",\n    //              \"facet.pivot\",\"{!key=sc}place_s,company_t\",\n    //              \"facet.pivot\",\"{!key=si facet.sort=index}place_s,company_t\",\n    //              FacetParams.FACET_LIMIT, \"4\");\n    // pivots = rsp.getFacetPivot().get(\"sc\");\n    // assertEquals(4, pivots.size());\n    // firstPlace = pivots.get(0);\n    // assertPivot(\"place_s\", \"cardiff\", 105, firstPlace); \n    // assertEquals(4, firstPlace.getPivot().size());\n    // assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // assertPivot(\"company_t\", \"microsoft\", 54, firstPlace.getPivot().get(1));\n    // //\n    // pivots = rsp.getFacetPivot().get(\"si\");\n    // assertEquals(4, pivots.size());\n    // firstPlace = pivots.get(0);\n    // assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace); \n    // assertEquals(3, firstPlace.getPivot().size()); // only 3 in the data < facet.limit\n    // assertPivot(\"company_t\", \"bbc\", 6, firstPlace.getPivot().get(0));\n    // assertPivot(\"company_t\", \"microsoft\", 6, firstPlace.getPivot().get(1));\n\n\n    // Field level limits and small offset\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 \"f.place_s.facet.limit\",\"2\",\n                 \"f.company_t.facet.limit\",\"4\",\n                 \"facet.offset\",\"1\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, firstPlace);\n    assertEquals(2, firstPlace.getPivot().size()); // num vals in data < limit==4\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 50, firstCompany);\n    \n    \n    // Field level offsets and limit\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"{!tag=pl}place_s:cardiff\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"{!ex=pl}place_s,company_t\",\n                 \"f.place_s.facet.offset\",\"1\",\n                 \"f.company_t.facet.offset\",\"2\",\n                 FacetParams.FACET_LIMIT, \"4\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size()); // num vals in data < limit==4\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"polecat\", 50, firstCompany);\n     \n\n    // datetime\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"hiredate_dt,place_s,company_t\",\n                 \"f.hiredate_dt.facet.limit\",\"2\",\n                 \"f.hiredate_dt.facet.offset\",\"1\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"hiredate_dt,place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstDate = pivots.get(0); // 2012-09-01T12:30:00Z\n    assertPivot(\"hiredate_dt\", new Date(1346502600000L), 200, firstDate);\n    assertEquals(1, firstDate.getPivot().size()); // num vals in data < limit==4\n    firstPlace = firstDate.getPivot().get(0);\n    assertPivot(\"place_s\", \"cardiff\", 200, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 50, firstCompany);\n\n    // int\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"pay_i,place_s,company_t\",\n                 \"f.pay_i.facet.limit\",\"2\",\n                 \"f.pay_i.facet.offset\",\"1\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"pay_i,place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstInt = pivots.get(0);\n    assertPivot(\"pay_i\", 2000, 50, firstInt);\n    assertEquals(4, firstInt.getPivot().size());\n    firstPlace = firstInt.getPivot().get(0);\n    assertPivot(\"place_s\", \"0placeholder\", 1, firstPlace);\n    assertEquals(3, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 1, firstCompany);\n    \n    // boolean\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"real_b,place_s,company_t\",\n                 \"f.real_b.facet.missing\",\"true\",\n                 \"f.real_b.facet.limit\",\"2\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"real_b,place_s,company_t\");\n    assertEquals(3, pivots.size());\n    firstBool = pivots.get(0);\n    assertPivot(\"real_b\", false, 300, firstBool);\n    assertEquals(4, firstBool.getPivot().size());\n    firstPlace = firstBool.getPivot().get(0);\n    assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n    assertEquals(3, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n    \n    // bogus fields\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"doesntexist_t,neitherdoi_i\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"doesntexist_t,neitherdoi_i\");\n    assertEquals(0, pivots.size());\n\n    // bogus fields with facet.missing\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"doesntexist_t,neitherdoi_i\",\n                 \"facet.missing\", \"true\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"doesntexist_t,neitherdoi_i\");\n    assertEquals(1, pivots.size());\n    assertPivot(\"doesntexist_t\", null, docNumber, pivots.get(0));\n    assertEquals(1, pivots.get(0).getPivot().size());\n    assertPivot(\"neitherdoi_i\", null, docNumber, pivots.get(0).getPivot().get(0));\n\n    // Negative facet limit\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether facet.limit is global, \n           // a local param, or specified as a per-field override for both fields\n           new SolrParams[] {\n             params(FacetParams.FACET_LIMIT, \"-1\",\n                    \"facet.pivot\",\"place_s,company_t\"),\n             // Broken: SOLR-6193\n             // params(\"facet.pivot\",\"{!facet.limit=-1}place_s,company_t\"),    \n             params(\"f.place_s.facet.limit\", \"-1\",\n                    \"f.company_t.facet.limit\", \"-1\",\n                    \"facet.pivot\",\"place_s,company_t\")                       }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(103, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(54, firstPlace.getPivot().size());\n        firstCompany = firstPlace.getPivot().get(0);\n        assertPivot(\"company_t\",\"bbc\", 101, firstCompany);\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Negative per-field facet limit (outer)\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether per-field facet.limit is \n           // a global or a local param\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params( \"facet.pivot\",\"{!f.id.facet.limit=-1}place_s,id\" ),\n             params( \"facet.pivot\",\"place_s,id\",\n                     \"f.id.facet.limit\", \"-1\")                            }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\", \n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,id\");\n        assertEquals(100, pivots.size()); // default\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(257, firstPlace.getPivot().size());\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Negative per-field facet limit (inner)\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether per-field facet.limit is \n           // a global or a local param\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params( \"facet.pivot\",\"{!f.place_s.facet.limit=-1}place_s,id\" ),\n             params( \"facet.pivot\",\"place_s,id\",\n                     \"f.place_s.facet.limit\", \"-1\")                       }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\", \n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,id\");\n        assertEquals(103, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(100, firstPlace.getPivot().size()); // default\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n    \n    // Mincount + facet.pivot 2 different ways (swap field order)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 \"facet.pivot\",\"company_t,place_s\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"6\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(52, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n    //\n    pivots = rsp.getFacetPivot().get(\"company_t,place_s\");\n    assertEquals(4, pivots.size());\n    firstCompany = pivots.get(0);\n    assertPivot(\"company_t\", \"bbc\", 451, firstCompany);\n    assertEquals(52, firstCompany.getPivot().size());\n    firstPlace = firstCompany.getPivot().get(0);\n    assertPivot(\"place_s\", \"cardiff\", 101, firstPlace);\n\n    // refine on SPECIAL empty string\n    rsp = query( \"q\", \"*:*\",\n                 \"fq\", \"-place_s:0placeholder\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.limit\",\"1\",\n                 FacetParams.FACET_OVERREQUEST_RATIO, \"0\", // force refinement\n                 FacetParams.FACET_OVERREQUEST_COUNT, \"1\", // force refinement\n                 \"facet.pivot\",\"special_s,company_t\");\n    assertEquals(docNumber - 6, rsp.getResults().getNumFound()); // all docs but 0place\n    pivots = rsp.getFacetPivot().get(\"special_s,company_t\");\n    assertEquals(1, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"special_s\", SPECIAL, 3, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"microsoft\", 2, firstCompany);\n\n    // TODO test \"company_t,special_s\" as well\n\n\n    // refine on SPECIAL empty string & facet.missing\n    // Also proves refinement on non-top elements occurs and allows them to get into the top\n    rsp = query( \"q\", \"*:*\",\n                 \"fq\", \"-place_s:0placeholder\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.limit\",\"1\",\n                 \"facet.missing\",\"true\",\n                 FacetParams.FACET_OVERREQUEST_RATIO, \"0\", // force refinement\n                 FacetParams.FACET_OVERREQUEST_COUNT, \"2\", // force refinement\n                 \"facet.pivot\",\"special_s,company_t\");\n    assertEquals(docNumber - 6, rsp.getResults().getNumFound()); // all docs but 0place\n    pivots = rsp.getFacetPivot().get(\"special_s,company_t\");\n    assertEquals(2, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"special_s\", SPECIAL, 3, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"microsoft\", 2, firstCompany);\n    // last is \"missing\" val\n    assertPivot(\"special_s\", null, docNumber -6 -3 -2, pivots.get(1)); // -0place -SPECIAL -xxx\n\n    // forced refinement on facet.missing\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"f.bogus_x_s.facet.missing\",\"true\",\n                 \"f.bogus_y_s.facet.missing\",\"true\",\n                 \"facet.pivot\",\"bogus_x_s,place_s,bogus_y_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"12\"); \n    pivots = rsp.getFacetPivot().get(\"bogus_x_s,place_s,bogus_y_s,company_t\");\n    assertEquals(1, pivots.size()); // just the missing value for bogus_x_s\n    assertPivot(\"bogus_x_s\", null, docNumber, pivots.get(0));\n    pivots = pivots.get(0).getPivot();\n    assertEquals(12, pivots.size()); // places\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size()); // just the missing value for bogus_y_s\n    assertPivot(\"bogus_y_s\", null, 257, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0).getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(0).getPivot().get(1));\n\n\n\n\n\n    // Overrequesting a lot\n    this.query( \"q\", \"*:*\",\n                \"rows\", \"0\",\n                \"facet\", \"true\",\n                \"facet.pivot\",\"place_s,company_t\",\n                FacetParams.FACET_OVERREQUEST_RATIO, \"10\",\n                FacetParams.FACET_OVERREQUEST_COUNT, \"100\");    \n    \n    // Overrequesting off\n    this.query( \"q\", \"*:*\",\n                \"rows\", \"0\",\n                \"facet\", \"true\",\n                \"facet.pivot\",\"place_s,company_t\",\n                FacetParams.FACET_OVERREQUEST_RATIO, \"0\",\n                FacetParams.FACET_OVERREQUEST_COUNT, \"0\");\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7679cc7d5b465ec8936979698cedf5fdbd71c95c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c18a95e9168a30be855f5d5e7d61a863186fdc5","date":1415142581,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLargeTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLargeTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    this.stress = 0 ;\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    setupDistributedPivotFacetDocuments();\n    \n    QueryResponse rsp = null;\n    \n    List<PivotField> pivots = null;\n    PivotField firstInt = null;\n    PivotField firstBool = null;\n    PivotField firstDate = null;\n    PivotField firstPlace = null;\n    PivotField firstCompany = null;\n\n    // basic check w/ limit & default sort (count)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"12\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(12, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // trivial mincount=0 check\n    rsp = query( \"q\", \"does_not_exist_s:foo\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"company_t\",\n                 FacetParams.FACET_LIMIT, \"10\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    pivots = rsp.getFacetPivot().get(\"company_t\");\n    assertEquals(10, pivots.size());\n    for (PivotField p : pivots) {\n      assertEquals(0, p.getCount());\n    }\n\n    // sanity check limit=0 w/ mincount=0 & missing=true\n    //\n    // SOLR-6328: doesn't work for single node, so can't work for distrib either (yet)\n    //\n    // PivotFacetField's init of needRefinementAtThisLevel as needing potential change\n    // \n    // rsp = query( \"q\", \"*:*\",\n    //              \"rows\", \"0\",\n    //              \"facet\",\"true\",\n    //              \"f.company_t.facet.limit\", \"10\",\n    //              \"facet.pivot\",\"special_s,bogus_s,company_t\",\n    //              \"facet.missing\", \"true\",\n    //              FacetParams.FACET_LIMIT, \"0\",\n    //              FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    // pivots = rsp.getFacetPivot().get(\"special_s,bogus_s,company_t\");\n    // assertEquals(1, pivots.size()); // only the missing\n    // assertPivot(\"special_s\", null, docNumber - 5, pivots.get(0)); // 5 docs w/special_s\n    // assertEquals(pivots.toString(), 1, pivots.get(0).getPivot());\n    // assertPivot(\"bogus_s\", null, docNumber, pivots.get(0).getPivot().get(0));\n    // // TODO: some asserts on company results\n\n    // basic check w/ default sort, limit, & mincount==0\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"50\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(50, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // sort=index + offset + limit w/ some variables\n    for (SolrParams variableParams : \n           new SolrParams[] { // bother variations should kwrk just as well\n             // defauts\n             params(),\n             // force refinement\n             params(FacetParams.FACET_OVERREQUEST_RATIO, \"1\", \n                    FacetParams.FACET_OVERREQUEST_COUNT, \"0\")           }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"f.place_s.facet.limit\", \"20\",\n                                                      \"f.place_s.facet.offset\", \"40\",\n                                                      \"facet.pivot\", \"place_s,company_t\"),\n                                              variableParams );\n\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(20, pivots.size()); // limit\n        for (int i = 0; i < 10; i++) {\n          PivotField place = pivots.get(i); \n          assertTrue(place.toString(), place.getValue().toString().endsWith(\"placeholder\"));\n          assertEquals(3, place.getPivot().size());\n          assertPivot(\"company_t\", \"bbc\", 6, place.getPivot().get(0));\n          assertPivot(\"company_t\", \"microsoft\", 6, place.getPivot().get(1));\n          assertPivot(\"company_t\", \"polecat\", 6, place.getPivot().get(2));\n        }\n        assertPivot(\"place_s\", \"cardiff\", 257, pivots.get(10));\n        assertPivot(\"place_s\", \"krakaw\", 1, pivots.get(11));\n        assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, pivots.get(12));\n        for (int i = 13; i < 20; i++) {\n          PivotField place = pivots.get(i); \n          assertTrue(place.toString(), place.getValue().toString().startsWith(\"placeholder\"));\n          assertEquals(1, place.getPivot().size());\n          PivotField company = place.getPivot().get(0);\n          assertTrue(company.toString(), company.getValue().toString().startsWith(\"compholder\"));\n          assertEquals(company.toString(), 1, company.getCount());\n        }\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount=0\n    //\n    // SOLR-6329: facet.pivot.mincount=0 doesn't work well with distrib\n    //\n    // broken honda\n    //\n    // This is tricky, here's what i think is happening.... \n    // - \"company:honda\" only exists on twoShard, and only w/ \"place:cardiff\"\n    // - twoShard has no other places in it's docs\n    // - twoShard can't return any other places to w/ honda as a count=0 sub-value\n    // - if we refined all other companies places, would twoShard return honda==0 ?\n    //   ... but there's no refinement since mincount==0\n    // - would it even matter\n    //\n    // should we remove the refinement short circut?\n    //\n    // rsp = query( params( \"q\", \"*:*\",\n    //                      \"rows\", \"0\",\n    //                      \"facet\",\"true\",\n    //                      \"facet.sort\",\"index\",\n    //                      \"f.place_s.facet.limit\", \"20\",\n    //                      \"f.place_s.facet.offset\", \"40\",\n    //                      FacetParams.FACET_PIVOT_MINCOUNT,\"0\",\n    //                      \"facet.pivot\", \"place_s,company_t\") );\n    // // TODO: more asserts\n    //\n    //\n    // really trivial demonstration of the above problem\n    // \n    // rsp = query( params( \"q\", \"*:*\",\n    //                      \"rows\", \"0\",\n    //                      \"facet\",\"true\",\n    //                      FacetParams.FACET_PIVOT_MINCOUNT,\"0\",\n    //                      \"facet.pivot\", \"top_s,sub_s\") );\n\n    // basic check w/ limit & index sort\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether local params are used\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params(\"facet.pivot\",\"{!facet.limit=4 facet.sort=index}place_s,company_t\"),\n             // params(\"facet.pivot\",\"{!facet.sort=index}place_s,company_t\",\n             //        FacetParams.FACET_LIMIT, \"4\"),\n             params(\"facet.pivot\",\"place_s,company_t\",\n                    FacetParams.FACET_LIMIT, \"4\",\n                    \"facet.sort\", \"index\")                                  }) {\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\"), \n                                              facetParams );\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(4, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n        firstCompany = firstPlace.getPivot().get(0);\n        assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Pivot Faceting (combined wtih Field Faceting)\n    for (SolrParams facetParams : \n           // with and w/o an excluded fq\n           // (either way, facet results should be the same)\n           new SolrParams[] { \n             params(\"facet.pivot\",\"place_s,company_t\",\n                    \"facet.field\",\"place_s\"),\n             params(\"facet.pivot\",\"{!ex=ok}place_s,company_t\",\n                    \"facet.field\",\"{!ex=ok}place_s\",\n                    \"fq\",\"{!tag=ok}place_s:cardiff\"),\n             params(\"facet.pivot\",\"{!ex=pl,co}place_s,company_t\",\n                    \"fq\",\"{!tag=pl}place_s:cardiff\",\n                    \"fq\",\"{!tag=co}company_t:bbc\")                      }) {\n      \n      // default order (count)\n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  FacetParams.FACET_LIMIT, \"4\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(4, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n      assertEquals(4, firstPlace.getPivot().size());\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n\n      // Index Order\n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  FacetParams.FACET_LIMIT, \"4\",\n                                                  \"facet.sort\", \"index\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(4, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n      assertEquals(3, firstPlace.getPivot().size()); // num vals in data < limit==3\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n      \n      // Field level limits \n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  \"f.place_s.facet.limit\",\"2\",\n                                                  \"f.company_t.facet.limit\",\"4\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(2, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n      assertEquals(4, firstPlace.getPivot().size());\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n    }\n\n    // Pivot Faceting Count w/fq (not excluded)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"place_s:cardiff\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(1, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n\n\n    // Same Pivot - one with exclusion and one w/o\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"{!tag=ff}pay_i:[2000 TO *]\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"{!key=filt}place_s,company_t\",\n                 \"facet.pivot\",\"{!key=nofilt ex=ff}place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"filt\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 105, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"microsoft\", 54, firstPlace.getPivot().get(1));\n    //\n    pivots = rsp.getFacetPivot().get(\"nofilt\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // Same Pivot - one in default (count) order and one in index order\n    //\n    // Broken: SOLR-6193 - the facet.sort localparam isn't being picked up correctly\n    //\n    // rsp = query( \"q\", \"*:*\",\n    //              \"rows\", \"0\",\n    //              \"facet\",\"true\",\n    //              \"fq\",\"pay_i:[2000 TO *]\",\n    //              \"facet.pivot\",\"{!key=sc}place_s,company_t\",\n    //              \"facet.pivot\",\"{!key=si facet.sort=index}place_s,company_t\",\n    //              FacetParams.FACET_LIMIT, \"4\");\n    // pivots = rsp.getFacetPivot().get(\"sc\");\n    // assertEquals(4, pivots.size());\n    // firstPlace = pivots.get(0);\n    // assertPivot(\"place_s\", \"cardiff\", 105, firstPlace); \n    // assertEquals(4, firstPlace.getPivot().size());\n    // assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // assertPivot(\"company_t\", \"microsoft\", 54, firstPlace.getPivot().get(1));\n    // //\n    // pivots = rsp.getFacetPivot().get(\"si\");\n    // assertEquals(4, pivots.size());\n    // firstPlace = pivots.get(0);\n    // assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace); \n    // assertEquals(3, firstPlace.getPivot().size()); // only 3 in the data < facet.limit\n    // assertPivot(\"company_t\", \"bbc\", 6, firstPlace.getPivot().get(0));\n    // assertPivot(\"company_t\", \"microsoft\", 6, firstPlace.getPivot().get(1));\n\n\n    // Field level limits and small offset\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 \"f.place_s.facet.limit\",\"2\",\n                 \"f.company_t.facet.limit\",\"4\",\n                 \"facet.offset\",\"1\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, firstPlace);\n    assertEquals(2, firstPlace.getPivot().size()); // num vals in data < limit==4\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 50, firstCompany);\n    \n    \n    // Field level offsets and limit\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"{!tag=pl}place_s:cardiff\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"{!ex=pl}place_s,company_t\",\n                 \"f.place_s.facet.offset\",\"1\",\n                 \"f.company_t.facet.offset\",\"2\",\n                 FacetParams.FACET_LIMIT, \"4\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size()); // num vals in data < limit==4\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"polecat\", 50, firstCompany);\n     \n\n    // datetime\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"hiredate_dt,place_s,company_t\",\n                 \"f.hiredate_dt.facet.limit\",\"2\",\n                 \"f.hiredate_dt.facet.offset\",\"1\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"hiredate_dt,place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstDate = pivots.get(0); // 2012-09-01T12:30:00Z\n    assertPivot(\"hiredate_dt\", new Date(1346502600000L), 200, firstDate);\n    assertEquals(1, firstDate.getPivot().size()); // num vals in data < limit==4\n    firstPlace = firstDate.getPivot().get(0);\n    assertPivot(\"place_s\", \"cardiff\", 200, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 50, firstCompany);\n\n    // int\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"pay_i,place_s,company_t\",\n                 \"f.pay_i.facet.limit\",\"2\",\n                 \"f.pay_i.facet.offset\",\"1\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"pay_i,place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstInt = pivots.get(0);\n    assertPivot(\"pay_i\", 2000, 50, firstInt);\n    assertEquals(4, firstInt.getPivot().size());\n    firstPlace = firstInt.getPivot().get(0);\n    assertPivot(\"place_s\", \"0placeholder\", 1, firstPlace);\n    assertEquals(3, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 1, firstCompany);\n    \n    // boolean\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"real_b,place_s,company_t\",\n                 \"f.real_b.facet.missing\",\"true\",\n                 \"f.real_b.facet.limit\",\"2\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"real_b,place_s,company_t\");\n    assertEquals(3, pivots.size());\n    firstBool = pivots.get(0);\n    assertPivot(\"real_b\", false, 300, firstBool);\n    assertEquals(4, firstBool.getPivot().size());\n    firstPlace = firstBool.getPivot().get(0);\n    assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n    assertEquals(3, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n    \n    // bogus fields\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"doesntexist_t,neitherdoi_i\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"doesntexist_t,neitherdoi_i\");\n    assertEquals(0, pivots.size());\n\n    // bogus fields with facet.missing\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"doesntexist_t,neitherdoi_i\",\n                 \"facet.missing\", \"true\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"doesntexist_t,neitherdoi_i\");\n    assertEquals(1, pivots.size());\n    assertPivot(\"doesntexist_t\", null, docNumber, pivots.get(0));\n    assertEquals(1, pivots.get(0).getPivot().size());\n    assertPivot(\"neitherdoi_i\", null, docNumber, pivots.get(0).getPivot().get(0));\n\n    // Negative facet limit\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether facet.limit is global, \n           // a local param, or specified as a per-field override for both fields\n           new SolrParams[] {\n             params(FacetParams.FACET_LIMIT, \"-1\",\n                    \"facet.pivot\",\"place_s,company_t\"),\n             // Broken: SOLR-6193\n             // params(\"facet.pivot\",\"{!facet.limit=-1}place_s,company_t\"),    \n             params(\"f.place_s.facet.limit\", \"-1\",\n                    \"f.company_t.facet.limit\", \"-1\",\n                    \"facet.pivot\",\"place_s,company_t\")                       }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(103, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(54, firstPlace.getPivot().size());\n        firstCompany = firstPlace.getPivot().get(0);\n        assertPivot(\"company_t\",\"bbc\", 101, firstCompany);\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Negative per-field facet limit (outer)\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether per-field facet.limit is \n           // a global or a local param\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params( \"facet.pivot\",\"{!f.id.facet.limit=-1}place_s,id\" ),\n             params( \"facet.pivot\",\"place_s,id\",\n                     \"f.id.facet.limit\", \"-1\")                            }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\", \n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,id\");\n        assertEquals(100, pivots.size()); // default\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(257, firstPlace.getPivot().size());\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Negative per-field facet limit (inner)\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether per-field facet.limit is \n           // a global or a local param\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params( \"facet.pivot\",\"{!f.place_s.facet.limit=-1}place_s,id\" ),\n             params( \"facet.pivot\",\"place_s,id\",\n                     \"f.place_s.facet.limit\", \"-1\")                       }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\", \n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,id\");\n        assertEquals(103, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(100, firstPlace.getPivot().size()); // default\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n    \n    // Mincount + facet.pivot 2 different ways (swap field order)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 \"facet.pivot\",\"company_t,place_s\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"6\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(52, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n    //\n    pivots = rsp.getFacetPivot().get(\"company_t,place_s\");\n    assertEquals(4, pivots.size());\n    firstCompany = pivots.get(0);\n    assertPivot(\"company_t\", \"bbc\", 451, firstCompany);\n    assertEquals(52, firstCompany.getPivot().size());\n    firstPlace = firstCompany.getPivot().get(0);\n    assertPivot(\"place_s\", \"cardiff\", 101, firstPlace);\n\n    // refine on SPECIAL empty string\n    rsp = query( \"q\", \"*:*\",\n                 \"fq\", \"-place_s:0placeholder\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.limit\",\"1\",\n                 FacetParams.FACET_OVERREQUEST_RATIO, \"0\", // force refinement\n                 FacetParams.FACET_OVERREQUEST_COUNT, \"1\", // force refinement\n                 \"facet.pivot\",\"special_s,company_t\");\n    assertEquals(docNumber - 6, rsp.getResults().getNumFound()); // all docs but 0place\n    pivots = rsp.getFacetPivot().get(\"special_s,company_t\");\n    assertEquals(1, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"special_s\", SPECIAL, 3, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"microsoft\", 2, firstCompany);\n\n    // TODO test \"company_t,special_s\" as well\n\n\n    // refine on SPECIAL empty string & facet.missing\n    // Also proves refinement on non-top elements occurs and allows them to get into the top\n    rsp = query( \"q\", \"*:*\",\n                 \"fq\", \"-place_s:0placeholder\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.limit\",\"1\",\n                 \"facet.missing\",\"true\",\n                 FacetParams.FACET_OVERREQUEST_RATIO, \"0\", // force refinement\n                 FacetParams.FACET_OVERREQUEST_COUNT, \"2\", // force refinement\n                 \"facet.pivot\",\"special_s,company_t\");\n    assertEquals(docNumber - 6, rsp.getResults().getNumFound()); // all docs but 0place\n    pivots = rsp.getFacetPivot().get(\"special_s,company_t\");\n    assertEquals(2, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"special_s\", SPECIAL, 3, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"microsoft\", 2, firstCompany);\n    // last is \"missing\" val\n    assertPivot(\"special_s\", null, docNumber -6 -3 -2, pivots.get(1)); // -0place -SPECIAL -xxx\n\n    // forced refinement on facet.missing\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"f.bogus_x_s.facet.missing\",\"true\",\n                 \"f.bogus_y_s.facet.missing\",\"true\",\n                 \"facet.pivot\",\"bogus_x_s,place_s,bogus_y_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"12\"); \n    pivots = rsp.getFacetPivot().get(\"bogus_x_s,place_s,bogus_y_s,company_t\");\n    assertEquals(1, pivots.size()); // just the missing value for bogus_x_s\n    assertPivot(\"bogus_x_s\", null, docNumber, pivots.get(0));\n    pivots = pivots.get(0).getPivot();\n    assertEquals(12, pivots.size()); // places\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size()); // just the missing value for bogus_y_s\n    assertPivot(\"bogus_y_s\", null, 257, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0).getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(0).getPivot().get(1));\n\n\n\n\n\n    // Overrequesting a lot\n    this.query( \"q\", \"*:*\",\n                \"rows\", \"0\",\n                \"facet\", \"true\",\n                \"facet.pivot\",\"place_s,company_t\",\n                FacetParams.FACET_OVERREQUEST_RATIO, \"10\",\n                FacetParams.FACET_OVERREQUEST_COUNT, \"100\");    \n    \n    // Overrequesting off\n    this.query( \"q\", \"*:*\",\n                \"rows\", \"0\",\n                \"facet\", \"true\",\n                \"facet.pivot\",\"place_s,company_t\",\n                FacetParams.FACET_OVERREQUEST_RATIO, \"0\",\n                FacetParams.FACET_OVERREQUEST_COUNT, \"0\");\n\n    doTestDeepPivotStats();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    this.stress = 0 ;\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    setupDistributedPivotFacetDocuments();\n    \n    QueryResponse rsp = null;\n    \n    List<PivotField> pivots = null;\n    PivotField firstInt = null;\n    PivotField firstBool = null;\n    PivotField firstDate = null;\n    PivotField firstPlace = null;\n    PivotField firstCompany = null;\n\n    // basic check w/ limit & default sort (count)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"12\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(12, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // trivial mincount=0 check\n    rsp = query( \"q\", \"does_not_exist_s:foo\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"company_t\",\n                 FacetParams.FACET_LIMIT, \"10\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    pivots = rsp.getFacetPivot().get(\"company_t\");\n    assertEquals(10, pivots.size());\n    for (PivotField p : pivots) {\n      assertEquals(0, p.getCount());\n    }\n\n    // sanity check limit=0 w/ mincount=0 & missing=true\n    //\n    // SOLR-6328: doesn't work for single node, so can't work for distrib either (yet)\n    //\n    // PivotFacetField's init of needRefinementAtThisLevel as needing potential change\n    // \n    // rsp = query( \"q\", \"*:*\",\n    //              \"rows\", \"0\",\n    //              \"facet\",\"true\",\n    //              \"f.company_t.facet.limit\", \"10\",\n    //              \"facet.pivot\",\"special_s,bogus_s,company_t\",\n    //              \"facet.missing\", \"true\",\n    //              FacetParams.FACET_LIMIT, \"0\",\n    //              FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    // pivots = rsp.getFacetPivot().get(\"special_s,bogus_s,company_t\");\n    // assertEquals(1, pivots.size()); // only the missing\n    // assertPivot(\"special_s\", null, docNumber - 5, pivots.get(0)); // 5 docs w/special_s\n    // assertEquals(pivots.toString(), 1, pivots.get(0).getPivot());\n    // assertPivot(\"bogus_s\", null, docNumber, pivots.get(0).getPivot().get(0));\n    // // TODO: some asserts on company results\n\n    // basic check w/ default sort, limit, & mincount==0\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"50\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(50, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // sort=index + offset + limit w/ some variables\n    for (SolrParams variableParams : \n           new SolrParams[] { // bother variations should kwrk just as well\n             // defauts\n             params(),\n             // force refinement\n             params(FacetParams.FACET_OVERREQUEST_RATIO, \"1\", \n                    FacetParams.FACET_OVERREQUEST_COUNT, \"0\")           }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"f.place_s.facet.limit\", \"20\",\n                                                      \"f.place_s.facet.offset\", \"40\",\n                                                      \"facet.pivot\", \"place_s,company_t\"),\n                                              variableParams );\n\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(20, pivots.size()); // limit\n        for (int i = 0; i < 10; i++) {\n          PivotField place = pivots.get(i); \n          assertTrue(place.toString(), place.getValue().toString().endsWith(\"placeholder\"));\n          assertEquals(3, place.getPivot().size());\n          assertPivot(\"company_t\", \"bbc\", 6, place.getPivot().get(0));\n          assertPivot(\"company_t\", \"microsoft\", 6, place.getPivot().get(1));\n          assertPivot(\"company_t\", \"polecat\", 6, place.getPivot().get(2));\n        }\n        assertPivot(\"place_s\", \"cardiff\", 257, pivots.get(10));\n        assertPivot(\"place_s\", \"krakaw\", 1, pivots.get(11));\n        assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, pivots.get(12));\n        for (int i = 13; i < 20; i++) {\n          PivotField place = pivots.get(i); \n          assertTrue(place.toString(), place.getValue().toString().startsWith(\"placeholder\"));\n          assertEquals(1, place.getPivot().size());\n          PivotField company = place.getPivot().get(0);\n          assertTrue(company.toString(), company.getValue().toString().startsWith(\"compholder\"));\n          assertEquals(company.toString(), 1, company.getCount());\n        }\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount=0\n    //\n    // SOLR-6329: facet.pivot.mincount=0 doesn't work well with distrib\n    //\n    // broken honda\n    //\n    // This is tricky, here's what i think is happening.... \n    // - \"company:honda\" only exists on twoShard, and only w/ \"place:cardiff\"\n    // - twoShard has no other places in it's docs\n    // - twoShard can't return any other places to w/ honda as a count=0 sub-value\n    // - if we refined all other companies places, would twoShard return honda==0 ?\n    //   ... but there's no refinement since mincount==0\n    // - would it even matter\n    //\n    // should we remove the refinement short circut?\n    //\n    // rsp = query( params( \"q\", \"*:*\",\n    //                      \"rows\", \"0\",\n    //                      \"facet\",\"true\",\n    //                      \"facet.sort\",\"index\",\n    //                      \"f.place_s.facet.limit\", \"20\",\n    //                      \"f.place_s.facet.offset\", \"40\",\n    //                      FacetParams.FACET_PIVOT_MINCOUNT,\"0\",\n    //                      \"facet.pivot\", \"place_s,company_t\") );\n    // // TODO: more asserts\n    //\n    //\n    // really trivial demonstration of the above problem\n    // \n    // rsp = query( params( \"q\", \"*:*\",\n    //                      \"rows\", \"0\",\n    //                      \"facet\",\"true\",\n    //                      FacetParams.FACET_PIVOT_MINCOUNT,\"0\",\n    //                      \"facet.pivot\", \"top_s,sub_s\") );\n\n    // basic check w/ limit & index sort\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether local params are used\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params(\"facet.pivot\",\"{!facet.limit=4 facet.sort=index}place_s,company_t\"),\n             // params(\"facet.pivot\",\"{!facet.sort=index}place_s,company_t\",\n             //        FacetParams.FACET_LIMIT, \"4\"),\n             params(\"facet.pivot\",\"place_s,company_t\",\n                    FacetParams.FACET_LIMIT, \"4\",\n                    \"facet.sort\", \"index\")                                  }) {\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\"), \n                                              facetParams );\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(4, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n        firstCompany = firstPlace.getPivot().get(0);\n        assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Pivot Faceting (combined wtih Field Faceting)\n    for (SolrParams facetParams : \n           // with and w/o an excluded fq\n           // (either way, facet results should be the same)\n           new SolrParams[] { \n             params(\"facet.pivot\",\"place_s,company_t\",\n                    \"facet.field\",\"place_s\"),\n             params(\"facet.pivot\",\"{!ex=ok}place_s,company_t\",\n                    \"facet.field\",\"{!ex=ok}place_s\",\n                    \"fq\",\"{!tag=ok}place_s:cardiff\"),\n             params(\"facet.pivot\",\"{!ex=pl,co}place_s,company_t\",\n                    \"fq\",\"{!tag=pl}place_s:cardiff\",\n                    \"fq\",\"{!tag=co}company_t:bbc\")                      }) {\n      \n      // default order (count)\n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  FacetParams.FACET_LIMIT, \"4\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(4, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n      assertEquals(4, firstPlace.getPivot().size());\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n\n      // Index Order\n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  FacetParams.FACET_LIMIT, \"4\",\n                                                  \"facet.sort\", \"index\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(4, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n      assertEquals(3, firstPlace.getPivot().size()); // num vals in data < limit==3\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n      \n      // Field level limits \n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  \"f.place_s.facet.limit\",\"2\",\n                                                  \"f.company_t.facet.limit\",\"4\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(2, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n      assertEquals(4, firstPlace.getPivot().size());\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n    }\n\n    // Pivot Faceting Count w/fq (not excluded)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"place_s:cardiff\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(1, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n\n\n    // Same Pivot - one with exclusion and one w/o\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"{!tag=ff}pay_i:[2000 TO *]\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"{!key=filt}place_s,company_t\",\n                 \"facet.pivot\",\"{!key=nofilt ex=ff}place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"filt\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 105, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"microsoft\", 54, firstPlace.getPivot().get(1));\n    //\n    pivots = rsp.getFacetPivot().get(\"nofilt\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // Same Pivot - one in default (count) order and one in index order\n    //\n    // Broken: SOLR-6193 - the facet.sort localparam isn't being picked up correctly\n    //\n    // rsp = query( \"q\", \"*:*\",\n    //              \"rows\", \"0\",\n    //              \"facet\",\"true\",\n    //              \"fq\",\"pay_i:[2000 TO *]\",\n    //              \"facet.pivot\",\"{!key=sc}place_s,company_t\",\n    //              \"facet.pivot\",\"{!key=si facet.sort=index}place_s,company_t\",\n    //              FacetParams.FACET_LIMIT, \"4\");\n    // pivots = rsp.getFacetPivot().get(\"sc\");\n    // assertEquals(4, pivots.size());\n    // firstPlace = pivots.get(0);\n    // assertPivot(\"place_s\", \"cardiff\", 105, firstPlace); \n    // assertEquals(4, firstPlace.getPivot().size());\n    // assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // assertPivot(\"company_t\", \"microsoft\", 54, firstPlace.getPivot().get(1));\n    // //\n    // pivots = rsp.getFacetPivot().get(\"si\");\n    // assertEquals(4, pivots.size());\n    // firstPlace = pivots.get(0);\n    // assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace); \n    // assertEquals(3, firstPlace.getPivot().size()); // only 3 in the data < facet.limit\n    // assertPivot(\"company_t\", \"bbc\", 6, firstPlace.getPivot().get(0));\n    // assertPivot(\"company_t\", \"microsoft\", 6, firstPlace.getPivot().get(1));\n\n\n    // Field level limits and small offset\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 \"f.place_s.facet.limit\",\"2\",\n                 \"f.company_t.facet.limit\",\"4\",\n                 \"facet.offset\",\"1\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, firstPlace);\n    assertEquals(2, firstPlace.getPivot().size()); // num vals in data < limit==4\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 50, firstCompany);\n    \n    \n    // Field level offsets and limit\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"{!tag=pl}place_s:cardiff\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"{!ex=pl}place_s,company_t\",\n                 \"f.place_s.facet.offset\",\"1\",\n                 \"f.company_t.facet.offset\",\"2\",\n                 FacetParams.FACET_LIMIT, \"4\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size()); // num vals in data < limit==4\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"polecat\", 50, firstCompany);\n     \n\n    // datetime\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"hiredate_dt,place_s,company_t\",\n                 \"f.hiredate_dt.facet.limit\",\"2\",\n                 \"f.hiredate_dt.facet.offset\",\"1\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"hiredate_dt,place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstDate = pivots.get(0); // 2012-09-01T12:30:00Z\n    assertPivot(\"hiredate_dt\", new Date(1346502600000L), 200, firstDate);\n    assertEquals(1, firstDate.getPivot().size()); // num vals in data < limit==4\n    firstPlace = firstDate.getPivot().get(0);\n    assertPivot(\"place_s\", \"cardiff\", 200, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 50, firstCompany);\n\n    // int\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"pay_i,place_s,company_t\",\n                 \"f.pay_i.facet.limit\",\"2\",\n                 \"f.pay_i.facet.offset\",\"1\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"pay_i,place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstInt = pivots.get(0);\n    assertPivot(\"pay_i\", 2000, 50, firstInt);\n    assertEquals(4, firstInt.getPivot().size());\n    firstPlace = firstInt.getPivot().get(0);\n    assertPivot(\"place_s\", \"0placeholder\", 1, firstPlace);\n    assertEquals(3, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 1, firstCompany);\n    \n    // boolean\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"real_b,place_s,company_t\",\n                 \"f.real_b.facet.missing\",\"true\",\n                 \"f.real_b.facet.limit\",\"2\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"real_b,place_s,company_t\");\n    assertEquals(3, pivots.size());\n    firstBool = pivots.get(0);\n    assertPivot(\"real_b\", false, 300, firstBool);\n    assertEquals(4, firstBool.getPivot().size());\n    firstPlace = firstBool.getPivot().get(0);\n    assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n    assertEquals(3, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n    \n    // bogus fields\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"doesntexist_t,neitherdoi_i\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"doesntexist_t,neitherdoi_i\");\n    assertEquals(0, pivots.size());\n\n    // bogus fields with facet.missing\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"doesntexist_t,neitherdoi_i\",\n                 \"facet.missing\", \"true\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"doesntexist_t,neitherdoi_i\");\n    assertEquals(1, pivots.size());\n    assertPivot(\"doesntexist_t\", null, docNumber, pivots.get(0));\n    assertEquals(1, pivots.get(0).getPivot().size());\n    assertPivot(\"neitherdoi_i\", null, docNumber, pivots.get(0).getPivot().get(0));\n\n    // Negative facet limit\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether facet.limit is global, \n           // a local param, or specified as a per-field override for both fields\n           new SolrParams[] {\n             params(FacetParams.FACET_LIMIT, \"-1\",\n                    \"facet.pivot\",\"place_s,company_t\"),\n             // Broken: SOLR-6193\n             // params(\"facet.pivot\",\"{!facet.limit=-1}place_s,company_t\"),    \n             params(\"f.place_s.facet.limit\", \"-1\",\n                    \"f.company_t.facet.limit\", \"-1\",\n                    \"facet.pivot\",\"place_s,company_t\")                       }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(103, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(54, firstPlace.getPivot().size());\n        firstCompany = firstPlace.getPivot().get(0);\n        assertPivot(\"company_t\",\"bbc\", 101, firstCompany);\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Negative per-field facet limit (outer)\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether per-field facet.limit is \n           // a global or a local param\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params( \"facet.pivot\",\"{!f.id.facet.limit=-1}place_s,id\" ),\n             params( \"facet.pivot\",\"place_s,id\",\n                     \"f.id.facet.limit\", \"-1\")                            }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\", \n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,id\");\n        assertEquals(100, pivots.size()); // default\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(257, firstPlace.getPivot().size());\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Negative per-field facet limit (inner)\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether per-field facet.limit is \n           // a global or a local param\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params( \"facet.pivot\",\"{!f.place_s.facet.limit=-1}place_s,id\" ),\n             params( \"facet.pivot\",\"place_s,id\",\n                     \"f.place_s.facet.limit\", \"-1\")                       }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\", \n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,id\");\n        assertEquals(103, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(100, firstPlace.getPivot().size()); // default\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n    \n    // Mincount + facet.pivot 2 different ways (swap field order)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 \"facet.pivot\",\"company_t,place_s\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"6\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(52, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n    //\n    pivots = rsp.getFacetPivot().get(\"company_t,place_s\");\n    assertEquals(4, pivots.size());\n    firstCompany = pivots.get(0);\n    assertPivot(\"company_t\", \"bbc\", 451, firstCompany);\n    assertEquals(52, firstCompany.getPivot().size());\n    firstPlace = firstCompany.getPivot().get(0);\n    assertPivot(\"place_s\", \"cardiff\", 101, firstPlace);\n\n    // refine on SPECIAL empty string\n    rsp = query( \"q\", \"*:*\",\n                 \"fq\", \"-place_s:0placeholder\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.limit\",\"1\",\n                 FacetParams.FACET_OVERREQUEST_RATIO, \"0\", // force refinement\n                 FacetParams.FACET_OVERREQUEST_COUNT, \"1\", // force refinement\n                 \"facet.pivot\",\"special_s,company_t\");\n    assertEquals(docNumber - 6, rsp.getResults().getNumFound()); // all docs but 0place\n    pivots = rsp.getFacetPivot().get(\"special_s,company_t\");\n    assertEquals(1, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"special_s\", SPECIAL, 3, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"microsoft\", 2, firstCompany);\n\n    // TODO test \"company_t,special_s\" as well\n\n\n    // refine on SPECIAL empty string & facet.missing\n    // Also proves refinement on non-top elements occurs and allows them to get into the top\n    rsp = query( \"q\", \"*:*\",\n                 \"fq\", \"-place_s:0placeholder\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.limit\",\"1\",\n                 \"facet.missing\",\"true\",\n                 FacetParams.FACET_OVERREQUEST_RATIO, \"0\", // force refinement\n                 FacetParams.FACET_OVERREQUEST_COUNT, \"2\", // force refinement\n                 \"facet.pivot\",\"special_s,company_t\");\n    assertEquals(docNumber - 6, rsp.getResults().getNumFound()); // all docs but 0place\n    pivots = rsp.getFacetPivot().get(\"special_s,company_t\");\n    assertEquals(2, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"special_s\", SPECIAL, 3, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"microsoft\", 2, firstCompany);\n    // last is \"missing\" val\n    assertPivot(\"special_s\", null, docNumber -6 -3 -2, pivots.get(1)); // -0place -SPECIAL -xxx\n\n    // forced refinement on facet.missing\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"f.bogus_x_s.facet.missing\",\"true\",\n                 \"f.bogus_y_s.facet.missing\",\"true\",\n                 \"facet.pivot\",\"bogus_x_s,place_s,bogus_y_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"12\"); \n    pivots = rsp.getFacetPivot().get(\"bogus_x_s,place_s,bogus_y_s,company_t\");\n    assertEquals(1, pivots.size()); // just the missing value for bogus_x_s\n    assertPivot(\"bogus_x_s\", null, docNumber, pivots.get(0));\n    pivots = pivots.get(0).getPivot();\n    assertEquals(12, pivots.size()); // places\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size()); // just the missing value for bogus_y_s\n    assertPivot(\"bogus_y_s\", null, 257, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0).getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(0).getPivot().get(1));\n\n\n\n\n\n    // Overrequesting a lot\n    this.query( \"q\", \"*:*\",\n                \"rows\", \"0\",\n                \"facet\", \"true\",\n                \"facet.pivot\",\"place_s,company_t\",\n                FacetParams.FACET_OVERREQUEST_RATIO, \"10\",\n                FacetParams.FACET_OVERREQUEST_COUNT, \"100\");    \n    \n    // Overrequesting off\n    this.query( \"q\", \"*:*\",\n                \"rows\", \"0\",\n                \"facet\", \"true\",\n                \"facet.pivot\",\"place_s,company_t\",\n                FacetParams.FACET_OVERREQUEST_RATIO, \"0\",\n                FacetParams.FACET_OVERREQUEST_COUNT, \"0\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLargeTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLargeTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    this.stress = 0 ;\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    setupDistributedPivotFacetDocuments();\n    \n    QueryResponse rsp = null;\n    \n    List<PivotField> pivots = null;\n    PivotField firstInt = null;\n    PivotField firstBool = null;\n    PivotField firstDate = null;\n    PivotField firstPlace = null;\n    PivotField firstCompany = null;\n\n    // basic check w/ limit & default sort (count)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"12\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(12, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // trivial mincount=0 check\n    rsp = query( \"q\", \"does_not_exist_s:foo\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"company_t\",\n                 FacetParams.FACET_LIMIT, \"10\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    pivots = rsp.getFacetPivot().get(\"company_t\");\n    assertEquals(10, pivots.size());\n    for (PivotField p : pivots) {\n      assertEquals(0, p.getCount());\n    }\n\n    // sanity check limit=0 w/ mincount=0 & missing=true\n    //\n    // SOLR-6328: doesn't work for single node, so can't work for distrib either (yet)\n    //\n    // PivotFacetField's init of needRefinementAtThisLevel as needing potential change\n    // \n    // rsp = query( \"q\", \"*:*\",\n    //              \"rows\", \"0\",\n    //              \"facet\",\"true\",\n    //              \"f.company_t.facet.limit\", \"10\",\n    //              \"facet.pivot\",\"special_s,bogus_s,company_t\",\n    //              \"facet.missing\", \"true\",\n    //              FacetParams.FACET_LIMIT, \"0\",\n    //              FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    // pivots = rsp.getFacetPivot().get(\"special_s,bogus_s,company_t\");\n    // assertEquals(1, pivots.size()); // only the missing\n    // assertPivot(\"special_s\", null, docNumber - 5, pivots.get(0)); // 5 docs w/special_s\n    // assertEquals(pivots.toString(), 1, pivots.get(0).getPivot());\n    // assertPivot(\"bogus_s\", null, docNumber, pivots.get(0).getPivot().get(0));\n    // // TODO: some asserts on company results\n\n    // basic check w/ default sort, limit, & mincount==0\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"50\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(50, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // sort=index + offset + limit w/ some variables\n    for (SolrParams variableParams : \n           new SolrParams[] { // bother variations should kwrk just as well\n             // defauts\n             params(),\n             // force refinement\n             params(FacetParams.FACET_OVERREQUEST_RATIO, \"1\", \n                    FacetParams.FACET_OVERREQUEST_COUNT, \"0\")           }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"f.place_s.facet.limit\", \"20\",\n                                                      \"f.place_s.facet.offset\", \"40\",\n                                                      \"facet.pivot\", \"place_s,company_t\"),\n                                              variableParams );\n\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(20, pivots.size()); // limit\n        for (int i = 0; i < 10; i++) {\n          PivotField place = pivots.get(i); \n          assertTrue(place.toString(), place.getValue().toString().endsWith(\"placeholder\"));\n          assertEquals(3, place.getPivot().size());\n          assertPivot(\"company_t\", \"bbc\", 6, place.getPivot().get(0));\n          assertPivot(\"company_t\", \"microsoft\", 6, place.getPivot().get(1));\n          assertPivot(\"company_t\", \"polecat\", 6, place.getPivot().get(2));\n        }\n        assertPivot(\"place_s\", \"cardiff\", 257, pivots.get(10));\n        assertPivot(\"place_s\", \"krakaw\", 1, pivots.get(11));\n        assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, pivots.get(12));\n        for (int i = 13; i < 20; i++) {\n          PivotField place = pivots.get(i); \n          assertTrue(place.toString(), place.getValue().toString().startsWith(\"placeholder\"));\n          assertEquals(1, place.getPivot().size());\n          PivotField company = place.getPivot().get(0);\n          assertTrue(company.toString(), company.getValue().toString().startsWith(\"compholder\"));\n          assertEquals(company.toString(), 1, company.getCount());\n        }\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount=0\n    //\n    // SOLR-6329: facet.pivot.mincount=0 doesn't work well with distrib\n    //\n    // broken honda\n    //\n    // This is tricky, here's what i think is happening.... \n    // - \"company:honda\" only exists on twoShard, and only w/ \"place:cardiff\"\n    // - twoShard has no other places in its docs\n    // - twoShard can't return any other places to w/ honda as a count=0 sub-value\n    // - if we refined all other companies places, would twoShard return honda==0 ?\n    //   ... but there's no refinement since mincount==0\n    // - would it even matter\n    //\n    // should we remove the refinement short circut?\n    //\n    // rsp = query( params( \"q\", \"*:*\",\n    //                      \"rows\", \"0\",\n    //                      \"facet\",\"true\",\n    //                      \"facet.sort\",\"index\",\n    //                      \"f.place_s.facet.limit\", \"20\",\n    //                      \"f.place_s.facet.offset\", \"40\",\n    //                      FacetParams.FACET_PIVOT_MINCOUNT,\"0\",\n    //                      \"facet.pivot\", \"place_s,company_t\") );\n    // // TODO: more asserts\n    //\n    //\n    // really trivial demonstration of the above problem\n    // \n    // rsp = query( params( \"q\", \"*:*\",\n    //                      \"rows\", \"0\",\n    //                      \"facet\",\"true\",\n    //                      FacetParams.FACET_PIVOT_MINCOUNT,\"0\",\n    //                      \"facet.pivot\", \"top_s,sub_s\") );\n\n    // basic check w/ limit & index sort\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether local params are used\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params(\"facet.pivot\",\"{!facet.limit=4 facet.sort=index}place_s,company_t\"),\n             // params(\"facet.pivot\",\"{!facet.sort=index}place_s,company_t\",\n             //        FacetParams.FACET_LIMIT, \"4\"),\n             params(\"facet.pivot\",\"place_s,company_t\",\n                    FacetParams.FACET_LIMIT, \"4\",\n                    \"facet.sort\", \"index\")                                  }) {\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\"), \n                                              facetParams );\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(4, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n        firstCompany = firstPlace.getPivot().get(0);\n        assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Pivot Faceting (combined wtih Field Faceting)\n    for (SolrParams facetParams : \n           // with and w/o an excluded fq\n           // (either way, facet results should be the same)\n           new SolrParams[] { \n             params(\"facet.pivot\",\"place_s,company_t\",\n                    \"facet.field\",\"place_s\"),\n             params(\"facet.pivot\",\"{!ex=ok}place_s,company_t\",\n                    \"facet.field\",\"{!ex=ok}place_s\",\n                    \"fq\",\"{!tag=ok}place_s:cardiff\"),\n             params(\"facet.pivot\",\"{!ex=pl,co}place_s,company_t\",\n                    \"fq\",\"{!tag=pl}place_s:cardiff\",\n                    \"fq\",\"{!tag=co}company_t:bbc\")                      }) {\n      \n      // default order (count)\n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  FacetParams.FACET_LIMIT, \"4\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(4, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n      assertEquals(4, firstPlace.getPivot().size());\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n\n      // Index Order\n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  FacetParams.FACET_LIMIT, \"4\",\n                                                  \"facet.sort\", \"index\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(4, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n      assertEquals(3, firstPlace.getPivot().size()); // num vals in data < limit==3\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n      \n      // Field level limits \n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  \"f.place_s.facet.limit\",\"2\",\n                                                  \"f.company_t.facet.limit\",\"4\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(2, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n      assertEquals(4, firstPlace.getPivot().size());\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n    }\n\n    // Pivot Faceting Count w/fq (not excluded)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"place_s:cardiff\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(1, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n\n\n    // Same Pivot - one with exclusion and one w/o\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"{!tag=ff}pay_i:[2000 TO *]\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"{!key=filt}place_s,company_t\",\n                 \"facet.pivot\",\"{!key=nofilt ex=ff}place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"filt\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 105, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"microsoft\", 54, firstPlace.getPivot().get(1));\n    //\n    pivots = rsp.getFacetPivot().get(\"nofilt\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // Same Pivot - one in default (count) order and one in index order\n    //\n    // Broken: SOLR-6193 - the facet.sort localparam isn't being picked up correctly\n    //\n    // rsp = query( \"q\", \"*:*\",\n    //              \"rows\", \"0\",\n    //              \"facet\",\"true\",\n    //              \"fq\",\"pay_i:[2000 TO *]\",\n    //              \"facet.pivot\",\"{!key=sc}place_s,company_t\",\n    //              \"facet.pivot\",\"{!key=si facet.sort=index}place_s,company_t\",\n    //              FacetParams.FACET_LIMIT, \"4\");\n    // pivots = rsp.getFacetPivot().get(\"sc\");\n    // assertEquals(4, pivots.size());\n    // firstPlace = pivots.get(0);\n    // assertPivot(\"place_s\", \"cardiff\", 105, firstPlace); \n    // assertEquals(4, firstPlace.getPivot().size());\n    // assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // assertPivot(\"company_t\", \"microsoft\", 54, firstPlace.getPivot().get(1));\n    // //\n    // pivots = rsp.getFacetPivot().get(\"si\");\n    // assertEquals(4, pivots.size());\n    // firstPlace = pivots.get(0);\n    // assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace); \n    // assertEquals(3, firstPlace.getPivot().size()); // only 3 in the data < facet.limit\n    // assertPivot(\"company_t\", \"bbc\", 6, firstPlace.getPivot().get(0));\n    // assertPivot(\"company_t\", \"microsoft\", 6, firstPlace.getPivot().get(1));\n\n\n    // Field level limits and small offset\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 \"f.place_s.facet.limit\",\"2\",\n                 \"f.company_t.facet.limit\",\"4\",\n                 \"facet.offset\",\"1\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, firstPlace);\n    assertEquals(2, firstPlace.getPivot().size()); // num vals in data < limit==4\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 50, firstCompany);\n    \n    \n    // Field level offsets and limit\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"{!tag=pl}place_s:cardiff\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"{!ex=pl}place_s,company_t\",\n                 \"f.place_s.facet.offset\",\"1\",\n                 \"f.company_t.facet.offset\",\"2\",\n                 FacetParams.FACET_LIMIT, \"4\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size()); // num vals in data < limit==4\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"polecat\", 50, firstCompany);\n     \n\n    // datetime\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"hiredate_dt,place_s,company_t\",\n                 \"f.hiredate_dt.facet.limit\",\"2\",\n                 \"f.hiredate_dt.facet.offset\",\"1\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"hiredate_dt,place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstDate = pivots.get(0); // 2012-09-01T12:30:00Z\n    assertPivot(\"hiredate_dt\", new Date(1346502600000L), 200, firstDate);\n    assertEquals(1, firstDate.getPivot().size()); // num vals in data < limit==4\n    firstPlace = firstDate.getPivot().get(0);\n    assertPivot(\"place_s\", \"cardiff\", 200, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 50, firstCompany);\n\n    // int\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"pay_i,place_s,company_t\",\n                 \"f.pay_i.facet.limit\",\"2\",\n                 \"f.pay_i.facet.offset\",\"1\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"pay_i,place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstInt = pivots.get(0);\n    assertPivot(\"pay_i\", 2000, 50, firstInt);\n    assertEquals(4, firstInt.getPivot().size());\n    firstPlace = firstInt.getPivot().get(0);\n    assertPivot(\"place_s\", \"0placeholder\", 1, firstPlace);\n    assertEquals(3, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 1, firstCompany);\n    \n    // boolean\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"real_b,place_s,company_t\",\n                 \"f.real_b.facet.missing\",\"true\",\n                 \"f.real_b.facet.limit\",\"2\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"real_b,place_s,company_t\");\n    assertEquals(3, pivots.size());\n    firstBool = pivots.get(0);\n    assertPivot(\"real_b\", false, 300, firstBool);\n    assertEquals(4, firstBool.getPivot().size());\n    firstPlace = firstBool.getPivot().get(0);\n    assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n    assertEquals(3, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n    \n    // bogus fields\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"doesntexist_t,neitherdoi_i\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"doesntexist_t,neitherdoi_i\");\n    assertEquals(0, pivots.size());\n\n    // bogus fields with facet.missing\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"doesntexist_t,neitherdoi_i\",\n                 \"facet.missing\", \"true\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"doesntexist_t,neitherdoi_i\");\n    assertEquals(1, pivots.size());\n    assertPivot(\"doesntexist_t\", null, docNumber, pivots.get(0));\n    assertEquals(1, pivots.get(0).getPivot().size());\n    assertPivot(\"neitherdoi_i\", null, docNumber, pivots.get(0).getPivot().get(0));\n\n    // Negative facet limit\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether facet.limit is global, \n           // a local param, or specified as a per-field override for both fields\n           new SolrParams[] {\n             params(FacetParams.FACET_LIMIT, \"-1\",\n                    \"facet.pivot\",\"place_s,company_t\"),\n             // Broken: SOLR-6193\n             // params(\"facet.pivot\",\"{!facet.limit=-1}place_s,company_t\"),    \n             params(\"f.place_s.facet.limit\", \"-1\",\n                    \"f.company_t.facet.limit\", \"-1\",\n                    \"facet.pivot\",\"place_s,company_t\")                       }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(103, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(54, firstPlace.getPivot().size());\n        firstCompany = firstPlace.getPivot().get(0);\n        assertPivot(\"company_t\",\"bbc\", 101, firstCompany);\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Negative per-field facet limit (outer)\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether per-field facet.limit is \n           // a global or a local param\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params( \"facet.pivot\",\"{!f.id.facet.limit=-1}place_s,id\" ),\n             params( \"facet.pivot\",\"place_s,id\",\n                     \"f.id.facet.limit\", \"-1\")                            }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\", \n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,id\");\n        assertEquals(100, pivots.size()); // default\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(257, firstPlace.getPivot().size());\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Negative per-field facet limit (inner)\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether per-field facet.limit is \n           // a global or a local param\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params( \"facet.pivot\",\"{!f.place_s.facet.limit=-1}place_s,id\" ),\n             params( \"facet.pivot\",\"place_s,id\",\n                     \"f.place_s.facet.limit\", \"-1\")                       }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\", \n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,id\");\n        assertEquals(103, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(100, firstPlace.getPivot().size()); // default\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n    \n    // Mincount + facet.pivot 2 different ways (swap field order)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 \"facet.pivot\",\"company_t,place_s\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"6\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(52, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n    //\n    pivots = rsp.getFacetPivot().get(\"company_t,place_s\");\n    assertEquals(4, pivots.size());\n    firstCompany = pivots.get(0);\n    assertPivot(\"company_t\", \"bbc\", 451, firstCompany);\n    assertEquals(52, firstCompany.getPivot().size());\n    firstPlace = firstCompany.getPivot().get(0);\n    assertPivot(\"place_s\", \"cardiff\", 101, firstPlace);\n\n    // refine on SPECIAL empty string\n    rsp = query( \"q\", \"*:*\",\n                 \"fq\", \"-place_s:0placeholder\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.limit\",\"1\",\n                 FacetParams.FACET_OVERREQUEST_RATIO, \"0\", // force refinement\n                 FacetParams.FACET_OVERREQUEST_COUNT, \"1\", // force refinement\n                 \"facet.pivot\",\"special_s,company_t\");\n    assertEquals(docNumber - 6, rsp.getResults().getNumFound()); // all docs but 0place\n    pivots = rsp.getFacetPivot().get(\"special_s,company_t\");\n    assertEquals(1, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"special_s\", SPECIAL, 3, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"microsoft\", 2, firstCompany);\n\n    // TODO test \"company_t,special_s\" as well\n\n\n    // refine on SPECIAL empty string & facet.missing\n    // Also proves refinement on non-top elements occurs and allows them to get into the top\n    rsp = query( \"q\", \"*:*\",\n                 \"fq\", \"-place_s:0placeholder\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.limit\",\"1\",\n                 \"facet.missing\",\"true\",\n                 FacetParams.FACET_OVERREQUEST_RATIO, \"0\", // force refinement\n                 FacetParams.FACET_OVERREQUEST_COUNT, \"2\", // force refinement\n                 \"facet.pivot\",\"special_s,company_t\");\n    assertEquals(docNumber - 6, rsp.getResults().getNumFound()); // all docs but 0place\n    pivots = rsp.getFacetPivot().get(\"special_s,company_t\");\n    assertEquals(2, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"special_s\", SPECIAL, 3, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"microsoft\", 2, firstCompany);\n    // last is \"missing\" val\n    assertPivot(\"special_s\", null, docNumber -6 -3 -2, pivots.get(1)); // -0place -SPECIAL -xxx\n\n    // forced refinement on facet.missing\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"f.bogus_x_s.facet.missing\",\"true\",\n                 \"f.bogus_y_s.facet.missing\",\"true\",\n                 \"facet.pivot\",\"bogus_x_s,place_s,bogus_y_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"12\"); \n    pivots = rsp.getFacetPivot().get(\"bogus_x_s,place_s,bogus_y_s,company_t\");\n    assertEquals(1, pivots.size()); // just the missing value for bogus_x_s\n    assertPivot(\"bogus_x_s\", null, docNumber, pivots.get(0));\n    pivots = pivots.get(0).getPivot();\n    assertEquals(12, pivots.size()); // places\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size()); // just the missing value for bogus_y_s\n    assertPivot(\"bogus_y_s\", null, 257, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0).getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(0).getPivot().get(1));\n\n\n\n\n\n    // Overrequesting a lot\n    this.query( \"q\", \"*:*\",\n                \"rows\", \"0\",\n                \"facet\", \"true\",\n                \"facet.pivot\",\"place_s,company_t\",\n                FacetParams.FACET_OVERREQUEST_RATIO, \"10\",\n                FacetParams.FACET_OVERREQUEST_COUNT, \"100\");    \n    \n    // Overrequesting off\n    this.query( \"q\", \"*:*\",\n                \"rows\", \"0\",\n                \"facet\", \"true\",\n                \"facet.pivot\",\"place_s,company_t\",\n                FacetParams.FACET_OVERREQUEST_RATIO, \"0\",\n                FacetParams.FACET_OVERREQUEST_COUNT, \"0\");\n\n    doTestDeepPivotStats();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    this.stress = 0 ;\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    setupDistributedPivotFacetDocuments();\n    \n    QueryResponse rsp = null;\n    \n    List<PivotField> pivots = null;\n    PivotField firstInt = null;\n    PivotField firstBool = null;\n    PivotField firstDate = null;\n    PivotField firstPlace = null;\n    PivotField firstCompany = null;\n\n    // basic check w/ limit & default sort (count)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"12\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(12, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // trivial mincount=0 check\n    rsp = query( \"q\", \"does_not_exist_s:foo\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"company_t\",\n                 FacetParams.FACET_LIMIT, \"10\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    pivots = rsp.getFacetPivot().get(\"company_t\");\n    assertEquals(10, pivots.size());\n    for (PivotField p : pivots) {\n      assertEquals(0, p.getCount());\n    }\n\n    // sanity check limit=0 w/ mincount=0 & missing=true\n    //\n    // SOLR-6328: doesn't work for single node, so can't work for distrib either (yet)\n    //\n    // PivotFacetField's init of needRefinementAtThisLevel as needing potential change\n    // \n    // rsp = query( \"q\", \"*:*\",\n    //              \"rows\", \"0\",\n    //              \"facet\",\"true\",\n    //              \"f.company_t.facet.limit\", \"10\",\n    //              \"facet.pivot\",\"special_s,bogus_s,company_t\",\n    //              \"facet.missing\", \"true\",\n    //              FacetParams.FACET_LIMIT, \"0\",\n    //              FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    // pivots = rsp.getFacetPivot().get(\"special_s,bogus_s,company_t\");\n    // assertEquals(1, pivots.size()); // only the missing\n    // assertPivot(\"special_s\", null, docNumber - 5, pivots.get(0)); // 5 docs w/special_s\n    // assertEquals(pivots.toString(), 1, pivots.get(0).getPivot());\n    // assertPivot(\"bogus_s\", null, docNumber, pivots.get(0).getPivot().get(0));\n    // // TODO: some asserts on company results\n\n    // basic check w/ default sort, limit, & mincount==0\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"50\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(50, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // sort=index + offset + limit w/ some variables\n    for (SolrParams variableParams : \n           new SolrParams[] { // bother variations should kwrk just as well\n             // defauts\n             params(),\n             // force refinement\n             params(FacetParams.FACET_OVERREQUEST_RATIO, \"1\", \n                    FacetParams.FACET_OVERREQUEST_COUNT, \"0\")           }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"f.place_s.facet.limit\", \"20\",\n                                                      \"f.place_s.facet.offset\", \"40\",\n                                                      \"facet.pivot\", \"place_s,company_t\"),\n                                              variableParams );\n\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(20, pivots.size()); // limit\n        for (int i = 0; i < 10; i++) {\n          PivotField place = pivots.get(i); \n          assertTrue(place.toString(), place.getValue().toString().endsWith(\"placeholder\"));\n          assertEquals(3, place.getPivot().size());\n          assertPivot(\"company_t\", \"bbc\", 6, place.getPivot().get(0));\n          assertPivot(\"company_t\", \"microsoft\", 6, place.getPivot().get(1));\n          assertPivot(\"company_t\", \"polecat\", 6, place.getPivot().get(2));\n        }\n        assertPivot(\"place_s\", \"cardiff\", 257, pivots.get(10));\n        assertPivot(\"place_s\", \"krakaw\", 1, pivots.get(11));\n        assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, pivots.get(12));\n        for (int i = 13; i < 20; i++) {\n          PivotField place = pivots.get(i); \n          assertTrue(place.toString(), place.getValue().toString().startsWith(\"placeholder\"));\n          assertEquals(1, place.getPivot().size());\n          PivotField company = place.getPivot().get(0);\n          assertTrue(company.toString(), company.getValue().toString().startsWith(\"compholder\"));\n          assertEquals(company.toString(), 1, company.getCount());\n        }\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount=0\n    //\n    // SOLR-6329: facet.pivot.mincount=0 doesn't work well with distrib\n    //\n    // broken honda\n    //\n    // This is tricky, here's what i think is happening.... \n    // - \"company:honda\" only exists on twoShard, and only w/ \"place:cardiff\"\n    // - twoShard has no other places in it's docs\n    // - twoShard can't return any other places to w/ honda as a count=0 sub-value\n    // - if we refined all other companies places, would twoShard return honda==0 ?\n    //   ... but there's no refinement since mincount==0\n    // - would it even matter\n    //\n    // should we remove the refinement short circut?\n    //\n    // rsp = query( params( \"q\", \"*:*\",\n    //                      \"rows\", \"0\",\n    //                      \"facet\",\"true\",\n    //                      \"facet.sort\",\"index\",\n    //                      \"f.place_s.facet.limit\", \"20\",\n    //                      \"f.place_s.facet.offset\", \"40\",\n    //                      FacetParams.FACET_PIVOT_MINCOUNT,\"0\",\n    //                      \"facet.pivot\", \"place_s,company_t\") );\n    // // TODO: more asserts\n    //\n    //\n    // really trivial demonstration of the above problem\n    // \n    // rsp = query( params( \"q\", \"*:*\",\n    //                      \"rows\", \"0\",\n    //                      \"facet\",\"true\",\n    //                      FacetParams.FACET_PIVOT_MINCOUNT,\"0\",\n    //                      \"facet.pivot\", \"top_s,sub_s\") );\n\n    // basic check w/ limit & index sort\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether local params are used\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params(\"facet.pivot\",\"{!facet.limit=4 facet.sort=index}place_s,company_t\"),\n             // params(\"facet.pivot\",\"{!facet.sort=index}place_s,company_t\",\n             //        FacetParams.FACET_LIMIT, \"4\"),\n             params(\"facet.pivot\",\"place_s,company_t\",\n                    FacetParams.FACET_LIMIT, \"4\",\n                    \"facet.sort\", \"index\")                                  }) {\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\"), \n                                              facetParams );\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(4, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n        firstCompany = firstPlace.getPivot().get(0);\n        assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Pivot Faceting (combined wtih Field Faceting)\n    for (SolrParams facetParams : \n           // with and w/o an excluded fq\n           // (either way, facet results should be the same)\n           new SolrParams[] { \n             params(\"facet.pivot\",\"place_s,company_t\",\n                    \"facet.field\",\"place_s\"),\n             params(\"facet.pivot\",\"{!ex=ok}place_s,company_t\",\n                    \"facet.field\",\"{!ex=ok}place_s\",\n                    \"fq\",\"{!tag=ok}place_s:cardiff\"),\n             params(\"facet.pivot\",\"{!ex=pl,co}place_s,company_t\",\n                    \"fq\",\"{!tag=pl}place_s:cardiff\",\n                    \"fq\",\"{!tag=co}company_t:bbc\")                      }) {\n      \n      // default order (count)\n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  FacetParams.FACET_LIMIT, \"4\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(4, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n      assertEquals(4, firstPlace.getPivot().size());\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n\n      // Index Order\n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  FacetParams.FACET_LIMIT, \"4\",\n                                                  \"facet.sort\", \"index\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(4, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n      assertEquals(3, firstPlace.getPivot().size()); // num vals in data < limit==3\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n      \n      // Field level limits \n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  \"f.place_s.facet.limit\",\"2\",\n                                                  \"f.company_t.facet.limit\",\"4\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(2, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n      assertEquals(4, firstPlace.getPivot().size());\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n    }\n\n    // Pivot Faceting Count w/fq (not excluded)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"place_s:cardiff\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(1, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n\n\n    // Same Pivot - one with exclusion and one w/o\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"{!tag=ff}pay_i:[2000 TO *]\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"{!key=filt}place_s,company_t\",\n                 \"facet.pivot\",\"{!key=nofilt ex=ff}place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"filt\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 105, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"microsoft\", 54, firstPlace.getPivot().get(1));\n    //\n    pivots = rsp.getFacetPivot().get(\"nofilt\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // Same Pivot - one in default (count) order and one in index order\n    //\n    // Broken: SOLR-6193 - the facet.sort localparam isn't being picked up correctly\n    //\n    // rsp = query( \"q\", \"*:*\",\n    //              \"rows\", \"0\",\n    //              \"facet\",\"true\",\n    //              \"fq\",\"pay_i:[2000 TO *]\",\n    //              \"facet.pivot\",\"{!key=sc}place_s,company_t\",\n    //              \"facet.pivot\",\"{!key=si facet.sort=index}place_s,company_t\",\n    //              FacetParams.FACET_LIMIT, \"4\");\n    // pivots = rsp.getFacetPivot().get(\"sc\");\n    // assertEquals(4, pivots.size());\n    // firstPlace = pivots.get(0);\n    // assertPivot(\"place_s\", \"cardiff\", 105, firstPlace); \n    // assertEquals(4, firstPlace.getPivot().size());\n    // assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // assertPivot(\"company_t\", \"microsoft\", 54, firstPlace.getPivot().get(1));\n    // //\n    // pivots = rsp.getFacetPivot().get(\"si\");\n    // assertEquals(4, pivots.size());\n    // firstPlace = pivots.get(0);\n    // assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace); \n    // assertEquals(3, firstPlace.getPivot().size()); // only 3 in the data < facet.limit\n    // assertPivot(\"company_t\", \"bbc\", 6, firstPlace.getPivot().get(0));\n    // assertPivot(\"company_t\", \"microsoft\", 6, firstPlace.getPivot().get(1));\n\n\n    // Field level limits and small offset\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 \"f.place_s.facet.limit\",\"2\",\n                 \"f.company_t.facet.limit\",\"4\",\n                 \"facet.offset\",\"1\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, firstPlace);\n    assertEquals(2, firstPlace.getPivot().size()); // num vals in data < limit==4\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 50, firstCompany);\n    \n    \n    // Field level offsets and limit\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"{!tag=pl}place_s:cardiff\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"{!ex=pl}place_s,company_t\",\n                 \"f.place_s.facet.offset\",\"1\",\n                 \"f.company_t.facet.offset\",\"2\",\n                 FacetParams.FACET_LIMIT, \"4\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size()); // num vals in data < limit==4\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"polecat\", 50, firstCompany);\n     \n\n    // datetime\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"hiredate_dt,place_s,company_t\",\n                 \"f.hiredate_dt.facet.limit\",\"2\",\n                 \"f.hiredate_dt.facet.offset\",\"1\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"hiredate_dt,place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstDate = pivots.get(0); // 2012-09-01T12:30:00Z\n    assertPivot(\"hiredate_dt\", new Date(1346502600000L), 200, firstDate);\n    assertEquals(1, firstDate.getPivot().size()); // num vals in data < limit==4\n    firstPlace = firstDate.getPivot().get(0);\n    assertPivot(\"place_s\", \"cardiff\", 200, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 50, firstCompany);\n\n    // int\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"pay_i,place_s,company_t\",\n                 \"f.pay_i.facet.limit\",\"2\",\n                 \"f.pay_i.facet.offset\",\"1\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"pay_i,place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstInt = pivots.get(0);\n    assertPivot(\"pay_i\", 2000, 50, firstInt);\n    assertEquals(4, firstInt.getPivot().size());\n    firstPlace = firstInt.getPivot().get(0);\n    assertPivot(\"place_s\", \"0placeholder\", 1, firstPlace);\n    assertEquals(3, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 1, firstCompany);\n    \n    // boolean\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"real_b,place_s,company_t\",\n                 \"f.real_b.facet.missing\",\"true\",\n                 \"f.real_b.facet.limit\",\"2\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"real_b,place_s,company_t\");\n    assertEquals(3, pivots.size());\n    firstBool = pivots.get(0);\n    assertPivot(\"real_b\", false, 300, firstBool);\n    assertEquals(4, firstBool.getPivot().size());\n    firstPlace = firstBool.getPivot().get(0);\n    assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n    assertEquals(3, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n    \n    // bogus fields\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"doesntexist_t,neitherdoi_i\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"doesntexist_t,neitherdoi_i\");\n    assertEquals(0, pivots.size());\n\n    // bogus fields with facet.missing\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"doesntexist_t,neitherdoi_i\",\n                 \"facet.missing\", \"true\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"doesntexist_t,neitherdoi_i\");\n    assertEquals(1, pivots.size());\n    assertPivot(\"doesntexist_t\", null, docNumber, pivots.get(0));\n    assertEquals(1, pivots.get(0).getPivot().size());\n    assertPivot(\"neitherdoi_i\", null, docNumber, pivots.get(0).getPivot().get(0));\n\n    // Negative facet limit\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether facet.limit is global, \n           // a local param, or specified as a per-field override for both fields\n           new SolrParams[] {\n             params(FacetParams.FACET_LIMIT, \"-1\",\n                    \"facet.pivot\",\"place_s,company_t\"),\n             // Broken: SOLR-6193\n             // params(\"facet.pivot\",\"{!facet.limit=-1}place_s,company_t\"),    \n             params(\"f.place_s.facet.limit\", \"-1\",\n                    \"f.company_t.facet.limit\", \"-1\",\n                    \"facet.pivot\",\"place_s,company_t\")                       }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(103, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(54, firstPlace.getPivot().size());\n        firstCompany = firstPlace.getPivot().get(0);\n        assertPivot(\"company_t\",\"bbc\", 101, firstCompany);\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Negative per-field facet limit (outer)\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether per-field facet.limit is \n           // a global or a local param\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params( \"facet.pivot\",\"{!f.id.facet.limit=-1}place_s,id\" ),\n             params( \"facet.pivot\",\"place_s,id\",\n                     \"f.id.facet.limit\", \"-1\")                            }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\", \n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,id\");\n        assertEquals(100, pivots.size()); // default\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(257, firstPlace.getPivot().size());\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Negative per-field facet limit (inner)\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether per-field facet.limit is \n           // a global or a local param\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params( \"facet.pivot\",\"{!f.place_s.facet.limit=-1}place_s,id\" ),\n             params( \"facet.pivot\",\"place_s,id\",\n                     \"f.place_s.facet.limit\", \"-1\")                       }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\", \n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,id\");\n        assertEquals(103, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(100, firstPlace.getPivot().size()); // default\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n    \n    // Mincount + facet.pivot 2 different ways (swap field order)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 \"facet.pivot\",\"company_t,place_s\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"6\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(52, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n    //\n    pivots = rsp.getFacetPivot().get(\"company_t,place_s\");\n    assertEquals(4, pivots.size());\n    firstCompany = pivots.get(0);\n    assertPivot(\"company_t\", \"bbc\", 451, firstCompany);\n    assertEquals(52, firstCompany.getPivot().size());\n    firstPlace = firstCompany.getPivot().get(0);\n    assertPivot(\"place_s\", \"cardiff\", 101, firstPlace);\n\n    // refine on SPECIAL empty string\n    rsp = query( \"q\", \"*:*\",\n                 \"fq\", \"-place_s:0placeholder\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.limit\",\"1\",\n                 FacetParams.FACET_OVERREQUEST_RATIO, \"0\", // force refinement\n                 FacetParams.FACET_OVERREQUEST_COUNT, \"1\", // force refinement\n                 \"facet.pivot\",\"special_s,company_t\");\n    assertEquals(docNumber - 6, rsp.getResults().getNumFound()); // all docs but 0place\n    pivots = rsp.getFacetPivot().get(\"special_s,company_t\");\n    assertEquals(1, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"special_s\", SPECIAL, 3, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"microsoft\", 2, firstCompany);\n\n    // TODO test \"company_t,special_s\" as well\n\n\n    // refine on SPECIAL empty string & facet.missing\n    // Also proves refinement on non-top elements occurs and allows them to get into the top\n    rsp = query( \"q\", \"*:*\",\n                 \"fq\", \"-place_s:0placeholder\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.limit\",\"1\",\n                 \"facet.missing\",\"true\",\n                 FacetParams.FACET_OVERREQUEST_RATIO, \"0\", // force refinement\n                 FacetParams.FACET_OVERREQUEST_COUNT, \"2\", // force refinement\n                 \"facet.pivot\",\"special_s,company_t\");\n    assertEquals(docNumber - 6, rsp.getResults().getNumFound()); // all docs but 0place\n    pivots = rsp.getFacetPivot().get(\"special_s,company_t\");\n    assertEquals(2, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"special_s\", SPECIAL, 3, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"microsoft\", 2, firstCompany);\n    // last is \"missing\" val\n    assertPivot(\"special_s\", null, docNumber -6 -3 -2, pivots.get(1)); // -0place -SPECIAL -xxx\n\n    // forced refinement on facet.missing\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"f.bogus_x_s.facet.missing\",\"true\",\n                 \"f.bogus_y_s.facet.missing\",\"true\",\n                 \"facet.pivot\",\"bogus_x_s,place_s,bogus_y_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"12\"); \n    pivots = rsp.getFacetPivot().get(\"bogus_x_s,place_s,bogus_y_s,company_t\");\n    assertEquals(1, pivots.size()); // just the missing value for bogus_x_s\n    assertPivot(\"bogus_x_s\", null, docNumber, pivots.get(0));\n    pivots = pivots.get(0).getPivot();\n    assertEquals(12, pivots.size()); // places\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size()); // just the missing value for bogus_y_s\n    assertPivot(\"bogus_y_s\", null, 257, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0).getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(0).getPivot().get(1));\n\n\n\n\n\n    // Overrequesting a lot\n    this.query( \"q\", \"*:*\",\n                \"rows\", \"0\",\n                \"facet\", \"true\",\n                \"facet.pivot\",\"place_s,company_t\",\n                FacetParams.FACET_OVERREQUEST_RATIO, \"10\",\n                FacetParams.FACET_OVERREQUEST_COUNT, \"100\");    \n    \n    // Overrequesting off\n    this.query( \"q\", \"*:*\",\n                \"rows\", \"0\",\n                \"facet\", \"true\",\n                \"facet.pivot\",\"place_s,company_t\",\n                FacetParams.FACET_OVERREQUEST_RATIO, \"0\",\n                FacetParams.FACET_OVERREQUEST_COUNT, \"0\");\n\n    doTestDeepPivotStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9","date":1419431639,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLargeTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLargeTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    this.stress = 0 ;\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    setupDistributedPivotFacetDocuments();\n    \n    QueryResponse rsp = null;\n    \n    List<PivotField> pivots = null;\n    PivotField firstInt = null;\n    PivotField firstBool = null;\n    PivotField firstDate = null;\n    PivotField firstPlace = null;\n    PivotField firstCompany = null;\n\n    // basic check w/ limit & default sort (count)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"12\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(12, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // trivial mincount=0 check\n    rsp = query( \"q\", \"does_not_exist_s:foo\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"company_t\",\n                 FacetParams.FACET_LIMIT, \"10\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    pivots = rsp.getFacetPivot().get(\"company_t\");\n    assertEquals(10, pivots.size());\n    for (PivotField p : pivots) {\n      assertEquals(0, p.getCount());\n    }\n\n    // sanity check limit=0 w/ mincount=0 & missing=true\n    //\n    // SOLR-6328: doesn't work for single node, so can't work for distrib either (yet)\n    //\n    // PivotFacetField's init of needRefinementAtThisLevel as needing potential change\n    // \n    // rsp = query( \"q\", \"*:*\",\n    //              \"rows\", \"0\",\n    //              \"facet\",\"true\",\n    //              \"f.company_t.facet.limit\", \"10\",\n    //              \"facet.pivot\",\"special_s,bogus_s,company_t\",\n    //              \"facet.missing\", \"true\",\n    //              FacetParams.FACET_LIMIT, \"0\",\n    //              FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    // pivots = rsp.getFacetPivot().get(\"special_s,bogus_s,company_t\");\n    // assertEquals(1, pivots.size()); // only the missing\n    // assertPivot(\"special_s\", null, docNumber - 5, pivots.get(0)); // 5 docs w/special_s\n    // assertEquals(pivots.toString(), 1, pivots.get(0).getPivot());\n    // assertPivot(\"bogus_s\", null, docNumber, pivots.get(0).getPivot().get(0));\n    // // TODO: some asserts on company results\n\n    // basic check w/ default sort, limit, & mincount==0\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"50\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(50, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // sort=index + offset + limit w/ some variables\n    for (SolrParams variableParams : \n           new SolrParams[] { // bother variations should kwrk just as well\n             // defauts\n             params(),\n             // force refinement\n             params(FacetParams.FACET_OVERREQUEST_RATIO, \"1\", \n                    FacetParams.FACET_OVERREQUEST_COUNT, \"0\")           }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"f.place_s.facet.limit\", \"20\",\n                                                      \"f.place_s.facet.offset\", \"40\",\n                                                      \"facet.pivot\", \"place_s,company_t\"),\n                                              variableParams );\n\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(20, pivots.size()); // limit\n        for (int i = 0; i < 10; i++) {\n          PivotField place = pivots.get(i); \n          assertTrue(place.toString(), place.getValue().toString().endsWith(\"placeholder\"));\n          assertEquals(3, place.getPivot().size());\n          assertPivot(\"company_t\", \"bbc\", 6, place.getPivot().get(0));\n          assertPivot(\"company_t\", \"microsoft\", 6, place.getPivot().get(1));\n          assertPivot(\"company_t\", \"polecat\", 6, place.getPivot().get(2));\n        }\n        assertPivot(\"place_s\", \"cardiff\", 257, pivots.get(10));\n        assertPivot(\"place_s\", \"krakaw\", 1, pivots.get(11));\n        assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, pivots.get(12));\n        for (int i = 13; i < 20; i++) {\n          PivotField place = pivots.get(i); \n          assertTrue(place.toString(), place.getValue().toString().startsWith(\"placeholder\"));\n          assertEquals(1, place.getPivot().size());\n          PivotField company = place.getPivot().get(0);\n          assertTrue(company.toString(), company.getValue().toString().startsWith(\"compholder\"));\n          assertEquals(company.toString(), 1, company.getCount());\n        }\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount=0\n    //\n    // SOLR-6329: facet.pivot.mincount=0 doesn't work well with distrib\n    //\n    // broken honda\n    //\n    // This is tricky, here's what i think is happening.... \n    // - \"company:honda\" only exists on twoShard, and only w/ \"place:cardiff\"\n    // - twoShard has no other places in its docs\n    // - twoShard can't return any other places to w/ honda as a count=0 sub-value\n    // - if we refined all other companies places, would twoShard return honda==0 ?\n    //   ... but there's no refinement since mincount==0\n    // - would it even matter\n    //\n    // should we remove the refinement short circut?\n    //\n    // rsp = query( params( \"q\", \"*:*\",\n    //                      \"rows\", \"0\",\n    //                      \"facet\",\"true\",\n    //                      \"facet.sort\",\"index\",\n    //                      \"f.place_s.facet.limit\", \"20\",\n    //                      \"f.place_s.facet.offset\", \"40\",\n    //                      FacetParams.FACET_PIVOT_MINCOUNT,\"0\",\n    //                      \"facet.pivot\", \"place_s,company_t\") );\n    // // TODO: more asserts\n    //\n    //\n    // really trivial demonstration of the above problem\n    // \n    // rsp = query( params( \"q\", \"*:*\",\n    //                      \"rows\", \"0\",\n    //                      \"facet\",\"true\",\n    //                      FacetParams.FACET_PIVOT_MINCOUNT,\"0\",\n    //                      \"facet.pivot\", \"top_s,sub_s\") );\n\n    // basic check w/ limit & index sort\n    for (SolrParams facetParams : \n           // results should be the same regardless of whether local params are used\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params(\"facet.pivot\",\"{!facet.limit=4 facet.sort=index}place_s,company_t\"),\n             // params(\"facet.pivot\",\"{!facet.sort=index}place_s,company_t\",\n             //        FacetParams.FACET_LIMIT, \"4\"),\n             params(\"facet.pivot\",\"place_s,company_t\",\n                    FacetParams.FACET_LIMIT, \"4\",\n                    \"facet.sort\", \"index\")                                  }) {\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\"), \n                                              facetParams );\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(4, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n        firstCompany = firstPlace.getPivot().get(0);\n        assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Pivot Faceting (combined wtih Field Faceting)\n    for (SolrParams facetParams : \n           // with and w/o an excluded fq\n           // (either way, facet results should be the same)\n           new SolrParams[] { \n             params(\"facet.pivot\",\"place_s,company_t\",\n                    \"facet.field\",\"place_s\"),\n             params(\"facet.pivot\",\"{!ex=ok}place_s,company_t\",\n                    \"facet.field\",\"{!ex=ok}place_s\",\n                    \"fq\",\"{!tag=ok}place_s:cardiff\"),\n             params(\"facet.pivot\",\"{!ex=pl,co}place_s,company_t\",\n                    \"fq\",\"{!tag=pl}place_s:cardiff\",\n                    \"fq\",\"{!tag=co}company_t:bbc\")                      }) {\n      \n      // default order (count)\n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  FacetParams.FACET_LIMIT, \"4\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(4, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n      assertEquals(4, firstPlace.getPivot().size());\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n\n      // Index Order\n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  FacetParams.FACET_LIMIT, \"4\",\n                                                  \"facet.sort\", \"index\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(4, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n      assertEquals(3, firstPlace.getPivot().size()); // num vals in data < limit==3\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n      \n      // Field level limits \n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  \"f.place_s.facet.limit\",\"2\",\n                                                  \"f.company_t.facet.limit\",\"4\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(2, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n      assertEquals(4, firstPlace.getPivot().size());\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n    }\n\n    // Pivot Faceting Count w/fq (not excluded)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"place_s:cardiff\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(1, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n\n\n    // Same Pivot - one with exclusion and one w/o\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"{!tag=ff}pay_i:[2000 TO *]\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"{!key=filt}place_s,company_t\",\n                 \"facet.pivot\",\"{!key=nofilt ex=ff}place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"filt\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 105, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"microsoft\", 54, firstPlace.getPivot().get(1));\n    //\n    pivots = rsp.getFacetPivot().get(\"nofilt\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // Same Pivot - one in default (count) order and one in index order\n    //\n    // Broken: SOLR-6193 - the facet.sort localparam isn't being picked up correctly\n    //\n    // rsp = query( \"q\", \"*:*\",\n    //              \"rows\", \"0\",\n    //              \"facet\",\"true\",\n    //              \"fq\",\"pay_i:[2000 TO *]\",\n    //              \"facet.pivot\",\"{!key=sc}place_s,company_t\",\n    //              \"facet.pivot\",\"{!key=si facet.sort=index}place_s,company_t\",\n    //              FacetParams.FACET_LIMIT, \"4\");\n    // pivots = rsp.getFacetPivot().get(\"sc\");\n    // assertEquals(4, pivots.size());\n    // firstPlace = pivots.get(0);\n    // assertPivot(\"place_s\", \"cardiff\", 105, firstPlace); \n    // assertEquals(4, firstPlace.getPivot().size());\n    // assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // assertPivot(\"company_t\", \"microsoft\", 54, firstPlace.getPivot().get(1));\n    // //\n    // pivots = rsp.getFacetPivot().get(\"si\");\n    // assertEquals(4, pivots.size());\n    // firstPlace = pivots.get(0);\n    // assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace); \n    // assertEquals(3, firstPlace.getPivot().size()); // only 3 in the data < facet.limit\n    // assertPivot(\"company_t\", \"bbc\", 6, firstPlace.getPivot().get(0));\n    // assertPivot(\"company_t\", \"microsoft\", 6, firstPlace.getPivot().get(1));\n\n\n    // Field level limits and small offset\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 \"f.place_s.facet.limit\",\"2\",\n                 \"f.company_t.facet.limit\",\"4\",\n                 \"facet.offset\",\"1\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, firstPlace);\n    assertEquals(2, firstPlace.getPivot().size()); // num vals in data < limit==4\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 50, firstCompany);\n    \n    \n    // Field level offsets and limit\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"{!tag=pl}place_s:cardiff\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"{!ex=pl}place_s,company_t\",\n                 \"f.place_s.facet.offset\",\"1\",\n                 \"f.company_t.facet.offset\",\"2\",\n                 FacetParams.FACET_LIMIT, \"4\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size()); // num vals in data < limit==4\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"polecat\", 50, firstCompany);\n     \n\n    // datetime\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"hiredate_dt,place_s,company_t\",\n                 \"f.hiredate_dt.facet.limit\",\"2\",\n                 \"f.hiredate_dt.facet.offset\",\"1\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"hiredate_dt,place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstDate = pivots.get(0); // 2012-09-01T12:30:00Z\n    assertPivot(\"hiredate_dt\", new Date(1346502600000L), 200, firstDate);\n    assertEquals(1, firstDate.getPivot().size()); // num vals in data < limit==4\n    firstPlace = firstDate.getPivot().get(0);\n    assertPivot(\"place_s\", \"cardiff\", 200, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 50, firstCompany);\n\n    // int\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"pay_i,place_s,company_t\",\n                 \"f.pay_i.facet.limit\",\"2\",\n                 \"f.pay_i.facet.offset\",\"1\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"pay_i,place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstInt = pivots.get(0);\n    assertPivot(\"pay_i\", 2000, 50, firstInt);\n    assertEquals(4, firstInt.getPivot().size());\n    firstPlace = firstInt.getPivot().get(0);\n    assertPivot(\"place_s\", \"0placeholder\", 1, firstPlace);\n    assertEquals(3, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 1, firstCompany);\n    \n    // boolean\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"real_b,place_s,company_t\",\n                 \"f.real_b.facet.missing\",\"true\",\n                 \"f.real_b.facet.limit\",\"2\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"real_b,place_s,company_t\");\n    assertEquals(3, pivots.size());\n    firstBool = pivots.get(0);\n    assertPivot(\"real_b\", false, 300, firstBool);\n    assertEquals(4, firstBool.getPivot().size());\n    firstPlace = firstBool.getPivot().get(0);\n    assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n    assertEquals(3, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n    \n    // bogus fields\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"doesntexist_t,neitherdoi_i\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"doesntexist_t,neitherdoi_i\");\n    assertEquals(0, pivots.size());\n\n    // bogus fields with facet.missing\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"doesntexist_t,neitherdoi_i\",\n                 \"facet.missing\", \"true\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"doesntexist_t,neitherdoi_i\");\n    assertEquals(1, pivots.size());\n    assertPivot(\"doesntexist_t\", null, docNumber, pivots.get(0));\n    assertEquals(1, pivots.get(0).getPivot().size());\n    assertPivot(\"neitherdoi_i\", null, docNumber, pivots.get(0).getPivot().get(0));\n\n    // Negative facet limit\n    for (SolrParams facetParams : \n           // results should be the same regardless of whether facet.limit is global,\n           // a local param, or specified as a per-field override for both fields\n           new SolrParams[] {\n             params(FacetParams.FACET_LIMIT, \"-1\",\n                    \"facet.pivot\",\"place_s,company_t\"),\n             // Broken: SOLR-6193\n             // params(\"facet.pivot\",\"{!facet.limit=-1}place_s,company_t\"),    \n             params(\"f.place_s.facet.limit\", \"-1\",\n                    \"f.company_t.facet.limit\", \"-1\",\n                    \"facet.pivot\",\"place_s,company_t\")                       }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(103, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(54, firstPlace.getPivot().size());\n        firstCompany = firstPlace.getPivot().get(0);\n        assertPivot(\"company_t\",\"bbc\", 101, firstCompany);\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Negative per-field facet limit (outer)\n    for (SolrParams facetParams : \n           // results should be the same regardless of whether per-field facet.limit is\n           // a global or a local param\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params( \"facet.pivot\",\"{!f.id.facet.limit=-1}place_s,id\" ),\n             params( \"facet.pivot\",\"place_s,id\",\n                     \"f.id.facet.limit\", \"-1\")                            }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\", \n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,id\");\n        assertEquals(100, pivots.size()); // default\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(257, firstPlace.getPivot().size());\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Negative per-field facet limit (inner)\n    for (SolrParams facetParams : \n           // results should be the same regardless of whether per-field facet.limit is\n           // a global or a local param\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params( \"facet.pivot\",\"{!f.place_s.facet.limit=-1}place_s,id\" ),\n             params( \"facet.pivot\",\"place_s,id\",\n                     \"f.place_s.facet.limit\", \"-1\")                       }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\", \n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,id\");\n        assertEquals(103, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(100, firstPlace.getPivot().size()); // default\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n    \n    // Mincount + facet.pivot 2 different ways (swap field order)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 \"facet.pivot\",\"company_t,place_s\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"6\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(52, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n    //\n    pivots = rsp.getFacetPivot().get(\"company_t,place_s\");\n    assertEquals(4, pivots.size());\n    firstCompany = pivots.get(0);\n    assertPivot(\"company_t\", \"bbc\", 451, firstCompany);\n    assertEquals(52, firstCompany.getPivot().size());\n    firstPlace = firstCompany.getPivot().get(0);\n    assertPivot(\"place_s\", \"cardiff\", 101, firstPlace);\n\n    // refine on SPECIAL empty string\n    rsp = query( \"q\", \"*:*\",\n                 \"fq\", \"-place_s:0placeholder\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.limit\",\"1\",\n                 FacetParams.FACET_OVERREQUEST_RATIO, \"0\", // force refinement\n                 FacetParams.FACET_OVERREQUEST_COUNT, \"1\", // force refinement\n                 \"facet.pivot\",\"special_s,company_t\");\n    assertEquals(docNumber - 6, rsp.getResults().getNumFound()); // all docs but 0place\n    pivots = rsp.getFacetPivot().get(\"special_s,company_t\");\n    assertEquals(1, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"special_s\", SPECIAL, 3, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"microsoft\", 2, firstCompany);\n\n    // TODO test \"company_t,special_s\" as well\n\n\n    // refine on SPECIAL empty string & facet.missing\n    // Also proves refinement on non-top elements occurs and allows them to get into the top\n    rsp = query( \"q\", \"*:*\",\n                 \"fq\", \"-place_s:0placeholder\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.limit\",\"1\",\n                 \"facet.missing\",\"true\",\n                 FacetParams.FACET_OVERREQUEST_RATIO, \"0\", // force refinement\n                 FacetParams.FACET_OVERREQUEST_COUNT, \"2\", // force refinement\n                 \"facet.pivot\",\"special_s,company_t\");\n    assertEquals(docNumber - 6, rsp.getResults().getNumFound()); // all docs but 0place\n    pivots = rsp.getFacetPivot().get(\"special_s,company_t\");\n    assertEquals(2, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"special_s\", SPECIAL, 3, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"microsoft\", 2, firstCompany);\n    // last is \"missing\" val\n    assertPivot(\"special_s\", null, docNumber -6 -3 -2, pivots.get(1)); // -0place -SPECIAL -xxx\n\n    // forced refinement on facet.missing\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"f.bogus_x_s.facet.missing\",\"true\",\n                 \"f.bogus_y_s.facet.missing\",\"true\",\n                 \"facet.pivot\",\"bogus_x_s,place_s,bogus_y_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"12\"); \n    pivots = rsp.getFacetPivot().get(\"bogus_x_s,place_s,bogus_y_s,company_t\");\n    assertEquals(1, pivots.size()); // just the missing value for bogus_x_s\n    assertPivot(\"bogus_x_s\", null, docNumber, pivots.get(0));\n    pivots = pivots.get(0).getPivot();\n    assertEquals(12, pivots.size()); // places\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size()); // just the missing value for bogus_y_s\n    assertPivot(\"bogus_y_s\", null, 257, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0).getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(0).getPivot().get(1));\n\n\n\n\n\n    // Overrequesting a lot\n    this.query( \"q\", \"*:*\",\n                \"rows\", \"0\",\n                \"facet\", \"true\",\n                \"facet.pivot\",\"place_s,company_t\",\n                FacetParams.FACET_OVERREQUEST_RATIO, \"10\",\n                FacetParams.FACET_OVERREQUEST_COUNT, \"100\");    \n    \n    // Overrequesting off\n    this.query( \"q\", \"*:*\",\n                \"rows\", \"0\",\n                \"facet\", \"true\",\n                \"facet.pivot\",\"place_s,company_t\",\n                FacetParams.FACET_OVERREQUEST_RATIO, \"0\",\n                FacetParams.FACET_OVERREQUEST_COUNT, \"0\");\n\n    doTestDeepPivotStats();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    this.stress = 0 ;\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    setupDistributedPivotFacetDocuments();\n    \n    QueryResponse rsp = null;\n    \n    List<PivotField> pivots = null;\n    PivotField firstInt = null;\n    PivotField firstBool = null;\n    PivotField firstDate = null;\n    PivotField firstPlace = null;\n    PivotField firstCompany = null;\n\n    // basic check w/ limit & default sort (count)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"12\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(12, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // trivial mincount=0 check\n    rsp = query( \"q\", \"does_not_exist_s:foo\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"company_t\",\n                 FacetParams.FACET_LIMIT, \"10\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    pivots = rsp.getFacetPivot().get(\"company_t\");\n    assertEquals(10, pivots.size());\n    for (PivotField p : pivots) {\n      assertEquals(0, p.getCount());\n    }\n\n    // sanity check limit=0 w/ mincount=0 & missing=true\n    //\n    // SOLR-6328: doesn't work for single node, so can't work for distrib either (yet)\n    //\n    // PivotFacetField's init of needRefinementAtThisLevel as needing potential change\n    // \n    // rsp = query( \"q\", \"*:*\",\n    //              \"rows\", \"0\",\n    //              \"facet\",\"true\",\n    //              \"f.company_t.facet.limit\", \"10\",\n    //              \"facet.pivot\",\"special_s,bogus_s,company_t\",\n    //              \"facet.missing\", \"true\",\n    //              FacetParams.FACET_LIMIT, \"0\",\n    //              FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    // pivots = rsp.getFacetPivot().get(\"special_s,bogus_s,company_t\");\n    // assertEquals(1, pivots.size()); // only the missing\n    // assertPivot(\"special_s\", null, docNumber - 5, pivots.get(0)); // 5 docs w/special_s\n    // assertEquals(pivots.toString(), 1, pivots.get(0).getPivot());\n    // assertPivot(\"bogus_s\", null, docNumber, pivots.get(0).getPivot().get(0));\n    // // TODO: some asserts on company results\n\n    // basic check w/ default sort, limit, & mincount==0\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"50\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(50, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // sort=index + offset + limit w/ some variables\n    for (SolrParams variableParams : \n           new SolrParams[] { // bother variations should kwrk just as well\n             // defauts\n             params(),\n             // force refinement\n             params(FacetParams.FACET_OVERREQUEST_RATIO, \"1\", \n                    FacetParams.FACET_OVERREQUEST_COUNT, \"0\")           }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"f.place_s.facet.limit\", \"20\",\n                                                      \"f.place_s.facet.offset\", \"40\",\n                                                      \"facet.pivot\", \"place_s,company_t\"),\n                                              variableParams );\n\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(20, pivots.size()); // limit\n        for (int i = 0; i < 10; i++) {\n          PivotField place = pivots.get(i); \n          assertTrue(place.toString(), place.getValue().toString().endsWith(\"placeholder\"));\n          assertEquals(3, place.getPivot().size());\n          assertPivot(\"company_t\", \"bbc\", 6, place.getPivot().get(0));\n          assertPivot(\"company_t\", \"microsoft\", 6, place.getPivot().get(1));\n          assertPivot(\"company_t\", \"polecat\", 6, place.getPivot().get(2));\n        }\n        assertPivot(\"place_s\", \"cardiff\", 257, pivots.get(10));\n        assertPivot(\"place_s\", \"krakaw\", 1, pivots.get(11));\n        assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, pivots.get(12));\n        for (int i = 13; i < 20; i++) {\n          PivotField place = pivots.get(i); \n          assertTrue(place.toString(), place.getValue().toString().startsWith(\"placeholder\"));\n          assertEquals(1, place.getPivot().size());\n          PivotField company = place.getPivot().get(0);\n          assertTrue(company.toString(), company.getValue().toString().startsWith(\"compholder\"));\n          assertEquals(company.toString(), 1, company.getCount());\n        }\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount=0\n    //\n    // SOLR-6329: facet.pivot.mincount=0 doesn't work well with distrib\n    //\n    // broken honda\n    //\n    // This is tricky, here's what i think is happening.... \n    // - \"company:honda\" only exists on twoShard, and only w/ \"place:cardiff\"\n    // - twoShard has no other places in its docs\n    // - twoShard can't return any other places to w/ honda as a count=0 sub-value\n    // - if we refined all other companies places, would twoShard return honda==0 ?\n    //   ... but there's no refinement since mincount==0\n    // - would it even matter\n    //\n    // should we remove the refinement short circut?\n    //\n    // rsp = query( params( \"q\", \"*:*\",\n    //                      \"rows\", \"0\",\n    //                      \"facet\",\"true\",\n    //                      \"facet.sort\",\"index\",\n    //                      \"f.place_s.facet.limit\", \"20\",\n    //                      \"f.place_s.facet.offset\", \"40\",\n    //                      FacetParams.FACET_PIVOT_MINCOUNT,\"0\",\n    //                      \"facet.pivot\", \"place_s,company_t\") );\n    // // TODO: more asserts\n    //\n    //\n    // really trivial demonstration of the above problem\n    // \n    // rsp = query( params( \"q\", \"*:*\",\n    //                      \"rows\", \"0\",\n    //                      \"facet\",\"true\",\n    //                      FacetParams.FACET_PIVOT_MINCOUNT,\"0\",\n    //                      \"facet.pivot\", \"top_s,sub_s\") );\n\n    // basic check w/ limit & index sort\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether local params are used\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params(\"facet.pivot\",\"{!facet.limit=4 facet.sort=index}place_s,company_t\"),\n             // params(\"facet.pivot\",\"{!facet.sort=index}place_s,company_t\",\n             //        FacetParams.FACET_LIMIT, \"4\"),\n             params(\"facet.pivot\",\"place_s,company_t\",\n                    FacetParams.FACET_LIMIT, \"4\",\n                    \"facet.sort\", \"index\")                                  }) {\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\"), \n                                              facetParams );\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(4, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n        firstCompany = firstPlace.getPivot().get(0);\n        assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Pivot Faceting (combined wtih Field Faceting)\n    for (SolrParams facetParams : \n           // with and w/o an excluded fq\n           // (either way, facet results should be the same)\n           new SolrParams[] { \n             params(\"facet.pivot\",\"place_s,company_t\",\n                    \"facet.field\",\"place_s\"),\n             params(\"facet.pivot\",\"{!ex=ok}place_s,company_t\",\n                    \"facet.field\",\"{!ex=ok}place_s\",\n                    \"fq\",\"{!tag=ok}place_s:cardiff\"),\n             params(\"facet.pivot\",\"{!ex=pl,co}place_s,company_t\",\n                    \"fq\",\"{!tag=pl}place_s:cardiff\",\n                    \"fq\",\"{!tag=co}company_t:bbc\")                      }) {\n      \n      // default order (count)\n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  FacetParams.FACET_LIMIT, \"4\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(4, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n      assertEquals(4, firstPlace.getPivot().size());\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n\n      // Index Order\n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  FacetParams.FACET_LIMIT, \"4\",\n                                                  \"facet.sort\", \"index\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(4, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n      assertEquals(3, firstPlace.getPivot().size()); // num vals in data < limit==3\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n      \n      // Field level limits \n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  \"f.place_s.facet.limit\",\"2\",\n                                                  \"f.company_t.facet.limit\",\"4\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(2, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n      assertEquals(4, firstPlace.getPivot().size());\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n    }\n\n    // Pivot Faceting Count w/fq (not excluded)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"place_s:cardiff\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(1, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n\n\n    // Same Pivot - one with exclusion and one w/o\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"{!tag=ff}pay_i:[2000 TO *]\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"{!key=filt}place_s,company_t\",\n                 \"facet.pivot\",\"{!key=nofilt ex=ff}place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"filt\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 105, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"microsoft\", 54, firstPlace.getPivot().get(1));\n    //\n    pivots = rsp.getFacetPivot().get(\"nofilt\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // Same Pivot - one in default (count) order and one in index order\n    //\n    // Broken: SOLR-6193 - the facet.sort localparam isn't being picked up correctly\n    //\n    // rsp = query( \"q\", \"*:*\",\n    //              \"rows\", \"0\",\n    //              \"facet\",\"true\",\n    //              \"fq\",\"pay_i:[2000 TO *]\",\n    //              \"facet.pivot\",\"{!key=sc}place_s,company_t\",\n    //              \"facet.pivot\",\"{!key=si facet.sort=index}place_s,company_t\",\n    //              FacetParams.FACET_LIMIT, \"4\");\n    // pivots = rsp.getFacetPivot().get(\"sc\");\n    // assertEquals(4, pivots.size());\n    // firstPlace = pivots.get(0);\n    // assertPivot(\"place_s\", \"cardiff\", 105, firstPlace); \n    // assertEquals(4, firstPlace.getPivot().size());\n    // assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // assertPivot(\"company_t\", \"microsoft\", 54, firstPlace.getPivot().get(1));\n    // //\n    // pivots = rsp.getFacetPivot().get(\"si\");\n    // assertEquals(4, pivots.size());\n    // firstPlace = pivots.get(0);\n    // assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace); \n    // assertEquals(3, firstPlace.getPivot().size()); // only 3 in the data < facet.limit\n    // assertPivot(\"company_t\", \"bbc\", 6, firstPlace.getPivot().get(0));\n    // assertPivot(\"company_t\", \"microsoft\", 6, firstPlace.getPivot().get(1));\n\n\n    // Field level limits and small offset\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 \"f.place_s.facet.limit\",\"2\",\n                 \"f.company_t.facet.limit\",\"4\",\n                 \"facet.offset\",\"1\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, firstPlace);\n    assertEquals(2, firstPlace.getPivot().size()); // num vals in data < limit==4\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 50, firstCompany);\n    \n    \n    // Field level offsets and limit\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"{!tag=pl}place_s:cardiff\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"{!ex=pl}place_s,company_t\",\n                 \"f.place_s.facet.offset\",\"1\",\n                 \"f.company_t.facet.offset\",\"2\",\n                 FacetParams.FACET_LIMIT, \"4\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size()); // num vals in data < limit==4\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"polecat\", 50, firstCompany);\n     \n\n    // datetime\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"hiredate_dt,place_s,company_t\",\n                 \"f.hiredate_dt.facet.limit\",\"2\",\n                 \"f.hiredate_dt.facet.offset\",\"1\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"hiredate_dt,place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstDate = pivots.get(0); // 2012-09-01T12:30:00Z\n    assertPivot(\"hiredate_dt\", new Date(1346502600000L), 200, firstDate);\n    assertEquals(1, firstDate.getPivot().size()); // num vals in data < limit==4\n    firstPlace = firstDate.getPivot().get(0);\n    assertPivot(\"place_s\", \"cardiff\", 200, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 50, firstCompany);\n\n    // int\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"pay_i,place_s,company_t\",\n                 \"f.pay_i.facet.limit\",\"2\",\n                 \"f.pay_i.facet.offset\",\"1\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"pay_i,place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstInt = pivots.get(0);\n    assertPivot(\"pay_i\", 2000, 50, firstInt);\n    assertEquals(4, firstInt.getPivot().size());\n    firstPlace = firstInt.getPivot().get(0);\n    assertPivot(\"place_s\", \"0placeholder\", 1, firstPlace);\n    assertEquals(3, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 1, firstCompany);\n    \n    // boolean\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"real_b,place_s,company_t\",\n                 \"f.real_b.facet.missing\",\"true\",\n                 \"f.real_b.facet.limit\",\"2\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"real_b,place_s,company_t\");\n    assertEquals(3, pivots.size());\n    firstBool = pivots.get(0);\n    assertPivot(\"real_b\", false, 300, firstBool);\n    assertEquals(4, firstBool.getPivot().size());\n    firstPlace = firstBool.getPivot().get(0);\n    assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n    assertEquals(3, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n    \n    // bogus fields\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"doesntexist_t,neitherdoi_i\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"doesntexist_t,neitherdoi_i\");\n    assertEquals(0, pivots.size());\n\n    // bogus fields with facet.missing\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"doesntexist_t,neitherdoi_i\",\n                 \"facet.missing\", \"true\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"doesntexist_t,neitherdoi_i\");\n    assertEquals(1, pivots.size());\n    assertPivot(\"doesntexist_t\", null, docNumber, pivots.get(0));\n    assertEquals(1, pivots.get(0).getPivot().size());\n    assertPivot(\"neitherdoi_i\", null, docNumber, pivots.get(0).getPivot().get(0));\n\n    // Negative facet limit\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether facet.limit is global, \n           // a local param, or specified as a per-field override for both fields\n           new SolrParams[] {\n             params(FacetParams.FACET_LIMIT, \"-1\",\n                    \"facet.pivot\",\"place_s,company_t\"),\n             // Broken: SOLR-6193\n             // params(\"facet.pivot\",\"{!facet.limit=-1}place_s,company_t\"),    \n             params(\"f.place_s.facet.limit\", \"-1\",\n                    \"f.company_t.facet.limit\", \"-1\",\n                    \"facet.pivot\",\"place_s,company_t\")                       }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(103, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(54, firstPlace.getPivot().size());\n        firstCompany = firstPlace.getPivot().get(0);\n        assertPivot(\"company_t\",\"bbc\", 101, firstCompany);\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Negative per-field facet limit (outer)\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether per-field facet.limit is \n           // a global or a local param\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params( \"facet.pivot\",\"{!f.id.facet.limit=-1}place_s,id\" ),\n             params( \"facet.pivot\",\"place_s,id\",\n                     \"f.id.facet.limit\", \"-1\")                            }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\", \n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,id\");\n        assertEquals(100, pivots.size()); // default\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(257, firstPlace.getPivot().size());\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Negative per-field facet limit (inner)\n    for (SolrParams facetParams : \n           // results should be the same regardless of wether per-field facet.limit is \n           // a global or a local param\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params( \"facet.pivot\",\"{!f.place_s.facet.limit=-1}place_s,id\" ),\n             params( \"facet.pivot\",\"place_s,id\",\n                     \"f.place_s.facet.limit\", \"-1\")                       }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\", \n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,id\");\n        assertEquals(103, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(100, firstPlace.getPivot().size()); // default\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n    \n    // Mincount + facet.pivot 2 different ways (swap field order)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 \"facet.pivot\",\"company_t,place_s\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"6\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(52, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n    //\n    pivots = rsp.getFacetPivot().get(\"company_t,place_s\");\n    assertEquals(4, pivots.size());\n    firstCompany = pivots.get(0);\n    assertPivot(\"company_t\", \"bbc\", 451, firstCompany);\n    assertEquals(52, firstCompany.getPivot().size());\n    firstPlace = firstCompany.getPivot().get(0);\n    assertPivot(\"place_s\", \"cardiff\", 101, firstPlace);\n\n    // refine on SPECIAL empty string\n    rsp = query( \"q\", \"*:*\",\n                 \"fq\", \"-place_s:0placeholder\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.limit\",\"1\",\n                 FacetParams.FACET_OVERREQUEST_RATIO, \"0\", // force refinement\n                 FacetParams.FACET_OVERREQUEST_COUNT, \"1\", // force refinement\n                 \"facet.pivot\",\"special_s,company_t\");\n    assertEquals(docNumber - 6, rsp.getResults().getNumFound()); // all docs but 0place\n    pivots = rsp.getFacetPivot().get(\"special_s,company_t\");\n    assertEquals(1, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"special_s\", SPECIAL, 3, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"microsoft\", 2, firstCompany);\n\n    // TODO test \"company_t,special_s\" as well\n\n\n    // refine on SPECIAL empty string & facet.missing\n    // Also proves refinement on non-top elements occurs and allows them to get into the top\n    rsp = query( \"q\", \"*:*\",\n                 \"fq\", \"-place_s:0placeholder\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.limit\",\"1\",\n                 \"facet.missing\",\"true\",\n                 FacetParams.FACET_OVERREQUEST_RATIO, \"0\", // force refinement\n                 FacetParams.FACET_OVERREQUEST_COUNT, \"2\", // force refinement\n                 \"facet.pivot\",\"special_s,company_t\");\n    assertEquals(docNumber - 6, rsp.getResults().getNumFound()); // all docs but 0place\n    pivots = rsp.getFacetPivot().get(\"special_s,company_t\");\n    assertEquals(2, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"special_s\", SPECIAL, 3, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"microsoft\", 2, firstCompany);\n    // last is \"missing\" val\n    assertPivot(\"special_s\", null, docNumber -6 -3 -2, pivots.get(1)); // -0place -SPECIAL -xxx\n\n    // forced refinement on facet.missing\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"f.bogus_x_s.facet.missing\",\"true\",\n                 \"f.bogus_y_s.facet.missing\",\"true\",\n                 \"facet.pivot\",\"bogus_x_s,place_s,bogus_y_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"12\"); \n    pivots = rsp.getFacetPivot().get(\"bogus_x_s,place_s,bogus_y_s,company_t\");\n    assertEquals(1, pivots.size()); // just the missing value for bogus_x_s\n    assertPivot(\"bogus_x_s\", null, docNumber, pivots.get(0));\n    pivots = pivots.get(0).getPivot();\n    assertEquals(12, pivots.size()); // places\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size()); // just the missing value for bogus_y_s\n    assertPivot(\"bogus_y_s\", null, 257, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0).getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(0).getPivot().get(1));\n\n\n\n\n\n    // Overrequesting a lot\n    this.query( \"q\", \"*:*\",\n                \"rows\", \"0\",\n                \"facet\", \"true\",\n                \"facet.pivot\",\"place_s,company_t\",\n                FacetParams.FACET_OVERREQUEST_RATIO, \"10\",\n                FacetParams.FACET_OVERREQUEST_COUNT, \"100\");    \n    \n    // Overrequesting off\n    this.query( \"q\", \"*:*\",\n                \"rows\", \"0\",\n                \"facet\", \"true\",\n                \"facet.pivot\",\"place_s,company_t\",\n                FacetParams.FACET_OVERREQUEST_RATIO, \"0\",\n                FacetParams.FACET_OVERREQUEST_COUNT, \"0\");\n\n    doTestDeepPivotStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLargeTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLargeTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    this.stress = 0 ;\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    setupDistributedPivotFacetDocuments();\n    \n    QueryResponse rsp = null;\n    \n    List<PivotField> pivots = null;\n    PivotField firstInt = null;\n    PivotField firstBool = null;\n    PivotField firstDate = null;\n    PivotField firstPlace = null;\n    PivotField firstCompany = null;\n\n    // basic check w/ limit & default sort (count)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"12\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(12, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // trivial mincount=0 check\n    rsp = query( \"q\", \"does_not_exist_s:foo\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"company_t\",\n                 FacetParams.FACET_LIMIT, \"10\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    pivots = rsp.getFacetPivot().get(\"company_t\");\n    assertEquals(10, pivots.size());\n    for (PivotField p : pivots) {\n      assertEquals(0, p.getCount());\n    }\n\n    // sanity check limit=0 w/ mincount=0 & missing=true\n    //\n    // SOLR-6328: doesn't work for single node, so can't work for distrib either (yet)\n    //\n    // PivotFacetField's init of needRefinementAtThisLevel as needing potential change\n    // \n    // rsp = query( \"q\", \"*:*\",\n    //              \"rows\", \"0\",\n    //              \"facet\",\"true\",\n    //              \"f.company_t.facet.limit\", \"10\",\n    //              \"facet.pivot\",\"special_s,bogus_s,company_t\",\n    //              \"facet.missing\", \"true\",\n    //              FacetParams.FACET_LIMIT, \"0\",\n    //              FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    // pivots = rsp.getFacetPivot().get(\"special_s,bogus_s,company_t\");\n    // assertEquals(1, pivots.size()); // only the missing\n    // assertPivot(\"special_s\", null, docNumber - 5, pivots.get(0)); // 5 docs w/special_s\n    // assertEquals(pivots.toString(), 1, pivots.get(0).getPivot());\n    // assertPivot(\"bogus_s\", null, docNumber, pivots.get(0).getPivot().get(0));\n    // // TODO: some asserts on company results\n\n    // basic check w/ default sort, limit, & mincount==0\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"50\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(50, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // sort=index + offset + limit w/ some variables\n    for (SolrParams variableParams : \n           new SolrParams[] { // bother variations should kwrk just as well\n             // defauts\n             params(),\n             // force refinement\n             params(FacetParams.FACET_OVERREQUEST_RATIO, \"1\", \n                    FacetParams.FACET_OVERREQUEST_COUNT, \"0\")           }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"f.place_s.facet.limit\", \"20\",\n                                                      \"f.place_s.facet.offset\", \"40\",\n                                                      \"facet.pivot\", \"place_s,company_t\"),\n                                              variableParams );\n\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(20, pivots.size()); // limit\n        for (int i = 0; i < 10; i++) {\n          PivotField place = pivots.get(i); \n          assertTrue(place.toString(), place.getValue().toString().endsWith(\"placeholder\"));\n          assertEquals(3, place.getPivot().size());\n          assertPivot(\"company_t\", \"bbc\", 6, place.getPivot().get(0));\n          assertPivot(\"company_t\", \"microsoft\", 6, place.getPivot().get(1));\n          assertPivot(\"company_t\", \"polecat\", 6, place.getPivot().get(2));\n        }\n        assertPivot(\"place_s\", \"cardiff\", 257, pivots.get(10));\n        assertPivot(\"place_s\", \"krakaw\", 1, pivots.get(11));\n        assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, pivots.get(12));\n        for (int i = 13; i < 20; i++) {\n          PivotField place = pivots.get(i); \n          assertTrue(place.toString(), place.getValue().toString().startsWith(\"placeholder\"));\n          assertEquals(1, place.getPivot().size());\n          PivotField company = place.getPivot().get(0);\n          assertTrue(company.toString(), company.getValue().toString().startsWith(\"compholder\"));\n          assertEquals(company.toString(), 1, company.getCount());\n        }\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount=0\n    //\n    // SOLR-6329: facet.pivot.mincount=0 doesn't work well with distrib\n    //\n    // broken honda\n    //\n    // This is tricky, here's what i think is happening.... \n    // - \"company:honda\" only exists on twoShard, and only w/ \"place:cardiff\"\n    // - twoShard has no other places in its docs\n    // - twoShard can't return any other places to w/ honda as a count=0 sub-value\n    // - if we refined all other companies places, would twoShard return honda==0 ?\n    //   ... but there's no refinement since mincount==0\n    // - would it even matter\n    //\n    // should we remove the refinement short circut?\n    //\n    // rsp = query( params( \"q\", \"*:*\",\n    //                      \"rows\", \"0\",\n    //                      \"facet\",\"true\",\n    //                      \"facet.sort\",\"index\",\n    //                      \"f.place_s.facet.limit\", \"20\",\n    //                      \"f.place_s.facet.offset\", \"40\",\n    //                      FacetParams.FACET_PIVOT_MINCOUNT,\"0\",\n    //                      \"facet.pivot\", \"place_s,company_t\") );\n    // // TODO: more asserts\n    //\n    //\n    // really trivial demonstration of the above problem\n    // \n    // rsp = query( params( \"q\", \"*:*\",\n    //                      \"rows\", \"0\",\n    //                      \"facet\",\"true\",\n    //                      FacetParams.FACET_PIVOT_MINCOUNT,\"0\",\n    //                      \"facet.pivot\", \"top_s,sub_s\") );\n\n    // basic check w/ limit & index sort\n    for (SolrParams facetParams : \n           // results should be the same regardless of whether local params are used\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params(\"facet.pivot\",\"{!facet.limit=4 facet.sort=index}place_s,company_t\"),\n             // params(\"facet.pivot\",\"{!facet.sort=index}place_s,company_t\",\n             //        FacetParams.FACET_LIMIT, \"4\"),\n             params(\"facet.pivot\",\"place_s,company_t\",\n                    FacetParams.FACET_LIMIT, \"4\",\n                    \"facet.sort\", \"index\")                                  }) {\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\"), \n                                              facetParams );\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(4, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n        firstCompany = firstPlace.getPivot().get(0);\n        assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Pivot Faceting (combined wtih Field Faceting)\n    for (SolrParams facetParams : \n           // with and w/o an excluded fq\n           // (either way, facet results should be the same)\n           new SolrParams[] { \n             params(\"facet.pivot\",\"place_s,company_t\",\n                    \"facet.field\",\"place_s\"),\n             params(\"facet.pivot\",\"{!ex=ok}place_s,company_t\",\n                    \"facet.field\",\"{!ex=ok}place_s\",\n                    \"fq\",\"{!tag=ok}place_s:cardiff\"),\n             params(\"facet.pivot\",\"{!ex=pl,co}place_s,company_t\",\n                    \"fq\",\"{!tag=pl}place_s:cardiff\",\n                    \"fq\",\"{!tag=co}company_t:bbc\")                      }) {\n      \n      // default order (count)\n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  FacetParams.FACET_LIMIT, \"4\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(4, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n      assertEquals(4, firstPlace.getPivot().size());\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n\n      // Index Order\n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  FacetParams.FACET_LIMIT, \"4\",\n                                                  \"facet.sort\", \"index\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(4, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n      assertEquals(3, firstPlace.getPivot().size()); // num vals in data < limit==3\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n      \n      // Field level limits \n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  \"f.place_s.facet.limit\",\"2\",\n                                                  \"f.company_t.facet.limit\",\"4\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(2, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n      assertEquals(4, firstPlace.getPivot().size());\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n    }\n\n    // Pivot Faceting Count w/fq (not excluded)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"place_s:cardiff\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(1, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n\n\n    // Same Pivot - one with exclusion and one w/o\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"{!tag=ff}pay_i:[2000 TO *]\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"{!key=filt}place_s,company_t\",\n                 \"facet.pivot\",\"{!key=nofilt ex=ff}place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"filt\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 105, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"microsoft\", 54, firstPlace.getPivot().get(1));\n    //\n    pivots = rsp.getFacetPivot().get(\"nofilt\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // Same Pivot - one in default (count) order and one in index order\n    //\n    // Broken: SOLR-6193 - the facet.sort localparam isn't being picked up correctly\n    //\n    // rsp = query( \"q\", \"*:*\",\n    //              \"rows\", \"0\",\n    //              \"facet\",\"true\",\n    //              \"fq\",\"pay_i:[2000 TO *]\",\n    //              \"facet.pivot\",\"{!key=sc}place_s,company_t\",\n    //              \"facet.pivot\",\"{!key=si facet.sort=index}place_s,company_t\",\n    //              FacetParams.FACET_LIMIT, \"4\");\n    // pivots = rsp.getFacetPivot().get(\"sc\");\n    // assertEquals(4, pivots.size());\n    // firstPlace = pivots.get(0);\n    // assertPivot(\"place_s\", \"cardiff\", 105, firstPlace); \n    // assertEquals(4, firstPlace.getPivot().size());\n    // assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // assertPivot(\"company_t\", \"microsoft\", 54, firstPlace.getPivot().get(1));\n    // //\n    // pivots = rsp.getFacetPivot().get(\"si\");\n    // assertEquals(4, pivots.size());\n    // firstPlace = pivots.get(0);\n    // assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace); \n    // assertEquals(3, firstPlace.getPivot().size()); // only 3 in the data < facet.limit\n    // assertPivot(\"company_t\", \"bbc\", 6, firstPlace.getPivot().get(0));\n    // assertPivot(\"company_t\", \"microsoft\", 6, firstPlace.getPivot().get(1));\n\n\n    // Field level limits and small offset\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 \"f.place_s.facet.limit\",\"2\",\n                 \"f.company_t.facet.limit\",\"4\",\n                 \"facet.offset\",\"1\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, firstPlace);\n    assertEquals(2, firstPlace.getPivot().size()); // num vals in data < limit==4\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 50, firstCompany);\n    \n    \n    // Field level offsets and limit\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"{!tag=pl}place_s:cardiff\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"{!ex=pl}place_s,company_t\",\n                 \"f.place_s.facet.offset\",\"1\",\n                 \"f.company_t.facet.offset\",\"2\",\n                 FacetParams.FACET_LIMIT, \"4\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size()); // num vals in data < limit==4\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"polecat\", 50, firstCompany);\n     \n\n    // datetime\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"hiredate_dt,place_s,company_t\",\n                 \"f.hiredate_dt.facet.limit\",\"2\",\n                 \"f.hiredate_dt.facet.offset\",\"1\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"hiredate_dt,place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstDate = pivots.get(0); // 2012-09-01T12:30:00Z\n    assertPivot(\"hiredate_dt\", new Date(1346502600000L), 200, firstDate);\n    assertEquals(1, firstDate.getPivot().size()); // num vals in data < limit==4\n    firstPlace = firstDate.getPivot().get(0);\n    assertPivot(\"place_s\", \"cardiff\", 200, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 50, firstCompany);\n\n    // int\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"pay_i,place_s,company_t\",\n                 \"f.pay_i.facet.limit\",\"2\",\n                 \"f.pay_i.facet.offset\",\"1\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"pay_i,place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstInt = pivots.get(0);\n    assertPivot(\"pay_i\", 2000, 50, firstInt);\n    assertEquals(4, firstInt.getPivot().size());\n    firstPlace = firstInt.getPivot().get(0);\n    assertPivot(\"place_s\", \"0placeholder\", 1, firstPlace);\n    assertEquals(3, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 1, firstCompany);\n    \n    // boolean\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"real_b,place_s,company_t\",\n                 \"f.real_b.facet.missing\",\"true\",\n                 \"f.real_b.facet.limit\",\"2\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"real_b,place_s,company_t\");\n    assertEquals(3, pivots.size());\n    firstBool = pivots.get(0);\n    assertPivot(\"real_b\", false, 300, firstBool);\n    assertEquals(4, firstBool.getPivot().size());\n    firstPlace = firstBool.getPivot().get(0);\n    assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n    assertEquals(3, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n    \n    // bogus fields\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"doesntexist_t,neitherdoi_i\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"doesntexist_t,neitherdoi_i\");\n    assertEquals(0, pivots.size());\n\n    // bogus fields with facet.missing\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"doesntexist_t,neitherdoi_i\",\n                 \"facet.missing\", \"true\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"doesntexist_t,neitherdoi_i\");\n    assertEquals(1, pivots.size());\n    assertPivot(\"doesntexist_t\", null, docNumber, pivots.get(0));\n    assertEquals(1, pivots.get(0).getPivot().size());\n    assertPivot(\"neitherdoi_i\", null, docNumber, pivots.get(0).getPivot().get(0));\n\n    // Negative facet limit\n    for (SolrParams facetParams : \n           // results should be the same regardless of whether facet.limit is global,\n           // a local param, or specified as a per-field override for both fields\n           new SolrParams[] {\n             params(FacetParams.FACET_LIMIT, \"-1\",\n                    \"facet.pivot\",\"place_s,company_t\"),\n             // Broken: SOLR-6193\n             // params(\"facet.pivot\",\"{!facet.limit=-1}place_s,company_t\"),    \n             params(\"f.place_s.facet.limit\", \"-1\",\n                    \"f.company_t.facet.limit\", \"-1\",\n                    \"facet.pivot\",\"place_s,company_t\")                       }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(103, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(54, firstPlace.getPivot().size());\n        firstCompany = firstPlace.getPivot().get(0);\n        assertPivot(\"company_t\",\"bbc\", 101, firstCompany);\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Negative per-field facet limit (outer)\n    for (SolrParams facetParams : \n           // results should be the same regardless of whether per-field facet.limit is\n           // a global or a local param\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params( \"facet.pivot\",\"{!f.id.facet.limit=-1}place_s,id\" ),\n             params( \"facet.pivot\",\"place_s,id\",\n                     \"f.id.facet.limit\", \"-1\")                            }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\", \n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,id\");\n        assertEquals(100, pivots.size()); // default\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(257, firstPlace.getPivot().size());\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Negative per-field facet limit (inner)\n    for (SolrParams facetParams : \n           // results should be the same regardless of whether per-field facet.limit is\n           // a global or a local param\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params( \"facet.pivot\",\"{!f.place_s.facet.limit=-1}place_s,id\" ),\n             params( \"facet.pivot\",\"place_s,id\",\n                     \"f.place_s.facet.limit\", \"-1\")                       }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\", \n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,id\");\n        assertEquals(103, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(100, firstPlace.getPivot().size()); // default\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n    \n    // Mincount + facet.pivot 2 different ways (swap field order)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 \"facet.pivot\",\"company_t,place_s\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"6\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(52, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n    //\n    pivots = rsp.getFacetPivot().get(\"company_t,place_s\");\n    assertEquals(4, pivots.size());\n    firstCompany = pivots.get(0);\n    assertPivot(\"company_t\", \"bbc\", 451, firstCompany);\n    assertEquals(52, firstCompany.getPivot().size());\n    firstPlace = firstCompany.getPivot().get(0);\n    assertPivot(\"place_s\", \"cardiff\", 101, firstPlace);\n\n    // refine on SPECIAL empty string\n    rsp = query( \"q\", \"*:*\",\n                 \"fq\", \"-place_s:0placeholder\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.limit\",\"1\",\n                 FacetParams.FACET_OVERREQUEST_RATIO, \"0\", // force refinement\n                 FacetParams.FACET_OVERREQUEST_COUNT, \"1\", // force refinement\n                 \"facet.pivot\",\"special_s,company_t\");\n    assertEquals(docNumber - 6, rsp.getResults().getNumFound()); // all docs but 0place\n    pivots = rsp.getFacetPivot().get(\"special_s,company_t\");\n    assertEquals(1, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"special_s\", SPECIAL, 3, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"microsoft\", 2, firstCompany);\n\n    // TODO test \"company_t,special_s\" as well\n\n\n    // refine on SPECIAL empty string & facet.missing\n    // Also proves refinement on non-top elements occurs and allows them to get into the top\n    rsp = query( \"q\", \"*:*\",\n                 \"fq\", \"-place_s:0placeholder\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.limit\",\"1\",\n                 \"facet.missing\",\"true\",\n                 FacetParams.FACET_OVERREQUEST_RATIO, \"0\", // force refinement\n                 FacetParams.FACET_OVERREQUEST_COUNT, \"2\", // force refinement\n                 \"facet.pivot\",\"special_s,company_t\");\n    assertEquals(docNumber - 6, rsp.getResults().getNumFound()); // all docs but 0place\n    pivots = rsp.getFacetPivot().get(\"special_s,company_t\");\n    assertEquals(2, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"special_s\", SPECIAL, 3, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"microsoft\", 2, firstCompany);\n    // last is \"missing\" val\n    assertPivot(\"special_s\", null, docNumber -6 -3 -2, pivots.get(1)); // -0place -SPECIAL -xxx\n\n    // forced refinement on facet.missing\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"f.bogus_x_s.facet.missing\",\"true\",\n                 \"f.bogus_y_s.facet.missing\",\"true\",\n                 \"facet.pivot\",\"bogus_x_s,place_s,bogus_y_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"12\"); \n    pivots = rsp.getFacetPivot().get(\"bogus_x_s,place_s,bogus_y_s,company_t\");\n    assertEquals(1, pivots.size()); // just the missing value for bogus_x_s\n    assertPivot(\"bogus_x_s\", null, docNumber, pivots.get(0));\n    pivots = pivots.get(0).getPivot();\n    assertEquals(12, pivots.size()); // places\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size()); // just the missing value for bogus_y_s\n    assertPivot(\"bogus_y_s\", null, 257, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0).getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(0).getPivot().get(1));\n\n\n\n\n\n    // Overrequesting a lot\n    this.query( \"q\", \"*:*\",\n                \"rows\", \"0\",\n                \"facet\", \"true\",\n                \"facet.pivot\",\"place_s,company_t\",\n                FacetParams.FACET_OVERREQUEST_RATIO, \"10\",\n                FacetParams.FACET_OVERREQUEST_COUNT, \"100\");    \n    \n    // Overrequesting off\n    this.query( \"q\", \"*:*\",\n                \"rows\", \"0\",\n                \"facet\", \"true\",\n                \"facet.pivot\",\"place_s,company_t\",\n                FacetParams.FACET_OVERREQUEST_RATIO, \"0\",\n                FacetParams.FACET_OVERREQUEST_COUNT, \"0\");\n\n    doTestDeepPivotStats();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    this.stress = 0 ;\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    setupDistributedPivotFacetDocuments();\n    \n    QueryResponse rsp = null;\n    \n    List<PivotField> pivots = null;\n    PivotField firstInt = null;\n    PivotField firstBool = null;\n    PivotField firstDate = null;\n    PivotField firstPlace = null;\n    PivotField firstCompany = null;\n\n    // basic check w/ limit & default sort (count)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"12\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(12, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // trivial mincount=0 check\n    rsp = query( \"q\", \"does_not_exist_s:foo\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"company_t\",\n                 FacetParams.FACET_LIMIT, \"10\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    pivots = rsp.getFacetPivot().get(\"company_t\");\n    assertEquals(10, pivots.size());\n    for (PivotField p : pivots) {\n      assertEquals(0, p.getCount());\n    }\n\n    // sanity check limit=0 w/ mincount=0 & missing=true\n    //\n    // SOLR-6328: doesn't work for single node, so can't work for distrib either (yet)\n    //\n    // PivotFacetField's init of needRefinementAtThisLevel as needing potential change\n    // \n    // rsp = query( \"q\", \"*:*\",\n    //              \"rows\", \"0\",\n    //              \"facet\",\"true\",\n    //              \"f.company_t.facet.limit\", \"10\",\n    //              \"facet.pivot\",\"special_s,bogus_s,company_t\",\n    //              \"facet.missing\", \"true\",\n    //              FacetParams.FACET_LIMIT, \"0\",\n    //              FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    // pivots = rsp.getFacetPivot().get(\"special_s,bogus_s,company_t\");\n    // assertEquals(1, pivots.size()); // only the missing\n    // assertPivot(\"special_s\", null, docNumber - 5, pivots.get(0)); // 5 docs w/special_s\n    // assertEquals(pivots.toString(), 1, pivots.get(0).getPivot());\n    // assertPivot(\"bogus_s\", null, docNumber, pivots.get(0).getPivot().get(0));\n    // // TODO: some asserts on company results\n\n    // basic check w/ default sort, limit, & mincount==0\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"50\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"0\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(50, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // sort=index + offset + limit w/ some variables\n    for (SolrParams variableParams : \n           new SolrParams[] { // bother variations should kwrk just as well\n             // defauts\n             params(),\n             // force refinement\n             params(FacetParams.FACET_OVERREQUEST_RATIO, \"1\", \n                    FacetParams.FACET_OVERREQUEST_COUNT, \"0\")           }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"f.place_s.facet.limit\", \"20\",\n                                                      \"f.place_s.facet.offset\", \"40\",\n                                                      \"facet.pivot\", \"place_s,company_t\"),\n                                              variableParams );\n\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(20, pivots.size()); // limit\n        for (int i = 0; i < 10; i++) {\n          PivotField place = pivots.get(i); \n          assertTrue(place.toString(), place.getValue().toString().endsWith(\"placeholder\"));\n          assertEquals(3, place.getPivot().size());\n          assertPivot(\"company_t\", \"bbc\", 6, place.getPivot().get(0));\n          assertPivot(\"company_t\", \"microsoft\", 6, place.getPivot().get(1));\n          assertPivot(\"company_t\", \"polecat\", 6, place.getPivot().get(2));\n        }\n        assertPivot(\"place_s\", \"cardiff\", 257, pivots.get(10));\n        assertPivot(\"place_s\", \"krakaw\", 1, pivots.get(11));\n        assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, pivots.get(12));\n        for (int i = 13; i < 20; i++) {\n          PivotField place = pivots.get(i); \n          assertTrue(place.toString(), place.getValue().toString().startsWith(\"placeholder\"));\n          assertEquals(1, place.getPivot().size());\n          PivotField company = place.getPivot().get(0);\n          assertTrue(company.toString(), company.getValue().toString().startsWith(\"compholder\"));\n          assertEquals(company.toString(), 1, company.getCount());\n        }\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount=0\n    //\n    // SOLR-6329: facet.pivot.mincount=0 doesn't work well with distrib\n    //\n    // broken honda\n    //\n    // This is tricky, here's what i think is happening.... \n    // - \"company:honda\" only exists on twoShard, and only w/ \"place:cardiff\"\n    // - twoShard has no other places in its docs\n    // - twoShard can't return any other places to w/ honda as a count=0 sub-value\n    // - if we refined all other companies places, would twoShard return honda==0 ?\n    //   ... but there's no refinement since mincount==0\n    // - would it even matter\n    //\n    // should we remove the refinement short circut?\n    //\n    // rsp = query( params( \"q\", \"*:*\",\n    //                      \"rows\", \"0\",\n    //                      \"facet\",\"true\",\n    //                      \"facet.sort\",\"index\",\n    //                      \"f.place_s.facet.limit\", \"20\",\n    //                      \"f.place_s.facet.offset\", \"40\",\n    //                      FacetParams.FACET_PIVOT_MINCOUNT,\"0\",\n    //                      \"facet.pivot\", \"place_s,company_t\") );\n    // // TODO: more asserts\n    //\n    //\n    // really trivial demonstration of the above problem\n    // \n    // rsp = query( params( \"q\", \"*:*\",\n    //                      \"rows\", \"0\",\n    //                      \"facet\",\"true\",\n    //                      FacetParams.FACET_PIVOT_MINCOUNT,\"0\",\n    //                      \"facet.pivot\", \"top_s,sub_s\") );\n\n    // basic check w/ limit & index sort\n    for (SolrParams facetParams : \n           // results should be the same regardless of whether local params are used\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params(\"facet.pivot\",\"{!facet.limit=4 facet.sort=index}place_s,company_t\"),\n             // params(\"facet.pivot\",\"{!facet.sort=index}place_s,company_t\",\n             //        FacetParams.FACET_LIMIT, \"4\"),\n             params(\"facet.pivot\",\"place_s,company_t\",\n                    FacetParams.FACET_LIMIT, \"4\",\n                    \"facet.sort\", \"index\")                                  }) {\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\"), \n                                              facetParams );\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(4, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n        firstCompany = firstPlace.getPivot().get(0);\n        assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Pivot Faceting (combined wtih Field Faceting)\n    for (SolrParams facetParams : \n           // with and w/o an excluded fq\n           // (either way, facet results should be the same)\n           new SolrParams[] { \n             params(\"facet.pivot\",\"place_s,company_t\",\n                    \"facet.field\",\"place_s\"),\n             params(\"facet.pivot\",\"{!ex=ok}place_s,company_t\",\n                    \"facet.field\",\"{!ex=ok}place_s\",\n                    \"fq\",\"{!tag=ok}place_s:cardiff\"),\n             params(\"facet.pivot\",\"{!ex=pl,co}place_s,company_t\",\n                    \"fq\",\"{!tag=pl}place_s:cardiff\",\n                    \"fq\",\"{!tag=co}company_t:bbc\")                      }) {\n      \n      // default order (count)\n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  FacetParams.FACET_LIMIT, \"4\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(4, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n      assertEquals(4, firstPlace.getPivot().size());\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n\n      // Index Order\n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  FacetParams.FACET_LIMIT, \"4\",\n                                                  \"facet.sort\", \"index\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(4, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n      assertEquals(3, firstPlace.getPivot().size()); // num vals in data < limit==3\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n      \n      // Field level limits \n      rsp = query( SolrParams.wrapDefaults(params(\"q\", \"*:*\",\n                                                  \"rows\", \"0\",\n                                                  \"facet\",\"true\",\n                                                  \"f.place_s.facet.limit\",\"2\",\n                                                  \"f.company_t.facet.limit\",\"4\"),\n                                           facetParams) );\n      pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n      assertEquals(2, pivots.size());\n      firstPlace = pivots.get(0);\n      assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n      assertEquals(4, firstPlace.getPivot().size());\n      firstCompany = firstPlace.getPivot().get(0);\n      assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n    }\n\n    // Pivot Faceting Count w/fq (not excluded)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"place_s:cardiff\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(1, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n\n\n    // Same Pivot - one with exclusion and one w/o\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"{!tag=ff}pay_i:[2000 TO *]\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"{!key=filt}place_s,company_t\",\n                 \"facet.pivot\",\"{!key=nofilt ex=ff}place_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"filt\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 105, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"microsoft\", 54, firstPlace.getPivot().get(1));\n    //\n    pivots = rsp.getFacetPivot().get(\"nofilt\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(1));\n\n    // Same Pivot - one in default (count) order and one in index order\n    //\n    // Broken: SOLR-6193 - the facet.sort localparam isn't being picked up correctly\n    //\n    // rsp = query( \"q\", \"*:*\",\n    //              \"rows\", \"0\",\n    //              \"facet\",\"true\",\n    //              \"fq\",\"pay_i:[2000 TO *]\",\n    //              \"facet.pivot\",\"{!key=sc}place_s,company_t\",\n    //              \"facet.pivot\",\"{!key=si facet.sort=index}place_s,company_t\",\n    //              FacetParams.FACET_LIMIT, \"4\");\n    // pivots = rsp.getFacetPivot().get(\"sc\");\n    // assertEquals(4, pivots.size());\n    // firstPlace = pivots.get(0);\n    // assertPivot(\"place_s\", \"cardiff\", 105, firstPlace); \n    // assertEquals(4, firstPlace.getPivot().size());\n    // assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0));\n    // assertPivot(\"company_t\", \"microsoft\", 54, firstPlace.getPivot().get(1));\n    // //\n    // pivots = rsp.getFacetPivot().get(\"si\");\n    // assertEquals(4, pivots.size());\n    // firstPlace = pivots.get(0);\n    // assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace); \n    // assertEquals(3, firstPlace.getPivot().size()); // only 3 in the data < facet.limit\n    // assertPivot(\"company_t\", \"bbc\", 6, firstPlace.getPivot().get(0));\n    // assertPivot(\"company_t\", \"microsoft\", 6, firstPlace.getPivot().get(1));\n\n\n    // Field level limits and small offset\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 \"f.place_s.facet.limit\",\"2\",\n                 \"f.company_t.facet.limit\",\"4\",\n                 \"facet.offset\",\"1\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, firstPlace);\n    assertEquals(2, firstPlace.getPivot().size()); // num vals in data < limit==4\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 50, firstCompany);\n    \n    \n    // Field level offsets and limit\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"fq\",\"{!tag=pl}place_s:cardiff\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"{!ex=pl}place_s,company_t\",\n                 \"f.place_s.facet.offset\",\"1\",\n                 \"f.company_t.facet.offset\",\"2\",\n                 FacetParams.FACET_LIMIT, \"4\"); \n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(4, pivots.size());\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"medical staffing network holdings, inc.\", 51, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size()); // num vals in data < limit==4\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"polecat\", 50, firstCompany);\n     \n\n    // datetime\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"hiredate_dt,place_s,company_t\",\n                 \"f.hiredate_dt.facet.limit\",\"2\",\n                 \"f.hiredate_dt.facet.offset\",\"1\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"hiredate_dt,place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstDate = pivots.get(0); // 2012-09-01T12:30:00Z\n    assertPivot(\"hiredate_dt\", new Date(1346502600000L), 200, firstDate);\n    assertEquals(1, firstDate.getPivot().size()); // num vals in data < limit==4\n    firstPlace = firstDate.getPivot().get(0);\n    assertPivot(\"place_s\", \"cardiff\", 200, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 50, firstCompany);\n\n    // int\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"pay_i,place_s,company_t\",\n                 \"f.pay_i.facet.limit\",\"2\",\n                 \"f.pay_i.facet.offset\",\"1\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"pay_i,place_s,company_t\");\n    assertEquals(2, pivots.size());\n    firstInt = pivots.get(0);\n    assertPivot(\"pay_i\", 2000, 50, firstInt);\n    assertEquals(4, firstInt.getPivot().size());\n    firstPlace = firstInt.getPivot().get(0);\n    assertPivot(\"place_s\", \"0placeholder\", 1, firstPlace);\n    assertEquals(3, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 1, firstCompany);\n    \n    // boolean\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"real_b,place_s,company_t\",\n                 \"f.real_b.facet.missing\",\"true\",\n                 \"f.real_b.facet.limit\",\"2\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"real_b,place_s,company_t\");\n    assertEquals(3, pivots.size());\n    firstBool = pivots.get(0);\n    assertPivot(\"real_b\", false, 300, firstBool);\n    assertEquals(4, firstBool.getPivot().size());\n    firstPlace = firstBool.getPivot().get(0);\n    assertPivot(\"place_s\", \"0placeholder\", 6, firstPlace);\n    assertEquals(3, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 6, firstCompany);\n    \n    // bogus fields\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"doesntexist_t,neitherdoi_i\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"doesntexist_t,neitherdoi_i\");\n    assertEquals(0, pivots.size());\n\n    // bogus fields with facet.missing\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"doesntexist_t,neitherdoi_i\",\n                 \"facet.missing\", \"true\",\n                 FacetParams.FACET_LIMIT, \"4\");\n    pivots = rsp.getFacetPivot().get(\"doesntexist_t,neitherdoi_i\");\n    assertEquals(1, pivots.size());\n    assertPivot(\"doesntexist_t\", null, docNumber, pivots.get(0));\n    assertEquals(1, pivots.get(0).getPivot().size());\n    assertPivot(\"neitherdoi_i\", null, docNumber, pivots.get(0).getPivot().get(0));\n\n    // Negative facet limit\n    for (SolrParams facetParams : \n           // results should be the same regardless of whether facet.limit is global,\n           // a local param, or specified as a per-field override for both fields\n           new SolrParams[] {\n             params(FacetParams.FACET_LIMIT, \"-1\",\n                    \"facet.pivot\",\"place_s,company_t\"),\n             // Broken: SOLR-6193\n             // params(\"facet.pivot\",\"{!facet.limit=-1}place_s,company_t\"),    \n             params(\"f.place_s.facet.limit\", \"-1\",\n                    \"f.company_t.facet.limit\", \"-1\",\n                    \"facet.pivot\",\"place_s,company_t\")                       }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n        assertEquals(103, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(54, firstPlace.getPivot().size());\n        firstCompany = firstPlace.getPivot().get(0);\n        assertPivot(\"company_t\",\"bbc\", 101, firstCompany);\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Negative per-field facet limit (outer)\n    for (SolrParams facetParams : \n           // results should be the same regardless of whether per-field facet.limit is\n           // a global or a local param\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params( \"facet.pivot\",\"{!f.id.facet.limit=-1}place_s,id\" ),\n             params( \"facet.pivot\",\"place_s,id\",\n                     \"f.id.facet.limit\", \"-1\")                            }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\", \n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,id\");\n        assertEquals(100, pivots.size()); // default\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(257, firstPlace.getPivot().size());\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // Negative per-field facet limit (inner)\n    for (SolrParams facetParams : \n           // results should be the same regardless of whether per-field facet.limit is\n           // a global or a local param\n           new SolrParams[] {\n             // Broken: SOLR-6193\n             // params( \"facet.pivot\",\"{!f.place_s.facet.limit=-1}place_s,id\" ),\n             params( \"facet.pivot\",\"place_s,id\",\n                     \"f.place_s.facet.limit\", \"-1\")                       }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\", \n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.sort\", \"count\" ),\n                                              facetParams);\n      try {\n        rsp = query( p );\n        pivots = rsp.getFacetPivot().get(\"place_s,id\");\n        assertEquals(103, pivots.size());\n        firstPlace = pivots.get(0);\n        assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n        assertEquals(100, firstPlace.getPivot().size()); // default\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n    \n    // Mincount + facet.pivot 2 different ways (swap field order)\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.pivot\",\"place_s,company_t\",\n                 \"facet.pivot\",\"company_t,place_s\",\n                 FacetParams.FACET_PIVOT_MINCOUNT,\"6\");\n    pivots = rsp.getFacetPivot().get(\"place_s,company_t\");\n    assertEquals(52, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(4, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"bbc\", 101, firstCompany);\n    //\n    pivots = rsp.getFacetPivot().get(\"company_t,place_s\");\n    assertEquals(4, pivots.size());\n    firstCompany = pivots.get(0);\n    assertPivot(\"company_t\", \"bbc\", 451, firstCompany);\n    assertEquals(52, firstCompany.getPivot().size());\n    firstPlace = firstCompany.getPivot().get(0);\n    assertPivot(\"place_s\", \"cardiff\", 101, firstPlace);\n\n    // refine on SPECIAL empty string\n    rsp = query( \"q\", \"*:*\",\n                 \"fq\", \"-place_s:0placeholder\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.limit\",\"1\",\n                 FacetParams.FACET_OVERREQUEST_RATIO, \"0\", // force refinement\n                 FacetParams.FACET_OVERREQUEST_COUNT, \"1\", // force refinement\n                 \"facet.pivot\",\"special_s,company_t\");\n    assertEquals(docNumber - 6, rsp.getResults().getNumFound()); // all docs but 0place\n    pivots = rsp.getFacetPivot().get(\"special_s,company_t\");\n    assertEquals(1, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"special_s\", SPECIAL, 3, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"microsoft\", 2, firstCompany);\n\n    // TODO test \"company_t,special_s\" as well\n\n\n    // refine on SPECIAL empty string & facet.missing\n    // Also proves refinement on non-top elements occurs and allows them to get into the top\n    rsp = query( \"q\", \"*:*\",\n                 \"fq\", \"-place_s:0placeholder\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"facet.limit\",\"1\",\n                 \"facet.missing\",\"true\",\n                 FacetParams.FACET_OVERREQUEST_RATIO, \"0\", // force refinement\n                 FacetParams.FACET_OVERREQUEST_COUNT, \"2\", // force refinement\n                 \"facet.pivot\",\"special_s,company_t\");\n    assertEquals(docNumber - 6, rsp.getResults().getNumFound()); // all docs but 0place\n    pivots = rsp.getFacetPivot().get(\"special_s,company_t\");\n    assertEquals(2, pivots.size()); \n    firstPlace = pivots.get(0);\n    assertPivot(\"special_s\", SPECIAL, 3, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size());\n    firstCompany = firstPlace.getPivot().get(0);\n    assertPivot(\"company_t\", \"microsoft\", 2, firstCompany);\n    // last is \"missing\" val\n    assertPivot(\"special_s\", null, docNumber -6 -3 -2, pivots.get(1)); // -0place -SPECIAL -xxx\n\n    // forced refinement on facet.missing\n    rsp = query( \"q\", \"*:*\",\n                 \"rows\", \"0\",\n                 \"facet\",\"true\",\n                 \"f.bogus_x_s.facet.missing\",\"true\",\n                 \"f.bogus_y_s.facet.missing\",\"true\",\n                 \"facet.pivot\",\"bogus_x_s,place_s,bogus_y_s,company_t\",\n                 FacetParams.FACET_LIMIT, \"12\"); \n    pivots = rsp.getFacetPivot().get(\"bogus_x_s,place_s,bogus_y_s,company_t\");\n    assertEquals(1, pivots.size()); // just the missing value for bogus_x_s\n    assertPivot(\"bogus_x_s\", null, docNumber, pivots.get(0));\n    pivots = pivots.get(0).getPivot();\n    assertEquals(12, pivots.size()); // places\n    firstPlace = pivots.get(0);\n    assertPivot(\"place_s\", \"cardiff\", 257, firstPlace);\n    assertEquals(1, firstPlace.getPivot().size()); // just the missing value for bogus_y_s\n    assertPivot(\"bogus_y_s\", null, 257, firstPlace.getPivot().get(0));\n    assertPivot(\"company_t\", \"bbc\", 101, firstPlace.getPivot().get(0).getPivot().get(0));\n    // Microsoft will come back wrong if refinement was not done correctly\n    assertPivot(\"company_t\", \"microsoft\", 56, firstPlace.getPivot().get(0).getPivot().get(1));\n\n\n\n\n\n    // Overrequesting a lot\n    this.query( \"q\", \"*:*\",\n                \"rows\", \"0\",\n                \"facet\", \"true\",\n                \"facet.pivot\",\"place_s,company_t\",\n                FacetParams.FACET_OVERREQUEST_RATIO, \"10\",\n                FacetParams.FACET_OVERREQUEST_COUNT, \"100\");    \n    \n    // Overrequesting off\n    this.query( \"q\", \"*:*\",\n                \"rows\", \"0\",\n                \"facet\", \"true\",\n                \"facet.pivot\",\"place_s,company_t\",\n                FacetParams.FACET_OVERREQUEST_RATIO, \"0\",\n                FacetParams.FACET_OVERREQUEST_COUNT, \"0\");\n\n    doTestDeepPivotStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"abb23fcc2461782ab204e61213240feb77d355aa":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["abb23fcc2461782ab204e61213240feb77d355aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}