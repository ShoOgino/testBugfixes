{"path":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#doTest().mjava","commits":[{"id":"2ba6726f047e3cb4c07099505450fa11c486c071","date":1414264828,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    String overseerNode = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    create.setCollectionName(collectionName);\n    create.setNumShards(1);\n    create.setReplicationFactor(1);\n    create.setCreateNodeSet(overseerNode);\n    ModifiableSolrParams params = new ModifiableSolrParams(create.getParams());\n    params.set(\"stateFormat\", \"2\");\n    QueryRequest req = new QueryRequest(params);\n    req.setPath(\"/admin/collections\");\n    NamedList<Object> request = cloudClient.request(req);\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n      delete.setCollectionName(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = new CollectionAdminRequest.Create();\n      create.setCollectionName(collectionName);\n      create.setNumShards(1);\n      create.setReplicationFactor(1);\n      create.setCreateNodeSet(notOverseerNode);\n      params = new ModifiableSolrParams(create.getParams());\n      params.set(\"stateFormat\", \"2\");\n      req = new QueryRequest(params);\n      req.setPath(\"/admin/collections\");\n      request = cloudClient.request(req);\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    create.setCollectionName(collectionName);\n    create.setNumShards(1);\n    create.setReplicationFactor(1);\n    create.setCreateNodeSet(overseerNode);\n    ModifiableSolrParams params = new ModifiableSolrParams(create.getParams());\n    params.set(\"stateFormat\", \"2\");\n    QueryRequest req = new QueryRequest(params);\n    req.setPath(\"/admin/collections\");\n    NamedList<Object> request = cloudClient.request(req);\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n      delete.setCollectionName(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = new CollectionAdminRequest.Create();\n      create.setCollectionName(collectionName);\n      create.setNumShards(1);\n      create.setReplicationFactor(1);\n      create.setCreateNodeSet(notOverseerNode);\n      params = new ModifiableSolrParams(create.getParams());\n      params.set(\"stateFormat\", \"2\");\n      req = new QueryRequest(params);\n      req.setPath(\"/admin/collections\");\n      request = cloudClient.request(req);\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    String overseerNode = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    create.setCollectionName(collectionName);\n    create.setNumShards(1);\n    create.setReplicationFactor(1);\n    create.setCreateNodeSet(overseerNode);\n    ModifiableSolrParams params = new ModifiableSolrParams(create.getParams());\n    params.set(\"stateFormat\", \"2\");\n    QueryRequest req = new QueryRequest(params);\n    req.setPath(\"/admin/collections\");\n    NamedList<Object> request = cloudClient.request(req);\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n      delete.setCollectionName(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = new CollectionAdminRequest.Create();\n      create.setCollectionName(collectionName);\n      create.setNumShards(1);\n      create.setReplicationFactor(1);\n      create.setCreateNodeSet(notOverseerNode);\n      params = new ModifiableSolrParams(create.getParams());\n      params.set(\"stateFormat\", \"2\");\n      req = new QueryRequest(params);\n      req.setPath(\"/admin/collections\");\n      request = cloudClient.request(req);\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abb23fcc2461782ab204e61213240feb77d355aa":["2ba6726f047e3cb4c07099505450fa11c486c071"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ba6726f047e3cb4c07099505450fa11c486c071":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ba6726f047e3cb4c07099505450fa11c486c071"],"2ba6726f047e3cb4c07099505450fa11c486c071":["abb23fcc2461782ab204e61213240feb77d355aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}