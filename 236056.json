{"path":"lucene/queries/src/java/org/apache/lucene/queries/intervals/Disjunctions#pullUp(List[IntervalsSource],Function[List[IntervalsSource],IntervalsSource]).mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/Disjunctions#pullUp(List[IntervalsSource],Function[List[IntervalsSource],IntervalsSource]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/Disjunctions#pullUp(List[IntervalsSource],Function[List[IntervalsSource],IntervalsSource]).mjava","sourceNew":"  public static List<IntervalsSource> pullUp(List<IntervalsSource> sources,\n                                             Function<List<IntervalsSource>, IntervalsSource> function) {\n\n    List<List<IntervalsSource>> rewritten = new ArrayList<>();\n    rewritten.add(new ArrayList<>());\n    for (IntervalsSource source : sources) {\n      List<IntervalsSource> disjuncts = splitDisjunctions(source);\n      if (disjuncts.size() == 1) {\n        rewritten.forEach(l -> l.add(disjuncts.get(0)));\n      }\n      else {\n        if (rewritten.size() * disjuncts.size() > IndexSearcher.getMaxClauseCount()) {\n          throw new IllegalArgumentException(\"Too many disjunctions to expand\");\n        }\n        List<List<IntervalsSource>> toAdd = new ArrayList<>();\n        for (IntervalsSource disj : disjuncts) {\n          // clone the rewritten list, then append the disjunct\n          for (List<IntervalsSource> subList : rewritten) {\n            List<IntervalsSource> l = new ArrayList<>(subList);\n            l.add(disj);\n            toAdd.add(l);\n          }\n        }\n        rewritten = toAdd;\n      }\n    }\n    if (rewritten.size() == 1) {\n      return Collections.singletonList(function.apply(rewritten.get(0)));\n    }\n    return rewritten.stream().map(function).collect(Collectors.toList());\n  }\n\n","sourceOld":"  public static List<IntervalsSource> pullUp(List<IntervalsSource> sources,\n                                             Function<List<IntervalsSource>, IntervalsSource> function) {\n\n    List<List<IntervalsSource>> rewritten = new ArrayList<>();\n    rewritten.add(new ArrayList<>());\n    for (IntervalsSource source : sources) {\n      List<IntervalsSource> disjuncts = splitDisjunctions(source);\n      if (disjuncts.size() == 1) {\n        rewritten.forEach(l -> l.add(disjuncts.get(0)));\n      }\n      else {\n        if (rewritten.size() * disjuncts.size() > IndexSearcher.getMaxClauseCount()) {\n          throw new IllegalArgumentException(\"Too many disjunctions to expand\");\n        }\n        List<List<IntervalsSource>> toAdd = new ArrayList<>();\n        for (IntervalsSource disj : disjuncts) {\n          // clone the rewritten list, then append the disjunct\n          for (List<IntervalsSource> subList : rewritten) {\n            List<IntervalsSource> l = new ArrayList<>(subList);\n            l.add(disj);\n            toAdd.add(l);\n          }\n        }\n        rewritten = toAdd;\n      }\n    }\n    if (rewritten.size() == 1) {\n      return Collections.singletonList(function.apply(rewritten.get(0)));\n    }\n    return rewritten.stream().map(function).collect(Collectors.toList());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}