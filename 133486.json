{"path":"solr/core/src/java/org/apache/solr/analysis/ReversedWildcardFilter#reverse(char[],int,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/ReversedWildcardFilter#reverse(char[],int,int).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/ReversedWildcardFilter#reverse(char[],int,int).mjava","sourceNew":"  /**\n   * Partially reverses the given input buffer in-place from the given offset\n   * up to the given length, keeping surrogate pairs in the correct (non-reversed) order.\n   * @param buffer the input char array to reverse\n   * @param start the offset from where to reverse the buffer\n   * @param len the length in the buffer up to where the\n   *        buffer should be reversed\n   */\n  public static void reverse(final char[] buffer, final int start, final int len) {\n    /* modified version of Apache Harmony AbstractStringBuilder reverse0() */\n    if (len < 2)\n      return;\n    int end = (start + len) - 1;\n    char frontHigh = buffer[start];\n    char endLow = buffer[end];\n    boolean allowFrontSur = true, allowEndSur = true;\n    final int mid = start + (len >> 1);\n    for (int i = start; i < mid; ++i, --end) {\n      final char frontLow = buffer[i + 1];\n      final char endHigh = buffer[end - 1];\n      final boolean surAtFront = allowFrontSur\n          && Character.isSurrogatePair(frontHigh, frontLow);\n      if (surAtFront && (len < 3)) {\n        // nothing to do since surAtFront is allowed and 1 char left\n        return;\n      }\n      final boolean surAtEnd = allowEndSur\n          && Character.isSurrogatePair(endHigh, endLow);\n      allowFrontSur = allowEndSur = true;\n      if (surAtFront == surAtEnd) {\n        if (surAtFront) {\n          // both surrogates\n          buffer[end] = frontLow;\n          buffer[--end] = frontHigh;\n          buffer[i] = endHigh;\n          buffer[++i] = endLow;\n          frontHigh = buffer[i + 1];\n          endLow = buffer[end - 1];\n        } else {\n          // neither surrogates\n          buffer[end] = frontHigh;\n          buffer[i] = endLow;\n          frontHigh = frontLow;\n          endLow = endHigh;\n        }\n      } else {\n        if (surAtFront) {\n          // surrogate only at the front\n          buffer[end] = frontLow;\n          buffer[i] = endLow;\n          endLow = endHigh;\n          allowFrontSur = false;\n        } else {\n          // surrogate only at the end\n          buffer[end] = frontHigh;\n          buffer[i] = endHigh;\n          frontHigh = frontLow;\n          allowEndSur = false;\n        }\n      }\n    }\n    if ((len & 0x01) == 1 && !(allowFrontSur && allowEndSur)) {\n      // only if odd length\n      buffer[end] = allowFrontSur ? endLow : frontHigh;\n    }\n  }\n\n","sourceOld":"  /**\n   * Partially reverses the given input buffer in-place from the given offset\n   * up to the given length, keeping surrogate pairs in the correct (non-reversed) order.\n   * @param buffer the input char array to reverse\n   * @param start the offset from where to reverse the buffer\n   * @param len the length in the buffer up to where the\n   *        buffer should be reversed\n   */\n  public static void reverse(final char[] buffer, final int start, final int len) {\n    /* modified version of Apache Harmony AbstractStringBuilder reverse0() */\n    if (len < 2)\n      return;\n    int end = (start + len) - 1;\n    char frontHigh = buffer[start];\n    char endLow = buffer[end];\n    boolean allowFrontSur = true, allowEndSur = true;\n    final int mid = start + (len >> 1);\n    for (int i = start; i < mid; ++i, --end) {\n      final char frontLow = buffer[i + 1];\n      final char endHigh = buffer[end - 1];\n      final boolean surAtFront = allowFrontSur\n          && Character.isSurrogatePair(frontHigh, frontLow);\n      if (surAtFront && (len < 3)) {\n        // nothing to do since surAtFront is allowed and 1 char left\n        return;\n      }\n      final boolean surAtEnd = allowEndSur\n          && Character.isSurrogatePair(endHigh, endLow);\n      allowFrontSur = allowEndSur = true;\n      if (surAtFront == surAtEnd) {\n        if (surAtFront) {\n          // both surrogates\n          buffer[end] = frontLow;\n          buffer[--end] = frontHigh;\n          buffer[i] = endHigh;\n          buffer[++i] = endLow;\n          frontHigh = buffer[i + 1];\n          endLow = buffer[end - 1];\n        } else {\n          // neither surrogates\n          buffer[end] = frontHigh;\n          buffer[i] = endLow;\n          frontHigh = frontLow;\n          endLow = endHigh;\n        }\n      } else {\n        if (surAtFront) {\n          // surrogate only at the front\n          buffer[end] = frontLow;\n          buffer[i] = endLow;\n          endLow = endHigh;\n          allowFrontSur = false;\n        } else {\n          // surrogate only at the end\n          buffer[end] = frontHigh;\n          buffer[i] = endHigh;\n          frontHigh = frontLow;\n          allowEndSur = false;\n        }\n      }\n    }\n    if ((len & 0x01) == 1 && !(allowFrontSur && allowEndSur)) {\n      // only if odd length\n      buffer[end] = allowFrontSur ? endLow : frontHigh;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/ReversedWildcardFilter#reverse(char[],int,int).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/ReversedWildcardFilter#reverse(char[],int,int).mjava","sourceNew":"  /**\n   * Partially reverses the given input buffer in-place from the given offset\n   * up to the given length, keeping surrogate pairs in the correct (non-reversed) order.\n   * @param buffer the input char array to reverse\n   * @param start the offset from where to reverse the buffer\n   * @param len the length in the buffer up to where the\n   *        buffer should be reversed\n   */\n  public static void reverse(final char[] buffer, final int start, final int len) {\n    /* modified version of Apache Harmony AbstractStringBuilder reverse0() */\n    if (len < 2)\n      return;\n    int end = (start + len) - 1;\n    char frontHigh = buffer[start];\n    char endLow = buffer[end];\n    boolean allowFrontSur = true, allowEndSur = true;\n    final int mid = start + (len >> 1);\n    for (int i = start; i < mid; ++i, --end) {\n      final char frontLow = buffer[i + 1];\n      final char endHigh = buffer[end - 1];\n      final boolean surAtFront = allowFrontSur\n          && Character.isSurrogatePair(frontHigh, frontLow);\n      if (surAtFront && (len < 3)) {\n        // nothing to do since surAtFront is allowed and 1 char left\n        return;\n      }\n      final boolean surAtEnd = allowEndSur\n          && Character.isSurrogatePair(endHigh, endLow);\n      allowFrontSur = allowEndSur = true;\n      if (surAtFront == surAtEnd) {\n        if (surAtFront) {\n          // both surrogates\n          buffer[end] = frontLow;\n          buffer[--end] = frontHigh;\n          buffer[i] = endHigh;\n          buffer[++i] = endLow;\n          frontHigh = buffer[i + 1];\n          endLow = buffer[end - 1];\n        } else {\n          // neither surrogates\n          buffer[end] = frontHigh;\n          buffer[i] = endLow;\n          frontHigh = frontLow;\n          endLow = endHigh;\n        }\n      } else {\n        if (surAtFront) {\n          // surrogate only at the front\n          buffer[end] = frontLow;\n          buffer[i] = endLow;\n          endLow = endHigh;\n          allowFrontSur = false;\n        } else {\n          // surrogate only at the end\n          buffer[end] = frontHigh;\n          buffer[i] = endHigh;\n          frontHigh = frontLow;\n          allowEndSur = false;\n        }\n      }\n    }\n    if ((len & 0x01) == 1 && !(allowFrontSur && allowEndSur)) {\n      // only if odd length\n      buffer[end] = allowFrontSur ? endLow : frontHigh;\n    }\n  }\n\n","sourceOld":"  /**\n   * Partially reverses the given input buffer in-place from the given offset\n   * up to the given length, keeping surrogate pairs in the correct (non-reversed) order.\n   * @param buffer the input char array to reverse\n   * @param start the offset from where to reverse the buffer\n   * @param len the length in the buffer up to where the\n   *        buffer should be reversed\n   */\n  public static void reverse(final char[] buffer, final int start, final int len) {\n    /* modified version of Apache Harmony AbstractStringBuilder reverse0() */\n    if (len < 2)\n      return;\n    int end = (start + len) - 1;\n    char frontHigh = buffer[start];\n    char endLow = buffer[end];\n    boolean allowFrontSur = true, allowEndSur = true;\n    final int mid = start + (len >> 1);\n    for (int i = start; i < mid; ++i, --end) {\n      final char frontLow = buffer[i + 1];\n      final char endHigh = buffer[end - 1];\n      final boolean surAtFront = allowFrontSur\n          && Character.isSurrogatePair(frontHigh, frontLow);\n      if (surAtFront && (len < 3)) {\n        // nothing to do since surAtFront is allowed and 1 char left\n        return;\n      }\n      final boolean surAtEnd = allowEndSur\n          && Character.isSurrogatePair(endHigh, endLow);\n      allowFrontSur = allowEndSur = true;\n      if (surAtFront == surAtEnd) {\n        if (surAtFront) {\n          // both surrogates\n          buffer[end] = frontLow;\n          buffer[--end] = frontHigh;\n          buffer[i] = endHigh;\n          buffer[++i] = endLow;\n          frontHigh = buffer[i + 1];\n          endLow = buffer[end - 1];\n        } else {\n          // neither surrogates\n          buffer[end] = frontHigh;\n          buffer[i] = endLow;\n          frontHigh = frontLow;\n          endLow = endHigh;\n        }\n      } else {\n        if (surAtFront) {\n          // surrogate only at the front\n          buffer[end] = frontLow;\n          buffer[i] = endLow;\n          endLow = endHigh;\n          allowFrontSur = false;\n        } else {\n          // surrogate only at the end\n          buffer[end] = frontHigh;\n          buffer[i] = endHigh;\n          frontHigh = frontLow;\n          allowEndSur = false;\n        }\n      }\n    }\n    if ((len & 0x01) == 1 && !(allowFrontSur && allowEndSur)) {\n      // only if odd length\n      buffer[end] = allowFrontSur ? endLow : frontHigh;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/ReversedWildcardFilter#reverse(char[],int,int).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/ReversedWildcardFilter#reverse(char[],int,int).mjava","sourceNew":"  /**\n   * Partially reverses the given input buffer in-place from the given offset\n   * up to the given length, keeping surrogate pairs in the correct (non-reversed) order.\n   * @param buffer the input char array to reverse\n   * @param start the offset from where to reverse the buffer\n   * @param len the length in the buffer up to where the\n   *        buffer should be reversed\n   */\n  public static void reverse(final char[] buffer, final int start, final int len) {\n    /* modified version of Apache Harmony AbstractStringBuilder reverse0() */\n    if (len < 2)\n      return;\n    int end = (start + len) - 1;\n    char frontHigh = buffer[start];\n    char endLow = buffer[end];\n    boolean allowFrontSur = true, allowEndSur = true;\n    final int mid = start + (len >> 1);\n    for (int i = start; i < mid; ++i, --end) {\n      final char frontLow = buffer[i + 1];\n      final char endHigh = buffer[end - 1];\n      final boolean surAtFront = allowFrontSur\n          && Character.isSurrogatePair(frontHigh, frontLow);\n      if (surAtFront && (len < 3)) {\n        // nothing to do since surAtFront is allowed and 1 char left\n        return;\n      }\n      final boolean surAtEnd = allowEndSur\n          && Character.isSurrogatePair(endHigh, endLow);\n      allowFrontSur = allowEndSur = true;\n      if (surAtFront == surAtEnd) {\n        if (surAtFront) {\n          // both surrogates\n          buffer[end] = frontLow;\n          buffer[--end] = frontHigh;\n          buffer[i] = endHigh;\n          buffer[++i] = endLow;\n          frontHigh = buffer[i + 1];\n          endLow = buffer[end - 1];\n        } else {\n          // neither surrogates\n          buffer[end] = frontHigh;\n          buffer[i] = endLow;\n          frontHigh = frontLow;\n          endLow = endHigh;\n        }\n      } else {\n        if (surAtFront) {\n          // surrogate only at the front\n          buffer[end] = frontLow;\n          buffer[i] = endLow;\n          endLow = endHigh;\n          allowFrontSur = false;\n        } else {\n          // surrogate only at the end\n          buffer[end] = frontHigh;\n          buffer[i] = endHigh;\n          frontHigh = frontLow;\n          allowEndSur = false;\n        }\n      }\n    }\n    if ((len & 0x01) == 1 && !(allowFrontSur && allowEndSur)) {\n      // only if odd length\n      buffer[end] = allowFrontSur ? endLow : frontHigh;\n    }\n  }\n\n","sourceOld":"  /**\n   * Partially reverses the given input buffer in-place from the given offset\n   * up to the given length, keeping surrogate pairs in the correct (non-reversed) order.\n   * @param buffer the input char array to reverse\n   * @param start the offset from where to reverse the buffer\n   * @param len the length in the buffer up to where the\n   *        buffer should be reversed\n   */\n  public static void reverse(final char[] buffer, final int start, final int len) {\n    /* modified version of Apache Harmony AbstractStringBuilder reverse0() */\n    if (len < 2)\n      return;\n    int end = (start + len) - 1;\n    char frontHigh = buffer[start];\n    char endLow = buffer[end];\n    boolean allowFrontSur = true, allowEndSur = true;\n    final int mid = start + (len >> 1);\n    for (int i = start; i < mid; ++i, --end) {\n      final char frontLow = buffer[i + 1];\n      final char endHigh = buffer[end - 1];\n      final boolean surAtFront = allowFrontSur\n          && Character.isSurrogatePair(frontHigh, frontLow);\n      if (surAtFront && (len < 3)) {\n        // nothing to do since surAtFront is allowed and 1 char left\n        return;\n      }\n      final boolean surAtEnd = allowEndSur\n          && Character.isSurrogatePair(endHigh, endLow);\n      allowFrontSur = allowEndSur = true;\n      if (surAtFront == surAtEnd) {\n        if (surAtFront) {\n          // both surrogates\n          buffer[end] = frontLow;\n          buffer[--end] = frontHigh;\n          buffer[i] = endHigh;\n          buffer[++i] = endLow;\n          frontHigh = buffer[i + 1];\n          endLow = buffer[end - 1];\n        } else {\n          // neither surrogates\n          buffer[end] = frontHigh;\n          buffer[i] = endLow;\n          frontHigh = frontLow;\n          endLow = endHigh;\n        }\n      } else {\n        if (surAtFront) {\n          // surrogate only at the front\n          buffer[end] = frontLow;\n          buffer[i] = endLow;\n          endLow = endHigh;\n          allowFrontSur = false;\n        } else {\n          // surrogate only at the end\n          buffer[end] = frontHigh;\n          buffer[i] = endHigh;\n          frontHigh = frontLow;\n          allowEndSur = false;\n        }\n      }\n    }\n    if ((len & 0x01) == 1 && !(allowFrontSur && allowEndSur)) {\n      // only if odd length\n      buffer[end] = allowFrontSur ? endLow : frontHigh;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}