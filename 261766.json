{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testDefaultSplitOnWhitespace().mjava","commits":[{"id":"138a352a6d4e54824d0275bc7aa1b784e78c81fe","date":1467756222,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testDefaultSplitOnWhitespace().mjava","pathOld":"/dev/null","sourceNew":"  public void testDefaultSplitOnWhitespace() throws Exception {\n    QueryParser parser = new QueryParser(\"field\", new Analyzer1());\n\n    assertTrue(parser.getSplitOnWhitespace()); // default is true\n\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"guinea\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"pig\")), BooleanClause.Occur.SHOULD);\n    assertEquals(bqBuilder.build(), parser.parse(\"guinea pig\"));\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = QueryParser.DEFAULT_SPLIT_ON_WHITESPACE;\n    assertQueryEquals(\"guinea pig\", new MockSynonymAnalyzer(), \"guinea pig\");\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d38ca40e4fcfe34f8fecb537f1c3331d3008ec20","date":1467759155,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testDefaultSplitOnWhitespace().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testDefaultSplitOnWhitespace().mjava","sourceNew":"  public void testDefaultSplitOnWhitespace() throws Exception {\n    QueryParser parser = new QueryParser(\"field\", new Analyzer1());\n\n    assertFalse(parser.getSplitOnWhitespace()); // default is false\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new SynonymQuery(new Term(\"field\", \"guinea\"), new Term(\"field\", \"cavy\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"pig\")), BooleanClause.Occur.SHOULD);\n    assertEquals(bqBuilder.build(), parser.parse(\"guinea pig\"));\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = QueryParser.DEFAULT_SPLIT_ON_WHITESPACE;\n    assertQueryEquals(\"guinea pig\", new MockSynonymAnalyzer(), \"Synonym(cavy guinea) pig\");\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","sourceOld":"  public void testDefaultSplitOnWhitespace() throws Exception {\n    QueryParser parser = new QueryParser(\"field\", new Analyzer1());\n\n    assertTrue(parser.getSplitOnWhitespace()); // default is true\n\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"guinea\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"pig\")), BooleanClause.Occur.SHOULD);\n    assertEquals(bqBuilder.build(), parser.parse(\"guinea pig\"));\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = QueryParser.DEFAULT_SPLIT_ON_WHITESPACE;\n    assertQueryEquals(\"guinea pig\", new MockSynonymAnalyzer(), \"guinea pig\");\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testDefaultSplitOnWhitespace().mjava","pathOld":"/dev/null","sourceNew":"  public void testDefaultSplitOnWhitespace() throws Exception {\n    QueryParser parser = new QueryParser(\"field\", new Analyzer1());\n\n    assertFalse(parser.getSplitOnWhitespace()); // default is false\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new SynonymQuery(new Term(\"field\", \"guinea\"), new Term(\"field\", \"cavy\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"pig\")), BooleanClause.Occur.SHOULD);\n    assertEquals(bqBuilder.build(), parser.parse(\"guinea pig\"));\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = QueryParser.DEFAULT_SPLIT_ON_WHITESPACE;\n    assertQueryEquals(\"guinea pig\", new MockSynonymAnalyzer(), \"Synonym(cavy guinea) pig\");\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52c30617998e1bc2a946cc226f52e9b35162b1e","date":1483438353,"type":3,"author":"Matt Weber","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testDefaultSplitOnWhitespace().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testDefaultSplitOnWhitespace().mjava","sourceNew":"  public void testDefaultSplitOnWhitespace() throws Exception {\n    QueryParser parser = new QueryParser(\"field\", new Analyzer1());\n\n    assertFalse(parser.getSplitOnWhitespace()); // default is false\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.SHOULD);\n    synonym.add(pig, BooleanClause.Occur.SHOULD);\n    BooleanQuery guineaPig = synonym.build();\n\n    GraphQuery graphQuery = new GraphQuery(guineaPig, cavy);\n    assertEquals(graphQuery, parser.parse(\"guinea pig\"));\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = QueryParser.DEFAULT_SPLIT_ON_WHITESPACE;\n    assertQueryEquals(\"guinea pig\", new MockSynonymAnalyzer(), \"Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false)\");\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","sourceOld":"  public void testDefaultSplitOnWhitespace() throws Exception {\n    QueryParser parser = new QueryParser(\"field\", new Analyzer1());\n\n    assertFalse(parser.getSplitOnWhitespace()); // default is false\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new SynonymQuery(new Term(\"field\", \"guinea\"), new Term(\"field\", \"cavy\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"pig\")), BooleanClause.Occur.SHOULD);\n    assertEquals(bqBuilder.build(), parser.parse(\"guinea pig\"));\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = QueryParser.DEFAULT_SPLIT_ON_WHITESPACE;\n    assertQueryEquals(\"guinea pig\", new MockSynonymAnalyzer(), \"Synonym(cavy guinea) pig\");\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testDefaultSplitOnWhitespace().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testDefaultSplitOnWhitespace().mjava","sourceNew":"  public void testDefaultSplitOnWhitespace() throws Exception {\n    QueryParser parser = new QueryParser(\"field\", new Analyzer1());\n\n    assertFalse(parser.getSplitOnWhitespace()); // default is false\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.SHOULD);\n    synonym.add(pig, BooleanClause.Occur.SHOULD);\n    BooleanQuery guineaPig = synonym.build();\n\n    GraphQuery graphQuery = new GraphQuery(guineaPig, cavy);\n    assertEquals(graphQuery, parser.parse(\"guinea pig\"));\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = QueryParser.DEFAULT_SPLIT_ON_WHITESPACE;\n    assertQueryEquals(\"guinea pig\", new MockSynonymAnalyzer(), \"Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false)\");\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","sourceOld":"  public void testDefaultSplitOnWhitespace() throws Exception {\n    QueryParser parser = new QueryParser(\"field\", new Analyzer1());\n\n    assertFalse(parser.getSplitOnWhitespace()); // default is false\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new SynonymQuery(new Term(\"field\", \"guinea\"), new Term(\"field\", \"cavy\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"pig\")), BooleanClause.Occur.SHOULD);\n    assertEquals(bqBuilder.build(), parser.parse(\"guinea pig\"));\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = QueryParser.DEFAULT_SPLIT_ON_WHITESPACE;\n    assertQueryEquals(\"guinea pig\", new MockSynonymAnalyzer(), \"Synonym(cavy guinea) pig\");\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db","date":1486463279,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testDefaultSplitOnWhitespace().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testDefaultSplitOnWhitespace().mjava","sourceNew":"  public void testDefaultSplitOnWhitespace() throws Exception {\n    QueryParser parser = new QueryParser(\"field\", new Analyzer1());\n\n    assertFalse(parser.getSplitOnWhitespace()); // default is false\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    GraphQuery graphQuery = new GraphQuery(guineaPig, cavy);\n    assertEquals(graphQuery, parser.parse(\"guinea pig\"));\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = QueryParser.DEFAULT_SPLIT_ON_WHITESPACE;\n    assertQueryEquals(\"guinea pig\", new MockSynonymAnalyzer(), \"Graph(+field:guinea +field:pig, field:cavy, hasBoolean=true, hasPhrase=false)\");\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","sourceOld":"  public void testDefaultSplitOnWhitespace() throws Exception {\n    QueryParser parser = new QueryParser(\"field\", new Analyzer1());\n\n    assertFalse(parser.getSplitOnWhitespace()); // default is false\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.SHOULD);\n    synonym.add(pig, BooleanClause.Occur.SHOULD);\n    BooleanQuery guineaPig = synonym.build();\n\n    GraphQuery graphQuery = new GraphQuery(guineaPig, cavy);\n    assertEquals(graphQuery, parser.parse(\"guinea pig\"));\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = QueryParser.DEFAULT_SPLIT_ON_WHITESPACE;\n    assertQueryEquals(\"guinea pig\", new MockSynonymAnalyzer(), \"Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false)\");\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4408f3223cc4586cae91dc945fefb692e411d6d","date":1487771345,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testDefaultSplitOnWhitespace().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testDefaultSplitOnWhitespace().mjava","sourceNew":"  public void testDefaultSplitOnWhitespace() throws Exception {\n    QueryParser parser = new QueryParser(\"field\", new Analyzer1());\n\n    assertFalse(parser.getSplitOnWhitespace()); // default is false\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    BooleanQuery graphQuery = new BooleanQuery.Builder()\n        .add(guineaPig, BooleanClause.Occur.SHOULD)\n        .add(cavy, BooleanClause.Occur.SHOULD)\n        .build();;\n    assertEquals(graphQuery, parser.parse(\"guinea pig\"));\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = QueryParser.DEFAULT_SPLIT_ON_WHITESPACE;\n    assertQueryEquals(\"guinea pig\", new MockSynonymAnalyzer(), \"(+guinea +pig) cavy\");\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","sourceOld":"  public void testDefaultSplitOnWhitespace() throws Exception {\n    QueryParser parser = new QueryParser(\"field\", new Analyzer1());\n\n    assertFalse(parser.getSplitOnWhitespace()); // default is false\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    GraphQuery graphQuery = new GraphQuery(guineaPig, cavy);\n    assertEquals(graphQuery, parser.parse(\"guinea pig\"));\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = QueryParser.DEFAULT_SPLIT_ON_WHITESPACE;\n    assertQueryEquals(\"guinea pig\", new MockSynonymAnalyzer(), \"Graph(+field:guinea +field:pig, field:cavy, hasBoolean=true, hasPhrase=false)\");\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","bugFix":null,"bugIntro":["8d5f9da379ac10a8ebcbf30e00314c561652932b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d5f9da379ac10a8ebcbf30e00314c561652932b","date":1497616966,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testDefaultSplitOnWhitespace().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testDefaultSplitOnWhitespace().mjava","sourceNew":"  public void testDefaultSplitOnWhitespace() throws Exception {\n    QueryParser parser = new QueryParser(\"field\", new Analyzer1());\n\n    assertFalse(parser.getSplitOnWhitespace()); // default is false\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    BooleanQuery graphQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, parser.parse(\"guinea pig\"));\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = QueryParser.DEFAULT_SPLIT_ON_WHITESPACE;\n    assertQueryEquals(\"guinea pig\", new MockSynonymAnalyzer(), \"((+guinea +pig) cavy)\");\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","sourceOld":"  public void testDefaultSplitOnWhitespace() throws Exception {\n    QueryParser parser = new QueryParser(\"field\", new Analyzer1());\n\n    assertFalse(parser.getSplitOnWhitespace()); // default is false\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    BooleanQuery graphQuery = new BooleanQuery.Builder()\n        .add(guineaPig, BooleanClause.Occur.SHOULD)\n        .add(cavy, BooleanClause.Occur.SHOULD)\n        .build();;\n    assertEquals(graphQuery, parser.parse(\"guinea pig\"));\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = QueryParser.DEFAULT_SPLIT_ON_WHITESPACE;\n    assertQueryEquals(\"guinea pig\", new MockSynonymAnalyzer(), \"(+guinea +pig) cavy\");\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","bugFix":["b4408f3223cc4586cae91dc945fefb692e411d6d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testDefaultSplitOnWhitespace().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testDefaultSplitOnWhitespace().mjava","sourceNew":"  public void testDefaultSplitOnWhitespace() throws Exception {\n    QueryParser parser = new QueryParser(\"field\", new Analyzer1());\n\n    assertFalse(parser.getSplitOnWhitespace()); // default is false\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    BooleanQuery graphQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, parser.parse(\"guinea pig\"));\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = QueryParser.DEFAULT_SPLIT_ON_WHITESPACE;\n    assertQueryEquals(\"guinea pig\", new MockSynonymAnalyzer(), \"((+guinea +pig) cavy)\");\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","sourceOld":"  public void testDefaultSplitOnWhitespace() throws Exception {\n    QueryParser parser = new QueryParser(\"field\", new Analyzer1());\n\n    assertFalse(parser.getSplitOnWhitespace()); // default is false\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    BooleanQuery graphQuery = new BooleanQuery.Builder()\n        .add(guineaPig, BooleanClause.Occur.SHOULD)\n        .add(cavy, BooleanClause.Occur.SHOULD)\n        .build();;\n    assertEquals(graphQuery, parser.parse(\"guinea pig\"));\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = QueryParser.DEFAULT_SPLIT_ON_WHITESPACE;\n    assertQueryEquals(\"guinea pig\", new MockSynonymAnalyzer(), \"(+guinea +pig) cavy\");\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testDefaultSplitOnWhitespace().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testDefaultSplitOnWhitespace().mjava","sourceNew":"  public void testDefaultSplitOnWhitespace() throws Exception {\n    QueryParser parser = new QueryParser(\"field\", new Analyzer1());\n\n    assertFalse(parser.getSplitOnWhitespace()); // default is false\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    BooleanQuery graphQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, parser.parse(\"guinea pig\"));\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = QueryParser.DEFAULT_SPLIT_ON_WHITESPACE;\n    assertQueryEquals(\"guinea pig\", new MockSynonymAnalyzer(), \"((+guinea +pig) cavy)\");\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","sourceOld":"  public void testDefaultSplitOnWhitespace() throws Exception {\n    QueryParser parser = new QueryParser(\"field\", new Analyzer1());\n\n    assertFalse(parser.getSplitOnWhitespace()); // default is false\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    BooleanQuery graphQuery = new BooleanQuery.Builder()\n        .add(guineaPig, BooleanClause.Occur.SHOULD)\n        .add(cavy, BooleanClause.Occur.SHOULD)\n        .build();;\n    assertEquals(graphQuery, parser.parse(\"guinea pig\"));\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = QueryParser.DEFAULT_SPLIT_ON_WHITESPACE;\n    assertQueryEquals(\"guinea pig\", new MockSynonymAnalyzer(), \"(+guinea +pig) cavy\");\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e52c30617998e1bc2a946cc226f52e9b35162b1e":["d38ca40e4fcfe34f8fecb537f1c3331d3008ec20"],"8d5f9da379ac10a8ebcbf30e00314c561652932b":["b4408f3223cc4586cae91dc945fefb692e411d6d"],"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d38ca40e4fcfe34f8fecb537f1c3331d3008ec20":["138a352a6d4e54824d0275bc7aa1b784e78c81fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4408f3223cc4586cae91dc945fefb692e411d6d":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db"],"28288370235ed02234a64753cdbf0c6ec096304a":["b4408f3223cc4586cae91dc945fefb692e411d6d","8d5f9da379ac10a8ebcbf30e00314c561652932b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["b4408f3223cc4586cae91dc945fefb692e411d6d","8d5f9da379ac10a8ebcbf30e00314c561652932b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d38ca40e4fcfe34f8fecb537f1c3331d3008ec20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["e52c30617998e1bc2a946cc226f52e9b35162b1e"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e52c30617998e1bc2a946cc226f52e9b35162b1e"]},"commit2Childs":{"e52c30617998e1bc2a946cc226f52e9b35162b1e":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"8d5f9da379ac10a8ebcbf30e00314c561652932b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["d38ca40e4fcfe34f8fecb537f1c3331d3008ec20"],"d38ca40e4fcfe34f8fecb537f1c3331d3008ec20":["e52c30617998e1bc2a946cc226f52e9b35162b1e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["138a352a6d4e54824d0275bc7aa1b784e78c81fe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b4408f3223cc4586cae91dc945fefb692e411d6d":["8d5f9da379ac10a8ebcbf30e00314c561652932b","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["b4408f3223cc4586cae91dc945fefb692e411d6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}