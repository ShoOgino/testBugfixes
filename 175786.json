{"path":"lucene/join/src/java/org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","commits":[{"id":"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161","date":1378462032,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader)\n      throws IOException {\n    if (docIdSet == null) {\n      return EMPTY_DOCIDSET;\n    } else if (docIdSet instanceof FixedBitSet) {\n      // this is different from CachingWrapperFilter: even when the DocIdSet is\n      // cacheable, we convert it to a FixedBitSet since we require all the\n      // cached filters to be FixedBitSets\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      if (it == null) {\n        return EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet copy = new FixedBitSet(reader.maxDoc());\n        copy.or(it);\n        return copy;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","date":1402659583,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","sourceNew":"  @Override\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader)\n      throws IOException {\n    if (docIdSet == null) {\n      return EMPTY;\n    } else if (docIdSet instanceof FixedBitSet) {\n      // this is different from CachingWrapperFilter: even when the DocIdSet is\n      // cacheable, we convert it to a FixedBitSet since we require all the\n      // cached filters to be FixedBitSets\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      if (it == null) {\n        return EMPTY;\n      } else {\n        final FixedBitSet copy = new FixedBitSet(reader.maxDoc());\n        copy.or(it);\n        return copy;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader)\n      throws IOException {\n    if (docIdSet == null) {\n      return EMPTY_DOCIDSET;\n    } else if (docIdSet instanceof FixedBitSet) {\n      // this is different from CachingWrapperFilter: even when the DocIdSet is\n      // cacheable, we convert it to a FixedBitSet since we require all the\n      // cached filters to be FixedBitSets\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      if (it == null) {\n        return EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet copy = new FixedBitSet(reader.maxDoc());\n        copy.or(it);\n        return copy;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","sourceNew":"  @Override\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader)\n      throws IOException {\n    if (docIdSet == null) {\n      return EMPTY;\n    } else if (docIdSet instanceof FixedBitSet) {\n      // this is different from CachingWrapperFilter: even when the DocIdSet is\n      // cacheable, we convert it to a FixedBitSet since we require all the\n      // cached filters to be FixedBitSets\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      if (it == null) {\n        return EMPTY;\n      } else {\n        final FixedBitSet copy = new FixedBitSet(reader.maxDoc());\n        copy.or(it);\n        return copy;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader)\n      throws IOException {\n    if (docIdSet == null) {\n      return EMPTY_DOCIDSET;\n    } else if (docIdSet instanceof FixedBitSet) {\n      // this is different from CachingWrapperFilter: even when the DocIdSet is\n      // cacheable, we convert it to a FixedBitSet since we require all the\n      // cached filters to be FixedBitSets\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      if (it == null) {\n        return EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet copy = new FixedBitSet(reader.maxDoc());\n        copy.or(it);\n        return copy;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader)\n      throws IOException {\n    if (docIdSet == null) {\n      return EMPTY;\n    } else if (docIdSet instanceof FixedBitSet) {\n      // this is different from CachingWrapperFilter: even when the DocIdSet is\n      // cacheable, we convert it to a FixedBitSet since we require all the\n      // cached filters to be FixedBitSets\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      if (it == null) {\n        return EMPTY;\n      } else {\n        final FixedBitSet copy = new FixedBitSet(reader.maxDoc());\n        copy.or(it);\n        return copy;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161","54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161"],"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161":["54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}