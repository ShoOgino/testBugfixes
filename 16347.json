{"path":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","sourceNew":"  /**\n   * Create a new {@link CachingCollector} that wraps the given collector and\n   * caches documents and scores up to the specified RAM threshold.\n   * \n   * @param other\n   *          the Collector to wrap and delegate calls to.\n   * @param cacheScores\n   *          whether to cache scores in addition to document IDs. Note that\n   *          this increases the RAM consumed per doc\n   * @param maxRAMMB\n   *          the maximum RAM in MB to consume for caching the documents and\n   *          scores. If the collector exceeds the threshold, no documents and\n   *          scores are cached.\n   */\n  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    return cacheScores ? new ScoreCachingCollector(other, maxRAMMB) : new NoScoreCachingCollector(other, maxRAMMB);\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CachingCollector} that wraps the given collector and\n   * caches documents and scores up to the specified RAM threshold.\n   * \n   * @param other\n   *          the Collector to wrap and delegate calls to.\n   * @param cacheScores\n   *          whether to cache scores in addition to document IDs. Note that\n   *          this increases the RAM consumed per doc\n   * @param maxRAMMB\n   *          the maximum RAM in MB to consume for caching the documents and\n   *          scores. If the collector exceeds the threshold, no documents and\n   *          scores are cached.\n   */\n  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    return cacheScores ? new ScoreCachingCollector(other, maxRAMMB) : new NoScoreCachingCollector(other, maxRAMMB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","sourceNew":"  /**\n   * Create a new {@link CachingCollector} that wraps the given collector and\n   * caches documents and scores up to the specified RAM threshold.\n   *\n   * @param other\n   *          the Collector to wrap and delegate calls to.\n   * @param cacheScores\n   *          whether to cache scores in addition to document IDs. Note that\n   *          this increases the RAM consumed per doc\n   * @param maxRAMMB\n   *          the maximum RAM in MB to consume for caching the documents and\n   *          scores. If the collector exceeds the threshold, no documents and\n   *          scores are cached.\n   */\n  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    int bytesPerDoc = RamUsageEstimator.NUM_BYTES_INT;\n    if (cacheScores) {\n      bytesPerDoc += RamUsageEstimator.NUM_BYTES_FLOAT;\n    }\n    final int maxDocsToCache = (int) ((maxRAMMB * 1024 * 1024) / bytesPerDoc);\n    return create(other, cacheScores, maxDocsToCache);\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CachingCollector} that wraps the given collector and\n   * caches documents and scores up to the specified RAM threshold.\n   * \n   * @param other\n   *          the Collector to wrap and delegate calls to.\n   * @param cacheScores\n   *          whether to cache scores in addition to document IDs. Note that\n   *          this increases the RAM consumed per doc\n   * @param maxRAMMB\n   *          the maximum RAM in MB to consume for caching the documents and\n   *          scores. If the collector exceeds the threshold, no documents and\n   *          scores are cached.\n   */\n  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    return cacheScores ? new ScoreCachingCollector(other, maxRAMMB) : new NoScoreCachingCollector(other, maxRAMMB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","sourceNew":"  /**\n   * Create a new {@link CachingCollector} that wraps the given collector and\n   * caches documents and scores up to the specified RAM threshold.\n   *\n   * @param other\n   *          the Collector to wrap and delegate calls to.\n   * @param cacheScores\n   *          whether to cache scores in addition to document IDs. Note that\n   *          this increases the RAM consumed per doc\n   * @param maxRAMMB\n   *          the maximum RAM in MB to consume for caching the documents and\n   *          scores. If the collector exceeds the threshold, no documents and\n   *          scores are cached.\n   */\n  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    int bytesPerDoc = RamUsageEstimator.NUM_BYTES_INT;\n    if (cacheScores) {\n      bytesPerDoc += RamUsageEstimator.NUM_BYTES_FLOAT;\n    }\n    final int maxDocsToCache = (int) ((maxRAMMB * 1024 * 1024) / bytesPerDoc);\n    return create(other, cacheScores, maxDocsToCache);\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CachingCollector} that wraps the given collector and\n   * caches documents and scores up to the specified RAM threshold.\n   * \n   * @param other\n   *          the Collector to wrap and delegate calls to.\n   * @param cacheScores\n   *          whether to cache scores in addition to document IDs. Note that\n   *          this increases the RAM consumed per doc\n   * @param maxRAMMB\n   *          the maximum RAM in MB to consume for caching the documents and\n   *          scores. If the collector exceeds the threshold, no documents and\n   *          scores are cached.\n   */\n  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    return cacheScores ? new ScoreCachingCollector(other, maxRAMMB) : new NoScoreCachingCollector(other, maxRAMMB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","sourceNew":"  /**\n   * Create a new {@link CachingCollector} that wraps the given collector and\n   * caches documents and scores up to the specified RAM threshold.\n   *\n   * @param other\n   *          the Collector to wrap and delegate calls to.\n   * @param cacheScores\n   *          whether to cache scores in addition to document IDs. Note that\n   *          this increases the RAM consumed per doc\n   * @param maxRAMMB\n   *          the maximum RAM in MB to consume for caching the documents and\n   *          scores. If the collector exceeds the threshold, no documents and\n   *          scores are cached.\n   */\n  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    int bytesPerDoc = Integer.BYTES;\n    if (cacheScores) {\n      bytesPerDoc += Float.BYTES;\n    }\n    final int maxDocsToCache = (int) ((maxRAMMB * 1024 * 1024) / bytesPerDoc);\n    return create(other, cacheScores, maxDocsToCache);\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CachingCollector} that wraps the given collector and\n   * caches documents and scores up to the specified RAM threshold.\n   *\n   * @param other\n   *          the Collector to wrap and delegate calls to.\n   * @param cacheScores\n   *          whether to cache scores in addition to document IDs. Note that\n   *          this increases the RAM consumed per doc\n   * @param maxRAMMB\n   *          the maximum RAM in MB to consume for caching the documents and\n   *          scores. If the collector exceeds the threshold, no documents and\n   *          scores are cached.\n   */\n  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    int bytesPerDoc = RamUsageEstimator.NUM_BYTES_INT;\n    if (cacheScores) {\n      bytesPerDoc += RamUsageEstimator.NUM_BYTES_FLOAT;\n    }\n    final int maxDocsToCache = (int) ((maxRAMMB * 1024 * 1024) / bytesPerDoc);\n    return create(other, cacheScores, maxDocsToCache);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(Collector,boolean,double).mjava","sourceNew":"  /**\n   * Create a new {@link CachingCollector} that wraps the given collector and\n   * caches documents and scores up to the specified RAM threshold.\n   *\n   * @param other\n   *          the Collector to wrap and delegate calls to.\n   * @param cacheScores\n   *          whether to cache scores in addition to document IDs. Note that\n   *          this increases the RAM consumed per doc\n   * @param maxRAMMB\n   *          the maximum RAM in MB to consume for caching the documents and\n   *          scores. If the collector exceeds the threshold, no documents and\n   *          scores are cached.\n   */\n  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    int bytesPerDoc = Integer.BYTES;\n    if (cacheScores) {\n      bytesPerDoc += Float.BYTES;\n    }\n    final int maxDocsToCache = (int) ((maxRAMMB * 1024 * 1024) / bytesPerDoc);\n    return create(other, cacheScores, maxDocsToCache);\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CachingCollector} that wraps the given collector and\n   * caches documents and scores up to the specified RAM threshold.\n   *\n   * @param other\n   *          the Collector to wrap and delegate calls to.\n   * @param cacheScores\n   *          whether to cache scores in addition to document IDs. Note that\n   *          this increases the RAM consumed per doc\n   * @param maxRAMMB\n   *          the maximum RAM in MB to consume for caching the documents and\n   *          scores. If the collector exceeds the threshold, no documents and\n   *          scores are cached.\n   */\n  public static CachingCollector create(Collector other, boolean cacheScores, double maxRAMMB) {\n    int bytesPerDoc = RamUsageEstimator.NUM_BYTES_INT;\n    if (cacheScores) {\n      bytesPerDoc += RamUsageEstimator.NUM_BYTES_FLOAT;\n    }\n    final int maxDocsToCache = (int) ((maxRAMMB * 1024 * 1024) / bytesPerDoc);\n    return create(other, cacheScores, maxDocsToCache);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"419a8f52c6635419beb951255cacbbb281044c57":["ae73da626f97850c922c42736f808d0378e165f0","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["419a8f52c6635419beb951255cacbbb281044c57"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"419a8f52c6635419beb951255cacbbb281044c57":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}