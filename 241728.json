{"path":"src/java/org/apache/lucene/index/DocFieldConsumers#flush(Map[DocFieldConsumerPerThread,Collection[DocFieldConsumerPerField]],SegmentWriteState).mjava","commits":[{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocFieldConsumers#flush(Map[DocFieldConsumerPerThread,Collection[DocFieldConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/DocFieldConsumers#flush(Map,SegmentWriteState).mjava","sourceNew":"  public void flush(Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map oneThreadsAndFields = new HashMap();\n    Map twoThreadsAndFields = new HashMap();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      DocFieldConsumersPerThread perThread = (DocFieldConsumersPerThread) entry.getKey();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n      Collection oneFields = new HashSet();\n      Collection twoFields = new HashSet();\n      while(fieldsIt.hasNext()) {\n        DocFieldConsumersPerField perField = (DocFieldConsumersPerField) fieldsIt.next();\n        oneFields.add(perField.one);\n        twoFields.add(perField.two);\n      }\n\n      oneThreadsAndFields.put(perThread.one, oneFields);\n      twoThreadsAndFields.put(perThread.two, twoFields);\n    }\n    \n\n    one.flush(oneThreadsAndFields, state);\n    two.flush(twoThreadsAndFields, state);\n  }\n\n","sourceOld":"  public void flush(Map threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map oneThreadsAndFields = new HashMap();\n    Map twoThreadsAndFields = new HashMap();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      DocFieldConsumersPerThread perThread = (DocFieldConsumersPerThread) entry.getKey();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n      Collection oneFields = new HashSet();\n      Collection twoFields = new HashSet();\n      while(fieldsIt.hasNext()) {\n        DocFieldConsumersPerField perField = (DocFieldConsumersPerField) fieldsIt.next();\n        oneFields.add(perField.one);\n        twoFields.add(perField.two);\n      }\n\n      oneThreadsAndFields.put(perThread.one, oneFields);\n      twoThreadsAndFields.put(perThread.two, twoFields);\n    }\n    \n\n    one.flush(oneThreadsAndFields, state);\n    two.flush(twoThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocFieldConsumers#flush(Map[DocFieldConsumerPerThread,Collection[DocFieldConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/DocFieldConsumers#flush(Map[DocFieldConsumerPerThread,Collection[DocFieldConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map oneThreadsAndFields = new HashMap();\n    Map twoThreadsAndFields = new HashMap();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      DocFieldConsumersPerThread perThread = (DocFieldConsumersPerThread) entry.getKey();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n      Collection oneFields = new HashSet();\n      Collection twoFields = new HashSet();\n      while(fieldsIt.hasNext()) {\n        DocFieldConsumersPerField perField = (DocFieldConsumersPerField) fieldsIt.next();\n        oneFields.add(perField.one);\n        twoFields.add(perField.two);\n      }\n\n      oneThreadsAndFields.put(perThread.one, oneFields);\n      twoThreadsAndFields.put(perThread.two, twoFields);\n    }\n    \n\n    one.flush(oneThreadsAndFields, state);\n    two.flush(twoThreadsAndFields, state);\n  }\n\n","sourceOld":"  public void flush(Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map oneThreadsAndFields = new HashMap();\n    Map twoThreadsAndFields = new HashMap();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      DocFieldConsumersPerThread perThread = (DocFieldConsumersPerThread) entry.getKey();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n      Collection oneFields = new HashSet();\n      Collection twoFields = new HashSet();\n      while(fieldsIt.hasNext()) {\n        DocFieldConsumersPerField perField = (DocFieldConsumersPerField) fieldsIt.next();\n        oneFields.add(perField.one);\n        twoFields.add(perField.two);\n      }\n\n      oneThreadsAndFields.put(perThread.one, oneFields);\n      twoThreadsAndFields.put(perThread.two, twoFields);\n    }\n    \n\n    one.flush(oneThreadsAndFields, state);\n    two.flush(twoThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocFieldConsumers#flush(Map[DocFieldConsumerPerThread,Collection[DocFieldConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/DocFieldConsumers#flush(Map[DocFieldConsumerPerThread,Collection[DocFieldConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> oneThreadsAndFields = new HashMap<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>>();\n    Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> twoThreadsAndFields = new HashMap<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>>();\n\n    for (Map.Entry<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      final DocFieldConsumersPerThread perThread = (DocFieldConsumersPerThread) entry.getKey();\n\n      final Collection<DocFieldConsumerPerField> fields = entry.getValue();\n\n      Iterator<DocFieldConsumerPerField> fieldsIt = fields.iterator();\n      Collection<DocFieldConsumerPerField> oneFields = new HashSet<DocFieldConsumerPerField>();\n      Collection<DocFieldConsumerPerField> twoFields = new HashSet<DocFieldConsumerPerField>();\n      while(fieldsIt.hasNext()) {\n        DocFieldConsumersPerField perField = (DocFieldConsumersPerField) fieldsIt.next();\n        oneFields.add(perField.one);\n        twoFields.add(perField.two);\n      }\n\n      oneThreadsAndFields.put(perThread.one, oneFields);\n      twoThreadsAndFields.put(perThread.two, twoFields);\n    }\n    \n\n    one.flush(oneThreadsAndFields, state);\n    two.flush(twoThreadsAndFields, state);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map oneThreadsAndFields = new HashMap();\n    Map twoThreadsAndFields = new HashMap();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      DocFieldConsumersPerThread perThread = (DocFieldConsumersPerThread) entry.getKey();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n      Collection oneFields = new HashSet();\n      Collection twoFields = new HashSet();\n      while(fieldsIt.hasNext()) {\n        DocFieldConsumersPerField perField = (DocFieldConsumersPerField) fieldsIt.next();\n        oneFields.add(perField.one);\n        twoFields.add(perField.two);\n      }\n\n      oneThreadsAndFields.put(perThread.one, oneFields);\n      twoThreadsAndFields.put(perThread.two, twoFields);\n    }\n    \n\n    one.flush(oneThreadsAndFields, state);\n    two.flush(twoThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldConsumers#flush(Map[DocFieldConsumerPerThread,Collection[DocFieldConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/DocFieldConsumers#flush(Map[DocFieldConsumerPerThread,Collection[DocFieldConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> oneThreadsAndFields = new HashMap<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>>();\n    Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> twoThreadsAndFields = new HashMap<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>>();\n\n    for (Map.Entry<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      final DocFieldConsumersPerThread perThread = (DocFieldConsumersPerThread) entry.getKey();\n\n      final Collection<DocFieldConsumerPerField> fields = entry.getValue();\n\n      Iterator<DocFieldConsumerPerField> fieldsIt = fields.iterator();\n      Collection<DocFieldConsumerPerField> oneFields = new HashSet<DocFieldConsumerPerField>();\n      Collection<DocFieldConsumerPerField> twoFields = new HashSet<DocFieldConsumerPerField>();\n      while(fieldsIt.hasNext()) {\n        DocFieldConsumersPerField perField = (DocFieldConsumersPerField) fieldsIt.next();\n        oneFields.add(perField.one);\n        twoFields.add(perField.two);\n      }\n\n      oneThreadsAndFields.put(perThread.one, oneFields);\n      twoThreadsAndFields.put(perThread.two, twoFields);\n    }\n    \n\n    one.flush(oneThreadsAndFields, state);\n    two.flush(twoThreadsAndFields, state);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> oneThreadsAndFields = new HashMap<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>>();\n    Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> twoThreadsAndFields = new HashMap<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>>();\n\n    for (Map.Entry<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      final DocFieldConsumersPerThread perThread = (DocFieldConsumersPerThread) entry.getKey();\n\n      final Collection<DocFieldConsumerPerField> fields = entry.getValue();\n\n      Iterator<DocFieldConsumerPerField> fieldsIt = fields.iterator();\n      Collection<DocFieldConsumerPerField> oneFields = new HashSet<DocFieldConsumerPerField>();\n      Collection<DocFieldConsumerPerField> twoFields = new HashSet<DocFieldConsumerPerField>();\n      while(fieldsIt.hasNext()) {\n        DocFieldConsumersPerField perField = (DocFieldConsumersPerField) fieldsIt.next();\n        oneFields.add(perField.one);\n        twoFields.add(perField.two);\n      }\n\n      oneThreadsAndFields.put(perThread.one, oneFields);\n      twoThreadsAndFields.put(perThread.two, twoFields);\n    }\n    \n\n    one.flush(oneThreadsAndFields, state);\n    two.flush(twoThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["8a9e385641d717e641408d8fbbc62be8fc766357"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["60cdc0e643184821eb066795a8791cd82559f46e"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["60cdc0e643184821eb066795a8791cd82559f46e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}