{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#testOneDocMissingFixed().mjava","commits":[{"id":"fb9d1512598fc72005b830d5e2b88e61a0f4b374","date":1543843391,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#testOneDocMissingFixed().mjava","pathOld":"/dev/null","sourceNew":"  public void testOneDocMissingFixed() throws IOException {\n    int maxDoc = 9699;\n    FixedBitSet set = new FixedBitSet(maxDoc);\n    set.set(0, maxDoc);\n    set.clear(1345);\n    try (Directory dir = newDirectory()) {\n\n      final int cardinality = set.cardinality();\n      long length;\n      try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n        length = out.getFilePointer();\n      }\n\n      int step = 16000;\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        assertAdvanceEquality(disi, disi2, step);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e","date":1544534277,"type":4,"author":"Toke Eskildsen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#testOneDocMissingFixed().mjava","sourceNew":null,"sourceOld":"  public void testOneDocMissingFixed() throws IOException {\n    int maxDoc = 9699;\n    FixedBitSet set = new FixedBitSet(maxDoc);\n    set.set(0, maxDoc);\n    set.clear(1345);\n    try (Directory dir = newDirectory()) {\n\n      final int cardinality = set.cardinality();\n      long length;\n      try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n        length = out.getFilePointer();\n      }\n\n      int step = 16000;\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        assertAdvanceEquality(disi, disi2, step);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#testOneDocMissingFixed().mjava","sourceNew":null,"sourceOld":"  public void testOneDocMissingFixed() throws IOException {\n    int maxDoc = 9699;\n    FixedBitSet set = new FixedBitSet(maxDoc);\n    set.set(0, maxDoc);\n    set.clear(1345);\n    try (Directory dir = newDirectory()) {\n\n      final int cardinality = set.cardinality();\n      long length;\n      try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n        length = out.getFilePointer();\n      }\n\n      int step = 16000;\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        assertAdvanceEquality(disi, disi2, step);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd70c9571310639a77f0123aea0db41077d9bb6":["fb9d1512598fc72005b830d5e2b88e61a0f4b374","5c74cb19c6e988ccfef4286a1f3f0e5930f0863e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb9d1512598fc72005b830d5e2b88e61a0f4b374":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e":["fb9d1512598fc72005b830d5e2b88e61a0f4b374"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd70c9571310639a77f0123aea0db41077d9bb6"]},"commit2Childs":{"cfd70c9571310639a77f0123aea0db41077d9bb6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb9d1512598fc72005b830d5e2b88e61a0f4b374"],"fb9d1512598fc72005b830d5e2b88e61a0f4b374":["cfd70c9571310639a77f0123aea0db41077d9bb6","5c74cb19c6e988ccfef4286a1f3f0e5930f0863e"],"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}