{"path":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,IOContext).mjava","sourceNew":"  /**\n   * Creates a new <code>RAMDirectory</code> instance from a different\n   * <code>Directory</code> implementation.  This can be used to load\n   * a disk-based index into memory.\n   * <P>\n   * This should be used only with indices that can fit into memory.\n   * <P>\n   * Note that the resulting <code>RAMDirectory</code> instance is fully\n   * independent from the original <code>Directory</code> (it is a\n   * complete copy).  Any subsequent changes to the\n   * original <code>Directory</code> will not be visible in the\n   * <code>RAMDirectory</code> instance.\n   *\n   * @param dir a <code>Directory</code> value\n   * @exception IOException if an error occurs\n   */\n  public RAMDirectory(Directory dir, IOContext context) throws IOException {\n    this(dir, false, context);\n  }\n\n","sourceOld":"  /**\n   * Creates a new <code>RAMDirectory</code> instance from a different\n   * <code>Directory</code> implementation.  This can be used to load\n   * a disk-based index into memory.\n   * <P>\n   * This should be used only with indices that can fit into memory.\n   * <P>\n   * Note that the resulting <code>RAMDirectory</code> instance is fully\n   * independent from the original <code>Directory</code> (it is a\n   * complete copy).  Any subsequent changes to the\n   * original <code>Directory</code> will not be visible in the\n   * <code>RAMDirectory</code> instance.\n   *\n   * @param dir a <code>Directory</code> value\n   * @exception IOException if an error occurs\n   */\n  public RAMDirectory(Directory dir, IOContext context) throws IOException {\n    this(dir, false, context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a8c2c956e16bd6d48d885425f9ce9b07e618275","date":1332848963,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,IOContext).mjava","sourceNew":"  /**\n   * Creates a new <code>RAMDirectory</code> instance from a different\n   * <code>Directory</code> implementation.  This can be used to load\n   * a disk-based index into memory.\n   * \n   * <p><b>Warning:</b> This class is not intended to work with huge\n   * indexes. Everything beyond several hundred megabytes will waste\n   * resources (GC cycles), because it uses an internal buffer size\n   * of 1024 bytes, producing millions of {@code byte[1024]} arrays.\n   * This class is optimized for small memory-resident indexes.\n   * It also has bad concurrency on multithreaded environments.\n   * \n   * <p>For disk-based indexes it is recommended to use\n   * {@link MMapDirectory}, which is a high-performance directory\n   * implementation working directly on the file system cache of the\n   * operating system, so copying data to Java heap space is not useful.\n   * \n   * <p>Note that the resulting <code>RAMDirectory</code> instance is fully\n   * independent from the original <code>Directory</code> (it is a\n   * complete copy).  Any subsequent changes to the\n   * original <code>Directory</code> will not be visible in the\n   * <code>RAMDirectory</code> instance.\n   *\n   * @param dir a <code>Directory</code> value\n   * @exception IOException if an error occurs\n   */\n  public RAMDirectory(Directory dir, IOContext context) throws IOException {\n    this(dir, false, context);\n  }\n\n","sourceOld":"  /**\n   * Creates a new <code>RAMDirectory</code> instance from a different\n   * <code>Directory</code> implementation.  This can be used to load\n   * a disk-based index into memory.\n   * <P>\n   * This should be used only with indices that can fit into memory.\n   * <P>\n   * Note that the resulting <code>RAMDirectory</code> instance is fully\n   * independent from the original <code>Directory</code> (it is a\n   * complete copy).  Any subsequent changes to the\n   * original <code>Directory</code> will not be visible in the\n   * <code>RAMDirectory</code> instance.\n   *\n   * @param dir a <code>Directory</code> value\n   * @exception IOException if an error occurs\n   */\n  public RAMDirectory(Directory dir, IOContext context) throws IOException {\n    this(dir, false, context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302be0cc5e6a28ebcebcac98aa81a92be2e94370","date":1423848654,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(FSDirectory,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,IOContext).mjava","sourceNew":"  /**\n   * Creates a new <code>RAMDirectory</code> instance from a different\n   * <code>Directory</code> implementation.  This can be used to load\n   * a disk-based index into memory.\n   * \n   * <p><b>Warning:</b> This class is not intended to work with huge\n   * indexes. Everything beyond several hundred megabytes will waste\n   * resources (GC cycles), because it uses an internal buffer size\n   * of 1024 bytes, producing millions of {@code byte[1024]} arrays.\n   * This class is optimized for small memory-resident indexes.\n   * It also has bad concurrency on multithreaded environments.\n   * \n   * <p>For disk-based indexes it is recommended to use\n   * {@link MMapDirectory}, which is a high-performance directory\n   * implementation working directly on the file system cache of the\n   * operating system, so copying data to Java heap space is not useful.\n   * \n   * <p>Note that the resulting <code>RAMDirectory</code> instance is fully\n   * independent from the original <code>Directory</code> (it is a\n   * complete copy).  Any subsequent changes to the\n   * original <code>Directory</code> will not be visible in the\n   * <code>RAMDirectory</code> instance.\n   *\n   * @param dir a <code>Directory</code> value\n   * @exception IOException if an error occurs\n   */\n  public RAMDirectory(FSDirectory dir, IOContext context) throws IOException {\n    this(dir, false, context);\n  }\n\n","sourceOld":"  /**\n   * Creates a new <code>RAMDirectory</code> instance from a different\n   * <code>Directory</code> implementation.  This can be used to load\n   * a disk-based index into memory.\n   * \n   * <p><b>Warning:</b> This class is not intended to work with huge\n   * indexes. Everything beyond several hundred megabytes will waste\n   * resources (GC cycles), because it uses an internal buffer size\n   * of 1024 bytes, producing millions of {@code byte[1024]} arrays.\n   * This class is optimized for small memory-resident indexes.\n   * It also has bad concurrency on multithreaded environments.\n   * \n   * <p>For disk-based indexes it is recommended to use\n   * {@link MMapDirectory}, which is a high-performance directory\n   * implementation working directly on the file system cache of the\n   * operating system, so copying data to Java heap space is not useful.\n   * \n   * <p>Note that the resulting <code>RAMDirectory</code> instance is fully\n   * independent from the original <code>Directory</code> (it is a\n   * complete copy).  Any subsequent changes to the\n   * original <code>Directory</code> will not be visible in the\n   * <code>RAMDirectory</code> instance.\n   *\n   * @param dir a <code>Directory</code> value\n   * @exception IOException if an error occurs\n   */\n  public RAMDirectory(Directory dir, IOContext context) throws IOException {\n    this(dir, false, context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a8c2c956e16bd6d48d885425f9ce9b07e618275":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["302be0cc5e6a28ebcebcac98aa81a92be2e94370"],"302be0cc5e6a28ebcebcac98aa81a92be2e94370":["4a8c2c956e16bd6d48d885425f9ce9b07e618275"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4a8c2c956e16bd6d48d885425f9ce9b07e618275"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4a8c2c956e16bd6d48d885425f9ce9b07e618275":["302be0cc5e6a28ebcebcac98aa81a92be2e94370"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302be0cc5e6a28ebcebcac98aa81a92be2e94370":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}