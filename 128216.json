{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#naiveUnion(List[BytesRef]).mjava","commits":[{"id":"8d94feb02e9c604630d8a6758abcb40cbfa91f5d","date":1340964157,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#naiveUnion(List[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  private static Automaton naiveUnion(List<BytesRef> strings) {\n    Automaton [] eachIndividual = new Automaton [strings.size()];\n    int i = 0;\n    for (BytesRef bref : strings) {\n      eachIndividual[i++] = BasicAutomata.makeString(bref.utf8ToString());\n    }\n    return BasicOperations.union(Arrays.asList(eachIndividual));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#naiveUnion(List[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  private static Automaton naiveUnion(List<BytesRef> strings) {\n    Automaton [] eachIndividual = new Automaton [strings.size()];\n    int i = 0;\n    for (BytesRef bref : strings) {\n      eachIndividual[i++] = BasicAutomata.makeString(bref.utf8ToString());\n    }\n    return BasicOperations.union(Arrays.asList(eachIndividual));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#naiveUnion(List[BytesRef]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#naiveUnion(List[BytesRef]).mjava","sourceNew":"  private static LightAutomaton naiveUnion(List<BytesRef> strings) {\n    LightAutomaton[] eachIndividual = new LightAutomaton[strings.size()];\n    int i = 0;\n    for (BytesRef bref : strings) {\n      eachIndividual[i++] = BasicAutomata.makeStringLight(bref.utf8ToString());\n    }\n    return BasicOperations.determinize(BasicOperations.unionLight(Arrays.asList(eachIndividual)));\n  }\n\n","sourceOld":"  private static Automaton naiveUnion(List<BytesRef> strings) {\n    Automaton [] eachIndividual = new Automaton [strings.size()];\n    int i = 0;\n    for (BytesRef bref : strings) {\n      eachIndividual[i++] = BasicAutomata.makeString(bref.utf8ToString());\n    }\n    return BasicOperations.union(Arrays.asList(eachIndividual));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#naiveUnion(List[BytesRef]).mjava","sourceNew":null,"sourceOld":"  private static LightAutomaton naiveUnion(List<BytesRef> strings) {\n    LightAutomaton[] eachIndividual = new LightAutomaton[strings.size()];\n    int i = 0;\n    for (BytesRef bref : strings) {\n      eachIndividual[i++] = BasicAutomata.makeStringLight(bref.utf8ToString());\n    }\n    return BasicOperations.determinize(BasicOperations.unionLight(Arrays.asList(eachIndividual)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#naiveUnion(List[BytesRef]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#naiveUnion(List[BytesRef]).mjava","sourceNew":"  private static Automaton naiveUnion(List<BytesRef> strings) {\n    Automaton[] eachIndividual = new Automaton[strings.size()];\n    int i = 0;\n    for (BytesRef bref : strings) {\n      eachIndividual[i++] = Automata.makeString(bref.utf8ToString());\n    }\n    return Operations.determinize(Operations.union(Arrays.asList(eachIndividual)));\n  }\n\n","sourceOld":"  private static Automaton naiveUnion(List<BytesRef> strings) {\n    Automaton [] eachIndividual = new Automaton [strings.size()];\n    int i = 0;\n    for (BytesRef bref : strings) {\n      eachIndividual[i++] = BasicAutomata.makeString(bref.utf8ToString());\n    }\n    return BasicOperations.union(Arrays.asList(eachIndividual));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["fe33227f6805edab2036cbb80645cc4e2d1fa424","5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}