{"path":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(AtomicReaderContext,Bits).mjava","commits":[{"id":"f5a7a379c47cb10a09ea1ff0b2460819a73c5988","date":1394142503,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      if (filter == null) {\n        boolean debug = rb != null && rb.isDebug();\n        long start = debug ? System.currentTimeMillis() : 0;\n        resultSet = getDocSet();\n        long end = debug ? System.currentTimeMillis() : 0;\n\n        if (debug) {\n          SimpleOrderedMap<Object> dbg = new SimpleOrderedMap<Object>();\n          dbg.add(\"time\", (end-start));\n          dbg.add(\"fromSetSize\", fromSetSize);  // the input\n          dbg.add(\"toSetSize\", resultSet.size());    // the output\n\n          dbg.add(\"fromTermCount\", fromTermCount);\n          dbg.add(\"fromTermTotalDf\", fromTermTotalDf);\n          dbg.add(\"fromTermDirectCount\", fromTermDirectCount);\n          dbg.add(\"fromTermHits\", fromTermHits);\n          dbg.add(\"fromTermHitsTotalDf\", fromTermHitsTotalDf);\n          dbg.add(\"toTermHits\", toTermHits);\n          dbg.add(\"toTermHitsTotalDf\", toTermHitsTotalDf);\n          dbg.add(\"toTermDirectCount\", toTermDirectCount);\n          dbg.add(\"smallSetsDeferred\", smallSetsDeferred);\n          dbg.add(\"toSetDocsAdded\", resultListDocs);\n\n          // TODO: perhaps synchronize  addDebug in the future...\n          rb.addDebug(dbg, \"join\", JoinQuery.this.toString());\n        }\n\n        filter = resultSet.getTopFilter();\n      }\n\n      // Although this set only includes live docs, other filters can be pushed down to queries.\n      DocIdSet readerSet = filter.getDocIdSet(context, acceptDocs);\n      return new JoinScorer(this, readerSet == null ? DocIdSetIterator.empty() : readerSet.iterator(), getBoost());\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      if (filter == null) {\n        boolean debug = rb != null && rb.isDebug();\n        long start = debug ? System.currentTimeMillis() : 0;\n        resultSet = getDocSet();\n        long end = debug ? System.currentTimeMillis() : 0;\n\n        if (debug) {\n          SimpleOrderedMap<Object> dbg = new SimpleOrderedMap<Object>();\n          dbg.add(\"time\", (end-start));\n          dbg.add(\"fromSetSize\", fromSetSize);  // the input\n          dbg.add(\"toSetSize\", resultSet.size());    // the output\n\n          dbg.add(\"fromTermCount\", fromTermCount);\n          dbg.add(\"fromTermTotalDf\", fromTermTotalDf);\n          dbg.add(\"fromTermDirectCount\", fromTermDirectCount);\n          dbg.add(\"fromTermHits\", fromTermHits);\n          dbg.add(\"fromTermHitsTotalDf\", fromTermHitsTotalDf);\n          dbg.add(\"toTermHits\", toTermHits);\n          dbg.add(\"toTermHitsTotalDf\", toTermHitsTotalDf);\n          dbg.add(\"toTermDirectCount\", toTermDirectCount);\n          dbg.add(\"smallSetsDeferred\", smallSetsDeferred);\n          dbg.add(\"toSetDocsAdded\", resultListDocs);\n\n          // TODO: perhaps synchronize  addDebug in the future...\n          rb.addDebug(dbg, \"join\", JoinQuery.this.toString());\n        }\n\n        filter = resultSet.getTopFilter();\n      }\n\n      // Although this set only includes live docs, other filters can be pushed down to queries.\n      DocIdSet readerSet = filter.getDocIdSet(context, acceptDocs);\n      return new JoinScorer(this, readerSet == null ? DocIdSetIterator.empty() : readerSet.iterator(), getBoost());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      if (filter == null) {\n        boolean debug = rb != null && rb.isDebug();\n        long start = debug ? System.currentTimeMillis() : 0;\n        resultSet = getDocSet();\n        long end = debug ? System.currentTimeMillis() : 0;\n\n        if (debug) {\n          SimpleOrderedMap<Object> dbg = new SimpleOrderedMap<Object>();\n          dbg.add(\"time\", (end-start));\n          dbg.add(\"fromSetSize\", fromSetSize);  // the input\n          dbg.add(\"toSetSize\", resultSet.size());    // the output\n\n          dbg.add(\"fromTermCount\", fromTermCount);\n          dbg.add(\"fromTermTotalDf\", fromTermTotalDf);\n          dbg.add(\"fromTermDirectCount\", fromTermDirectCount);\n          dbg.add(\"fromTermHits\", fromTermHits);\n          dbg.add(\"fromTermHitsTotalDf\", fromTermHitsTotalDf);\n          dbg.add(\"toTermHits\", toTermHits);\n          dbg.add(\"toTermHitsTotalDf\", toTermHitsTotalDf);\n          dbg.add(\"toTermDirectCount\", toTermDirectCount);\n          dbg.add(\"smallSetsDeferred\", smallSetsDeferred);\n          dbg.add(\"toSetDocsAdded\", resultListDocs);\n\n          // TODO: perhaps synchronize  addDebug in the future...\n          rb.addDebug(dbg, \"join\", JoinQuery.this.toString());\n        }\n\n        filter = resultSet.getTopFilter();\n      }\n\n      // Although this set only includes live docs, other filters can be pushed down to queries.\n      DocIdSet readerSet = filter.getDocIdSet(context, acceptDocs);\n      return new JoinScorer(this, readerSet == null ? DocIdSetIterator.empty() : readerSet.iterator(), getBoost());\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      if (filter == null) {\n        boolean debug = rb != null && rb.isDebug();\n        long start = debug ? System.currentTimeMillis() : 0;\n        resultSet = getDocSet();\n        long end = debug ? System.currentTimeMillis() : 0;\n\n        if (debug) {\n          SimpleOrderedMap<Object> dbg = new SimpleOrderedMap<Object>();\n          dbg.add(\"time\", (end-start));\n          dbg.add(\"fromSetSize\", fromSetSize);  // the input\n          dbg.add(\"toSetSize\", resultSet.size());    // the output\n\n          dbg.add(\"fromTermCount\", fromTermCount);\n          dbg.add(\"fromTermTotalDf\", fromTermTotalDf);\n          dbg.add(\"fromTermDirectCount\", fromTermDirectCount);\n          dbg.add(\"fromTermHits\", fromTermHits);\n          dbg.add(\"fromTermHitsTotalDf\", fromTermHitsTotalDf);\n          dbg.add(\"toTermHits\", toTermHits);\n          dbg.add(\"toTermHitsTotalDf\", toTermHitsTotalDf);\n          dbg.add(\"toTermDirectCount\", toTermDirectCount);\n          dbg.add(\"smallSetsDeferred\", smallSetsDeferred);\n          dbg.add(\"toSetDocsAdded\", resultListDocs);\n\n          // TODO: perhaps synchronize  addDebug in the future...\n          rb.addDebug(dbg, \"join\", JoinQuery.this.toString());\n        }\n\n        filter = resultSet.getTopFilter();\n      }\n\n      // Although this set only includes live docs, other filters can be pushed down to queries.\n      DocIdSet readerSet = filter.getDocIdSet(context, acceptDocs);\n      return new JoinScorer(this, readerSet == null ? DocIdSetIterator.empty() : readerSet.iterator(), getBoost());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(AtomicReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      if (filter == null) {\n        boolean debug = rb != null && rb.isDebug();\n        long start = debug ? System.currentTimeMillis() : 0;\n        resultSet = getDocSet();\n        long end = debug ? System.currentTimeMillis() : 0;\n\n        if (debug) {\n          SimpleOrderedMap<Object> dbg = new SimpleOrderedMap<>();\n          dbg.add(\"time\", (end-start));\n          dbg.add(\"fromSetSize\", fromSetSize);  // the input\n          dbg.add(\"toSetSize\", resultSet.size());    // the output\n\n          dbg.add(\"fromTermCount\", fromTermCount);\n          dbg.add(\"fromTermTotalDf\", fromTermTotalDf);\n          dbg.add(\"fromTermDirectCount\", fromTermDirectCount);\n          dbg.add(\"fromTermHits\", fromTermHits);\n          dbg.add(\"fromTermHitsTotalDf\", fromTermHitsTotalDf);\n          dbg.add(\"toTermHits\", toTermHits);\n          dbg.add(\"toTermHitsTotalDf\", toTermHitsTotalDf);\n          dbg.add(\"toTermDirectCount\", toTermDirectCount);\n          dbg.add(\"smallSetsDeferred\", smallSetsDeferred);\n          dbg.add(\"toSetDocsAdded\", resultListDocs);\n\n          // TODO: perhaps synchronize  addDebug in the future...\n          rb.addDebug(dbg, \"join\", JoinQuery.this.toString());\n        }\n\n        filter = resultSet.getTopFilter();\n      }\n\n      // Although this set only includes live docs, other filters can be pushed down to queries.\n      DocIdSet readerSet = filter.getDocIdSet(context, acceptDocs);\n      return new JoinScorer(this, readerSet == null ? DocIdSetIterator.empty() : readerSet.iterator(), getBoost());\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      if (filter == null) {\n        boolean debug = rb != null && rb.isDebug();\n        long start = debug ? System.currentTimeMillis() : 0;\n        resultSet = getDocSet();\n        long end = debug ? System.currentTimeMillis() : 0;\n\n        if (debug) {\n          SimpleOrderedMap<Object> dbg = new SimpleOrderedMap<Object>();\n          dbg.add(\"time\", (end-start));\n          dbg.add(\"fromSetSize\", fromSetSize);  // the input\n          dbg.add(\"toSetSize\", resultSet.size());    // the output\n\n          dbg.add(\"fromTermCount\", fromTermCount);\n          dbg.add(\"fromTermTotalDf\", fromTermTotalDf);\n          dbg.add(\"fromTermDirectCount\", fromTermDirectCount);\n          dbg.add(\"fromTermHits\", fromTermHits);\n          dbg.add(\"fromTermHitsTotalDf\", fromTermHitsTotalDf);\n          dbg.add(\"toTermHits\", toTermHits);\n          dbg.add(\"toTermHitsTotalDf\", toTermHitsTotalDf);\n          dbg.add(\"toTermDirectCount\", toTermDirectCount);\n          dbg.add(\"smallSetsDeferred\", smallSetsDeferred);\n          dbg.add(\"toSetDocsAdded\", resultListDocs);\n\n          // TODO: perhaps synchronize  addDebug in the future...\n          rb.addDebug(dbg, \"join\", JoinQuery.this.toString());\n        }\n\n        filter = resultSet.getTopFilter();\n      }\n\n      // Although this set only includes live docs, other filters can be pushed down to queries.\n      DocIdSet readerSet = filter.getDocIdSet(context, acceptDocs);\n      return new JoinScorer(this, readerSet == null ? DocIdSetIterator.empty() : readerSet.iterator(), getBoost());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      if (filter == null) {\n        boolean debug = rb != null && rb.isDebug();\n        long start = debug ? System.currentTimeMillis() : 0;\n        resultSet = getDocSet();\n        long end = debug ? System.currentTimeMillis() : 0;\n\n        if (debug) {\n          SimpleOrderedMap<Object> dbg = new SimpleOrderedMap<>();\n          dbg.add(\"time\", (end-start));\n          dbg.add(\"fromSetSize\", fromSetSize);  // the input\n          dbg.add(\"toSetSize\", resultSet.size());    // the output\n\n          dbg.add(\"fromTermCount\", fromTermCount);\n          dbg.add(\"fromTermTotalDf\", fromTermTotalDf);\n          dbg.add(\"fromTermDirectCount\", fromTermDirectCount);\n          dbg.add(\"fromTermHits\", fromTermHits);\n          dbg.add(\"fromTermHitsTotalDf\", fromTermHitsTotalDf);\n          dbg.add(\"toTermHits\", toTermHits);\n          dbg.add(\"toTermHitsTotalDf\", toTermHitsTotalDf);\n          dbg.add(\"toTermDirectCount\", toTermDirectCount);\n          dbg.add(\"smallSetsDeferred\", smallSetsDeferred);\n          dbg.add(\"toSetDocsAdded\", resultListDocs);\n\n          // TODO: perhaps synchronize  addDebug in the future...\n          rb.addDebug(dbg, \"join\", JoinQuery.this.toString());\n        }\n\n        filter = resultSet.getTopFilter();\n      }\n\n      // Although this set only includes live docs, other filters can be pushed down to queries.\n      DocIdSet readerSet = filter.getDocIdSet(context, acceptDocs);\n      return new JoinScorer(this, readerSet == null ? DocIdSetIterator.empty() : readerSet.iterator(), getBoost());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"f5a7a379c47cb10a09ea1ff0b2460819a73c5988":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5a7a379c47cb10a09ea1ff0b2460819a73c5988"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"f5a7a379c47cb10a09ea1ff0b2460819a73c5988":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f5a7a379c47cb10a09ea1ff0b2460819a73c5988","acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}