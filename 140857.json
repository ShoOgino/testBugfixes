{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#countMatchingDocsAtLevel(Point,int).mjava","commits":[{"id":"d19946da5b8a6505034a72adcb5bae87dd043ddd","date":1423451445,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#countMatchingDocsAtLevel(Point,int).mjava","pathOld":"/dev/null","sourceNew":"  private int countMatchingDocsAtLevel(Point pt, int facetLevel) throws IOException {\n    // we use IntersectsPrefixTreeFilter directly so that we can specify the level to go to exactly.\n    RecursivePrefixTreeStrategy strategy = (RecursivePrefixTreeStrategy) this.strategy;\n    Filter filter = new IntersectsPrefixTreeFilter(\n        pt, strategy.getFieldName(), grid, facetLevel, grid.getMaxLevels(), !strategy.isPointsOnly());\n    final TotalHitCountCollector collector = new TotalHitCountCollector();\n    indexSearcher.search(new MatchAllDocsQuery(), filter, collector);\n    cellsValidated++;\n    if (collector.getTotalHits() > 0) {\n      cellValidatedNonZero++;\n    }\n    return collector.getTotalHits();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#countMatchingDocsAtLevel(Point,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#countMatchingDocsAtLevel(Point,int).mjava","sourceNew":"  private int countMatchingDocsAtLevel(Point pt, int facetLevel) throws IOException {\n    // we use IntersectsPrefixTreeFilter directly so that we can specify the level to go to exactly.\n    RecursivePrefixTreeStrategy strategy = (RecursivePrefixTreeStrategy) this.strategy;\n    Filter filter = new IntersectsPrefixTreeFilter(\n        pt, strategy.getFieldName(), grid, facetLevel, grid.getMaxLevels(), !strategy.isPointsOnly());\n    final TotalHitCountCollector collector = new TotalHitCountCollector();\n    indexSearcher.search(new FilteredQuery(new MatchAllDocsQuery(), filter), collector);\n    cellsValidated++;\n    if (collector.getTotalHits() > 0) {\n      cellValidatedNonZero++;\n    }\n    return collector.getTotalHits();\n  }\n\n","sourceOld":"  private int countMatchingDocsAtLevel(Point pt, int facetLevel) throws IOException {\n    // we use IntersectsPrefixTreeFilter directly so that we can specify the level to go to exactly.\n    RecursivePrefixTreeStrategy strategy = (RecursivePrefixTreeStrategy) this.strategy;\n    Filter filter = new IntersectsPrefixTreeFilter(\n        pt, strategy.getFieldName(), grid, facetLevel, grid.getMaxLevels(), !strategy.isPointsOnly());\n    final TotalHitCountCollector collector = new TotalHitCountCollector();\n    indexSearcher.search(new MatchAllDocsQuery(), filter, collector);\n    cellsValidated++;\n    if (collector.getTotalHits() > 0) {\n      cellValidatedNonZero++;\n    }\n    return collector.getTotalHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0","date":1426015524,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#countMatchingDocsAtLevel(Point,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#countMatchingDocsAtLevel(Point,int).mjava","sourceNew":"  private int countMatchingDocsAtLevel(Point pt, int facetLevel) throws IOException {\n    // we use IntersectsPrefixTreeFilter directly so that we can specify the level to go to exactly.\n    RecursivePrefixTreeStrategy strategy = (RecursivePrefixTreeStrategy) this.strategy;\n    Filter filter = new IntersectsPrefixTreeFilter(\n        pt, strategy.getFieldName(), grid, facetLevel, grid.getMaxLevels());\n    final TotalHitCountCollector collector = new TotalHitCountCollector();\n    indexSearcher.search(new FilteredQuery(new MatchAllDocsQuery(), filter), collector);\n    cellsValidated++;\n    if (collector.getTotalHits() > 0) {\n      cellValidatedNonZero++;\n    }\n    return collector.getTotalHits();\n  }\n\n","sourceOld":"  private int countMatchingDocsAtLevel(Point pt, int facetLevel) throws IOException {\n    // we use IntersectsPrefixTreeFilter directly so that we can specify the level to go to exactly.\n    RecursivePrefixTreeStrategy strategy = (RecursivePrefixTreeStrategy) this.strategy;\n    Filter filter = new IntersectsPrefixTreeFilter(\n        pt, strategy.getFieldName(), grid, facetLevel, grid.getMaxLevels(), !strategy.isPointsOnly());\n    final TotalHitCountCollector collector = new TotalHitCountCollector();\n    indexSearcher.search(new FilteredQuery(new MatchAllDocsQuery(), filter), collector);\n    cellsValidated++;\n    if (collector.getTotalHits() > 0) {\n      cellValidatedNonZero++;\n    }\n    return collector.getTotalHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#countMatchingDocsAtLevel(Point,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#countMatchingDocsAtLevel(Point,int).mjava","sourceNew":"  private int countMatchingDocsAtLevel(Point pt, int facetLevel) throws IOException {\n    // we use IntersectsPrefixTreeFilter directly so that we can specify the level to go to exactly.\n    RecursivePrefixTreeStrategy strategy = (RecursivePrefixTreeStrategy) this.strategy;\n    Filter filter = new IntersectsPrefixTreeFilter(\n        pt, strategy.getFieldName(), grid, facetLevel, grid.getMaxLevels());\n    final TotalHitCountCollector collector = new TotalHitCountCollector();\n    indexSearcher.search(new FilteredQuery(new MatchAllDocsQuery(), filter), collector);\n    cellsValidated++;\n    if (collector.getTotalHits() > 0) {\n      cellValidatedNonZero++;\n    }\n    return collector.getTotalHits();\n  }\n\n","sourceOld":"  private int countMatchingDocsAtLevel(Point pt, int facetLevel) throws IOException {\n    // we use IntersectsPrefixTreeFilter directly so that we can specify the level to go to exactly.\n    RecursivePrefixTreeStrategy strategy = (RecursivePrefixTreeStrategy) this.strategy;\n    Filter filter = new IntersectsPrefixTreeFilter(\n        pt, strategy.getFieldName(), grid, facetLevel, grid.getMaxLevels(), !strategy.isPointsOnly());\n    final TotalHitCountCollector collector = new TotalHitCountCollector();\n    indexSearcher.search(new FilteredQuery(new MatchAllDocsQuery(), filter), collector);\n    cellsValidated++;\n    if (collector.getTotalHits() > 0) {\n      cellValidatedNonZero++;\n    }\n    return collector.getTotalHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#countMatchingDocsAtLevel(Point,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#countMatchingDocsAtLevel(Point,int).mjava","sourceNew":"  private int countMatchingDocsAtLevel(Point pt, int facetLevel) throws IOException {\n    // we use IntersectsPrefixTreeFilter directly so that we can specify the level to go to exactly.\n    RecursivePrefixTreeStrategy strategy = (RecursivePrefixTreeStrategy) this.strategy;\n    Filter filter = new IntersectsPrefixTreeFilter(\n        pt, strategy.getFieldName(), grid, facetLevel, grid.getMaxLevels());\n    final TotalHitCountCollector collector = new TotalHitCountCollector();\n    indexSearcher.search(filter, collector);\n    cellsValidated++;\n    if (collector.getTotalHits() > 0) {\n      cellValidatedNonZero++;\n    }\n    return collector.getTotalHits();\n  }\n\n","sourceOld":"  private int countMatchingDocsAtLevel(Point pt, int facetLevel) throws IOException {\n    // we use IntersectsPrefixTreeFilter directly so that we can specify the level to go to exactly.\n    RecursivePrefixTreeStrategy strategy = (RecursivePrefixTreeStrategy) this.strategy;\n    Filter filter = new IntersectsPrefixTreeFilter(\n        pt, strategy.getFieldName(), grid, facetLevel, grid.getMaxLevels());\n    final TotalHitCountCollector collector = new TotalHitCountCollector();\n    indexSearcher.search(new FilteredQuery(new MatchAllDocsQuery(), filter), collector);\n    cellsValidated++;\n    if (collector.getTotalHits() > 0) {\n      cellValidatedNonZero++;\n    }\n    return collector.getTotalHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#countMatchingDocsAtLevel(Point,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#countMatchingDocsAtLevel(Point,int).mjava","sourceNew":"  private int countMatchingDocsAtLevel(Point pt, int facetLevel) throws IOException {\n    // we use IntersectsPrefixTreeFilter directly so that we can specify the level to go to exactly.\n    RecursivePrefixTreeStrategy strategy = (RecursivePrefixTreeStrategy) this.strategy;\n    Query filter = new IntersectsPrefixTreeQuery(\n        pt, strategy.getFieldName(), grid, facetLevel, grid.getMaxLevels());\n    final TotalHitCountCollector collector = new TotalHitCountCollector();\n    indexSearcher.search(filter, collector);\n    cellsValidated++;\n    if (collector.getTotalHits() > 0) {\n      cellValidatedNonZero++;\n    }\n    return collector.getTotalHits();\n  }\n\n","sourceOld":"  private int countMatchingDocsAtLevel(Point pt, int facetLevel) throws IOException {\n    // we use IntersectsPrefixTreeFilter directly so that we can specify the level to go to exactly.\n    RecursivePrefixTreeStrategy strategy = (RecursivePrefixTreeStrategy) this.strategy;\n    Filter filter = new IntersectsPrefixTreeFilter(\n        pt, strategy.getFieldName(), grid, facetLevel, grid.getMaxLevels());\n    final TotalHitCountCollector collector = new TotalHitCountCollector();\n    indexSearcher.search(filter, collector);\n    cellsValidated++;\n    if (collector.getTotalHits() > 0) {\n      cellValidatedNonZero++;\n    }\n    return collector.getTotalHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#countMatchingDocsAtLevel(Point,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#countMatchingDocsAtLevel(Point,int).mjava","sourceNew":"  private int countMatchingDocsAtLevel(Point pt, int facetLevel) throws IOException {\n    // we use IntersectsPrefixTreeFilter directly so that we can specify the level to go to exactly.\n    RecursivePrefixTreeStrategy strategy = (RecursivePrefixTreeStrategy) this.strategy;\n    Query filter = new IntersectsPrefixTreeQuery(\n        pt, strategy.getFieldName(), grid, facetLevel, grid.getMaxLevels());\n    final TotalHitCountCollector collector = new TotalHitCountCollector();\n    indexSearcher.search(filter, collector);\n    cellsValidated++;\n    if (collector.getTotalHits() > 0) {\n      cellValidatedNonZero++;\n    }\n    return collector.getTotalHits();\n  }\n\n","sourceOld":"  private int countMatchingDocsAtLevel(Point pt, int facetLevel) throws IOException {\n    // we use IntersectsPrefixTreeFilter directly so that we can specify the level to go to exactly.\n    RecursivePrefixTreeStrategy strategy = (RecursivePrefixTreeStrategy) this.strategy;\n    Query filter = new IntersectsPrefixTreeQuery(\n        pt, strategy.getFieldName(), grid, facetLevel, grid.getMaxLevels());\n    final TotalHitCountCollector collector = new TotalHitCountCollector();\n    indexSearcher.search(filter, collector);\n    cellsValidated++;\n    if (collector.getTotalHits() > 0) {\n      cellValidatedNonZero++;\n    }\n    return collector.getTotalHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#countMatchingDocsAtLevel(Point,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#countMatchingDocsAtLevel(Point,int).mjava","sourceNew":"  private int countMatchingDocsAtLevel(Point pt, int facetLevel) throws IOException {\n    // we use IntersectsPrefixTreeFilter directly so that we can specify the level to go to exactly.\n    RecursivePrefixTreeStrategy strategy = (RecursivePrefixTreeStrategy) this.strategy;\n    Query filter = new IntersectsPrefixTreeQuery(\n        pt, strategy.getFieldName(), grid, facetLevel, grid.getMaxLevels());\n    final TotalHitCountCollector collector = new TotalHitCountCollector();\n    indexSearcher.search(filter, collector);\n    cellsValidated++;\n    if (collector.getTotalHits() > 0) {\n      cellValidatedNonZero++;\n    }\n    return collector.getTotalHits();\n  }\n\n","sourceOld":"  private int countMatchingDocsAtLevel(Point pt, int facetLevel) throws IOException {\n    // we use IntersectsPrefixTreeFilter directly so that we can specify the level to go to exactly.\n    RecursivePrefixTreeStrategy strategy = (RecursivePrefixTreeStrategy) this.strategy;\n    Query filter = new IntersectsPrefixTreeQuery(\n        pt, strategy.getFieldName(), grid, facetLevel, grid.getMaxLevels());\n    final TotalHitCountCollector collector = new TotalHitCountCollector();\n    indexSearcher.search(filter, collector);\n    cellsValidated++;\n    if (collector.getTotalHits() > 0) {\n      cellValidatedNonZero++;\n    }\n    return collector.getTotalHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["672b198fc3dce868916c727917cae58c2906763d","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"1db68e96dd908fcd79ef809095822736aa601d08":["11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"672b198fc3dce868916c727917cae58c2906763d":["1db68e96dd908fcd79ef809095822736aa601d08"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d19946da5b8a6505034a72adcb5bae87dd043ddd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["672b198fc3dce868916c727917cae58c2906763d"],"d19946da5b8a6505034a72adcb5bae87dd043ddd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1db68e96dd908fcd79ef809095822736aa601d08":["672b198fc3dce868916c727917cae58c2906763d"],"672b198fc3dce868916c727917cae58c2906763d":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d19946da5b8a6505034a72adcb5bae87dd043ddd"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"d19946da5b8a6505034a72adcb5bae87dd043ddd":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1db68e96dd908fcd79ef809095822736aa601d08"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}