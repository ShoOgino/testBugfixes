{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","commits":[{"id":"fb396392c6df2adeadb2289f6085319d14321f4b","date":1153002029,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","pathOld":"/dev/null","sourceNew":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    //String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator iter;\n      List lst;\n      {\n        lst = new ArrayList();\n        Token t;\n        t = new Token(\"hispeed\",0,8);\n        lst.add(t);\n        t = new Token(\"hi\",0,2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = new Token(\"speed\",3,8);\n        lst.add(t);\n        t = new Token(\"10\",8,10);\n        lst.add(t);\n        t = new Token(\"foo\",11,14);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n      public Token next() throws IOException {\n        return iter.hasNext() ? (Token)iter.next() : null;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","sourceNew":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator iter;\n      List lst;\n      {\n        lst = new ArrayList();\n        Token t;\n        t = new Token(\"hispeed\", 0, 8);\n        lst.add(t);\n        t = new Token(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = new Token(\"speed\", 3, 8);\n        lst.add(t);\n        t = new Token(\"10\", 8, 10);\n        lst.add(t);\n        t = new Token(\"foo\", 11, 14);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      public Token next() throws IOException {\n        return iter.hasNext() ? (Token) iter.next() : null;\n      }\n    };\n  }\n\n","sourceOld":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    //String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator iter;\n      List lst;\n      {\n        lst = new ArrayList();\n        Token t;\n        t = new Token(\"hispeed\",0,8);\n        lst.add(t);\n        t = new Token(\"hi\",0,2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = new Token(\"speed\",3,8);\n        lst.add(t);\n        t = new Token(\"10\",8,10);\n        lst.add(t);\n        t = new Token(\"foo\",11,14);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n      public Token next() throws IOException {\n        return iter.hasNext() ? (Token)iter.next() : null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","sourceNew":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator iter;\n      List lst;\n      {\n        lst = new ArrayList();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      public Token next(final Token reusableToken) throws IOException {\n        assert reusableToken != null;\n        return iter.hasNext() ? (Token) iter.next() : null;\n      }\n    };\n  }\n\n","sourceOld":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator iter;\n      List lst;\n      {\n        lst = new ArrayList();\n        Token t;\n        t = new Token(\"hispeed\", 0, 8);\n        lst.add(t);\n        t = new Token(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = new Token(\"speed\", 3, 8);\n        lst.add(t);\n        t = new Token(\"10\", 8, 10);\n        lst.add(t);\n        t = new Token(\"foo\", 11, 14);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      public Token next() throws IOException {\n        return iter.hasNext() ? (Token) iter.next() : null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4471b2ef75c0e11869f60b23cabe292b895c3ee","date":1248991247,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","sourceNew":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator iter;\n      List lst;\n      private TermAttribute termAtt;\n      private PositionIncrementAttribute posIncrAtt;\n      private OffsetAttribute offsetAtt;\n      {\n        termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n        posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n        offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n        lst = new ArrayList();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = (Token) iter.next();\n          termAtt.setTermBuffer(token.term());\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator iter;\n      List lst;\n      {\n        lst = new ArrayList();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      public Token next(final Token reusableToken) throws IOException {\n        assert reusableToken != null;\n        return iter.hasNext() ? (Token) iter.next() : null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","sourceNew":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator iter;\n      List lst;\n      private TermAttribute termAtt;\n      private PositionIncrementAttribute posIncrAtt;\n      private OffsetAttribute offsetAtt;\n      {\n        termAtt = addAttribute(TermAttribute.class);\n        posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n        offsetAtt = addAttribute(OffsetAttribute.class);\n        lst = new ArrayList();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = (Token) iter.next();\n          termAtt.setTermBuffer(token.term());\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator iter;\n      List lst;\n      private TermAttribute termAtt;\n      private PositionIncrementAttribute posIncrAtt;\n      private OffsetAttribute offsetAtt;\n      {\n        termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n        posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n        offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n        lst = new ArrayList();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = (Token) iter.next();\n          termAtt.setTermBuffer(token.term());\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","sourceNew":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator iter;\n      List lst;\n      private TermAttribute termAtt;\n      private PositionIncrementAttribute posIncrAtt;\n      private OffsetAttribute offsetAtt;\n      {\n        termAtt = addAttribute(TermAttribute.class);\n        posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n        offsetAtt = addAttribute(OffsetAttribute.class);\n        lst = new ArrayList();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = (Token) iter.next();\n          termAtt.setTermBuffer(token.term());\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator iter;\n      List lst;\n      private TermAttribute termAtt;\n      private PositionIncrementAttribute posIncrAtt;\n      private OffsetAttribute offsetAtt;\n      {\n        termAtt = addAttribute(TermAttribute.class);\n        posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n        offsetAtt = addAttribute(OffsetAttribute.class);\n        lst = new ArrayList();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = (Token) iter.next();\n          termAtt.setTermBuffer(token.term());\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7848880b3c06f09f0f3ac50d0854b16efb0b815e","date":1260006234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","sourceNew":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private TermAttribute termAtt;\n      private PositionIncrementAttribute posIncrAtt;\n      private OffsetAttribute offsetAtt;\n      {\n        termAtt = addAttribute(TermAttribute.class);\n        posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n        offsetAtt = addAttribute(OffsetAttribute.class);\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          termAtt.setTermBuffer(token.term());\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator iter;\n      List lst;\n      private TermAttribute termAtt;\n      private PositionIncrementAttribute posIncrAtt;\n      private OffsetAttribute offsetAtt;\n      {\n        termAtt = addAttribute(TermAttribute.class);\n        posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n        offsetAtt = addAttribute(OffsetAttribute.class);\n        lst = new ArrayList();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = (Token) iter.next();\n          termAtt.setTermBuffer(token.term());\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"360d15dc189fb48153cb62234f7d20819e4e292e","date":1263562938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","sourceNew":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private TermAttribute termAtt;\n      private PositionIncrementAttribute posIncrAtt;\n      private OffsetAttribute offsetAtt;\n      {\n        termAtt = addAttribute(TermAttribute.class);\n        posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n        offsetAtt = addAttribute(OffsetAttribute.class);\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          clearAttributes();\n          termAtt.setTermBuffer(token.term());\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private TermAttribute termAtt;\n      private PositionIncrementAttribute posIncrAtt;\n      private OffsetAttribute offsetAtt;\n      {\n        termAtt = addAttribute(TermAttribute.class);\n        posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n        offsetAtt = addAttribute(OffsetAttribute.class);\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          termAtt.setTermBuffer(token.term());\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","sourceNew":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private TermAttribute termAtt;\n      private PositionIncrementAttribute posIncrAtt;\n      private OffsetAttribute offsetAtt;\n      {\n        termAtt = addAttribute(TermAttribute.class);\n        posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n        offsetAtt = addAttribute(OffsetAttribute.class);\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          clearAttributes();\n          termAtt.setTermBuffer(token.term());\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private TermAttribute termAtt;\n      private PositionIncrementAttribute posIncrAtt;\n      private OffsetAttribute offsetAtt;\n      {\n        termAtt = addAttribute(TermAttribute.class);\n        posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n        offsetAtt = addAttribute(OffsetAttribute.class);\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          clearAttributes();\n          termAtt.setTermBuffer(token.term());\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["296b8b38a87feb478921f77834a2302dfe77641c"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"fb396392c6df2adeadb2289f6085319d14321f4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"296b8b38a87feb478921f77834a2302dfe77641c":["fb396392c6df2adeadb2289f6085319d14321f4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["360d15dc189fb48153cb62234f7d20819e4e292e"],"360d15dc189fb48153cb62234f7d20819e4e292e":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"fb396392c6df2adeadb2289f6085319d14321f4b":["296b8b38a87feb478921f77834a2302dfe77641c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb396392c6df2adeadb2289f6085319d14321f4b"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"296b8b38a87feb478921f77834a2302dfe77641c":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["360d15dc189fb48153cb62234f7d20819e4e292e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"360d15dc189fb48153cb62234f7d20819e4e292e":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}