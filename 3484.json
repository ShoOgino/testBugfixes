{"path":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(\"lookups\", lookups);\n        res.put(\"hits\", hits);\n        res.put(\"hitratio\", calcHitRatio(lookups,hits));\n        res.put(\"inserts\", inserts);\n        res.put(\"evictions\", evictions);\n        res.put(\"size\", map.size());\n        if (maxRamBytes != Long.MAX_VALUE)  {\n          res.put(\"maxRamMB\", maxRamBytes / 1024L / 1024L);\n          res.put(\"ramBytesUsed\", ramBytesUsed());\n          res.put(\"evictionsRamUsage\", evictionsRamUsage);\n        }\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      if (maxRamBytes != Long.MAX_VALUE)  {\n        res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, true, scope, getCategory().toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(\"lookups\", lookups);\n        res.put(\"hits\", hits);\n        res.put(\"hitratio\", calcHitRatio(lookups,hits));\n        res.put(\"inserts\", inserts);\n        res.put(\"evictions\", evictions);\n        res.put(\"size\", map.size());\n        if (maxRamBytes != Long.MAX_VALUE)  {\n          res.put(\"maxRamMB\", maxRamBytes / 1024L / 1024L);\n          res.put(\"ramBytesUsed\", ramBytesUsed());\n          res.put(\"evictionsRamUsage\", evictionsRamUsage);\n        }\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      if (maxRamBytes != Long.MAX_VALUE)  {\n        res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, true, scope, getCategory().toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(\"lookups\", lookups);\n        res.put(\"hits\", hits);\n        res.put(\"hitratio\", calcHitRatio(lookups,hits));\n        res.put(\"inserts\", inserts);\n        res.put(\"evictions\", evictions);\n        res.put(\"size\", map.size());\n        if (maxRamBytes != Long.MAX_VALUE)  {\n          res.put(\"maxRamMB\", maxRamBytes / 1024L / 1024L);\n          res.put(\"ramBytesUsed\", ramBytesUsed());\n          res.put(\"evictionsRamUsage\", evictionsRamUsage);\n        }\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      if (maxRamBytes != Long.MAX_VALUE)  {\n        res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(\"lookups\", lookups);\n        res.put(\"hits\", hits);\n        res.put(\"hitratio\", calcHitRatio(lookups,hits));\n        res.put(\"inserts\", inserts);\n        res.put(\"evictions\", evictions);\n        res.put(\"size\", map.size());\n        if (maxRamBytes != Long.MAX_VALUE)  {\n          res.put(\"maxRamMB\", maxRamBytes / 1024L / 1024L);\n          res.put(\"ramBytesUsed\", ramBytesUsed());\n          res.put(\"evictionsRamUsage\", evictionsRamUsage);\n        }\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      if (maxRamBytes != Long.MAX_VALUE)  {\n        res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, true, scope, getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(\"lookups\", lookups);\n        res.put(\"hits\", hits);\n        res.put(\"hitratio\", calcHitRatio(lookups,hits));\n        res.put(\"inserts\", inserts);\n        res.put(\"evictions\", evictions);\n        res.put(\"size\", map.size());\n        if (maxRamBytes != Long.MAX_VALUE)  {\n          res.put(\"maxRamMB\", maxRamBytes / 1024L / 1024L);\n          res.put(\"ramBytesUsed\", ramBytesUsed());\n          res.put(\"evictionsRamUsage\", evictionsRamUsage);\n        }\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      if (maxRamBytes != Long.MAX_VALUE)  {\n        res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, res) -> {\n      synchronized (map) {\n        res.put(\"lookups\", lookups);\n        res.put(\"hits\", hits);\n        res.put(\"hitratio\", calcHitRatio(lookups,hits));\n        res.put(\"inserts\", inserts);\n        res.put(\"evictions\", evictions);\n        res.put(\"size\", map.size());\n        if (maxRamBytes != Long.MAX_VALUE)  {\n          res.put(\"maxRamMB\", maxRamBytes / 1024L / 1024L);\n          res.put(\"ramBytesUsed\", ramBytesUsed());\n          res.put(\"evictionsRamUsage\", evictionsRamUsage);\n        }\n      }\n      res.put(\"warmupTime\", warmupTime);\n\n      long clookups = stats.lookups.longValue();\n      long chits = stats.hits.longValue();\n      res.put(\"cumulative_lookups\", clookups);\n      res.put(\"cumulative_hits\", chits);\n      res.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n      res.put(\"cumulative_inserts\", stats.inserts.longValue());\n      res.put(\"cumulative_evictions\", stats.evictions.longValue());\n      if (maxRamBytes != Long.MAX_VALUE)  {\n        res.put(\"cumulative_evictionsRamUsage\", stats.evictionsRamUsage.longValue());\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, true, scope, getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43564cbb30b064675027cfb569564e8531096e97"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}