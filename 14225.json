{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"75ada11c0f0dd875dcc4aa01726097b8a4561876","date":1287370460,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["75ada11c0f0dd875dcc4aa01726097b8a4561876"],"a3776dccca01c11e7046323cfad46a3b4a471233":["75ada11c0f0dd875dcc4aa01726097b8a4561876","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","75ada11c0f0dd875dcc4aa01726097b8a4561876"],"75ada11c0f0dd875dcc4aa01726097b8a4561876":["d572389229127c297dd1fa5ce4758e1cec41e799"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["d572389229127c297dd1fa5ce4758e1cec41e799","75ada11c0f0dd875dcc4aa01726097b8a4561876"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","75ada11c0f0dd875dcc4aa01726097b8a4561876","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"75ada11c0f0dd875dcc4aa01726097b8a4561876":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}