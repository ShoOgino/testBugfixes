{"path":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestICUCollationKeyFilterFactory#testIgnoreWhitespace().mjava","commits":[{"id":"a540670bcd877e5818e2f2a9fadfcf9c0534e16d","date":1322478204,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestICUCollationKeyFilterFactory#testIgnoreWhitespace().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Setting alternate=shifted and variableTop to shift whitespace, but not \n   * punctuation or symbols, to quaternary level \n   */\n  public void testIgnoreWhitespace() throws IOException {\n    String withSpace = \"foo bar\";\n    String withoutSpace = \"foobar\";\n    String withPunctuation = \"foo-bar\";\n    ICUCollationKeyFilterFactory factory = new ICUCollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"locale\", \"en\");\n    args.put(\"strength\", \"primary\");\n    args.put(\"alternate\", \"shifted\");\n    args.put(\"variableTop\", \" \");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\"));\n    TokenStream tsWithSpace = factory.create(\n        new KeywordTokenizer(new StringReader(withSpace)));\n    TokenStream tsWithoutSpace = factory.create(\n        new KeywordTokenizer(new StringReader(withoutSpace)));\n    assertCollatesToSame(tsWithSpace, tsWithoutSpace);\n    // now assert that punctuation still matters: foo-bar < foo bar\n    tsWithSpace = factory.create(\n        new KeywordTokenizer(new StringReader(withSpace)));\n    TokenStream tsWithPunctuation = factory.create(\n        new KeywordTokenizer(new StringReader(withPunctuation)));\n    assertCollation(tsWithPunctuation, tsWithSpace, -1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestICUCollationKeyFilterFactory#testIgnoreWhitespace().mjava","sourceNew":null,"sourceOld":"  /*\n   * Setting alternate=shifted and variableTop to shift whitespace, but not \n   * punctuation or symbols, to quaternary level \n   */\n  public void testIgnoreWhitespace() throws IOException {\n    String withSpace = \"foo bar\";\n    String withoutSpace = \"foobar\";\n    String withPunctuation = \"foo-bar\";\n    ICUCollationKeyFilterFactory factory = new ICUCollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"locale\", \"en\");\n    args.put(\"strength\", \"primary\");\n    args.put(\"alternate\", \"shifted\");\n    args.put(\"variableTop\", \" \");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\"));\n    TokenStream tsWithSpace = factory.create(\n        new KeywordTokenizer(new StringReader(withSpace)));\n    TokenStream tsWithoutSpace = factory.create(\n        new KeywordTokenizer(new StringReader(withoutSpace)));\n    assertCollatesToSame(tsWithSpace, tsWithoutSpace);\n    // now assert that punctuation still matters: foo-bar < foo bar\n    tsWithSpace = factory.create(\n        new KeywordTokenizer(new StringReader(withSpace)));\n    TokenStream tsWithPunctuation = factory.create(\n        new KeywordTokenizer(new StringReader(withPunctuation)));\n    assertCollation(tsWithPunctuation, tsWithSpace, -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["a540670bcd877e5818e2f2a9fadfcf9c0534e16d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a540670bcd877e5818e2f2a9fadfcf9c0534e16d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a540670bcd877e5818e2f2a9fadfcf9c0534e16d"],"a540670bcd877e5818e2f2a9fadfcf9c0534e16d":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}