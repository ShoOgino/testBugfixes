{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/OriginalQueryParserHelper#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","commits":[{"id":"b955a87bc7c5daeda1ed56821ec0bec2e8789e44","date":1249270724,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/OriginalQueryParserHelper#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    MultiTermRewriteMethodAttribute attr = (MultiTermRewriteMethodAttribute) getQueryConfigHandler().getAttribute(MultiTermRewriteMethodAttribute.class);\n    attr.setMultiTermRewriteMethod(method);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/StandardQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/OriginalQueryParserHelper#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    MultiTermRewriteMethodAttribute attr = (MultiTermRewriteMethodAttribute) getQueryConfigHandler().getAttribute(MultiTermRewriteMethodAttribute.class);\n    attr.setMultiTermRewriteMethod(method);\n  }\n\n","sourceOld":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    MultiTermRewriteMethodAttribute attr = (MultiTermRewriteMethodAttribute) getQueryConfigHandler().getAttribute(MultiTermRewriteMethodAttribute.class);\n    attr.setMultiTermRewriteMethod(method);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}