{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","sourceNew":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(\"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","sourceOld":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(\"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","date":1341673943,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","sourceNew":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(Locale.ROOT, \"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","sourceOld":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(\"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","sourceNew":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(Locale.ROOT, \"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","sourceOld":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(\"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","sourceNew":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(Locale.ROOT, \"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","sourceOld":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(\"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","sourceNew":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(Locale.ROOT, \"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","sourceOld":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(\"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","sourceNew":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(Locale.ROOT, \"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(getDefaultField(), tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","sourceOld":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(Locale.ROOT, \"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","bugFix":["8d43be4aa22695313abd1d6ce020b0dce895caea"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","sourceNew":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(Locale.ROOT, \"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(getDefaultField(), tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","sourceOld":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(Locale.ROOT, \"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","sourceNew":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(Locale.ROOT, \"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(getDefaultField(), tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","sourceOld":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(Locale.ROOT, \"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","sourceNew":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(Locale.ROOT, \"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.clauses().toArray(new BooleanClause[0]);\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(getDefaultField(), tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","sourceOld":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(Locale.ROOT, \"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(getDefaultField(), tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["2acf500f78aa12b92e371fd89c719291986b6b90"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["46d8ada1fff8d18cb197c38c7983225162599948","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","fe33227f6805edab2036cbb80645cc4e2d1fa424","46d8ada1fff8d18cb197c38c7983225162599948"],"46d8ada1fff8d18cb197c38c7983225162599948":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}