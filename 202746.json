{"path":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#newPhraseQuery(String,String,boolean).mjava","commits":[{"id":"fa4f1b5e611afe6cb170951e0a9202ff95dc9156","date":1250976267,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#newPhraseQuery(String,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestBoostingNearQuery#newPhraseQuery(String,String,boolean).mjava","sourceNew":"\tprivate PayloadNearQuery newPhraseQuery (String fieldName, String phrase, boolean inOrder) {\n\t\tint n;\n\t\tString[] words = phrase.split(\"[\\\\s]+\");\n\t\tSpanQuery clauses[] = new SpanQuery[words.length];\n\t\tfor (int i=0;i<clauses.length;i++) {\n\t\t\tclauses[i] = new PayloadTermQuery(new Term(fieldName, words[i]), new AveragePayloadFunction());  \n\t\t} \n\t\treturn new PayloadNearQuery(clauses, 0, inOrder);\n\t}\n\n","sourceOld":"\tprivate BoostingNearQuery newPhraseQuery (String fieldName, String phrase, boolean inOrder) {\n\t\tint n;\n\t\tString[] words = phrase.split(\"[\\\\s]+\");\n\t\tSpanQuery clauses[] = new SpanQuery[words.length];\n\t\tfor (int i=0;i<clauses.length;i++) {\n\t\t\tclauses[i] = new BoostingTermQuery(new Term(fieldName, words[i]));  \n\t\t} \n\t\treturn new BoostingNearQuery(clauses, 0, inOrder);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9a421afb32184cc61e8326108325225d58dfde0","date":1255858611,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#newPhraseQuery(String,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#newPhraseQuery(String,String,boolean).mjava","sourceNew":"  private PayloadNearQuery newPhraseQuery (String fieldName, String phrase, boolean inOrder) {\n    int n;\n    String[] words = phrase.split(\"[\\\\s]+\");\n    SpanQuery clauses[] = new SpanQuery[words.length];\n    for (int i=0;i<clauses.length;i++) {\n      clauses[i] = new PayloadTermQuery(new Term(fieldName, words[i]), new AveragePayloadFunction());  \n    } \n    return new PayloadNearQuery(clauses, 0, inOrder);\n  }\n\n","sourceOld":"\tprivate PayloadNearQuery newPhraseQuery (String fieldName, String phrase, boolean inOrder) {\n\t\tint n;\n\t\tString[] words = phrase.split(\"[\\\\s]+\");\n\t\tSpanQuery clauses[] = new SpanQuery[words.length];\n\t\tfor (int i=0;i<clauses.length;i++) {\n\t\t\tclauses[i] = new PayloadTermQuery(new Term(fieldName, words[i]), new AveragePayloadFunction());  \n\t\t} \n\t\treturn new PayloadNearQuery(clauses, 0, inOrder);\n\t}\n\n","bugFix":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#newPhraseQuery(String,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#newPhraseQuery(String,String,boolean).mjava","sourceNew":"  private PayloadNearQuery newPhraseQuery (String fieldName, String phrase, boolean inOrder) {\n    String[] words = phrase.split(\"[\\\\s]+\");\n    SpanQuery clauses[] = new SpanQuery[words.length];\n    for (int i=0;i<clauses.length;i++) {\n      clauses[i] = new PayloadTermQuery(new Term(fieldName, words[i]), new AveragePayloadFunction());  \n    } \n    return new PayloadNearQuery(clauses, 0, inOrder);\n  }\n\n","sourceOld":"  private PayloadNearQuery newPhraseQuery (String fieldName, String phrase, boolean inOrder) {\n    int n;\n    String[] words = phrase.split(\"[\\\\s]+\");\n    SpanQuery clauses[] = new SpanQuery[words.length];\n    for (int i=0;i<clauses.length;i++) {\n      clauses[i] = new PayloadTermQuery(new Term(fieldName, words[i]), new AveragePayloadFunction());  \n    } \n    return new PayloadNearQuery(clauses, 0, inOrder);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbb94528ffd4f2badeb24be1022d5742a078e0ea","date":1266073425,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#newPhraseQuery(String,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#newPhraseQuery(String,String,boolean).mjava","sourceNew":"  private PayloadNearQuery newPhraseQuery (String fieldName, String phrase, boolean inOrder) {\n    String[] words = phrase.split(\"[\\\\s]+\");\n    SpanQuery clauses[] = new SpanQuery[words.length];\n    for (int i=0;i<clauses.length;i++) {\n      clauses[i] = new SpanTermQuery(new Term(fieldName, words[i]));  \n    } \n    return new PayloadNearQuery(clauses, 0, inOrder);\n  }\n\n","sourceOld":"  private PayloadNearQuery newPhraseQuery (String fieldName, String phrase, boolean inOrder) {\n    String[] words = phrase.split(\"[\\\\s]+\");\n    SpanQuery clauses[] = new SpanQuery[words.length];\n    for (int i=0;i<clauses.length;i++) {\n      clauses[i] = new PayloadTermQuery(new Term(fieldName, words[i]), new AveragePayloadFunction());  \n    } \n    return new PayloadNearQuery(clauses, 0, inOrder);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#newPhraseQuery(String,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#newPhraseQuery(String,String,boolean).mjava","sourceNew":"  private PayloadNearQuery newPhraseQuery (String fieldName, String phrase, boolean inOrder) {\n    String[] words = phrase.split(\"[\\\\s]+\");\n    SpanQuery clauses[] = new SpanQuery[words.length];\n    for (int i=0;i<clauses.length;i++) {\n      clauses[i] = new SpanTermQuery(new Term(fieldName, words[i]));  \n    } \n    return new PayloadNearQuery(clauses, 0, inOrder);\n  }\n\n","sourceOld":"  private PayloadNearQuery newPhraseQuery (String fieldName, String phrase, boolean inOrder) {\n    String[] words = phrase.split(\"[\\\\s]+\");\n    SpanQuery clauses[] = new SpanQuery[words.length];\n    for (int i=0;i<clauses.length;i++) {\n      clauses[i] = new SpanTermQuery(new Term(fieldName, words[i]));  \n    } \n    return new PayloadNearQuery(clauses, 0, inOrder);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fbb94528ffd4f2badeb24be1022d5742a078e0ea":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["e9a421afb32184cc61e8326108325225d58dfde0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fbb94528ffd4f2badeb24be1022d5742a078e0ea"],"e9a421afb32184cc61e8326108325225d58dfde0":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["e9a421afb32184cc61e8326108325225d58dfde0"],"fbb94528ffd4f2badeb24be1022d5742a078e0ea":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["fbb94528ffd4f2badeb24be1022d5742a078e0ea"],"e9a421afb32184cc61e8326108325225d58dfde0":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}