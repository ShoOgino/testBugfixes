{"path":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#setupBaseConfigSet(String,Map[String,String]).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#setupBaseConfigSet(String,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  private void setupBaseConfigSet(String baseConfigSetName, Map<String, String> oldProps) throws Exception {\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    if (oldProps != null) {\n      FileUtils.write(new File(tmpConfigDir, ConfigSetProperties.DEFAULT_FILENAME),\n          getConfigSetProps(oldProps));\n    }\n    solrCluster.uploadConfigDir(tmpConfigDir, baseConfigSetName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3cc56892371c2fde6f65948862e91c81a2f2503","date":1466364454,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#setupBaseConfigSet(String,Map[String,String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#setupBaseConfigSet(String,Map[String,String]).mjava","sourceNew":"  private void setupBaseConfigSet(String baseConfigSetName, Map<String, String> oldProps) throws Exception {\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    if (oldProps != null) {\n      FileUtils.write(new File(tmpConfigDir, ConfigSetProperties.DEFAULT_FILENAME),\n          getConfigSetProps(oldProps), StandardCharsets.UTF_8);\n    }\n    solrCluster.uploadConfigDir(tmpConfigDir, baseConfigSetName);\n  }\n\n","sourceOld":"  private void setupBaseConfigSet(String baseConfigSetName, Map<String, String> oldProps) throws Exception {\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    if (oldProps != null) {\n      FileUtils.write(new File(tmpConfigDir, ConfigSetProperties.DEFAULT_FILENAME),\n          getConfigSetProps(oldProps));\n    }\n    solrCluster.uploadConfigDir(tmpConfigDir, baseConfigSetName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e89a32cc825033ebae8bb9e1c6877c2d9d76749e","date":1476790453,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#setupBaseConfigSet(String,Map[String,String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#setupBaseConfigSet(String,Map[String,String]).mjava","sourceNew":"  private void setupBaseConfigSet(String baseConfigSetName, Map<String, String> oldProps) throws Exception {\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    if (oldProps != null) {\n      FileUtils.write(new File(tmpConfigDir, ConfigSetProperties.DEFAULT_FILENAME),\n          getConfigSetProps(oldProps), StandardCharsets.UTF_8);\n    }\n    solrCluster.uploadConfigSet(tmpConfigDir.toPath(), baseConfigSetName);\n  }\n\n","sourceOld":"  private void setupBaseConfigSet(String baseConfigSetName, Map<String, String> oldProps) throws Exception {\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    if (oldProps != null) {\n      FileUtils.write(new File(tmpConfigDir, ConfigSetProperties.DEFAULT_FILENAME),\n          getConfigSetProps(oldProps), StandardCharsets.UTF_8);\n    }\n    solrCluster.uploadConfigDir(tmpConfigDir, baseConfigSetName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#setupBaseConfigSet(String,Map[String,String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#setupBaseConfigSet(String,Map[String,String]).mjava","sourceNew":"  private void setupBaseConfigSet(String baseConfigSetName, Map<String, String> oldProps) throws Exception {\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    if (oldProps != null) {\n      FileUtils.write(new File(tmpConfigDir, ConfigSetProperties.DEFAULT_FILENAME),\n          getConfigSetProps(oldProps), StandardCharsets.UTF_8);\n    }\n    solrCluster.uploadConfigSet(tmpConfigDir.toPath(), baseConfigSetName);\n  }\n\n","sourceOld":"  private void setupBaseConfigSet(String baseConfigSetName, Map<String, String> oldProps) throws Exception {\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    if (oldProps != null) {\n      FileUtils.write(new File(tmpConfigDir, ConfigSetProperties.DEFAULT_FILENAME),\n          getConfigSetProps(oldProps));\n    }\n    solrCluster.uploadConfigDir(tmpConfigDir, baseConfigSetName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01ee5edcdd3cffaab03842feda0c26516290698","date":1601586820,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#setupBaseConfigSet(String,Map[String,String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#setupBaseConfigSet(String,Map[String,String]).mjava","sourceNew":"  private void setupBaseConfigSet(String baseConfigSetName, Map<String, String> oldProps) throws Exception {\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    if (oldProps != null) {\n      FileUtils.write(new File(tmpConfigDir, ConfigSetProperties.DEFAULT_FILENAME),\n          getConfigSetProps(oldProps), StandardCharsets.UTF_8);\n    }\n    solrCluster.uploadConfigSet(tmpConfigDir.toPath(), baseConfigSetName);\n    solrCluster.getZkClient().setData(\"/configs/\" + baseConfigSetName, \"{\\\"trusted\\\": false}\".getBytes(StandardCharsets.UTF_8), true);\n  }\n\n","sourceOld":"  private void setupBaseConfigSet(String baseConfigSetName, Map<String, String> oldProps) throws Exception {\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    if (oldProps != null) {\n      FileUtils.write(new File(tmpConfigDir, ConfigSetProperties.DEFAULT_FILENAME),\n          getConfigSetProps(oldProps), StandardCharsets.UTF_8);\n    }\n    solrCluster.uploadConfigSet(tmpConfigDir.toPath(), baseConfigSetName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["f3cc56892371c2fde6f65948862e91c81a2f2503"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c01ee5edcdd3cffaab03842feda0c26516290698":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3cc56892371c2fde6f65948862e91c81a2f2503":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2209af2c265d2258ec4b29c8cc78622d36994a15","e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c01ee5edcdd3cffaab03842feda0c26516290698"]},"commit2Childs":{"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["c01ee5edcdd3cffaab03842feda0c26516290698","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["f3cc56892371c2fde6f65948862e91c81a2f2503","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c01ee5edcdd3cffaab03842feda0c26516290698":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"f3cc56892371c2fde6f65948862e91c81a2f2503":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}