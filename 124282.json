{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState writeState) throws IOException {\n    final int id = nextID.getAndIncrement();\n\n    // TODO -- ok to do this up front instead of\n    // on close....?  should be ok?\n    // Write our ID:\n    final String idFileName = IndexFileNames.segmentFileName(writeState.segmentName, writeState.segmentSuffix, ID_EXTENSION);\n    IndexOutput out = writeState.directory.createOutput(idFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(out, RAM_ONLY_NAME, VERSION_LATEST);\n      out.writeVInt(id);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      } else {\n        IOUtils.close(out);\n      }\n    }\n    \n    final RAMPostings postings = new RAMPostings();\n    final RAMFieldsConsumer consumer = new RAMFieldsConsumer(postings);\n\n    synchronized(state) {\n      state.put(id, postings);\n    }\n    return consumer;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState writeState) throws IOException {\n    final int id = nextID.getAndIncrement();\n\n    // TODO -- ok to do this up front instead of\n    // on close....?  should be ok?\n    // Write our ID:\n    final String idFileName = IndexFileNames.segmentFileName(writeState.segmentName, writeState.segmentSuffix, ID_EXTENSION);\n    IndexOutput out = writeState.directory.createOutput(idFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(out, RAM_ONLY_NAME, VERSION_LATEST);\n      out.writeVInt(id);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      } else {\n        IOUtils.close(out);\n      }\n    }\n    \n    final RAMPostings postings = new RAMPostings();\n    final RAMFieldsConsumer consumer = new RAMFieldsConsumer(postings);\n\n    synchronized(state) {\n      state.put(id, postings);\n    }\n    return consumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public InvertedFieldsConsumer fieldsConsumer(SegmentWriteState writeState) throws IOException {\n    final int id = nextID.getAndIncrement();\n\n    // TODO -- ok to do this up front instead of\n    // on close....?  should be ok?\n    // Write our ID:\n    final String idFileName = IndexFileNames.segmentFileName(writeState.segmentName, writeState.segmentSuffix, ID_EXTENSION);\n    IndexOutput out = writeState.directory.createOutput(idFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(out, RAM_ONLY_NAME, VERSION_LATEST);\n      out.writeVInt(id);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      } else {\n        IOUtils.close(out);\n      }\n    }\n    \n    final RAMPostings postings = new RAMPostings();\n    final RAMFieldsConsumer consumer = new RAMFieldsConsumer(postings);\n\n    synchronized(state) {\n      state.put(id, postings);\n    }\n    return consumer;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState writeState) throws IOException {\n    final int id = nextID.getAndIncrement();\n\n    // TODO -- ok to do this up front instead of\n    // on close....?  should be ok?\n    // Write our ID:\n    final String idFileName = IndexFileNames.segmentFileName(writeState.segmentName, writeState.segmentSuffix, ID_EXTENSION);\n    IndexOutput out = writeState.directory.createOutput(idFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(out, RAM_ONLY_NAME, VERSION_LATEST);\n      out.writeVInt(id);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      } else {\n        IOUtils.close(out);\n      }\n    }\n    \n    final RAMPostings postings = new RAMPostings();\n    final RAMFieldsConsumer consumer = new RAMFieldsConsumer(postings);\n\n    synchronized(state) {\n      state.put(id, postings);\n    }\n    return consumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState writeState) throws IOException {\n    final int id = nextID.getAndIncrement();\n\n    // TODO -- ok to do this up front instead of\n    // on close....?  should be ok?\n    // Write our ID:\n    final String idFileName = IndexFileNames.segmentFileName(writeState.segmentName, writeState.segmentSuffix, ID_EXTENSION);\n    IndexOutput out = writeState.directory.createOutput(idFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(out, RAM_ONLY_NAME, VERSION_LATEST);\n      out.writeVInt(id);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      } else {\n        IOUtils.close(out);\n      }\n    }\n    \n    final RAMPostings postings = new RAMPostings();\n    final RAMFieldsConsumer consumer = new RAMFieldsConsumer(postings);\n\n    synchronized(state) {\n      state.put(id, postings);\n    }\n    return consumer;\n  }\n\n","sourceOld":"  @Override\n  public InvertedFieldsConsumer fieldsConsumer(SegmentWriteState writeState) throws IOException {\n    final int id = nextID.getAndIncrement();\n\n    // TODO -- ok to do this up front instead of\n    // on close....?  should be ok?\n    // Write our ID:\n    final String idFileName = IndexFileNames.segmentFileName(writeState.segmentName, writeState.segmentSuffix, ID_EXTENSION);\n    IndexOutput out = writeState.directory.createOutput(idFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(out, RAM_ONLY_NAME, VERSION_LATEST);\n      out.writeVInt(id);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      } else {\n        IOUtils.close(out);\n      }\n    }\n    \n    final RAMPostings postings = new RAMPostings();\n    final RAMFieldsConsumer consumer = new RAMFieldsConsumer(postings);\n\n    synchronized(state) {\n      state.put(id, postings);\n    }\n    return consumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129c6e8ac0c0d9a110ba29e4b5f1889374f30076","date":1337725510,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState writeState) throws IOException {\n    final int id = nextID.getAndIncrement();\n\n    // TODO -- ok to do this up front instead of\n    // on close....?  should be ok?\n    // Write our ID:\n    final String idFileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name, writeState.segmentSuffix, ID_EXTENSION);\n    IndexOutput out = writeState.directory.createOutput(idFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(out, RAM_ONLY_NAME, VERSION_LATEST);\n      out.writeVInt(id);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      } else {\n        IOUtils.close(out);\n      }\n    }\n    \n    final RAMPostings postings = new RAMPostings();\n    final RAMFieldsConsumer consumer = new RAMFieldsConsumer(postings);\n\n    synchronized(state) {\n      state.put(id, postings);\n    }\n    return consumer;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState writeState) throws IOException {\n    final int id = nextID.getAndIncrement();\n\n    // TODO -- ok to do this up front instead of\n    // on close....?  should be ok?\n    // Write our ID:\n    final String idFileName = IndexFileNames.segmentFileName(writeState.segmentName, writeState.segmentSuffix, ID_EXTENSION);\n    IndexOutput out = writeState.directory.createOutput(idFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(out, RAM_ONLY_NAME, VERSION_LATEST);\n      out.writeVInt(id);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      } else {\n        IOUtils.close(out);\n      }\n    }\n    \n    final RAMPostings postings = new RAMPostings();\n    final RAMFieldsConsumer consumer = new RAMFieldsConsumer(postings);\n\n    synchronized(state) {\n      state.put(id, postings);\n    }\n    return consumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState writeState) throws IOException {\n    final int id = nextID.getAndIncrement();\n\n    // TODO -- ok to do this up front instead of\n    // on close....?  should be ok?\n    // Write our ID:\n    final String idFileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name, writeState.segmentSuffix, ID_EXTENSION);\n    IndexOutput out = writeState.directory.createOutput(idFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(out, RAM_ONLY_NAME, VERSION_LATEST);\n      out.writeVInt(id);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      } else {\n        IOUtils.close(out);\n      }\n    }\n    \n    final RAMPostings postings = new RAMPostings();\n    final RAMFieldsConsumer consumer = new RAMFieldsConsumer(postings);\n\n    synchronized(state) {\n      state.put(id, postings);\n    }\n    return consumer;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState writeState) throws IOException {\n    final int id = nextID.getAndIncrement();\n\n    // TODO -- ok to do this up front instead of\n    // on close....?  should be ok?\n    // Write our ID:\n    final String idFileName = IndexFileNames.segmentFileName(writeState.segmentName, writeState.segmentSuffix, ID_EXTENSION);\n    IndexOutput out = writeState.directory.createOutput(idFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(out, RAM_ONLY_NAME, VERSION_LATEST);\n      out.writeVInt(id);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      } else {\n        IOUtils.close(out);\n      }\n    }\n    \n    final RAMPostings postings = new RAMPostings();\n    final RAMFieldsConsumer consumer = new RAMFieldsConsumer(postings);\n\n    synchronized(state) {\n      state.put(id, postings);\n    }\n    return consumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState writeState) throws IOException {\n    final int id = nextID.getAndIncrement();\n\n    // TODO -- ok to do this up front instead of\n    // on close....?  should be ok?\n    // Write our ID:\n    final String idFileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name, writeState.segmentSuffix, ID_EXTENSION);\n    IndexOutput out = writeState.directory.createOutput(idFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(out, RAM_ONLY_NAME, VERSION_LATEST);\n      out.writeVInt(id);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      } else {\n        IOUtils.close(out);\n      }\n    }\n    \n    final RAMPostings postings = new RAMPostings();\n    final RAMFieldsConsumer consumer = new RAMFieldsConsumer(writeState, postings);\n\n    synchronized(state) {\n      state.put(id, postings);\n    }\n    return consumer;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState writeState) throws IOException {\n    final int id = nextID.getAndIncrement();\n\n    // TODO -- ok to do this up front instead of\n    // on close....?  should be ok?\n    // Write our ID:\n    final String idFileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name, writeState.segmentSuffix, ID_EXTENSION);\n    IndexOutput out = writeState.directory.createOutput(idFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(out, RAM_ONLY_NAME, VERSION_LATEST);\n      out.writeVInt(id);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      } else {\n        IOUtils.close(out);\n      }\n    }\n    \n    final RAMPostings postings = new RAMPostings();\n    final RAMFieldsConsumer consumer = new RAMFieldsConsumer(postings);\n\n    synchronized(state) {\n      state.put(id, postings);\n    }\n    return consumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}