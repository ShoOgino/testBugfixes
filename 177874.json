{"path":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#testUnionCount().mjava","commits":[{"id":"af918c7c328775f9fadd5870c21f0fafc2a059cc","date":1430253435,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#testUnionCount().mjava","pathOld":"/dev/null","sourceNew":"  // Demonstrates that the presence of ghost bits in the last used word can cause spurious failures\n  public void testUnionCount() {\n    Random random = random();\n    \n    int numBits1 = TestUtil.nextInt(random, 1000, 2000);\n    int numBits2 = TestUtil.nextInt(random, 1000, 2000);\n    \n    int count1 = TestUtil.nextInt(random, 0, numBits1 - 1);\n    int count2 = TestUtil.nextInt(random, 0, numBits2 - 1);\n\n    int[] bits1 = makeIntArray(random, count1, 0, numBits1 - 1);\n    int[] bits2 = makeIntArray(random, count2, 0, numBits2 - 1);\n    \n    FixedBitSet fixedBitSet1 = makeFixedBitSet(bits1, numBits1);\n    FixedBitSet fixedBitSet2 = makeFixedBitSet(bits2, numBits2);\n    \n    // If ghost bits are present, these may fail too, but that's not what we want to demonstrate here\n    //assertTrue(fixedBitSet1.cardinality() <= bits1.length);\n    //assertTrue(fixedBitSet2.cardinality() <= bits2.length);\n    \n    long unionCount = FixedBitSet.unionCount(fixedBitSet1, fixedBitSet2);\n    \n    java.util.BitSet bitSet1 = makeBitSet(bits1);\n    java.util.BitSet bitSet2 = makeBitSet(bits2);\n    \n    // If ghost bits are present, these may fail too, but that's not what we want to demonstrate here\n    //assertEquals(bitSet1.cardinality(), fixedBitSet1.cardinality());\n    //assertEquals(bitSet2.cardinality(), fixedBitSet2.cardinality());\n\n    bitSet1.or(bitSet2);\n    \n    assertEquals(bitSet1.cardinality(), unionCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af918c7c328775f9fadd5870c21f0fafc2a059cc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af918c7c328775f9fadd5870c21f0fafc2a059cc"],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}