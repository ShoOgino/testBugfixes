{"path":"src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","commits":[{"id":"9cb179b2fab2183d2f6041e450ff8022c592ecf0","date":1229553695,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","pathOld":"/dev/null","sourceNew":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) {\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map tagMap = (Map)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      qlist.add(rb.getQuery());\n\n      // add the filters\n      for (Query q : rb.getFilters()) {\n        if (!excludeSet.containsKey(q)) {\n          qlist.add(q);\n        }\n\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1","aa62c79a7afa4d7f22e1f71b883659f3213d7db1","aa62c79a7afa4d7f22e1f71b883659f3213d7db1","8af6befbf8d7be9538fb4fb8a9d64a1aff18e772","8af6befbf8d7be9538fb4fb8a9d64a1aff18e772","8af6befbf8d7be9538fb4fb8a9d64a1aff18e772"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#parseParams(String,String).mjava","sourceNew":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) {\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map tagMap = (Map)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      qlist.add(rb.getQuery());\n\n      // add the filters\n      for (Query q : rb.getFilters()) {\n        if (!excludeSet.containsKey(q)) {\n          qlist.add(q);\n        }\n\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","sourceOld":"  void parseParams(String type, String param) throws ParseException, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    facetValue = param;\n    key = param;\n\n    if (localParams == null) return;\n\n    // remove local params unless it's a query\n    if (type != FacetParams.FACET_QUERY) {\n      facetValue = localParams.get(CommonParams.VALUE);\n    }\n\n    // reset set the default key now that localParams have been removed\n    key = facetValue;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map tagMap = (Map)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      qlist.add(rb.getQuery());\n\n      // add the filters\n      for (Query q : rb.getFilters()) {\n        if (!excludeSet.containsKey(q)) {\n          qlist.add(q);\n        }\n\n      }\n\n      // get the new base docset for this facet\n      base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"9cb179b2fab2183d2f6041e450ff8022c592ecf0":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["9cb179b2fab2183d2f6041e450ff8022c592ecf0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9cb179b2fab2183d2f6041e450ff8022c592ecf0"],"9cb179b2fab2183d2f6041e450ff8022c592ecf0":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}