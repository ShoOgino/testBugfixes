{"path":"solr/core/src/test/org/apache/solr/analysis/TestHTMLStripCharFilterFactory#testEscapedTags().mjava","commits":[{"id":"e3a908bacd530957eaa6d2dfebdd534afd9ac60e","date":1327209646,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestHTMLStripCharFilterFactory#testEscapedTags().mjava","pathOld":"/dev/null","sourceNew":"  public void testEscapedTags() throws IOException {\n    //                             11111111112222222222333333333344\n    //                   012345678901234567890123456789012345678901\n    final String text = \"<u>this</u> is <b>only</b> a <I>test</I>.\";\n    HTMLStripCharFilterFactory factory = new HTMLStripCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"escapedTags\", \"U i\");\n    factory.init(args);\n    CharStream cs = factory.create(CharReader.get(new StringReader(text)));\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"<u>this</u>\", \"is\", \"only\", \"a\", \"<I>test</I>.\" },\n        new int[] {  0, 12, 18, 27, 29 },\n        new int[] { 11, 14, 26, 28, 41 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"579dc30b5d3235c34cda518b2b6018d71a61879c","date":1327235122,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestHTMLStripCharFilterFactory#testEscapedTags().mjava","pathOld":"/dev/null","sourceNew":"  public void testEscapedTags() throws IOException {\n    //                             11111111112222222222333333333344\n    //                   012345678901234567890123456789012345678901\n    final String text = \"<u>this</u> is <b>only</b> a <I>test</I>.\";\n    HTMLStripCharFilterFactory factory = new HTMLStripCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"escapedTags\", \"U i\");\n    factory.init(args);\n    CharStream cs = factory.create(CharReader.get(new StringReader(text)));\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"<u>this</u>\", \"is\", \"only\", \"a\", \"<I>test</I>.\" },\n        new int[] {  0, 12, 18, 27, 29 },\n        new int[] { 11, 14, 26, 28, 41 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestHTMLStripCharFilterFactory#testEscapedTags().mjava","pathOld":"/dev/null","sourceNew":"  public void testEscapedTags() throws IOException {\n    //                             11111111112222222222333333333344\n    //                   012345678901234567890123456789012345678901\n    final String text = \"<u>this</u> is <b>only</b> a <I>test</I>.\";\n    HTMLStripCharFilterFactory factory = new HTMLStripCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"escapedTags\", \"U i\");\n    factory.init(args);\n    CharStream cs = factory.create(CharReader.get(new StringReader(text)));\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"<u>this</u>\", \"is\", \"only\", \"a\", \"<I>test</I>.\" },\n        new int[] {  0, 12, 18, 27, 29 },\n        new int[] { 11, 14, 26, 28, 41 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc706b1e03a539d44d99998108feb684bb44cbb2","date":1342522408,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestHTMLStripCharFilterFactory#testEscapedTags().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestHTMLStripCharFilterFactory#testEscapedTags().mjava","sourceNew":"  public void testEscapedTags() throws IOException {\n    //                             11111111112222222222333333333344\n    //                   012345678901234567890123456789012345678901\n    final String text = \"<u>this</u> is <b>only</b> a <I>test</I>.\";\n    HTMLStripCharFilterFactory factory = new HTMLStripCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"escapedTags\", \"U i\");\n    factory.init(args);\n    CharFilter cs = factory.create(new StringReader(text));\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"<u>this</u>\", \"is\", \"only\", \"a\", \"<I>test</I>.\" },\n        new int[] {  0, 12, 18, 27, 29 },\n        new int[] { 11, 14, 26, 28, 41 });\n  }\n\n","sourceOld":"  public void testEscapedTags() throws IOException {\n    //                             11111111112222222222333333333344\n    //                   012345678901234567890123456789012345678901\n    final String text = \"<u>this</u> is <b>only</b> a <I>test</I>.\";\n    HTMLStripCharFilterFactory factory = new HTMLStripCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"escapedTags\", \"U i\");\n    factory.init(args);\n    CharStream cs = factory.create(CharReader.get(new StringReader(text)));\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"<u>this</u>\", \"is\", \"only\", \"a\", \"<I>test</I>.\" },\n        new int[] {  0, 12, 18, 27, 29 },\n        new int[] { 11, 14, 26, 28, 41 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestHTMLStripCharFilterFactory#testEscapedTags().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestHTMLStripCharFilterFactory#testEscapedTags().mjava","sourceNew":"  public void testEscapedTags() throws IOException {\n    //                             11111111112222222222333333333344\n    //                   012345678901234567890123456789012345678901\n    final String text = \"<u>this</u> is <b>only</b> a <I>test</I>.\";\n    HTMLStripCharFilterFactory factory = new HTMLStripCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"escapedTags\", \"U i\");\n    factory.init(args);\n    CharFilter cs = factory.create(new StringReader(text));\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"<u>this</u>\", \"is\", \"only\", \"a\", \"<I>test</I>.\" },\n        new int[] {  0, 12, 18, 27, 29 },\n        new int[] { 11, 14, 26, 28, 41 });\n  }\n\n","sourceOld":"  public void testEscapedTags() throws IOException {\n    //                             11111111112222222222333333333344\n    //                   012345678901234567890123456789012345678901\n    final String text = \"<u>this</u> is <b>only</b> a <I>test</I>.\";\n    HTMLStripCharFilterFactory factory = new HTMLStripCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"escapedTags\", \"U i\");\n    factory.init(args);\n    CharStream cs = factory.create(CharReader.get(new StringReader(text)));\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"<u>this</u>\", \"is\", \"only\", \"a\", \"<I>test</I>.\" },\n        new int[] {  0, 12, 18, 27, 29 },\n        new int[] { 11, 14, 26, 28, 41 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestHTMLStripCharFilterFactory#testEscapedTags().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestHTMLStripCharFilterFactory#testEscapedTags().mjava","sourceNew":"  public void testEscapedTags() throws IOException {\n    //                             11111111112222222222333333333344\n    //                   012345678901234567890123456789012345678901\n    final String text = \"<u>this</u> is <b>only</b> a <I>test</I>.\";\n    HTMLStripCharFilterFactory factory = new HTMLStripCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"escapedTags\", \"U i\");\n    factory.init(args);\n    CharFilter cs = factory.create(new StringReader(text));\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"<u>this</u>\", \"is\", \"only\", \"a\", \"<I>test</I>.\" },\n        new int[] {  0, 12, 18, 27, 29 },\n        new int[] { 11, 14, 26, 28, 41 });\n  }\n\n","sourceOld":"  public void testEscapedTags() throws IOException {\n    //                             11111111112222222222333333333344\n    //                   012345678901234567890123456789012345678901\n    final String text = \"<u>this</u> is <b>only</b> a <I>test</I>.\";\n    HTMLStripCharFilterFactory factory = new HTMLStripCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"escapedTags\", \"U i\");\n    factory.init(args);\n    CharFilter cs = factory.create(new StringReader(text));\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"<u>this</u>\", \"is\", \"only\", \"a\", \"<I>test</I>.\" },\n        new int[] {  0, 12, 18, 27, 29 },\n        new int[] { 11, 14, 26, 28, 41 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestHTMLStripCharFilterFactory#testEscapedTags().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestHTMLStripCharFilterFactory#testEscapedTags().mjava","sourceNew":"  public void testEscapedTags() throws IOException {\n    //                             11111111112222222222333333333344\n    //                   012345678901234567890123456789012345678901\n    final String text = \"<u>this</u> is <b>only</b> a <I>test</I>.\";\n    HTMLStripCharFilterFactory factory = new HTMLStripCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"escapedTags\", \"U i\");\n    factory.init(args);\n    CharFilter cs = factory.create(new StringReader(text));\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"<u>this</u>\", \"is\", \"only\", \"a\", \"<I>test</I>.\" },\n        new int[] {  0, 12, 18, 27, 29 },\n        new int[] { 11, 14, 26, 28, 41 });\n  }\n\n","sourceOld":"  public void testEscapedTags() throws IOException {\n    //                             11111111112222222222333333333344\n    //                   012345678901234567890123456789012345678901\n    final String text = \"<u>this</u> is <b>only</b> a <I>test</I>.\";\n    HTMLStripCharFilterFactory factory = new HTMLStripCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"escapedTags\", \"U i\");\n    factory.init(args);\n    CharFilter cs = factory.create(new StringReader(text));\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"<u>this</u>\", \"is\", \"only\", \"a\", \"<I>test</I>.\" },\n        new int[] {  0, 12, 18, 27, 29 },\n        new int[] { 11, 14, 26, 28, 41 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestHTMLStripCharFilterFactory#testEscapedTags().mjava","sourceNew":null,"sourceOld":"  public void testEscapedTags() throws IOException {\n    //                             11111111112222222222333333333344\n    //                   012345678901234567890123456789012345678901\n    final String text = \"<u>this</u> is <b>only</b> a <I>test</I>.\";\n    HTMLStripCharFilterFactory factory = new HTMLStripCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"escapedTags\", \"U i\");\n    factory.init(args);\n    CharStream cs = factory.create(CharReader.get(new StringReader(text)));\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"<u>this</u>\", \"is\", \"only\", \"a\", \"<I>test</I>.\" },\n        new int[] {  0, 12, 18, 27, 29 },\n        new int[] { 11, 14, 26, 28, 41 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestHTMLStripCharFilterFactory#testEscapedTags().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestHTMLStripCharFilterFactory#testEscapedTags().mjava","sourceNew":"  public void testEscapedTags() throws IOException {\n    //                             11111111112222222222333333333344\n    //                   012345678901234567890123456789012345678901\n    final String text = \"<u>this</u> is <b>only</b> a <I>test</I>.\";\n    HTMLStripCharFilterFactory factory = new HTMLStripCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"escapedTags\", \"U i\");\n    factory.init(args);\n    CharFilter cs = factory.create(new StringReader(text));\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"<u>this</u>\", \"is\", \"only\", \"a\", \"<I>test</I>.\" },\n        new int[] {  0, 12, 18, 27, 29 },\n        new int[] { 11, 14, 26, 28, 41 });\n  }\n\n","sourceOld":"  public void testEscapedTags() throws IOException {\n    //                             11111111112222222222333333333344\n    //                   012345678901234567890123456789012345678901\n    final String text = \"<u>this</u> is <b>only</b> a <I>test</I>.\";\n    HTMLStripCharFilterFactory factory = new HTMLStripCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"escapedTags\", \"U i\");\n    factory.init(args);\n    CharFilter cs = factory.create(new StringReader(text));\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"<u>this</u>\", \"is\", \"only\", \"a\", \"<I>test</I>.\" },\n        new int[] {  0, 12, 18, 27, 29 },\n        new int[] { 11, 14, 26, 28, 41 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e","5a1a22b1ad88b436661458df567f3fdb446392a4"],"fc706b1e03a539d44d99998108feb684bb44cbb2":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e","fc706b1e03a539d44d99998108feb684bb44cbb2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"579dc30b5d3235c34cda518b2b6018d71a61879c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["fc706b1e03a539d44d99998108feb684bb44cbb2","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["fc706b1e03a539d44d99998108feb684bb44cbb2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fc706b1e03a539d44d99998108feb684bb44cbb2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","e3a908bacd530957eaa6d2dfebdd534afd9ac60e","579dc30b5d3235c34cda518b2b6018d71a61879c"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["aba371508186796cc6151d8223a5b4e16d02e26e","fc706b1e03a539d44d99998108feb684bb44cbb2","fe33227f6805edab2036cbb80645cc4e2d1fa424","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c"],"579dc30b5d3235c34cda518b2b6018d71a61879c":[],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}