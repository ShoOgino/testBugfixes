{"path":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#getFilteredURLs(Path,String).mjava","commits":[{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#getFilteredURLs(Path,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Utility method to get the URLs of all paths under a given directory that match a regex\n   * @param libDir the root directory\n   * @param regex the regex as a String\n   * @return all matching URLs\n   * @throws IOException on error\n   */\n  public static List<URL> getFilteredURLs(Path libDir, String regex) throws IOException {\n    final PathMatcher matcher = libDir.getFileSystem().getPathMatcher(\"regex:\" + regex);\n    return getURLs(libDir, new DirectoryStream.Filter<Path>() {\n      @Override\n      public boolean accept(Path entry) throws IOException {\n        return matcher.matches(entry.getFileName());\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#getFilteredURLs(Path,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#getFilteredURLs(Path,String).mjava","sourceNew":"  /**\n   * Utility method to get the URLs of all paths under a given directory that match a regex\n   *\n   * @param libDir the root directory\n   * @param regex  the regex as a String\n   * @return all matching URLs\n   * @throws IOException on error\n   */\n  public static List<URL> getFilteredURLs(Path libDir, String regex) throws IOException {\n    final PathMatcher matcher = libDir.getFileSystem().getPathMatcher(\"regex:\" + regex);\n    return getURLs(libDir, new DirectoryStream.Filter<Path>() {\n      @Override\n      public boolean accept(Path entry) throws IOException {\n        return matcher.matches(entry.getFileName());\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Utility method to get the URLs of all paths under a given directory that match a regex\n   * @param libDir the root directory\n   * @param regex the regex as a String\n   * @return all matching URLs\n   * @throws IOException on error\n   */\n  public static List<URL> getFilteredURLs(Path libDir, String regex) throws IOException {\n    final PathMatcher matcher = libDir.getFileSystem().getPathMatcher(\"regex:\" + regex);\n    return getURLs(libDir, new DirectoryStream.Filter<Path>() {\n      @Override\n      public boolean accept(Path entry) throws IOException {\n        return matcher.matches(entry.getFileName());\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"954ae83b7dfacaa33d48ea056448ae11f7745a93":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["954ae83b7dfacaa33d48ea056448ae11f7745a93"]},"commit2Childs":{"954ae83b7dfacaa33d48ea056448ae11f7745a93":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}