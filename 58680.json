{"path":"lucene/src/java/org/apache/lucene/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#_next().mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#_next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#_next().mjava","sourceNew":"      /* Decodes only the term bytes of the next term.  If caller then asks for\n         metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n         decode all metadata up to the current term. */\n      private BytesRef _next() throws IOException {\n        //System.out.println(\"BTR._next seg=\" + segment + \" this=\" + this + \" termCount=\" + state.termBlockOrd + \" (vs \" + blockTermCount + \")\");\n        if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n          //System.out.println(\"  eof\");\n          indexIsCurrent = false;\n          return null;\n        }\n\n        // TODO: cutover to something better for these ints!  simple64?\n        final int suffix = termSuffixesReader.readVInt();\n        //System.out.println(\"  suffix=\" + suffix);\n\n        term.length = termBlockPrefix + suffix;\n        if (term.bytes.length < term.length) {\n          term.grow(term.length);\n        }\n        termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n        state.termBlockOrd++;\n\n        // NOTE: meaningless in the non-ord case\n        state.ord++;\n\n        //System.out.println(\"  return term=\" + fieldInfo.name + \":\" + term.utf8ToString() + \" \" + term + \" tbOrd=\" + state.termBlockOrd);\n        return term;\n      }\n\n","sourceOld":"      /* Decodes only the term bytes of the next term.  If caller then asks for\n         metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n         decode all metadata up to the current term. */\n      private BytesRef _next() throws IOException {\n        //System.out.println(\"BTR._next seg=\" + segment + \" this=\" + this + \" termCount=\" + state.termBlockOrd + \" (vs \" + blockTermCount + \")\");\n        if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n          //System.out.println(\"  eof\");\n          indexIsCurrent = false;\n          return null;\n        }\n\n        // TODO: cutover to something better for these ints!  simple64?\n        final int suffix = termSuffixesReader.readVInt();\n        //System.out.println(\"  suffix=\" + suffix);\n\n        term.length = termBlockPrefix + suffix;\n        if (term.bytes.length < term.length) {\n          term.grow(term.length);\n        }\n        termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n        state.termBlockOrd++;\n\n        // NOTE: meaningless in the non-ord case\n        state.ord++;\n\n        //System.out.println(\"  return term=\" + fieldInfo.name + \":\" + term.utf8ToString() + \" \" + term + \" tbOrd=\" + state.termBlockOrd);\n        return term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#_next().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#_next().mjava","sourceNew":"      /* Decodes only the term bytes of the next term.  If caller then asks for\n         metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n         decode all metadata up to the current term. */\n      private BytesRef _next() throws IOException {\n        //System.out.println(\"BTR._next seg=\" + segment + \" this=\" + this + \" termCount=\" + state.termBlockOrd + \" (vs \" + blockTermCount + \")\");\n        if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n          //System.out.println(\"  eof\");\n          indexIsCurrent = false;\n          return null;\n        }\n\n        // TODO: cutover to something better for these ints!  simple64?\n        final int suffix = termSuffixesReader.readVInt();\n        //System.out.println(\"  suffix=\" + suffix);\n\n        term.length = termBlockPrefix + suffix;\n        if (term.bytes.length < term.length) {\n          term.grow(term.length);\n        }\n        termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n        state.termBlockOrd++;\n\n        // NOTE: meaningless in the non-ord case\n        state.ord++;\n\n        //System.out.println(\"  return term=\" + fieldInfo.name + \":\" + term.utf8ToString() + \" \" + term + \" tbOrd=\" + state.termBlockOrd);\n        return term;\n      }\n\n","sourceOld":"      /* Decodes only the term bytes of the next term.  If caller then asks for\n         metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n         decode all metadata up to the current term. */\n      private BytesRef _next() throws IOException {\n        //System.out.println(\"BTR._next seg=\" + segment + \" this=\" + this + \" termCount=\" + state.termBlockOrd + \" (vs \" + blockTermCount + \")\");\n        if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n          //System.out.println(\"  eof\");\n          indexIsCurrent = false;\n          return null;\n        }\n\n        // TODO: cutover to something better for these ints!  simple64?\n        final int suffix = termSuffixesReader.readVInt();\n        //System.out.println(\"  suffix=\" + suffix);\n\n        term.length = termBlockPrefix + suffix;\n        if (term.bytes.length < term.length) {\n          term.grow(term.length);\n        }\n        termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n        state.termBlockOrd++;\n\n        // NOTE: meaningless in the non-ord case\n        state.ord++;\n\n        //System.out.println(\"  return term=\" + fieldInfo.name + \":\" + term.utf8ToString() + \" \" + term + \" tbOrd=\" + state.termBlockOrd);\n        return term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}