{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a8b14bc4241c302311422d5c6f7627f8febb86e","date":1337291675,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(((SegmentReader) r).getFieldInfos().hasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1494abe5dc85557ec2e2772f87660d48f831c3a5","date":1337614370,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(((SegmentReader) r).getFieldInfos().hasVectors());\n\n      // nocommit\n      /*\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n      */\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(((SegmentReader) r).getFieldInfos().hasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfoPerCommit s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(((SegmentReader) r).getFieldInfos().hasVectors());\n\n      // nocommit\n      /*\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n      */\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(((SegmentReader) r).getFieldInfos().hasVectors());\n\n      // nocommit\n      /*\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n      */\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb5728b83dbb3e002cdd22adfe6caf103a96ef15","date":1337791289,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfoPerCommit s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(((SegmentReader) r).getFieldInfos().hasVectors());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfoPerCommit s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(((SegmentReader) r).getFieldInfos().hasVectors());\n\n      // nocommit\n      /*\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n      */\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfoPerCommit s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(((SegmentReader) r).getFieldInfos().hasVectors());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfoPerCommit s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(((SegmentReader) r).getFieldInfos().hasVectors());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfoPerCommit s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(((SegmentReader) r).getFieldInfos().hasVectors());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext ctx : reader.leaves()) {\n      SegmentReader sr = (SegmentReader) ctx.reader();\n      assertTrue(sr.getFieldInfos().hasVectors());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfoPerCommit s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(((SegmentReader) r).getFieldInfos().hasVectors());\n    }\n    reader.close();\n  }\n\n","bugFix":["4a8b14bc4241c302311422d5c6f7627f8febb86e","3cc749c053615f5871f3b95715fe292f34e70a53","9d153abcf92dc5329d98571a8c3035df9bd80648"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext ctx : reader.leaves()) {\n      SegmentReader sr = (SegmentReader) ctx.reader();\n      assertTrue(sr.getFieldInfos().hasVectors());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfoPerCommit s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(((SegmentReader) r).getFieldInfos().hasVectors());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext ctx : reader.leaves()) {\n      SegmentReader sr = (SegmentReader) ctx.reader();\n      assertTrue(sr.getFieldInfos().hasVectors());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfoPerCommit s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(((SegmentReader) r).getFieldInfos().hasVectors());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfoPerCommit s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(((SegmentReader) r).getFieldInfos().hasVectors());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext ctx : reader.leaves()) {\n      SegmentReader sr = (SegmentReader) ctx.reader();\n      assertTrue(sr.getFieldInfos().hasVectors());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext ctx : reader.leaves()) {\n      SegmentReader sr = (SegmentReader) ctx.reader();\n      assertTrue(sr.getFieldInfos().hasVectors());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfoPerCommit s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(((SegmentReader) r).getFieldInfos().hasVectors());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext ctx : reader.leaves()) {\n      SegmentReader sr = (SegmentReader) ctx.reader();\n      assertTrue(sr.getFieldInfos().hasVectors());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext ctx : reader.leaves()) {\n      SegmentReader sr = (SegmentReader) ctx.reader();\n      assertTrue(sr.getFieldInfos().hasVectors());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a8b14bc4241c302311422d5c6f7627f8febb86e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fb5728b83dbb3e002cdd22adfe6caf103a96ef15":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["1494abe5dc85557ec2e2772f87660d48f831c3a5"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["4a8b14bc4241c302311422d5c6f7627f8febb86e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fb5728b83dbb3e002cdd22adfe6caf103a96ef15"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"4a8b14bc4241c302311422d5c6f7627f8febb86e":["1494abe5dc85557ec2e2772f87660d48f831c3a5"],"fb5728b83dbb3e002cdd22adfe6caf103a96ef15":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4a8b14bc4241c302311422d5c6f7627f8febb86e","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["fb5728b83dbb3e002cdd22adfe6caf103a96ef15"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3c188105a9aae04f56c24996f98f8333fc825d2e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}