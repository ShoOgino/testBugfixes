{"path":"solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory#BlockDirectory(String,Directory,Cache,Set[String],boolean,boolean).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory#BlockDirectory(String,Directory,Cache,Set[String],boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public BlockDirectory(String dirName, Directory directory, Cache cache,\n      Set<String> blockCacheFileTypes, boolean blockCacheReadEnabled,\n      boolean blockCacheWriteEnabled) throws IOException {\n    this.dirName = dirName;\n    this.directory = directory;\n    blockSize = BLOCK_SIZE;\n    this.cache = cache;\n    if (blockCacheFileTypes == null || blockCacheFileTypes.isEmpty()) {\n      this.blockCacheFileTypes = null;\n    } else {\n      this.blockCacheFileTypes = blockCacheFileTypes;\n    }\n    this.blockCacheReadEnabled = blockCacheReadEnabled;\n    if (!blockCacheReadEnabled) {\n      LOG.info(\"Block cache on read is disabled\");\n    }\n    this.blockCacheWriteEnabled = blockCacheWriteEnabled;\n    if (!blockCacheWriteEnabled) {\n      LOG.info(\"Block cache on write is disabled\");\n    }\n    if (directory.getLockFactory() != null) {\n      setLockFactory(directory.getLockFactory());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0d29d666b8eaa2fe8efe1e0d42fc8e32876d7294"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory#BlockDirectory(String,Directory,Cache,Set[String],boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public BlockDirectory(String dirName, Directory directory, Cache cache,\n      Set<String> blockCacheFileTypes, boolean blockCacheReadEnabled,\n      boolean blockCacheWriteEnabled) throws IOException {\n    this.dirName = dirName;\n    this.directory = directory;\n    blockSize = BLOCK_SIZE;\n    this.cache = cache;\n    if (blockCacheFileTypes == null || blockCacheFileTypes.isEmpty()) {\n      this.blockCacheFileTypes = null;\n    } else {\n      this.blockCacheFileTypes = blockCacheFileTypes;\n    }\n    this.blockCacheReadEnabled = blockCacheReadEnabled;\n    if (!blockCacheReadEnabled) {\n      LOG.info(\"Block cache on read is disabled\");\n    }\n    this.blockCacheWriteEnabled = blockCacheWriteEnabled;\n    if (!blockCacheWriteEnabled) {\n      LOG.info(\"Block cache on write is disabled\");\n    }\n    if (directory.getLockFactory() != null) {\n      setLockFactory(directory.getLockFactory());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d29d666b8eaa2fe8efe1e0d42fc8e32876d7294","date":1408633409,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory#BlockDirectory(String,Directory,Cache,Set[String],boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory#BlockDirectory(String,Directory,Cache,Set[String],boolean,boolean).mjava","sourceNew":"  public BlockDirectory(String dirName, Directory directory, Cache cache,\n      Set<String> blockCacheFileTypes, boolean blockCacheReadEnabled,\n      boolean blockCacheWriteEnabled) throws IOException {\n    this(dirName, directory, cache, blockCacheFileTypes, blockCacheReadEnabled, blockCacheWriteEnabled, false);\n  }\n\n","sourceOld":"  public BlockDirectory(String dirName, Directory directory, Cache cache,\n      Set<String> blockCacheFileTypes, boolean blockCacheReadEnabled,\n      boolean blockCacheWriteEnabled) throws IOException {\n    this.dirName = dirName;\n    this.directory = directory;\n    blockSize = BLOCK_SIZE;\n    this.cache = cache;\n    if (blockCacheFileTypes == null || blockCacheFileTypes.isEmpty()) {\n      this.blockCacheFileTypes = null;\n    } else {\n      this.blockCacheFileTypes = blockCacheFileTypes;\n    }\n    this.blockCacheReadEnabled = blockCacheReadEnabled;\n    if (!blockCacheReadEnabled) {\n      LOG.info(\"Block cache on read is disabled\");\n    }\n    this.blockCacheWriteEnabled = blockCacheWriteEnabled;\n    if (!blockCacheWriteEnabled) {\n      LOG.info(\"Block cache on write is disabled\");\n    }\n    if (directory.getLockFactory() != null) {\n      setLockFactory(directory.getLockFactory());\n    }\n  }\n\n","bugFix":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a091743c8f1f29cd42a9c91a594277881e51b4","date":1408922793,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory#BlockDirectory(String,Directory,Cache,Set[String],boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory#BlockDirectory(String,Directory,Cache,Set[String],boolean,boolean).mjava","sourceNew":"  public BlockDirectory(String dirName, Directory directory, Cache cache,\n      Set<String> blockCacheFileTypes, boolean blockCacheReadEnabled,\n      boolean blockCacheWriteEnabled) throws IOException {\n    this.dirName = dirName;\n    this.directory = directory;\n    blockSize = BLOCK_SIZE;\n    this.cache = cache;\n    if (blockCacheFileTypes == null || blockCacheFileTypes.isEmpty()) {\n      this.blockCacheFileTypes = null;\n    } else {\n      this.blockCacheFileTypes = blockCacheFileTypes;\n    }\n    this.blockCacheReadEnabled = blockCacheReadEnabled;\n    if (!blockCacheReadEnabled) {\n      LOG.info(\"Block cache on read is disabled\");\n    }\n    this.blockCacheWriteEnabled = blockCacheWriteEnabled;\n    if (!blockCacheWriteEnabled) {\n      LOG.info(\"Block cache on write is disabled\");\n    }\n    if (directory.getLockFactory() != null) {\n      setLockFactory(directory.getLockFactory());\n    }\n  }\n\n","sourceOld":"  public BlockDirectory(String dirName, Directory directory, Cache cache,\n      Set<String> blockCacheFileTypes, boolean blockCacheReadEnabled,\n      boolean blockCacheWriteEnabled) throws IOException {\n    this(dirName, directory, cache, blockCacheFileTypes, blockCacheReadEnabled, blockCacheWriteEnabled, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory#BlockDirectory(String,Directory,Cache,Set[String],boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory#BlockDirectory(String,Directory,Cache,Set[String],boolean,boolean).mjava","sourceNew":"  public BlockDirectory(String dirName, Directory directory, Cache cache,\n      Set<String> blockCacheFileTypes, boolean blockCacheReadEnabled,\n      boolean blockCacheWriteEnabled) throws IOException {\n    super(directory);\n    this.dirName = dirName;\n    blockSize = BLOCK_SIZE;\n    this.cache = cache;\n    if (blockCacheFileTypes == null || blockCacheFileTypes.isEmpty()) {\n      this.blockCacheFileTypes = null;\n    } else {\n      this.blockCacheFileTypes = blockCacheFileTypes;\n    }\n    this.blockCacheReadEnabled = blockCacheReadEnabled;\n    if (!blockCacheReadEnabled) {\n      LOG.info(\"Block cache on read is disabled\");\n    }\n    this.blockCacheWriteEnabled = blockCacheWriteEnabled;\n    if (!blockCacheWriteEnabled) {\n      LOG.info(\"Block cache on write is disabled\");\n    }\n  }\n\n","sourceOld":"  public BlockDirectory(String dirName, Directory directory, Cache cache,\n      Set<String> blockCacheFileTypes, boolean blockCacheReadEnabled,\n      boolean blockCacheWriteEnabled) throws IOException {\n    this.dirName = dirName;\n    this.directory = directory;\n    blockSize = BLOCK_SIZE;\n    this.cache = cache;\n    if (blockCacheFileTypes == null || blockCacheFileTypes.isEmpty()) {\n      this.blockCacheFileTypes = null;\n    } else {\n      this.blockCacheFileTypes = blockCacheFileTypes;\n    }\n    this.blockCacheReadEnabled = blockCacheReadEnabled;\n    if (!blockCacheReadEnabled) {\n      LOG.info(\"Block cache on read is disabled\");\n    }\n    this.blockCacheWriteEnabled = blockCacheWriteEnabled;\n    if (!blockCacheWriteEnabled) {\n      LOG.info(\"Block cache on write is disabled\");\n    }\n    if (directory.getLockFactory() != null) {\n      setLockFactory(directory.getLockFactory());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f064be057b13c0e9885962e9e5bae10317371f1b","date":1458702313,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory#BlockDirectory(String,Directory,Cache,Set[String],boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory#BlockDirectory(String,Directory,Cache,Set[String],boolean,boolean).mjava","sourceNew":"  public BlockDirectory(String dirName, Directory directory, Cache cache,\n      Set<String> blockCacheFileTypes, boolean blockCacheReadEnabled,\n      boolean blockCacheWriteEnabled) throws IOException {\n    this(dirName, directory, cache, blockCacheFileTypes, blockCacheReadEnabled, blockCacheWriteEnabled, true, true);\n  }\n\n","sourceOld":"  public BlockDirectory(String dirName, Directory directory, Cache cache,\n      Set<String> blockCacheFileTypes, boolean blockCacheReadEnabled,\n      boolean blockCacheWriteEnabled) throws IOException {\n    super(directory);\n    this.dirName = dirName;\n    blockSize = BLOCK_SIZE;\n    this.cache = cache;\n    if (blockCacheFileTypes == null || blockCacheFileTypes.isEmpty()) {\n      this.blockCacheFileTypes = null;\n    } else {\n      this.blockCacheFileTypes = blockCacheFileTypes;\n    }\n    this.blockCacheReadEnabled = blockCacheReadEnabled;\n    if (!blockCacheReadEnabled) {\n      LOG.info(\"Block cache on read is disabled\");\n    }\n    this.blockCacheWriteEnabled = blockCacheWriteEnabled;\n    if (!blockCacheWriteEnabled) {\n      LOG.info(\"Block cache on write is disabled\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d29d666b8eaa2fe8efe1e0d42fc8e32876d7294":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"285cdc737de75b7cc7c284a156b20214deb67bca":["30a091743c8f1f29cd42a9c91a594277881e51b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f064be057b13c0e9885962e9e5bae10317371f1b":["285cdc737de75b7cc7c284a156b20214deb67bca"],"30a091743c8f1f29cd42a9c91a594277881e51b4":["0d29d666b8eaa2fe8efe1e0d42fc8e32876d7294"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f064be057b13c0e9885962e9e5bae10317371f1b"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["0d29d666b8eaa2fe8efe1e0d42fc8e32876d7294","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"0d29d666b8eaa2fe8efe1e0d42fc8e32876d7294":["30a091743c8f1f29cd42a9c91a594277881e51b4"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"285cdc737de75b7cc7c284a156b20214deb67bca":["f064be057b13c0e9885962e9e5bae10317371f1b"],"f064be057b13c0e9885962e9e5bae10317371f1b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30a091743c8f1f29cd42a9c91a594277881e51b4":["285cdc737de75b7cc7c284a156b20214deb67bca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}