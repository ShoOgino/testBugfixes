{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#stem(char[],int,char[],int).mjava","commits":[{"id":"c214bc712d04c78c4d434119d560d0a4dd2fce4f","date":1393216863,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#stem(char[],int,char[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Generates a list of stems for the provided word\n   *\n   * @param word Word to generate the stems for\n   * @param flags Flags from a previous stemming step that need to be cross-checked with any affixes in this recursive step\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems, or empty list if no stems are found\n   */\n  private List<Stem> stem(char word[], int length, char[] flags, int recursionDepth) {\n    List<Stem> stems = new ArrayList<Stem>();\n\n    for (int i = 0; i < length; i++) {\n      List<Affix> suffixes = dictionary.lookupSuffix(word, i, length - i);\n      if (suffixes == null) {\n        continue;\n      }\n\n      for (Affix suffix : suffixes) {\n        if (hasCrossCheckedFlag(suffix.getFlag(), flags)) {\n          int deAffixedLength = length - suffix.getAppend().length();\n          // TODO: can we do this in-place?\n          String strippedWord = new StringBuilder().append(word, 0, deAffixedLength).append(suffix.getStrip()).toString();\n\n          List<Stem> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), suffix, recursionDepth);\n          for (Stem stem : stemList) {\n            stem.addSuffix(suffix);\n          }\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    for (int i = length - 1; i >= 0; i--) {\n      List<Affix> prefixes = dictionary.lookupPrefix(word, 0, i);\n      if (prefixes == null) {\n        continue;\n      }\n\n      for (Affix prefix : prefixes) {\n        if (hasCrossCheckedFlag(prefix.getFlag(), flags)) {\n          int deAffixedStart = prefix.getAppend().length();\n          int deAffixedLength = length - deAffixedStart;\n\n          String strippedWord = new StringBuilder().append(prefix.getStrip())\n              .append(word, deAffixedStart, deAffixedLength)\n              .toString();\n\n          List<Stem> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), prefix, recursionDepth);\n          for (Stem stem : stemList) {\n            stem.addPrefix(prefix);\n          }\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c93b6a8a38d7a5058c003bb28f4c313d714ffd6","date":1393357472,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#stem(char[],int,char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#stem(char[],int,char[],int).mjava","sourceNew":"  /**\n   * Generates a list of stems for the provided word\n   *\n   * @param word Word to generate the stems for\n   * @param flags Flags from a previous stemming step that need to be cross-checked with any affixes in this recursive step\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems, or empty list if no stems are found\n   */\n  private List<Stem> stem(char word[], int length, char[] flags, int recursionDepth) {\n    List<Stem> stems = new ArrayList<Stem>();\n\n    for (int i = 0; i < length; i++) {\n      List<Affix> suffixes = dictionary.lookupSuffix(word, i, length - i);\n      if (suffixes == null) {\n        continue;\n      }\n\n      for (Affix suffix : suffixes) {\n        if (hasCrossCheckedFlag(suffix.getFlag(), flags)) {\n          int appendLength = length - i;\n          int deAffixedLength = length - appendLength;\n          // TODO: can we do this in-place?\n          String strippedWord = new StringBuilder().append(word, 0, deAffixedLength).append(suffix.getStrip()).toString();\n\n          List<Stem> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), suffix, recursionDepth);\n          for (Stem stem : stemList) {\n            stem.addSuffix(suffix);\n          }\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    for (int i = length - 1; i >= 0; i--) {\n      List<Affix> prefixes = dictionary.lookupPrefix(word, 0, i);\n      if (prefixes == null) {\n        continue;\n      }\n\n      for (Affix prefix : prefixes) {\n        if (hasCrossCheckedFlag(prefix.getFlag(), flags)) {\n          int deAffixedStart = i;\n          int deAffixedLength = length - deAffixedStart;\n\n          String strippedWord = new StringBuilder().append(prefix.getStrip())\n              .append(word, deAffixedStart, deAffixedLength)\n              .toString();\n\n          List<Stem> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), prefix, recursionDepth);\n          for (Stem stem : stemList) {\n            stem.addPrefix(prefix);\n          }\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of stems for the provided word\n   *\n   * @param word Word to generate the stems for\n   * @param flags Flags from a previous stemming step that need to be cross-checked with any affixes in this recursive step\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems, or empty list if no stems are found\n   */\n  private List<Stem> stem(char word[], int length, char[] flags, int recursionDepth) {\n    List<Stem> stems = new ArrayList<Stem>();\n\n    for (int i = 0; i < length; i++) {\n      List<Affix> suffixes = dictionary.lookupSuffix(word, i, length - i);\n      if (suffixes == null) {\n        continue;\n      }\n\n      for (Affix suffix : suffixes) {\n        if (hasCrossCheckedFlag(suffix.getFlag(), flags)) {\n          int deAffixedLength = length - suffix.getAppend().length();\n          // TODO: can we do this in-place?\n          String strippedWord = new StringBuilder().append(word, 0, deAffixedLength).append(suffix.getStrip()).toString();\n\n          List<Stem> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), suffix, recursionDepth);\n          for (Stem stem : stemList) {\n            stem.addSuffix(suffix);\n          }\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    for (int i = length - 1; i >= 0; i--) {\n      List<Affix> prefixes = dictionary.lookupPrefix(word, 0, i);\n      if (prefixes == null) {\n        continue;\n      }\n\n      for (Affix prefix : prefixes) {\n        if (hasCrossCheckedFlag(prefix.getFlag(), flags)) {\n          int deAffixedStart = prefix.getAppend().length();\n          int deAffixedLength = length - deAffixedStart;\n\n          String strippedWord = new StringBuilder().append(prefix.getStrip())\n              .append(word, deAffixedStart, deAffixedLength)\n              .toString();\n\n          List<Stem> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), prefix, recursionDepth);\n          for (Stem stem : stemList) {\n            stem.addPrefix(prefix);\n          }\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"378fdc1eb541e8a672a95d6c660c81d606145d1d","date":1393358825,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#stem(char[],int,char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#stem(char[],int,char[],int).mjava","sourceNew":"  /**\n   * Generates a list of stems for the provided word\n   *\n   * @param word Word to generate the stems for\n   * @param flags Flags from a previous stemming step that need to be cross-checked with any affixes in this recursive step\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems, or empty list if no stems are found\n   */\n  private List<CharsRef> stem(char word[], int length, char[] flags, int recursionDepth) {\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    for (int i = 0; i < length; i++) {\n      List<Affix> suffixes = dictionary.lookupSuffix(word, i, length - i);\n      if (suffixes == null) {\n        continue;\n      }\n\n      for (Affix suffix : suffixes) {\n        if (hasCrossCheckedFlag(suffix.getFlag(), flags)) {\n          int appendLength = length - i;\n          int deAffixedLength = length - appendLength;\n          // TODO: can we do this in-place?\n          String strippedWord = new StringBuilder().append(word, 0, deAffixedLength).append(suffix.getStrip()).toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), suffix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    for (int i = length - 1; i >= 0; i--) {\n      List<Affix> prefixes = dictionary.lookupPrefix(word, 0, i);\n      if (prefixes == null) {\n        continue;\n      }\n\n      for (Affix prefix : prefixes) {\n        if (hasCrossCheckedFlag(prefix.getFlag(), flags)) {\n          int deAffixedStart = i;\n          int deAffixedLength = length - deAffixedStart;\n\n          String strippedWord = new StringBuilder().append(prefix.getStrip())\n              .append(word, deAffixedStart, deAffixedLength)\n              .toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), prefix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of stems for the provided word\n   *\n   * @param word Word to generate the stems for\n   * @param flags Flags from a previous stemming step that need to be cross-checked with any affixes in this recursive step\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems, or empty list if no stems are found\n   */\n  private List<Stem> stem(char word[], int length, char[] flags, int recursionDepth) {\n    List<Stem> stems = new ArrayList<Stem>();\n\n    for (int i = 0; i < length; i++) {\n      List<Affix> suffixes = dictionary.lookupSuffix(word, i, length - i);\n      if (suffixes == null) {\n        continue;\n      }\n\n      for (Affix suffix : suffixes) {\n        if (hasCrossCheckedFlag(suffix.getFlag(), flags)) {\n          int appendLength = length - i;\n          int deAffixedLength = length - appendLength;\n          // TODO: can we do this in-place?\n          String strippedWord = new StringBuilder().append(word, 0, deAffixedLength).append(suffix.getStrip()).toString();\n\n          List<Stem> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), suffix, recursionDepth);\n          for (Stem stem : stemList) {\n            stem.addSuffix(suffix);\n          }\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    for (int i = length - 1; i >= 0; i--) {\n      List<Affix> prefixes = dictionary.lookupPrefix(word, 0, i);\n      if (prefixes == null) {\n        continue;\n      }\n\n      for (Affix prefix : prefixes) {\n        if (hasCrossCheckedFlag(prefix.getFlag(), flags)) {\n          int deAffixedStart = i;\n          int deAffixedLength = length - deAffixedStart;\n\n          String strippedWord = new StringBuilder().append(prefix.getStrip())\n              .append(word, deAffixedStart, deAffixedLength)\n              .toString();\n\n          List<Stem> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), prefix, recursionDepth);\n          for (Stem stem : stemList) {\n            stem.addPrefix(prefix);\n          }\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01af929441dec992bb546ac539c0bf40ae90965","date":1393367367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#stem(char[],int,char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#stem(char[],int,char[],int).mjava","sourceNew":"  /**\n   * Generates a list of stems for the provided word\n   *\n   * @param word Word to generate the stems for\n   * @param flags Flags from a previous stemming step that need to be cross-checked with any affixes in this recursive step\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems, or empty list if no stems are found\n   */\n  private List<CharsRef> stem(char word[], int length, char[] flags, int recursionDepth) {\n    // TODO: allow this stuff to be reused by tokenfilter\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n    BytesRef scratch = new BytesRef();\n\n    for (int i = 0; i < length; i++) {\n      List<Affix> suffixes = dictionary.lookupSuffix(word, i, length - i);\n      if (suffixes == null) {\n        continue;\n      }\n\n      for (Affix suffix : suffixes) {\n        if (hasCrossCheckedFlag(suffix.getFlag(), flags)) {\n          int appendLength = length - i;\n          int deAffixedLength = length - appendLength;\n          // TODO: can we do this in-place?\n          dictionary.stripLookup.get(suffix.getStrip(), scratch);\n          String strippedWord = new StringBuilder().append(word, 0, deAffixedLength).append(scratch.utf8ToString()).toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), suffix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    for (int i = length - 1; i >= 0; i--) {\n      List<Affix> prefixes = dictionary.lookupPrefix(word, 0, i);\n      if (prefixes == null) {\n        continue;\n      }\n\n      for (Affix prefix : prefixes) {\n        if (hasCrossCheckedFlag(prefix.getFlag(), flags)) {\n          int deAffixedStart = i;\n          int deAffixedLength = length - deAffixedStart;\n\n          dictionary.stripLookup.get(prefix.getStrip(), scratch);\n          String strippedWord = new StringBuilder().append(scratch.utf8ToString())\n              .append(word, deAffixedStart, deAffixedLength)\n              .toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), prefix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of stems for the provided word\n   *\n   * @param word Word to generate the stems for\n   * @param flags Flags from a previous stemming step that need to be cross-checked with any affixes in this recursive step\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems, or empty list if no stems are found\n   */\n  private List<CharsRef> stem(char word[], int length, char[] flags, int recursionDepth) {\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    for (int i = 0; i < length; i++) {\n      List<Affix> suffixes = dictionary.lookupSuffix(word, i, length - i);\n      if (suffixes == null) {\n        continue;\n      }\n\n      for (Affix suffix : suffixes) {\n        if (hasCrossCheckedFlag(suffix.getFlag(), flags)) {\n          int appendLength = length - i;\n          int deAffixedLength = length - appendLength;\n          // TODO: can we do this in-place?\n          String strippedWord = new StringBuilder().append(word, 0, deAffixedLength).append(suffix.getStrip()).toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), suffix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    for (int i = length - 1; i >= 0; i--) {\n      List<Affix> prefixes = dictionary.lookupPrefix(word, 0, i);\n      if (prefixes == null) {\n        continue;\n      }\n\n      for (Affix prefix : prefixes) {\n        if (hasCrossCheckedFlag(prefix.getFlag(), flags)) {\n          int deAffixedStart = i;\n          int deAffixedLength = length - deAffixedStart;\n\n          String strippedWord = new StringBuilder().append(prefix.getStrip())\n              .append(word, deAffixedStart, deAffixedLength)\n              .toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), prefix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b4d7fbed2c93fc05b24cda724ccf307e2fde3de","date":1393517961,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#stem(char[],int,char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#stem(char[],int,char[],int).mjava","sourceNew":"  /**\n   * Generates a list of stems for the provided word\n   *\n   * @param word Word to generate the stems for\n   * @param flags Flags from a previous stemming step that need to be cross-checked with any affixes in this recursive step\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems, or empty list if no stems are found\n   */\n  private List<CharsRef> stem(char word[], int length, char[] flags, int recursionDepth) {\n    // TODO: allow this stuff to be reused by tokenfilter\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    for (int i = 0; i < length; i++) {\n      List<Affix> suffixes = dictionary.lookupSuffix(word, i, length - i);\n      if (suffixes == null) {\n        continue;\n      }\n\n      for (Affix suffix : suffixes) {\n        if (hasCrossCheckedFlag(suffix.getFlag(), flags)) {\n          int appendLength = length - i;\n          int deAffixedLength = length - appendLength;\n          // TODO: can we do this in-place?\n          dictionary.stripLookup.get(suffix.getStrip(), scratch);\n          String strippedWord = new StringBuilder().append(word, 0, deAffixedLength).append(scratch.utf8ToString()).toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), suffix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    for (int i = length - 1; i >= 0; i--) {\n      List<Affix> prefixes = dictionary.lookupPrefix(word, 0, i);\n      if (prefixes == null) {\n        continue;\n      }\n\n      for (Affix prefix : prefixes) {\n        if (hasCrossCheckedFlag(prefix.getFlag(), flags)) {\n          int deAffixedStart = i;\n          int deAffixedLength = length - deAffixedStart;\n\n          dictionary.stripLookup.get(prefix.getStrip(), scratch);\n          String strippedWord = new StringBuilder().append(scratch.utf8ToString())\n              .append(word, deAffixedStart, deAffixedLength)\n              .toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), prefix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of stems for the provided word\n   *\n   * @param word Word to generate the stems for\n   * @param flags Flags from a previous stemming step that need to be cross-checked with any affixes in this recursive step\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems, or empty list if no stems are found\n   */\n  private List<CharsRef> stem(char word[], int length, char[] flags, int recursionDepth) {\n    // TODO: allow this stuff to be reused by tokenfilter\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n    BytesRef scratch = new BytesRef();\n\n    for (int i = 0; i < length; i++) {\n      List<Affix> suffixes = dictionary.lookupSuffix(word, i, length - i);\n      if (suffixes == null) {\n        continue;\n      }\n\n      for (Affix suffix : suffixes) {\n        if (hasCrossCheckedFlag(suffix.getFlag(), flags)) {\n          int appendLength = length - i;\n          int deAffixedLength = length - appendLength;\n          // TODO: can we do this in-place?\n          dictionary.stripLookup.get(suffix.getStrip(), scratch);\n          String strippedWord = new StringBuilder().append(word, 0, deAffixedLength).append(scratch.utf8ToString()).toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), suffix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    for (int i = length - 1; i >= 0; i--) {\n      List<Affix> prefixes = dictionary.lookupPrefix(word, 0, i);\n      if (prefixes == null) {\n        continue;\n      }\n\n      for (Affix prefix : prefixes) {\n        if (hasCrossCheckedFlag(prefix.getFlag(), flags)) {\n          int deAffixedStart = i;\n          int deAffixedLength = length - deAffixedStart;\n\n          dictionary.stripLookup.get(prefix.getStrip(), scratch);\n          String strippedWord = new StringBuilder().append(scratch.utf8ToString())\n              .append(word, deAffixedStart, deAffixedLength)\n              .toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), prefix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c","date":1393521555,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#stem(char[],int,char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#stem(char[],int,char[],int).mjava","sourceNew":"  /**\n   * Generates a list of stems for the provided word\n   *\n   * @param word Word to generate the stems for\n   * @param flags Flags from a previous stemming step that need to be cross-checked with any affixes in this recursive step\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems, or empty list if no stems are found\n   */\n  private List<CharsRef> stem(char word[], int length, char[] flags, int recursionDepth) {\n    // TODO: allow this stuff to be reused by tokenfilter\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    for (int i = 0; i < length; i++) {\n      List<Character> suffixes = dictionary.lookupSuffix(word, i, length - i);\n      if (suffixes == null) {\n        continue;\n      }\n\n      for (Character suffix : suffixes) {\n        affixReader.setPosition(8 * suffix);\n        char flag = (char) (affixReader.readShort() & 0xffff);\n        if (hasCrossCheckedFlag(flag, flags)) {\n          int appendLength = length - i;\n          int deAffixedLength = length - appendLength;\n          // TODO: can we do this in-place?\n          char stripOrd = (char) (affixReader.readShort() & 0xffff);\n          dictionary.stripLookup.get(stripOrd, scratch);\n          String strippedWord = new StringBuilder().append(word, 0, deAffixedLength).append(scratch.utf8ToString()).toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), suffix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    for (int i = length - 1; i >= 0; i--) {\n      List<Character> prefixes = dictionary.lookupPrefix(word, 0, i);\n      if (prefixes == null) {\n        continue;\n      }\n\n      for (Character prefix : prefixes) {\n        affixReader.setPosition(8 * prefix);\n        char flag = (char) (affixReader.readShort() & 0xffff);\n        if (hasCrossCheckedFlag(flag, flags)) {\n          int deAffixedStart = i;\n          int deAffixedLength = length - deAffixedStart;\n          char stripOrd = (char) (affixReader.readShort() & 0xffff);\n\n          dictionary.stripLookup.get(stripOrd, scratch);\n          String strippedWord = new StringBuilder().append(scratch.utf8ToString())\n              .append(word, deAffixedStart, deAffixedLength)\n              .toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), prefix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of stems for the provided word\n   *\n   * @param word Word to generate the stems for\n   * @param flags Flags from a previous stemming step that need to be cross-checked with any affixes in this recursive step\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems, or empty list if no stems are found\n   */\n  private List<CharsRef> stem(char word[], int length, char[] flags, int recursionDepth) {\n    // TODO: allow this stuff to be reused by tokenfilter\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    for (int i = 0; i < length; i++) {\n      List<Affix> suffixes = dictionary.lookupSuffix(word, i, length - i);\n      if (suffixes == null) {\n        continue;\n      }\n\n      for (Affix suffix : suffixes) {\n        if (hasCrossCheckedFlag(suffix.getFlag(), flags)) {\n          int appendLength = length - i;\n          int deAffixedLength = length - appendLength;\n          // TODO: can we do this in-place?\n          dictionary.stripLookup.get(suffix.getStrip(), scratch);\n          String strippedWord = new StringBuilder().append(word, 0, deAffixedLength).append(scratch.utf8ToString()).toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), suffix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    for (int i = length - 1; i >= 0; i--) {\n      List<Affix> prefixes = dictionary.lookupPrefix(word, 0, i);\n      if (prefixes == null) {\n        continue;\n      }\n\n      for (Affix prefix : prefixes) {\n        if (hasCrossCheckedFlag(prefix.getFlag(), flags)) {\n          int deAffixedStart = i;\n          int deAffixedLength = length - deAffixedStart;\n\n          dictionary.stripLookup.get(prefix.getStrip(), scratch);\n          String strippedWord = new StringBuilder().append(scratch.utf8ToString())\n              .append(word, deAffixedStart, deAffixedLength)\n              .toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), prefix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26c5ee01d8657497f54f46447208768acc949d51","date":1393523610,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#stem(char[],int,char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#stem(char[],int,char[],int).mjava","sourceNew":"  /**\n   * Generates a list of stems for the provided word\n   *\n   * @param word Word to generate the stems for\n   * @param flags Flags from a previous stemming step that need to be cross-checked with any affixes in this recursive step\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems, or empty list if no stems are found\n   */\n  private List<CharsRef> stem(char word[], int length, char[] flags, int recursionDepth) {\n    // TODO: allow this stuff to be reused by tokenfilter\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    for (int i = 0; i < length; i++) {\n      IntsRef suffixes = dictionary.lookupSuffix(word, i, length - i);\n      if (suffixes == null) {\n        continue;\n      }\n\n      for (int j = 0; j < suffixes.length; j++) {\n        int suffix = suffixes.ints[suffixes.offset + j];\n        affixReader.setPosition(8 * suffix);\n        char flag = (char) (affixReader.readShort() & 0xffff);\n        if (hasCrossCheckedFlag(flag, flags)) {\n          int appendLength = length - i;\n          int deAffixedLength = length - appendLength;\n          // TODO: can we do this in-place?\n          char stripOrd = (char) (affixReader.readShort() & 0xffff);\n          dictionary.stripLookup.get(stripOrd, scratch);\n          String strippedWord = new StringBuilder().append(word, 0, deAffixedLength).append(scratch.utf8ToString()).toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), suffix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    for (int i = length - 1; i >= 0; i--) {\n      IntsRef prefixes = dictionary.lookupPrefix(word, 0, i);\n      if (prefixes == null) {\n        continue;\n      }\n\n      for (int j = 0; j < prefixes.length; j++) {\n        int prefix = prefixes.ints[prefixes.offset + j];\n        affixReader.setPosition(8 * prefix);\n        char flag = (char) (affixReader.readShort() & 0xffff);\n        if (hasCrossCheckedFlag(flag, flags)) {\n          int deAffixedStart = i;\n          int deAffixedLength = length - deAffixedStart;\n          char stripOrd = (char) (affixReader.readShort() & 0xffff);\n\n          dictionary.stripLookup.get(stripOrd, scratch);\n          String strippedWord = new StringBuilder().append(scratch.utf8ToString())\n              .append(word, deAffixedStart, deAffixedLength)\n              .toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), prefix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of stems for the provided word\n   *\n   * @param word Word to generate the stems for\n   * @param flags Flags from a previous stemming step that need to be cross-checked with any affixes in this recursive step\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems, or empty list if no stems are found\n   */\n  private List<CharsRef> stem(char word[], int length, char[] flags, int recursionDepth) {\n    // TODO: allow this stuff to be reused by tokenfilter\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    for (int i = 0; i < length; i++) {\n      List<Character> suffixes = dictionary.lookupSuffix(word, i, length - i);\n      if (suffixes == null) {\n        continue;\n      }\n\n      for (Character suffix : suffixes) {\n        affixReader.setPosition(8 * suffix);\n        char flag = (char) (affixReader.readShort() & 0xffff);\n        if (hasCrossCheckedFlag(flag, flags)) {\n          int appendLength = length - i;\n          int deAffixedLength = length - appendLength;\n          // TODO: can we do this in-place?\n          char stripOrd = (char) (affixReader.readShort() & 0xffff);\n          dictionary.stripLookup.get(stripOrd, scratch);\n          String strippedWord = new StringBuilder().append(word, 0, deAffixedLength).append(scratch.utf8ToString()).toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), suffix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    for (int i = length - 1; i >= 0; i--) {\n      List<Character> prefixes = dictionary.lookupPrefix(word, 0, i);\n      if (prefixes == null) {\n        continue;\n      }\n\n      for (Character prefix : prefixes) {\n        affixReader.setPosition(8 * prefix);\n        char flag = (char) (affixReader.readShort() & 0xffff);\n        if (hasCrossCheckedFlag(flag, flags)) {\n          int deAffixedStart = i;\n          int deAffixedLength = length - deAffixedStart;\n          char stripOrd = (char) (affixReader.readShort() & 0xffff);\n\n          dictionary.stripLookup.get(stripOrd, scratch);\n          String strippedWord = new StringBuilder().append(scratch.utf8ToString())\n              .append(word, deAffixedStart, deAffixedLength)\n              .toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), prefix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#stem(char[],int,char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#stem(char[],int,char[],int).mjava","sourceNew":"  /**\n   * Generates a list of stems for the provided word\n   *\n   * @param word Word to generate the stems for\n   * @param flags Flags from a previous stemming step that need to be cross-checked with any affixes in this recursive step\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems, or empty list if no stems are found\n   */\n  private List<CharsRef> stem(char word[], int length, char[] flags, int recursionDepth) {\n    // TODO: allow this stuff to be reused by tokenfilter\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    for (int i = 0; i < length; i++) {\n      IntsRef suffixes = dictionary.lookupSuffix(word, i, length - i);\n      if (suffixes == null) {\n        continue;\n      }\n\n      for (int j = 0; j < suffixes.length; j++) {\n        int suffix = suffixes.ints[suffixes.offset + j];\n        affixReader.setPosition(8 * suffix);\n        char flag = (char) (affixReader.readShort() & 0xffff);\n        if (hasCrossCheckedFlag(flag, flags)) {\n          int appendLength = length - i;\n          int deAffixedLength = length - appendLength;\n          // TODO: can we do this in-place?\n          char stripOrd = (char) (affixReader.readShort() & 0xffff);\n          dictionary.stripLookup.get(stripOrd, scratch);\n          String strippedWord = new StringBuilder().append(word, 0, deAffixedLength).append(scratch.utf8ToString()).toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), suffix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    for (int i = length - 1; i >= 0; i--) {\n      IntsRef prefixes = dictionary.lookupPrefix(word, 0, i);\n      if (prefixes == null) {\n        continue;\n      }\n\n      for (int j = 0; j < prefixes.length; j++) {\n        int prefix = prefixes.ints[prefixes.offset + j];\n        affixReader.setPosition(8 * prefix);\n        char flag = (char) (affixReader.readShort() & 0xffff);\n        if (hasCrossCheckedFlag(flag, flags)) {\n          int deAffixedStart = i;\n          int deAffixedLength = length - deAffixedStart;\n          char stripOrd = (char) (affixReader.readShort() & 0xffff);\n\n          dictionary.stripLookup.get(stripOrd, scratch);\n          String strippedWord = new StringBuilder().append(scratch.utf8ToString())\n              .append(word, deAffixedStart, deAffixedLength)\n              .toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), prefix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of stems for the provided word\n   *\n   * @param word Word to generate the stems for\n   * @param flags Flags from a previous stemming step that need to be cross-checked with any affixes in this recursive step\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems, or empty list if no stems are found\n   */\n  private List<CharsRef> stem(char word[], int length, char[] flags, int recursionDepth) {\n    // TODO: allow this stuff to be reused by tokenfilter\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    for (int i = 0; i < length; i++) {\n      IntsRef suffixes = dictionary.lookupSuffix(word, i, length - i);\n      if (suffixes == null) {\n        continue;\n      }\n\n      for (int j = 0; j < suffixes.length; j++) {\n        int suffix = suffixes.ints[suffixes.offset + j];\n        affixReader.setPosition(8 * suffix);\n        char flag = (char) (affixReader.readShort() & 0xffff);\n        if (hasCrossCheckedFlag(flag, flags)) {\n          int appendLength = length - i;\n          int deAffixedLength = length - appendLength;\n          // TODO: can we do this in-place?\n          char stripOrd = (char) (affixReader.readShort() & 0xffff);\n          dictionary.stripLookup.get(stripOrd, scratch);\n          String strippedWord = new StringBuilder().append(word, 0, deAffixedLength).append(scratch.utf8ToString()).toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), suffix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    for (int i = length - 1; i >= 0; i--) {\n      IntsRef prefixes = dictionary.lookupPrefix(word, 0, i);\n      if (prefixes == null) {\n        continue;\n      }\n\n      for (int j = 0; j < prefixes.length; j++) {\n        int prefix = prefixes.ints[prefixes.offset + j];\n        affixReader.setPosition(8 * prefix);\n        char flag = (char) (affixReader.readShort() & 0xffff);\n        if (hasCrossCheckedFlag(flag, flags)) {\n          int deAffixedStart = i;\n          int deAffixedLength = length - deAffixedStart;\n          char stripOrd = (char) (affixReader.readShort() & 0xffff);\n\n          dictionary.stripLookup.get(stripOrd, scratch);\n          String strippedWord = new StringBuilder().append(scratch.utf8ToString())\n              .append(word, deAffixedStart, deAffixedLength)\n              .toString();\n\n          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), prefix, recursionDepth);\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f01af929441dec992bb546ac539c0bf40ae90965":["378fdc1eb541e8a672a95d6c660c81d606145d1d"],"26c5ee01d8657497f54f46447208768acc949d51":["e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["26c5ee01d8657497f54f46447208768acc949d51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c":["4b4d7fbed2c93fc05b24cda724ccf307e2fde3de"],"4b4d7fbed2c93fc05b24cda724ccf307e2fde3de":["f01af929441dec992bb546ac539c0bf40ae90965"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"378fdc1eb541e8a672a95d6c660c81d606145d1d":["5c93b6a8a38d7a5058c003bb28f4c313d714ffd6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c93b6a8a38d7a5058c003bb28f4c313d714ffd6":["c214bc712d04c78c4d434119d560d0a4dd2fce4f"]},"commit2Childs":{"f01af929441dec992bb546ac539c0bf40ae90965":["4b4d7fbed2c93fc05b24cda724ccf307e2fde3de"],"26c5ee01d8657497f54f46447208768acc949d51":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":[],"e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c":["26c5ee01d8657497f54f46447208768acc949d51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c214bc712d04c78c4d434119d560d0a4dd2fce4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b4d7fbed2c93fc05b24cda724ccf307e2fde3de":["e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["5c93b6a8a38d7a5058c003bb28f4c313d714ffd6"],"378fdc1eb541e8a672a95d6c660c81d606145d1d":["f01af929441dec992bb546ac539c0bf40ae90965"],"5c93b6a8a38d7a5058c003bb28f4c313d714ffd6":["378fdc1eb541e8a672a95d6c660c81d606145d1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}