{"path":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","commits":[{"id":"a55bf71f91aeded06b44ad1abea6666ea168b697","date":1435941127,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","pathOld":"/dev/null","sourceNew":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from mytable where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //A parse exception detected before being sent to the search engine\n      assert(tuple.getException().contains(\"Fields in the sort spec must be included in the field list\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_iff, str_s from mytable where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /select handler\n      assert(tuple.getException().contains(\"An exception has occurred on the server, refer to server log for details\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), avg(field_i) from mytable where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"undefined field:\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da9a71da64ce12a97dcfcdd912893aeb1fa2981","date":1437510515,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","sourceNew":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //A parse exception detected before being sent to the search engine\n      assert(tuple.getException().contains(\"Fields in the sort spec must be included in the field list\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /select handler\n      assert(tuple.getException().contains(\"sort param field can't be found:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"undefined field:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select str_s, count(*), blah(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"Invalid function: blah\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select str_s from collection1 where text='XXXX' group by str_s\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Group by queries must include atleast one aggregate function.\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from mytable where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //A parse exception detected before being sent to the search engine\n      assert(tuple.getException().contains(\"Fields in the sort spec must be included in the field list\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_iff, str_s from mytable where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /select handler\n      assert(tuple.getException().contains(\"An exception has occurred on the server, refer to server log for details\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), avg(field_i) from mytable where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"undefined field:\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36479872320bb00635cb97ca6757614c88562e1b","date":1444426483,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","sourceNew":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //A parse exception detected before being sent to the search engine\n      assert(tuple.getException().contains(\"Fields in the sort spec must be included in the field list\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /select handler\n      assert(tuple.getException().contains(\"sort param field can't be found:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"undefined field:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select str_s, count(*), blah(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"Invalid function: blah\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select str_s from collection1 where text='XXXX' group by str_s\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Group by queries must include atleast one aggregate function.\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //A parse exception detected before being sent to the search engine\n      assert(tuple.getException().contains(\"Fields in the sort spec must be included in the field list\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /select handler\n      assert(tuple.getException().contains(\"sort param field can't be found:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"undefined field:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select str_s, count(*), blah(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"Invalid function: blah\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select str_s from collection1 where text='XXXX' group by str_s\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Group by queries must include atleast one aggregate function.\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ec71d4701edbd96cfea97384101d13611393552","date":1444686705,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","sourceNew":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //A parse exception detected before being sent to the search engine\n      assert(tuple.getException().contains(\"Fields in the sort spec must be included in the field list\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /select handler\n      assert(tuple.getException().contains(\"sort param field can't be found:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"undefined field:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s, count(*), blah(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"Invalid function: blah\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s from collection1 where text='XXXX' group by str_s\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Group by queries must include atleast one aggregate function.\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //A parse exception detected before being sent to the search engine\n      assert(tuple.getException().contains(\"Fields in the sort spec must be included in the field list\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /select handler\n      assert(tuple.getException().contains(\"sort param field can't be found:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"undefined field:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select str_s, count(*), blah(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"Invalid function: blah\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select str_s from collection1 where text='XXXX' group by str_s\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Group by queries must include atleast one aggregate function.\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4","date":1461940050,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","sourceNew":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //A parse exception detected before being sent to the search engine\n      assert(tuple.getException().contains(\"Fields in the sort spec must be included in the field list\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /select handler\n      assert(tuple.getException().contains(\"sort param field can't be found:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"undefined field:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s, count(*), blah(field_iff), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"Invalid function: blah\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s from collection1 where text='XXXX' group by str_s\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Group by queries must include atleast one aggregate function.\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //A parse exception detected before being sent to the search engine\n      assert(tuple.getException().contains(\"Fields in the sort spec must be included in the field list\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /select handler\n      assert(tuple.getException().contains(\"sort param field can't be found:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"undefined field:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s, count(*), blah(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"Invalid function: blah\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s from collection1 where text='XXXX' group by str_s\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Group by queries must include atleast one aggregate function.\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","sourceNew":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //A parse exception detected before being sent to the search engine\n      assert(tuple.getException().contains(\"Fields in the sort spec must be included in the field list\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /select handler\n      assert(tuple.getException().contains(\"sort param field can't be found:\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"undefined field:\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s, count(*), blah(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"Invalid function: blah\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s from collection1 where text='XXXX' group by str_s\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Group by queries must include atleast one aggregate function.\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //A parse exception detected before being sent to the search engine\n      assert(tuple.getException().contains(\"Fields in the sort spec must be included in the field list\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /select handler\n      assert(tuple.getException().contains(\"sort param field can't be found:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"undefined field:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s, count(*), blah(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"Invalid function: blah\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s from collection1 where text='XXXX' group by str_s\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Group by queries must include atleast one aggregate function.\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","sourceNew":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //A parse exception detected before being sent to the search engine\n      assert(tuple.getException().contains(\"Fields in the sort spec must be included in the field list\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /select handler\n      assert(tuple.getException().contains(\"sort param field can't be found:\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"undefined field:\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s, count(*), blah(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"Invalid function: blah\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s from collection1 where text='XXXX' group by str_s\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Group by queries must include atleast one aggregate function.\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //A parse exception detected before being sent to the search engine\n      assert(tuple.getException().contains(\"Fields in the sort spec must be included in the field list\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /select handler\n      assert(tuple.getException().contains(\"sort param field can't be found:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"undefined field:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s, count(*), blah(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"Invalid function: blah\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s from collection1 where text='XXXX' group by str_s\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Group by queries must include atleast one aggregate function.\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","sourceNew":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //A parse exception detected before being sent to the search engine\n      assert(tuple.getException().contains(\"Fields in the sort spec must be included in the field list\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /select handler\n      assert(tuple.getException().contains(\"sort param field can't be found:\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"undefined field:\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s, count(*), blah(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"Invalid function: blah\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s from collection1 where text='XXXX' group by str_s\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Group by queries must include atleast one aggregate function.\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //A parse exception detected before being sent to the search engine\n      assert(tuple.getException().contains(\"Fields in the sort spec must be included in the field list\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /select handler\n      assert(tuple.getException().contains(\"sort param field can't be found:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"undefined field:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s, count(*), blah(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"Invalid function: blah\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s from collection1 where text='XXXX' group by str_s\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Group by queries must include atleast one aggregate function.\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","sourceNew":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //A parse exception detected before being sent to the search engine\n      assert(tuple.getException().contains(\"Fields in the sort spec must be included in the field list\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /select handler\n      assert(tuple.getException().contains(\"sort param field can't be found:\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"undefined field:\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s, count(*), blah(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"Invalid function: blah\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s from collection1 where text='XXXX' group by str_s\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Group by queries must include atleast one aggregate function.\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //A parse exception detected before being sent to the search engine\n      assert(tuple.getException().contains(\"Fields in the sort spec must be included in the field list\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /select handler\n      assert(tuple.getException().contains(\"sort param field can't be found:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"undefined field:\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s, count(*), blah(field_iff), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"Invalid function: blah\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select str_s from collection1 where text='XXXX' group by str_s\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Group by queries must include atleast one aggregate function.\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"612da0a0a2d5f4409da55729b9833e799f905ac5","date":1479142562,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","sourceNew":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n\n      assert(tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s, count(*), blah(field_i), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"No match found for function signature blah\"));\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //A parse exception detected before being sent to the search engine\n      assert(tuple.getException().contains(\"Fields in the sort spec must be included in the field list\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /select handler\n      assert(tuple.getException().contains(\"sort param field can't be found:\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"undefined field:\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s, count(*), blah(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"Invalid function: blah\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s from collection1 where text='XXXX' group by str_s\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Group by queries must include atleast one aggregate function.\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f20deebda1cf327549c84cb60464135abd31c71","date":1487004368,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","sourceNew":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select id, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n\n      assert(tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select str_s, count(*), blah(field_i), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"No match found for function signature blah\"));\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n\n      assert(tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s, count(*), blah(field_i), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"No match found for function signature blah\"));\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":3,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","sourceNew":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select id, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n\n      assert(tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select str_s, count(*), blah(field_i), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"No match found for function signature blah\"));\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //A parse exception detected before being sent to the search engine\n      assert(tuple.getException().contains(\"Fields in the sort spec must be included in the field list\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /select handler\n      assert(tuple.getException().contains(\"sort param field can't be found:\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"undefined field:\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s, count(*), blah(field_iff), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      //An exception not detected by the parser thrown from the /export handler\n      assert(tuple.getException().contains(\"Invalid function: blah\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s from collection1 where text='XXXX' group by str_s\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Group by queries must include atleast one aggregate function.\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c58a62203315881cce5089ef67ffee6b8a988a75","date":1544601986,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","sourceNew":"  private void testSQLException() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n    indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n    indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n    indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n    indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n    indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n    indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n    indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select id, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    Tuple tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), blah(field_i), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"No match found for function signature blah\"));\n\n  }\n\n","sourceOld":"  private void testSQLException() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select id, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      Tuple tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n\n      assert(tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select str_s, count(*), blah(field_i), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuple = getTuple(new ExceptionStream(solrStream));\n      assert(tuple.EOF);\n      assert(tuple.EXCEPTION);\n      assert(tuple.getException().contains(\"No match found for function signature blah\"));\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"600937be95b5a041815220371fa7882e73031d56","date":1551734162,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","sourceNew":"  private void testSQLException() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n    indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n    indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n    indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n    indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n    indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n    indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n    indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select id, str_s from collection1 where text='XXXX' order by field_iff desc\");\n    \n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    Tuple tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), blah(field_i), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"No match found for function signature blah\"));\n\n  }\n\n","sourceOld":"  private void testSQLException() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n    indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n    indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n    indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n    indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n    indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n    indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n    indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select id, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    Tuple tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), blah(field_i), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"No match found for function signature blah\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22191e72f6c40dec88c9b94f9bb55c7527772a47","date":1553715407,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testSQLException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","sourceNew":"  @Test\n  public void testSQLException() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\")\n        .add(id, \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\")\n        .add(id, \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(id, \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\")\n        .add(id, \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(id, \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\")\n        .add(id, \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(id, \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select id, str_s from collection1 where text_t='XXXX' order by field_iff desc\");\n\n    SolrStream solrStream = new SolrStream(baseUrl, sParams);\n    Tuple tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text_t='XXXX' order by field_iff desc\");\n\n    solrStream = new SolrStream(baseUrl, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(baseUrl, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), blah(field_i), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(baseUrl, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"No match found for function signature blah\"));\n  }\n\n","sourceOld":"  private void testSQLException() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n    indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n    indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n    indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n    indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n    indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n    indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n    indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select id, str_s from collection1 where text='XXXX' order by field_iff desc\");\n    \n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    Tuple tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), blah(field_i), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"No match found for function signature blah\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94e31112925a65b1d36f9064772080e25b5ef373","date":1553715407,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testSQLException().mjava","sourceNew":"  @Test\n  public void testSQLException() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\")\n        .add(id, \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\")\n        .add(id, \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(id, \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\")\n        .add(id, \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(id, \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\")\n        .add(id, \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(id, \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select id, str_s from collection1 where text_t='XXXX' order by field_iff desc\");\n\n    SolrStream solrStream = new SolrStream(baseUrl, sParams);\n    Tuple tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text_t='XXXX' order by field_iff desc\");\n\n    solrStream = new SolrStream(baseUrl, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(baseUrl, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), blah(field_i), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(baseUrl, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"No match found for function signature blah\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSQLException() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\")\n        .add(id, \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\")\n        .add(id, \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(id, \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\")\n        .add(id, \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(id, \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\")\n        .add(id, \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(id, \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select id, str_s from collection1 where text_t='XXXX' order by field_iff desc\");\n\n    SolrStream solrStream = new SolrStream(baseUrl, sParams);\n    Tuple tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text_t='XXXX' order by field_iff desc\");\n\n    solrStream = new SolrStream(baseUrl, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(baseUrl, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), blah(field_i), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(baseUrl, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"No match found for function signature blah\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["600937be95b5a041815220371fa7882e73031d56"],"612da0a0a2d5f4409da55729b9833e799f905ac5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["3ec71d4701edbd96cfea97384101d13611393552"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["3ec71d4701edbd96cfea97384101d13611393552","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"3ec71d4701edbd96cfea97384101d13611393552":["36479872320bb00635cb97ca6757614c88562e1b"],"36479872320bb00635cb97ca6757614c88562e1b":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4":["3ec71d4701edbd96cfea97384101d13611393552"],"600937be95b5a041815220371fa7882e73031d56":["c58a62203315881cce5089ef67ffee6b8a988a75"],"a55bf71f91aeded06b44ad1abea6666ea168b697":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["d470c8182e92b264680e34081b75e70a9f2b3c89","3f20deebda1cf327549c84cb60464135abd31c71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c58a62203315881cce5089ef67ffee6b8a988a75":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"3f20deebda1cf327549c84cb60464135abd31c71":["612da0a0a2d5f4409da55729b9833e799f905ac5"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["3ec71d4701edbd96cfea97384101d13611393552","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["94e31112925a65b1d36f9064772080e25b5ef373"],"94e31112925a65b1d36f9064772080e25b5ef373":["22191e72f6c40dec88c9b94f9bb55c7527772a47"]},"commit2Childs":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["94e31112925a65b1d36f9064772080e25b5ef373"],"612da0a0a2d5f4409da55729b9833e799f905ac5":["3f20deebda1cf327549c84cb60464135abd31c71"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["612da0a0a2d5f4409da55729b9833e799f905ac5"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"3ec71d4701edbd96cfea97384101d13611393552":["826d15444ddf61716dc768c229cd54b2c2ccce1c","d470c8182e92b264680e34081b75e70a9f2b3c89","7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4","e66a459d38c1c4a2f97128433dab546f683a9fed"],"36479872320bb00635cb97ca6757614c88562e1b":["3ec71d4701edbd96cfea97384101d13611393552"],"7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"600937be95b5a041815220371fa7882e73031d56":["22191e72f6c40dec88c9b94f9bb55c7527772a47"],"a55bf71f91aeded06b44ad1abea6666ea168b697":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["c58a62203315881cce5089ef67ffee6b8a988a75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"c58a62203315881cce5089ef67ffee6b8a988a75":["600937be95b5a041815220371fa7882e73031d56"],"3f20deebda1cf327549c84cb60464135abd31c71":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["36479872320bb00635cb97ca6757614c88562e1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"94e31112925a65b1d36f9064772080e25b5ef373":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}