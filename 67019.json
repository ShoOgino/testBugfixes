{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","sourceNew":"  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    return getReq().getSchema().getFieldTypeNoEx(fname) == null ? null : fname;\n  }\n\n","sourceOld":"  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    return getReq().getSchema().getFieldTypeNoEx(fname) == null ? null : fname;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","sourceNew":"  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    return getReq().getSchema().getFieldTypeNoEx(fname) == null ? null : fname;\n  }\n\n","sourceOld":"  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    return getReq().getSchema().getFieldTypeNoEx(fname) == null ? null : fname;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","sourceNew":"  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    return getReq().getSchema().getFieldTypeNoEx(fname) == null ? null : fname;\n  }\n\n","sourceOld":"  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    return getReq().getSchema().getFieldTypeNoEx(fname) == null ? null : fname;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"245c71087515ed70d4fb9d9484f9dcbd79eebdfc","date":1331372561,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","sourceNew":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   * @param solrParams \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = solrParams.get(\"f.\"+fname+\".qf\") != null;\n    \n    return (isInSchema || isAlias) ? fname : null;\n  }\n\n","sourceOld":"  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    return getReq().getSchema().getFieldTypeNoEx(fname) == null ? null : fname;\n  }\n\n","bugFix":null,"bugIntro":["b53e1fdeb877dfb9c1aba24b343170ae7ffe7108"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","sourceNew":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   * @param solrParams \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = solrParams.get(\"f.\"+fname+\".qf\") != null;\n    \n    return (isInSchema || isAlias) ? fname : null;\n  }\n\n","sourceOld":"  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    return getReq().getSchema().getFieldTypeNoEx(fname) == null ? null : fname;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b53e1fdeb877dfb9c1aba24b343170ae7ffe7108","date":1332297168,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","sourceNew":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   * @param solrParams \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = solrParams.get(\"f.\"+fname+\".qf\") != null;\n    boolean isMagic = (null != MagicFieldName.get(fname));\n    \n    return (isInSchema || isAlias || isMagic) ? fname : null;\n  }\n\n","sourceOld":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   * @param solrParams \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = solrParams.get(\"f.\"+fname+\".qf\") != null;\n    \n    return (isInSchema || isAlias) ? fname : null;\n  }\n\n","bugFix":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"578eff0bc5aee20ceab0bb85d2e639e93d68c952","date":1335146102,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","sourceNew":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = solrParams.get(\"f.\"+fname+\".qf\") != null;\n    boolean isMagic = (null != MagicFieldName.get(fname));\n    \n    return (isInSchema || isAlias || isMagic) ? fname : null;\n  }\n\n","sourceOld":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   * @param solrParams \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = solrParams.get(\"f.\"+fname+\".qf\") != null;\n    boolean isMagic = (null != MagicFieldName.get(fname));\n    \n    return (isInSchema || isAlias || isMagic) ? fname : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"217d69becab798f592818bc6b6006e337c04c0cd","date":1342168377,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","sourceNew":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    while ((ch=='(' || ch=='+' || ch=='-') && (pos<end)) {\n      ch = s.charAt(p++);\n      pos++;\n    }\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = solrParams.get(\"f.\"+fname+\".qf\") != null;\n    boolean isMagic = (null != MagicFieldName.get(fname));\n    \n    return (isInSchema || isAlias || isMagic) ? fname : null;\n  }\n\n","sourceOld":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = solrParams.get(\"f.\"+fname+\".qf\") != null;\n    boolean isMagic = (null != MagicFieldName.get(fname));\n    \n    return (isInSchema || isAlias || isMagic) ? fname : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","sourceNew":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    while ((ch=='(' || ch=='+' || ch=='-') && (pos<end)) {\n      ch = s.charAt(p++);\n      pos++;\n    }\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = solrParams.get(\"f.\"+fname+\".qf\") != null;\n    boolean isMagic = (null != MagicFieldName.get(fname));\n    \n    return (isInSchema || isAlias || isMagic) ? fname : null;\n  }\n\n","sourceOld":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = solrParams.get(\"f.\"+fname+\".qf\") != null;\n    boolean isMagic = (null != MagicFieldName.get(fname));\n    \n    return (isInSchema || isAlias || isMagic) ? fname : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","sourceNew":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    while ((ch=='(' || ch=='+' || ch=='-') && (pos<end)) {\n      ch = s.charAt(p++);\n      pos++;\n    }\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = solrParams.get(\"f.\"+fname+\".qf\") != null;\n    boolean isMagic = (null != MagicFieldName.get(fname));\n    \n    return (isInSchema || isAlias || isMagic) ? fname : null;\n  }\n\n","sourceOld":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = solrParams.get(\"f.\"+fname+\".qf\") != null;\n    boolean isMagic = (null != MagicFieldName.get(fname));\n    \n    return (isInSchema || isAlias || isMagic) ? fname : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#getFieldName(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","sourceNew":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    while ((ch=='(' || ch=='+' || ch=='-') && (pos<end)) {\n      ch = s.charAt(p++);\n      pos++;\n    }\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = config.solrParams.get(\"f.\"+fname+\".qf\") != null;\n    boolean isMagic = (null != MagicFieldName.get(fname));\n    \n    return (isInSchema || isAlias || isMagic) ? fname : null;\n  }\n\n","sourceOld":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    while ((ch=='(' || ch=='+' || ch=='-') && (pos<end)) {\n      ch = s.charAt(p++);\n      pos++;\n    }\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = solrParams.get(\"f.\"+fname+\".qf\") != null;\n    boolean isMagic = (null != MagicFieldName.get(fname));\n    \n    return (isInSchema || isAlias || isMagic) ? fname : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#getFieldName(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#getFieldName(String,int,int).mjava","sourceNew":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    while ((ch=='(' || ch=='+' || ch=='-') && (pos<end)) {\n      ch = s.charAt(p++);\n      pos++;\n    }\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = config.solrParams.get(\"f.\"+fname+\".qf\") != null;\n    boolean isMagic = (null != MagicFieldName.get(fname));\n    \n    return (isInSchema || isAlias || isMagic) ? fname : null;\n  }\n\n","sourceOld":"  /** \n   * returns a field name or legal field alias from the current \n   * position of the string \n   */\n  public String getFieldName(String s, int pos, int end) {\n    if (pos >= end) return null;\n    int p=pos;\n    int colon = s.indexOf(':',pos);\n    // make sure there is space after the colon, but not whitespace\n    if (colon<=pos || colon+1>=end || Character.isWhitespace(s.charAt(colon+1))) return null;\n    char ch = s.charAt(p++);\n    while ((ch=='(' || ch=='+' || ch=='-') && (pos<end)) {\n      ch = s.charAt(p++);\n      pos++;\n    }\n    if (!Character.isJavaIdentifierPart(ch)) return null;\n    while (p<colon) {\n      ch = s.charAt(p++);\n      if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) return null;\n    }\n    String fname = s.substring(pos, p);\n    boolean isInSchema = getReq().getSchema().getFieldTypeNoEx(fname) != null;\n    boolean isAlias = solrParams.get(\"f.\"+fname+\".qf\") != null;\n    boolean isMagic = (null != MagicFieldName.get(fname));\n    \n    return (isInSchema || isAlias || isMagic) ? fname : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["c26f00b574427b55127e869b935845554afde1fa","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"b53e1fdeb877dfb9c1aba24b343170ae7ffe7108":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"578eff0bc5aee20ceab0bb85d2e639e93d68c952":["b53e1fdeb877dfb9c1aba24b343170ae7ffe7108"],"aba371508186796cc6151d8223a5b4e16d02e26e":["578eff0bc5aee20ceab0bb85d2e639e93d68c952","217d69becab798f592818bc6b6006e337c04c0cd"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["578eff0bc5aee20ceab0bb85d2e639e93d68c952","217d69becab798f592818bc6b6006e337c04c0cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7e79e31f55cbb444e3023d430a340658755aa31":["217d69becab798f592818bc6b6006e337c04c0cd"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["c26f00b574427b55127e869b935845554afde1fa"],"217d69becab798f592818bc6b6006e337c04c0cd":["578eff0bc5aee20ceab0bb85d2e639e93d68c952"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["217d69becab798f592818bc6b6006e337c04c0cd","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7e79e31f55cbb444e3023d430a340658755aa31"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"c26f00b574427b55127e869b935845554afde1fa":["38e3b736c7ca086d61b7dbb841c905ee115490da","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"b53e1fdeb877dfb9c1aba24b343170ae7ffe7108":["578eff0bc5aee20ceab0bb85d2e639e93d68c952"],"578eff0bc5aee20ceab0bb85d2e639e93d68c952":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","217d69becab798f592818bc6b6006e337c04c0cd"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c7e79e31f55cbb444e3023d430a340658755aa31":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["38e3b736c7ca086d61b7dbb841c905ee115490da","b53e1fdeb877dfb9c1aba24b343170ae7ffe7108"],"217d69becab798f592818bc6b6006e337c04c0cd":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","c7e79e31f55cbb444e3023d430a340658755aa31","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}