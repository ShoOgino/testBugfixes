{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillSidewaysQuery#createWeight(IndexSearcher).mjava","commits":[{"id":"28ac5cee8abf30398e12bc016a5ce9d441831a63","date":1384691298,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        SimpleDrillSidewaysScorer.DocsEnumsAndFreq[] dims = new SimpleDrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new SimpleDrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            } else {\n              termsEnum = null;\n            }\n            lastField = field;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes())) {\n              DocsEnum docsEnum = termsEnum.docs(null, null, 0);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new SimpleDrillSidewaysScorer(this, context,\n                                             baseScorer,\n                                             drillDownCollector, dims);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            } else {\n              termsEnum = null;\n            }\n            lastField = field;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes())) {\n              DocsEnum docsEnum = termsEnum.docs(null, null, 0);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                             baseScorer,\n                                             drillDownCollector, dims);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        SimpleDrillSidewaysScorer.DocsEnumsAndFreq[] dims = new SimpleDrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new SimpleDrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            } else {\n              termsEnum = null;\n            }\n            lastField = field;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes())) {\n              DocsEnum docsEnum = termsEnum.docs(null, null, 0);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new SimpleDrillSidewaysScorer(this, context,\n                                             baseScorer,\n                                             drillDownCollector, dims);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"28ac5cee8abf30398e12bc016a5ce9d441831a63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["28ac5cee8abf30398e12bc016a5ce9d441831a63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"28ac5cee8abf30398e12bc016a5ce9d441831a63":["21d36d0db865f7b84026b447bec653469a6e66df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28ac5cee8abf30398e12bc016a5ce9d441831a63","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}