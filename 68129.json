{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Bounds#addLongitudeBound(double).mjava","commits":[{"id":"851e4197476b684154a7b65f996f535522e67400","date":1428926498,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Bounds#addLongitudeBound(double).mjava","pathOld":"/dev/null","sourceNew":"    protected void addLongitudeBound(double longitude) {\n        // If this point is within the current bounds, we're done; otherwise\n        // expand one side or the other.\n        if (leftLongitude == null && rightLongitude == null) {\n            leftLongitude = longitude;\n            rightLongitude = longitude;\n        } else {\n            // Compute whether we're to the right of the left value.  But the left value may be greater than\n            // the right value.\n            double currentLeftLongitude = leftLongitude;\n            double currentRightLongitude = rightLongitude;\n            if (currentRightLongitude < currentLeftLongitude)\n                currentRightLongitude += 2.0 * Math.PI;\n            // We have a range to look at that's going in the right way.\n            // Now, do the same trick with the computed longitude.\n            if (longitude < currentLeftLongitude)\n                longitude += 2.0 * Math.PI;\n                \n            if (longitude < currentLeftLongitude || longitude > currentRightLongitude) {\n                // Outside of current bounds.  Consider carefully how we'll expand.\n                double leftExtensionAmt;\n                double rightExtensionAmt;\n                if (longitude < currentLeftLongitude) {\n                    leftExtensionAmt = currentLeftLongitude - longitude;\n                } else {\n                    leftExtensionAmt = currentLeftLongitude + 2.0 * Math.PI - longitude;\n                }\n                if (longitude > currentRightLongitude) {\n                    rightExtensionAmt = longitude - currentRightLongitude;\n                } else {\n                    rightExtensionAmt = longitude + 2.0 * Math.PI - currentRightLongitude;\n                }\n                if (leftExtensionAmt < rightExtensionAmt) {\n                    currentLeftLongitude = leftLongitude - leftExtensionAmt;\n                    while (currentLeftLongitude <= -Math.PI) {\n                        currentLeftLongitude += 2.0 * Math.PI;\n                    }\n                    leftLongitude = currentLeftLongitude;\n                } else {\n                    currentRightLongitude = rightLongitude + rightExtensionAmt;\n                    while (currentRightLongitude > Math.PI) {\n                        currentRightLongitude -= 2.0 * Math.PI;\n                    }\n                    rightLongitude = currentRightLongitude;\n                }\n            }\n        }\n        double testRightLongitude = rightLongitude;\n        if (testRightLongitude < leftLongitude)\n            testRightLongitude += Math.PI * 2.0;\n        if (testRightLongitude - leftLongitude >= Math.PI * 2.0) {\n            noLongitudeBound = true;\n            leftLongitude = null;\n            rightLongitude = null;\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47619c5413e53c4d414c1ececa274bef0cd3c799","date":1430506189,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Bounds#addLongitudeBound(double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Bounds#addLongitudeBound(double).mjava","sourceNew":"    protected void addLongitudeBound(double longitude) {\n        // If this point is within the current bounds, we're done; otherwise\n        // expand one side or the other.\n        if (leftLongitude == null && rightLongitude == null) {\n            leftLongitude = longitude;\n            rightLongitude = longitude;\n        } else {\n            // Compute whether we're to the right of the left value.  But the left value may be greater than\n            // the right value.\n            double currentLeftLongitude = leftLongitude;\n            double currentRightLongitude = rightLongitude;\n            if (currentRightLongitude < currentLeftLongitude)\n                currentRightLongitude += 2.0 * Math.PI;\n            // We have a range to look at that's going in the right way.\n            // Now, do the same trick with the computed longitude.\n            if (longitude < currentLeftLongitude)\n                longitude += 2.0 * Math.PI;\n                \n            if (longitude < currentLeftLongitude || longitude > currentRightLongitude) {\n                // Outside of current bounds.  Consider carefully how we'll expand.\n                double leftExtensionAmt;\n                double rightExtensionAmt;\n                if (longitude < currentLeftLongitude) {\n                    leftExtensionAmt = currentLeftLongitude - longitude;\n                } else {\n                    leftExtensionAmt = currentLeftLongitude + 2.0 * Math.PI - longitude;\n                }\n                if (longitude > currentRightLongitude) {\n                    rightExtensionAmt = longitude - currentRightLongitude;\n                } else {\n                    rightExtensionAmt = longitude + 2.0 * Math.PI - currentRightLongitude;\n                }\n                if (leftExtensionAmt < rightExtensionAmt) {\n                    currentLeftLongitude = leftLongitude - leftExtensionAmt;\n                    while (currentLeftLongitude <= -Math.PI) {\n                        currentLeftLongitude += 2.0 * Math.PI;\n                    }\n                    leftLongitude = currentLeftLongitude;\n                } else {\n                    currentRightLongitude = rightLongitude + rightExtensionAmt;\n                    while (currentRightLongitude > Math.PI) {\n                        currentRightLongitude -= 2.0 * Math.PI;\n                    }\n                    rightLongitude = currentRightLongitude;\n                }\n            }\n        }\n        double testRightLongitude = rightLongitude;\n        if (testRightLongitude < leftLongitude)\n            testRightLongitude += Math.PI * 2.0;\n        if (testRightLongitude - leftLongitude >= Math.PI) {\n            noLongitudeBound = true;\n            leftLongitude = null;\n            rightLongitude = null;\n        }\n    }\n\n","sourceOld":"    protected void addLongitudeBound(double longitude) {\n        // If this point is within the current bounds, we're done; otherwise\n        // expand one side or the other.\n        if (leftLongitude == null && rightLongitude == null) {\n            leftLongitude = longitude;\n            rightLongitude = longitude;\n        } else {\n            // Compute whether we're to the right of the left value.  But the left value may be greater than\n            // the right value.\n            double currentLeftLongitude = leftLongitude;\n            double currentRightLongitude = rightLongitude;\n            if (currentRightLongitude < currentLeftLongitude)\n                currentRightLongitude += 2.0 * Math.PI;\n            // We have a range to look at that's going in the right way.\n            // Now, do the same trick with the computed longitude.\n            if (longitude < currentLeftLongitude)\n                longitude += 2.0 * Math.PI;\n                \n            if (longitude < currentLeftLongitude || longitude > currentRightLongitude) {\n                // Outside of current bounds.  Consider carefully how we'll expand.\n                double leftExtensionAmt;\n                double rightExtensionAmt;\n                if (longitude < currentLeftLongitude) {\n                    leftExtensionAmt = currentLeftLongitude - longitude;\n                } else {\n                    leftExtensionAmt = currentLeftLongitude + 2.0 * Math.PI - longitude;\n                }\n                if (longitude > currentRightLongitude) {\n                    rightExtensionAmt = longitude - currentRightLongitude;\n                } else {\n                    rightExtensionAmt = longitude + 2.0 * Math.PI - currentRightLongitude;\n                }\n                if (leftExtensionAmt < rightExtensionAmt) {\n                    currentLeftLongitude = leftLongitude - leftExtensionAmt;\n                    while (currentLeftLongitude <= -Math.PI) {\n                        currentLeftLongitude += 2.0 * Math.PI;\n                    }\n                    leftLongitude = currentLeftLongitude;\n                } else {\n                    currentRightLongitude = rightLongitude + rightExtensionAmt;\n                    while (currentRightLongitude > Math.PI) {\n                        currentRightLongitude -= 2.0 * Math.PI;\n                    }\n                    rightLongitude = currentRightLongitude;\n                }\n            }\n        }\n        double testRightLongitude = rightLongitude;\n        if (testRightLongitude < leftLongitude)\n            testRightLongitude += Math.PI * 2.0;\n        if (testRightLongitude - leftLongitude >= Math.PI * 2.0) {\n            noLongitudeBound = true;\n            leftLongitude = null;\n            rightLongitude = null;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Bounds#addLongitudeBound(double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Bounds#addLongitudeBound(double).mjava","sourceNew":"  protected void addLongitudeBound(double longitude) {\n    // If this point is within the current bounds, we're done; otherwise\n    // expand one side or the other.\n    if (leftLongitude == null && rightLongitude == null) {\n      leftLongitude = longitude;\n      rightLongitude = longitude;\n    } else {\n      // Compute whether we're to the right of the left value.  But the left value may be greater than\n      // the right value.\n      double currentLeftLongitude = leftLongitude;\n      double currentRightLongitude = rightLongitude;\n      if (currentRightLongitude < currentLeftLongitude)\n        currentRightLongitude += 2.0 * Math.PI;\n      // We have a range to look at that's going in the right way.\n      // Now, do the same trick with the computed longitude.\n      if (longitude < currentLeftLongitude)\n        longitude += 2.0 * Math.PI;\n\n      if (longitude < currentLeftLongitude || longitude > currentRightLongitude) {\n        // Outside of current bounds.  Consider carefully how we'll expand.\n        double leftExtensionAmt;\n        double rightExtensionAmt;\n        if (longitude < currentLeftLongitude) {\n          leftExtensionAmt = currentLeftLongitude - longitude;\n        } else {\n          leftExtensionAmt = currentLeftLongitude + 2.0 * Math.PI - longitude;\n        }\n        if (longitude > currentRightLongitude) {\n          rightExtensionAmt = longitude - currentRightLongitude;\n        } else {\n          rightExtensionAmt = longitude + 2.0 * Math.PI - currentRightLongitude;\n        }\n        if (leftExtensionAmt < rightExtensionAmt) {\n          currentLeftLongitude = leftLongitude - leftExtensionAmt;\n          while (currentLeftLongitude <= -Math.PI) {\n            currentLeftLongitude += 2.0 * Math.PI;\n          }\n          leftLongitude = currentLeftLongitude;\n        } else {\n          currentRightLongitude = rightLongitude + rightExtensionAmt;\n          while (currentRightLongitude > Math.PI) {\n            currentRightLongitude -= 2.0 * Math.PI;\n          }\n          rightLongitude = currentRightLongitude;\n        }\n      }\n    }\n    double testRightLongitude = rightLongitude;\n    if (testRightLongitude < leftLongitude)\n      testRightLongitude += Math.PI * 2.0;\n    if (testRightLongitude - leftLongitude >= Math.PI) {\n      noLongitudeBound = true;\n      leftLongitude = null;\n      rightLongitude = null;\n    }\n  }\n\n","sourceOld":"    protected void addLongitudeBound(double longitude) {\n        // If this point is within the current bounds, we're done; otherwise\n        // expand one side or the other.\n        if (leftLongitude == null && rightLongitude == null) {\n            leftLongitude = longitude;\n            rightLongitude = longitude;\n        } else {\n            // Compute whether we're to the right of the left value.  But the left value may be greater than\n            // the right value.\n            double currentLeftLongitude = leftLongitude;\n            double currentRightLongitude = rightLongitude;\n            if (currentRightLongitude < currentLeftLongitude)\n                currentRightLongitude += 2.0 * Math.PI;\n            // We have a range to look at that's going in the right way.\n            // Now, do the same trick with the computed longitude.\n            if (longitude < currentLeftLongitude)\n                longitude += 2.0 * Math.PI;\n                \n            if (longitude < currentLeftLongitude || longitude > currentRightLongitude) {\n                // Outside of current bounds.  Consider carefully how we'll expand.\n                double leftExtensionAmt;\n                double rightExtensionAmt;\n                if (longitude < currentLeftLongitude) {\n                    leftExtensionAmt = currentLeftLongitude - longitude;\n                } else {\n                    leftExtensionAmt = currentLeftLongitude + 2.0 * Math.PI - longitude;\n                }\n                if (longitude > currentRightLongitude) {\n                    rightExtensionAmt = longitude - currentRightLongitude;\n                } else {\n                    rightExtensionAmt = longitude + 2.0 * Math.PI - currentRightLongitude;\n                }\n                if (leftExtensionAmt < rightExtensionAmt) {\n                    currentLeftLongitude = leftLongitude - leftExtensionAmt;\n                    while (currentLeftLongitude <= -Math.PI) {\n                        currentLeftLongitude += 2.0 * Math.PI;\n                    }\n                    leftLongitude = currentLeftLongitude;\n                } else {\n                    currentRightLongitude = rightLongitude + rightExtensionAmt;\n                    while (currentRightLongitude > Math.PI) {\n                        currentRightLongitude -= 2.0 * Math.PI;\n                    }\n                    rightLongitude = currentRightLongitude;\n                }\n            }\n        }\n        double testRightLongitude = rightLongitude;\n        if (testRightLongitude < leftLongitude)\n            testRightLongitude += Math.PI * 2.0;\n        if (testRightLongitude - leftLongitude >= Math.PI) {\n            noLongitudeBound = true;\n            leftLongitude = null;\n            rightLongitude = null;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Bounds#addLongitudeBound(double).mjava","pathOld":"/dev/null","sourceNew":"  protected void addLongitudeBound(double longitude) {\n    // If this point is within the current bounds, we're done; otherwise\n    // expand one side or the other.\n    if (leftLongitude == null && rightLongitude == null) {\n      leftLongitude = longitude;\n      rightLongitude = longitude;\n    } else {\n      // Compute whether we're to the right of the left value.  But the left value may be greater than\n      // the right value.\n      double currentLeftLongitude = leftLongitude;\n      double currentRightLongitude = rightLongitude;\n      if (currentRightLongitude < currentLeftLongitude)\n        currentRightLongitude += 2.0 * Math.PI;\n      // We have a range to look at that's going in the right way.\n      // Now, do the same trick with the computed longitude.\n      if (longitude < currentLeftLongitude)\n        longitude += 2.0 * Math.PI;\n\n      if (longitude < currentLeftLongitude || longitude > currentRightLongitude) {\n        // Outside of current bounds.  Consider carefully how we'll expand.\n        double leftExtensionAmt;\n        double rightExtensionAmt;\n        if (longitude < currentLeftLongitude) {\n          leftExtensionAmt = currentLeftLongitude - longitude;\n        } else {\n          leftExtensionAmt = currentLeftLongitude + 2.0 * Math.PI - longitude;\n        }\n        if (longitude > currentRightLongitude) {\n          rightExtensionAmt = longitude - currentRightLongitude;\n        } else {\n          rightExtensionAmt = longitude + 2.0 * Math.PI - currentRightLongitude;\n        }\n        if (leftExtensionAmt < rightExtensionAmt) {\n          currentLeftLongitude = leftLongitude - leftExtensionAmt;\n          while (currentLeftLongitude <= -Math.PI) {\n            currentLeftLongitude += 2.0 * Math.PI;\n          }\n          leftLongitude = currentLeftLongitude;\n        } else {\n          currentRightLongitude = rightLongitude + rightExtensionAmt;\n          while (currentRightLongitude > Math.PI) {\n            currentRightLongitude -= 2.0 * Math.PI;\n          }\n          rightLongitude = currentRightLongitude;\n        }\n      }\n    }\n    double testRightLongitude = rightLongitude;\n    if (testRightLongitude < leftLongitude)\n      testRightLongitude += Math.PI * 2.0;\n    if (testRightLongitude - leftLongitude >= Math.PI) {\n      noLongitudeBound = true;\n      leftLongitude = null;\n      rightLongitude = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Bounds#addLongitudeBound(double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Bounds#addLongitudeBound(double).mjava","sourceNew":"  protected void addLongitudeBound(double longitude) {\n    // If this point is within the current bounds, we're done; otherwise\n    // expand one side or the other.\n    if (leftLongitude == null && rightLongitude == null) {\n      leftLongitude = longitude;\n      rightLongitude = longitude;\n    } else {\n      // Compute whether we're to the right of the left value.  But the left value may be greater than\n      // the right value.\n      double currentLeftLongitude = leftLongitude;\n      double currentRightLongitude = rightLongitude;\n      if (currentRightLongitude < currentLeftLongitude)\n        currentRightLongitude += 2.0 * Math.PI;\n      // We have a range to look at that's going in the right way.\n      // Now, do the same trick with the computed longitude.\n      if (longitude < currentLeftLongitude)\n        longitude += 2.0 * Math.PI;\n\n      if (longitude < currentLeftLongitude || longitude > currentRightLongitude) {\n        // Outside of current bounds.  Consider carefully how we'll expand.\n        double leftExtensionAmt;\n        double rightExtensionAmt;\n        if (longitude < currentLeftLongitude) {\n          leftExtensionAmt = currentLeftLongitude - longitude;\n        } else {\n          leftExtensionAmt = currentLeftLongitude + 2.0 * Math.PI - longitude;\n        }\n        if (longitude > currentRightLongitude) {\n          rightExtensionAmt = longitude - currentRightLongitude;\n        } else {\n          rightExtensionAmt = longitude + 2.0 * Math.PI - currentRightLongitude;\n        }\n        if (leftExtensionAmt < rightExtensionAmt) {\n          currentLeftLongitude = leftLongitude - leftExtensionAmt;\n          while (currentLeftLongitude <= -Math.PI) {\n            currentLeftLongitude += 2.0 * Math.PI;\n          }\n          leftLongitude = currentLeftLongitude;\n        } else {\n          currentRightLongitude = rightLongitude + rightExtensionAmt;\n          while (currentRightLongitude > Math.PI) {\n            currentRightLongitude -= 2.0 * Math.PI;\n          }\n          rightLongitude = currentRightLongitude;\n        }\n      }\n    }\n    double testRightLongitude = rightLongitude;\n    if (testRightLongitude < leftLongitude)\n      testRightLongitude += Math.PI * 2.0;\n    if (testRightLongitude - leftLongitude >= Math.PI) {\n      noLongitudeBound = true;\n      leftLongitude = null;\n      rightLongitude = null;\n    }\n  }\n\n","sourceOld":"  protected void addLongitudeBound(double longitude) {\n    // If this point is within the current bounds, we're done; otherwise\n    // expand one side or the other.\n    if (leftLongitude == null && rightLongitude == null) {\n      leftLongitude = longitude;\n      rightLongitude = longitude;\n    } else {\n      // Compute whether we're to the right of the left value.  But the left value may be greater than\n      // the right value.\n      double currentLeftLongitude = leftLongitude;\n      double currentRightLongitude = rightLongitude;\n      if (currentRightLongitude < currentLeftLongitude)\n        currentRightLongitude += 2.0 * Math.PI;\n      // We have a range to look at that's going in the right way.\n      // Now, do the same trick with the computed longitude.\n      if (longitude < currentLeftLongitude)\n        longitude += 2.0 * Math.PI;\n\n      if (longitude < currentLeftLongitude || longitude > currentRightLongitude) {\n        // Outside of current bounds.  Consider carefully how we'll expand.\n        double leftExtensionAmt;\n        double rightExtensionAmt;\n        if (longitude < currentLeftLongitude) {\n          leftExtensionAmt = currentLeftLongitude - longitude;\n        } else {\n          leftExtensionAmt = currentLeftLongitude + 2.0 * Math.PI - longitude;\n        }\n        if (longitude > currentRightLongitude) {\n          rightExtensionAmt = longitude - currentRightLongitude;\n        } else {\n          rightExtensionAmt = longitude + 2.0 * Math.PI - currentRightLongitude;\n        }\n        if (leftExtensionAmt < rightExtensionAmt) {\n          currentLeftLongitude = leftLongitude - leftExtensionAmt;\n          while (currentLeftLongitude <= -Math.PI) {\n            currentLeftLongitude += 2.0 * Math.PI;\n          }\n          leftLongitude = currentLeftLongitude;\n        } else {\n          currentRightLongitude = rightLongitude + rightExtensionAmt;\n          while (currentRightLongitude > Math.PI) {\n            currentRightLongitude -= 2.0 * Math.PI;\n          }\n          rightLongitude = currentRightLongitude;\n        }\n      }\n    }\n    double testRightLongitude = rightLongitude;\n    if (testRightLongitude < leftLongitude)\n      testRightLongitude += Math.PI * 2.0;\n    if (testRightLongitude - leftLongitude >= Math.PI) {\n      noLongitudeBound = true;\n      leftLongitude = null;\n      rightLongitude = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"47619c5413e53c4d414c1ececa274bef0cd3c799":["851e4197476b684154a7b65f996f535522e67400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["47619c5413e53c4d414c1ececa274bef0cd3c799"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2997acf74723385bd84aff1ea0b12af4aefde77"],"851e4197476b684154a7b65f996f535522e67400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"47619c5413e53c4d414c1ececa274bef0cd3c799":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","851e4197476b684154a7b65f996f535522e67400"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"851e4197476b684154a7b65f996f535522e67400":["47619c5413e53c4d414c1ececa274bef0cd3c799"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}