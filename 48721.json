{"path":"backwards/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}