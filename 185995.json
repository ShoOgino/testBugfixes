{"path":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","commits":[{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(ReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, true, true) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : similarity.coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(ReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, true, true) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : similarity.coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc63f17f42c64d6ccc8c361cfcdf074f115f770c","date":1294930751,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, ScorerContext.def().scoreDocsInOrder(true).topScorer(true)) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : similarity.coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, true, true) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : similarity.coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, ScorerContext.def().scoreDocsInOrder(true).topScorer(true)) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : similarity.coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","date":1295478199,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, ScorerContext.def().scoreDocsInOrder(true).topScorer(true)) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, ScorerContext.def().scoreDocsInOrder(true).topScorer(true)) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : similarity.coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, ScorerContext.def().scoreDocsInOrder(true).topScorer(true)) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, ScorerContext.def().scoreDocsInOrder(true).topScorer(true)) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : similarity.coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, ScorerContext.def().scoreDocsInOrder(true).topScorer(true)) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, true, true, context.reader.getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, ScorerContext.def().scoreDocsInOrder(true).topScorer(true)) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, true, true, context.reader().getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, true, true, context.reader.getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, true, true, context.reader().getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, true, true, context.reader.getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, true, true, context.reader().getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, true, true, context.reader().getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD)\n            shouldMatchCount++;\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","868da859b43505d9d2a023bfeae6dd0c795f5295"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}