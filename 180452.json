{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleFlush(DataInput,DataOutput,BufferedOutputStream).mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleFlush(DataInput,DataOutput,BufferedOutputStream).mjava","pathOld":"/dev/null","sourceNew":"  /** Flushes all indexing ops to disk and notifies all replicas that they should now copy */\n  private void handleFlush(DataInput topIn, DataOutput topOut, BufferedOutputStream bos) throws IOException {\n    Thread.currentThread().setName(\"flush\");\n\n    int[] replicaTCPPorts;\n    int[] replicaIDs;\n    synchronized (this) {\n      replicaTCPPorts = this.replicaTCPPorts;\n      replicaIDs = this.replicaIDs;\n    }\n\n    message(\"now flush; \" + replicaIDs.length + \" replicas\");\n\n    if (flushAndRefresh()) {\n      // Something did get flushed (there were indexing ops since the last flush):\n\n      // Tell caller the version before pushing to replicas, so that even if we crash after this, caller will know what version we\n      // (possibly) pushed to some replicas.  Alternatively we could make this 2 separate ops?\n      long version = getCopyStateVersion();\n      message(\"send flushed version=\" + version);\n      topOut.writeLong(version);\n      bos.flush();\n\n      // Notify current replicas:\n      for(int i=0;i<replicaIDs.length;i++) {\n        int replicaID = replicaIDs[i];\n        try (Connection c = new Connection(replicaTCPPorts[i])) {\n          c.out.writeByte(SimpleReplicaNode.CMD_NEW_NRT_POINT);\n          c.out.writeVLong(version);\n          c.out.writeInt(tcpPort);\n          c.flush();\n          // TODO: we should use multicast to broadcast files out to replicas\n          // TODO: ... replicas could copy from one another instead of just primary\n          // TODO: we could also prioritize one replica at a time?\n        } catch (Throwable t) {\n          message(\"top: failed to connect R\" + replicaID + \" for newNRTPoint; skipping: \" + t.getMessage());\n        }\n      }\n    } else {\n      // No changes flushed:\n      topOut.writeLong(-getCopyStateVersion());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec317d5d3de749e12abcc9e6f976d765638fe9e2","date":1454411397,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleFlush(DataInput,DataOutput,BufferedOutputStream).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleFlush(DataInput,DataOutput,BufferedOutputStream).mjava","sourceNew":"  /** Flushes all indexing ops to disk and notifies all replicas that they should now copy */\n  private void handleFlush(DataInput topIn, DataOutput topOut, BufferedOutputStream bos) throws IOException {\n    Thread.currentThread().setName(\"flush\");\n\n    int atLeastMarkerCount = topIn.readVInt();\n\n    int[] replicaTCPPorts;\n    int[] replicaIDs;\n    synchronized (this) {\n      replicaTCPPorts = this.replicaTCPPorts;\n      replicaIDs = this.replicaIDs;\n    }\n\n    message(\"now flush; \" + replicaIDs.length + \" replicas\");\n\n    if (flushAndRefresh()) {\n      // Something did get flushed (there were indexing ops since the last flush):\n\n      verifyAtLeastMarkerCount(atLeastMarkerCount, null);\n\n      // Tell caller the version before pushing to replicas, so that even if we crash after this, caller will know what version we\n      // (possibly) pushed to some replicas.  Alternatively we could make this 2 separate ops?\n      long version = getCopyStateVersion();\n      message(\"send flushed version=\" + version);\n      topOut.writeLong(version);\n      bos.flush();\n\n      // Notify current replicas:\n      for(int i=0;i<replicaIDs.length;i++) {\n        int replicaID = replicaIDs[i];\n        try (Connection c = new Connection(replicaTCPPorts[i])) {\n          message(\"send NEW_NRT_POINT to R\" + replicaID + \" at tcpPort=\" + replicaTCPPorts[i]);\n          c.out.writeByte(SimpleReplicaNode.CMD_NEW_NRT_POINT);\n          c.out.writeVLong(version);\n          c.out.writeInt(tcpPort);\n          c.flush();\n          // TODO: we should use multicast to broadcast files out to replicas\n          // TODO: ... replicas could copy from one another instead of just primary\n          // TODO: we could also prioritize one replica at a time?\n        } catch (Throwable t) {\n          message(\"top: failed to connect R\" + replicaID + \" for newNRTPoint; skipping: \" + t.getMessage());\n        }\n      }\n    } else {\n      // No changes flushed:\n      topOut.writeLong(-getCopyStateVersion());\n    }\n  }\n\n","sourceOld":"  /** Flushes all indexing ops to disk and notifies all replicas that they should now copy */\n  private void handleFlush(DataInput topIn, DataOutput topOut, BufferedOutputStream bos) throws IOException {\n    Thread.currentThread().setName(\"flush\");\n\n    int[] replicaTCPPorts;\n    int[] replicaIDs;\n    synchronized (this) {\n      replicaTCPPorts = this.replicaTCPPorts;\n      replicaIDs = this.replicaIDs;\n    }\n\n    message(\"now flush; \" + replicaIDs.length + \" replicas\");\n\n    if (flushAndRefresh()) {\n      // Something did get flushed (there were indexing ops since the last flush):\n\n      // Tell caller the version before pushing to replicas, so that even if we crash after this, caller will know what version we\n      // (possibly) pushed to some replicas.  Alternatively we could make this 2 separate ops?\n      long version = getCopyStateVersion();\n      message(\"send flushed version=\" + version);\n      topOut.writeLong(version);\n      bos.flush();\n\n      // Notify current replicas:\n      for(int i=0;i<replicaIDs.length;i++) {\n        int replicaID = replicaIDs[i];\n        try (Connection c = new Connection(replicaTCPPorts[i])) {\n          c.out.writeByte(SimpleReplicaNode.CMD_NEW_NRT_POINT);\n          c.out.writeVLong(version);\n          c.out.writeInt(tcpPort);\n          c.flush();\n          // TODO: we should use multicast to broadcast files out to replicas\n          // TODO: ... replicas could copy from one another instead of just primary\n          // TODO: we could also prioritize one replica at a time?\n        } catch (Throwable t) {\n          message(\"top: failed to connect R\" + replicaID + \" for newNRTPoint; skipping: \" + t.getMessage());\n        }\n      }\n    } else {\n      // No changes flushed:\n      topOut.writeLong(-getCopyStateVersion());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13ea66b549e25413e4e3057bf3492ab828899110","date":1454958424,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleFlush(DataInput,DataOutput,BufferedOutputStream).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleFlush(DataInput,DataOutput,BufferedOutputStream).mjava","sourceNew":"  /** Flushes all indexing ops to disk and notifies all replicas that they should now copy */\n  private void handleFlush(DataInput topIn, DataOutput topOut, BufferedOutputStream bos) throws IOException {\n    Thread.currentThread().setName(\"flush\");\n\n    int atLeastMarkerCount = topIn.readVInt();\n\n    int[] replicaTCPPorts;\n    int[] replicaIDs;\n    synchronized (this) {\n      replicaTCPPorts = this.replicaTCPPorts;\n      replicaIDs = this.replicaIDs;\n    }\n\n    message(\"now flush; \" + replicaIDs.length + \" replicas\");\n\n    if (flushAndRefresh()) {\n      // Something did get flushed (there were indexing ops since the last flush):\n\n      verifyAtLeastMarkerCount(atLeastMarkerCount, null);\n\n      // Tell caller the version before pushing to replicas, so that even if we crash after this, caller will know what version we\n      // (possibly) pushed to some replicas.  Alternatively we could make this 2 separate ops?\n      long version = getCopyStateVersion();\n      message(\"send flushed version=\" + version);\n      topOut.writeLong(version);\n      bos.flush();\n\n      // Notify current replicas:\n      for(int i=0;i<replicaIDs.length;i++) {\n        int replicaID = replicaIDs[i];\n        try (Connection c = new Connection(replicaTCPPorts[i])) {\n          message(\"send NEW_NRT_POINT to R\" + replicaID + \" at tcpPort=\" + replicaTCPPorts[i]);\n          c.out.writeByte(SimpleReplicaNode.CMD_NEW_NRT_POINT);\n          c.out.writeVLong(version);\n          c.out.writeVLong(primaryGen);\n          c.out.writeInt(tcpPort);\n          c.flush();\n          // TODO: we should use multicast to broadcast files out to replicas\n          // TODO: ... replicas could copy from one another instead of just primary\n          // TODO: we could also prioritize one replica at a time?\n        } catch (Throwable t) {\n          message(\"top: failed to connect R\" + replicaID + \" for newNRTPoint; skipping: \" + t.getMessage());\n        }\n      }\n    } else {\n      // No changes flushed:\n      topOut.writeLong(-getCopyStateVersion());\n    }\n  }\n\n","sourceOld":"  /** Flushes all indexing ops to disk and notifies all replicas that they should now copy */\n  private void handleFlush(DataInput topIn, DataOutput topOut, BufferedOutputStream bos) throws IOException {\n    Thread.currentThread().setName(\"flush\");\n\n    int atLeastMarkerCount = topIn.readVInt();\n\n    int[] replicaTCPPorts;\n    int[] replicaIDs;\n    synchronized (this) {\n      replicaTCPPorts = this.replicaTCPPorts;\n      replicaIDs = this.replicaIDs;\n    }\n\n    message(\"now flush; \" + replicaIDs.length + \" replicas\");\n\n    if (flushAndRefresh()) {\n      // Something did get flushed (there were indexing ops since the last flush):\n\n      verifyAtLeastMarkerCount(atLeastMarkerCount, null);\n\n      // Tell caller the version before pushing to replicas, so that even if we crash after this, caller will know what version we\n      // (possibly) pushed to some replicas.  Alternatively we could make this 2 separate ops?\n      long version = getCopyStateVersion();\n      message(\"send flushed version=\" + version);\n      topOut.writeLong(version);\n      bos.flush();\n\n      // Notify current replicas:\n      for(int i=0;i<replicaIDs.length;i++) {\n        int replicaID = replicaIDs[i];\n        try (Connection c = new Connection(replicaTCPPorts[i])) {\n          message(\"send NEW_NRT_POINT to R\" + replicaID + \" at tcpPort=\" + replicaTCPPorts[i]);\n          c.out.writeByte(SimpleReplicaNode.CMD_NEW_NRT_POINT);\n          c.out.writeVLong(version);\n          c.out.writeInt(tcpPort);\n          c.flush();\n          // TODO: we should use multicast to broadcast files out to replicas\n          // TODO: ... replicas could copy from one another instead of just primary\n          // TODO: we could also prioritize one replica at a time?\n        } catch (Throwable t) {\n          message(\"top: failed to connect R\" + replicaID + \" for newNRTPoint; skipping: \" + t.getMessage());\n        }\n      }\n    } else {\n      // No changes flushed:\n      topOut.writeLong(-getCopyStateVersion());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b0febf62c2d9baeee7db38998d9197700ccbab9","date":1454958476,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleFlush(DataInput,DataOutput,BufferedOutputStream).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleFlush(DataInput,DataOutput,BufferedOutputStream).mjava","sourceNew":"  /** Flushes all indexing ops to disk and notifies all replicas that they should now copy */\n  private void handleFlush(DataInput topIn, DataOutput topOut, BufferedOutputStream bos) throws IOException {\n    Thread.currentThread().setName(\"flush\");\n\n    int atLeastMarkerCount = topIn.readVInt();\n\n    int[] replicaTCPPorts;\n    int[] replicaIDs;\n    synchronized (this) {\n      replicaTCPPorts = this.replicaTCPPorts;\n      replicaIDs = this.replicaIDs;\n    }\n\n    message(\"now flush; \" + replicaIDs.length + \" replicas\");\n\n    if (flushAndRefresh()) {\n      // Something did get flushed (there were indexing ops since the last flush):\n\n      verifyAtLeastMarkerCount(atLeastMarkerCount, null);\n\n      // Tell caller the version before pushing to replicas, so that even if we crash after this, caller will know what version we\n      // (possibly) pushed to some replicas.  Alternatively we could make this 2 separate ops?\n      long version = getCopyStateVersion();\n      message(\"send flushed version=\" + version);\n      topOut.writeLong(version);\n      bos.flush();\n\n      // Notify current replicas:\n      for(int i=0;i<replicaIDs.length;i++) {\n        int replicaID = replicaIDs[i];\n        try (Connection c = new Connection(replicaTCPPorts[i])) {\n          message(\"send NEW_NRT_POINT to R\" + replicaID + \" at tcpPort=\" + replicaTCPPorts[i]);\n          c.out.writeByte(SimpleReplicaNode.CMD_NEW_NRT_POINT);\n          c.out.writeVLong(version);\n          c.out.writeVLong(primaryGen);\n          c.out.writeInt(tcpPort);\n          c.flush();\n          // TODO: we should use multicast to broadcast files out to replicas\n          // TODO: ... replicas could copy from one another instead of just primary\n          // TODO: we could also prioritize one replica at a time?\n        } catch (Throwable t) {\n          message(\"top: failed to connect R\" + replicaID + \" for newNRTPoint; skipping: \" + t.getMessage());\n        }\n      }\n    } else {\n      // No changes flushed:\n      topOut.writeLong(-getCopyStateVersion());\n    }\n  }\n\n","sourceOld":"  /** Flushes all indexing ops to disk and notifies all replicas that they should now copy */\n  private void handleFlush(DataInput topIn, DataOutput topOut, BufferedOutputStream bos) throws IOException {\n    Thread.currentThread().setName(\"flush\");\n\n    int atLeastMarkerCount = topIn.readVInt();\n\n    int[] replicaTCPPorts;\n    int[] replicaIDs;\n    synchronized (this) {\n      replicaTCPPorts = this.replicaTCPPorts;\n      replicaIDs = this.replicaIDs;\n    }\n\n    message(\"now flush; \" + replicaIDs.length + \" replicas\");\n\n    if (flushAndRefresh()) {\n      // Something did get flushed (there were indexing ops since the last flush):\n\n      verifyAtLeastMarkerCount(atLeastMarkerCount, null);\n\n      // Tell caller the version before pushing to replicas, so that even if we crash after this, caller will know what version we\n      // (possibly) pushed to some replicas.  Alternatively we could make this 2 separate ops?\n      long version = getCopyStateVersion();\n      message(\"send flushed version=\" + version);\n      topOut.writeLong(version);\n      bos.flush();\n\n      // Notify current replicas:\n      for(int i=0;i<replicaIDs.length;i++) {\n        int replicaID = replicaIDs[i];\n        try (Connection c = new Connection(replicaTCPPorts[i])) {\n          message(\"send NEW_NRT_POINT to R\" + replicaID + \" at tcpPort=\" + replicaTCPPorts[i]);\n          c.out.writeByte(SimpleReplicaNode.CMD_NEW_NRT_POINT);\n          c.out.writeVLong(version);\n          c.out.writeInt(tcpPort);\n          c.flush();\n          // TODO: we should use multicast to broadcast files out to replicas\n          // TODO: ... replicas could copy from one another instead of just primary\n          // TODO: we could also prioritize one replica at a time?\n        } catch (Throwable t) {\n          message(\"top: failed to connect R\" + replicaID + \" for newNRTPoint; skipping: \" + t.getMessage());\n        }\n      }\n    } else {\n      // No changes flushed:\n      topOut.writeLong(-getCopyStateVersion());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3d0d2e502d016d967c45c0c972ace4d02885e07","date":1454976917,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleFlush(DataInput,DataOutput,BufferedOutputStream).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleFlush(DataInput,DataOutput,BufferedOutputStream).mjava","sourceNew":"  /** Flushes all indexing ops to disk and notifies all replicas that they should now copy */\n  private void handleFlush(DataInput topIn, DataOutput topOut, BufferedOutputStream bos) throws IOException {\n    Thread.currentThread().setName(\"flush\");\n\n    int atLeastMarkerCount = topIn.readVInt();\n\n    int[] replicaTCPPorts;\n    int[] replicaIDs;\n    synchronized (this) {\n      replicaTCPPorts = this.replicaTCPPorts;\n      replicaIDs = this.replicaIDs;\n    }\n\n    message(\"now flush; \" + replicaIDs.length + \" replicas\");\n\n    if (flushAndRefresh()) {\n      // Something did get flushed (there were indexing ops since the last flush):\n\n      verifyAtLeastMarkerCount(atLeastMarkerCount, null);\n \n     // Tell caller the version before pushing to replicas, so that even if we crash after this, caller will know what version we\n      // (possibly) pushed to some replicas.  Alternatively we could make this 2 separate ops?\n      long version = getCopyStateVersion();\n      message(\"send flushed version=\" + version);\n      topOut.writeLong(version);\n      bos.flush();\n\n      // Notify current replicas:\n      for(int i=0;i<replicaIDs.length;i++) {\n        int replicaID = replicaIDs[i];\n        try (Connection c = new Connection(replicaTCPPorts[i])) {\n          message(\"send NEW_NRT_POINT to R\" + replicaID + \" at tcpPort=\" + replicaTCPPorts[i]);\n          c.out.writeByte(SimpleReplicaNode.CMD_NEW_NRT_POINT);\n          c.out.writeVLong(version);\n          c.out.writeVLong(primaryGen);\n          c.out.writeInt(tcpPort);\n          c.flush();\n          // TODO: we should use multicast to broadcast files out to replicas\n          // TODO: ... replicas could copy from one another instead of just primary\n          // TODO: we could also prioritize one replica at a time?\n        } catch (Throwable t) {\n          message(\"top: failed to connect R\" + replicaID + \" for newNRTPoint; skipping: \" + t.getMessage());\n        }\n      }\n    } else {\n      // No changes flushed:\n      topOut.writeLong(-getCopyStateVersion());\n    }\n  }\n\n","sourceOld":"  /** Flushes all indexing ops to disk and notifies all replicas that they should now copy */\n  private void handleFlush(DataInput topIn, DataOutput topOut, BufferedOutputStream bos) throws IOException {\n    Thread.currentThread().setName(\"flush\");\n\n    int atLeastMarkerCount = topIn.readVInt();\n\n    int[] replicaTCPPorts;\n    int[] replicaIDs;\n    synchronized (this) {\n      replicaTCPPorts = this.replicaTCPPorts;\n      replicaIDs = this.replicaIDs;\n    }\n\n    message(\"now flush; \" + replicaIDs.length + \" replicas\");\n\n    if (flushAndRefresh()) {\n      // Something did get flushed (there were indexing ops since the last flush):\n\n      verifyAtLeastMarkerCount(atLeastMarkerCount, null);\n\n      // Tell caller the version before pushing to replicas, so that even if we crash after this, caller will know what version we\n      // (possibly) pushed to some replicas.  Alternatively we could make this 2 separate ops?\n      long version = getCopyStateVersion();\n      message(\"send flushed version=\" + version);\n      topOut.writeLong(version);\n      bos.flush();\n\n      // Notify current replicas:\n      for(int i=0;i<replicaIDs.length;i++) {\n        int replicaID = replicaIDs[i];\n        try (Connection c = new Connection(replicaTCPPorts[i])) {\n          message(\"send NEW_NRT_POINT to R\" + replicaID + \" at tcpPort=\" + replicaTCPPorts[i]);\n          c.out.writeByte(SimpleReplicaNode.CMD_NEW_NRT_POINT);\n          c.out.writeVLong(version);\n          c.out.writeVLong(primaryGen);\n          c.out.writeInt(tcpPort);\n          c.flush();\n          // TODO: we should use multicast to broadcast files out to replicas\n          // TODO: ... replicas could copy from one another instead of just primary\n          // TODO: we could also prioritize one replica at a time?\n        } catch (Throwable t) {\n          message(\"top: failed to connect R\" + replicaID + \" for newNRTPoint; skipping: \" + t.getMessage());\n        }\n      }\n    } else {\n      // No changes flushed:\n      topOut.writeLong(-getCopyStateVersion());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33b6213064c76adb293e52f03a3eb1528c5b1858","date":1454977105,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleFlush(DataInput,DataOutput,BufferedOutputStream).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleFlush(DataInput,DataOutput,BufferedOutputStream).mjava","sourceNew":"  /** Flushes all indexing ops to disk and notifies all replicas that they should now copy */\n  private void handleFlush(DataInput topIn, DataOutput topOut, BufferedOutputStream bos) throws IOException {\n    Thread.currentThread().setName(\"flush\");\n\n    int atLeastMarkerCount = topIn.readVInt();\n\n    int[] replicaTCPPorts;\n    int[] replicaIDs;\n    synchronized (this) {\n      replicaTCPPorts = this.replicaTCPPorts;\n      replicaIDs = this.replicaIDs;\n    }\n\n    message(\"now flush; \" + replicaIDs.length + \" replicas\");\n\n    if (flushAndRefresh()) {\n      // Something did get flushed (there were indexing ops since the last flush):\n\n      verifyAtLeastMarkerCount(atLeastMarkerCount, null);\n \n     // Tell caller the version before pushing to replicas, so that even if we crash after this, caller will know what version we\n      // (possibly) pushed to some replicas.  Alternatively we could make this 2 separate ops?\n      long version = getCopyStateVersion();\n      message(\"send flushed version=\" + version);\n      topOut.writeLong(version);\n      bos.flush();\n\n      // Notify current replicas:\n      for(int i=0;i<replicaIDs.length;i++) {\n        int replicaID = replicaIDs[i];\n        try (Connection c = new Connection(replicaTCPPorts[i])) {\n          message(\"send NEW_NRT_POINT to R\" + replicaID + \" at tcpPort=\" + replicaTCPPorts[i]);\n          c.out.writeByte(SimpleReplicaNode.CMD_NEW_NRT_POINT);\n          c.out.writeVLong(version);\n          c.out.writeVLong(primaryGen);\n          c.out.writeInt(tcpPort);\n          c.flush();\n          // TODO: we should use multicast to broadcast files out to replicas\n          // TODO: ... replicas could copy from one another instead of just primary\n          // TODO: we could also prioritize one replica at a time?\n        } catch (Throwable t) {\n          message(\"top: failed to connect R\" + replicaID + \" for newNRTPoint; skipping: \" + t.getMessage());\n        }\n      }\n    } else {\n      // No changes flushed:\n      topOut.writeLong(-getCopyStateVersion());\n    }\n  }\n\n","sourceOld":"  /** Flushes all indexing ops to disk and notifies all replicas that they should now copy */\n  private void handleFlush(DataInput topIn, DataOutput topOut, BufferedOutputStream bos) throws IOException {\n    Thread.currentThread().setName(\"flush\");\n\n    int atLeastMarkerCount = topIn.readVInt();\n\n    int[] replicaTCPPorts;\n    int[] replicaIDs;\n    synchronized (this) {\n      replicaTCPPorts = this.replicaTCPPorts;\n      replicaIDs = this.replicaIDs;\n    }\n\n    message(\"now flush; \" + replicaIDs.length + \" replicas\");\n\n    if (flushAndRefresh()) {\n      // Something did get flushed (there were indexing ops since the last flush):\n\n      verifyAtLeastMarkerCount(atLeastMarkerCount, null);\n\n      // Tell caller the version before pushing to replicas, so that even if we crash after this, caller will know what version we\n      // (possibly) pushed to some replicas.  Alternatively we could make this 2 separate ops?\n      long version = getCopyStateVersion();\n      message(\"send flushed version=\" + version);\n      topOut.writeLong(version);\n      bos.flush();\n\n      // Notify current replicas:\n      for(int i=0;i<replicaIDs.length;i++) {\n        int replicaID = replicaIDs[i];\n        try (Connection c = new Connection(replicaTCPPorts[i])) {\n          message(\"send NEW_NRT_POINT to R\" + replicaID + \" at tcpPort=\" + replicaTCPPorts[i]);\n          c.out.writeByte(SimpleReplicaNode.CMD_NEW_NRT_POINT);\n          c.out.writeVLong(version);\n          c.out.writeVLong(primaryGen);\n          c.out.writeInt(tcpPort);\n          c.flush();\n          // TODO: we should use multicast to broadcast files out to replicas\n          // TODO: ... replicas could copy from one another instead of just primary\n          // TODO: we could also prioritize one replica at a time?\n        } catch (Throwable t) {\n          message(\"top: failed to connect R\" + replicaID + \" for newNRTPoint; skipping: \" + t.getMessage());\n        }\n      }\n    } else {\n      // No changes flushed:\n      topOut.writeLong(-getCopyStateVersion());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleFlush(DataInput,DataOutput,BufferedOutputStream).mjava","pathOld":"/dev/null","sourceNew":"  /** Flushes all indexing ops to disk and notifies all replicas that they should now copy */\n  private void handleFlush(DataInput topIn, DataOutput topOut, BufferedOutputStream bos) throws IOException {\n    Thread.currentThread().setName(\"flush\");\n\n    int atLeastMarkerCount = topIn.readVInt();\n\n    int[] replicaTCPPorts;\n    int[] replicaIDs;\n    synchronized (this) {\n      replicaTCPPorts = this.replicaTCPPorts;\n      replicaIDs = this.replicaIDs;\n    }\n\n    message(\"now flush; \" + replicaIDs.length + \" replicas\");\n\n    if (flushAndRefresh()) {\n      // Something did get flushed (there were indexing ops since the last flush):\n\n      verifyAtLeastMarkerCount(atLeastMarkerCount, null);\n \n     // Tell caller the version before pushing to replicas, so that even if we crash after this, caller will know what version we\n      // (possibly) pushed to some replicas.  Alternatively we could make this 2 separate ops?\n      long version = getCopyStateVersion();\n      message(\"send flushed version=\" + version);\n      topOut.writeLong(version);\n      bos.flush();\n\n      // Notify current replicas:\n      for(int i=0;i<replicaIDs.length;i++) {\n        int replicaID = replicaIDs[i];\n        try (Connection c = new Connection(replicaTCPPorts[i])) {\n          message(\"send NEW_NRT_POINT to R\" + replicaID + \" at tcpPort=\" + replicaTCPPorts[i]);\n          c.out.writeByte(SimpleReplicaNode.CMD_NEW_NRT_POINT);\n          c.out.writeVLong(version);\n          c.out.writeVLong(primaryGen);\n          c.out.writeInt(tcpPort);\n          c.flush();\n          // TODO: we should use multicast to broadcast files out to replicas\n          // TODO: ... replicas could copy from one another instead of just primary\n          // TODO: we could also prioritize one replica at a time?\n        } catch (Throwable t) {\n          message(\"top: failed to connect R\" + replicaID + \" for newNRTPoint; skipping: \" + t.getMessage());\n        }\n      }\n    } else {\n      // No changes flushed:\n      topOut.writeLong(-getCopyStateVersion());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b0febf62c2d9baeee7db38998d9197700ccbab9":["ec317d5d3de749e12abcc9e6f976d765638fe9e2","13ea66b549e25413e4e3057bf3492ab828899110"],"ec317d5d3de749e12abcc9e6f976d765638fe9e2":["0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"c3d0d2e502d016d967c45c0c972ace4d02885e07":["1b0febf62c2d9baeee7db38998d9197700ccbab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33b6213064c76adb293e52f03a3eb1528c5b1858"],"33b6213064c76adb293e52f03a3eb1528c5b1858":["13ea66b549e25413e4e3057bf3492ab828899110","c3d0d2e502d016d967c45c0c972ace4d02885e07"],"13ea66b549e25413e4e3057bf3492ab828899110":["ec317d5d3de749e12abcc9e6f976d765638fe9e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1b0febf62c2d9baeee7db38998d9197700ccbab9":["c3d0d2e502d016d967c45c0c972ace4d02885e07"],"ec317d5d3de749e12abcc9e6f976d765638fe9e2":["1b0febf62c2d9baeee7db38998d9197700ccbab9","13ea66b549e25413e4e3057bf3492ab828899110"],"c3d0d2e502d016d967c45c0c972ace4d02885e07":["33b6213064c76adb293e52f03a3eb1528c5b1858"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33b6213064c76adb293e52f03a3eb1528c5b1858":["68496c2200e559fb7802f7575427b7a482659afb"],"13ea66b549e25413e4e3057bf3492ab828899110":["1b0febf62c2d9baeee7db38998d9197700ccbab9","33b6213064c76adb293e52f03a3eb1528c5b1858"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["ec317d5d3de749e12abcc9e6f976d765638fe9e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}