{"path":"src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,String,String,String,boolean,boolean).mjava","commits":[{"id":"187477cb6c13b4aad8f8b30e1a2a0c18907acce9","date":1236863546,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/schema/FieldType#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   *@param field        the name of the field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n*      @return a Query instance to perform range search according to given parameters\n   *\n   * @see org.apache.solr.search.SolrQueryParser#getRangeQuery(String, String, String, boolean)\n   */\n  public Query getRangeQuery(QParser parser, String field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    RangeQuery rangeQuery = new RangeQuery(\n            field,\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n    rangeQuery.setConstantScoreRewrite(true);\n    return rangeQuery;\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param field        the name of the field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *\n   * @return a Query instance to perform range search according to given parameters\n   *\n   * @see org.apache.solr.search.SolrQueryParser#getRangeQuery(String, String, String, boolean)\n   */\n  public Query getRangeQuery(String field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    RangeQuery rangeQuery = new RangeQuery(\n            field,\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n    rangeQuery.setConstantScoreRewrite(true);\n    return rangeQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e77721aaf23393f6ea7926045ae6f8efea0ce8e","date":1247678464,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the name of the field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n*    @return a Query instance to perform range search according to given parameters\n   *\n   * @see org.apache.solr.search.SolrQueryParser#getRangeQuery(String, String, String, boolean)\n   */\n  public Query getRangeQuery(QParser parser, String field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return new TermRangeQuery(\n            field,\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   *@param field        the name of the field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n*      @return a Query instance to perform range search according to given parameters\n   *\n   * @see org.apache.solr.search.SolrQueryParser#getRangeQuery(String, String, String, boolean)\n   */\n  public Query getRangeQuery(QParser parser, String field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    RangeQuery rangeQuery = new RangeQuery(\n            field,\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n    rangeQuery.setConstantScoreRewrite(true);\n    return rangeQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c","date":1249333745,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n*    @return a Query instance to perform range search according to given parameters\n   *\n   * @see org.apache.solr.search.SolrQueryParser#getRangeQuery(String, String, String, boolean)\n   */\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return new TermRangeQuery(\n            field.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   * @param field        the name of the field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n*    @return a Query instance to perform range search according to given parameters\n   *\n   * @see org.apache.solr.search.SolrQueryParser#getRangeQuery(String, String, String, boolean)\n   */\n  public Query getRangeQuery(QParser parser, String field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // constant score mode is now enabled per default\n    return new TermRangeQuery(\n            field,\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1e77721aaf23393f6ea7926045ae6f8efea0ce8e":["187477cb6c13b4aad8f8b30e1a2a0c18907acce9"],"187477cb6c13b4aad8f8b30e1a2a0c18907acce9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["1e77721aaf23393f6ea7926045ae6f8efea0ce8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e77721aaf23393f6ea7926045ae6f8efea0ce8e":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"187477cb6c13b4aad8f8b30e1a2a0c18907acce9":["1e77721aaf23393f6ea7926045ae6f8efea0ce8e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["187477cb6c13b4aad8f8b30e1a2a0c18907acce9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}