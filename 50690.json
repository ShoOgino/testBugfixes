{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","sourceNew":"    <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = getFieldValue(sdoc);\n      if(val == null) {\n        return;\n      }\n      if(isArray && !isContainedInMap){\n        List list = null;\n        if(val.getClass().isArray()){\n          set(obj,val);\n          return;\n        } else if (val instanceof List) {\n          list = (List) val;\n        } else{\n          list = new ArrayList();\n          list.add(val);\n        }\n        set(obj, list.toArray((Object[]) Array.newInstance(type,list.size())));        \n      } else if(isList && !isContainedInMap){\n        if (!(val instanceof List)) {\n          ArrayList list = new ArrayList();\n          list.add(val);\n          val =  list;\n        }\n        set(obj, val);\n      } else if(isContainedInMap){\n        if (val instanceof Map) {\n          set(obj,  val);\n        }\n      } else {\n        set(obj, val);\n      }\n\n    }\n\n","sourceOld":"    <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = getFieldValue(sdoc);\n      if(val == null) {\n        return;\n      }\n      if(isArray && !isContainedInMap){\n        List list = null;\n        if(val.getClass().isArray()){\n          set(obj,val);\n          return;\n        } else if (val instanceof List) {\n          list = (List) val;\n        } else{\n          list = new ArrayList();\n          list.add(val);\n        }\n        set(obj, list.toArray((Object[]) Array.newInstance(type,list.size())));        \n      } else if(isList && !isContainedInMap){\n        if (!(val instanceof List)) {\n          ArrayList list = new ArrayList();\n          list.add(val);\n          val =  list;\n        }\n        set(obj, val);\n      } else if(isContainedInMap){\n        if (val instanceof Map) {\n          set(obj,  val);\n        }\n      } else {\n        set(obj, val);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","sourceNew":"    <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = getFieldValue(sdoc);\n      if(val == null) {\n        return;\n      }\n      if(isArray && !isContainedInMap){\n        List list = null;\n        if(val.getClass().isArray()){\n          set(obj,val);\n          return;\n        } else if (val instanceof List) {\n          list = (List) val;\n        } else{\n          list = new ArrayList();\n          list.add(val);\n        }\n        set(obj, list.toArray((Object[]) Array.newInstance(type,list.size())));        \n      } else if(isList && !isContainedInMap){\n        if (!(val instanceof List)) {\n          ArrayList list = new ArrayList();\n          list.add(val);\n          val =  list;\n        }\n        set(obj, val);\n      } else if(isContainedInMap){\n        if (val instanceof Map) {\n          set(obj,  val);\n        }\n      } else {\n        set(obj, val);\n      }\n\n    }\n\n","sourceOld":"    <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = getFieldValue(sdoc);\n      if(val == null) {\n        return;\n      }\n      if(isArray && !isContainedInMap){\n        List list = null;\n        if(val.getClass().isArray()){\n          set(obj,val);\n          return;\n        } else if (val instanceof List) {\n          list = (List) val;\n        } else{\n          list = new ArrayList();\n          list.add(val);\n        }\n        set(obj, list.toArray((Object[]) Array.newInstance(type,list.size())));        \n      } else if(isList && !isContainedInMap){\n        if (!(val instanceof List)) {\n          ArrayList list = new ArrayList();\n          list.add(val);\n          val =  list;\n        }\n        set(obj, val);\n      } else if(isContainedInMap){\n        if (val instanceof Map) {\n          set(obj,  val);\n        }\n      } else {\n        set(obj, val);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","sourceNew":"    <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = getFieldValue(sdoc);\n      if(val == null) {\n        return;\n      }\n      if(isArray && !isContainedInMap){\n        List list = null;\n        if(val.getClass().isArray()){\n          set(obj,val);\n          return;\n        } else if (val instanceof List) {\n          list = (List) val;\n        } else{\n          list = new ArrayList();\n          list.add(val);\n        }\n        set(obj, list.toArray((Object[]) Array.newInstance(type,list.size())));        \n      } else if(isList && !isContainedInMap){\n        if (!(val instanceof List)) {\n          ArrayList list = new ArrayList();\n          list.add(val);\n          val =  list;\n        }\n        set(obj, val);\n      } else if(isContainedInMap){\n        if (val instanceof Map) {\n          set(obj,  val);\n        }\n      } else {\n        set(obj, val);\n      }\n\n    }\n\n","sourceOld":"    <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = getFieldValue(sdoc);\n      if(val == null) {\n        return;\n      }\n      if(isArray && !isContainedInMap){\n        List list = null;\n        if(val.getClass().isArray()){\n          set(obj,val);\n          return;\n        } else if (val instanceof List) {\n          list = (List) val;\n        } else{\n          list = new ArrayList();\n          list.add(val);\n        }\n        set(obj, list.toArray((Object[]) Array.newInstance(type,list.size())));        \n      } else if(isList && !isContainedInMap){\n        if (!(val instanceof List)) {\n          ArrayList list = new ArrayList();\n          list.add(val);\n          val =  list;\n        }\n        set(obj, val);\n      } else if(isContainedInMap){\n        if (val instanceof Map) {\n          set(obj,  val);\n        }\n      } else {\n        set(obj, val);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7622cbc3a8e5ea4d57a67d99978449606ec484bc","date":1313559942,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","sourceNew":"    <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = getFieldValue(sdoc);\n      if(val == null) {\n        return;\n      }\n\n      if (isArray && !isContainedInMap) {\n        List list;\n        if (val.getClass().isArray()) {\n          set(obj,val);\n          return;\n        } else if (val instanceof List) {\n          list = (List) val;\n        } else {\n          list = new ArrayList();\n          list.add(val);\n        }\n        set(obj, list.toArray((Object[]) Array.newInstance(type,list.size())));\n      } else if (isList && !isContainedInMap) {\n        if (!(val instanceof List)) {\n          List list = new ArrayList();\n          list.add(val);\n          val =  list;\n        }\n        set(obj, val);\n      } else if (isContainedInMap) {\n        if (val instanceof Map) {\n          set(obj,  val);\n        }\n      } else {\n        set(obj, val);\n      }\n\n    }\n\n","sourceOld":"    <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = getFieldValue(sdoc);\n      if(val == null) {\n        return;\n      }\n      if(isArray && !isContainedInMap){\n        List list = null;\n        if(val.getClass().isArray()){\n          set(obj,val);\n          return;\n        } else if (val instanceof List) {\n          list = (List) val;\n        } else{\n          list = new ArrayList();\n          list.add(val);\n        }\n        set(obj, list.toArray((Object[]) Array.newInstance(type,list.size())));        \n      } else if(isList && !isContainedInMap){\n        if (!(val instanceof List)) {\n          ArrayList list = new ArrayList();\n          list.add(val);\n          val =  list;\n        }\n        set(obj, val);\n      } else if(isContainedInMap){\n        if (val instanceof Map) {\n          set(obj,  val);\n        }\n      } else {\n        set(obj, val);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35b292579499b440bb87b86a6b832d91a6f6dc2e","date":1313656166,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","sourceNew":"    <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = getFieldValue(sdoc);\n      if(val == null) {\n        return;\n      }\n\n      if (isArray && !isContainedInMap) {\n        List list;\n        if (val.getClass().isArray()) {\n          set(obj, val);\n          return;\n        } else if (val instanceof List) {\n          list = (List) val;\n        } else {\n          list = new ArrayList();\n          list.add(val);\n        }\n        set(obj, list.toArray((Object[]) Array.newInstance(type, list.size())));\n      } else if (isList && !isContainedInMap) {\n        if (!(val instanceof List)) {\n          List list = new ArrayList();\n          list.add(val);\n          val =  list;\n        }\n        set(obj, val);\n      } else if (isContainedInMap) {\n        if (val instanceof Map) {\n          set(obj,  val);\n        }\n      } else {\n        set(obj, val);\n      }\n\n    }\n\n","sourceOld":"    <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = getFieldValue(sdoc);\n      if(val == null) {\n        return;\n      }\n\n      if (isArray && !isContainedInMap) {\n        List list;\n        if (val.getClass().isArray()) {\n          set(obj,val);\n          return;\n        } else if (val instanceof List) {\n          list = (List) val;\n        } else {\n          list = new ArrayList();\n          list.add(val);\n        }\n        set(obj, list.toArray((Object[]) Array.newInstance(type,list.size())));\n      } else if (isList && !isContainedInMap) {\n        if (!(val instanceof List)) {\n          List list = new ArrayList();\n          list.add(val);\n          val =  list;\n        }\n        set(obj, val);\n      } else if (isContainedInMap) {\n        if (val instanceof Map) {\n          set(obj,  val);\n        }\n      } else {\n        set(obj, val);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = getFieldValue(sdoc);\n      if(val == null) {\n        return;\n      }\n\n      if (isArray && !isContainedInMap) {\n        List list;\n        if (val.getClass().isArray()) {\n          set(obj, val);\n          return;\n        } else if (val instanceof List) {\n          list = (List) val;\n        } else {\n          list = new ArrayList();\n          list.add(val);\n        }\n        set(obj, list.toArray((Object[]) Array.newInstance(type, list.size())));\n      } else if (isList && !isContainedInMap) {\n        if (!(val instanceof List)) {\n          List list = new ArrayList();\n          list.add(val);\n          val =  list;\n        }\n        set(obj, val);\n      } else if (isContainedInMap) {\n        if (val instanceof Map) {\n          set(obj,  val);\n        }\n      } else {\n        set(obj, val);\n      }\n\n    }\n\n","sourceOld":"    <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = getFieldValue(sdoc);\n      if(val == null) {\n        return;\n      }\n\n      if (isArray && !isContainedInMap) {\n        List list;\n        if (val.getClass().isArray()) {\n          set(obj, val);\n          return;\n        } else if (val instanceof List) {\n          list = (List) val;\n        } else {\n          list = new ArrayList();\n          list.add(val);\n        }\n        set(obj, list.toArray((Object[]) Array.newInstance(type, list.size())));\n      } else if (isList && !isContainedInMap) {\n        if (!(val instanceof List)) {\n          List list = new ArrayList();\n          list.add(val);\n          val =  list;\n        }\n        set(obj, val);\n      } else if (isContainedInMap) {\n        if (val instanceof Map) {\n          set(obj,  val);\n        }\n      } else {\n        set(obj, val);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35b292579499b440bb87b86a6b832d91a6f6dc2e":["7622cbc3a8e5ea4d57a67d99978449606ec484bc"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["35b292579499b440bb87b86a6b832d91a6f6dc2e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7622cbc3a8e5ea4d57a67d99978449606ec484bc":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"]},"commit2Childs":{"35b292579499b440bb87b86a6b832d91a6f6dc2e":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7622cbc3a8e5ea4d57a67d99978449606ec484bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7622cbc3a8e5ea4d57a67d99978449606ec484bc":["35b292579499b440bb87b86a6b832d91a6f6dc2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}