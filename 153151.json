{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#rectangle(PlanetModel,Constraints).mjava","commits":[{"id":"f215583134d6d66410e3c48b32282e3eb9d5fcde","date":1505141283,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#rectangle(PlanetModel,Constraints).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Method that returns a random generated a GeoBBox under given constraints. Returns\n   * NULL if it cannot build the GeoBBox under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoBBox.\n   */\n  private GeoBBox rectangle(PlanetModel planetModel, Constraints constraints) {\n\n    int iterations = 0;\n    while (iterations < MAX_SHAPE_ITERATIONS) {\n      iterations++;\n      final GeoPoint point1 = randomGeoPoint(planetModel, constraints);\n      if (point1 == null){\n        continue;\n      }\n      final GeoPoint point2 = randomGeoPoint(planetModel, constraints);\n      if (point2 == null){\n        continue;\n      }\n\n      double minLat = Math.min(point1.getLatitude(), point2.getLatitude());\n      double maxLat = Math.max(point1.getLatitude(), point2.getLatitude());\n      double minLon = Math.min(point1.getLongitude(), point2.getLongitude());\n      double maxLon = Math.max(point1.getLongitude(), point2.getLongitude());\n\n      try {\n        GeoBBox bbox = GeoBBoxFactory.makeGeoBBox(planetModel, maxLat, minLat, minLon, maxLon);\n        if (!constraints.valid(bbox)) {\n          continue;\n        }\n        return bbox;\n      } catch (IllegalArgumentException e) {\n        continue;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#rectangle(PlanetModel,Constraints).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#rectangle(PlanetModel,Constraints).mjava","sourceNew":"  /**\n   * Method that returns a random generated a GeoBBox under given constraints. Returns\n   * NULL if it cannot build the GeoBBox under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoBBox.\n   */\n  private GeoBBox rectangle(PlanetModel planetModel, Constraints constraints) {\n\n    int iterations = 0;\n    while (iterations < MAX_SHAPE_ITERATIONS) {\n      iterations++;\n      final GeoPoint point1 = randomGeoPoint(planetModel, constraints);\n      if (point1 == null){\n        continue;\n      }\n      final GeoPoint point2 = randomGeoPoint(planetModel, constraints);\n      if (point2 == null){\n        continue;\n      }\n\n      double minLat = Math.min(point1.getLatitude(), point2.getLatitude());\n      double maxLat = Math.max(point1.getLatitude(), point2.getLatitude());\n      double minLon = Math.min(point1.getLongitude(), point2.getLongitude());\n      double maxLon = Math.max(point1.getLongitude(), point2.getLongitude());\n\n      try {\n        GeoBBox bbox = GeoBBoxFactory.makeGeoBBox(planetModel, maxLat, minLat, minLon, maxLon);\n        if (!constraints.valid(bbox)) {\n          continue;\n        }\n        return bbox;\n      } catch (IllegalArgumentException e) {\n        continue;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Method that returns a random generated a GeoBBox under given constraints. Returns\n   * NULL if it cannot build the GeoBBox under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoBBox.\n   */\n  private GeoBBox rectangle(PlanetModel planetModel, Constraints constraints) {\n\n    int iterations = 0;\n    while (iterations < MAX_SHAPE_ITERATIONS) {\n      iterations++;\n      final GeoPoint point1 = randomGeoPoint(planetModel, constraints);\n      if (point1 == null){\n        continue;\n      }\n      final GeoPoint point2 = randomGeoPoint(planetModel, constraints);\n      if (point2 == null){\n        continue;\n      }\n\n      double minLat = Math.min(point1.getLatitude(), point2.getLatitude());\n      double maxLat = Math.max(point1.getLatitude(), point2.getLatitude());\n      double minLon = Math.min(point1.getLongitude(), point2.getLongitude());\n      double maxLon = Math.max(point1.getLongitude(), point2.getLongitude());\n\n      try {\n        GeoBBox bbox = GeoBBoxFactory.makeGeoBBox(planetModel, maxLat, minLat, minLon, maxLon);\n        if (!constraints.valid(bbox)) {\n          continue;\n        }\n        return bbox;\n      } catch (IllegalArgumentException e) {\n        continue;\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f215583134d6d66410e3c48b32282e3eb9d5fcde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f215583134d6d66410e3c48b32282e3eb9d5fcde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f215583134d6d66410e3c48b32282e3eb9d5fcde"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["685bd38810c206c93e9058f3c2cfa9827c086c27","f215583134d6d66410e3c48b32282e3eb9d5fcde"],"f215583134d6d66410e3c48b32282e3eb9d5fcde":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}