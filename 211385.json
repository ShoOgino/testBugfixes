{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#mergeBucket(SimpleOrderedMap,FacetMerger.Context).mjava","commits":[{"id":"bbadd4a153af2e36785fa5c682db5321cec90789","date":1432157571,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#mergeBucket(SimpleOrderedMap,FacetMerger.Context).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#mergeBucket(SimpleOrderedMap).mjava","sourceNew":"  public void mergeBucket(SimpleOrderedMap bucket, FacetMerger.Context mcontext) {\n    // todo: for refinements, we want to recurse, but not re-do stats for intermediate buckets\n\n    // drive merging off the received bucket?\n    for (int i=0; i<bucket.size(); i++) {\n      String key = bucket.getName(i);\n      Object val = bucket.getVal(i);\n      if (\"count\".equals(key)) {\n        count += ((Number)val).longValue();\n        continue;\n      }\n      if (\"val\".equals(key)) {\n        // this is taken care of at a higher level...\n        continue;\n      }\n\n      FacetMerger merger = getMerger(key, val);\n\n      if (merger != null) {\n        merger.merge( val , mcontext );\n      }\n    }\n  }\n\n","sourceOld":"  public void mergeBucket(SimpleOrderedMap bucket) {\n    // todo: for refinements, we want to recurse, but not re-do stats for intermediate buckets\n\n    // drive merging off the received bucket?\n    for (int i=0; i<bucket.size(); i++) {\n      String key = bucket.getName(i);\n      Object val = bucket.getVal(i);\n      if (\"count\".equals(key)) {\n        count += ((Number)val).longValue();\n        continue;\n      }\n      if (\"val\".equals(key)) {\n        // this is taken care of at a higher level...\n        continue;\n      }\n\n      FacetMerger merger = getMerger(key, val);\n\n      if (merger != null) {\n        merger.merge( val );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1931d98b40b01d5075753b197c2461a5c2652689","date":1471971289,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#mergeBucket(SimpleOrderedMap,FacetMerger.Context).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#mergeBucket(SimpleOrderedMap,FacetMerger.Context).mjava","sourceNew":"  public void mergeBucket(SimpleOrderedMap bucket, FacetMerger.Context mcontext) {\n    // todo: for refinements, we want to recurse, but not re-do stats for intermediate buckets\n\n    mcontext.setShardFlag(bucketNumber);\n\n    // drive merging off the received bucket?\n    for (int i=0; i<bucket.size(); i++) {\n      String key = bucket.getName(i);\n      Object val = bucket.getVal(i);\n      if (\"count\".equals(key)) {\n        count += ((Number)val).longValue();\n        continue;\n      }\n      if (\"val\".equals(key)) {\n        // this is taken care of at a higher level...\n        continue;\n      }\n\n      FacetMerger merger = getMerger(key, val);\n\n      if (merger != null) {\n        merger.merge( val , mcontext );\n      }\n    }\n  }\n\n","sourceOld":"  public void mergeBucket(SimpleOrderedMap bucket, FacetMerger.Context mcontext) {\n    // todo: for refinements, we want to recurse, but not re-do stats for intermediate buckets\n\n    // drive merging off the received bucket?\n    for (int i=0; i<bucket.size(); i++) {\n      String key = bucket.getName(i);\n      Object val = bucket.getVal(i);\n      if (\"count\".equals(key)) {\n        count += ((Number)val).longValue();\n        continue;\n      }\n      if (\"val\".equals(key)) {\n        // this is taken care of at a higher level...\n        continue;\n      }\n\n      FacetMerger merger = getMerger(key, val);\n\n      if (merger != null) {\n        merger.merge( val , mcontext );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#mergeBucket(SimpleOrderedMap,FacetMerger.Context).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#mergeBucket(SimpleOrderedMap,FacetMerger.Context).mjava","sourceNew":"  public void mergeBucket(SimpleOrderedMap bucket, FacetMerger.Context mcontext) {\n    // todo: for refinements, we want to recurse, but not re-do stats for intermediate buckets\n\n    mcontext.setShardFlag(bucketNumber);\n\n    // drive merging off the received bucket?\n    for (int i=0; i<bucket.size(); i++) {\n      String key = bucket.getName(i);\n      Object val = bucket.getVal(i);\n      if (\"count\".equals(key)) {\n        count += ((Number)val).longValue();\n        continue;\n      }\n      if (\"val\".equals(key)) {\n        // this is taken care of at a higher level...\n        continue;\n      }\n\n      FacetMerger merger = getMerger(key, val);\n\n      if (merger != null) {\n        merger.merge( val , mcontext );\n      }\n    }\n  }\n\n","sourceOld":"  public void mergeBucket(SimpleOrderedMap bucket, FacetMerger.Context mcontext) {\n    // todo: for refinements, we want to recurse, but not re-do stats for intermediate buckets\n\n    // drive merging off the received bucket?\n    for (int i=0; i<bucket.size(); i++) {\n      String key = bucket.getName(i);\n      Object val = bucket.getVal(i);\n      if (\"count\".equals(key)) {\n        count += ((Number)val).longValue();\n        continue;\n      }\n      if (\"val\".equals(key)) {\n        // this is taken care of at a higher level...\n        continue;\n      }\n\n      FacetMerger merger = getMerger(key, val);\n\n      if (merger != null) {\n        merger.merge( val , mcontext );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb32b2f58e1f02551c5abe6c272b58a970e0bf29","date":1476220416,"type":5,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket#mergeBucket(SimpleOrderedMap,FacetMerger.Context).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#mergeBucket(SimpleOrderedMap,FacetMerger.Context).mjava","sourceNew":"  public void mergeBucket(SimpleOrderedMap bucket, FacetMerger.Context mcontext) {\n    // todo: for refinements, we want to recurse, but not re-do stats for intermediate buckets\n\n    mcontext.setShardFlag(bucketNumber);\n\n    // drive merging off the received bucket?\n    for (int i=0; i<bucket.size(); i++) {\n      String key = bucket.getName(i);\n      Object val = bucket.getVal(i);\n      if (\"count\".equals(key)) {\n        count += ((Number)val).longValue();\n        continue;\n      }\n      if (\"val\".equals(key)) {\n        // this is taken care of at a higher level...\n        continue;\n      }\n\n      FacetMerger merger = getMerger(key, val);\n\n      if (merger != null) {\n        merger.merge( val , mcontext );\n      }\n    }\n  }\n\n","sourceOld":"  public void mergeBucket(SimpleOrderedMap bucket, FacetMerger.Context mcontext) {\n    // todo: for refinements, we want to recurse, but not re-do stats for intermediate buckets\n\n    mcontext.setShardFlag(bucketNumber);\n\n    // drive merging off the received bucket?\n    for (int i=0; i<bucket.size(); i++) {\n      String key = bucket.getName(i);\n      Object val = bucket.getVal(i);\n      if (\"count\".equals(key)) {\n        count += ((Number)val).longValue();\n        continue;\n      }\n      if (\"val\".equals(key)) {\n        // this is taken care of at a higher level...\n        continue;\n      }\n\n      FacetMerger merger = getMerger(key, val);\n\n      if (merger != null) {\n        merger.merge( val , mcontext );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#mergeBucket(SimpleOrderedMap,FacetMerger.Context).mjava","sourceNew":null,"sourceOld":"  public void mergeBucket(SimpleOrderedMap bucket, FacetMerger.Context mcontext) {\n    // todo: for refinements, we want to recurse, but not re-do stats for intermediate buckets\n\n    // drive merging off the received bucket?\n    for (int i=0; i<bucket.size(); i++) {\n      String key = bucket.getName(i);\n      Object val = bucket.getVal(i);\n      if (\"count\".equals(key)) {\n        count += ((Number)val).longValue();\n        continue;\n      }\n      if (\"val\".equals(key)) {\n        // this is taken care of at a higher level...\n        continue;\n      }\n\n      FacetMerger merger = getMerger(key, val);\n\n      if (merger != null) {\n        merger.merge( val , mcontext );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bbadd4a153af2e36785fa5c682db5321cec90789":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1931d98b40b01d5075753b197c2461a5c2652689":["bbadd4a153af2e36785fa5c682db5321cec90789"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["bbadd4a153af2e36785fa5c682db5321cec90789","1931d98b40b01d5075753b197c2461a5c2652689"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bbadd4a153af2e36785fa5c682db5321cec90789","fb32b2f58e1f02551c5abe6c272b58a970e0bf29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb32b2f58e1f02551c5abe6c272b58a970e0bf29"],"fb32b2f58e1f02551c5abe6c272b58a970e0bf29":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"]},"commit2Childs":{"bbadd4a153af2e36785fa5c682db5321cec90789":["1931d98b40b01d5075753b197c2461a5c2652689","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bbadd4a153af2e36785fa5c682db5321cec90789"],"1931d98b40b01d5075753b197c2461a5c2652689":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["fb32b2f58e1f02551c5abe6c272b58a970e0bf29"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"fb32b2f58e1f02551c5abe6c272b58a970e0bf29":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}