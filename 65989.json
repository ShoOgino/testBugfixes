{"path":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsProcessor#addField(int,StorableField,FieldInfo).mjava","commits":[{"id":"127981e5a1e1d1425c5fdc816ceacf753ca70ee4","date":1354205321,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsProcessor#addField(int,StorableField,FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    if (field.fieldType().stored()) {\n      if (numStoredFields == storedFields.length) {\n        int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n        StorableField[] newArray = new StorableField[newSize];\n        System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n        storedFields = newArray;\n      \n        FieldInfo[] newInfoArray = new FieldInfo[newSize];\n        System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n        fieldInfos = newInfoArray;\n      }\n\n      storedFields[numStoredFields] = field;\n      fieldInfos[numStoredFields] = fieldInfo;\n      numStoredFields++;\n\n      assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsProcessor#addField(int,StorableField,FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    if (field.fieldType().stored()) {\n      if (numStoredFields == storedFields.length) {\n        int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n        StorableField[] newArray = new StorableField[newSize];\n        System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n        storedFields = newArray;\n      \n        FieldInfo[] newInfoArray = new FieldInfo[newSize];\n        System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n        fieldInfos = newInfoArray;\n      }\n\n      storedFields[numStoredFields] = field;\n      fieldInfos[numStoredFields] = fieldInfo;\n      numStoredFields++;\n\n      assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsProcessor#addField(int,StorableField,FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    if (field.fieldType().stored()) {\n      if (numStoredFields == storedFields.length) {\n        int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n        StorableField[] newArray = new StorableField[newSize];\n        System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n        storedFields = newArray;\n      \n        FieldInfo[] newInfoArray = new FieldInfo[newSize];\n        System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n        fieldInfos = newInfoArray;\n      }\n\n      storedFields[numStoredFields] = field;\n      fieldInfos[numStoredFields] = fieldInfo;\n      numStoredFields++;\n\n      assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsProcessor#addField(int,StorableField,FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    if (field.fieldType().stored()) {\n      if (numStoredFields == storedFields.length) {\n        int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n        StorableField[] newArray = new StorableField[newSize];\n        System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n        storedFields = newArray;\n      \n        FieldInfo[] newInfoArray = new FieldInfo[newSize];\n        System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n        fieldInfos = newInfoArray;\n      }\n\n      storedFields[numStoredFields] = field;\n      fieldInfos[numStoredFields] = fieldInfo;\n      numStoredFields++;\n\n      assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsProcessor#addField(int,StorableField,FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    if (field.fieldType().stored()) {\n      if (numStoredFields == storedFields.length) {\n        int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n        StorableField[] newArray = new StorableField[newSize];\n        System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n        storedFields = newArray;\n      \n        FieldInfo[] newInfoArray = new FieldInfo[newSize];\n        System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n        fieldInfos = newInfoArray;\n      }\n\n      storedFields[numStoredFields] = field;\n      fieldInfos[numStoredFields] = fieldInfo;\n      numStoredFields++;\n\n      assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["d4d69c535930b5cce125cff868d40f6373dc27d4","52c7e49be259508735752fba88085255014a6ecf"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["d4d69c535930b5cce125cff868d40f6373dc27d4","3394716f52b34ab259ad5247e7595d9f9db6e935"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","127981e5a1e1d1425c5fdc816ceacf753ca70ee4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"52c7e49be259508735752fba88085255014a6ecf":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3394716f52b34ab259ad5247e7595d9f9db6e935"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","52c7e49be259508735752fba88085255014a6ecf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","127981e5a1e1d1425c5fdc816ceacf753ca70ee4"],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}