{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#getNumBuckets(Policy.Session,Clause).mjava","commits":[{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#getNumBuckets(Policy.Session,Clause).mjava","pathOld":"/dev/null","sourceNew":"  private int getNumBuckets(Policy.Session session, Clause clause) {\n    if (clause.getTag().getOperand() == Operand.IN) {\n      return ((Collection) clause.getTag().val).size();\n    } else if (clause.getTag().getOperand() == Operand.WILDCARD) {\n      if (clause.getTag().varType == Type.NODE) return session.matrix.size();\n      Set uniqueVals = new HashSet();\n      for (Row matrix : session.matrix) {\n        Object val = matrix.getVal(clause.getTag().name);\n        if (val != null) uniqueVals.add(val);\n      }\n      return uniqueVals.size();\n    } else {\n      throw new IllegalArgumentException(\"Invalid operand for the tag in  \" + clause);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#getNumBuckets(Policy.Session,Clause).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#getNumBuckets(Policy.Session,Clause).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private int getNumBuckets(Policy.Session session, Clause clause) {\n    if (clause.getTag().getOperand() == Operand.IN) {\n      return ((Collection) clause.getTag().val).size();\n    } else if (clause.getTag().getOperand() == Operand.WILDCARD) {\n      if (clause.getTag().varType == Type.NODE) return session.matrix.size();\n      Set uniqueVals = new HashSet();\n      for (Row matrix : session.matrix) {\n        Object val = matrix.getVal(clause.getTag().name);\n        if (val != null) uniqueVals.add(val);\n      }\n      return uniqueVals.size();\n    } else {\n      throw new IllegalArgumentException(\"Invalid operand for the tag in  \" + clause);\n    }\n\n  }\n\n","sourceOld":"  private int getNumBuckets(Policy.Session session, Clause clause) {\n    if (clause.getTag().getOperand() == Operand.IN) {\n      return ((Collection) clause.getTag().val).size();\n    } else if (clause.getTag().getOperand() == Operand.WILDCARD) {\n      if (clause.getTag().varType == Type.NODE) return session.matrix.size();\n      Set uniqueVals = new HashSet();\n      for (Row matrix : session.matrix) {\n        Object val = matrix.getVal(clause.getTag().name);\n        if (val != null) uniqueVals.add(val);\n      }\n      return uniqueVals.size();\n    } else {\n      throw new IllegalArgumentException(\"Invalid operand for the tag in  \" + clause);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#getNumBuckets(Policy.Session,Clause).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private int getNumBuckets(Policy.Session session, Clause clause) {\n    if (clause.getTag().getOperand() == Operand.IN) {\n      return ((Collection) clause.getTag().val).size();\n    } else if (clause.getTag().getOperand() == Operand.WILDCARD) {\n      if (clause.getTag().varType == Type.NODE) return session.matrix.size();\n      Set uniqueVals = new HashSet();\n      for (Row matrix : session.matrix) {\n        Object val = matrix.getVal(clause.getTag().name);\n        if (val != null) uniqueVals.add(val);\n      }\n      return uniqueVals.size();\n    } else {\n      throw new IllegalArgumentException(\"Invalid operand for the tag in  \" + clause);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["527adea7ce767368d7317339023e18e39702132e"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"527adea7ce767368d7317339023e18e39702132e":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["527adea7ce767368d7317339023e18e39702132e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"527adea7ce767368d7317339023e18e39702132e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}