{"path":"lucene/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#getTermsEnum(Terms).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#getTermsEnum(Terms).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: should this take startTerm too?  This way\n  // Terms.intersect could forward to this method if type !=\n  // NORMAL:\n  public TermsEnum getTermsEnum(Terms terms) throws IOException {\n    switch(type) {\n    case NONE:\n      return TermsEnum.EMPTY;\n    case ALL:\n      return terms.iterator();\n    case SINGLE:\n      return new SingleTermsEnum(terms.iterator(), term);\n    case PREFIX:\n      // TODO: this is very likely faster than .intersect,\n      // but we should test and maybe cutover\n      return new PrefixTermsEnum(terms.iterator(), term);\n    case NORMAL:\n      return terms.intersect(this, null);\n    default:\n      // unreachable\n      throw new RuntimeException(\"unhandled case\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#getTermsEnum(Terms).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#getTermsEnum(Terms).mjava","sourceNew":"  // TODO: should this take startTerm too?  This way\n  // Terms.intersect could forward to this method if type !=\n  // NORMAL:\n  public TermsEnum getTermsEnum(Terms terms) throws IOException {\n    switch(type) {\n    case NONE:\n      return TermsEnum.EMPTY;\n    case ALL:\n      return terms.iterator(null);\n    case SINGLE:\n      return new SingleTermsEnum(terms.iterator(null), term);\n    case PREFIX:\n      // TODO: this is very likely faster than .intersect,\n      // but we should test and maybe cutover\n      return new PrefixTermsEnum(terms.iterator(null), term);\n    case NORMAL:\n      return terms.intersect(this, null);\n    default:\n      // unreachable\n      throw new RuntimeException(\"unhandled case\");\n    }\n  }\n\n","sourceOld":"  // TODO: should this take startTerm too?  This way\n  // Terms.intersect could forward to this method if type !=\n  // NORMAL:\n  public TermsEnum getTermsEnum(Terms terms) throws IOException {\n    switch(type) {\n    case NONE:\n      return TermsEnum.EMPTY;\n    case ALL:\n      return terms.iterator();\n    case SINGLE:\n      return new SingleTermsEnum(terms.iterator(), term);\n    case PREFIX:\n      // TODO: this is very likely faster than .intersect,\n      // but we should test and maybe cutover\n      return new PrefixTermsEnum(terms.iterator(), term);\n    case NORMAL:\n      return terms.intersect(this, null);\n    default:\n      // unreachable\n      throw new RuntimeException(\"unhandled case\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#getTermsEnum(Terms).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#getTermsEnum(Terms).mjava","sourceNew":"  // TODO: should this take startTerm too?  This way\n  // Terms.intersect could forward to this method if type !=\n  // NORMAL:\n  public TermsEnum getTermsEnum(Terms terms) throws IOException {\n    switch(type) {\n    case NONE:\n      return TermsEnum.EMPTY;\n    case ALL:\n      return terms.iterator(null);\n    case SINGLE:\n      return new SingleTermsEnum(terms.iterator(null), term);\n    case PREFIX:\n      // TODO: this is very likely faster than .intersect,\n      // but we should test and maybe cutover\n      return new PrefixTermsEnum(terms.iterator(null), term);\n    case NORMAL:\n      return terms.intersect(this, null);\n    default:\n      // unreachable\n      throw new RuntimeException(\"unhandled case\");\n    }\n  }\n\n","sourceOld":"  // TODO: should this take startTerm too?  This way\n  // Terms.intersect could forward to this method if type !=\n  // NORMAL:\n  public TermsEnum getTermsEnum(Terms terms) throws IOException {\n    switch(type) {\n    case NONE:\n      return TermsEnum.EMPTY;\n    case ALL:\n      return terms.iterator(null);\n    case SINGLE:\n      return new SingleTermsEnum(terms.iterator(null), term);\n    case PREFIX:\n      // TODO: this is very likely faster than .intersect,\n      // but we should test and maybe cutover\n      return new PrefixTermsEnum(terms.iterator(null), term);\n    case NORMAL:\n      return terms.intersect(this, null);\n    default:\n      // unreachable\n      throw new RuntimeException(\"unhandled case\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}