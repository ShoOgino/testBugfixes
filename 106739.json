{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"/dev/null","sourceNew":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":null,"sourceOld":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"/dev/null","sourceNew":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  @Override\n  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  @Override\n  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  @Override\n  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  @Override\n  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  @Override\n  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}