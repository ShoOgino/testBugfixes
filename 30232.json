{"path":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#parse(JSONParser,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","commits":[{"id":"caf7f9acfdff984e59be68054cc1e0048b8ee030","date":1407766058,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#parse(JSONParser,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"/dev/null","sourceNew":"    private void parse(JSONParser parser,\n                       Handler handler,\n                       Map<String, Object> values,\n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted) throws IOException {\n\n      int event = -1;\n      for (; ; ) {\n        event = parser.nextEvent();\n        if(event == EOF) break;\n        if (event == OBJECT_START) {\n          handleObjectStart(parser, new HashSet<Node>(), handler, values, stack, recordStarted);\n        } else if (event == ARRAY_START) {\n          for (; ; ) {\n            event = parser.nextEvent();\n            if (event == ARRAY_END) break;\n            if (event == OBJECT_START) {\n              handleObjectStart(parser, new HashSet<Node>(), handler, values, stack, recordStarted);\n            }\n          }\n        }\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"310045472df7463a74daabf6252eafc9d93960e0","date":1413271286,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#parse(JSONParser,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#parse(JSONParser,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    private void parse(JSONParser parser,\n                       Handler handler,\n                       Map<String, Object> values,\n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted) throws IOException {\n\n      int event = -1;\n      for (; ; ) {\n        event = parser.nextEvent();\n        if(event == EOF) break;\n        if (event == OBJECT_START) {\n          handleObjectStart(parser, new HashSet<Node>(), handler, values, stack, recordStarted, null);\n        } else if (event == ARRAY_START) {\n          for (; ; ) {\n            event = parser.nextEvent();\n            if (event == ARRAY_END) break;\n            if (event == OBJECT_START) {\n              handleObjectStart(parser, new HashSet<Node>(), handler, values, stack, recordStarted,null);\n            }\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    private void parse(JSONParser parser,\n                       Handler handler,\n                       Map<String, Object> values,\n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted) throws IOException {\n\n      int event = -1;\n      for (; ; ) {\n        event = parser.nextEvent();\n        if(event == EOF) break;\n        if (event == OBJECT_START) {\n          handleObjectStart(parser, new HashSet<Node>(), handler, values, stack, recordStarted);\n        } else if (event == ARRAY_START) {\n          for (; ; ) {\n            event = parser.nextEvent();\n            if (event == ARRAY_END) break;\n            if (event == OBJECT_START) {\n              handleObjectStart(parser, new HashSet<Node>(), handler, values, stack, recordStarted);\n            }\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#parse(JSONParser,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#parse(JSONParser,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    private void parse(JSONParser parser,\n                       Handler handler,\n                       Map<String, Object> values,\n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted) throws IOException {\n\n      int event = -1;\n      for (; ; ) {\n        event = parser.nextEvent();\n        if(event == EOF) break;\n        if (event == OBJECT_START) {\n          handleObjectStart(parser, new HashSet<Node>(), handler, values, stack, recordStarted, null);\n        } else if (event == ARRAY_START) {\n          for (; ; ) {\n            event = parser.nextEvent();\n            if (event == ARRAY_END) break;\n            if (event == OBJECT_START) {\n              handleObjectStart(parser, new HashSet<Node>(), handler, values, stack, recordStarted,null);\n            }\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    private void parse(JSONParser parser,\n                       Handler handler,\n                       Map<String, Object> values,\n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted) throws IOException {\n\n      int event = -1;\n      for (; ; ) {\n        event = parser.nextEvent();\n        if(event == EOF) break;\n        if (event == OBJECT_START) {\n          handleObjectStart(parser, new HashSet<Node>(), handler, values, stack, recordStarted);\n        } else if (event == ARRAY_START) {\n          for (; ; ) {\n            event = parser.nextEvent();\n            if (event == ARRAY_END) break;\n            if (event == OBJECT_START) {\n              handleObjectStart(parser, new HashSet<Node>(), handler, values, stack, recordStarted);\n            }\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2330174b38007b9942205a2679db9ddffe35af89","date":1423653924,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#parse(JSONParser,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#parse(JSONParser,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    private void parse(JSONParser parser,\n                       Handler handler,\n                       Map<String, Object> values,\n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted) throws IOException {\n\n      int event = -1;\n      for (; ; ) {\n        event = parser.nextEvent();\n        if (event == EOF) break;\n        if (event == OBJECT_START) {\n          handleObjectStart(parser, new HashSet<Node>(), handler, values, stack, recordStarted, null);\n        } else if (event == ARRAY_START) {\n          for (; ; ) {\n            event = parser.nextEvent();\n            if (event == ARRAY_END) break;\n            if (event == OBJECT_START) {\n              handleObjectStart(parser, new HashSet<Node>(), handler, values, stack, recordStarted, null);\n            }\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    private void parse(JSONParser parser,\n                       Handler handler,\n                       Map<String, Object> values,\n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted) throws IOException {\n\n      int event = -1;\n      for (; ; ) {\n        event = parser.nextEvent();\n        if(event == EOF) break;\n        if (event == OBJECT_START) {\n          handleObjectStart(parser, new HashSet<Node>(), handler, values, stack, recordStarted, null);\n        } else if (event == ARRAY_START) {\n          for (; ; ) {\n            event = parser.nextEvent();\n            if (event == ARRAY_END) break;\n            if (event == OBJECT_START) {\n              handleObjectStart(parser, new HashSet<Node>(), handler, values, stack, recordStarted,null);\n            }\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7272013f8448f299f54112ec41cb3dc047cda543","date":1453483707,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#parse(JSONParser,Handler,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#parse(JSONParser,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    private void parse(JSONParser parser,\n                       Handler handler,\n                       Map<String, Object> values) throws IOException {\n\n      int event = -1;\n      boolean recordStarted = false;\n      for (; ; ) {\n        event = parser.nextEvent();\n        if (event == EOF) break;\n        if (event == OBJECT_START) {\n          handleObjectStart(parser, handler, values, new Stack<Set<String>>(), recordStarted, null);\n        } else if (event == ARRAY_START) {\n          for (; ; ) {\n            event = parser.nextEvent();\n            if (event == ARRAY_END) break;\n            if (event == OBJECT_START) {\n              handleObjectStart(parser, handler, values, new Stack<Set<String>>(), recordStarted, null);\n            }\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    private void parse(JSONParser parser,\n                       Handler handler,\n                       Map<String, Object> values,\n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted) throws IOException {\n\n      int event = -1;\n      for (; ; ) {\n        event = parser.nextEvent();\n        if (event == EOF) break;\n        if (event == OBJECT_START) {\n          handleObjectStart(parser, new HashSet<Node>(), handler, values, stack, recordStarted, null);\n        } else if (event == ARRAY_START) {\n          for (; ; ) {\n            event = parser.nextEvent();\n            if (event == ARRAY_END) break;\n            if (event == OBJECT_START) {\n              handleObjectStart(parser, new HashSet<Node>(), handler, values, stack, recordStarted, null);\n            }\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"310045472df7463a74daabf6252eafc9d93960e0":["caf7f9acfdff984e59be68054cc1e0048b8ee030"],"55980207f1977bd1463465de1659b821347e2fa8":["caf7f9acfdff984e59be68054cc1e0048b8ee030","310045472df7463a74daabf6252eafc9d93960e0"],"7272013f8448f299f54112ec41cb3dc047cda543":["2330174b38007b9942205a2679db9ddffe35af89"],"2330174b38007b9942205a2679db9ddffe35af89":["310045472df7463a74daabf6252eafc9d93960e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"caf7f9acfdff984e59be68054cc1e0048b8ee030":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7272013f8448f299f54112ec41cb3dc047cda543"]},"commit2Childs":{"310045472df7463a74daabf6252eafc9d93960e0":["55980207f1977bd1463465de1659b821347e2fa8","2330174b38007b9942205a2679db9ddffe35af89"],"55980207f1977bd1463465de1659b821347e2fa8":[],"7272013f8448f299f54112ec41cb3dc047cda543":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2330174b38007b9942205a2679db9ddffe35af89":["7272013f8448f299f54112ec41cb3dc047cda543"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["caf7f9acfdff984e59be68054cc1e0048b8ee030"],"caf7f9acfdff984e59be68054cc1e0048b8ee030":["310045472df7463a74daabf6252eafc9d93960e0","55980207f1977bd1463465de1659b821347e2fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}