{"path":"lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader#getTermVectors(int).mjava","commits":[{"id":"6e09a3a223be07d75777515a717312813221fe58","date":1328908385,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader#getTermVectors(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ParallelReader#getTermVectors(int).mjava","sourceNew":"  // get all vectors\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = new ParallelFields();\n    for (Map.Entry<String,AtomicReader> ent : fieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        fields.addField(fieldName, vector);\n      }\n    }\n    \n    return fields;\n  }\n\n","sourceOld":"  // get all vectors\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = new ParallelFields();\n    for (Map.Entry<String,AtomicReader> ent : fieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        fields.addField(fieldName, vector);\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b64ddac2b8b476b887764166789fba16c2329d8","date":1329819157,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader#getTermVectors(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader#getTermVectors(int).mjava","sourceNew":"  // get all vectors\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = null;\n    for (Map.Entry<String,AtomicReader> ent : fieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        if (fields == null) {\n          fields = new ParallelFields();\n        }\n        fields.addField(fieldName, vector);\n      }\n    }\n    \n    return fields;\n  }\n\n","sourceOld":"  // get all vectors\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = new ParallelFields();\n    for (Map.Entry<String,AtomicReader> ent : fieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        fields.addField(fieldName, vector);\n      }\n    }\n    \n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d85ecdb6c60e4c2edb5455f39169bb2c4550c99a","date":1329841033,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader#getTermVectors(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader#getTermVectors(int).mjava","sourceNew":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = null;\n    for (Map.Entry<String,AtomicReader> ent : tvFieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        if (fields == null) {\n          fields = new ParallelFields();\n        }\n        fields.addField(fieldName, vector);\n      }\n    }\n    \n    return fields;\n  }\n\n","sourceOld":"  // get all vectors\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = null;\n    for (Map.Entry<String,AtomicReader> ent : fieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        if (fields == null) {\n          fields = new ParallelFields();\n        }\n        fields.addField(fieldName, vector);\n      }\n    }\n    \n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader#getTermVectors(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader#getTermVectors(int).mjava","sourceNew":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = null;\n    for (Map.Entry<String,AtomicReader> ent : tvFieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        if (fields == null) {\n          fields = new ParallelFields();\n        }\n        fields.addField(fieldName, vector);\n      }\n    }\n    \n    return fields;\n  }\n\n","sourceOld":"  // get all vectors\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = new ParallelFields();\n    for (Map.Entry<String,AtomicReader> ent : fieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        fields.addField(fieldName, vector);\n      }\n    }\n    \n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader#getTermVectors(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader#getTermVectors(int).mjava","sourceNew":"  @Override\n  public InvertedFields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = null;\n    for (Map.Entry<String,AtomicReader> ent : tvFieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        if (fields == null) {\n          fields = new ParallelFields();\n        }\n        fields.addField(fieldName, vector);\n      }\n    }\n    \n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = null;\n    for (Map.Entry<String,AtomicReader> ent : tvFieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        if (fields == null) {\n          fields = new ParallelFields();\n        }\n        fields.addField(fieldName, vector);\n      }\n    }\n    \n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader#getTermVectors(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader#getTermVectors(int).mjava","sourceNew":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = null;\n    for (Map.Entry<String,AtomicReader> ent : tvFieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        if (fields == null) {\n          fields = new ParallelFields();\n        }\n        fields.addField(fieldName, vector);\n      }\n    }\n    \n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public InvertedFields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = null;\n    for (Map.Entry<String,AtomicReader> ent : tvFieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        if (fields == null) {\n          fields = new ParallelFields();\n        }\n        fields.addField(fieldName, vector);\n      }\n    }\n    \n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader#getTermVectors(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    ParallelFields fields = null;\n    for (Map.Entry<String,AtomicReader> ent : tvFieldToReader.entrySet()) {\n      String fieldName = ent.getKey();\n      Terms vector = ent.getValue().getTermVector(docID, fieldName);\n      if (vector != null) {\n        if (fields == null) {\n          fields = new ParallelFields();\n        }\n        fields.addField(fieldName, vector);\n      }\n    }\n    \n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["6e09a3a223be07d75777515a717312813221fe58","d85ecdb6c60e4c2edb5455f39169bb2c4550c99a"],"5b64ddac2b8b476b887764166789fba16c2329d8":["6e09a3a223be07d75777515a717312813221fe58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["d85ecdb6c60e4c2edb5455f39169bb2c4550c99a"],"d85ecdb6c60e4c2edb5455f39169bb2c4550c99a":["5b64ddac2b8b476b887764166789fba16c2329d8"],"6e09a3a223be07d75777515a717312813221fe58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"5b64ddac2b8b476b887764166789fba16c2329d8":["d85ecdb6c60e4c2edb5455f39169bb2c4550c99a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e09a3a223be07d75777515a717312813221fe58"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"d85ecdb6c60e4c2edb5455f39169bb2c4550c99a":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"6e09a3a223be07d75777515a717312813221fe58":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","5b64ddac2b8b476b887764166789fba16c2329d8"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}