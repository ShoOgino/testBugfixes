{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#equals(Object).mjava","commits":[{"id":"7f04837a83ac5990603e49463c653672a3a31af0","date":1395078441,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    CompiledAutomaton other = (CompiledAutomaton) obj;\n    if (type != other.type) return false;\n    if (type == AUTOMATON_TYPE.SINGLE || type == AUTOMATON_TYPE.PREFIX) {\n      if (!term.equals(other.term)) return false;\n    } else if (type == AUTOMATON_TYPE.NORMAL) {\n      if (!runAutomaton.equals(other.runAutomaton)) return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0088660bdc1c051f58fbc38626d61ccf22dfd3e0","date":1427444574,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    CompiledAutomaton other = (CompiledAutomaton) obj;\n    if (type != other.type) return false;\n    if (type == AUTOMATON_TYPE.SINGLE) {\n      if (!term.equals(other.term)) return false;\n    } else if (type == AUTOMATON_TYPE.NORMAL) {\n      if (!runAutomaton.equals(other.runAutomaton)) return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    CompiledAutomaton other = (CompiledAutomaton) obj;\n    if (type != other.type) return false;\n    if (type == AUTOMATON_TYPE.SINGLE || type == AUTOMATON_TYPE.PREFIX) {\n      if (!term.equals(other.term)) return false;\n    } else if (type == AUTOMATON_TYPE.NORMAL) {\n      if (!runAutomaton.equals(other.runAutomaton)) return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    CompiledAutomaton other = (CompiledAutomaton) obj;\n    if (type != other.type) return false;\n    if (type == AUTOMATON_TYPE.SINGLE) {\n      if (!term.equals(other.term)) return false;\n    } else if (type == AUTOMATON_TYPE.NORMAL) {\n      if (!runAutomaton.equals(other.runAutomaton)) return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    CompiledAutomaton other = (CompiledAutomaton) obj;\n    if (type != other.type) return false;\n    if (type == AUTOMATON_TYPE.SINGLE || type == AUTOMATON_TYPE.PREFIX) {\n      if (!term.equals(other.term)) return false;\n    } else if (type == AUTOMATON_TYPE.NORMAL) {\n      if (!runAutomaton.equals(other.runAutomaton)) return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["7f04837a83ac5990603e49463c653672a3a31af0","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["7f04837a83ac5990603e49463c653672a3a31af0"],"7f04837a83ac5990603e49463c653672a3a31af0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0088660bdc1c051f58fbc38626d61ccf22dfd3e0"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f04837a83ac5990603e49463c653672a3a31af0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f04837a83ac5990603e49463c653672a3a31af0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}