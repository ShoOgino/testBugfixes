{"path":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseTaskSequenceRepetition().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseTaskSequenceRepetition().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseTaskSequenceRepetition().mjava","sourceNew":"  /** Test the repetiotion parsing for sequential  tasks */\n  public void testParseTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"{ \"+taskStr+\" } : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList<PerfTask> algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (final PerfTask task : algTasks) {\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertFalse(\"sequence for \"+parsedTasks+\" should be sequential!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","sourceOld":"  /** Test the repetiotion parsing for sequential  tasks */\n  public void testParseTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"{ \"+taskStr+\" } : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList<PerfTask> algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (final PerfTask task : algTasks) {\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertFalse(\"sequence for \"+parsedTasks+\" should be sequential!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseTaskSequenceRepetition().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseTaskSequenceRepetition().mjava","sourceNew":"  /** Test the repetiotion parsing for sequential  tasks */\n  public void testParseTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"{ \"+taskStr+\" } : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList<PerfTask> algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (final PerfTask task : algTasks) {\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertFalse(\"sequence for \"+parsedTasks+\" should be sequential!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","sourceOld":"  /** Test the repetiotion parsing for sequential  tasks */\n  public void testParseTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"{ \"+taskStr+\" } : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList<PerfTask> algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (final PerfTask task : algTasks) {\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertFalse(\"sequence for \"+parsedTasks+\" should be sequential!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseTaskSequenceRepetition().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseTaskSequenceRepetition().mjava","sourceNew":"  /** Test the repetiotion parsing for sequential  tasks */\n  public void testParseTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"{ \"+taskStr+\" } : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList<PerfTask> algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (final PerfTask task : algTasks) {\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertFalse(\"sequence for \"+parsedTasks+\" should be sequential!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","sourceOld":"  /** Test the repetiotion parsing for sequential  tasks */\n  public void testParseTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"{ \"+taskStr+\" } : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList<PerfTask> algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (final PerfTask task : algTasks) {\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertFalse(\"sequence for \"+parsedTasks+\" should be sequential!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}