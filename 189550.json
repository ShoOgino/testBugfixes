{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#downloadFromZK(SolrZkClient,String,File).mjava","commits":[{"id":"cf4e43a4d7a969632d4bec76fd5bba149cb81487","date":1342043143,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#downloadFromZK(SolrZkClient,String,File).mjava","pathOld":"/dev/null","sourceNew":"  public static void downloadFromZK(SolrZkClient zkClient, String zkPath,\n      File dir) throws IOException, KeeperException, InterruptedException {\n    List<String> files = zkClient.getChildren(zkPath, null, true);\n    \n    for (String file : files) {\n      List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n      if (children.size() == 0) {\n        byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n        dir.mkdirs(); \n        log.info(\"Write file \" + new File(dir, file));\n        FileUtils.writeStringToFile(new File(dir, file), new String(data, \"UTF-8\"), \"UTF-8\");\n      } else {\n        downloadFromZK(zkClient, zkPath + \"/\" + file, new File(dir, file));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["096d8770ecc7af747320979ed1e4ff71d3237b8f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#downloadFromZK(SolrZkClient,String,File).mjava","pathOld":"/dev/null","sourceNew":"  public static void downloadFromZK(SolrZkClient zkClient, String zkPath,\n      File dir) throws IOException, KeeperException, InterruptedException {\n    List<String> files = zkClient.getChildren(zkPath, null, true);\n    \n    for (String file : files) {\n      List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n      if (children.size() == 0) {\n        byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n        dir.mkdirs(); \n        log.info(\"Write file \" + new File(dir, file));\n        FileUtils.writeStringToFile(new File(dir, file), new String(data, \"UTF-8\"), \"UTF-8\");\n      } else {\n        downloadFromZK(zkClient, zkPath + \"/\" + file, new File(dir, file));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#downloadFromZK(SolrZkClient,String,File).mjava","pathOld":"/dev/null","sourceNew":"  public static void downloadFromZK(SolrZkClient zkClient, String zkPath,\n      File dir) throws IOException, KeeperException, InterruptedException {\n    List<String> files = zkClient.getChildren(zkPath, null, true);\n    \n    for (String file : files) {\n      List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n      if (children.size() == 0) {\n        byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n        dir.mkdirs(); \n        log.info(\"Write file \" + new File(dir, file));\n        FileUtils.writeStringToFile(new File(dir, file), new String(data, \"UTF-8\"), \"UTF-8\");\n      } else {\n        downloadFromZK(zkClient, zkPath + \"/\" + file, new File(dir, file));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"096d8770ecc7af747320979ed1e4ff71d3237b8f","date":1368405025,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#downloadFromZK(SolrZkClient,String,File).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#downloadFromZK(SolrZkClient,String,File).mjava","sourceNew":"  public static void downloadFromZK(SolrZkClient zkClient, String zkPath,\n      File dir) throws IOException, KeeperException, InterruptedException {\n    List<String> files = zkClient.getChildren(zkPath, null, true);\n    \n    for (String file : files) {\n      List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n      if (children.size() == 0) {\n        byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n        dir.mkdirs(); \n        log.info(\"Write file \" + new File(dir, file));\n        FileUtils.writeByteArrayToFile(new File(dir, file), data);\n      } else {\n        downloadFromZK(zkClient, zkPath + \"/\" + file, new File(dir, file));\n      }\n    }\n  }\n\n","sourceOld":"  public static void downloadFromZK(SolrZkClient zkClient, String zkPath,\n      File dir) throws IOException, KeeperException, InterruptedException {\n    List<String> files = zkClient.getChildren(zkPath, null, true);\n    \n    for (String file : files) {\n      List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n      if (children.size() == 0) {\n        byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n        dir.mkdirs(); \n        log.info(\"Write file \" + new File(dir, file));\n        FileUtils.writeStringToFile(new File(dir, file), new String(data, \"UTF-8\"), \"UTF-8\");\n      } else {\n        downloadFromZK(zkClient, zkPath + \"/\" + file, new File(dir, file));\n      }\n    }\n  }\n\n","bugFix":["cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8a2521797f14d1d697a17a0069f5619cd211a6","date":1424361535,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#downloadFromZK(SolrZkClient,String,File).mjava","sourceNew":null,"sourceOld":"  public static void downloadFromZK(SolrZkClient zkClient, String zkPath,\n      File dir) throws IOException, KeeperException, InterruptedException {\n    List<String> files = zkClient.getChildren(zkPath, null, true);\n    \n    for (String file : files) {\n      List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n      if (children.size() == 0) {\n        byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n        dir.mkdirs(); \n        log.info(\"Write file \" + new File(dir, file));\n        FileUtils.writeByteArrayToFile(new File(dir, file), data);\n      } else {\n        downloadFromZK(zkClient, zkPath + \"/\" + file, new File(dir, file));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"cf4e43a4d7a969632d4bec76fd5bba149cb81487":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["096d8770ecc7af747320979ed1e4ff71d3237b8f"],"096d8770ecc7af747320979ed1e4ff71d3237b8f":["cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c8a2521797f14d1d697a17a0069f5619cd211a6"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"cf4e43a4d7a969632d4bec76fd5bba149cb81487":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","096d8770ecc7af747320979ed1e4ff71d3237b8f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","cf4e43a4d7a969632d4bec76fd5bba149cb81487","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"096d8770ecc7af747320979ed1e4ff71d3237b8f":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}