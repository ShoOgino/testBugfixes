{"path":"solr/src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testOffsetCorrection().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testOffsetCorrection().mjava","pathOld":"/dev/null","sourceNew":"  public void testOffsetCorrection() throws Exception {\n    final String INPUT = \"G&uuml;nther G&uuml;nther is here\";\n\n    // create MappingCharFilter\n    MappingCharFilterFactory cfFactory = new MappingCharFilterFactory();\n    List<String> mappingRules = new ArrayList<String>();\n    mappingRules.add( \"\\\"&uuml;\\\" => \\\"ü\\\"\" );\n    NormalizeCharMap normMap = new NormalizeCharMap();\n    cfFactory.parseRules( mappingRules, normMap );\n    CharStream charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n\n    // create PatternTokenizer\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( PatternTokenizerFactory.PATTERN, \"[,;/\\\\s]+\" );\n    PatternTokenizerFactory tokFactory = new PatternTokenizerFactory();\n    tokFactory.init( args );\n    TokenStream stream = tokFactory.create( charStream );\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\", \"is\", \"here\" },\n        new int[] { 0, 13, 26, 29 },\n        new int[] { 12, 25, 28, 33 },\n        new int[] { 1, 1, 1, 1 });\n    \n    charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n    args.put( PatternTokenizerFactory.PATTERN, \"Günther\" );\n    args.put( PatternTokenizerFactory.GROUP, \"0\" );\n    tokFactory = new PatternTokenizerFactory();\n    tokFactory.init( args );\n    stream = tokFactory.create( charStream );\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\" },\n        new int[] { 0, 13 },\n        new int[] { 12, 25 },\n        new int[] { 1, 1 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testOffsetCorrection().mjava","sourceNew":null,"sourceOld":"  public void testOffsetCorrection() throws Exception {\n    final String INPUT = \"G&uuml;nther G&uuml;nther is here\";\n\n    // create MappingCharFilter\n    MappingCharFilterFactory cfFactory = new MappingCharFilterFactory();\n    List<String> mappingRules = new ArrayList<String>();\n    mappingRules.add( \"\\\"&uuml;\\\" => \\\"ü\\\"\" );\n    NormalizeCharMap normMap = new NormalizeCharMap();\n    cfFactory.parseRules( mappingRules, normMap );\n    CharStream charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n\n    // create PatternTokenizer\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( PatternTokenizerFactory.PATTERN, \"[,;/\\\\s]+\" );\n    PatternTokenizerFactory tokFactory = new PatternTokenizerFactory();\n    tokFactory.init( args );\n    TokenStream stream = tokFactory.create( charStream );\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\", \"is\", \"here\" },\n        new int[] { 0, 13, 26, 29 },\n        new int[] { 12, 25, 28, 33 },\n        new int[] { 1, 1, 1, 1 });\n    \n    charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n    args.put( PatternTokenizerFactory.PATTERN, \"Günther\" );\n    args.put( PatternTokenizerFactory.GROUP, \"0\" );\n    tokFactory = new PatternTokenizerFactory();\n    tokFactory.init( args );\n    stream = tokFactory.create( charStream );\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\" },\n        new int[] { 0, 13 },\n        new int[] { 12, 25 },\n        new int[] { 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testOffsetCorrection().mjava","pathOld":"src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testOffsetCorrection().mjava","sourceNew":"  public void testOffsetCorrection() throws Exception {\n    final String INPUT = \"G&uuml;nther G&uuml;nther is here\";\n\n    // create MappingCharFilter\n    MappingCharFilterFactory cfFactory = new MappingCharFilterFactory();\n    List<String> mappingRules = new ArrayList<String>();\n    mappingRules.add( \"\\\"&uuml;\\\" => \\\"ü\\\"\" );\n    NormalizeCharMap normMap = new NormalizeCharMap();\n    cfFactory.parseRules( mappingRules, normMap );\n    CharStream charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n\n    // create PatternTokenizer\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( PatternTokenizerFactory.PATTERN, \"[,;/\\\\s]+\" );\n    PatternTokenizerFactory tokFactory = new PatternTokenizerFactory();\n    tokFactory.init( args );\n    TokenStream stream = tokFactory.create( charStream );\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\", \"is\", \"here\" },\n        new int[] { 0, 13, 26, 29 },\n        new int[] { 12, 25, 28, 33 });\n    \n    charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n    args.put( PatternTokenizerFactory.PATTERN, \"Günther\" );\n    args.put( PatternTokenizerFactory.GROUP, \"0\" );\n    tokFactory = new PatternTokenizerFactory();\n    tokFactory.init( args );\n    stream = tokFactory.create( charStream );\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\" },\n        new int[] { 0, 13 },\n        new int[] { 12, 25 });\n  }\n\n","sourceOld":"  public void testOffsetCorrection() throws Exception {\n    final String INPUT = \"G&uuml;nther G&uuml;nther is here\";\n\n    // create MappingCharFilter\n    MappingCharFilterFactory cfFactory = new MappingCharFilterFactory();\n    List<String> mappingRules = new ArrayList<String>();\n    mappingRules.add( \"\\\"&uuml;\\\" => \\\"ü\\\"\" );\n    NormalizeCharMap normMap = new NormalizeCharMap();\n    cfFactory.parseRules( mappingRules, normMap );\n    CharStream charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n\n    // create PatternTokenizer\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( PatternTokenizerFactory.PATTERN, \"[,;/\\\\s]+\" );\n    PatternTokenizerFactory tokFactory = new PatternTokenizerFactory();\n    tokFactory.init( args );\n    TokenStream stream = tokFactory.create( charStream );\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\", \"is\", \"here\" },\n        new int[] { 0, 13, 26, 29 },\n        new int[] { 12, 25, 28, 33 });\n    \n    charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n    args.put( PatternTokenizerFactory.PATTERN, \"Günther\" );\n    args.put( PatternTokenizerFactory.GROUP, \"0\" );\n    tokFactory = new PatternTokenizerFactory();\n    tokFactory.init( args );\n    stream = tokFactory.create( charStream );\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\" },\n        new int[] { 0, 13 },\n        new int[] { 12, 25 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testOffsetCorrection().mjava","pathOld":"/dev/null","sourceNew":"  public void testOffsetCorrection() throws Exception {\n    final String INPUT = \"G&uuml;nther G&uuml;nther is here\";\n\n    // create MappingCharFilter\n    MappingCharFilterFactory cfFactory = new MappingCharFilterFactory();\n    List<String> mappingRules = new ArrayList<String>();\n    mappingRules.add( \"\\\"&uuml;\\\" => \\\"ü\\\"\" );\n    NormalizeCharMap normMap = new NormalizeCharMap();\n    cfFactory.parseRules( mappingRules, normMap );\n    CharStream charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n\n    // create PatternTokenizer\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( PatternTokenizerFactory.PATTERN, \"[,;/\\\\s]+\" );\n    PatternTokenizerFactory tokFactory = new PatternTokenizerFactory();\n    tokFactory.init( args );\n    TokenStream stream = tokFactory.create( charStream );\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\", \"is\", \"here\" },\n        new int[] { 0, 13, 26, 29 },\n        new int[] { 12, 25, 28, 33 });\n    \n    charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n    args.put( PatternTokenizerFactory.PATTERN, \"Günther\" );\n    args.put( PatternTokenizerFactory.GROUP, \"0\" );\n    tokFactory = new PatternTokenizerFactory();\n    tokFactory.init( args );\n    stream = tokFactory.create( charStream );\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\" },\n        new int[] { 0, 13 },\n        new int[] { 12, 25 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"540f57ba7d9d46ccc6f0157e8b8021a4c969770d","date":1272974241,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testOffsetCorrection().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testOffsetCorrection().mjava","sourceNew":"  public void testOffsetCorrection() throws Exception {\n    final String INPUT = \"G&uuml;nther G&uuml;nther is here\";\n\n    // create MappingCharFilter\n    List<String> mappingRules = new ArrayList<String>();\n    mappingRules.add( \"\\\"&uuml;\\\" => \\\"ü\\\"\" );\n    NormalizeCharMap normMap = new NormalizeCharMap();\n    normMap.add(\"&uuml;\", \"ü\");\n    CharStream charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n\n    // create PatternTokenizer\n    TokenStream stream = new PatternTokenizer(charStream, Pattern.compile(\"[,;/\\\\s]+\"), -1);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\", \"is\", \"here\" },\n        new int[] { 0, 13, 26, 29 },\n        new int[] { 12, 25, 28, 33 });\n    \n    charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n    stream = new PatternTokenizer(charStream, Pattern.compile(\"Günther\"), 0);\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\" },\n        new int[] { 0, 13 },\n        new int[] { 12, 25 });\n  }\n\n","sourceOld":"  public void testOffsetCorrection() throws Exception {\n    final String INPUT = \"G&uuml;nther G&uuml;nther is here\";\n\n    // create MappingCharFilter\n    MappingCharFilterFactory cfFactory = new MappingCharFilterFactory();\n    List<String> mappingRules = new ArrayList<String>();\n    mappingRules.add( \"\\\"&uuml;\\\" => \\\"ü\\\"\" );\n    NormalizeCharMap normMap = new NormalizeCharMap();\n    cfFactory.parseRules( mappingRules, normMap );\n    CharStream charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n\n    // create PatternTokenizer\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( PatternTokenizerFactory.PATTERN, \"[,;/\\\\s]+\" );\n    PatternTokenizerFactory tokFactory = new PatternTokenizerFactory();\n    tokFactory.init( args );\n    TokenStream stream = tokFactory.create( charStream );\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\", \"is\", \"here\" },\n        new int[] { 0, 13, 26, 29 },\n        new int[] { 12, 25, 28, 33 });\n    \n    charStream = new MappingCharFilter( normMap, CharReader.get( new StringReader( INPUT ) ) );\n    args.put( PatternTokenizerFactory.PATTERN, \"Günther\" );\n    args.put( PatternTokenizerFactory.GROUP, \"0\" );\n    tokFactory = new PatternTokenizerFactory();\n    tokFactory.init( args );\n    stream = tokFactory.create( charStream );\n    assertTokenStreamContents(stream,\n        new String[] { \"Günther\", \"Günther\" },\n        new int[] { 0, 13 },\n        new int[] { 12, 25 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}