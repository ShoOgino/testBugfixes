{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T],BytesReader).mjava","commits":[{"id":"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8","date":1339238489,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T]).mjava","sourceNew":"  /**\n   * Follow the <code>follow</code> arc and read the first arc of its target;\n   * this changes the provided <code>arc</code> (2nd arg) in-place and returns\n   * it.\n   * \n   * @return Returns the second argument (<code>arc</code>).\n   */\n  public Arc<T> readFirstTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //int pos = address;\n    //System.out.println(\"    readFirstTarget follow.target=\" + follow.target + \" isFinal=\" + follow.isFinal());\n    if (follow.isFinal()) {\n      // Insert \"fake\" final first arc:\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_FINAL_ARC;\n      if (follow.target <= 0) {\n        arc.flags |= BIT_LAST_ARC;\n      } else {\n        arc.node = follow.target;\n        // NOTE: nextArc is a node (not an address!) in this case:\n        arc.nextArc = follow.target;\n      }\n      arc.target = FINAL_END_NODE;\n      //System.out.println(\"    insert isFinal; nextArc=\" + follow.target + \" isLast=\" + arc.isLast() + \" output=\" + outputs.outputToString(arc.output));\n      return arc;\n    } else {\n      return readFirstRealTargetArc(follow.target, arc, in);\n    }\n  }\n\n","sourceOld":"  /**\n   * Follow the <code>follow</code> arc and read the first arc of its target;\n   * this changes the provided <code>arc</code> (2nd arg) in-place and returns\n   * it.\n   * \n   * @return Returns the second argument (<code>arc</code>).\n   */\n  public Arc<T> readFirstTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //int pos = address;\n    //System.out.println(\"    readFirstTarget follow.target=\" + follow.target + \" isFinal=\" + follow.isFinal());\n    if (follow.isFinal()) {\n      // Insert \"fake\" final first arc:\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_FINAL_ARC;\n      if (follow.target <= 0) {\n        arc.flags |= BIT_LAST_ARC;\n      } else {\n        arc.node = follow.target;\n        // NOTE: nextArc is a node (not an address!) in this case:\n        arc.nextArc = follow.target;\n      }\n      arc.target = FINAL_END_NODE;\n      //System.out.println(\"    insert isFinal; nextArc=\" + follow.target + \" isLast=\" + arc.isLast() + \" output=\" + outputs.outputToString(arc.output));\n      return arc;\n    } else {\n      return readFirstRealTargetArc(follow.target, arc, getBytesReader(0));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cbc4730743fac2e69e7d622848778d3ad9f2151","date":1502282443,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /**\n   * Follow the <code>follow</code> arc and read the first arc of its target;\n   * this changes the provided <code>arc</code> (2nd arg) in-place and returns\n   * it.\n   * \n   * @return Returns the second argument (<code>arc</code>).\n   */\n  public Arc<T> readFirstTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //int pos = address;\n    //System.out.println(\"    readFirstTarget follow.target=\" + follow.target + \" isFinal=\" + follow.isFinal());\n    if (follow.isFinal()) {\n      // Insert \"fake\" final first arc:\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_FINAL_ARC;\n      if (follow.target <= 0) {\n        arc.flags |= BIT_LAST_ARC;\n      } else {\n        // NOTE: nextArc is a node (not an address!) in this case:\n        arc.nextArc = follow.target;\n      }\n      arc.target = FINAL_END_NODE;\n      //System.out.println(\"    insert isFinal; nextArc=\" + follow.target + \" isLast=\" + arc.isLast() + \" output=\" + outputs.outputToString(arc.output));\n      return arc;\n    } else {\n      return readFirstRealTargetArc(follow.target, arc, in);\n    }\n  }\n\n","sourceOld":"  /**\n   * Follow the <code>follow</code> arc and read the first arc of its target;\n   * this changes the provided <code>arc</code> (2nd arg) in-place and returns\n   * it.\n   * \n   * @return Returns the second argument (<code>arc</code>).\n   */\n  public Arc<T> readFirstTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //int pos = address;\n    //System.out.println(\"    readFirstTarget follow.target=\" + follow.target + \" isFinal=\" + follow.isFinal());\n    if (follow.isFinal()) {\n      // Insert \"fake\" final first arc:\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_FINAL_ARC;\n      if (follow.target <= 0) {\n        arc.flags |= BIT_LAST_ARC;\n      } else {\n        arc.node = follow.target;\n        // NOTE: nextArc is a node (not an address!) in this case:\n        arc.nextArc = follow.target;\n      }\n      arc.target = FINAL_END_NODE;\n      //System.out.println(\"    insert isFinal; nextArc=\" + follow.target + \" isLast=\" + arc.isLast() + \" output=\" + outputs.outputToString(arc.output));\n      return arc;\n    } else {\n      return readFirstRealTargetArc(follow.target, arc, in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /**\n   * Follow the <code>follow</code> arc and read the first arc of its target;\n   * this changes the provided <code>arc</code> (2nd arg) in-place and returns\n   * it.\n   * \n   * @return Returns the second argument (<code>arc</code>).\n   */\n  public Arc<T> readFirstTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //int pos = address;\n    //System.out.println(\"    readFirstTarget follow.target=\" + follow.target + \" isFinal=\" + follow.isFinal());\n    if (follow.isFinal()) {\n      // Insert \"fake\" final first arc:\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_FINAL_ARC;\n      if (follow.target <= 0) {\n        arc.flags |= BIT_LAST_ARC;\n      } else {\n        // NOTE: nextArc is a node (not an address!) in this case:\n        arc.nextArc = follow.target;\n      }\n      arc.target = FINAL_END_NODE;\n      //System.out.println(\"    insert isFinal; nextArc=\" + follow.target + \" isLast=\" + arc.isLast() + \" output=\" + outputs.outputToString(arc.output));\n      return arc;\n    } else {\n      return readFirstRealTargetArc(follow.target, arc, in);\n    }\n  }\n\n","sourceOld":"  /**\n   * Follow the <code>follow</code> arc and read the first arc of its target;\n   * this changes the provided <code>arc</code> (2nd arg) in-place and returns\n   * it.\n   * \n   * @return Returns the second argument (<code>arc</code>).\n   */\n  public Arc<T> readFirstTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //int pos = address;\n    //System.out.println(\"    readFirstTarget follow.target=\" + follow.target + \" isFinal=\" + follow.isFinal());\n    if (follow.isFinal()) {\n      // Insert \"fake\" final first arc:\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_FINAL_ARC;\n      if (follow.target <= 0) {\n        arc.flags |= BIT_LAST_ARC;\n      } else {\n        arc.node = follow.target;\n        // NOTE: nextArc is a node (not an address!) in this case:\n        arc.nextArc = follow.target;\n      }\n      arc.target = FINAL_END_NODE;\n      //System.out.println(\"    insert isFinal; nextArc=\" + follow.target + \" isLast=\" + arc.isLast() + \" output=\" + outputs.outputToString(arc.output));\n      return arc;\n    } else {\n      return readFirstRealTargetArc(follow.target, arc, in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /**\n   * Follow the <code>follow</code> arc and read the first arc of its target;\n   * this changes the provided <code>arc</code> (2nd arg) in-place and returns\n   * it.\n   * \n   * @return Returns the second argument (<code>arc</code>).\n   */\n  public Arc<T> readFirstTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //int pos = address;\n    //System.out.println(\"    readFirstTarget follow.target=\" + follow.target + \" isFinal=\" + follow.isFinal());\n    if (follow.isFinal()) {\n      // Insert \"fake\" final first arc:\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_FINAL_ARC;\n      if (follow.target <= 0) {\n        arc.flags |= BIT_LAST_ARC;\n      } else {\n        // NOTE: nextArc is a node (not an address!) in this case:\n        arc.nextArc = follow.target;\n      }\n      arc.target = FINAL_END_NODE;\n      //System.out.println(\"    insert isFinal; nextArc=\" + follow.target + \" isLast=\" + arc.isLast() + \" output=\" + outputs.outputToString(arc.output));\n      return arc;\n    } else {\n      return readFirstRealTargetArc(follow.target, arc, in);\n    }\n  }\n\n","sourceOld":"  /**\n   * Follow the <code>follow</code> arc and read the first arc of its target;\n   * this changes the provided <code>arc</code> (2nd arg) in-place and returns\n   * it.\n   * \n   * @return Returns the second argument (<code>arc</code>).\n   */\n  public Arc<T> readFirstTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //int pos = address;\n    //System.out.println(\"    readFirstTarget follow.target=\" + follow.target + \" isFinal=\" + follow.isFinal());\n    if (follow.isFinal()) {\n      // Insert \"fake\" final first arc:\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_FINAL_ARC;\n      if (follow.target <= 0) {\n        arc.flags |= BIT_LAST_ARC;\n      } else {\n        arc.node = follow.target;\n        // NOTE: nextArc is a node (not an address!) in this case:\n        arc.nextArc = follow.target;\n      }\n      arc.target = FINAL_END_NODE;\n      //System.out.println(\"    insert isFinal; nextArc=\" + follow.target + \" isLast=\" + arc.isLast() + \" output=\" + outputs.outputToString(arc.output));\n      return arc;\n    } else {\n      return readFirstRealTargetArc(follow.target, arc, in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /**\n   * Follow the <code>follow</code> arc and read the first arc of its target;\n   * this changes the provided <code>arc</code> (2nd arg) in-place and returns\n   * it.\n   * \n   * @return Returns the second argument (<code>arc</code>).\n   */\n  public Arc<T> readFirstTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //int pos = address;\n    //System.out.println(\"    readFirstTarget follow.target=\" + follow.target + \" isFinal=\" + follow.isFinal());\n    if (follow.isFinal()) {\n      // Insert \"fake\" final first arc:\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput();\n      arc.flags = BIT_FINAL_ARC;\n      if (follow.target() <= 0) {\n        arc.flags |= BIT_LAST_ARC;\n      } else {\n        // NOTE: nextArc is a node (not an address!) in this case:\n        arc.nextArc = follow.target();\n      }\n      arc.target = FINAL_END_NODE;\n      //System.out.println(\"    insert isFinal; nextArc=\" + follow.target + \" isLast=\" + arc.isLast() + \" output=\" + outputs.outputToString(arc.output));\n      return arc;\n    } else {\n      return readFirstRealTargetArc(follow.target(), arc, in);\n    }\n  }\n\n","sourceOld":"  /**\n   * Follow the <code>follow</code> arc and read the first arc of its target;\n   * this changes the provided <code>arc</code> (2nd arg) in-place and returns\n   * it.\n   * \n   * @return Returns the second argument (<code>arc</code>).\n   */\n  public Arc<T> readFirstTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //int pos = address;\n    //System.out.println(\"    readFirstTarget follow.target=\" + follow.target + \" isFinal=\" + follow.isFinal());\n    if (follow.isFinal()) {\n      // Insert \"fake\" final first arc:\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_FINAL_ARC;\n      if (follow.target <= 0) {\n        arc.flags |= BIT_LAST_ARC;\n      } else {\n        // NOTE: nextArc is a node (not an address!) in this case:\n        arc.nextArc = follow.target;\n      }\n      arc.target = FINAL_END_NODE;\n      //System.out.println(\"    insert isFinal; nextArc=\" + follow.target + \" isLast=\" + arc.isLast() + \" output=\" + outputs.outputToString(arc.output));\n      return arc;\n    } else {\n      return readFirstRealTargetArc(follow.target, arc, in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /**\n   * Follow the <code>follow</code> arc and read the first arc of its target;\n   * this changes the provided <code>arc</code> (2nd arg) in-place and returns\n   * it.\n   * \n   * @return Returns the second argument (<code>arc</code>).\n   */\n  public Arc<T> readFirstTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //int pos = address;\n    //System.out.println(\"    readFirstTarget follow.target=\" + follow.target + \" isFinal=\" + follow.isFinal());\n    if (follow.isFinal()) {\n      // Insert \"fake\" final first arc:\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput();\n      arc.flags = BIT_FINAL_ARC;\n      if (follow.target() <= 0) {\n        arc.flags |= BIT_LAST_ARC;\n      } else {\n        // NOTE: nextArc is a node (not an address!) in this case:\n        arc.nextArc = follow.target();\n      }\n      arc.target = FINAL_END_NODE;\n      //System.out.println(\"    insert isFinal; nextArc=\" + follow.target + \" isLast=\" + arc.isLast() + \" output=\" + outputs.outputToString(arc.output));\n      return arc;\n    } else {\n      return readFirstRealTargetArc(follow.target(), arc, in);\n    }\n  }\n\n","sourceOld":"  /**\n   * Follow the <code>follow</code> arc and read the first arc of its target;\n   * this changes the provided <code>arc</code> (2nd arg) in-place and returns\n   * it.\n   * \n   * @return Returns the second argument (<code>arc</code>).\n   */\n  public Arc<T> readFirstTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //int pos = address;\n    //System.out.println(\"    readFirstTarget follow.target=\" + follow.target + \" isFinal=\" + follow.isFinal());\n    if (follow.isFinal()) {\n      // Insert \"fake\" final first arc:\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_FINAL_ARC;\n      if (follow.target <= 0) {\n        arc.flags |= BIT_LAST_ARC;\n      } else {\n        // NOTE: nextArc is a node (not an address!) in this case:\n        arc.nextArc = follow.target;\n      }\n      arc.target = FINAL_END_NODE;\n      //System.out.println(\"    insert isFinal; nextArc=\" + follow.target + \" isLast=\" + arc.isLast() + \" output=\" + outputs.outputToString(arc.output));\n      return arc;\n    } else {\n      return readFirstRealTargetArc(follow.target, arc, in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /**\n   * Follow the <code>follow</code> arc and read the first arc of its target;\n   * this changes the provided <code>arc</code> (2nd arg) in-place and returns\n   * it.\n   * \n   * @return Returns the second argument (<code>arc</code>).\n   */\n  public Arc<T> readFirstTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //int pos = address;\n    //System.out.println(\"    readFirstTarget follow.target=\" + follow.target + \" isFinal=\" + follow.isFinal());\n    if (follow.isFinal()) {\n      // Insert \"fake\" final first arc:\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput();\n      arc.flags = BIT_FINAL_ARC;\n      if (follow.target() <= 0) {\n        arc.flags |= BIT_LAST_ARC;\n      } else {\n        // NOTE: nextArc is a node (not an address!) in this case:\n        arc.nextArc = follow.target();\n      }\n      arc.target = FINAL_END_NODE;\n      arc.nodeFlags = arc.flags;\n      //System.out.println(\"    insert isFinal; nextArc=\" + follow.target + \" isLast=\" + arc.isLast() + \" output=\" + outputs.outputToString(arc.output));\n      return arc;\n    } else {\n      return readFirstRealTargetArc(follow.target(), arc, in);\n    }\n  }\n\n","sourceOld":"  /**\n   * Follow the <code>follow</code> arc and read the first arc of its target;\n   * this changes the provided <code>arc</code> (2nd arg) in-place and returns\n   * it.\n   * \n   * @return Returns the second argument (<code>arc</code>).\n   */\n  public Arc<T> readFirstTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //int pos = address;\n    //System.out.println(\"    readFirstTarget follow.target=\" + follow.target + \" isFinal=\" + follow.isFinal());\n    if (follow.isFinal()) {\n      // Insert \"fake\" final first arc:\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput();\n      arc.flags = BIT_FINAL_ARC;\n      if (follow.target() <= 0) {\n        arc.flags |= BIT_LAST_ARC;\n      } else {\n        // NOTE: nextArc is a node (not an address!) in this case:\n        arc.nextArc = follow.target();\n      }\n      arc.target = FINAL_END_NODE;\n      //System.out.println(\"    insert isFinal; nextArc=\" + follow.target + \" isLast=\" + arc.isLast() + \" output=\" + outputs.outputToString(arc.output));\n      return arc;\n    } else {\n      return readFirstRealTargetArc(follow.target(), arc, in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["9cbc4730743fac2e69e7d622848778d3ad9f2151"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8","9cbc4730743fac2e69e7d622848778d3ad9f2151"],"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9cbc4730743fac2e69e7d622848778d3ad9f2151":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8","9cbc4730743fac2e69e7d622848778d3ad9f2151"],"71d31a7d5773508492505519bb5230b87c8937ad":["54204c8a3ca26aeafd273139fc29baf70d0f6786"],"f8061ddd97f3352007d927dae445884a6f3d857b":["9cbc4730743fac2e69e7d622848778d3ad9f2151","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71d31a7d5773508492505519bb5230b87c8937ad"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["71d31a7d5773508492505519bb5230b87c8937ad","f8061ddd97f3352007d927dae445884a6f3d857b"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8":["58884af1f68e9d61c217c753fbd6266d86a63b14","9cbc4730743fac2e69e7d622848778d3ad9f2151","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8"],"9cbc4730743fac2e69e7d622848778d3ad9f2151":["54204c8a3ca26aeafd273139fc29baf70d0f6786","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","f8061ddd97f3352007d927dae445884a6f3d857b"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"71d31a7d5773508492505519bb5230b87c8937ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}