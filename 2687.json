{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(TermFreqIterator,double).mjava","commits":[{"id":"d0af0c31a687dd847212ae59f661152896c76516","date":1380727430,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(TermFreqIterator,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(TermFreqIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator instanceof TermFreqPayloadIterator) {\n      throw new IllegalArgumentException(\"payloads are not supported\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_46, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bf41419d452997826ec5f17684993377be77f49","cbc3688252d4a8045d69a164236b2cf87b721f17","ba791bce8103c79e38f957e9c5a53a75871bd918","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(TermFreqPayloadIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(TermFreqIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(TermFreqPayloadIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"payloads are not supported\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_46, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(TermFreqIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator instanceof TermFreqPayloadIterator) {\n      throw new IllegalArgumentException(\"payloads are not supported\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_46, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d0af0c31a687dd847212ae59f661152896c76516":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["d0af0c31a687dd847212ae59f661152896c76516"]},"commit2Childs":{"d0af0c31a687dd847212ae59f661152896c76516":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0af0c31a687dd847212ae59f661152896c76516"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}