{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestHighFrequencyDictionary#testEmpty().mjava","commits":[{"id":"fc26b763cc567b2969823faaae2605455fcfc240","date":1329836202,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestHighFrequencyDictionary#testEmpty().mjava","pathOld":"/dev/null","sourceNew":"  public void testEmpty() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new HighFrequencyDictionary(ir, \"bogus\", 0.1f);\n    SortedIterator tf = (SortedIterator)dictionary.getWordsIterator();\n    tf.comparator();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf5fb562059c7bb2b5cd704fda52cd0bdd4aebf","date":1329839892,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestHighFrequencyDictionary#testEmpty().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestHighFrequencyDictionary#testEmpty().mjava","sourceNew":"  public void testEmpty() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new HighFrequencyDictionary(ir, \"bogus\", 0.1f);\n    BytesRefIterator tf = dictionary.getWordsIterator();\n    assertTrue(tf instanceof SortedIterator);\n    ((SortedIterator)tf).comparator();\n    assertNull(tf.next());\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmpty() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new HighFrequencyDictionary(ir, \"bogus\", 0.1f);\n    SortedIterator tf = (SortedIterator)dictionary.getWordsIterator();\n    tf.comparator();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecc52400551de6a7d8daf646be839487911627c","date":1330076979,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestHighFrequencyDictionary#testEmpty().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestHighFrequencyDictionary#testEmpty().mjava","sourceNew":"  public void testEmpty() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new HighFrequencyDictionary(ir, \"bogus\", 0.1f);\n    BytesRefIterator tf = dictionary.getWordsIterator();\n    assertNull(tf.getComparator());\n    assertNull(tf.next());\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmpty() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new HighFrequencyDictionary(ir, \"bogus\", 0.1f);\n    BytesRefIterator tf = dictionary.getWordsIterator();\n    assertTrue(tf instanceof SortedIterator);\n    ((SortedIterator)tf).comparator();\n    assertNull(tf.next());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestHighFrequencyDictionary#testEmpty().mjava","pathOld":"/dev/null","sourceNew":"  public void testEmpty() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new HighFrequencyDictionary(ir, \"bogus\", 0.1f);\n    BytesRefIterator tf = dictionary.getWordsIterator();\n    assertNull(tf.getComparator());\n    assertNull(tf.next());\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestHighFrequencyDictionary#testEmpty().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestHighFrequencyDictionary#testEmpty().mjava","sourceNew":"  public void testEmpty() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new HighFrequencyDictionary(ir, \"bogus\", 0.1f);\n    BytesRefIterator tf = dictionary.getWordsIterator();\n    assertNull(tf.getComparator());\n    assertNull(tf.next());\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmpty() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new HighFrequencyDictionary(ir, \"bogus\", 0.1f);\n    BytesRefIterator tf = dictionary.getWordsIterator();\n    assertNull(tf.getComparator());\n    assertNull(tf.next());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestHighFrequencyDictionary#testEmpty().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestHighFrequencyDictionary#testEmpty().mjava","sourceNew":"  public void testEmpty() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new HighFrequencyDictionary(ir, \"bogus\", 0.1f);\n    BytesRefIterator tf = dictionary.getWordsIterator();\n    assertNull(tf.getComparator());\n    assertNull(tf.next());\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmpty() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new HighFrequencyDictionary(ir, \"bogus\", 0.1f);\n    BytesRefIterator tf = dictionary.getWordsIterator();\n    assertNull(tf.getComparator());\n    assertNull(tf.next());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"fc26b763cc567b2969823faaae2605455fcfc240":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ecc52400551de6a7d8daf646be839487911627c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ecc52400551de6a7d8daf646be839487911627c":["fcf5fb562059c7bb2b5cd704fda52cd0bdd4aebf"],"fcf5fb562059c7bb2b5cd704fda52cd0bdd4aebf":["fc26b763cc567b2969823faaae2605455fcfc240"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6ecc52400551de6a7d8daf646be839487911627c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fc26b763cc567b2969823faaae2605455fcfc240":["fcf5fb562059c7bb2b5cd704fda52cd0bdd4aebf"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fc26b763cc567b2969823faaae2605455fcfc240","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"6ecc52400551de6a7d8daf646be839487911627c":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"fcf5fb562059c7bb2b5cd704fda52cd0bdd4aebf":["6ecc52400551de6a7d8daf646be839487911627c"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}