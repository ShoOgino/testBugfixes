{"path":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedSetOneValue().mjava","commits":[{"id":"56fca4cf418a84a71d0701bbb6fda4db84fa5796","date":1361031660,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedSetOneValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testOneValue().mjava","sourceNew":"  public void testSortedSetOneValue() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    \n    Document doc = new Document();\n    doc.add(new SortedSetDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n    \n    SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues(\"field\");\n    \n    dv.setDocument(0);\n    assertEquals(0, dv.nextOrd());\n    assertEquals(NO_MORE_ORDS, dv.nextOrd());\n    \n    BytesRef bytes = new BytesRef();\n    dv.lookupOrd(0, bytes);\n    assertEquals(new BytesRef(\"hello\"), bytes);\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testOneValue() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    \n    Document doc = new Document();\n    doc.add(new SortedSetDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n    \n    SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues(\"field\");\n    \n    dv.setDocument(0);\n    assertEquals(0, dv.nextOrd());\n    assertEquals(NO_MORE_ORDS, dv.nextOrd());\n    \n    BytesRef bytes = new BytesRef();\n    dv.lookupOrd(0, bytes);\n    assertEquals(new BytesRef(\"hello\"), bytes);\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3","date":1361060670,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedSetOneValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedSetOneValue().mjava","sourceNew":"  public void testSortedSetOneValue() throws IOException {\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    \n    Document doc = new Document();\n    doc.add(new SortedSetDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n    \n    SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues(\"field\");\n    \n    dv.setDocument(0);\n    assertEquals(0, dv.nextOrd());\n    assertEquals(NO_MORE_ORDS, dv.nextOrd());\n    \n    BytesRef bytes = new BytesRef();\n    dv.lookupOrd(0, bytes);\n    assertEquals(new BytesRef(\"hello\"), bytes);\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedSetOneValue() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    \n    Document doc = new Document();\n    doc.add(new SortedSetDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n    \n    SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues(\"field\");\n    \n    dv.setDocument(0);\n    assertEquals(0, dv.nextOrd());\n    assertEquals(NO_MORE_ORDS, dv.nextOrd());\n    \n    BytesRef bytes = new BytesRef();\n    dv.lookupOrd(0, bytes);\n    assertEquals(new BytesRef(\"hello\"), bytes);\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56fca4cf418a84a71d0701bbb6fda4db84fa5796":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3":["56fca4cf418a84a71d0701bbb6fda4db84fa5796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56fca4cf418a84a71d0701bbb6fda4db84fa5796","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56fca4cf418a84a71d0701bbb6fda4db84fa5796":["eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3"],"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}