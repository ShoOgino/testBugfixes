{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishAddDocument(DocumentsWriterPerThread,long).mjava","commits":[{"id":"9b832cbed6eb3d54a8bb9339296bdda8eeb53014","date":1279708040,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishAddDocument(DocumentsWriterPerThread,long).mjava","pathOld":"/dev/null","sourceNew":"  private final boolean finishAddDocument(DocumentsWriterPerThread perThread,\n      long perThreadRAMUsedBeforeAdd) throws IOException {\n    int numDocsPerThread = perThread.getNumDocsInRAM();\n    boolean flushed = maybeFlushPerThread(perThread);\n    if (flushed) {\n      int oldValue = numDocsInRAM.get();\n      while (!numDocsInRAM.compareAndSet(oldValue, oldValue - numDocsPerThread)) {\n        oldValue = numDocsInRAM.get();\n      }\n\n      sequenceIDLock.lock();\n      try {\n        minSequenceIDsPerThread.remove(perThread);\n        updateFlushedSequenceID();\n      } finally {\n        sequenceIDLock.unlock();\n      }\n    }\n\n    long deltaRAM = perThread.numBytesUsed - perThreadRAMUsedBeforeAdd;\n    long oldValue = ramUsed.get();\n    while (!ramUsed.compareAndSet(oldValue, oldValue + deltaRAM)) {\n      oldValue = ramUsed.get();\n    }\n\n    return flushed;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"334c1175813aea771a71728cd2c4ee4754fd0603","date":1279710173,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishAddDocument(DocumentsWriterPerThread,long).mjava","sourceNew":null,"sourceOld":"  private final boolean finishAddDocument(DocumentsWriterPerThread perThread,\n      long perThreadRAMUsedBeforeAdd) throws IOException {\n    int numDocsPerThread = perThread.getNumDocsInRAM();\n    boolean flushed = maybeFlushPerThread(perThread);\n    if (flushed) {\n      int oldValue = numDocsInRAM.get();\n      while (!numDocsInRAM.compareAndSet(oldValue, oldValue - numDocsPerThread)) {\n        oldValue = numDocsInRAM.get();\n      }\n\n      sequenceIDLock.lock();\n      try {\n        minSequenceIDsPerThread.remove(perThread);\n        updateFlushedSequenceID();\n      } finally {\n        sequenceIDLock.unlock();\n      }\n    }\n\n    long deltaRAM = perThread.numBytesUsed - perThreadRAMUsedBeforeAdd;\n    long oldValue = ramUsed.get();\n    while (!ramUsed.compareAndSet(oldValue, oldValue + deltaRAM)) {\n      oldValue = ramUsed.get();\n    }\n\n    return flushed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fe956d65251358d755c56f14fe8380644790e47","date":1279711318,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishAddDocument(DocumentsWriterPerThread,long).mjava","pathOld":"/dev/null","sourceNew":"  private final boolean finishAddDocument(DocumentsWriterPerThread perThread,\n      long perThreadRAMUsedBeforeAdd) throws IOException {\n    int numDocsPerThread = perThread.getNumDocsInRAM();\n    boolean flushed = maybeFlushPerThread(perThread);\n    if (flushed) {\n      int oldValue = numDocsInRAM.get();\n      while (!numDocsInRAM.compareAndSet(oldValue, oldValue - numDocsPerThread)) {\n        oldValue = numDocsInRAM.get();\n      }\n\n      sequenceIDLock.lock();\n      try {\n        minSequenceIDsPerThread.remove(perThread);\n        updateFlushedSequenceID();\n      } finally {\n        sequenceIDLock.unlock();\n      }\n    }\n\n    long deltaRAM = perThread.numBytesUsed - perThreadRAMUsedBeforeAdd;\n    long oldValue = ramUsed.get();\n    while (!ramUsed.compareAndSet(oldValue, oldValue + deltaRAM)) {\n      oldValue = ramUsed.get();\n    }\n\n    return flushed;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishAddDocument(DocumentsWriterPerThread,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishAddDocument(DocumentsWriterPerThread,long).mjava","sourceNew":"  private final boolean finishAddDocument(DocumentsWriterPerThread perThread,\n      long perThreadRAMUsedBeforeAdd) throws IOException {\n    int numDocsPerThread = perThread.getNumDocsInRAM();\n    boolean flushed = maybeFlushPerThread(perThread);\n    if (flushed) {\n      int oldValue = numDocsInRAM.get();\n      while (!numDocsInRAM.compareAndSet(oldValue, oldValue - numDocsPerThread)) {\n        oldValue = numDocsInRAM.get();\n      }\n    }\n\n    long deltaRAM = perThread.bytesUsed() - perThreadRAMUsedBeforeAdd;\n    long oldValue = ramUsed.get();\n    while (!ramUsed.compareAndSet(oldValue, oldValue + deltaRAM)) {\n      oldValue = ramUsed.get();\n    }\n\n    return flushed;\n  }\n\n","sourceOld":"  private final boolean finishAddDocument(DocumentsWriterPerThread perThread,\n      long perThreadRAMUsedBeforeAdd) throws IOException {\n    int numDocsPerThread = perThread.getNumDocsInRAM();\n    boolean flushed = maybeFlushPerThread(perThread);\n    if (flushed) {\n      int oldValue = numDocsInRAM.get();\n      while (!numDocsInRAM.compareAndSet(oldValue, oldValue - numDocsPerThread)) {\n        oldValue = numDocsInRAM.get();\n      }\n\n      sequenceIDLock.lock();\n      try {\n        minSequenceIDsPerThread.remove(perThread);\n        updateFlushedSequenceID();\n      } finally {\n        sequenceIDLock.unlock();\n      }\n    }\n\n    long deltaRAM = perThread.numBytesUsed - perThreadRAMUsedBeforeAdd;\n    long oldValue = ramUsed.get();\n    while (!ramUsed.compareAndSet(oldValue, oldValue + deltaRAM)) {\n      oldValue = ramUsed.get();\n    }\n\n    return flushed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff78505662c0b741e2663a9f38a4889c12a32c9f","date":1294908561,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishAddDocument(DocumentsWriterPerThread,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishAddDocument(DocumentsWriterPerThread,long).mjava","sourceNew":"  private final SegmentInfo finishAddDocument(DocumentsWriterPerThread perThread,\n      long perThreadRAMUsedBeforeAdd) throws IOException {\n    SegmentInfo newSegment = null;\n\n    int numDocsPerThread = perThread.getNumDocsInRAM();\n    if (perThread.getNumDocsInRAM() == maxBufferedDocs) {\n      newSegment = perThread.flush();\n\n      int oldValue = numDocsInRAM.get();\n      while (!numDocsInRAM.compareAndSet(oldValue, oldValue - numDocsPerThread)) {\n        oldValue = numDocsInRAM.get();\n      }\n    }\n\n    long deltaRAM = perThread.bytesUsed() - perThreadRAMUsedBeforeAdd;\n    long oldValue = ramUsed.get();\n    while (!ramUsed.compareAndSet(oldValue, oldValue + deltaRAM)) {\n      oldValue = ramUsed.get();\n    }\n\n    return newSegment;\n  }\n\n","sourceOld":"  private final boolean finishAddDocument(DocumentsWriterPerThread perThread,\n      long perThreadRAMUsedBeforeAdd) throws IOException {\n    int numDocsPerThread = perThread.getNumDocsInRAM();\n    boolean flushed = maybeFlushPerThread(perThread);\n    if (flushed) {\n      int oldValue = numDocsInRAM.get();\n      while (!numDocsInRAM.compareAndSet(oldValue, oldValue - numDocsPerThread)) {\n        oldValue = numDocsInRAM.get();\n      }\n    }\n\n    long deltaRAM = perThread.bytesUsed() - perThreadRAMUsedBeforeAdd;\n    long oldValue = ramUsed.get();\n    while (!ramUsed.compareAndSet(oldValue, oldValue + deltaRAM)) {\n      oldValue = ramUsed.get();\n    }\n\n    return flushed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86c34ea6a885f625f2e464756450d45b72653ef3","date":1295256222,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishAddDocument(DocumentsWriterPerThread,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishAddDocument(DocumentsWriterPerThread,long).mjava","sourceNew":"  private final SegmentInfo finishAddDocument(DocumentsWriterPerThread perThread,\n      long perThreadRAMUsedBeforeAdd) throws IOException {\n    SegmentInfo newSegment = null;\n\n    if (perThread.getNumDocsInRAM() == maxBufferedDocs) {\n      newSegment = perThread.flush();\n    }\n\n    long deltaRAM = perThread.bytesUsed() - perThreadRAMUsedBeforeAdd;\n    long oldValue = ramUsed.get();\n    while (!ramUsed.compareAndSet(oldValue, oldValue + deltaRAM)) {\n      oldValue = ramUsed.get();\n    }\n\n    return newSegment;\n  }\n\n","sourceOld":"  private final SegmentInfo finishAddDocument(DocumentsWriterPerThread perThread,\n      long perThreadRAMUsedBeforeAdd) throws IOException {\n    SegmentInfo newSegment = null;\n\n    int numDocsPerThread = perThread.getNumDocsInRAM();\n    if (perThread.getNumDocsInRAM() == maxBufferedDocs) {\n      newSegment = perThread.flush();\n\n      int oldValue = numDocsInRAM.get();\n      while (!numDocsInRAM.compareAndSet(oldValue, oldValue - numDocsPerThread)) {\n        oldValue = numDocsInRAM.get();\n      }\n    }\n\n    long deltaRAM = perThread.bytesUsed() - perThreadRAMUsedBeforeAdd;\n    long oldValue = ramUsed.get();\n    while (!ramUsed.compareAndSet(oldValue, oldValue + deltaRAM)) {\n      oldValue = ramUsed.get();\n    }\n\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf","date":1298618128,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishAddDocument(DocumentsWriterPerThread,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishAddDocument(DocumentsWriterPerThread,long).mjava","sourceNew":"  private final FlushedSegment finishAddDocument(DocumentsWriterPerThread perThread,\n      long perThreadRAMUsedBeforeAdd) throws IOException {\n    FlushedSegment newSegment = null;\n\n    if (perThread.getNumDocsInRAM() == maxBufferedDocs) {\n      newSegment = perThread.flush();\n    }\n\n    long deltaRAM = perThread.bytesUsed() - perThreadRAMUsedBeforeAdd;\n    long oldValue = ramUsed.get();\n    while (!ramUsed.compareAndSet(oldValue, oldValue + deltaRAM)) {\n      oldValue = ramUsed.get();\n    }\n\n    return newSegment;\n  }\n\n","sourceOld":"  private final SegmentInfo finishAddDocument(DocumentsWriterPerThread perThread,\n      long perThreadRAMUsedBeforeAdd) throws IOException {\n    SegmentInfo newSegment = null;\n\n    if (perThread.getNumDocsInRAM() == maxBufferedDocs) {\n      newSegment = perThread.flush();\n    }\n\n    long deltaRAM = perThread.bytesUsed() - perThreadRAMUsedBeforeAdd;\n    long oldValue = ramUsed.get();\n    while (!ramUsed.compareAndSet(oldValue, oldValue + deltaRAM)) {\n      oldValue = ramUsed.get();\n    }\n\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishAddDocument(DocumentsWriterPerThread,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishAddDocument(DocumentsWriterPerThread,long).mjava","sourceNew":"  private final FlushedSegment finishAddDocument(DocumentsWriterPerThread perThread,\n      long perThreadRAMUsedBeforeAdd) throws IOException {\n    FlushedSegment newSegment = null;\n    final int maxBufferedDocs = config.getMaxBufferedDocs();\n    if (maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n        perThread.getNumDocsInRAM() >= maxBufferedDocs) {\n      newSegment = perThread.flush();\n    }\n\n    long deltaRAM = perThread.bytesUsed() - perThreadRAMUsedBeforeAdd;\n    long oldValue = ramUsed.get();\n    while (!ramUsed.compareAndSet(oldValue, oldValue + deltaRAM)) {\n      oldValue = ramUsed.get();\n    }\n\n    return newSegment;\n  }\n\n","sourceOld":"  private final FlushedSegment finishAddDocument(DocumentsWriterPerThread perThread,\n      long perThreadRAMUsedBeforeAdd) throws IOException {\n    FlushedSegment newSegment = null;\n\n    if (perThread.getNumDocsInRAM() == maxBufferedDocs) {\n      newSegment = perThread.flush();\n    }\n\n    long deltaRAM = perThread.bytesUsed() - perThreadRAMUsedBeforeAdd;\n    long oldValue = ramUsed.get();\n    while (!ramUsed.compareAndSet(oldValue, oldValue + deltaRAM)) {\n      oldValue = ramUsed.get();\n    }\n\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishAddDocument(DocumentsWriterPerThread,long).mjava","sourceNew":null,"sourceOld":"  private final FlushedSegment finishAddDocument(DocumentsWriterPerThread perThread,\n      long perThreadRAMUsedBeforeAdd) throws IOException {\n    FlushedSegment newSegment = null;\n    final int maxBufferedDocs = config.getMaxBufferedDocs();\n    if (maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n        perThread.getNumDocsInRAM() >= maxBufferedDocs) {\n      newSegment = perThread.flush();\n    }\n\n    long deltaRAM = perThread.bytesUsed() - perThreadRAMUsedBeforeAdd;\n    long oldValue = ramUsed.get();\n    while (!ramUsed.compareAndSet(oldValue, oldValue + deltaRAM)) {\n      oldValue = ramUsed.get();\n    }\n\n    return newSegment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff78505662c0b741e2663a9f38a4889c12a32c9f":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf","334c1175813aea771a71728cd2c4ee4754fd0603"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"86c34ea6a885f625f2e464756450d45b72653ef3":["ff78505662c0b741e2663a9f38a4889c12a32c9f"],"8fe956d65251358d755c56f14fe8380644790e47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"334c1175813aea771a71728cd2c4ee4754fd0603":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf":["86c34ea6a885f625f2e464756450d45b72653ef3"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["8fe956d65251358d755c56f14fe8380644790e47","334c1175813aea771a71728cd2c4ee4754fd0603"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["334c1175813aea771a71728cd2c4ee4754fd0603"]},"commit2Childs":{"ff78505662c0b741e2663a9f38a4889c12a32c9f":["86c34ea6a885f625f2e464756450d45b72653ef3"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":[],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fe956d65251358d755c56f14fe8380644790e47","9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"86c34ea6a885f625f2e464756450d45b72653ef3":["bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf"],"8fe956d65251358d755c56f14fe8380644790e47":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"334c1175813aea771a71728cd2c4ee4754fd0603":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff78505662c0b741e2663a9f38a4889c12a32c9f"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["334c1175813aea771a71728cd2c4ee4754fd0603"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}