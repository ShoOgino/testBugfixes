{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,boolean).mjava","sourceNew":"  public DocTerms getTerms(AtomicReader reader, String field, boolean fasterButMoreRAM) throws IOException {\n    return (DocTerms) caches.get(DocTerms.class).get(reader, new Entry(field, Boolean.valueOf(fasterButMoreRAM)), false);\n  }\n\n","sourceOld":"  public DocTerms getTerms(AtomicReader reader, String field, boolean fasterButMoreRAM) throws IOException {\n    return (DocTerms) caches.get(DocTerms.class).get(reader, new Entry(field, Boolean.valueOf(fasterButMoreRAM)), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,boolean).mjava","sourceNew":null,"sourceOld":"  public DocTerms getTerms(AtomicReader reader, String field, boolean fasterButMoreRAM) throws IOException {\n    return (DocTerms) caches.get(DocTerms.class).get(reader, new Entry(field, Boolean.valueOf(fasterButMoreRAM)), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87d6f9603307ae2ad642fb01deedf031320fd0c3","date":1377877563,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public BinaryDocValues getTerms(AtomicReader reader, String field, boolean setDocsWithField) throws IOException {\n    return getTerms(reader, field, setDocsWithField, PackedInts.FAST);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public BinaryDocValues getTerms(AtomicReader reader, String field) throws IOException {\n    return getTerms(reader, field, PackedInts.FAST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getTerms(AtomicReader,String,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,boolean).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public BinaryDocValues getTerms(AtomicReader reader, String field, boolean setDocsWithField) throws IOException {\n    return getTerms(reader, field, setDocsWithField, PackedInts.FAST);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public BinaryDocValues getTerms(AtomicReader reader, String field, boolean setDocsWithField) throws IOException {\n    return getTerms(reader, field, setDocsWithField, PackedInts.FAST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getTerms(AtomicReader,String,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,boolean).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public BinaryDocValues getTerms(AtomicReader reader, String field, boolean setDocsWithField) throws IOException {\n    return getTerms(reader, field, setDocsWithField, PackedInts.FAST);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public BinaryDocValues getTerms(AtomicReader reader, String field, boolean setDocsWithField) throws IOException {\n    return getTerms(reader, field, setDocsWithField, PackedInts.FAST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getTerms(AtomicReader,String,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,boolean).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public BinaryDocValues getTerms(AtomicReader reader, String field, boolean setDocsWithField) throws IOException {\n    return getTerms(reader, field, setDocsWithField, PackedInts.FAST);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public BinaryDocValues getTerms(AtomicReader reader, String field, boolean setDocsWithField) throws IOException {\n    return getTerms(reader, field, setDocsWithField, PackedInts.FAST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["87d6f9603307ae2ad642fb01deedf031320fd0c3","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"56572ec06f1407c066d6b7399413178b33176cd8":["87d6f9603307ae2ad642fb01deedf031320fd0c3","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}