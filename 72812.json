{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int,IndexOptions,DocValuesType,int,int,int,boolean).mjava","commits":[{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int,IndexOptions,DocValuesType,int,int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int,IndexOptions,DocValuesType,int,int,boolean).mjava","sourceNew":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber, IndexOptions indexOptions, DocValuesType dvType, int dataDimensionCount, int indexDimensionCount, int dimensionNumBytes, boolean isSoftDeletesField) {\n      if (indexOptions != IndexOptions.NONE) {\n        IndexOptions currentOpts = this.indexOptions.get(fieldName);\n        if (currentOpts == null) {\n          this.indexOptions.put(fieldName, indexOptions);\n        } else if (currentOpts != IndexOptions.NONE && currentOpts != indexOptions) {\n          throw new IllegalArgumentException(\"cannot change field \\\"\" + fieldName + \"\\\" from index options=\" + currentOpts + \" to inconsistent index options=\" + indexOptions);\n        }\n      }\n      if (dvType != DocValuesType.NONE) {\n        DocValuesType currentDVType = docValuesType.get(fieldName);\n        if (currentDVType == null) {\n          docValuesType.put(fieldName, dvType);\n        } else if (currentDVType != DocValuesType.NONE && currentDVType != dvType) {\n          throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + dvType + \" for field \\\"\" + fieldName + \"\\\"\");\n        }\n      }\n      if (dataDimensionCount != 0) {\n        FieldDimensions dims = dimensions.get(fieldName);\n        if (dims != null) {\n          if (dims.dataDimensionCount != dataDimensionCount) {\n            throw new IllegalArgumentException(\"cannot change point data dimension count from \" + dims.dataDimensionCount + \" to \" + dataDimensionCount + \" for field=\\\"\" + fieldName + \"\\\"\");\n          }\n          if (dims.indexDimensionCount != indexDimensionCount) {\n            throw new IllegalArgumentException(\"cannot change point index dimension count from \" + dims.indexDimensionCount + \" to \" + indexDimensionCount + \" for field=\\\"\" + fieldName + \"\\\"\");\n          }\n          if (dims.dimensionNumBytes != dimensionNumBytes) {\n            throw new IllegalArgumentException(\"cannot change point numBytes from \" + dims.dimensionNumBytes + \" to \" + dimensionNumBytes + \" for field=\\\"\" + fieldName + \"\\\"\");\n          }\n        } else {\n          dimensions.put(fieldName, new FieldDimensions(dataDimensionCount, indexDimensionCount, dimensionNumBytes));\n        }\n      }\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        assert fieldNumber >= 0;\n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      if (isSoftDeletesField) {\n        if (softDeletesFieldName == null) {\n          throw new IllegalArgumentException(\"this index has [\" + fieldName + \"] as soft-deletes already but soft-deletes field is not configured in IWC\");\n        } else if (fieldName.equals(softDeletesFieldName) == false) {\n          throw new IllegalArgumentException(\"cannot configure [\" + softDeletesFieldName + \"] as soft-deletes; this index uses [\" + fieldName + \"] as soft-deletes already\");\n        }\n      } else if (fieldName.equals(softDeletesFieldName)) {\n        throw new IllegalArgumentException(\"cannot configure [\" + softDeletesFieldName + \"] as soft-deletes; this index uses [\" + fieldName + \"] as non-soft-deletes already\");\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","sourceOld":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber, IndexOptions indexOptions, DocValuesType dvType, int dimensionCount, int dimensionNumBytes, boolean isSoftDeletesField) {\n      if (indexOptions != IndexOptions.NONE) {\n        IndexOptions currentOpts = this.indexOptions.get(fieldName);\n        if (currentOpts == null) {\n          this.indexOptions.put(fieldName, indexOptions);\n        } else if (currentOpts != IndexOptions.NONE && currentOpts != indexOptions) {\n          throw new IllegalArgumentException(\"cannot change field \\\"\" + fieldName + \"\\\" from index options=\" + currentOpts + \" to inconsistent index options=\" + indexOptions);\n        }\n      }\n      if (dvType != DocValuesType.NONE) {\n        DocValuesType currentDVType = docValuesType.get(fieldName);\n        if (currentDVType == null) {\n          docValuesType.put(fieldName, dvType);\n        } else if (currentDVType != DocValuesType.NONE && currentDVType != dvType) {\n          throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + dvType + \" for field \\\"\" + fieldName + \"\\\"\");\n        }\n      }\n      if (dimensionCount != 0) {\n        FieldDimensions dims = dimensions.get(fieldName);\n        if (dims != null) {\n          if (dims.dimensionCount != dimensionCount) {\n            throw new IllegalArgumentException(\"cannot change point dimension count from \" + dims.dimensionCount + \" to \" + dimensionCount + \" for field=\\\"\" + fieldName + \"\\\"\");\n          }\n          if (dims.dimensionNumBytes != dimensionNumBytes) {\n            throw new IllegalArgumentException(\"cannot change point numBytes from \" + dims.dimensionNumBytes + \" to \" + dimensionNumBytes + \" for field=\\\"\" + fieldName + \"\\\"\");\n          }\n        } else {\n          dimensions.put(fieldName, new FieldDimensions(dimensionCount, dimensionNumBytes));\n        }\n      }\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        assert fieldNumber >= 0;\n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      if (isSoftDeletesField) {\n        if (softDeletesFieldName == null) {\n          throw new IllegalArgumentException(\"this index has [\" + fieldName + \"] as soft-deletes already but soft-deletes field is not configured in IWC\");\n        } else if (fieldName.equals(softDeletesFieldName) == false) {\n          throw new IllegalArgumentException(\"cannot configure [\" + softDeletesFieldName + \"] as soft-deletes; this index uses [\" + fieldName + \"] as soft-deletes already\");\n        }\n      } else if (fieldName.equals(softDeletesFieldName)) {\n        throw new IllegalArgumentException(\"cannot configure [\" + softDeletesFieldName + \"] as soft-deletes; this index uses [\" + fieldName + \"] as non-soft-deletes already\");\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int,IndexOptions,DocValuesType,int,int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int,IndexOptions,DocValuesType,int,int,int,boolean).mjava","sourceNew":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber, IndexOptions indexOptions, DocValuesType dvType, int dimensionCount, int indexDimensionCount, int dimensionNumBytes, boolean isSoftDeletesField) {\n      if (indexOptions != IndexOptions.NONE) {\n        IndexOptions currentOpts = this.indexOptions.get(fieldName);\n        if (currentOpts == null) {\n          this.indexOptions.put(fieldName, indexOptions);\n        } else if (currentOpts != IndexOptions.NONE && currentOpts != indexOptions) {\n          throw new IllegalArgumentException(\"cannot change field \\\"\" + fieldName + \"\\\" from index options=\" + currentOpts + \" to inconsistent index options=\" + indexOptions);\n        }\n      }\n      if (dvType != DocValuesType.NONE) {\n        DocValuesType currentDVType = docValuesType.get(fieldName);\n        if (currentDVType == null) {\n          docValuesType.put(fieldName, dvType);\n        } else if (currentDVType != DocValuesType.NONE && currentDVType != dvType) {\n          throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + dvType + \" for field \\\"\" + fieldName + \"\\\"\");\n        }\n      }\n      if (dimensionCount != 0) {\n        FieldDimensions dims = dimensions.get(fieldName);\n        if (dims != null) {\n          if (dims.dimensionCount != dimensionCount) {\n            throw new IllegalArgumentException(\"cannot change point dimension count from \" + dims.dimensionCount + \" to \" + dimensionCount + \" for field=\\\"\" + fieldName + \"\\\"\");\n          }\n          if (dims.indexDimensionCount != indexDimensionCount) {\n            throw new IllegalArgumentException(\"cannot change point index dimension count from \" + dims.indexDimensionCount + \" to \" + indexDimensionCount + \" for field=\\\"\" + fieldName + \"\\\"\");\n          }\n          if (dims.dimensionNumBytes != dimensionNumBytes) {\n            throw new IllegalArgumentException(\"cannot change point numBytes from \" + dims.dimensionNumBytes + \" to \" + dimensionNumBytes + \" for field=\\\"\" + fieldName + \"\\\"\");\n          }\n        } else {\n          dimensions.put(fieldName, new FieldDimensions(dimensionCount, indexDimensionCount, dimensionNumBytes));\n        }\n      }\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        assert fieldNumber >= 0;\n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      if (isSoftDeletesField) {\n        if (softDeletesFieldName == null) {\n          throw new IllegalArgumentException(\"this index has [\" + fieldName + \"] as soft-deletes already but soft-deletes field is not configured in IWC\");\n        } else if (fieldName.equals(softDeletesFieldName) == false) {\n          throw new IllegalArgumentException(\"cannot configure [\" + softDeletesFieldName + \"] as soft-deletes; this index uses [\" + fieldName + \"] as soft-deletes already\");\n        }\n      } else if (fieldName.equals(softDeletesFieldName)) {\n        throw new IllegalArgumentException(\"cannot configure [\" + softDeletesFieldName + \"] as soft-deletes; this index uses [\" + fieldName + \"] as non-soft-deletes already\");\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","sourceOld":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber, IndexOptions indexOptions, DocValuesType dvType, int dataDimensionCount, int indexDimensionCount, int dimensionNumBytes, boolean isSoftDeletesField) {\n      if (indexOptions != IndexOptions.NONE) {\n        IndexOptions currentOpts = this.indexOptions.get(fieldName);\n        if (currentOpts == null) {\n          this.indexOptions.put(fieldName, indexOptions);\n        } else if (currentOpts != IndexOptions.NONE && currentOpts != indexOptions) {\n          throw new IllegalArgumentException(\"cannot change field \\\"\" + fieldName + \"\\\" from index options=\" + currentOpts + \" to inconsistent index options=\" + indexOptions);\n        }\n      }\n      if (dvType != DocValuesType.NONE) {\n        DocValuesType currentDVType = docValuesType.get(fieldName);\n        if (currentDVType == null) {\n          docValuesType.put(fieldName, dvType);\n        } else if (currentDVType != DocValuesType.NONE && currentDVType != dvType) {\n          throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + dvType + \" for field \\\"\" + fieldName + \"\\\"\");\n        }\n      }\n      if (dataDimensionCount != 0) {\n        FieldDimensions dims = dimensions.get(fieldName);\n        if (dims != null) {\n          if (dims.dataDimensionCount != dataDimensionCount) {\n            throw new IllegalArgumentException(\"cannot change point data dimension count from \" + dims.dataDimensionCount + \" to \" + dataDimensionCount + \" for field=\\\"\" + fieldName + \"\\\"\");\n          }\n          if (dims.indexDimensionCount != indexDimensionCount) {\n            throw new IllegalArgumentException(\"cannot change point index dimension count from \" + dims.indexDimensionCount + \" to \" + indexDimensionCount + \" for field=\\\"\" + fieldName + \"\\\"\");\n          }\n          if (dims.dimensionNumBytes != dimensionNumBytes) {\n            throw new IllegalArgumentException(\"cannot change point numBytes from \" + dims.dimensionNumBytes + \" to \" + dimensionNumBytes + \" for field=\\\"\" + fieldName + \"\\\"\");\n          }\n        } else {\n          dimensions.put(fieldName, new FieldDimensions(dataDimensionCount, indexDimensionCount, dimensionNumBytes));\n        }\n      }\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        assert fieldNumber >= 0;\n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      if (isSoftDeletesField) {\n        if (softDeletesFieldName == null) {\n          throw new IllegalArgumentException(\"this index has [\" + fieldName + \"] as soft-deletes already but soft-deletes field is not configured in IWC\");\n        } else if (fieldName.equals(softDeletesFieldName) == false) {\n          throw new IllegalArgumentException(\"cannot configure [\" + softDeletesFieldName + \"] as soft-deletes; this index uses [\" + fieldName + \"] as soft-deletes already\");\n        }\n      } else if (fieldName.equals(softDeletesFieldName)) {\n        throw new IllegalArgumentException(\"cannot configure [\" + softDeletesFieldName + \"] as soft-deletes; this index uses [\" + fieldName + \"] as non-soft-deletes already\");\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6652c943595e92c187ee904c382863013eae28f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}