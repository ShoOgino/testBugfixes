{"path":"solr/core/src/java/org/apache/solr/schema/IndexSchema.SchemaProps#SchemaProps(String,SolrParams,IndexSchema).mjava","commits":[{"id":"83ed5fbd2aab9f605f08774c9293e521ec99f0a1","date":1461251300,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema.SchemaProps#SchemaProps(String,SolrParams,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"    SchemaProps(String name, SolrParams params, IndexSchema schema) {\n      this.name = name;\n      this.params = params;\n      this.schema = schema;\n      showDefaults = params.getBool(\"showDefaults\", false);\n      includeDynamic = params.getBool(\"includeDynamic\", false);\n\n      String sourceFieldListParam = params.get(SOURCE_FIELD_LIST);\n      if (null != sourceFieldListParam) {\n        String[] fields = sourceFieldListParam.trim().split(\"[,\\\\s]+\");\n        if (fields.length > 0) {\n          requestedSourceFields = new HashSet<>(Arrays.asList(fields));\n          requestedSourceFields.remove(\"\"); // Remove empty values, if any\n        }\n      }\n      String destinationFieldListParam = params.get(DESTINATION_FIELD_LIST);\n      if (null != destinationFieldListParam) {\n        String[] fields = destinationFieldListParam.trim().split(\"[,\\\\s]+\");\n        if (fields.length > 0) {\n          requestedDestinationFields = new HashSet<>(Arrays.asList(fields));\n          requestedDestinationFields.remove(\"\"); // Remove empty values, if any\n        }\n      }\n\n      String flParam = params.get(CommonParams.FL);\n      if (null != flParam) {\n        String[] fields = flParam.trim().split(\"[,\\\\s]+\");\n        if (fields.length > 0)\n          requestedFields = new LinkedHashSet<>(Stream.of(fields)\n              .filter(it -> !it.trim().isEmpty())\n              .collect(Collectors.toList()));\n\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9ac1922a6e5b4d1ec298c612640d012484d4e022"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ac1922a6e5b4d1ec298c612640d012484d4e022","date":1461304949,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema.SchemaProps#SchemaProps(String,SolrParams,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema.SchemaProps#SchemaProps(String,SolrParams,IndexSchema).mjava","sourceNew":"    SchemaProps(String name, SolrParams params, IndexSchema schema) {\n      this.name = name;\n      this.params = params;\n      this.schema = schema;\n      showDefaults = params.getBool(\"showDefaults\", false);\n      includeDynamic = params.getBool(\"includeDynamic\", false);\n      requestedSourceFields = readMultiVals(SOURCE_FIELD_LIST);\n      requestedDestinationFields = readMultiVals(DESTINATION_FIELD_LIST);\n      requestedFields = readMultiVals(CommonParams.FL);\n\n    }\n\n","sourceOld":"    SchemaProps(String name, SolrParams params, IndexSchema schema) {\n      this.name = name;\n      this.params = params;\n      this.schema = schema;\n      showDefaults = params.getBool(\"showDefaults\", false);\n      includeDynamic = params.getBool(\"includeDynamic\", false);\n\n      String sourceFieldListParam = params.get(SOURCE_FIELD_LIST);\n      if (null != sourceFieldListParam) {\n        String[] fields = sourceFieldListParam.trim().split(\"[,\\\\s]+\");\n        if (fields.length > 0) {\n          requestedSourceFields = new HashSet<>(Arrays.asList(fields));\n          requestedSourceFields.remove(\"\"); // Remove empty values, if any\n        }\n      }\n      String destinationFieldListParam = params.get(DESTINATION_FIELD_LIST);\n      if (null != destinationFieldListParam) {\n        String[] fields = destinationFieldListParam.trim().split(\"[,\\\\s]+\");\n        if (fields.length > 0) {\n          requestedDestinationFields = new HashSet<>(Arrays.asList(fields));\n          requestedDestinationFields.remove(\"\"); // Remove empty values, if any\n        }\n      }\n\n      String flParam = params.get(CommonParams.FL);\n      if (null != flParam) {\n        String[] fields = flParam.trim().split(\"[,\\\\s]+\");\n        if (fields.length > 0)\n          requestedFields = new LinkedHashSet<>(Stream.of(fields)\n              .filter(it -> !it.trim().isEmpty())\n              .collect(Collectors.toList()));\n\n      }\n\n    }\n\n","bugFix":["83ed5fbd2aab9f605f08774c9293e521ec99f0a1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83ed5fbd2aab9f605f08774c9293e521ec99f0a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ac1922a6e5b4d1ec298c612640d012484d4e022":["83ed5fbd2aab9f605f08774c9293e521ec99f0a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ac1922a6e5b4d1ec298c612640d012484d4e022"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83ed5fbd2aab9f605f08774c9293e521ec99f0a1"],"83ed5fbd2aab9f605f08774c9293e521ec99f0a1":["9ac1922a6e5b4d1ec298c612640d012484d4e022"],"9ac1922a6e5b4d1ec298c612640d012484d4e022":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}