{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","commits":[{"id":"0eff89b16ebd0046c839c5d02ee44500be5c7886","date":1355766557,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","sourceNew":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n    \n    \n    long timeoutAt = System.currentTimeMillis() + 45000;\n\n    boolean allTimesAreCorrect = false;\n    while (System.currentTimeMillis() < timeoutAt) {\n      Map<String,Long> urlToTimeAfter = new HashMap<String,Long>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","sourceOld":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n    \n    \n    long timeoutAt = System.currentTimeMillis() + 45000;\n\n    boolean allTimesAreCorrect = false;\n    while (System.currentTimeMillis() < timeoutAt) {\n      Map<String,Long> urlToTimeAfter = new HashMap<String,Long>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","pathOld":"/dev/null","sourceNew":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n    \n    \n    long timeoutAt = System.currentTimeMillis() + 45000;\n\n    boolean allTimesAreCorrect = false;\n    while (System.currentTimeMillis() < timeoutAt) {\n      Map<String,Long> urlToTimeAfter = new HashMap<String,Long>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","sourceNew":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n    \n    \n    long timeoutAt = System.currentTimeMillis() + 45000;\n\n    boolean allTimesAreCorrect = false;\n    while (System.currentTimeMillis() < timeoutAt) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","sourceOld":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n    \n    \n    long timeoutAt = System.currentTimeMillis() + 45000;\n\n    boolean allTimesAreCorrect = false;\n    while (System.currentTimeMillis() < timeoutAt) {\n      Map<String,Long> urlToTimeAfter = new HashMap<String,Long>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3a46663789411cdf016145a96a40cf861798ae3","date":1395119088,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","sourceNew":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException, InterruptedException {\n    \n    \n    long timeoutAt = System.currentTimeMillis() + 45000;\n\n    boolean allTimesAreCorrect = false;\n    while (System.currentTimeMillis() < timeoutAt) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    return allTimesAreCorrect;\n  }\n\n","sourceOld":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n    \n    \n    long timeoutAt = System.currentTimeMillis() + 45000;\n\n    boolean allTimesAreCorrect = false;\n    while (System.currentTimeMillis() < timeoutAt) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"963b0a9b072593721af39e1d9b815fba17e88e7f","date":1395120846,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","sourceNew":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n    \n    \n    long timeoutAt = System.currentTimeMillis() + 45000;\n\n    boolean allTimesAreCorrect = false;\n    while (System.currentTimeMillis() < timeoutAt) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","sourceOld":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException, InterruptedException {\n    \n    \n    long timeoutAt = System.currentTimeMillis() + 45000;\n\n    boolean allTimesAreCorrect = false;\n    while (System.currentTimeMillis() < timeoutAt) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    return allTimesAreCorrect;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","sourceNew":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n\n\n    TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS);\n\n    boolean allTimesAreCorrect = false;\n    while (! timeout.hasTimedOut()) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","sourceOld":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n    \n    \n    long timeoutAt = System.currentTimeMillis() + 45000;\n\n    boolean allTimesAreCorrect = false;\n    while (System.currentTimeMillis() < timeoutAt) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","bugFix":null,"bugIntro":["273ff2f5b0b365591fcbe91ea23b5e97027ca60d","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","sourceNew":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n\n\n    TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    boolean allTimesAreCorrect = false;\n    while (! timeout.hasTimedOut()) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","sourceOld":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n\n\n    TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS);\n\n    boolean allTimesAreCorrect = false;\n    while (! timeout.hasTimedOut()) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","sourceNew":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n\n\n    TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    boolean allTimesAreCorrect = false;\n    while (! timeout.hasTimedOut()) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","sourceOld":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n\n\n    TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    boolean allTimesAreCorrect = false;\n    while (! timeout.hasTimedOut()) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","sourceNew":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n\n\n    TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    boolean allTimesAreCorrect = false;\n    while (! timeout.hasTimedOut()) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","sourceOld":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n\n\n    TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    boolean allTimesAreCorrect = false;\n    while (! timeout.hasTimedOut()) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"963b0a9b072593721af39e1d9b815fba17e88e7f":["d3a46663789411cdf016145a96a40cf861798ae3"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0eff89b16ebd0046c839c5d02ee44500be5c7886"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0eff89b16ebd0046c839c5d02ee44500be5c7886"],"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"d3a46663789411cdf016145a96a40cf861798ae3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["963b0a9b072593721af39e1d9b815fba17e88e7f"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"963b0a9b072593721af39e1d9b815fba17e88e7f":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d3a46663789411cdf016145a96a40cf861798ae3"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3a46663789411cdf016145a96a40cf861798ae3":["963b0a9b072593721af39e1d9b815fba17e88e7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0eff89b16ebd0046c839c5d02ee44500be5c7886"],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}