{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#next().mjava","commits":[{"id":"038e2a9b07e2f8ae58336613cea227bf8b973484","date":1346850972,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#next().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        //System.out.println(\"BTR.next() seekPending=\" + seekPending + \" pendingSeekCount=\" + state.termBlockOrd);\n\n        // If seek was previously called and the term was cached,\n        // usually caller is just going to pull a D/&PEnum or get\n        // docFreq, etc.  But, if they then call next(),\n        // this method catches up all internal state so next()\n        // works properly:\n        if (seekPending) {\n          assert !indexIsCurrent;\n          in.seek(state.blockFilePointer);\n          final int pendingSeekCount = state.termBlockOrd;\n          boolean result = nextBlock();\n\n          final long savOrd = state.ord;\n\n          // Block must exist since seek(TermState) was called w/ a\n          // TermState previously returned by this enum when positioned\n          // on a real term:\n          assert result;\n\n          while(state.termBlockOrd < pendingSeekCount) {\n            BytesRef nextResult = _next();\n            assert nextResult != null;\n          }\n          seekPending = false;\n          state.ord = savOrd;\n        }\n        return _next();\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n        //System.out.println(\"BTR.next() seekPending=\" + seekPending + \" pendingSeekCount=\" + state.termBlockOrd);\n\n        // If seek was previously called and the term was cached,\n        // usually caller is just going to pull a D/&PEnum or get\n        // docFreq, etc.  But, if they then call next(),\n        // this method catches up all internal state so next()\n        // works properly:\n        if (seekPending) {\n          assert !indexIsCurrent;\n          in.seek(state.blockFilePointer);\n          final int pendingSeekCount = state.termBlockOrd;\n          boolean result = nextBlock();\n\n          final long savOrd = state.ord;\n\n          // Block must exist since seek(TermState) was called w/ a\n          // TermState previously returned by this enum when positioned\n          // on a real term:\n          assert result;\n\n          while(state.termBlockOrd < pendingSeekCount) {\n            BytesRef nextResult = _next();\n            assert nextResult != null;\n          }\n          seekPending = false;\n          state.ord = savOrd;\n        }\n        return _next();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"038e2a9b07e2f8ae58336613cea227bf8b973484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}