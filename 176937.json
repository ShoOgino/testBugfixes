{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readSortedSetFieldWithAddresses(int,IndexInput,FieldInfos).mjava","commits":[{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readSortedSetFieldWithAddresses(int,IndexInput,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  private void readSortedSetFieldWithAddresses(int fieldNumber, IndexInput meta, FieldInfos infos) throws IOException {\n    // sortedset = binary + numeric (addresses) + ordIndex\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(fieldNumber, b);\n\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n1 = readNumericEntry(meta);\n    ords.put(fieldNumber, n1);\n\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n2 = readNumericEntry(meta);\n    ordIndexes.put(fieldNumber, n2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readSortedSetFieldWithAddresses(int,IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readSortedSetFieldWithAddresses(int,IndexInput,FieldInfos).mjava","sourceNew":"  private void readSortedSetFieldWithAddresses(int fieldNumber, IndexInput meta, FieldInfos infos) throws IOException {\n    // sortedset = binary + numeric (addresses) + ordIndex\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(fieldNumber, b);\n\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n1 = readNumericEntry(meta);\n    ords.put(fieldNumber, n1);\n\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n2 = readNumericEntry(meta);\n    ordIndexes.put(fieldNumber, n2);\n  }\n\n","sourceOld":"  private void readSortedSetFieldWithAddresses(int fieldNumber, IndexInput meta, FieldInfos infos) throws IOException {\n    // sortedset = binary + numeric (addresses) + ordIndex\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(fieldNumber, b);\n\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n1 = readNumericEntry(meta);\n    ords.put(fieldNumber, n1);\n\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n2 = readNumericEntry(meta);\n    ordIndexes.put(fieldNumber, n2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readSortedSetFieldWithAddresses(int,IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readSortedSetFieldWithAddresses(int,IndexInput,FieldInfos).mjava","sourceNew":"  private void readSortedSetFieldWithAddresses(int fieldNumber, IndexInput meta, FieldInfos infos) throws IOException {\n    // sortedset = binary + numeric (addresses) + ordIndex\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(fieldNumber, b);\n\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n1 = readNumericEntry(meta);\n    ords.put(fieldNumber, n1);\n\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n2 = readNumericEntry(meta);\n    ordIndexes.put(fieldNumber, n2);\n  }\n\n","sourceOld":"  private void readSortedSetFieldWithAddresses(int fieldNumber, IndexInput meta, FieldInfos infos) throws IOException {\n    // sortedset = binary + numeric (addresses) + ordIndex\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(fieldNumber, b);\n\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n1 = readNumericEntry(meta);\n    ords.put(fieldNumber, n1);\n\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n2 = readNumericEntry(meta);\n    ordIndexes.put(fieldNumber, n2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}