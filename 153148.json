{"path":"src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(String,int).mjava","commits":[{"id":"8eb6c8a345eb88b08768b150ffd0bd8088827260","date":1161193988,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(String,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws TransformerConfigurationException \n   */ \n  public synchronized Transformer getTransformer(String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isLoggable(Level.FINE)) {\n        log.fine(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.throwing(getClass().getName(), \"getTransformer\", tce);\n      final IOException ioe = new IOException(\"newTransformer fails ( \" + lastFilename + \")\");\n      ioe.initCause(tce);\n      throw ioe;\n    }\n    \n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(SolrConfig,String,int).mjava","pathOld":"src/java/org/apache/solr/util/xslt/TransformerProvider#getTransformer(String,int).mjava","sourceNew":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws TransformerConfigurationException \n   */ \n  public synchronized Transformer getTransformer(SolrConfig solrConfig, String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isLoggable(Level.FINE)) {\n        log.fine(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(solrConfig, filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.throwing(getClass().getName(), \"getTransformer\", tce);\n      final IOException ioe = new IOException(\"newTransformer fails ( \" + lastFilename + \")\");\n      ioe.initCause(tce);\n      throw ioe;\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a new Transformer, possibly created from our cached Templates object  \n   * @throws TransformerConfigurationException \n   */ \n  public synchronized Transformer getTransformer(String filename,int cacheLifetimeSeconds) throws IOException {\n    // For now, the Templates are blindly reloaded once cacheExpires is over.\n    // It'd be better to check the file modification time to reload only if needed.\n    if(lastTemplates!=null && filename.equals(lastFilename) && System.currentTimeMillis() < cacheExpires) {\n      if(log.isLoggable(Level.FINE)) {\n        log.fine(\"Using cached Templates:\" + filename);\n      }\n    } else {\n      lastTemplates = getTemplates(filename,cacheLifetimeSeconds);\n    }\n    \n    Transformer result = null;\n    \n    try {\n      result = lastTemplates.newTransformer();\n    } catch(TransformerConfigurationException tce) {\n      log.throwing(getClass().getName(), \"getTransformer\", tce);\n      final IOException ioe = new IOException(\"newTransformer fails ( \" + lastFilename + \")\");\n      ioe.initCause(tce);\n      throw ioe;\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["8eb6c8a345eb88b08768b150ffd0bd8088827260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8eb6c8a345eb88b08768b150ffd0bd8088827260":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8eb6c8a345eb88b08768b150ffd0bd8088827260"],"8eb6c8a345eb88b08768b150ffd0bd8088827260":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6d6338c87060be5f66757a94945975f3bbd377a9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}