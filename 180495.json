{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked5#decode(long[],int,int[],int,int).mjava","commits":[{"id":"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f","date":1345677220,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked5#decode(long[],int,int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long block0 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (block0 >>> 59);\n        values[valuesOffset++] = (int) ((block0 >>> 54) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 49) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 44) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 39) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 34) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 29) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 24) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 19) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 14) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 9) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 4) & 31L);\n        final long block1 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block0 & 15L) << 1) | (block1 >>> 63));\n        values[valuesOffset++] = (int) ((block1 >>> 58) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 53) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 48) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 43) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 38) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 33) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 28) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 23) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 18) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 13) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 8) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 3) & 31L);\n        final long block2 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block1 & 7L) << 2) | (block2 >>> 62));\n        values[valuesOffset++] = (int) ((block2 >>> 57) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 52) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 47) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 42) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 37) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 32) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 27) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 22) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 17) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 12) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 7) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 2) & 31L);\n        final long block3 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block2 & 3L) << 3) | (block3 >>> 61));\n        values[valuesOffset++] = (int) ((block3 >>> 56) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 51) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 46) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 41) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 36) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 31) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 26) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 21) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 16) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 11) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 6) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 1) & 31L);\n        final long block4 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block3 & 1L) << 4) | (block4 >>> 60));\n        values[valuesOffset++] = (int) ((block4 >>> 55) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 50) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 45) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 40) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 35) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 30) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 25) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 20) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 15) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 10) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 5) & 31L);\n        values[valuesOffset++] = (int) (block4 & 31L);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["818b04e906a094f03512fe99c83e359da8277708"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"353f5909b00345d98d079a7db9a1bbe7485b1ea6","date":1345745476,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked5#decode(long[],int,int[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked5#decode(long[],int,int[],int,int).mjava","sourceNew":"    @Override\n    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long block0 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (block0 >>> 59);\n        values[valuesOffset++] = (int) ((block0 >>> 54) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 49) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 44) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 39) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 34) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 29) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 24) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 19) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 14) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 9) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 4) & 31L);\n        final long block1 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block0 & 15L) << 1) | (block1 >>> 63));\n        values[valuesOffset++] = (int) ((block1 >>> 58) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 53) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 48) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 43) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 38) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 33) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 28) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 23) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 18) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 13) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 8) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 3) & 31L);\n        final long block2 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block1 & 7L) << 2) | (block2 >>> 62));\n        values[valuesOffset++] = (int) ((block2 >>> 57) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 52) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 47) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 42) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 37) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 32) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 27) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 22) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 17) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 12) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 7) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 2) & 31L);\n        final long block3 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block2 & 3L) << 3) | (block3 >>> 61));\n        values[valuesOffset++] = (int) ((block3 >>> 56) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 51) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 46) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 41) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 36) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 31) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 26) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 21) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 16) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 11) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 6) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 1) & 31L);\n        final long block4 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block3 & 1L) << 4) | (block4 >>> 60));\n        values[valuesOffset++] = (int) ((block4 >>> 55) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 50) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 45) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 40) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 35) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 30) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 25) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 20) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 15) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 10) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 5) & 31L);\n        values[valuesOffset++] = (int) (block4 & 31L);\n      }\n    }\n\n","sourceOld":"    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long block0 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (block0 >>> 59);\n        values[valuesOffset++] = (int) ((block0 >>> 54) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 49) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 44) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 39) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 34) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 29) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 24) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 19) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 14) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 9) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 4) & 31L);\n        final long block1 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block0 & 15L) << 1) | (block1 >>> 63));\n        values[valuesOffset++] = (int) ((block1 >>> 58) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 53) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 48) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 43) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 38) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 33) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 28) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 23) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 18) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 13) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 8) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 3) & 31L);\n        final long block2 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block1 & 7L) << 2) | (block2 >>> 62));\n        values[valuesOffset++] = (int) ((block2 >>> 57) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 52) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 47) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 42) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 37) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 32) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 27) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 22) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 17) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 12) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 7) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 2) & 31L);\n        final long block3 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block2 & 3L) << 3) | (block3 >>> 61));\n        values[valuesOffset++] = (int) ((block3 >>> 56) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 51) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 46) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 41) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 36) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 31) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 26) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 21) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 16) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 11) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 6) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 1) & 31L);\n        final long block4 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block3 & 1L) << 4) | (block4 >>> 60));\n        values[valuesOffset++] = (int) ((block4 >>> 55) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 50) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 45) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 40) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 35) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 30) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 25) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 20) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 15) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 10) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 5) & 31L);\n        values[valuesOffset++] = (int) (block4 & 31L);\n      }\n    }\n\n","bugFix":null,"bugIntro":["818b04e906a094f03512fe99c83e359da8277708"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked5#decode(long[],int,int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long block0 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (block0 >>> 59);\n        values[valuesOffset++] = (int) ((block0 >>> 54) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 49) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 44) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 39) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 34) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 29) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 24) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 19) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 14) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 9) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 4) & 31L);\n        final long block1 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block0 & 15L) << 1) | (block1 >>> 63));\n        values[valuesOffset++] = (int) ((block1 >>> 58) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 53) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 48) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 43) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 38) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 33) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 28) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 23) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 18) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 13) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 8) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 3) & 31L);\n        final long block2 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block1 & 7L) << 2) | (block2 >>> 62));\n        values[valuesOffset++] = (int) ((block2 >>> 57) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 52) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 47) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 42) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 37) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 32) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 27) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 22) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 17) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 12) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 7) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 2) & 31L);\n        final long block3 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block2 & 3L) << 3) | (block3 >>> 61));\n        values[valuesOffset++] = (int) ((block3 >>> 56) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 51) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 46) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 41) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 36) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 31) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 26) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 21) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 16) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 11) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 6) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 1) & 31L);\n        final long block4 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block3 & 1L) << 4) | (block4 >>> 60));\n        values[valuesOffset++] = (int) ((block4 >>> 55) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 50) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 45) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 40) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 35) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 30) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 25) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 20) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 15) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 10) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 5) & 31L);\n        values[valuesOffset++] = (int) (block4 & 31L);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"818b04e906a094f03512fe99c83e359da8277708","date":1346427149,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked5#decode(long[],int,int[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked5#decode(long[],int,int[],int,int).mjava","sourceNew":"  @Override\n  public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < iterations; ++i) {\n      final long block0 = blocks[blocksOffset++];\n      values[valuesOffset++] = (int) (block0 >>> 59);\n      values[valuesOffset++] = (int) ((block0 >>> 54) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 49) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 44) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 39) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 34) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 29) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 24) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 19) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 14) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 9) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 4) & 31L);\n      final long block1 = blocks[blocksOffset++];\n      values[valuesOffset++] = (int) (((block0 & 15L) << 1) | (block1 >>> 63));\n      values[valuesOffset++] = (int) ((block1 >>> 58) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 53) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 48) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 43) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 38) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 33) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 28) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 23) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 18) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 13) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 8) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 3) & 31L);\n      final long block2 = blocks[blocksOffset++];\n      values[valuesOffset++] = (int) (((block1 & 7L) << 2) | (block2 >>> 62));\n      values[valuesOffset++] = (int) ((block2 >>> 57) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 52) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 47) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 42) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 37) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 32) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 27) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 22) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 17) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 12) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 7) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 2) & 31L);\n      final long block3 = blocks[blocksOffset++];\n      values[valuesOffset++] = (int) (((block2 & 3L) << 3) | (block3 >>> 61));\n      values[valuesOffset++] = (int) ((block3 >>> 56) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 51) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 46) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 41) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 36) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 31) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 26) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 21) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 16) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 11) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 6) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 1) & 31L);\n      final long block4 = blocks[blocksOffset++];\n      values[valuesOffset++] = (int) (((block3 & 1L) << 4) | (block4 >>> 60));\n      values[valuesOffset++] = (int) ((block4 >>> 55) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 50) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 45) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 40) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 35) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 30) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 25) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 20) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 15) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 10) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 5) & 31L);\n      values[valuesOffset++] = (int) (block4 & 31L);\n    }\n  }\n\n","sourceOld":"    @Override\n    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long block0 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (block0 >>> 59);\n        values[valuesOffset++] = (int) ((block0 >>> 54) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 49) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 44) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 39) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 34) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 29) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 24) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 19) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 14) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 9) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 4) & 31L);\n        final long block1 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block0 & 15L) << 1) | (block1 >>> 63));\n        values[valuesOffset++] = (int) ((block1 >>> 58) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 53) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 48) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 43) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 38) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 33) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 28) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 23) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 18) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 13) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 8) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 3) & 31L);\n        final long block2 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block1 & 7L) << 2) | (block2 >>> 62));\n        values[valuesOffset++] = (int) ((block2 >>> 57) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 52) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 47) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 42) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 37) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 32) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 27) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 22) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 17) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 12) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 7) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 2) & 31L);\n        final long block3 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block2 & 3L) << 3) | (block3 >>> 61));\n        values[valuesOffset++] = (int) ((block3 >>> 56) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 51) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 46) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 41) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 36) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 31) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 26) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 21) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 16) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 11) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 6) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 1) & 31L);\n        final long block4 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block3 & 1L) << 4) | (block4 >>> 60));\n        values[valuesOffset++] = (int) ((block4 >>> 55) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 50) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 45) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 40) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 35) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 30) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 25) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 20) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 15) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 10) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 5) & 31L);\n        values[valuesOffset++] = (int) (block4 & 31L);\n      }\n    }\n\n","bugFix":["353f5909b00345d98d079a7db9a1bbe7485b1ea6","3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked5#decode(long[],int,int[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked5#decode(long[],int,int[],int,int).mjava","sourceNew":"  @Override\n  public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < iterations; ++i) {\n      final long block0 = blocks[blocksOffset++];\n      values[valuesOffset++] = (int) (block0 >>> 59);\n      values[valuesOffset++] = (int) ((block0 >>> 54) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 49) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 44) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 39) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 34) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 29) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 24) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 19) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 14) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 9) & 31L);\n      values[valuesOffset++] = (int) ((block0 >>> 4) & 31L);\n      final long block1 = blocks[blocksOffset++];\n      values[valuesOffset++] = (int) (((block0 & 15L) << 1) | (block1 >>> 63));\n      values[valuesOffset++] = (int) ((block1 >>> 58) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 53) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 48) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 43) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 38) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 33) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 28) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 23) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 18) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 13) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 8) & 31L);\n      values[valuesOffset++] = (int) ((block1 >>> 3) & 31L);\n      final long block2 = blocks[blocksOffset++];\n      values[valuesOffset++] = (int) (((block1 & 7L) << 2) | (block2 >>> 62));\n      values[valuesOffset++] = (int) ((block2 >>> 57) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 52) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 47) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 42) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 37) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 32) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 27) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 22) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 17) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 12) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 7) & 31L);\n      values[valuesOffset++] = (int) ((block2 >>> 2) & 31L);\n      final long block3 = blocks[blocksOffset++];\n      values[valuesOffset++] = (int) (((block2 & 3L) << 3) | (block3 >>> 61));\n      values[valuesOffset++] = (int) ((block3 >>> 56) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 51) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 46) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 41) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 36) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 31) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 26) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 21) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 16) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 11) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 6) & 31L);\n      values[valuesOffset++] = (int) ((block3 >>> 1) & 31L);\n      final long block4 = blocks[blocksOffset++];\n      values[valuesOffset++] = (int) (((block3 & 1L) << 4) | (block4 >>> 60));\n      values[valuesOffset++] = (int) ((block4 >>> 55) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 50) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 45) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 40) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 35) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 30) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 25) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 20) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 15) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 10) & 31L);\n      values[valuesOffset++] = (int) ((block4 >>> 5) & 31L);\n      values[valuesOffset++] = (int) (block4 & 31L);\n    }\n  }\n\n","sourceOld":"    @Override\n    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long block0 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (block0 >>> 59);\n        values[valuesOffset++] = (int) ((block0 >>> 54) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 49) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 44) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 39) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 34) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 29) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 24) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 19) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 14) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 9) & 31L);\n        values[valuesOffset++] = (int) ((block0 >>> 4) & 31L);\n        final long block1 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block0 & 15L) << 1) | (block1 >>> 63));\n        values[valuesOffset++] = (int) ((block1 >>> 58) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 53) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 48) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 43) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 38) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 33) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 28) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 23) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 18) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 13) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 8) & 31L);\n        values[valuesOffset++] = (int) ((block1 >>> 3) & 31L);\n        final long block2 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block1 & 7L) << 2) | (block2 >>> 62));\n        values[valuesOffset++] = (int) ((block2 >>> 57) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 52) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 47) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 42) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 37) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 32) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 27) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 22) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 17) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 12) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 7) & 31L);\n        values[valuesOffset++] = (int) ((block2 >>> 2) & 31L);\n        final long block3 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block2 & 3L) << 3) | (block3 >>> 61));\n        values[valuesOffset++] = (int) ((block3 >>> 56) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 51) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 46) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 41) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 36) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 31) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 26) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 21) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 16) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 11) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 6) & 31L);\n        values[valuesOffset++] = (int) ((block3 >>> 1) & 31L);\n        final long block4 = blocks[blocksOffset++];\n        values[valuesOffset++] = (int) (((block3 & 1L) << 4) | (block4 >>> 60));\n        values[valuesOffset++] = (int) ((block4 >>> 55) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 50) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 45) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 40) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 35) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 30) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 25) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 20) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 15) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 10) & 31L);\n        values[valuesOffset++] = (int) ((block4 >>> 5) & 31L);\n        values[valuesOffset++] = (int) (block4 & 31L);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["001b25b42373b22a52f399dbf072f1224632e8e6","818b04e906a094f03512fe99c83e359da8277708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"818b04e906a094f03512fe99c83e359da8277708":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["818b04e906a094f03512fe99c83e359da8277708"]},"commit2Childs":{"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["001b25b42373b22a52f399dbf072f1224632e8e6","818b04e906a094f03512fe99c83e359da8277708"],"001b25b42373b22a52f399dbf072f1224632e8e6":["d0d1f90e969803cc84174589b5e4a39b7935fecd"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"818b04e906a094f03512fe99c83e359da8277708":["d0d1f90e969803cc84174589b5e4a39b7935fecd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d0d1f90e969803cc84174589b5e4a39b7935fecd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}