{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if(indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      // small race here before the commit point is saved\n      new SnapShooter(core, params.get(\"location\")).createSnapAsync(indexCommit, this);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if(indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      // small race here before the commit point is saved\n      new SnapShooter(core, params.get(\"location\")).createSnapAsync(indexCommit, this);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if(indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      // small race here before the commit point is saved\n      new SnapShooter(core, params.get(\"location\")).createSnapAsync(indexCommit, this);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if(indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      // small race here before the commit point is saved\n      new SnapShooter(core, params.get(\"location\")).createSnapAsync(indexCommit, this);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if(indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      // small race here before the commit point is saved\n      new SnapShooter(core, params.get(\"location\")).createSnapAsync(indexCommit, this);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if(indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      // small race here before the commit point is saved\n      new SnapShooter(core, params.get(\"location\")).createSnapAsync(indexCommit, this);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60","date":1321493601,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP, Integer.MAX_VALUE);\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n      \n      if(indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n      \n      // small race here before the commit point is saved\n      new SnapShooter(core, params.get(\"location\")).createSnapAsync(indexCommit, numberToKeep, this);\n      \n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if(indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      // small race here before the commit point is saved\n      new SnapShooter(core, params.get(\"location\")).createSnapAsync(indexCommit, this);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4448c35ccdaef2a8501f93c0dfe9fe79b19402cc","date":1330444231,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n      \n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n      \n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n      \n      // small race here before the commit point is saved\n      new SnapShooter(core, params.get(\"location\")).createSnapAsync(\n          indexCommit, numberToKeep, this);\n      \n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP, Integer.MAX_VALUE);\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n      \n      if(indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n      \n      // small race here before the commit point is saved\n      new SnapShooter(core, params.get(\"location\")).createSnapAsync(indexCommit, numberToKeep, this);\n      \n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["7c0c76f8855bd391c39890131d8dbd56c3fdcef0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n      \n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n      \n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n      \n      // small race here before the commit point is saved\n      new SnapShooter(core, params.get(\"location\")).createSnapAsync(\n          indexCommit, numberToKeep, this);\n      \n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP, Integer.MAX_VALUE);\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n      \n      if(indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n      \n      // small race here before the commit point is saved\n      new SnapShooter(core, params.get(\"location\")).createSnapAsync(indexCommit, numberToKeep, this);\n      \n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c","date":1399457549,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n      \n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n      \n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n      \n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(core, params.get(\"location\"), params.get(\"name\"));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, this);\n      \n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n      \n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n      \n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n      \n      // small race here before the commit point is saved\n      new SnapShooter(core, params.get(\"location\")).createSnapAsync(\n          indexCommit, numberToKeep, this);\n      \n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n      \n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n      \n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n      \n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(core, params.get(\"location\"), params.get(NAME));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, this);\n      \n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n      \n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n      \n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n      \n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(core, params.get(\"location\"), params.get(\"name\"));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, this);\n      \n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n      \n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n      \n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n      \n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(core, params.get(\"location\"), params.get(NAME));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, this);\n      \n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n      \n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n      \n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n      \n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(core, params.get(\"location\"), params.get(\"name\"));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, this);\n      \n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b13106276bb5ea342253dbf6aae7b675adb38d3","date":1428054414,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(core, params.get(\"location\"), params.get(NAME));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, this);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n      \n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n      \n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n      \n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(core, params.get(\"location\"), params.get(NAME));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, this);\n      \n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["7c0c76f8855bd391c39890131d8dbd56c3fdcef0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(core, params.get(\"location\"), params.get(NAME));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, this);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n      \n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n      \n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n      \n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(core, params.get(\"location\"), params.get(NAME));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, this);\n      \n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5c99ad021f3da085fcb66220598a8f91dc5e453","date":1462242046,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(core, params.get(\"location\"), params.get(NAME));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(core, params.get(\"location\"), params.get(NAME));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, this);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["7c0c76f8855bd391c39890131d8dbd56c3fdcef0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c7a21395bae9e2f61aeb639f47aaca771c426ed","date":1462255690,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(core, params.get(\"location\"), params.get(NAME));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(core, params.get(\"location\"), params.get(NAME));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, this);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(core, params.get(\"location\"), params.get(NAME));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(core, params.get(\"location\"), params.get(NAME));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, this);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      String location = params.get(ZkStateReader.BACKUP_LOCATION);\n      String repoName = params.get(BackupRepository.REPOSITORY_PROPERTY_NAME);\n      CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n      SolrResourceLoader rl = cc.getResourceLoader();\n      BackupRepository repo = null;\n      if(repoName != null) {\n        repo = cc.getBackupRepoFactory().newInstance(rl, repoName);\n        if (location == null) {\n          location = repo.getConfigProperty(ZkStateReader.BACKUP_LOCATION);\n          if(location == null) {\n            throw new IllegalArgumentException(\"location is required\");\n          }\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(repo, core, location, params.get(NAME));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(core, params.get(\"location\"), params.get(NAME));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c623a7f72be34d6c45bee682028c50327d9e4b7","date":1467791293,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(repo, core, location, params.get(NAME));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      String location = params.get(ZkStateReader.BACKUP_LOCATION);\n      String repoName = params.get(BackupRepository.REPOSITORY_PROPERTY_NAME);\n      CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n      SolrResourceLoader rl = cc.getResourceLoader();\n      BackupRepository repo = null;\n      if(repoName != null) {\n        repo = cc.getBackupRepoFactory().newInstance(rl, repoName);\n        if (location == null) {\n          location = repo.getConfigProperty(ZkStateReader.BACKUP_LOCATION);\n          if(location == null) {\n            throw new IllegalArgumentException(\"location is required\");\n          }\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(repo, core, location, params.get(NAME));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"91e2345fb81b6c1c7faefa550ee5eaafadc54486","date":1469730189,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexCommit indexCommit = null;\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      if (commitName != null) {\n        SolrSnapshotMetaDataManager snapshotMgr = core.getSnapshotMetaDataManager();\n        Optional<IndexCommit> commit = snapshotMgr.getIndexCommitByName(commitName);\n        if(commit.isPresent()) {\n          indexCommit = commit.get();\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unable to find an index commit with name \" + commitName +\n              \" for core \" + core.getName());\n        }\n      } else {\n        IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n        indexCommit = delPolicy.getLatestCommit();\n\n        if (indexCommit == null) {\n          indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n        }\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(repo, core, location, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(repo, core, location, params.get(NAME));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["7c0c76f8855bd391c39890131d8dbd56c3fdcef0","af3193c66df8e8324d4bce9f66df967af9e8c602"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexCommit indexCommit = null;\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      if (commitName != null) {\n        SolrSnapshotMetaDataManager snapshotMgr = core.getSnapshotMetaDataManager();\n        Optional<IndexCommit> commit = snapshotMgr.getIndexCommitByName(commitName);\n        if(commit.isPresent()) {\n          indexCommit = commit.get();\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unable to find an index commit with name \" + commitName +\n              \" for core \" + core.getName());\n        }\n      } else {\n        IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n        indexCommit = delPolicy.getLatestCommit();\n\n        if (indexCommit == null) {\n          indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n        }\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(repo, core, location, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(repo, core, location, params.get(NAME));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af3193c66df8e8324d4bce9f66df967af9e8c602","date":1472772499,"type":3,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexCommit indexCommit = null;\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      if (commitName != null) {\n        SolrSnapshotMetaDataManager snapshotMgr = core.getSnapshotMetaDataManager();\n        Optional<IndexCommit> commit = snapshotMgr.getIndexCommitByName(commitName);\n        if(commit.isPresent()) {\n          indexCommit = commit.get();\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unable to find an index commit with name \" + commitName +\n              \" for core \" + core.getName());\n        }\n      } else {\n        IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n        indexCommit = delPolicy.getLatestCommit();\n\n        if (indexCommit == null) {\n          indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n        }\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexCommit indexCommit = null;\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      if (commitName != null) {\n        SolrSnapshotMetaDataManager snapshotMgr = core.getSnapshotMetaDataManager();\n        Optional<IndexCommit> commit = snapshotMgr.getIndexCommitByName(commitName);\n        if(commit.isPresent()) {\n          indexCommit = commit.get();\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unable to find an index commit with name \" + commitName +\n              \" for core \" + core.getName());\n        }\n      } else {\n        IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n        indexCommit = delPolicy.getLatestCommit();\n\n        if (indexCommit == null) {\n          indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n        }\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(repo, core, location, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":["91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da02fc41cfc83eaee66abb7c926f2c909bda6d26","date":1472818509,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexCommit indexCommit = null;\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      if (commitName != null) {\n        SolrSnapshotMetaDataManager snapshotMgr = core.getSnapshotMetaDataManager();\n        Optional<IndexCommit> commit = snapshotMgr.getIndexCommitByName(commitName);\n        if(commit.isPresent()) {\n          indexCommit = commit.get();\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unable to find an index commit with name \" + commitName +\n              \" for core \" + core.getName());\n        }\n      } else {\n        IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n        indexCommit = delPolicy.getLatestCommit();\n\n        if (indexCommit == null) {\n          indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n        }\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexCommit indexCommit = null;\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      if (commitName != null) {\n        SolrSnapshotMetaDataManager snapshotMgr = core.getSnapshotMetaDataManager();\n        Optional<IndexCommit> commit = snapshotMgr.getIndexCommitByName(commitName);\n        if(commit.isPresent()) {\n          indexCommit = commit.get();\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unable to find an index commit with name \" + commitName +\n              \" for core \" + core.getName());\n        }\n      } else {\n        IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n        indexCommit = delPolicy.getLatestCommit();\n\n        if (indexCommit == null) {\n          indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n        }\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(repo, core, location, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexCommit indexCommit = null;\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      if (commitName != null) {\n        SolrSnapshotMetaDataManager snapshotMgr = core.getSnapshotMetaDataManager();\n        Optional<IndexCommit> commit = snapshotMgr.getIndexCommitByName(commitName);\n        if(commit.isPresent()) {\n          indexCommit = commit.get();\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unable to find an index commit with name \" + commitName +\n              \" for core \" + core.getName());\n        }\n      } else {\n        IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n        indexCommit = delPolicy.getLatestCommit();\n\n        if (indexCommit == null) {\n          indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n        }\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexCommit indexCommit = null;\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      if (commitName != null) {\n        SolrSnapshotMetaDataManager snapshotMgr = core.getSnapshotMetaDataManager();\n        Optional<IndexCommit> commit = snapshotMgr.getIndexCommitByName(commitName);\n        if(commit.isPresent()) {\n          indexCommit = commit.get();\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unable to find an index commit with name \" + commitName +\n              \" for core \" + core.getName());\n        }\n      } else {\n        IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n        indexCommit = delPolicy.getLatestCommit();\n\n        if (indexCommit == null) {\n          indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n        }\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(repo, core, location, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexCommit indexCommit = null;\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      if (commitName != null) {\n        SolrSnapshotMetaDataManager snapshotMgr = core.getSnapshotMetaDataManager();\n        Optional<IndexCommit> commit = snapshotMgr.getIndexCommitByName(commitName);\n        if(commit.isPresent()) {\n          indexCommit = commit.get();\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unable to find an index commit with name \" + commitName +\n              \" for core \" + core.getName());\n        }\n      } else {\n        IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n        indexCommit = delPolicy.getLatestCommit();\n\n        if (indexCommit == null) {\n          indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n        }\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexCommit indexCommit = null;\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      if (commitName != null) {\n        SolrSnapshotMetaDataManager snapshotMgr = core.getSnapshotMetaDataManager();\n        Optional<IndexCommit> commit = snapshotMgr.getIndexCommitByName(commitName);\n        if(commit.isPresent()) {\n          indexCommit = commit.get();\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unable to find an index commit with name \" + commitName +\n              \" for core \" + core.getName());\n        }\n      } else {\n        IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n        indexCommit = delPolicy.getLatestCommit();\n\n        if (indexCommit == null) {\n          indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n        }\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(repo, core, location, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexCommit indexCommit = null;\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      if (commitName != null) {\n        SolrSnapshotMetaDataManager snapshotMgr = core.getSnapshotMetaDataManager();\n        Optional<IndexCommit> commit = snapshotMgr.getIndexCommitByName(commitName);\n        if(commit.isPresent()) {\n          indexCommit = commit.get();\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unable to find an index commit with name \" + commitName +\n              \" for core \" + core.getName());\n        }\n      } else {\n        IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n        indexCommit = delPolicy.getLatestCommit();\n\n        if (indexCommit == null) {\n          indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n        }\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n      IndexCommit indexCommit = delPolicy.getLatestCommit();\n\n      if (indexCommit == null) {\n        indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n      }\n\n      // small race here before the commit point is saved\n      SnapShooter snapShooter = new SnapShooter(core, params.get(\"location\"), params.get(NAME));\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexCommit indexCommit = null;\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      if (commitName != null) {\n        SolrSnapshotMetaDataManager snapshotMgr = core.getSnapshotMetaDataManager();\n        Optional<IndexCommit> commit = snapshotMgr.getIndexCommitByName(commitName);\n        if(commit.isPresent()) {\n          indexCommit = commit.get();\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unable to find an index commit with name \" + commitName +\n              \" for core \" + core.getName());\n        }\n      } else {\n        IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n        indexCommit = delPolicy.getLatestCommit();\n\n        if (indexCommit == null) {\n          indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n        }\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexCommit indexCommit = null;\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      if (commitName != null) {\n        SolrSnapshotMetaDataManager snapshotMgr = core.getSnapshotMetaDataManager();\n        Optional<IndexCommit> commit = snapshotMgr.getIndexCommitByName(commitName);\n        if(commit.isPresent()) {\n          indexCommit = commit.get();\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unable to find an index commit with name \" + commitName +\n              \" for core \" + core.getName());\n        }\n      } else {\n        IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n        indexCommit = delPolicy.getLatestCommit();\n\n        if (indexCommit == null) {\n          indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n        }\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexCommit indexCommit = null;\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      if (commitName != null) {\n        SolrSnapshotMetaDataManager snapshotMgr = core.getSnapshotMetaDataManager();\n        Optional<IndexCommit> commit = snapshotMgr.getIndexCommitByName(commitName);\n        if(commit.isPresent()) {\n          indexCommit = commit.get();\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unable to find an index commit with name \" + commitName +\n              \" for core \" + core.getName());\n        }\n      } else {\n        IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n        indexCommit = delPolicy.getLatestCommit();\n\n        if (indexCommit == null) {\n          indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n        }\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexCommit indexCommit = null;\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      if (commitName != null) {\n        SolrSnapshotMetaDataManager snapshotMgr = core.getSnapshotMetaDataManager();\n        Optional<IndexCommit> commit = snapshotMgr.getIndexCommitByName(commitName);\n        if(commit.isPresent()) {\n          indexCommit = commit.get();\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unable to find an index commit with name \" + commitName +\n              \" for core \" + core.getName());\n        }\n      } else {\n        IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n        indexCommit = delPolicy.getLatestCommit();\n\n        if (indexCommit == null) {\n          indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n        }\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c0c76f8855bd391c39890131d8dbd56c3fdcef0","date":1512185429,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \" + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM +\n            \" if \" + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(numberToKeep, (nl) -> snapShootDetails = nl);\n    } catch (Exception e) {\n      LOG.error(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexCommit indexCommit = null;\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      if (commitName != null) {\n        SolrSnapshotMetaDataManager snapshotMgr = core.getSnapshotMetaDataManager();\n        Optional<IndexCommit> commit = snapshotMgr.getIndexCommitByName(commitName);\n        if(commit.isPresent()) {\n          indexCommit = commit.get();\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unable to find an index commit with name \" + commitName +\n              \" for core \" + core.getName());\n        }\n      } else {\n        IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n        indexCommit = delPolicy.getLatestCommit();\n\n        if (indexCommit == null) {\n          indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n        }\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":["0d36f8b878e674878baa3e262df2455490a58891","4623d61231036b71956ea057612b3d78d440508a","4448c35ccdaef2a8501f93c0dfe9fe79b19402cc","91e2345fb81b6c1c7faefa550ee5eaafadc54486","7b13106276bb5ea342253dbf6aae7b675adb38d3","c5c99ad021f3da085fcb66220598a8f91dc5e453"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"670400747be2d99524159f3806d449ecfb0c2389","date":1512293281,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \" + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM +\n            \" if \" + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(numberToKeep, (nl) -> snapShootDetails = nl);\n    } catch (Exception e) {\n      LOG.error(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp,\n      SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \"\n            + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM + \" if \"\n            + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM\n            + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      IndexCommit indexCommit = null;\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      if (commitName != null) {\n        SolrSnapshotMetaDataManager snapshotMgr = core.getSnapshotMetaDataManager();\n        Optional<IndexCommit> commit = snapshotMgr.getIndexCommitByName(commitName);\n        if(commit.isPresent()) {\n          indexCommit = commit.get();\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unable to find an index commit with name \" + commitName +\n              \" for core \" + core.getName());\n        }\n      } else {\n        IndexDeletionPolicyWrapper delPolicy = core.getDeletionPolicy();\n        indexCommit = delPolicy.getLatestCommit();\n\n        if (indexCommit == null) {\n          indexCommit = req.getSearcher().getIndexReader().getIndexCommit();\n        }\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(indexCommit, numberToKeep, (nl) -> snapShootDetails = nl);\n\n    } catch (Exception e) {\n      LOG.warn(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \" + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM +\n            \" if \" + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(numberToKeep, (nl) -> snapShootDetails = nl);\n    } catch (Exception e) {\n      log.error(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \" + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM +\n            \" if \" + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(numberToKeep, (nl) -> snapShootDetails = nl);\n    } catch (Exception e) {\n      LOG.error(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cb65c1c2f90852e718f86c8be09beb1c4dba408","date":1543785784,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \" + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM +\n            \" if \" + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(numberToKeep, (nl) -> snapShootDetails = nl);\n      rsp.add(STATUS, OK_STATUS);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Exception while creating a snapshot\", e);\n      reportErrorOnResponse(rsp, \"Error encountered while creating a snapshot: \" + e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \" + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM +\n            \" if \" + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(numberToKeep, (nl) -> snapShootDetails = nl);\n    } catch (Exception e) {\n      log.error(\"Exception during creating a snapshot\", e);\n      rsp.add(\"exception\", e);\n    }\n  }\n\n","bugFix":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","4623d61231036b71956ea057612b3d78d440508a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6b17e67903ace8abb1d4d602bfc40d1994692ff","date":1593429504,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \" + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM +\n            \" if \" + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n      if (\"file\".equals(repo.createURI(\"x\").getScheme())) {\n        core.getCoreContainer().assertPathAllowed(Paths.get(location));\n      }\n\n        // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(numberToKeep, (nl) -> snapShootDetails = nl);\n      rsp.add(STATUS, OK_STATUS);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Exception while creating a snapshot\", e);\n      reportErrorOnResponse(rsp, \"Error encountered while creating a snapshot: \" + e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \" + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM +\n            \" if \" + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n\n      // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(numberToKeep, (nl) -> snapShootDetails = nl);\n      rsp.add(STATUS, OK_STATUS);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Exception while creating a snapshot\", e);\n      reportErrorOnResponse(rsp, \"Error encountered while creating a snapshot: \" + e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58dba38d0c9777f300cca9dd3c150fe2d244742","date":1599661188,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest).mjava","sourceNew":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \" + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM +\n            \" if \" + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(repoName);\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n      if (\"file\".equals(repo.createURI(\"x\").getScheme())) {\n        core.getCoreContainer().assertPathAllowed(Paths.get(location));\n      }\n\n        // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(numberToKeep, (nl) -> snapShootDetails = nl);\n      rsp.add(STATUS, OK_STATUS);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Exception while creating a snapshot\", e);\n      reportErrorOnResponse(rsp, \"Error encountered while creating a snapshot: \" + e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequest req) {\n    try {\n      int numberToKeep = params.getInt(NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM, 0);\n      if (numberToKeep > 0 && numberBackupsToKeep > 0) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Cannot use \" + NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM +\n            \" if \" + NUMBER_BACKUPS_TO_KEEP_INIT_PARAM + \" was specified in the configuration.\");\n      }\n      numberToKeep = Math.max(numberToKeep, numberBackupsToKeep);\n      if (numberToKeep < 1) {\n        numberToKeep = Integer.MAX_VALUE;\n      }\n\n      String location = params.get(CoreAdminParams.BACKUP_LOCATION);\n      String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n      CoreContainer cc = core.getCoreContainer();\n      BackupRepository repo = null;\n      if (repoName != null) {\n        repo = cc.newBackupRepository(Optional.of(repoName));\n        location = repo.getBackupLocation(location);\n        if (location == null) {\n          throw new IllegalArgumentException(\"location is required\");\n        }\n      } else {\n        repo = new LocalFileSystemRepository();\n        if (location == null) {\n          location = core.getDataDir();\n        } else {\n          location = core.getCoreDescriptor().getInstanceDir().resolve(location).normalize().toString();\n        }\n      }\n      if (\"file\".equals(repo.createURI(\"x\").getScheme())) {\n        core.getCoreContainer().assertPathAllowed(Paths.get(location));\n      }\n\n        // small race here before the commit point is saved\n      URI locationUri = repo.createURI(location);\n      String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n      SnapShooter snapShooter = new SnapShooter(repo, core, locationUri, params.get(NAME), commitName);\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapAsync(numberToKeep, (nl) -> snapShootDetails = nl);\n      rsp.add(STATUS, OK_STATUS);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Exception while creating a snapshot\", e);\n      reportErrorOnResponse(rsp, \"Error encountered while creating a snapshot: \" + e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["91e2345fb81b6c1c7faefa550ee5eaafadc54486","af3193c66df8e8324d4bce9f66df967af9e8c602"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60","4448c35ccdaef2a8501f93c0dfe9fe79b19402cc"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c":["4448c35ccdaef2a8501f93c0dfe9fe79b19402cc"],"bc8f206328a706450934717bec7ccc22ad166fc0":["91e2345fb81b6c1c7faefa550ee5eaafadc54486","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["7b13106276bb5ea342253dbf6aae7b675adb38d3","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"a6b17e67903ace8abb1d4d602bfc40d1994692ff":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"4448c35ccdaef2a8501f93c0dfe9fe79b19402cc":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["91e2345fb81b6c1c7faefa550ee5eaafadc54486","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"d2638f781be724518ff6c2263d14a48cf6e68017":["a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c","1390137e395d2f07f9ba5b8c43d293befe84d563"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["d2638f781be724518ff6c2263d14a48cf6e68017","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60":["c26f00b574427b55127e869b935845554afde1fa"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["670400747be2d99524159f3806d449ecfb0c2389"],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"4c623a7f72be34d6c45bee682028c50327d9e4b7":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"c5c99ad021f3da085fcb66220598a8f91dc5e453":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["7b13106276bb5ea342253dbf6aae7b675adb38d3","c5c99ad021f3da085fcb66220598a8f91dc5e453"],"7c0c76f8855bd391c39890131d8dbd56c3fdcef0":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"670400747be2d99524159f3806d449ecfb0c2389":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","7c0c76f8855bd391c39890131d8dbd56c3fdcef0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cb65c1c2f90852e718f86c8be09beb1c4dba408":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"d58dba38d0c9777f300cca9dd3c150fe2d244742":["a6b17e67903ace8abb1d4d602bfc40d1994692ff"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["4c623a7f72be34d6c45bee682028c50327d9e4b7","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58dba38d0c9777f300cca9dd3c150fe2d244742"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["bc8f206328a706450934717bec7ccc22ad166fc0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60"],"a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a6b17e67903ace8abb1d4d602bfc40d1994692ff":["d58dba38d0c9777f300cca9dd3c150fe2d244742"],"4448c35ccdaef2a8501f93c0dfe9fe79b19402cc":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["d2638f781be724518ff6c2263d14a48cf6e68017","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d2638f781be724518ff6c2263d14a48cf6e68017":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","4448c35ccdaef2a8501f93c0dfe9fe79b19402cc"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["da02fc41cfc83eaee66abb7c926f2c909bda6d26","bc8f206328a706450934717bec7ccc22ad166fc0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","af3193c66df8e8324d4bce9f66df967af9e8c602","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"4c623a7f72be34d6c45bee682028c50327d9e4b7":["91e2345fb81b6c1c7faefa550ee5eaafadc54486","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"c5c99ad021f3da085fcb66220598a8f91dc5e453":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["7c0c76f8855bd391c39890131d8dbd56c3fdcef0","670400747be2d99524159f3806d449ecfb0c2389"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["55b50463286869f584cf849d1587a0fcd54d1dfa","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"7c0c76f8855bd391c39890131d8dbd56c3fdcef0":["670400747be2d99524159f3806d449ecfb0c2389"],"670400747be2d99524159f3806d449ecfb0c2389":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5cb65c1c2f90852e718f86c8be09beb1c4dba408":["a6b17e67903ace8abb1d4d602bfc40d1994692ff"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["55b50463286869f584cf849d1587a0fcd54d1dfa","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","c5c99ad021f3da085fcb66220598a8f91dc5e453","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"d58dba38d0c9777f300cca9dd3c150fe2d244742":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","bc8f206328a706450934717bec7ccc22ad166fc0","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}