{"path":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        //nocommit - randomize the IOContext here?\n        IndexOutput out = delegate.createOutput(name, IOContext.DEFAULT);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        //nocommit - randomize the IOContext here?\n        IndexOutput out = delegate.createOutput(name, IOContext.DEFAULT);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        //nocommit - randomize the IOContext here?\n        IndexOutput out = delegate.createOutput(name, LuceneTestCase.newIOContext(randomState));\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        //nocommit - randomize the IOContext here?\n        IndexOutput out = delegate.createOutput(name, LuceneTestCase.newIOContext(randomState));\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        //nocommit - randomize the IOContext here?\n        IndexOutput out = delegate.createOutput(name, IOContext.DEFAULT);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        //nocommit - randomize the IOContext here?\n        IndexOutput out = delegate.createOutput(name, IOContext.DEFAULT);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","bugFix":null,"bugIntro":["f592e183306e8e4efabf3e7e08d3e709c9b97dbb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e248526ae3a33286a678d7833da022fd95695f2d","date":1309450587,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name, LuceneTestCase.newIOContext(randomState));\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name, LuceneTestCase.newIOContext(randomState));\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        //nocommit - randomize the IOContext here?\n        IndexOutput out = delegate.createOutput(name, LuceneTestCase.newIOContext(randomState));\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        //nocommit - randomize the IOContext here?\n        IndexOutput out = delegate.createOutput(name, LuceneTestCase.newIOContext(randomState));\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name, LuceneTestCase.newIOContext(randomState));\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name, LuceneTestCase.newIOContext(randomState));\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name, LuceneTestCase.newIOContext(randomState));\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name, LuceneTestCase.newIOContext(randomState));\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name, LuceneTestCase.newIOContext(randomState));\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name, LuceneTestCase.newIOContext(randomState));\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name, LuceneTestCase.newIOContext(randomState));\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name, LuceneTestCase.newIOContext(randomState));\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e248526ae3a33286a678d7833da022fd95695f2d":["b6f9be74ca7baaef11857ad002cad40419979516"],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","e248526ae3a33286a678d7833da022fd95695f2d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"e248526ae3a33286a678d7833da022fd95695f2d":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"b6f9be74ca7baaef11857ad002cad40419979516":["e248526ae3a33286a678d7833da022fd95695f2d"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["7b91922b55d15444d554721b352861d028eb8278","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","5d004d0e0b3f65bb40da76d476d659d7888270e8","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}