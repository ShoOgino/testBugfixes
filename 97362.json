{"path":"backwards/src/java/org/apache/lucene/index/SegmentTermEnum#next().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/SegmentTermEnum#next().mjava","pathOld":"/dev/null","sourceNew":"  /** Increments the enumeration to the next element.  True if one exists.*/\n  @Override\n  public final boolean next() throws IOException {\n    if (position++ >= size - 1) {\n      prevBuffer.set(termBuffer);\n      termBuffer.reset();\n      return false;\n    }\n\n    prevBuffer.set(termBuffer);\n    termBuffer.read(input, fieldInfos);\n\n    termInfo.docFreq = input.readVInt();\t  // read doc freq\n    termInfo.freqPointer += input.readVLong();\t  // read freq pointer\n    termInfo.proxPointer += input.readVLong();\t  // read prox pointer\n    \n    if(format == -1){\n    //  just read skipOffset in order to increment  file pointer; \n    // value is never used since skipTo is switched off\n      if (!isIndex) {\n        if (termInfo.docFreq > formatM1SkipInterval) {\n          termInfo.skipOffset = input.readVInt(); \n        }\n      }\n    }\n    else{\n      if (termInfo.docFreq >= skipInterval) \n        termInfo.skipOffset = input.readVInt();\n    }\n    \n    if (isIndex)\n      indexPointer += input.readVLong();\t  // read index pointer\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SegmentTermEnum#next().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SegmentTermEnum#next().mjava","sourceNew":"  /** Increments the enumeration to the next element.  True if one exists.*/\n  @Override\n  public final boolean next() throws IOException {\n    if (position++ >= size - 1) {\n      prevBuffer.set(termBuffer);\n      termBuffer.reset();\n      return false;\n    }\n\n    prevBuffer.set(termBuffer);\n    termBuffer.read(input, fieldInfos);\n\n    termInfo.docFreq = input.readVInt();\t  // read doc freq\n    termInfo.freqPointer += input.readVLong();\t  // read freq pointer\n    termInfo.proxPointer += input.readVLong();\t  // read prox pointer\n    \n    if(format == -1){\n    //  just read skipOffset in order to increment  file pointer; \n    // value is never used since skipTo is switched off\n      if (!isIndex) {\n        if (termInfo.docFreq > formatM1SkipInterval) {\n          termInfo.skipOffset = input.readVInt(); \n        }\n      }\n    }\n    else{\n      if (termInfo.docFreq >= skipInterval) \n        termInfo.skipOffset = input.readVInt();\n    }\n    \n    if (isIndex)\n      indexPointer += input.readVLong();\t  // read index pointer\n\n    return true;\n  }\n\n","sourceOld":"  /** Increments the enumeration to the next element.  True if one exists.*/\n  @Override\n  public final boolean next() throws IOException {\n    if (position++ >= size - 1) {\n      prevBuffer.set(termBuffer);\n      termBuffer.reset();\n      return false;\n    }\n\n    prevBuffer.set(termBuffer);\n    termBuffer.read(input, fieldInfos);\n\n    termInfo.docFreq = input.readVInt();\t  // read doc freq\n    termInfo.freqPointer += input.readVLong();\t  // read freq pointer\n    termInfo.proxPointer += input.readVLong();\t  // read prox pointer\n    \n    if(format == -1){\n    //  just read skipOffset in order to increment  file pointer; \n    // value is never used since skipTo is switched off\n      if (!isIndex) {\n        if (termInfo.docFreq > formatM1SkipInterval) {\n          termInfo.skipOffset = input.readVInt(); \n        }\n      }\n    }\n    else{\n      if (termInfo.docFreq >= skipInterval) \n        termInfo.skipOffset = input.readVInt();\n    }\n    \n    if (isIndex)\n      indexPointer += input.readVLong();\t  // read index pointer\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}