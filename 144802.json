{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetErrors#testOtherErrorCases().mjava","commits":[{"id":"a067727e528e9edadcd1704b7a3a10912e5d95c1","date":1584973258,"type":1,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetErrors#testOtherErrorCases().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testOtherErrorCases().mjava","sourceNew":"  @Test\n  public void testOtherErrorCases() throws Exception {\n    Client client = Client.localClient();\n    client.deleteByQuery(\"*:*\", null);\n    indexSimple(client);\n\n    // test for sort\n    assertQEx(\"Should fail as sort is of type list\",\n        \"Expected string/map for 'sort', received ArrayList=[count desc]\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,sort:[\\\"count desc\\\"]}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"Should fail as facet is not of type map\",\n        \"Expected Map for 'facet', received ArrayList=[{}]\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"[{}]\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"Should fail as queries is not of type map\",\n        \"Expected Map for 'queries', received [{}]\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.queries\", \"[{}]\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"Should fail as queries are null in JSON\",\n        \"Expected Map for 'queries', received null\",\n        req(\"json\", \"{query:\\\"*:*\\\", queries:null}\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    // range facets\n    assertQEx(\"Should fail as 'other' is of type Map\",\n        \"Expected list of string or comma separated string values for 'other', \" +\n            \"received LinkedHashMap={} , path=facet/f\",\n        req(\"q\", \"*:*\", \"json.facet\", \"{f:{type:range, field:num_d, start:10, end:12, gap:1, other:{}}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"Should fail as 'include' is of type Map\",\n        \"Expected list of string or comma separated string values for 'include', \" +\n            \"received LinkedHashMap={} , path=facet/f\",\n        req(\"q\", \"*:*\", \"json.facet\", \"{f:{type:range, field:num_d, start:10, end:12, gap:1, include:{}}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    // missing start parameter\n    assertQEx(\"Should Fail with missing field error\",\n        \"Missing required parameter: 'start' , path=facet/f\",\n        req(\"q\", \"*:*\", \"json.facet\", \"{f:{type:range, field:num_d}}\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    // missing end parameter\n    assertQEx(\"Should Fail with missing field error\",\n        \"Missing required parameter: 'end' , path=facet/f\",\n        req(\"q\", \"*:*\", \"json.facet\", \"{f:{type:range, field:num_d, start:10}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    // missing gap parameter\n    assertQEx(\"Should Fail with missing field error\",\n        \"Missing required parameter: 'gap' , path=facet/f\",\n        req(\"q\", \"*:*\", \"json.facet\", \"{f:{type:range, field:num_d, start:10, end:12}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    // invalid value for facet field\n    assertQEx(\"Should Fail as args is of type long\",\n        \"Expected string/map for facet field, received Long=2 , path=facet/facet\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet.facet.field\", \"2\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    // invalid value for facet query\n    assertQEx(\"Should Fail as args is of type long for query\",\n        \"Expected string/map for facet query, received Long=2 , path=facet/facet\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet.facet.query\", \"2\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    // valid facet field\n    assertQ(\"Should pass as this is valid query\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s}}\"));\n\n    // invalid perSeg\n    assertQEx(\"Should fail as perSeg is not of type boolean\",\n        \"Expected boolean type for param 'perSeg' but got Long = 2 , path=facet/cat_s\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,perSeg:2}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"Should fail as sort is invalid\",\n        \"Invalid sort option 'bleh' for field 'cat_s'\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,sort:bleh}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"Should fail as sort order is invalid\",\n        \"Unknown Sort direction 'bleh'\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,sort:{count: bleh}}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    // test for prelim_sort\n    assertQEx(\"Should fail as prelim_sort is invalid\",\n        \"Invalid prelim_sort option 'bleh' for field 'cat_s'\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,prelim_sort:bleh}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"Should fail as prelim_sort map is invalid\",\n        \"Invalid prelim_sort option '{bleh=desc}' for field 'cat_s'\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,prelim_sort:{bleh:desc}}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    // with nested facet\n    assertQEx(\"Should fail as prelim_sort is invalid\",\n        \"Invalid sort option 'bleh' for field 'id'\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,sort:bleh,facet:\" +\n            \"{bleh:\\\"unique(cat_s)\\\",id:{type:terms,field:id,sort:bleh}}}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQ(\"Should pass as sort is proper\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,sort:bleh,facet:\" +\n            \"{bleh:\\\"unique(cat_s)\\\",id:{type:terms,field:id,sort:{bleh:desc},facet:{bleh:\\\"unique(id)\\\"}}}}}\")\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testOtherErrorCases() throws Exception {\n    Client client = Client.localClient();\n    client.deleteByQuery(\"*:*\", null);\n    indexSimple(client);\n\n    // test for sort\n    assertQEx(\"Should fail as sort is of type list\",\n        \"Expected string/map for 'sort', received ArrayList=[count desc]\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,sort:[\\\"count desc\\\"]}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"Should fail as facet is not of type map\",\n        \"Expected Map for 'facet', received ArrayList=[{}]\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"[{}]\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"Should fail as queries is not of type map\",\n        \"Expected Map for 'queries', received [{}]\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.queries\", \"[{}]\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"Should fail as queries are null in JSON\",\n        \"Expected Map for 'queries', received null\",\n        req(\"json\", \"{query:\\\"*:*\\\", queries:null}\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    // range facets\n    assertQEx(\"Should fail as 'other' is of type Map\",\n        \"Expected list of string or comma separated string values for 'other', \" +\n            \"received LinkedHashMap={} , path=facet/f\",\n        req(\"q\", \"*:*\", \"json.facet\", \"{f:{type:range, field:num_d, start:10, end:12, gap:1, other:{}}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"Should fail as 'include' is of type Map\",\n        \"Expected list of string or comma separated string values for 'include', \" +\n            \"received LinkedHashMap={} , path=facet/f\",\n        req(\"q\", \"*:*\", \"json.facet\", \"{f:{type:range, field:num_d, start:10, end:12, gap:1, include:{}}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    // missing start parameter\n    assertQEx(\"Should Fail with missing field error\",\n        \"Missing required parameter: 'start' , path=facet/f\",\n        req(\"q\", \"*:*\", \"json.facet\", \"{f:{type:range, field:num_d}}\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    // missing end parameter\n    assertQEx(\"Should Fail with missing field error\",\n        \"Missing required parameter: 'end' , path=facet/f\",\n        req(\"q\", \"*:*\", \"json.facet\", \"{f:{type:range, field:num_d, start:10}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    // missing gap parameter\n    assertQEx(\"Should Fail with missing field error\",\n        \"Missing required parameter: 'gap' , path=facet/f\",\n        req(\"q\", \"*:*\", \"json.facet\", \"{f:{type:range, field:num_d, start:10, end:12}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    // invalid value for facet field\n    assertQEx(\"Should Fail as args is of type long\",\n        \"Expected string/map for facet field, received Long=2 , path=facet/facet\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet.facet.field\", \"2\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    // invalid value for facet query\n    assertQEx(\"Should Fail as args is of type long for query\",\n        \"Expected string/map for facet query, received Long=2 , path=facet/facet\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet.facet.query\", \"2\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    // valid facet field\n    assertQ(\"Should pass as this is valid query\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s}}\"));\n\n    // invalid perSeg\n    assertQEx(\"Should fail as perSeg is not of type boolean\",\n        \"Expected boolean type for param 'perSeg' but got Long = 2 , path=facet/cat_s\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,perSeg:2}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"Should fail as sort is invalid\",\n        \"Invalid sort option 'bleh' for field 'cat_s'\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,sort:bleh}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"Should fail as sort order is invalid\",\n        \"Unknown Sort direction 'bleh'\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,sort:{count: bleh}}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    // test for prelim_sort\n    assertQEx(\"Should fail as prelim_sort is invalid\",\n        \"Invalid prelim_sort option 'bleh' for field 'cat_s'\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,prelim_sort:bleh}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"Should fail as prelim_sort map is invalid\",\n        \"Invalid prelim_sort option '{bleh=desc}' for field 'cat_s'\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,prelim_sort:{bleh:desc}}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    // with nested facet\n    assertQEx(\"Should fail as prelim_sort is invalid\",\n        \"Invalid sort option 'bleh' for field 'id'\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,sort:bleh,facet:\" +\n            \"{bleh:\\\"unique(cat_s)\\\",id:{type:terms,field:id,sort:bleh}}}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQ(\"Should pass as sort is proper\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,sort:bleh,facet:\" +\n            \"{bleh:\\\"unique(cat_s)\\\",id:{type:terms,field:id,sort:{bleh:desc},facet:{bleh:\\\"unique(id)\\\"}}}}}\")\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a067727e528e9edadcd1704b7a3a10912e5d95c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a067727e528e9edadcd1704b7a3a10912e5d95c1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a067727e528e9edadcd1704b7a3a10912e5d95c1"],"a067727e528e9edadcd1704b7a3a10912e5d95c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}