{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testNeuterNouns().mjava","commits":[{"id":"b0f3337a69aad7b5cb531fa8e233ac5771a6aaf5","date":1259495978,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testNeuterNouns().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test showing how neuter noun forms conflate\n   */\n  public void testNeuterNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(Version.LUCENE_CURRENT);\n    \n    /* ending with o */\n    assertAnalyzesTo(cz, \"město\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"města\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"měst\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městu\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městům\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městě\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městech\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městem\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městy\", new String[] { \"měst\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"moře\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"moří\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"mořím\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"moři\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"mořích\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"mořem\", new String[] { \"moř\" });\n\n    /* ending with ě */\n    assertAnalyzesTo(cz, \"kuře\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřata\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřete\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřat\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřeti\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřatům\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřatech\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřetem\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřaty\", new String[] { \"kuř\" });\n    \n    /* ending with í */\n    assertAnalyzesTo(cz, \"stavení\", new String[] { \"stavn\" });\n    assertAnalyzesTo(cz, \"stavením\", new String[] { \"stavn\" });\n    assertAnalyzesTo(cz, \"staveních\", new String[] { \"stavn\" });\n    assertAnalyzesTo(cz, \"staveními\", new String[] { \"stavn\" });    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testNeuterNouns().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testNeuterNouns().mjava","sourceNew":"  /**\n   * Test showing how neuter noun forms conflate\n   */\n  public void testNeuterNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* ending with o */\n    assertAnalyzesTo(cz, \"město\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"města\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"měst\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městu\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městům\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městě\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městech\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městem\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městy\", new String[] { \"měst\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"moře\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"moří\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"mořím\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"moři\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"mořích\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"mořem\", new String[] { \"moř\" });\n\n    /* ending with ě */\n    assertAnalyzesTo(cz, \"kuře\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřata\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřete\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřat\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřeti\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřatům\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřatech\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřetem\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřaty\", new String[] { \"kuř\" });\n    \n    /* ending with í */\n    assertAnalyzesTo(cz, \"stavení\", new String[] { \"stavn\" });\n    assertAnalyzesTo(cz, \"stavením\", new String[] { \"stavn\" });\n    assertAnalyzesTo(cz, \"staveních\", new String[] { \"stavn\" });\n    assertAnalyzesTo(cz, \"staveními\", new String[] { \"stavn\" });    \n  }\n\n","sourceOld":"  /**\n   * Test showing how neuter noun forms conflate\n   */\n  public void testNeuterNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(Version.LUCENE_CURRENT);\n    \n    /* ending with o */\n    assertAnalyzesTo(cz, \"město\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"města\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"měst\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městu\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městům\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městě\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městech\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městem\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městy\", new String[] { \"měst\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"moře\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"moří\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"mořím\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"moři\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"mořích\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"mořem\", new String[] { \"moř\" });\n\n    /* ending with ě */\n    assertAnalyzesTo(cz, \"kuře\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřata\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřete\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřat\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřeti\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřatům\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřatech\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřetem\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřaty\", new String[] { \"kuř\" });\n    \n    /* ending with í */\n    assertAnalyzesTo(cz, \"stavení\", new String[] { \"stavn\" });\n    assertAnalyzesTo(cz, \"stavením\", new String[] { \"stavn\" });\n    assertAnalyzesTo(cz, \"staveních\", new String[] { \"stavn\" });\n    assertAnalyzesTo(cz, \"staveními\", new String[] { \"stavn\" });    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testNeuterNouns().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testNeuterNouns().mjava","sourceNew":"  /**\n   * Test showing how neuter noun forms conflate\n   */\n  public void testNeuterNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* ending with o */\n    assertAnalyzesTo(cz, \"město\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"města\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"měst\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městu\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městům\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městě\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městech\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městem\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městy\", new String[] { \"měst\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"moře\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"moří\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"mořím\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"moři\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"mořích\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"mořem\", new String[] { \"moř\" });\n\n    /* ending with ě */\n    assertAnalyzesTo(cz, \"kuře\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřata\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřete\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřat\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřeti\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřatům\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřatech\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřetem\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřaty\", new String[] { \"kuř\" });\n    \n    /* ending with í */\n    assertAnalyzesTo(cz, \"stavení\", new String[] { \"stavn\" });\n    assertAnalyzesTo(cz, \"stavením\", new String[] { \"stavn\" });\n    assertAnalyzesTo(cz, \"staveních\", new String[] { \"stavn\" });\n    assertAnalyzesTo(cz, \"staveními\", new String[] { \"stavn\" });    \n  }\n\n","sourceOld":"  /**\n   * Test showing how neuter noun forms conflate\n   */\n  public void testNeuterNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* ending with o */\n    assertAnalyzesTo(cz, \"město\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"města\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"měst\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městu\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městům\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městě\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městech\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městem\", new String[] { \"měst\" });\n    assertAnalyzesTo(cz, \"městy\", new String[] { \"měst\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"moře\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"moří\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"mořím\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"moři\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"mořích\", new String[] { \"moř\" });\n    assertAnalyzesTo(cz, \"mořem\", new String[] { \"moř\" });\n\n    /* ending with ě */\n    assertAnalyzesTo(cz, \"kuře\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřata\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřete\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřat\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřeti\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřatům\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřatech\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřetem\", new String[] { \"kuř\" });\n    assertAnalyzesTo(cz, \"kuřaty\", new String[] { \"kuř\" });\n    \n    /* ending with í */\n    assertAnalyzesTo(cz, \"stavení\", new String[] { \"stavn\" });\n    assertAnalyzesTo(cz, \"stavením\", new String[] { \"stavn\" });\n    assertAnalyzesTo(cz, \"staveních\", new String[] { \"stavn\" });\n    assertAnalyzesTo(cz, \"staveními\", new String[] { \"stavn\" });    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b0f3337a69aad7b5cb531fa8e233ac5771a6aaf5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["b0f3337a69aad7b5cb531fa8e233ac5771a6aaf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"b0f3337a69aad7b5cb531fa8e233ac5771a6aaf5":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b0f3337a69aad7b5cb531fa8e233ac5771a6aaf5"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}