{"path":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseMatcher#ExactPhraseMatcher(PhraseQuery.PostingsAndFreq[],ScoreMode,SimScorer,float).mjava","commits":[{"id":"f8dd25829321d66cd54ea7d40a4130e0d2a29bec","date":1562680889,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseMatcher#ExactPhraseMatcher(PhraseQuery.PostingsAndFreq[],ScoreMode,SimScorer,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseMatcher#ExactPhraseMatcher(PhraseQuery.PostingsAndFreq[],float).mjava","sourceNew":"  ExactPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, ScoreMode scoreMode, SimScorer scorer, float matchCost) {\n    super(matchCost);\n\n    final DocIdSetIterator approximation = ConjunctionDISI.intersectIterators(Arrays.stream(postings).map(p -> p.postings).collect(Collectors.toList()));\n    final ImpactsSource impactsSource = mergeImpacts(Arrays.stream(postings).map(p -> p.impacts).toArray(ImpactsEnum[]::new));\n\n    if (scoreMode == ScoreMode.TOP_SCORES) {\n      this.approximation = this.impactsApproximation = new ImpactsDISI(approximation, impactsSource, scorer);\n    } else {\n      this.approximation = approximation;\n      this.impactsApproximation = new ImpactsDISI(approximation, impactsSource, scorer);\n    }\n\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n  }\n\n","sourceOld":"  ExactPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, float matchCost) {\n    super(approximation(postings), matchCost);\n\n    List<PostingsAndPosition> postingsAndPositions = new ArrayList<>();\n    for(PhraseQuery.PostingsAndFreq posting : postings) {\n      postingsAndPositions.add(new PostingsAndPosition(posting.postings, posting.position));\n    }\n    this.postings = postingsAndPositions.toArray(new PostingsAndPosition[postingsAndPositions.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"]},"commit2Childs":{"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}