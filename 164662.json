{"path":"src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","commits":[{"id":"f4dcc36aaf3ab07f15e069adf183b7e6de5dcccb","date":1250701272,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","pathOld":"/dev/null","sourceNew":"  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"            whátëvêr              \", indexPart.get(\"org.apache.solr.analysis.HTMLStripCharFilter\"));\n    assertEquals(\"            whatever              \", indexPart.get(\"org.apache.lucene.analysis.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(\"org.apache.lucene.analysis.WhitespaceTokenizer\");\n    assertNotNull(\"Expcting WhitespaceTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, null, false));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd979090511072162a7802de2b38f10f929bd0ff","date":1255784467,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","pathOld":"src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","sourceNew":"  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"  whátëvêr  \", indexPart.get(\"org.apache.solr.analysis.HTMLStripCharFilter\"));\n    assertEquals(\"  whatever  \", indexPart.get(\"org.apache.lucene.analysis.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(\"org.apache.lucene.analysis.WhitespaceTokenizer\");\n    assertNotNull(\"Expecting WhitespaceTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, null, false));\n  }\n\n","sourceOld":"  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"            whátëvêr              \", indexPart.get(\"org.apache.solr.analysis.HTMLStripCharFilter\"));\n    assertEquals(\"            whatever              \", indexPart.get(\"org.apache.lucene.analysis.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(\"org.apache.lucene.analysis.WhitespaceTokenizer\");\n    assertNotNull(\"Expcting WhitespaceTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, null, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","pathOld":"src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","sourceNew":"  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"  whátëvêr  \", indexPart.get(\"org.apache.solr.analysis.HTMLStripCharFilter\"));\n    assertEquals(\"  whatever  \", indexPart.get(\"org.apache.lucene.analysis.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(\"org.apache.lucene.analysis.WhitespaceTokenizer\");\n    assertNotNull(\"Expecting WhitespaceTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, null, false));\n  }\n\n","sourceOld":"  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"  whátëvêr  \", indexPart.get(\"org.apache.solr.analysis.HTMLStripCharFilter\"));\n    assertEquals(\"  whatever  \", indexPart.get(\"org.apache.lucene.analysis.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(\"org.apache.lucene.analysis.WhitespaceTokenizer\");\n    assertNotNull(\"Expecting WhitespaceTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, null, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["dd979090511072162a7802de2b38f10f929bd0ff"],"dd979090511072162a7802de2b38f10f929bd0ff":["f4dcc36aaf3ab07f15e069adf183b7e6de5dcccb"],"f4dcc36aaf3ab07f15e069adf183b7e6de5dcccb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4dcc36aaf3ab07f15e069adf183b7e6de5dcccb"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"dd979090511072162a7802de2b38f10f929bd0ff":["ad94625fb8d088209f46650c8097196fec67f00c"],"f4dcc36aaf3ab07f15e069adf183b7e6de5dcccb":["dd979090511072162a7802de2b38f10f929bd0ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}