{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testResponseChildDocuments().mjava","commits":[{"id":"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","date":1402094642,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testResponseChildDocuments().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testResponseChildDocuments() throws IOException {\n\n\n    JavaBinCodec javabin = new JavaBinCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    javabin.marshal(generateSolrDocumentWithChildDocs(), baos);\n\n    SolrDocument result = (SolrDocument) javabin.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    assertEquals(2, result.size());\n    assertEquals(\"1\", result.getFieldValue(\"id\"));\n    assertEquals(\"parentDocument\", result.getFieldValue(\"subject\"));\n    assertTrue(result.hasChildDocuments());\n\n    List<SolrDocument> childDocuments = result.getChildDocuments();\n    assertNotNull(childDocuments);\n    assertEquals(2, childDocuments.size());\n    assertEquals(2, childDocuments.get(0).size());\n    assertEquals(\"2\", childDocuments.get(0).getFieldValue(\"id\"));\n    assertEquals(\"foo\", childDocuments.get(0).getFieldValue(\"cat\"));\n\n    assertEquals(2, childDocuments.get(1).size());\n    assertEquals(\"22\", childDocuments.get(1).getFieldValue(\"id\"));\n    assertEquals(\"bar\", childDocuments.get(1).getFieldValue(\"cat\"));\n    assertFalse(childDocuments.get(1).hasChildDocuments());\n    assertNull(childDocuments.get(1).getChildDocuments());\n\n    assertTrue(childDocuments.get(0).hasChildDocuments());\n    List<SolrDocument> grandChildDocuments = childDocuments.get(0).getChildDocuments();\n    assertNotNull(grandChildDocuments);\n    assertEquals(1, grandChildDocuments.size());\n    assertEquals(1, grandChildDocuments.get(0).size());\n    assertEquals(\"3\", grandChildDocuments.get(0).getFieldValue(\"id\"));\n    assertFalse(grandChildDocuments.get(0).hasChildDocuments());\n    assertNull(grandChildDocuments.get(0).getChildDocuments());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04aef18a25f8e0d1832199f0cc7607773de5a229","date":1473142144,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testResponseChildDocuments().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testResponseChildDocuments().mjava","sourceNew":"  @Test\n  public void testResponseChildDocuments() throws IOException {\n    SolrDocument result = (SolrDocument) serializeAndDeserialize(generateSolrDocumentWithChildDocs());\n    assertEquals(2, result.size());\n    assertEquals(\"1\", result.getFieldValue(\"id\"));\n    assertEquals(\"parentDocument\", result.getFieldValue(\"subject\"));\n    assertTrue(result.hasChildDocuments());\n\n    List<SolrDocument> childDocuments = result.getChildDocuments();\n    assertNotNull(childDocuments);\n    assertEquals(2, childDocuments.size());\n    assertEquals(2, childDocuments.get(0).size());\n    assertEquals(\"2\", childDocuments.get(0).getFieldValue(\"id\"));\n    assertEquals(\"foo\", childDocuments.get(0).getFieldValue(\"cat\"));\n\n    assertEquals(2, childDocuments.get(1).size());\n    assertEquals(\"22\", childDocuments.get(1).getFieldValue(\"id\"));\n    assertEquals(\"bar\", childDocuments.get(1).getFieldValue(\"cat\"));\n    assertFalse(childDocuments.get(1).hasChildDocuments());\n    assertNull(childDocuments.get(1).getChildDocuments());\n\n    assertTrue(childDocuments.get(0).hasChildDocuments());\n    List<SolrDocument> grandChildDocuments = childDocuments.get(0).getChildDocuments();\n    assertNotNull(grandChildDocuments);\n    assertEquals(1, grandChildDocuments.size());\n    assertEquals(1, grandChildDocuments.get(0).size());\n    assertEquals(\"3\", grandChildDocuments.get(0).getFieldValue(\"id\"));\n    assertFalse(grandChildDocuments.get(0).hasChildDocuments());\n    assertNull(grandChildDocuments.get(0).getChildDocuments());\n  }\n\n","sourceOld":"  @Test\n  public void testResponseChildDocuments() throws IOException {\n\n\n    JavaBinCodec javabin = new JavaBinCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    javabin.marshal(generateSolrDocumentWithChildDocs(), baos);\n\n    SolrDocument result = (SolrDocument) javabin.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    assertEquals(2, result.size());\n    assertEquals(\"1\", result.getFieldValue(\"id\"));\n    assertEquals(\"parentDocument\", result.getFieldValue(\"subject\"));\n    assertTrue(result.hasChildDocuments());\n\n    List<SolrDocument> childDocuments = result.getChildDocuments();\n    assertNotNull(childDocuments);\n    assertEquals(2, childDocuments.size());\n    assertEquals(2, childDocuments.get(0).size());\n    assertEquals(\"2\", childDocuments.get(0).getFieldValue(\"id\"));\n    assertEquals(\"foo\", childDocuments.get(0).getFieldValue(\"cat\"));\n\n    assertEquals(2, childDocuments.get(1).size());\n    assertEquals(\"22\", childDocuments.get(1).getFieldValue(\"id\"));\n    assertEquals(\"bar\", childDocuments.get(1).getFieldValue(\"cat\"));\n    assertFalse(childDocuments.get(1).hasChildDocuments());\n    assertNull(childDocuments.get(1).getChildDocuments());\n\n    assertTrue(childDocuments.get(0).hasChildDocuments());\n    List<SolrDocument> grandChildDocuments = childDocuments.get(0).getChildDocuments();\n    assertNotNull(grandChildDocuments);\n    assertEquals(1, grandChildDocuments.size());\n    assertEquals(1, grandChildDocuments.get(0).size());\n    assertEquals(\"3\", grandChildDocuments.get(0).getFieldValue(\"id\"));\n    assertFalse(grandChildDocuments.get(0).hasChildDocuments());\n    assertNull(grandChildDocuments.get(0).getChildDocuments());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testResponseChildDocuments().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testResponseChildDocuments().mjava","sourceNew":"  @Test\n  public void testResponseChildDocuments() throws IOException {\n    SolrDocument result = (SolrDocument) serializeAndDeserialize(generateSolrDocumentWithChildDocs());\n    assertEquals(2, result.size());\n    assertEquals(\"1\", result.getFieldValue(\"id\"));\n    assertEquals(\"parentDocument\", result.getFieldValue(\"subject\"));\n    assertTrue(result.hasChildDocuments());\n\n    List<SolrDocument> childDocuments = result.getChildDocuments();\n    assertNotNull(childDocuments);\n    assertEquals(2, childDocuments.size());\n    assertEquals(2, childDocuments.get(0).size());\n    assertEquals(\"2\", childDocuments.get(0).getFieldValue(\"id\"));\n    assertEquals(\"foo\", childDocuments.get(0).getFieldValue(\"cat\"));\n\n    assertEquals(2, childDocuments.get(1).size());\n    assertEquals(\"22\", childDocuments.get(1).getFieldValue(\"id\"));\n    assertEquals(\"bar\", childDocuments.get(1).getFieldValue(\"cat\"));\n    assertFalse(childDocuments.get(1).hasChildDocuments());\n    assertNull(childDocuments.get(1).getChildDocuments());\n\n    assertTrue(childDocuments.get(0).hasChildDocuments());\n    List<SolrDocument> grandChildDocuments = childDocuments.get(0).getChildDocuments();\n    assertNotNull(grandChildDocuments);\n    assertEquals(1, grandChildDocuments.size());\n    assertEquals(1, grandChildDocuments.get(0).size());\n    assertEquals(\"3\", grandChildDocuments.get(0).getFieldValue(\"id\"));\n    assertFalse(grandChildDocuments.get(0).hasChildDocuments());\n    assertNull(grandChildDocuments.get(0).getChildDocuments());\n  }\n\n","sourceOld":"  @Test\n  public void testResponseChildDocuments() throws IOException {\n\n\n    JavaBinCodec javabin = new JavaBinCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    javabin.marshal(generateSolrDocumentWithChildDocs(), baos);\n\n    SolrDocument result = (SolrDocument) javabin.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    assertEquals(2, result.size());\n    assertEquals(\"1\", result.getFieldValue(\"id\"));\n    assertEquals(\"parentDocument\", result.getFieldValue(\"subject\"));\n    assertTrue(result.hasChildDocuments());\n\n    List<SolrDocument> childDocuments = result.getChildDocuments();\n    assertNotNull(childDocuments);\n    assertEquals(2, childDocuments.size());\n    assertEquals(2, childDocuments.get(0).size());\n    assertEquals(\"2\", childDocuments.get(0).getFieldValue(\"id\"));\n    assertEquals(\"foo\", childDocuments.get(0).getFieldValue(\"cat\"));\n\n    assertEquals(2, childDocuments.get(1).size());\n    assertEquals(\"22\", childDocuments.get(1).getFieldValue(\"id\"));\n    assertEquals(\"bar\", childDocuments.get(1).getFieldValue(\"cat\"));\n    assertFalse(childDocuments.get(1).hasChildDocuments());\n    assertNull(childDocuments.get(1).getChildDocuments());\n\n    assertTrue(childDocuments.get(0).hasChildDocuments());\n    List<SolrDocument> grandChildDocuments = childDocuments.get(0).getChildDocuments();\n    assertNotNull(grandChildDocuments);\n    assertEquals(1, grandChildDocuments.size());\n    assertEquals(1, grandChildDocuments.get(0).size());\n    assertEquals(\"3\", grandChildDocuments.get(0).getFieldValue(\"id\"));\n    assertFalse(grandChildDocuments.get(0).hasChildDocuments());\n    assertNull(grandChildDocuments.get(0).getChildDocuments());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testResponseChildDocuments().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testResponseChildDocuments().mjava","sourceNew":"  @Test\n  public void testResponseChildDocuments() throws IOException {\n    SolrDocument result = (SolrDocument) serializeAndDeserialize(generateSolrDocumentWithChildDocs());\n    assertEquals(2, result.size());\n    assertEquals(\"1\", result.getFieldValue(\"id\"));\n    assertEquals(\"parentDocument\", result.getFieldValue(\"subject\"));\n    assertTrue(result.hasChildDocuments());\n\n    List<SolrDocument> childDocuments = result.getChildDocuments();\n    assertNotNull(childDocuments);\n    assertEquals(2, childDocuments.size());\n    assertEquals(2, childDocuments.get(0).size());\n    assertEquals(\"2\", childDocuments.get(0).getFieldValue(\"id\"));\n    assertEquals(\"foo\", childDocuments.get(0).getFieldValue(\"cat\"));\n\n    assertEquals(2, childDocuments.get(1).size());\n    assertEquals(\"22\", childDocuments.get(1).getFieldValue(\"id\"));\n    assertEquals(\"bar\", childDocuments.get(1).getFieldValue(\"cat\"));\n    assertFalse(childDocuments.get(1).hasChildDocuments());\n    assertNull(childDocuments.get(1).getChildDocuments());\n\n    assertTrue(childDocuments.get(0).hasChildDocuments());\n    List<SolrDocument> grandChildDocuments = childDocuments.get(0).getChildDocuments();\n    assertNotNull(grandChildDocuments);\n    assertEquals(1, grandChildDocuments.size());\n    assertEquals(1, grandChildDocuments.get(0).size());\n    assertEquals(\"3\", grandChildDocuments.get(0).getFieldValue(\"id\"));\n    assertFalse(grandChildDocuments.get(0).hasChildDocuments());\n    assertNull(grandChildDocuments.get(0).getChildDocuments());\n  }\n\n","sourceOld":"  @Test\n  public void testResponseChildDocuments() throws IOException {\n\n\n    JavaBinCodec javabin = new JavaBinCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    javabin.marshal(generateSolrDocumentWithChildDocs(), baos);\n\n    SolrDocument result = (SolrDocument) javabin.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    assertEquals(2, result.size());\n    assertEquals(\"1\", result.getFieldValue(\"id\"));\n    assertEquals(\"parentDocument\", result.getFieldValue(\"subject\"));\n    assertTrue(result.hasChildDocuments());\n\n    List<SolrDocument> childDocuments = result.getChildDocuments();\n    assertNotNull(childDocuments);\n    assertEquals(2, childDocuments.size());\n    assertEquals(2, childDocuments.get(0).size());\n    assertEquals(\"2\", childDocuments.get(0).getFieldValue(\"id\"));\n    assertEquals(\"foo\", childDocuments.get(0).getFieldValue(\"cat\"));\n\n    assertEquals(2, childDocuments.get(1).size());\n    assertEquals(\"22\", childDocuments.get(1).getFieldValue(\"id\"));\n    assertEquals(\"bar\", childDocuments.get(1).getFieldValue(\"cat\"));\n    assertFalse(childDocuments.get(1).hasChildDocuments());\n    assertNull(childDocuments.get(1).getChildDocuments());\n\n    assertTrue(childDocuments.get(0).hasChildDocuments());\n    List<SolrDocument> grandChildDocuments = childDocuments.get(0).getChildDocuments();\n    assertNotNull(grandChildDocuments);\n    assertEquals(1, grandChildDocuments.size());\n    assertEquals(1, grandChildDocuments.get(0).size());\n    assertEquals(\"3\", grandChildDocuments.get(0).getFieldValue(\"id\"));\n    assertFalse(grandChildDocuments.get(0).hasChildDocuments());\n    assertNull(grandChildDocuments.get(0).getChildDocuments());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testResponseChildDocuments().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testResponseChildDocuments().mjava","sourceNew":"  @Test\n  public void testResponseChildDocuments() throws IOException {\n    SolrDocument result = (SolrDocument) serializeAndDeserialize(generateSolrDocumentWithChildDocs());\n    assertEquals(2, result.size());\n    assertEquals(\"1\", result.getFieldValue(\"id\"));\n    assertEquals(\"parentDocument\", result.getFieldValue(\"subject\"));\n    assertTrue(result.hasChildDocuments());\n\n    List<SolrDocument> childDocuments = result.getChildDocuments();\n    assertNotNull(childDocuments);\n    assertEquals(2, childDocuments.size());\n    assertEquals(2, childDocuments.get(0).size());\n    assertEquals(\"2\", childDocuments.get(0).getFieldValue(\"id\"));\n    assertEquals(\"foo\", childDocuments.get(0).getFieldValue(\"cat\"));\n\n    assertEquals(2, childDocuments.get(1).size());\n    assertEquals(\"22\", childDocuments.get(1).getFieldValue(\"id\"));\n    assertEquals(\"bar\", childDocuments.get(1).getFieldValue(\"cat\"));\n    assertFalse(childDocuments.get(1).hasChildDocuments());\n    assertNull(childDocuments.get(1).getChildDocuments());\n\n    assertTrue(childDocuments.get(0).hasChildDocuments());\n    List<SolrDocument> grandChildDocuments = childDocuments.get(0).getChildDocuments();\n    assertNotNull(grandChildDocuments);\n    assertEquals(1, grandChildDocuments.size());\n    assertEquals(1, grandChildDocuments.get(0).size());\n    assertEquals(\"3\", grandChildDocuments.get(0).getFieldValue(\"id\"));\n    assertFalse(grandChildDocuments.get(0).hasChildDocuments());\n    assertNull(grandChildDocuments.get(0).getChildDocuments());\n  }\n\n","sourceOld":"  @Test\n  public void testResponseChildDocuments() throws IOException {\n\n\n    JavaBinCodec javabin = new JavaBinCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    javabin.marshal(generateSolrDocumentWithChildDocs(), baos);\n\n    SolrDocument result = (SolrDocument) javabin.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    assertEquals(2, result.size());\n    assertEquals(\"1\", result.getFieldValue(\"id\"));\n    assertEquals(\"parentDocument\", result.getFieldValue(\"subject\"));\n    assertTrue(result.hasChildDocuments());\n\n    List<SolrDocument> childDocuments = result.getChildDocuments();\n    assertNotNull(childDocuments);\n    assertEquals(2, childDocuments.size());\n    assertEquals(2, childDocuments.get(0).size());\n    assertEquals(\"2\", childDocuments.get(0).getFieldValue(\"id\"));\n    assertEquals(\"foo\", childDocuments.get(0).getFieldValue(\"cat\"));\n\n    assertEquals(2, childDocuments.get(1).size());\n    assertEquals(\"22\", childDocuments.get(1).getFieldValue(\"id\"));\n    assertEquals(\"bar\", childDocuments.get(1).getFieldValue(\"cat\"));\n    assertFalse(childDocuments.get(1).hasChildDocuments());\n    assertNull(childDocuments.get(1).getChildDocuments());\n\n    assertTrue(childDocuments.get(0).hasChildDocuments());\n    List<SolrDocument> grandChildDocuments = childDocuments.get(0).getChildDocuments();\n    assertNotNull(grandChildDocuments);\n    assertEquals(1, grandChildDocuments.size());\n    assertEquals(1, grandChildDocuments.get(0).size());\n    assertEquals(\"3\", grandChildDocuments.get(0).getFieldValue(\"id\"));\n    assertFalse(grandChildDocuments.get(0).hasChildDocuments());\n    assertNull(grandChildDocuments.get(0).getChildDocuments());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04aef18a25f8e0d1832199f0cc7607773de5a229":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","89424def13674ea17829b41c5883c54ecc31a132"],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","04aef18a25f8e0d1832199f0cc7607773de5a229"]},"commit2Childs":{"04aef18a25f8e0d1832199f0cc7607773de5a229":["89424def13674ea17829b41c5883c54ecc31a132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["04aef18a25f8e0d1832199f0cc7607773de5a229","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}