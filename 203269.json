{"path":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>();\n    Map<String,String[]> params = new HashMap<String, String[]>();\n    params.put( \"q\", new String[] { \"hello\" } );\n    \n    // Set up the expected behavior\n    String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getParameterMap()).andReturn(params).anyTimes();\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 1000000 );\n      RawRequestParser raw = new RawRequestParser();\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw );\n      \n      SolrParams p = standard.parseParamsAndFillStreams( request, streams );\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>();\n    Map<String,String[]> params = new HashMap<String, String[]>();\n    params.put( \"q\", new String[] { \"hello\" } );\n    \n    // Set up the expected behavior\n    String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getParameterMap()).andReturn(params).anyTimes();\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 1000000 );\n      RawRequestParser raw = new RawRequestParser();\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw );\n      \n      SolrParams p = standard.parseParamsAndFillStreams( request, streams );\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>();\n    Map<String,String[]> params = new HashMap<String, String[]>();\n    params.put( \"q\", new String[] { \"hello\" } );\n    \n    // Set up the expected behavior\n    String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getParameterMap()).andReturn(params).anyTimes();\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 1000000 );\n      RawRequestParser raw = new RawRequestParser();\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw );\n      \n      SolrParams p = standard.parseParamsAndFillStreams( request, streams );\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>();\n    Map<String,String[]> params = new HashMap<String, String[]>();\n    params.put( \"q\", new String[] { \"hello\" } );\n    \n    // Set up the expected behavior\n    String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getParameterMap()).andReturn(params).anyTimes();\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 1000000 );\n      RawRequestParser raw = new RawRequestParser();\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw );\n      \n      SolrParams p = standard.parseParamsAndFillStreams( request, streams );\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>();\n    Map<String,String[]> params = new HashMap<String, String[]>();\n    params.put( \"q\", new String[] { \"hello\" } );\n    \n    // Set up the expected behavior\n    String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getParameterMap()).andReturn(params).anyTimes();\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 1000000 );\n      RawRequestParser raw = new RawRequestParser();\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw );\n      \n      SolrParams p = standard.parseParamsAndFillStreams( request, streams );\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>();\n    Map<String,String[]> params = new HashMap<String, String[]>();\n    params.put( \"q\", new String[] { \"hello\" } );\n    \n    // Set up the expected behavior\n    String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getParameterMap()).andReturn(params).anyTimes();\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 1000000 );\n      RawRequestParser raw = new RawRequestParser();\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw );\n      \n      SolrParams p = standard.parseParamsAndFillStreams( request, streams );\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7d0565444d6381434fbff66cecf07da249f2bb4","date":1357484111,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    final String getParams = \"qt=%C3%BC&dup=foo\", postParams = \"q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(\"UTF-8\");\n    \n    // Set up the expected behavior\n    final String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getQueryString()).andReturn(getParams).anyTimes();\n      expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n      expect(request.getInputStream()).andReturn(new ServletInputStream() {\n        private final ByteArrayInputStream in = new ByteArrayInputStream(postBytes);\n        @Override public int read() { return in.read(); }\n      });\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n      RawRequestParser raw = new RawRequestParser();\n      FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n      \n      SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n      assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n      assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"bar\"}, p.getParams(\"dup\") );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>();\n    Map<String,String[]> params = new HashMap<String, String[]>();\n    params.put( \"q\", new String[] { \"hello\" } );\n    \n    // Set up the expected behavior\n    String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getParameterMap()).andReturn(params).anyTimes();\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 1000000 );\n      RawRequestParser raw = new RawRequestParser();\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw );\n      \n      SolrParams p = standard.parseParamsAndFillStreams( request, streams );\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    final String getParams = \"qt=%C3%BC&dup=foo\", postParams = \"q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(\"UTF-8\");\n    \n    // Set up the expected behavior\n    final String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getQueryString()).andReturn(getParams).anyTimes();\n      expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n      expect(request.getInputStream()).andReturn(new ServletInputStream() {\n        private final ByteArrayInputStream in = new ByteArrayInputStream(postBytes);\n        @Override public int read() { return in.read(); }\n      });\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n      RawRequestParser raw = new RawRequestParser();\n      FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n      \n      SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n      assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n      assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"bar\"}, p.getParams(\"dup\") );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>();\n    Map<String,String[]> params = new HashMap<String, String[]>();\n    params.put( \"q\", new String[] { \"hello\" } );\n    \n    // Set up the expected behavior\n    String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getParameterMap()).andReturn(params).anyTimes();\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 1000000 );\n      RawRequestParser raw = new RawRequestParser();\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw );\n      \n      SolrParams p = standard.parseParamsAndFillStreams( request, streams );\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfea9c90af47b6b37ffaafe52d3307a1f8978e68","date":1357665734,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    final String getParams = \"qt=%C3%BC&dup=foo\", postParams = \"q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(\"US-ASCII\");\n    \n    // Set up the expected behavior\n    final String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getQueryString()).andReturn(getParams).anyTimes();\n      expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n      expect(request.getInputStream()).andReturn(new ServletInputStream() {\n        private final ByteArrayInputStream in = new ByteArrayInputStream(postBytes);\n        @Override public int read() { return in.read(); }\n      });\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n      RawRequestParser raw = new RawRequestParser();\n      FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n      \n      SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n      assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n      assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"bar\"}, p.getParams(\"dup\") );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    final String getParams = \"qt=%C3%BC&dup=foo\", postParams = \"q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(\"UTF-8\");\n    \n    // Set up the expected behavior\n    final String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getQueryString()).andReturn(getParams).anyTimes();\n      expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n      expect(request.getInputStream()).andReturn(new ServletInputStream() {\n        private final ByteArrayInputStream in = new ByteArrayInputStream(postBytes);\n        @Override public int read() { return in.read(); }\n      });\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n      RawRequestParser raw = new RawRequestParser();\n      FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n      \n      SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n      assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n      assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"bar\"}, p.getParams(\"dup\") );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    final String getParams = \"qt=%C3%BC&dup=foo\", postParams = \"q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(\"US-ASCII\");\n    \n    // Set up the expected behavior\n    final String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getQueryString()).andReturn(getParams).anyTimes();\n      expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n      expect(request.getInputStream()).andReturn(new ServletInputStream() {\n        private final ByteArrayInputStream in = new ByteArrayInputStream(postBytes);\n        @Override public int read() { return in.read(); }\n      });\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n      RawRequestParser raw = new RawRequestParser();\n      FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n      \n      SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n      assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n      assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"bar\"}, p.getParams(\"dup\") );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    final String getParams = \"qt=%C3%BC&dup=foo\", postParams = \"q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(\"UTF-8\");\n    \n    // Set up the expected behavior\n    final String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getQueryString()).andReturn(getParams).anyTimes();\n      expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n      expect(request.getInputStream()).andReturn(new ServletInputStream() {\n        private final ByteArrayInputStream in = new ByteArrayInputStream(postBytes);\n        @Override public int read() { return in.read(); }\n      });\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n      RawRequestParser raw = new RawRequestParser();\n      FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n      \n      SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n      assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n      assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"bar\"}, p.getParams(\"dup\") );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    final String getParams = \"qt=%C3%BC&dup=foo\", postParams = \"q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    \n    // Set up the expected behavior\n    final String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getQueryString()).andReturn(getParams).anyTimes();\n      expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n      expect(request.getInputStream()).andReturn(new ServletInputStream() {\n        private final ByteArrayInputStream in = new ByteArrayInputStream(postBytes);\n        @Override public int read() { return in.read(); }\n      });\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n      RawRequestParser raw = new RawRequestParser();\n      FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n      \n      SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n      assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n      assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"bar\"}, p.getParams(\"dup\") );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    final String getParams = \"qt=%C3%BC&dup=foo\", postParams = \"q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(\"US-ASCII\");\n    \n    // Set up the expected behavior\n    final String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getQueryString()).andReturn(getParams).anyTimes();\n      expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n      expect(request.getInputStream()).andReturn(new ServletInputStream() {\n        private final ByteArrayInputStream in = new ByteArrayInputStream(postBytes);\n        @Override public int read() { return in.read(); }\n      });\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n      RawRequestParser raw = new RawRequestParser();\n      FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n      \n      SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n      assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n      assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"bar\"}, p.getParams(\"dup\") );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    final String getParams = \"qt=%C3%BC&dup=foo\", postParams = \"q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    \n    // Set up the expected behavior\n    final String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getQueryString()).andReturn(getParams).anyTimes();\n      expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n      expect(request.getInputStream()).andReturn(new ServletInputStream() {\n        private final ByteArrayInputStream in = new ByteArrayInputStream(postBytes);\n        @Override public int read() { return in.read(); }\n      });\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n      RawRequestParser raw = new RawRequestParser();\n      FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n      \n      SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n      assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n      assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"bar\"}, p.getParams(\"dup\") );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    final String getParams = \"qt=%C3%BC&dup=foo\", postParams = \"q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(\"US-ASCII\");\n    \n    // Set up the expected behavior\n    final String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getQueryString()).andReturn(getParams).anyTimes();\n      expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n      expect(request.getInputStream()).andReturn(new ServletInputStream() {\n        private final ByteArrayInputStream in = new ByteArrayInputStream(postBytes);\n        @Override public int read() { return in.read(); }\n      });\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n      RawRequestParser raw = new RawRequestParser();\n      FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n      \n      SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n      assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n      assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"bar\"}, p.getParams(\"dup\") );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd","date":1420472758,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    final String getParams = \"qt=%C3%BC&dup=foo\", postParams = \"q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    \n    // Set up the expected behavior\n    final String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getQueryString()).andReturn(getParams).anyTimes();\n      expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n      expect(request.getInputStream()).andReturn(new ByteServletInputStream(postBytes));\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n      RawRequestParser raw = new RawRequestParser();\n      FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n      \n      SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n      assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n      assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"bar\"}, p.getParams(\"dup\") );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    final String getParams = \"qt=%C3%BC&dup=foo\", postParams = \"q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    \n    // Set up the expected behavior\n    final String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getQueryString()).andReturn(getParams).anyTimes();\n      expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n      expect(request.getInputStream()).andReturn(new ServletInputStream() {\n        private final ByteArrayInputStream in = new ByteArrayInputStream(postBytes);\n        @Override public int read() { return in.read(); }\n      });\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n      RawRequestParser raw = new RawRequestParser();\n      FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n      \n      SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n      assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n      assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"bar\"}, p.getParams(\"dup\") );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d17ec5164debc23076db7fd11d0331f201583b5","date":1426658173,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    final String getParams = \"qt=%C3%BC&dup=foo\", postParams = \"q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    \n    // Set up the expected behavior\n    final String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = getMock(\"/solr/select\", contentType, postBytes.length);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getQueryString()).andReturn(getParams).anyTimes();\n      expect(request.getInputStream()).andReturn(new ByteServletInputStream(postBytes));\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n      RawRequestParser raw = new RawRequestParser();\n      FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n      \n      SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n      assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n      assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"bar\"}, p.getParams(\"dup\") );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    final String getParams = \"qt=%C3%BC&dup=foo\", postParams = \"q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    \n    // Set up the expected behavior\n    final String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getQueryString()).andReturn(getParams).anyTimes();\n      expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n      expect(request.getInputStream()).andReturn(new ByteServletInputStream(postBytes));\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n      RawRequestParser raw = new RawRequestParser();\n      FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n      \n      SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n      assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n      assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"bar\"}, p.getParams(\"dup\") );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    final String getParams = \"qt=%C3%BC&dup=foo\", postParams = \"q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    \n    // Set up the expected behavior\n    final String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = getMock(\"/solr/select\", contentType, postBytes.length);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getQueryString()).andReturn(getParams).anyTimes();\n      expect(request.getInputStream()).andReturn(new ByteServletInputStream(postBytes));\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n      RawRequestParser raw = new RawRequestParser();\n      FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n      \n      SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n      assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n      assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"bar\"}, p.getParams(\"dup\") );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    final String getParams = \"qt=%C3%BC&dup=foo\", postParams = \"q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    \n    // Set up the expected behavior\n    final String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getQueryString()).andReturn(getParams).anyTimes();\n      expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n      expect(request.getInputStream()).andReturn(new ByteServletInputStream(postBytes));\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n      RawRequestParser raw = new RawRequestParser();\n      FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n      \n      SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n      assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n      assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"bar\"}, p.getParams(\"dup\") );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    final String getParams = \"qt=%C3%BC&dup=foo\", postParams = \"q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    \n    // Set up the expected behavior\n    final String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = getMock(\"/solr/select\", contentType, postBytes.length);\n      when(request.getMethod()).thenReturn(\"POST\");\n      when(request.getQueryString()).thenReturn(getParams);\n      when(request.getInputStream()).thenReturn(new ByteServletInputStream(postBytes));\n\n      MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n      RawRequestParser raw = new RawRequestParser();\n      FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n      \n      SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n      assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n      assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"bar\"}, p.getParams(\"dup\") );\n\n      verify(request).getInputStream();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    final String getParams = \"qt=%C3%BC&dup=foo\", postParams = \"q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    \n    // Set up the expected behavior\n    final String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = getMock(\"/solr/select\", contentType, postBytes.length);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getQueryString()).andReturn(getParams).anyTimes();\n      expect(request.getInputStream()).andReturn(new ByteServletInputStream(postBytes));\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n      RawRequestParser raw = new RawRequestParser();\n      FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n      \n      SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n      assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n      assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"bar\"}, p.getParams(\"dup\") );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["bfea9c90af47b6b37ffaafe52d3307a1f8978e68","7d89d7e4e5101347833eea558851bf4209218619"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","c7d0565444d6381434fbff66cecf07da249f2bb4"],"c7d0565444d6381434fbff66cecf07da249f2bb4":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7d89d7e4e5101347833eea558851bf4209218619":["bfea9c90af47b6b37ffaafe52d3307a1f8978e68"],"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd":["7d89d7e4e5101347833eea558851bf4209218619"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d5b778829b5b506ab02023b2f4ba58aef5d7f0fd","0d17ec5164debc23076db7fd11d0331f201583b5"],"0d17ec5164debc23076db7fd11d0331f201583b5":["d5b778829b5b506ab02023b2f4ba58aef5d7f0fd"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bfea9c90af47b6b37ffaafe52d3307a1f8978e68":["c7d0565444d6381434fbff66cecf07da249f2bb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["0d17ec5164debc23076db7fd11d0331f201583b5"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bfea9c90af47b6b37ffaafe52d3307a1f8978e68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"c7d0565444d6381434fbff66cecf07da249f2bb4":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bfea9c90af47b6b37ffaafe52d3307a1f8978e68"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7d0565444d6381434fbff66cecf07da249f2bb4"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","d5b778829b5b506ab02023b2f4ba58aef5d7f0fd"],"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d17ec5164debc23076db7fd11d0331f201583b5"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"0d17ec5164debc23076db7fd11d0331f201583b5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"bfea9c90af47b6b37ffaafe52d3307a1f8978e68":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}