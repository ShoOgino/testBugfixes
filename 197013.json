{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","pathOld":"/dev/null","sourceNew":"  public InputStream getData(String query) {\r\n    Object o = wrapper.getVariableResolver().resolve(dataField);\r\n    if (o == null) {\r\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\r\n    }\r\n    if (o instanceof Blob) {\r\n      Blob blob = (Blob) o;\r\n      try {\r\n        //Most of the JDBC drivers have getBinaryStream defined as public\r\n        // so let us just check it\r\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\r\n        if (Modifier.isPublic(m.getModifiers())) {\r\n          return (InputStream) m.invoke(blob);\r\n        } else {\r\n          // force invoke\r\n          m.setAccessible(true);\r\n          return (InputStream) m.invoke(blob);\r\n        }\r\n      } catch (Exception e) {\r\n        LOG.info(\"Unable to get data from BLOB\");\r\n        return null;\r\n\r\n      }\r\n    } else if (o instanceof byte[]) {\r\n      byte[] bytes = (byte[]) o;\r\n      return new ByteArrayInputStream(bytes);\r\n    } else {\r\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\r\n    } \r\n\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","sourceNew":null,"sourceOld":"  public InputStream getData(String query) {\r\n    Object o = wrapper.getVariableResolver().resolve(dataField);\r\n    if (o == null) {\r\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\r\n    }\r\n    if (o instanceof Blob) {\r\n      Blob blob = (Blob) o;\r\n      try {\r\n        //Most of the JDBC drivers have getBinaryStream defined as public\r\n        // so let us just check it\r\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\r\n        if (Modifier.isPublic(m.getModifiers())) {\r\n          return (InputStream) m.invoke(blob);\r\n        } else {\r\n          // force invoke\r\n          m.setAccessible(true);\r\n          return (InputStream) m.invoke(blob);\r\n        }\r\n      } catch (Exception e) {\r\n        LOG.info(\"Unable to get data from BLOB\");\r\n        return null;\r\n\r\n      }\r\n    } else if (o instanceof byte[]) {\r\n      byte[] bytes = (byte[]) o;\r\n      return new ByteArrayInputStream(bytes);\r\n    } else {\r\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\r\n    } \r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","sourceNew":"  public InputStream getData(String query) {\r\n    Object o = wrapper.getVariableResolver().resolve(dataField);\r\n    if (o == null) {\r\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\r\n    }\r\n    if (o instanceof Blob) {\r\n      Blob blob = (Blob) o;\r\n      try {\r\n        //Most of the JDBC drivers have getBinaryStream defined as public\r\n        // so let us just check it\r\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\r\n        if (Modifier.isPublic(m.getModifiers())) {\r\n          return (InputStream) m.invoke(blob);\r\n        } else {\r\n          // force invoke\r\n          m.setAccessible(true);\r\n          return (InputStream) m.invoke(blob);\r\n        }\r\n      } catch (Exception e) {\r\n        LOG.info(\"Unable to get data from BLOB\");\r\n        return null;\r\n\r\n      }\r\n    } else if (o instanceof byte[]) {\r\n      byte[] bytes = (byte[]) o;\r\n      return new ByteArrayInputStream(bytes);\r\n    } else {\r\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\r\n    } \r\n\r\n  }\r\n\n","sourceOld":"  public InputStream getData(String query) {\r\n    Object o = wrapper.getVariableResolver().resolve(dataField);\r\n    if (o == null) {\r\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\r\n    }\r\n    if (o instanceof Blob) {\r\n      Blob blob = (Blob) o;\r\n      try {\r\n        //Most of the JDBC drivers have getBinaryStream defined as public\r\n        // so let us just check it\r\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\r\n        if (Modifier.isPublic(m.getModifiers())) {\r\n          return (InputStream) m.invoke(blob);\r\n        } else {\r\n          // force invoke\r\n          m.setAccessible(true);\r\n          return (InputStream) m.invoke(blob);\r\n        }\r\n      } catch (Exception e) {\r\n        LOG.info(\"Unable to get data from BLOB\");\r\n        return null;\r\n\r\n      }\r\n    } else if (o instanceof byte[]) {\r\n      byte[] bytes = (byte[]) o;\r\n      return new ByteArrayInputStream(bytes);\r\n    } else {\r\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\r\n    } \r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","pathOld":"/dev/null","sourceNew":"  public InputStream getData(String query) {\r\n    Object o = wrapper.getVariableResolver().resolve(dataField);\r\n    if (o == null) {\r\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\r\n    }\r\n    if (o instanceof Blob) {\r\n      Blob blob = (Blob) o;\r\n      try {\r\n        //Most of the JDBC drivers have getBinaryStream defined as public\r\n        // so let us just check it\r\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\r\n        if (Modifier.isPublic(m.getModifiers())) {\r\n          return (InputStream) m.invoke(blob);\r\n        } else {\r\n          // force invoke\r\n          m.setAccessible(true);\r\n          return (InputStream) m.invoke(blob);\r\n        }\r\n      } catch (Exception e) {\r\n        LOG.info(\"Unable to get data from BLOB\");\r\n        return null;\r\n\r\n      }\r\n    } else if (o instanceof byte[]) {\r\n      byte[] bytes = (byte[]) o;\r\n      return new ByteArrayInputStream(bytes);\r\n    } else {\r\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\r\n    } \r\n\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff3adc4fd8094e3973a5ecbbe8968ae45a86a55","date":1270182973,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","sourceNew":"  public InputStream getData(String query) {\n    Object o = wrapper.getVariableResolver().resolve(dataField);\n    if (o == null) {\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\n    }\n    if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return (InputStream) m.invoke(blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return (InputStream) m.invoke(blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else if (o instanceof byte[]) {\n      byte[] bytes = (byte[]) o;\n      return new ByteArrayInputStream(bytes);\n    } else {\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\n    } \n\n  }\n\n","sourceOld":"  public InputStream getData(String query) {\r\n    Object o = wrapper.getVariableResolver().resolve(dataField);\r\n    if (o == null) {\r\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\r\n    }\r\n    if (o instanceof Blob) {\r\n      Blob blob = (Blob) o;\r\n      try {\r\n        //Most of the JDBC drivers have getBinaryStream defined as public\r\n        // so let us just check it\r\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\r\n        if (Modifier.isPublic(m.getModifiers())) {\r\n          return (InputStream) m.invoke(blob);\r\n        } else {\r\n          // force invoke\r\n          m.setAccessible(true);\r\n          return (InputStream) m.invoke(blob);\r\n        }\r\n      } catch (Exception e) {\r\n        LOG.info(\"Unable to get data from BLOB\");\r\n        return null;\r\n\r\n      }\r\n    } else if (o instanceof byte[]) {\r\n      byte[] bytes = (byte[]) o;\r\n      return new ByteArrayInputStream(bytes);\r\n    } else {\r\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\r\n    } \r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","sourceNew":"  @Override\n  public InputStream getData(String query) {\n    Object o = wrapper.getVariableResolver().resolve(dataField);\n    if (o == null) {\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\n    }\n    if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return (InputStream) m.invoke(blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return (InputStream) m.invoke(blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else if (o instanceof byte[]) {\n      byte[] bytes = (byte[]) o;\n      return new ByteArrayInputStream(bytes);\n    } else {\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\n    } \n\n  }\n\n","sourceOld":"  public InputStream getData(String query) {\n    Object o = wrapper.getVariableResolver().resolve(dataField);\n    if (o == null) {\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\n    }\n    if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return (InputStream) m.invoke(blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return (InputStream) m.invoke(blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else if (o instanceof byte[]) {\n      byte[] bytes = (byte[]) o;\n      return new ByteArrayInputStream(bytes);\n    } else {\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\n    } \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","sourceNew":"  @Override\n  public InputStream getData(String query) {\n    Object o = wrapper.getVariableResolver().resolve(dataField);\n    if (o == null) {\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\n    }\n    if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return (InputStream) m.invoke(blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return (InputStream) m.invoke(blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else if (o instanceof byte[]) {\n      byte[] bytes = (byte[]) o;\n      return new ByteArrayInputStream(bytes);\n    } else {\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\n    } \n\n  }\n\n","sourceOld":"  public InputStream getData(String query) {\n    Object o = wrapper.getVariableResolver().resolve(dataField);\n    if (o == null) {\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\n    }\n    if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return (InputStream) m.invoke(blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return (InputStream) m.invoke(blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else if (o instanceof byte[]) {\n      byte[] bytes = (byte[]) o;\n      return new ByteArrayInputStream(bytes);\n    } else {\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\n    } \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","sourceNew":"  @Override\n  public InputStream getData(String query) {\n    Object o = wrapper.getVariableResolver().resolve(dataField);\n    if (o == null) {\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\n    }\n    if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return (InputStream) m.invoke(blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return (InputStream) m.invoke(blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else if (o instanceof byte[]) {\n      byte[] bytes = (byte[]) o;\n      return new ByteArrayInputStream(bytes);\n    } else {\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\n    } \n\n  }\n\n","sourceOld":"  public InputStream getData(String query) {\n    Object o = wrapper.getVariableResolver().resolve(dataField);\n    if (o == null) {\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\n    }\n    if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return (InputStream) m.invoke(blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return (InputStream) m.invoke(blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else if (o instanceof byte[]) {\n      byte[] bytes = (byte[]) o;\n      return new ByteArrayInputStream(bytes);\n    } else {\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\n    } \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","sourceNew":"  @Override\n  public InputStream getData(String query) {\n    Object o = wrapper.getVariableResolver().resolve(dataField);\n    if (o == null) {\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\n    }\n    if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return (InputStream) m.invoke(blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return (InputStream) m.invoke(blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else if (o instanceof byte[]) {\n      byte[] bytes = (byte[]) o;\n      return new ByteArrayInputStream(bytes);\n    } else {\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\n    } \n\n  }\n\n","sourceOld":"  @Override\n  public InputStream getData(String query) {\n    Object o = wrapper.getVariableResolver().resolve(dataField);\n    if (o == null) {\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\n    }\n    if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return (InputStream) m.invoke(blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return (InputStream) m.invoke(blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else if (o instanceof byte[]) {\n      byte[] bytes = (byte[]) o;\n      return new ByteArrayInputStream(bytes);\n    } else {\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\n    } \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","sourceNew":"  @Override\n  public InputStream getData(String query) {\n    Object o = wrapper.getVariableResolver().resolve(dataField);\n    if (o == null) {\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\n    }\n    if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return (InputStream) m.invoke(blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return (InputStream) m.invoke(blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else if (o instanceof byte[]) {\n      byte[] bytes = (byte[]) o;\n      return new ByteArrayInputStream(bytes);\n    } else {\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\n    } \n\n  }\n\n","sourceOld":"  @Override\n  public InputStream getData(String query) {\n    Object o = wrapper.getVariableResolver().resolve(dataField);\n    if (o == null) {\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\n    }\n    if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return (InputStream) m.invoke(blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return (InputStream) m.invoke(blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else if (o instanceof byte[]) {\n      byte[] bytes = (byte[]) o;\n      return new ByteArrayInputStream(bytes);\n    } else {\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\n    } \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["dff3adc4fd8094e3973a5ecbbe8968ae45a86a55"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["dff3adc4fd8094e3973a5ecbbe8968ae45a86a55","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"dff3adc4fd8094e3973a5ecbbe8968ae45a86a55":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["dff3adc4fd8094e3973a5ecbbe8968ae45a86a55","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["dff3adc4fd8094e3973a5ecbbe8968ae45a86a55"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"dff3adc4fd8094e3973a5ecbbe8968ae45a86a55":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}