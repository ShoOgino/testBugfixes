{"path":"solr/test-framework/src/java/org/apache/solr/util/LogLevel.Configurer#setLogLevels(Map[String,Level]).mjava","commits":[{"id":"93baf46bd12096e0de407258b3b32cfaaf58e448","date":1522030569,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/LogLevel.Configurer#setLogLevels(Map[String,Level]).mjava","pathOld":"/dev/null","sourceNew":"    private static Map<String, Level> setLogLevels(Map<String, Level> logLevels) {\n      LoggerContext ctx = LoggerContext.getContext(false);\n      Configuration config = ctx.getConfiguration();\n\n      Map<String, Level> oldLevels = new HashMap<>();\n      logLevels.forEach((loggerName, level) -> {\n        LoggerConfig logConfig = config.getLoggerConfig(loggerName);\n        // what the initial logger level was. It will use the root value if logger is being defined for the first time\n        oldLevels.put(loggerName, logConfig.getLevel());\n        if (loggerName.equals(logConfig.getName())) {\n          logConfig.setLevel(level);\n        } else {\n          LoggerConfig loggerConfig = new LoggerConfig(loggerName, level, true);\n          loggerConfig.setLevel(level);\n          config.addLogger(loggerName, loggerConfig);\n        }\n      });\n      ctx.updateLoggers();\n      return oldLevels;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","date":1522059649,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/LogLevel.Configurer#setLogLevels(Map[String,Level]).mjava","pathOld":"/dev/null","sourceNew":"    private static Map<String, Level> setLogLevels(Map<String, Level> logLevels) {\n      LoggerContext ctx = LoggerContext.getContext(false);\n      Configuration config = ctx.getConfiguration();\n\n      Map<String, Level> oldLevels = new HashMap<>();\n      logLevels.forEach((loggerName, level) -> {\n        LoggerConfig logConfig = config.getLoggerConfig(loggerName);\n        // what the initial logger level was. It will use the root value if logger is being defined for the first time\n        oldLevels.put(loggerName, logConfig.getLevel());\n        if (loggerName.equals(logConfig.getName())) {\n          logConfig.setLevel(level);\n        } else {\n          LoggerConfig loggerConfig = new LoggerConfig(loggerName, level, true);\n          loggerConfig.setLevel(level);\n          config.addLogger(loggerName, loggerConfig);\n        }\n      });\n      ctx.updateLoggers();\n      return oldLevels;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86ca4dae7c5e12c39255e15568e91dd428619428","date":1576619925,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/LogLevel.Configurer#setLogLevels(Map[String,Level]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/LogLevel.Configurer#setLogLevels(Map[String,Level]).mjava","sourceNew":"    private static Map<String, Level> setLogLevels(Map<String, Level> logLevels) {\n      final LoggerContext ctx = LoggerContext.getContext(false);\n      final Configuration config = ctx.getConfiguration();\n\n      final Map<String, Level> oldLevels = new HashMap<>();\n      logLevels.forEach((loggerName, newLevel) -> {\n        final LoggerConfig logConfig = config.getLoggerConfig(loggerName);\n        if (loggerName.equals(logConfig.getName())) {\n          // we have an existing LoggerConfig for this specific loggerName\n          // record the existing 'old' level...\n          oldLevels.put(loggerName, logConfig.getLevel());\n          // ...and set the new one (or remove if null) ...\n          if (null == newLevel) {\n            config.removeLogger(loggerName);\n          } else {\n            logConfig.setLevel(newLevel);\n          }\n        } else {\n          // there is no existing configuration for the exact loggerName, logConfig is some ancestor\n          // record an 'old' level of 'null' to track the lack of any configured level...\n          oldLevels.put(loggerName, null);\n          // ...and now create a new logger config wih our new level\n          final LoggerConfig newLoggerConfig = new LoggerConfig(loggerName, newLevel, true);\n          config.addLogger(loggerName, newLoggerConfig);\n        }\n\n        assert oldLevels.containsKey(loggerName);\n      });\n      ctx.updateLoggers();\n      return oldLevels;\n    }\n\n","sourceOld":"    private static Map<String, Level> setLogLevels(Map<String, Level> logLevels) {\n      LoggerContext ctx = LoggerContext.getContext(false);\n      Configuration config = ctx.getConfiguration();\n\n      Map<String, Level> oldLevels = new HashMap<>();\n      logLevels.forEach((loggerName, level) -> {\n        LoggerConfig logConfig = config.getLoggerConfig(loggerName);\n        // what the initial logger level was. It will use the root value if logger is being defined for the first time\n        oldLevels.put(loggerName, logConfig.getLevel());\n        if (loggerName.equals(logConfig.getName())) {\n          logConfig.setLevel(level);\n        } else {\n          LoggerConfig loggerConfig = new LoggerConfig(loggerName, level, true);\n          loggerConfig.setLevel(level);\n          config.addLogger(loggerName, loggerConfig);\n        }\n      });\n      ctx.updateLoggers();\n      return oldLevels;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/LogLevel.Configurer#setLogLevels(Map[String,Level]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/LogLevel.Configurer#setLogLevels(Map[String,Level]).mjava","sourceNew":"    private static Map<String, Level> setLogLevels(Map<String, Level> logLevels) {\n      final LoggerContext ctx = LoggerContext.getContext(false);\n      final Configuration config = ctx.getConfiguration();\n\n      final Map<String, Level> oldLevels = new HashMap<>();\n      logLevels.forEach((loggerName, newLevel) -> {\n        final LoggerConfig logConfig = config.getLoggerConfig(loggerName);\n        if (loggerName.equals(logConfig.getName())) {\n          // we have an existing LoggerConfig for this specific loggerName\n          // record the existing 'old' level...\n          oldLevels.put(loggerName, logConfig.getLevel());\n          // ...and set the new one (or remove if null) ...\n          if (null == newLevel) {\n            config.removeLogger(loggerName);\n          } else {\n            logConfig.setLevel(newLevel);\n          }\n        } else {\n          // there is no existing configuration for the exact loggerName, logConfig is some ancestor\n          // record an 'old' level of 'null' to track the lack of any configured level...\n          oldLevels.put(loggerName, null);\n          // ...and now create a new logger config wih our new level\n          final LoggerConfig newLoggerConfig = new LoggerConfig(loggerName, newLevel, true);\n          config.addLogger(loggerName, newLoggerConfig);\n        }\n\n        assert oldLevels.containsKey(loggerName);\n      });\n      ctx.updateLoggers();\n      return oldLevels;\n    }\n\n","sourceOld":"    private static Map<String, Level> setLogLevels(Map<String, Level> logLevels) {\n      LoggerContext ctx = LoggerContext.getContext(false);\n      Configuration config = ctx.getConfiguration();\n\n      Map<String, Level> oldLevels = new HashMap<>();\n      logLevels.forEach((loggerName, level) -> {\n        LoggerConfig logConfig = config.getLoggerConfig(loggerName);\n        // what the initial logger level was. It will use the root value if logger is being defined for the first time\n        oldLevels.put(loggerName, logConfig.getLevel());\n        if (loggerName.equals(logConfig.getName())) {\n          logConfig.setLevel(level);\n        } else {\n          LoggerConfig loggerConfig = new LoggerConfig(loggerName, level, true);\n          loggerConfig.setLevel(level);\n          config.addLogger(loggerName, loggerConfig);\n        }\n      });\n      ctx.updateLoggers();\n      return oldLevels;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","86ca4dae7c5e12c39255e15568e91dd428619428"],"86ca4dae7c5e12c39255e15568e91dd428619428":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93baf46bd12096e0de407258b3b32cfaaf58e448":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86ca4dae7c5e12c39255e15568e91dd428619428"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93baf46bd12096e0de407258b3b32cfaaf58e448"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":[],"86ca4dae7c5e12c39255e15568e91dd428619428":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93baf46bd12096e0de407258b3b32cfaaf58e448","f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["246314af59d76a47fccc31e9494eefee01ec9c00","86ca4dae7c5e12c39255e15568e91dd428619428"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}