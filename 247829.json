{"path":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/csv -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/json -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/csv -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/json -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/csv -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/json -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/csv -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/json -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/csv -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/json -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/csv -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/json -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00c8a312269787ad677745cd5fc2631d61dff78d","date":1326209731,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/csv -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/json -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n    final String type = System.getProperty(\"type\", DEFAULT_DATA_TYPE);\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out, type);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out, type);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out, type);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/csv -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/json -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0eda5d48996a90feabcf28690c480ecc3ba55dbc","date":1339442421,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n    final String type = System.getProperty(\"type\", DEFAULT_DATA_TYPE);\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out, type);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out, type);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out, type);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/csv -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/json -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n    final String type = System.getProperty(\"type\", DEFAULT_DATA_TYPE);\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out, type);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out, type);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out, type);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa","date":1343692569,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"SimplePostTool version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      usage();\n      return;\n    }\n    \n    OutputStream out = null;\n    final String type = System.getProperty(\"type\");\n\n    final String params = System.getProperty(\"params\", \"\");\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", SimplePostTool.appendParam(DEFAULT_POST_URL, params)));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    if (isOn(System.getProperty(\"auto\", DEFAULT_AUTO))) {\n      t.setAuto(true);\n    }\n    \n    if (isOn(System.getProperty(\"recursive\", DEFAULT_RECURSIVE))) {\n      t.setRecursive(true);\n    }\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (isOn(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n    \n    t.setFileTypes(System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES));\n\n    int numFilesPosted = 0;\n    \n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          // Skip posting files if special param \"-\" given  \n          if (!args[0].equals(\"-\")) {\n            info(\"Posting files to base url \" + u + (!t.auto?\" using content-type \"+(type==null?DEFAULT_CONTENT_TYPE:type):\"\")+\"..\");\n            if(t.auto)\n              info(\"Entering auto mode. File endings considered are \"+t.getFileTypes());\n            if(t.recursive)\n              info(\"Entering recursive mode\"); \n            numFilesPosted = t.postFiles(args, 0, out, type);\n            info(numFilesPosted + \" files indexed.\");\n          }\n        } else {\n            usageShort();\n            return;\n        }\n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out, type);\n          }\n        } else {\n          usageShort();\n          return;\n        }\n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out, type);\n      }\n      if (isOn(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes to \" + u + \"..\");\n        t.commit();\n      }\n      if (isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE to \" + u + \"..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n    final String type = System.getProperty(\"type\", DEFAULT_DATA_TYPE);\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out, type);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out, type);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out, type);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"SimplePostTool version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      usage();\n      return;\n    }\n    \n    OutputStream out = null;\n    final String type = System.getProperty(\"type\");\n\n    final String params = System.getProperty(\"params\", \"\");\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", SimplePostTool.appendParam(DEFAULT_POST_URL, params)));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    if (isOn(System.getProperty(\"auto\", DEFAULT_AUTO))) {\n      t.setAuto(true);\n    }\n    \n    if (isOn(System.getProperty(\"recursive\", DEFAULT_RECURSIVE))) {\n      t.setRecursive(true);\n    }\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (isOn(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n    \n    t.setFileTypes(System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES));\n\n    int numFilesPosted = 0;\n    \n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          // Skip posting files if special param \"-\" given  \n          if (!args[0].equals(\"-\")) {\n            info(\"Posting files to base url \" + u + (!t.auto?\" using content-type \"+(type==null?DEFAULT_CONTENT_TYPE:type):\"\")+\"..\");\n            if(t.auto)\n              info(\"Entering auto mode. File endings considered are \"+t.getFileTypes());\n            if(t.recursive)\n              info(\"Entering recursive mode\"); \n            numFilesPosted = t.postFiles(args, 0, out, type);\n            info(numFilesPosted + \" files indexed.\");\n          }\n        } else {\n            usageShort();\n            return;\n        }\n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out, type);\n          }\n        } else {\n          usageShort();\n          return;\n        }\n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out, type);\n      }\n      if (isOn(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes to \" + u + \"..\");\n        t.commit();\n      }\n      if (isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE to \" + u + \"..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n    final String type = System.getProperty(\"type\", DEFAULT_DATA_TYPE);\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out, type);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out, type);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out, type);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"SimplePostTool version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      usage();\n      return;\n    }\n    \n    OutputStream out = null;\n    final String type = System.getProperty(\"type\");\n\n    final String params = System.getProperty(\"params\", \"\");\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", SimplePostTool.appendParam(DEFAULT_POST_URL, params)));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    if (isOn(System.getProperty(\"auto\", DEFAULT_AUTO))) {\n      t.setAuto(true);\n    }\n    \n    if (isOn(System.getProperty(\"recursive\", DEFAULT_RECURSIVE))) {\n      t.setRecursive(true);\n    }\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (isOn(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n    \n    t.setFileTypes(System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES));\n\n    int numFilesPosted = 0;\n    \n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          // Skip posting files if special param \"-\" given  \n          if (!args[0].equals(\"-\")) {\n            info(\"Posting files to base url \" + u + (!t.auto?\" using content-type \"+(type==null?DEFAULT_CONTENT_TYPE:type):\"\")+\"..\");\n            if(t.auto)\n              info(\"Entering auto mode. File endings considered are \"+t.getFileTypes());\n            if(t.recursive)\n              info(\"Entering recursive mode\"); \n            numFilesPosted = t.postFiles(args, 0, out, type);\n            info(numFilesPosted + \" files indexed.\");\n          }\n        } else {\n            usageShort();\n            return;\n        }\n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out, type);\n          }\n        } else {\n          usageShort();\n          return;\n        }\n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out, type);\n      }\n      if (isOn(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes to \" + u + \"..\");\n        t.commit();\n      }\n      if (isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE to \" + u + \"..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n    final String type = System.getProperty(\"type\", DEFAULT_DATA_TYPE);\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out, type);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out, type);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out, type);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2c3a504730329ae644b009dee43024116605d47","date":1345253449,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  /**\n   * See {@link #usage()} for valid command line usage\n   * @param args the params on the command line\n   */\n  public static void main(String[] args) {\n    info(\"SimplePostTool version \" + VERSION_OF_THIS_TOOL);\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      usage();\n    } else {\n      final SimplePostTool t = parseArgsAndInit(args);\n      t.execute();\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"SimplePostTool version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      usage();\n      return;\n    }\n    \n    OutputStream out = null;\n    final String type = System.getProperty(\"type\");\n\n    final String params = System.getProperty(\"params\", \"\");\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", SimplePostTool.appendParam(DEFAULT_POST_URL, params)));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    if (isOn(System.getProperty(\"auto\", DEFAULT_AUTO))) {\n      t.setAuto(true);\n    }\n    \n    if (isOn(System.getProperty(\"recursive\", DEFAULT_RECURSIVE))) {\n      t.setRecursive(true);\n    }\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (isOn(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n    \n    t.setFileTypes(System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES));\n\n    int numFilesPosted = 0;\n    \n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          // Skip posting files if special param \"-\" given  \n          if (!args[0].equals(\"-\")) {\n            info(\"Posting files to base url \" + u + (!t.auto?\" using content-type \"+(type==null?DEFAULT_CONTENT_TYPE:type):\"\")+\"..\");\n            if(t.auto)\n              info(\"Entering auto mode. File endings considered are \"+t.getFileTypes());\n            if(t.recursive)\n              info(\"Entering recursive mode\"); \n            numFilesPosted = t.postFiles(args, 0, out, type);\n            info(numFilesPosted + \" files indexed.\");\n          }\n        } else {\n            usageShort();\n            return;\n        }\n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out, type);\n          }\n        } else {\n          usageShort();\n          return;\n        }\n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out, type);\n      }\n      if (isOn(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes to \" + u + \"..\");\n        t.commit();\n      }\n      if (isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE to \" + u + \"..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["38f05daa6146d75507d970167918490315a71643"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38f05daa6146d75507d970167918490315a71643","date":1345285611,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  /**\n   * See usage() for valid command line usage\n   * @param args the params on the command line\n   */\n  public static void main(String[] args) {\n    info(\"SimplePostTool version \" + VERSION_OF_THIS_TOOL);\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      usage();\n    } else {\n      final SimplePostTool t = parseArgsAndInit(args);\n      t.execute();\n    }\n  }\n\n","sourceOld":"  /**\n   * See {@link #usage()} for valid command line usage\n   * @param args the params on the command line\n   */\n  public static void main(String[] args) {\n    info(\"SimplePostTool version \" + VERSION_OF_THIS_TOOL);\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      usage();\n    } else {\n      final SimplePostTool t = parseArgsAndInit(args);\n      t.execute();\n    }\n  }\n\n","bugFix":["c2c3a504730329ae644b009dee43024116605d47"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  /**\n   * See usage() for valid command line usage\n   * @param args the params on the command line\n   */\n  public static void main(String[] args) {\n    info(\"SimplePostTool version \" + VERSION_OF_THIS_TOOL);\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      usage();\n    } else {\n      final SimplePostTool t = parseArgsAndInit(args);\n      t.execute();\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"SimplePostTool version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      usage();\n      return;\n    }\n    \n    OutputStream out = null;\n    final String type = System.getProperty(\"type\");\n\n    final String params = System.getProperty(\"params\", \"\");\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", SimplePostTool.appendParam(DEFAULT_POST_URL, params)));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    if (isOn(System.getProperty(\"auto\", DEFAULT_AUTO))) {\n      t.setAuto(true);\n    }\n    \n    if (isOn(System.getProperty(\"recursive\", DEFAULT_RECURSIVE))) {\n      t.setRecursive(true);\n    }\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (isOn(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n    \n    t.setFileTypes(System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES));\n\n    int numFilesPosted = 0;\n    \n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          // Skip posting files if special param \"-\" given  \n          if (!args[0].equals(\"-\")) {\n            info(\"Posting files to base url \" + u + (!t.auto?\" using content-type \"+(type==null?DEFAULT_CONTENT_TYPE:type):\"\")+\"..\");\n            if(t.auto)\n              info(\"Entering auto mode. File endings considered are \"+t.getFileTypes());\n            if(t.recursive)\n              info(\"Entering recursive mode\"); \n            numFilesPosted = t.postFiles(args, 0, out, type);\n            info(numFilesPosted + \" files indexed.\");\n          }\n        } else {\n            usageShort();\n            return;\n        }\n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out, type);\n          }\n        } else {\n          usageShort();\n          return;\n        }\n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out, type);\n      }\n      if (isOn(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes to \" + u + \"..\");\n        t.commit();\n      }\n      if (isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE to \" + u + \"..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  /**\n   * See usage() for valid command line usage\n   * @param args the params on the command line\n   */\n  public static void main(String[] args) {\n    info(\"SimplePostTool version \" + VERSION_OF_THIS_TOOL);\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      usage();\n    } else {\n      final SimplePostTool t = parseArgsAndInit(args);\n      t.execute();\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"SimplePostTool version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      usage();\n      return;\n    }\n    \n    OutputStream out = null;\n    final String type = System.getProperty(\"type\");\n\n    final String params = System.getProperty(\"params\", \"\");\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", SimplePostTool.appendParam(DEFAULT_POST_URL, params)));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    if (isOn(System.getProperty(\"auto\", DEFAULT_AUTO))) {\n      t.setAuto(true);\n    }\n    \n    if (isOn(System.getProperty(\"recursive\", DEFAULT_RECURSIVE))) {\n      t.setRecursive(true);\n    }\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (isOn(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n    \n    t.setFileTypes(System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES));\n\n    int numFilesPosted = 0;\n    \n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          // Skip posting files if special param \"-\" given  \n          if (!args[0].equals(\"-\")) {\n            info(\"Posting files to base url \" + u + (!t.auto?\" using content-type \"+(type==null?DEFAULT_CONTENT_TYPE:type):\"\")+\"..\");\n            if(t.auto)\n              info(\"Entering auto mode. File endings considered are \"+t.getFileTypes());\n            if(t.recursive)\n              info(\"Entering recursive mode\"); \n            numFilesPosted = t.postFiles(args, 0, out, type);\n            info(numFilesPosted + \" files indexed.\");\n          }\n        } else {\n            usageShort();\n            return;\n        }\n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out, type);\n          }\n        } else {\n          usageShort();\n          return;\n        }\n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out, type);\n      }\n      if (isOn(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes to \" + u + \"..\");\n        t.commit();\n      }\n      if (isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE to \" + u + \"..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00c8a312269787ad677745cd5fc2631d61dff78d":["c26f00b574427b55127e869b935845554afde1fa"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["d6f074e73200c07d54f242d3880a8da5a35ff97b","38f05daa6146d75507d970167918490315a71643"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c2c3a504730329ae644b009dee43024116605d47":["2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa"],"0eda5d48996a90feabcf28690c480ecc3ba55dbc":["00c8a312269787ad677745cd5fc2631d61dff78d"],"38f05daa6146d75507d970167918490315a71643":["c2c3a504730329ae644b009dee43024116605d47"],"2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa":["0eda5d48996a90feabcf28690c480ecc3ba55dbc"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","38f05daa6146d75507d970167918490315a71643"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["0eda5d48996a90feabcf28690c480ecc3ba55dbc","2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["0eda5d48996a90feabcf28690c480ecc3ba55dbc","2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["38f05daa6146d75507d970167918490315a71643"]},"commit2Childs":{"00c8a312269787ad677745cd5fc2631d61dff78d":["0eda5d48996a90feabcf28690c480ecc3ba55dbc"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"c26f00b574427b55127e869b935845554afde1fa":["00c8a312269787ad677745cd5fc2631d61dff78d"],"c2c3a504730329ae644b009dee43024116605d47":["38f05daa6146d75507d970167918490315a71643"],"0eda5d48996a90feabcf28690c480ecc3ba55dbc":["2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"38f05daa6146d75507d970167918490315a71643":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2b40eba7ffeb9689a49c3e3ed7f07e2c25a594fa":["c2c3a504730329ae644b009dee43024116605d47","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["616c1830142ff5c1ddedec1ed898733b73c8e23b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}