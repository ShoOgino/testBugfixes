{"path":"solr/core/src/test/org/apache/solr/util/tracing/TestHttpServletCarrier#test().mjava","commits":[{"id":"cbaf96cfda5422c42955ce34344f0e01839894ea","date":1559675051,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/tracing/TestHttpServletCarrier#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() {\n    SolrTestCaseJ4.assumeWorkingMockito();\n    HttpServletRequest req = mock(HttpServletRequest.class);\n    Multimap<String, String> headers = HashMultimap.create();\n    headers.put(\"a\", \"a\");\n    headers.put(\"a\", \"b\");\n    headers.put(\"a\", \"c\");\n    headers.put(\"b\", \"a\");\n    headers.put(\"b\", \"b\");\n    headers.put(\"c\", \"a\");\n\n    when(req.getHeaderNames()).thenReturn(IteratorUtils.asEnumeration(headers.keySet().iterator()));\n    when(req.getHeaders(anyString())).thenAnswer((Answer<Enumeration<String>>) inv -> {\n      String key = inv.getArgument(0);\n      return IteratorUtils.asEnumeration(headers.get(key).iterator());\n    });\n\n    HttpServletCarrier servletCarrier = new HttpServletCarrier(req);\n    Iterator<Map.Entry<String, String>> it = servletCarrier.iterator();\n    Multimap<String, String> resultBack = HashMultimap.create();\n    while(it.hasNext()) {\n      Map.Entry<String, String> entry = it.next();\n      resultBack.put(entry.getKey(), entry.getValue());\n    }\n    assertEquals(headers, resultBack);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/tracing/TestHttpServletCarrier#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/tracing/TestHttpServletCarrier#test().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void test() {\n    SolrTestCaseJ4.assumeWorkingMockito();\n    HttpServletRequest req = mock(HttpServletRequest.class);\n    Multimap<String, String> headers = HashMultimap.create();\n    headers.put(\"a\", \"a\");\n    headers.put(\"a\", \"b\");\n    headers.put(\"a\", \"c\");\n    headers.put(\"b\", \"a\");\n    headers.put(\"b\", \"b\");\n    headers.put(\"c\", \"a\");\n\n    when(req.getHeaderNames()).thenReturn(IteratorUtils.asEnumeration(headers.keySet().iterator()));\n    when(req.getHeaders(anyString())).thenAnswer((Answer<Enumeration<String>>) inv -> {\n      String key = inv.getArgument(0);\n      return IteratorUtils.asEnumeration(headers.get(key).iterator());\n    });\n\n    HttpServletCarrier servletCarrier = new HttpServletCarrier(req);\n    Iterator<Map.Entry<String, String>> it = servletCarrier.iterator();\n    Multimap<String, String> resultBack = HashMultimap.create();\n    while(it.hasNext()) {\n      Map.Entry<String, String> entry = it.next();\n      resultBack.put(entry.getKey(), entry.getValue());\n    }\n    assertEquals(headers, resultBack);\n\n\n  }\n\n","sourceOld":"  @Test\n  public void test() {\n    SolrTestCaseJ4.assumeWorkingMockito();\n    HttpServletRequest req = mock(HttpServletRequest.class);\n    Multimap<String, String> headers = HashMultimap.create();\n    headers.put(\"a\", \"a\");\n    headers.put(\"a\", \"b\");\n    headers.put(\"a\", \"c\");\n    headers.put(\"b\", \"a\");\n    headers.put(\"b\", \"b\");\n    headers.put(\"c\", \"a\");\n\n    when(req.getHeaderNames()).thenReturn(IteratorUtils.asEnumeration(headers.keySet().iterator()));\n    when(req.getHeaders(anyString())).thenAnswer((Answer<Enumeration<String>>) inv -> {\n      String key = inv.getArgument(0);\n      return IteratorUtils.asEnumeration(headers.get(key).iterator());\n    });\n\n    HttpServletCarrier servletCarrier = new HttpServletCarrier(req);\n    Iterator<Map.Entry<String, String>> it = servletCarrier.iterator();\n    Multimap<String, String> resultBack = HashMultimap.create();\n    while(it.hasNext()) {\n      Map.Entry<String, String> entry = it.next();\n      resultBack.put(entry.getKey(), entry.getValue());\n    }\n    assertEquals(headers, resultBack);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06eb5f96c63fb4bd8b194a33fd050326145d5070","date":1595538555,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/tracing/TestHttpServletCarrier#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/tracing/TestHttpServletCarrier#test().mjava","sourceNew":"  @Test\n  public void test() {\n    SolrTestCaseJ4.assumeWorkingMockito();\n    HttpServletRequest req = mock(HttpServletRequest.class);\n    Multimap<String, String> headers = HashMultimap.create();\n    headers.put(\"a\", \"a\");\n    headers.put(\"a\", \"b\");\n    headers.put(\"a\", \"c\");\n    headers.put(\"b\", \"a\");\n    headers.put(\"b\", \"b\");\n    headers.put(\"c\", \"a\");\n\n    when(req.getHeaderNames()).thenReturn(IteratorUtils.asEnumeration(headers.keySet().iterator()));\n    when(req.getHeaders(anyString())).thenAnswer((Answer<Enumeration<String>>) inv -> {\n      String key = inv.getArgument(0);\n      return IteratorUtils.asEnumeration(headers.get(key).iterator());\n    });\n\n    HttpServletCarrier servletCarrier = new HttpServletCarrier(req);\n    Iterator<Map.Entry<String, String>> it = servletCarrier.iterator();\n    Multimap<String, String> resultBack = HashMultimap.create();\n    while(it.hasNext()) {\n      Map.Entry<String, String> entry = it.next();\n      resultBack.put(entry.getKey(), entry.getValue());\n    }\n    assertEquals(headers, resultBack);\n\n\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void test() {\n    SolrTestCaseJ4.assumeWorkingMockito();\n    HttpServletRequest req = mock(HttpServletRequest.class);\n    Multimap<String, String> headers = HashMultimap.create();\n    headers.put(\"a\", \"a\");\n    headers.put(\"a\", \"b\");\n    headers.put(\"a\", \"c\");\n    headers.put(\"b\", \"a\");\n    headers.put(\"b\", \"b\");\n    headers.put(\"c\", \"a\");\n\n    when(req.getHeaderNames()).thenReturn(IteratorUtils.asEnumeration(headers.keySet().iterator()));\n    when(req.getHeaders(anyString())).thenAnswer((Answer<Enumeration<String>>) inv -> {\n      String key = inv.getArgument(0);\n      return IteratorUtils.asEnumeration(headers.get(key).iterator());\n    });\n\n    HttpServletCarrier servletCarrier = new HttpServletCarrier(req);\n    Iterator<Map.Entry<String, String>> it = servletCarrier.iterator();\n    Multimap<String, String> resultBack = HashMultimap.create();\n    while(it.hasNext()) {\n      Map.Entry<String, String> entry = it.next();\n      resultBack.put(entry.getKey(), entry.getValue());\n    }\n    assertEquals(headers, resultBack);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cbaf96cfda5422c42955ce34344f0e01839894ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06eb5f96c63fb4bd8b194a33fd050326145d5070":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06eb5f96c63fb4bd8b194a33fd050326145d5070"],"e98520789adb1d5ad05afb4956eca0944a929688":["cbaf96cfda5422c42955ce34344f0e01839894ea"]},"commit2Childs":{"cbaf96cfda5422c42955ce34344f0e01839894ea":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cbaf96cfda5422c42955ce34344f0e01839894ea"],"06eb5f96c63fb4bd8b194a33fd050326145d5070":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e98520789adb1d5ad05afb4956eca0944a929688":["06eb5f96c63fb4bd8b194a33fd050326145d5070"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}