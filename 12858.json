{"path":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreCollector.NoScore#getLeafCollector(LeafReaderContext).mjava","commits":[{"id":"9a8ccb9d7a971a53ccd8bc3d8230590bca107c51","date":1431446228,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreCollector.NoScore#getLeafCollector(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      SortedDocValues docTermOrds = DocValues.getSorted(context.reader(), field);\n      if (ordinalMap != null) {\n        LongValues segmentOrdToGlobalOrdLookup = ordinalMap.getGlobalOrds(context.ord);\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            final long segmentOrd = docTermOrds.getOrd(doc);\n            if (segmentOrd != -1) {\n              final int globalOrd = (int) segmentOrdToGlobalOrdLookup.get(segmentOrd);\n              collectedOrds.set(globalOrd);\n              occurrences.increment(globalOrd);\n            }\n          }\n        };\n      } else {\n        return new LeafCollector() {\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            final int segmentOrd = docTermOrds.getOrd(doc);\n            if (segmentOrd != -1) {\n              collectedOrds.set(segmentOrd);\n              occurrences.increment(segmentOrd);\n            }\n          }\n        };\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreCollector.NoScore#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreCollector.NoScore#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      SortedDocValues docTermOrds = DocValues.getSorted(context.reader(), field);\n      if (ordinalMap != null) {\n        LongValues segmentOrdToGlobalOrdLookup = ordinalMap.getGlobalOrds(context.ord);\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            if (doc > docTermOrds.docID()) {\n              docTermOrds.advance(doc);\n            }\n            if (doc == docTermOrds.docID()) {\n              final int globalOrd = (int) segmentOrdToGlobalOrdLookup.get(docTermOrds.ordValue());\n              collectedOrds.set(globalOrd);\n              occurrences.increment(globalOrd);\n            }\n          }\n        };\n      } else {\n        return new LeafCollector() {\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            if (doc > docTermOrds.docID()) {\n              docTermOrds.advance(doc);\n            }\n            if (doc == docTermOrds.docID()) {\n              int segmentOrd = docTermOrds.ordValue();\n              collectedOrds.set(segmentOrd);\n              occurrences.increment(segmentOrd);\n            }\n          }\n        };\n      }\n    }\n\n","sourceOld":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      SortedDocValues docTermOrds = DocValues.getSorted(context.reader(), field);\n      if (ordinalMap != null) {\n        LongValues segmentOrdToGlobalOrdLookup = ordinalMap.getGlobalOrds(context.ord);\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            final long segmentOrd = docTermOrds.getOrd(doc);\n            if (segmentOrd != -1) {\n              final int globalOrd = (int) segmentOrdToGlobalOrdLookup.get(segmentOrd);\n              collectedOrds.set(globalOrd);\n              occurrences.increment(globalOrd);\n            }\n          }\n        };\n      } else {\n        return new LeafCollector() {\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            final int segmentOrd = docTermOrds.getOrd(doc);\n            if (segmentOrd != -1) {\n              collectedOrds.set(segmentOrd);\n              occurrences.increment(segmentOrd);\n            }\n          }\n        };\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreCollector.NoScore#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreCollector.NoScore#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      SortedDocValues docTermOrds = DocValues.getSorted(context.reader(), field);\n      if (ordinalMap != null) {\n        LongValues segmentOrdToGlobalOrdLookup = ordinalMap.getGlobalOrds(context.ord);\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            if (doc > docTermOrds.docID()) {\n              docTermOrds.advance(doc);\n            }\n            if (doc == docTermOrds.docID()) {\n              final int globalOrd = (int) segmentOrdToGlobalOrdLookup.get(docTermOrds.ordValue());\n              collectedOrds.set(globalOrd);\n              occurrences.increment(globalOrd);\n            }\n          }\n        };\n      } else {\n        return new LeafCollector() {\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            if (doc > docTermOrds.docID()) {\n              docTermOrds.advance(doc);\n            }\n            if (doc == docTermOrds.docID()) {\n              int segmentOrd = docTermOrds.ordValue();\n              collectedOrds.set(segmentOrd);\n              occurrences.increment(segmentOrd);\n            }\n          }\n        };\n      }\n    }\n\n","sourceOld":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      SortedDocValues docTermOrds = DocValues.getSorted(context.reader(), field);\n      if (ordinalMap != null) {\n        LongValues segmentOrdToGlobalOrdLookup = ordinalMap.getGlobalOrds(context.ord);\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            final long segmentOrd = docTermOrds.getOrd(doc);\n            if (segmentOrd != -1) {\n              final int globalOrd = (int) segmentOrdToGlobalOrdLookup.get(segmentOrd);\n              collectedOrds.set(globalOrd);\n              occurrences.increment(globalOrd);\n            }\n          }\n        };\n      } else {\n        return new LeafCollector() {\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            final int segmentOrd = docTermOrds.getOrd(doc);\n            if (segmentOrd != -1) {\n              collectedOrds.set(segmentOrd);\n              occurrences.increment(segmentOrd);\n            }\n          }\n        };\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreCollector.NoScore#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreCollector.NoScore#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      SortedDocValues docTermOrds = DocValues.getSorted(context.reader(), field);\n      if (ordinalMap != null) {\n        LongValues segmentOrdToGlobalOrdLookup = ordinalMap.getGlobalOrds(context.ord);\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            if (doc > docTermOrds.docID()) {\n              docTermOrds.advance(doc);\n            }\n            if (doc == docTermOrds.docID()) {\n              final int globalOrd = (int) segmentOrdToGlobalOrdLookup.get(docTermOrds.ordValue());\n              collectedOrds.set(globalOrd);\n              occurrences.increment(globalOrd);\n            }\n          }\n        };\n      } else {\n        return new LeafCollector() {\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            if (doc > docTermOrds.docID()) {\n              docTermOrds.advance(doc);\n            }\n            if (doc == docTermOrds.docID()) {\n              int segmentOrd = docTermOrds.ordValue();\n              collectedOrds.set(segmentOrd);\n              occurrences.increment(segmentOrd);\n            }\n          }\n        };\n      }\n    }\n\n","sourceOld":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      SortedDocValues docTermOrds = DocValues.getSorted(context.reader(), field);\n      if (ordinalMap != null) {\n        LongValues segmentOrdToGlobalOrdLookup = ordinalMap.getGlobalOrds(context.ord);\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            final long segmentOrd = docTermOrds.getOrd(doc);\n            if (segmentOrd != -1) {\n              final int globalOrd = (int) segmentOrdToGlobalOrdLookup.get(segmentOrd);\n              collectedOrds.set(globalOrd);\n              occurrences.increment(globalOrd);\n            }\n          }\n        };\n      } else {\n        return new LeafCollector() {\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            final int segmentOrd = docTermOrds.getOrd(doc);\n            if (segmentOrd != -1) {\n              collectedOrds.set(segmentOrd);\n              occurrences.increment(segmentOrd);\n            }\n          }\n        };\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b","date":1518443389,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreCollector.NoScore#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreCollector.NoScore#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      SortedDocValues docTermOrds = DocValues.getSorted(context.reader(), field);\n      if (ordinalMap != null) {\n        LongValues segmentOrdToGlobalOrdLookup = ordinalMap.getGlobalOrds(context.ord);\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            if (docTermOrds.advanceExact(doc)) {\n              final int globalOrd = (int) segmentOrdToGlobalOrdLookup.get(docTermOrds.ordValue());\n              collectedOrds.set(globalOrd);\n              occurrences.increment(globalOrd);\n            }\n          }\n        };\n      } else {\n        return new LeafCollector() {\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            if (docTermOrds.advanceExact(doc)) {\n              int segmentOrd = docTermOrds.ordValue();\n              collectedOrds.set(segmentOrd);\n              occurrences.increment(segmentOrd);\n            }\n          }\n        };\n      }\n    }\n\n","sourceOld":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      SortedDocValues docTermOrds = DocValues.getSorted(context.reader(), field);\n      if (ordinalMap != null) {\n        LongValues segmentOrdToGlobalOrdLookup = ordinalMap.getGlobalOrds(context.ord);\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            if (doc > docTermOrds.docID()) {\n              docTermOrds.advance(doc);\n            }\n            if (doc == docTermOrds.docID()) {\n              final int globalOrd = (int) segmentOrdToGlobalOrdLookup.get(docTermOrds.ordValue());\n              collectedOrds.set(globalOrd);\n              occurrences.increment(globalOrd);\n            }\n          }\n        };\n      } else {\n        return new LeafCollector() {\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            if (doc > docTermOrds.docID()) {\n              docTermOrds.advance(doc);\n            }\n            if (doc == docTermOrds.docID()) {\n              int segmentOrd = docTermOrds.ordValue();\n              collectedOrds.set(segmentOrd);\n              occurrences.increment(segmentOrd);\n            }\n          }\n        };\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcdec9fcf0409223f35c5ec3bc14094314941b4","date":1518533599,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreCollector.NoScore#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreCollector.NoScore#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      SortedDocValues docTermOrds = DocValues.getSorted(context.reader(), field);\n      if (ordinalMap != null) {\n        LongValues segmentOrdToGlobalOrdLookup = ordinalMap.getGlobalOrds(context.ord);\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            if (docTermOrds.advanceExact(doc)) {\n              final int globalOrd = (int) segmentOrdToGlobalOrdLookup.get(docTermOrds.ordValue());\n              collectedOrds.set(globalOrd);\n              occurrences.increment(globalOrd);\n            }\n          }\n        };\n      } else {\n        return new LeafCollector() {\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            if (docTermOrds.advanceExact(doc)) {\n              int segmentOrd = docTermOrds.ordValue();\n              collectedOrds.set(segmentOrd);\n              occurrences.increment(segmentOrd);\n            }\n          }\n        };\n      }\n    }\n\n","sourceOld":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      SortedDocValues docTermOrds = DocValues.getSorted(context.reader(), field);\n      if (ordinalMap != null) {\n        LongValues segmentOrdToGlobalOrdLookup = ordinalMap.getGlobalOrds(context.ord);\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            if (doc > docTermOrds.docID()) {\n              docTermOrds.advance(doc);\n            }\n            if (doc == docTermOrds.docID()) {\n              final int globalOrd = (int) segmentOrdToGlobalOrdLookup.get(docTermOrds.ordValue());\n              collectedOrds.set(globalOrd);\n              occurrences.increment(globalOrd);\n            }\n          }\n        };\n      } else {\n        return new LeafCollector() {\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            if (doc > docTermOrds.docID()) {\n              docTermOrds.advance(doc);\n            }\n            if (doc == docTermOrds.docID()) {\n              int segmentOrd = docTermOrds.ordValue();\n              collectedOrds.set(segmentOrd);\n              occurrences.increment(segmentOrd);\n            }\n          }\n        };\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreCollector.NoScore#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsWithScoreCollector.NoScore#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      SortedDocValues docTermOrds = DocValues.getSorted(context.reader(), field);\n      if (ordinalMap != null) {\n        LongValues segmentOrdToGlobalOrdLookup = ordinalMap.getGlobalOrds(context.ord);\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorable scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            if (docTermOrds.advanceExact(doc)) {\n              final int globalOrd = (int) segmentOrdToGlobalOrdLookup.get(docTermOrds.ordValue());\n              collectedOrds.set(globalOrd);\n              occurrences.increment(globalOrd);\n            }\n          }\n        };\n      } else {\n        return new LeafCollector() {\n          @Override\n          public void setScorer(Scorable scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            if (docTermOrds.advanceExact(doc)) {\n              int segmentOrd = docTermOrds.ordValue();\n              collectedOrds.set(segmentOrd);\n              occurrences.increment(segmentOrd);\n            }\n          }\n        };\n      }\n    }\n\n","sourceOld":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      SortedDocValues docTermOrds = DocValues.getSorted(context.reader(), field);\n      if (ordinalMap != null) {\n        LongValues segmentOrdToGlobalOrdLookup = ordinalMap.getGlobalOrds(context.ord);\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            if (docTermOrds.advanceExact(doc)) {\n              final int globalOrd = (int) segmentOrdToGlobalOrdLookup.get(docTermOrds.ordValue());\n              collectedOrds.set(globalOrd);\n              occurrences.increment(globalOrd);\n            }\n          }\n        };\n      } else {\n        return new LeafCollector() {\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {\n            if (docTermOrds.advanceExact(doc)) {\n              int segmentOrd = docTermOrds.ordValue();\n              collectedOrds.set(segmentOrd);\n              occurrences.increment(segmentOrd);\n            }\n          }\n        };\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"285244982ce6aa163d1e60a707f0e6e121736ce5":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9a8ccb9d7a971a53ccd8bc3d8230590bca107c51","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["9a8ccb9d7a971a53ccd8bc3d8230590bca107c51"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","81f64a6570bc5d216c5d575c3b29ecb106fa0e6b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9a8ccb9d7a971a53ccd8bc3d8230590bca107c51","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"9a8ccb9d7a971a53ccd8bc3d8230590bca107c51":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["81f64a6570bc5d216c5d575c3b29ecb106fa0e6b","bfcdec9fcf0409223f35c5ec3bc14094314941b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a8ccb9d7a971a53ccd8bc3d8230590bca107c51"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"9a8ccb9d7a971a53ccd8bc3d8230590bca107c51":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}