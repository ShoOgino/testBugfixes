{"path":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testCopyHardLinks().mjava","commits":[{"id":"d7fdc63b467a1f8d68d35c0f1b4bb61d1fc64ef5","date":1464252091,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testCopyHardLinks().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests that we use hardlinks if possible on Directory#copyFrom\n   */\n  public void testCopyHardLinks() throws IOException {\n    Path tempDir = createTempDir();\n    Path dir_1 = tempDir.resolve(\"dir_1\");\n    Path dir_2 = tempDir.resolve(\"dir_2\");\n    Files.createDirectories(dir_1);\n    Files.createDirectories(dir_2);\n\n    Directory luceneDir_1 = newFSDirectory(dir_1);\n    Directory luceneDir_2 = newFSDirectory(dir_2);\n    try(IndexOutput output = luceneDir_1.createOutput(\"foo.bar\", IOContext.DEFAULT)) {\n      CodecUtil.writeHeader(output, \"foo\", 0);\n      output.writeString(\"hey man, nice shot!\");\n      CodecUtil.writeFooter(output);\n    }\n    try {\n      Files.createLink(tempDir.resolve(\"test\"), dir_1.resolve(\"foo.bar\"));\n      BasicFileAttributes destAttr = Files.readAttributes(tempDir.resolve(\"test\"), BasicFileAttributes.class);\n      BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n      assumeTrue(\"hardlinks are not supported\", destAttr.fileKey() != null\n          && destAttr.fileKey().equals(sourceAttr.fileKey()));\n    } catch (UnsupportedOperationException ex) {\n      assumeFalse(\"hardlinks are not supported\", false);\n    }\n\n    HardlinkCopyDirectoryWrapper wrapper = new HardlinkCopyDirectoryWrapper(luceneDir_2);\n    wrapper.copyFrom(luceneDir_1, \"foo.bar\", \"bar.foo\", IOContext.DEFAULT);\n    assertTrue(Files.exists(dir_2.resolve(\"bar.foo\")));\n    BasicFileAttributes destAttr = Files.readAttributes(dir_2.resolve(\"bar.foo\"), BasicFileAttributes.class);\n    BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n    assertEquals(destAttr.fileKey(), sourceAttr.fileKey());\n    try(ChecksumIndexInput indexInput = wrapper.openChecksumInput(\"bar.foo\", IOContext.DEFAULT)) {\n      CodecUtil.checkHeader(indexInput, \"foo\", 0, 0);\n      assertEquals(\"hey man, nice shot!\", indexInput.readString());\n      CodecUtil.checkFooter(indexInput);\n    }\n    IOUtils.close(luceneDir_1, luceneDir_2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f67776cd6679ba08f8672f626db4bd30ba27cc3","date":1464258063,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testCopyHardLinks().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testCopyHardLinks().mjava","sourceNew":"  /**\n   * Tests that we use hardlinks if possible on Directory#copyFrom\n   */\n  public void testCopyHardLinks() throws IOException {\n    Path tempDir = createTempDir();\n    Path dir_1 = tempDir.resolve(\"dir_1\");\n    Path dir_2 = tempDir.resolve(\"dir_2\");\n    Files.createDirectories(dir_1);\n    Files.createDirectories(dir_2);\n\n    Directory luceneDir_1 = newFSDirectory(dir_1);\n    Directory luceneDir_2 = newFSDirectory(dir_2);\n    try {\n      try (IndexOutput output = luceneDir_1.createOutput(\"foo.bar\", IOContext.DEFAULT)) {\n        CodecUtil.writeHeader(output, \"foo\", 0);\n        output.writeString(\"hey man, nice shot!\");\n        CodecUtil.writeFooter(output);\n      }\n      try {\n        Files.createLink(tempDir.resolve(\"test\"), dir_1.resolve(\"foo.bar\"));\n        BasicFileAttributes destAttr = Files.readAttributes(tempDir.resolve(\"test\"), BasicFileAttributes.class);\n        BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n        assumeTrue(\"hardlinks are not supported\", destAttr.fileKey() != null\n            && destAttr.fileKey().equals(sourceAttr.fileKey()));\n      } catch (UnsupportedOperationException ex) {\n        assumeFalse(\"hardlinks are not supported\", true);\n      }\n\n      HardlinkCopyDirectoryWrapper wrapper = new HardlinkCopyDirectoryWrapper(luceneDir_2);\n      wrapper.copyFrom(luceneDir_1, \"foo.bar\", \"bar.foo\", IOContext.DEFAULT);\n      assertTrue(Files.exists(dir_2.resolve(\"bar.foo\")));\n      BasicFileAttributes destAttr = Files.readAttributes(dir_2.resolve(\"bar.foo\"), BasicFileAttributes.class);\n      BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n      assertEquals(destAttr.fileKey(), sourceAttr.fileKey());\n      try (ChecksumIndexInput indexInput = wrapper.openChecksumInput(\"bar.foo\", IOContext.DEFAULT)) {\n        CodecUtil.checkHeader(indexInput, \"foo\", 0, 0);\n        assertEquals(\"hey man, nice shot!\", indexInput.readString());\n        CodecUtil.checkFooter(indexInput);\n      }\n    } finally {\n      // close them in a finally block we might run into an assume here\n      IOUtils.close(luceneDir_1, luceneDir_2);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tests that we use hardlinks if possible on Directory#copyFrom\n   */\n  public void testCopyHardLinks() throws IOException {\n    Path tempDir = createTempDir();\n    Path dir_1 = tempDir.resolve(\"dir_1\");\n    Path dir_2 = tempDir.resolve(\"dir_2\");\n    Files.createDirectories(dir_1);\n    Files.createDirectories(dir_2);\n\n    Directory luceneDir_1 = newFSDirectory(dir_1);\n    Directory luceneDir_2 = newFSDirectory(dir_2);\n    try(IndexOutput output = luceneDir_1.createOutput(\"foo.bar\", IOContext.DEFAULT)) {\n      CodecUtil.writeHeader(output, \"foo\", 0);\n      output.writeString(\"hey man, nice shot!\");\n      CodecUtil.writeFooter(output);\n    }\n    try {\n      Files.createLink(tempDir.resolve(\"test\"), dir_1.resolve(\"foo.bar\"));\n      BasicFileAttributes destAttr = Files.readAttributes(tempDir.resolve(\"test\"), BasicFileAttributes.class);\n      BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n      assumeTrue(\"hardlinks are not supported\", destAttr.fileKey() != null\n          && destAttr.fileKey().equals(sourceAttr.fileKey()));\n    } catch (UnsupportedOperationException ex) {\n      assumeFalse(\"hardlinks are not supported\", false);\n    }\n\n    HardlinkCopyDirectoryWrapper wrapper = new HardlinkCopyDirectoryWrapper(luceneDir_2);\n    wrapper.copyFrom(luceneDir_1, \"foo.bar\", \"bar.foo\", IOContext.DEFAULT);\n    assertTrue(Files.exists(dir_2.resolve(\"bar.foo\")));\n    BasicFileAttributes destAttr = Files.readAttributes(dir_2.resolve(\"bar.foo\"), BasicFileAttributes.class);\n    BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n    assertEquals(destAttr.fileKey(), sourceAttr.fileKey());\n    try(ChecksumIndexInput indexInput = wrapper.openChecksumInput(\"bar.foo\", IOContext.DEFAULT)) {\n      CodecUtil.checkHeader(indexInput, \"foo\", 0, 0);\n      assertEquals(\"hey man, nice shot!\", indexInput.readString());\n      CodecUtil.checkFooter(indexInput);\n    }\n    IOUtils.close(luceneDir_1, luceneDir_2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testCopyHardLinks().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests that we use hardlinks if possible on Directory#copyFrom\n   */\n  public void testCopyHardLinks() throws IOException {\n    Path tempDir = createTempDir();\n    Path dir_1 = tempDir.resolve(\"dir_1\");\n    Path dir_2 = tempDir.resolve(\"dir_2\");\n    Files.createDirectories(dir_1);\n    Files.createDirectories(dir_2);\n\n    Directory luceneDir_1 = newFSDirectory(dir_1);\n    Directory luceneDir_2 = newFSDirectory(dir_2);\n    try {\n      try (IndexOutput output = luceneDir_1.createOutput(\"foo.bar\", IOContext.DEFAULT)) {\n        CodecUtil.writeHeader(output, \"foo\", 0);\n        output.writeString(\"hey man, nice shot!\");\n        CodecUtil.writeFooter(output);\n      }\n      try {\n        Files.createLink(tempDir.resolve(\"test\"), dir_1.resolve(\"foo.bar\"));\n        BasicFileAttributes destAttr = Files.readAttributes(tempDir.resolve(\"test\"), BasicFileAttributes.class);\n        BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n        assumeTrue(\"hardlinks are not supported\", destAttr.fileKey() != null\n            && destAttr.fileKey().equals(sourceAttr.fileKey()));\n      } catch (UnsupportedOperationException ex) {\n        assumeFalse(\"hardlinks are not supported\", true);\n      }\n\n      HardlinkCopyDirectoryWrapper wrapper = new HardlinkCopyDirectoryWrapper(luceneDir_2);\n      wrapper.copyFrom(luceneDir_1, \"foo.bar\", \"bar.foo\", IOContext.DEFAULT);\n      assertTrue(Files.exists(dir_2.resolve(\"bar.foo\")));\n      BasicFileAttributes destAttr = Files.readAttributes(dir_2.resolve(\"bar.foo\"), BasicFileAttributes.class);\n      BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n      assertEquals(destAttr.fileKey(), sourceAttr.fileKey());\n      try (ChecksumIndexInput indexInput = wrapper.openChecksumInput(\"bar.foo\", IOContext.DEFAULT)) {\n        CodecUtil.checkHeader(indexInput, \"foo\", 0, 0);\n        assertEquals(\"hey man, nice shot!\", indexInput.readString());\n        CodecUtil.checkFooter(indexInput);\n      }\n    } finally {\n      // close them in a finally block we might run into an assume here\n      IOUtils.close(luceneDir_1, luceneDir_2);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09747ef413c6f8904556697d3171737eaa527334","date":1464604669,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testCopyHardLinks().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testCopyHardLinks().mjava","sourceNew":"  /**\n   * Tests that we use hardlinks if possible on Directory#copyFrom\n   */\n  public void testCopyHardLinks() throws IOException {\n    Path tempDir = createTempDir();\n    Path dir_1 = tempDir.resolve(\"dir_1\");\n    Path dir_2 = tempDir.resolve(\"dir_2\");\n    Files.createDirectories(dir_1);\n    Files.createDirectories(dir_2);\n\n    Directory luceneDir_1 = newFSDirectory(dir_1);\n    Directory luceneDir_2 = newFSDirectory(dir_2);\n    try {\n      try (IndexOutput output = luceneDir_1.createOutput(\"foo.bar\", IOContext.DEFAULT)) {\n        CodecUtil.writeHeader(output, \"foo\", 0);\n        output.writeString(\"hey man, nice shot!\");\n        CodecUtil.writeFooter(output);\n      }\n      // In case luceneDir_1 has an NRTCachingDirectory\n      luceneDir_1.sync(Collections.singleton(\"foo.bar\"));\n      try {\n        Files.createLink(tempDir.resolve(\"test\"), dir_1.resolve(\"foo.bar\"));\n        BasicFileAttributes destAttr = Files.readAttributes(tempDir.resolve(\"test\"), BasicFileAttributes.class);\n        BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n        assumeTrue(\"hardlinks are not supported\", destAttr.fileKey() != null\n            && destAttr.fileKey().equals(sourceAttr.fileKey()));\n      } catch (UnsupportedOperationException ex) {\n        assumeFalse(\"hardlinks are not supported\", true);\n      }\n\n      HardlinkCopyDirectoryWrapper wrapper = new HardlinkCopyDirectoryWrapper(luceneDir_2);\n      wrapper.copyFrom(luceneDir_1, \"foo.bar\", \"bar.foo\", IOContext.DEFAULT);\n      assertTrue(Files.exists(dir_2.resolve(\"bar.foo\")));\n      BasicFileAttributes destAttr = Files.readAttributes(dir_2.resolve(\"bar.foo\"), BasicFileAttributes.class);\n      BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n      assertEquals(destAttr.fileKey(), sourceAttr.fileKey());\n      try (ChecksumIndexInput indexInput = wrapper.openChecksumInput(\"bar.foo\", IOContext.DEFAULT)) {\n        CodecUtil.checkHeader(indexInput, \"foo\", 0, 0);\n        assertEquals(\"hey man, nice shot!\", indexInput.readString());\n        CodecUtil.checkFooter(indexInput);\n      }\n    } finally {\n      // close them in a finally block we might run into an assume here\n      IOUtils.close(luceneDir_1, luceneDir_2);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tests that we use hardlinks if possible on Directory#copyFrom\n   */\n  public void testCopyHardLinks() throws IOException {\n    Path tempDir = createTempDir();\n    Path dir_1 = tempDir.resolve(\"dir_1\");\n    Path dir_2 = tempDir.resolve(\"dir_2\");\n    Files.createDirectories(dir_1);\n    Files.createDirectories(dir_2);\n\n    Directory luceneDir_1 = newFSDirectory(dir_1);\n    Directory luceneDir_2 = newFSDirectory(dir_2);\n    try {\n      try (IndexOutput output = luceneDir_1.createOutput(\"foo.bar\", IOContext.DEFAULT)) {\n        CodecUtil.writeHeader(output, \"foo\", 0);\n        output.writeString(\"hey man, nice shot!\");\n        CodecUtil.writeFooter(output);\n      }\n      try {\n        Files.createLink(tempDir.resolve(\"test\"), dir_1.resolve(\"foo.bar\"));\n        BasicFileAttributes destAttr = Files.readAttributes(tempDir.resolve(\"test\"), BasicFileAttributes.class);\n        BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n        assumeTrue(\"hardlinks are not supported\", destAttr.fileKey() != null\n            && destAttr.fileKey().equals(sourceAttr.fileKey()));\n      } catch (UnsupportedOperationException ex) {\n        assumeFalse(\"hardlinks are not supported\", true);\n      }\n\n      HardlinkCopyDirectoryWrapper wrapper = new HardlinkCopyDirectoryWrapper(luceneDir_2);\n      wrapper.copyFrom(luceneDir_1, \"foo.bar\", \"bar.foo\", IOContext.DEFAULT);\n      assertTrue(Files.exists(dir_2.resolve(\"bar.foo\")));\n      BasicFileAttributes destAttr = Files.readAttributes(dir_2.resolve(\"bar.foo\"), BasicFileAttributes.class);\n      BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n      assertEquals(destAttr.fileKey(), sourceAttr.fileKey());\n      try (ChecksumIndexInput indexInput = wrapper.openChecksumInput(\"bar.foo\", IOContext.DEFAULT)) {\n        CodecUtil.checkHeader(indexInput, \"foo\", 0, 0);\n        assertEquals(\"hey man, nice shot!\", indexInput.readString());\n        CodecUtil.checkFooter(indexInput);\n      }\n    } finally {\n      // close them in a finally block we might run into an assume here\n      IOUtils.close(luceneDir_1, luceneDir_2);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testCopyHardLinks().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testCopyHardLinks().mjava","sourceNew":"  /**\n   * Tests that we use hardlinks if possible on Directory#copyFrom\n   */\n  public void testCopyHardLinks() throws IOException {\n    Path tempDir = createTempDir();\n    Path dir_1 = tempDir.resolve(\"dir_1\");\n    Path dir_2 = tempDir.resolve(\"dir_2\");\n    Files.createDirectories(dir_1);\n    Files.createDirectories(dir_2);\n\n    Directory luceneDir_1 = newFSDirectory(dir_1);\n    Directory luceneDir_2 = newFSDirectory(dir_2);\n    try {\n      try (IndexOutput output = luceneDir_1.createOutput(\"foo.bar\", IOContext.DEFAULT)) {\n        CodecUtil.writeHeader(output, \"foo\", 0);\n        output.writeString(\"hey man, nice shot!\");\n        CodecUtil.writeFooter(output);\n      }\n      // In case luceneDir_1 has an NRTCachingDirectory\n      luceneDir_1.sync(Collections.singleton(\"foo.bar\"));\n      try {\n        Files.createLink(tempDir.resolve(\"test\"), dir_1.resolve(\"foo.bar\"));\n        BasicFileAttributes destAttr = Files.readAttributes(tempDir.resolve(\"test\"), BasicFileAttributes.class);\n        BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n        assumeTrue(\"hardlinks are not supported\", destAttr.fileKey() != null\n            && destAttr.fileKey().equals(sourceAttr.fileKey()));\n      } catch (UnsupportedOperationException ex) {\n        assumeFalse(\"hardlinks are not supported\", true);\n      }\n\n      HardlinkCopyDirectoryWrapper wrapper = new HardlinkCopyDirectoryWrapper(luceneDir_2);\n      wrapper.copyFrom(luceneDir_1, \"foo.bar\", \"bar.foo\", IOContext.DEFAULT);\n      assertTrue(Files.exists(dir_2.resolve(\"bar.foo\")));\n      BasicFileAttributes destAttr = Files.readAttributes(dir_2.resolve(\"bar.foo\"), BasicFileAttributes.class);\n      BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n      assertEquals(destAttr.fileKey(), sourceAttr.fileKey());\n      try (ChecksumIndexInput indexInput = wrapper.openChecksumInput(\"bar.foo\", IOContext.DEFAULT)) {\n        CodecUtil.checkHeader(indexInput, \"foo\", 0, 0);\n        assertEquals(\"hey man, nice shot!\", indexInput.readString());\n        CodecUtil.checkFooter(indexInput);\n      }\n    } finally {\n      // close them in a finally block we might run into an assume here\n      IOUtils.close(luceneDir_1, luceneDir_2);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tests that we use hardlinks if possible on Directory#copyFrom\n   */\n  public void testCopyHardLinks() throws IOException {\n    Path tempDir = createTempDir();\n    Path dir_1 = tempDir.resolve(\"dir_1\");\n    Path dir_2 = tempDir.resolve(\"dir_2\");\n    Files.createDirectories(dir_1);\n    Files.createDirectories(dir_2);\n\n    Directory luceneDir_1 = newFSDirectory(dir_1);\n    Directory luceneDir_2 = newFSDirectory(dir_2);\n    try {\n      try (IndexOutput output = luceneDir_1.createOutput(\"foo.bar\", IOContext.DEFAULT)) {\n        CodecUtil.writeHeader(output, \"foo\", 0);\n        output.writeString(\"hey man, nice shot!\");\n        CodecUtil.writeFooter(output);\n      }\n      try {\n        Files.createLink(tempDir.resolve(\"test\"), dir_1.resolve(\"foo.bar\"));\n        BasicFileAttributes destAttr = Files.readAttributes(tempDir.resolve(\"test\"), BasicFileAttributes.class);\n        BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n        assumeTrue(\"hardlinks are not supported\", destAttr.fileKey() != null\n            && destAttr.fileKey().equals(sourceAttr.fileKey()));\n      } catch (UnsupportedOperationException ex) {\n        assumeFalse(\"hardlinks are not supported\", true);\n      }\n\n      HardlinkCopyDirectoryWrapper wrapper = new HardlinkCopyDirectoryWrapper(luceneDir_2);\n      wrapper.copyFrom(luceneDir_1, \"foo.bar\", \"bar.foo\", IOContext.DEFAULT);\n      assertTrue(Files.exists(dir_2.resolve(\"bar.foo\")));\n      BasicFileAttributes destAttr = Files.readAttributes(dir_2.resolve(\"bar.foo\"), BasicFileAttributes.class);\n      BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n      assertEquals(destAttr.fileKey(), sourceAttr.fileKey());\n      try (ChecksumIndexInput indexInput = wrapper.openChecksumInput(\"bar.foo\", IOContext.DEFAULT)) {\n        CodecUtil.checkHeader(indexInput, \"foo\", 0, 0);\n        assertEquals(\"hey man, nice shot!\", indexInput.readString());\n        CodecUtil.checkFooter(indexInput);\n      }\n    } finally {\n      // close them in a finally block we might run into an assume here\n      IOUtils.close(luceneDir_1, luceneDir_2);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testCopyHardLinks().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testCopyHardLinks().mjava","sourceNew":"  /**\n   * Tests that we use hardlinks if possible on Directory#copyFrom\n   */\n  public void testCopyHardLinks() throws IOException {\n    Path tempDir = createTempDir();\n    Path dir_1 = tempDir.resolve(\"dir_1\");\n    Path dir_2 = tempDir.resolve(\"dir_2\");\n    Files.createDirectories(dir_1);\n    Files.createDirectories(dir_2);\n\n    Directory luceneDir_1 = newFSDirectory(dir_1);\n    Directory luceneDir_2 = newFSDirectory(dir_2);\n    try {\n      try (IndexOutput output = luceneDir_1.createOutput(\"foo.bar\", IOContext.DEFAULT)) {\n        CodecUtil.writeHeader(output, \"foo\", 0);\n        output.writeString(\"hey man, nice shot!\");\n        CodecUtil.writeFooter(output);\n      }\n      // In case luceneDir_1 has an NRTCachingDirectory\n      luceneDir_1.sync(Collections.singleton(\"foo.bar\"));\n      try {\n        Files.createLink(tempDir.resolve(\"test\"), dir_1.resolve(\"foo.bar\"));\n        BasicFileAttributes destAttr = Files.readAttributes(tempDir.resolve(\"test\"), BasicFileAttributes.class);\n        BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n        assumeTrue(\"hardlinks are not supported\", destAttr.fileKey() != null\n            && destAttr.fileKey().equals(sourceAttr.fileKey()));\n      } catch (UnsupportedOperationException ex) {\n        assumeFalse(\"hardlinks are not supported\", true);\n      }\n\n      HardlinkCopyDirectoryWrapper wrapper = new HardlinkCopyDirectoryWrapper(luceneDir_2);\n      wrapper.copyFrom(luceneDir_1, \"foo.bar\", \"bar.foo\", IOContext.DEFAULT);\n      assertTrue(Files.exists(dir_2.resolve(\"bar.foo\")));\n      BasicFileAttributes destAttr = Files.readAttributes(dir_2.resolve(\"bar.foo\"), BasicFileAttributes.class);\n      BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n      assertEquals(destAttr.fileKey(), sourceAttr.fileKey());\n      try (ChecksumIndexInput indexInput = wrapper.openChecksumInput(\"bar.foo\", IOContext.DEFAULT)) {\n        CodecUtil.checkHeader(indexInput, \"foo\", 0, 0);\n        assertEquals(\"hey man, nice shot!\", indexInput.readString());\n        CodecUtil.checkFooter(indexInput);\n      }\n    } finally {\n      // close them in a finally block we might run into an assume here\n      IOUtils.close(luceneDir_1, luceneDir_2);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tests that we use hardlinks if possible on Directory#copyFrom\n   */\n  public void testCopyHardLinks() throws IOException {\n    Path tempDir = createTempDir();\n    Path dir_1 = tempDir.resolve(\"dir_1\");\n    Path dir_2 = tempDir.resolve(\"dir_2\");\n    Files.createDirectories(dir_1);\n    Files.createDirectories(dir_2);\n\n    Directory luceneDir_1 = newFSDirectory(dir_1);\n    Directory luceneDir_2 = newFSDirectory(dir_2);\n    try {\n      try (IndexOutput output = luceneDir_1.createOutput(\"foo.bar\", IOContext.DEFAULT)) {\n        CodecUtil.writeHeader(output, \"foo\", 0);\n        output.writeString(\"hey man, nice shot!\");\n        CodecUtil.writeFooter(output);\n      }\n      try {\n        Files.createLink(tempDir.resolve(\"test\"), dir_1.resolve(\"foo.bar\"));\n        BasicFileAttributes destAttr = Files.readAttributes(tempDir.resolve(\"test\"), BasicFileAttributes.class);\n        BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n        assumeTrue(\"hardlinks are not supported\", destAttr.fileKey() != null\n            && destAttr.fileKey().equals(sourceAttr.fileKey()));\n      } catch (UnsupportedOperationException ex) {\n        assumeFalse(\"hardlinks are not supported\", true);\n      }\n\n      HardlinkCopyDirectoryWrapper wrapper = new HardlinkCopyDirectoryWrapper(luceneDir_2);\n      wrapper.copyFrom(luceneDir_1, \"foo.bar\", \"bar.foo\", IOContext.DEFAULT);\n      assertTrue(Files.exists(dir_2.resolve(\"bar.foo\")));\n      BasicFileAttributes destAttr = Files.readAttributes(dir_2.resolve(\"bar.foo\"), BasicFileAttributes.class);\n      BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n      assertEquals(destAttr.fileKey(), sourceAttr.fileKey());\n      try (ChecksumIndexInput indexInput = wrapper.openChecksumInput(\"bar.foo\", IOContext.DEFAULT)) {\n        CodecUtil.checkHeader(indexInput, \"foo\", 0, 0);\n        assertEquals(\"hey man, nice shot!\", indexInput.readString());\n        CodecUtil.checkFooter(indexInput);\n      }\n    } finally {\n      // close them in a finally block we might run into an assume here\n      IOUtils.close(luceneDir_1, luceneDir_2);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/store/TestHardLinkCopyDirectoryWrapper#testCopyHardLinks().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests that we use hardlinks if possible on Directory#copyFrom\n   */\n  public void testCopyHardLinks() throws IOException {\n    Path tempDir = createTempDir();\n    Path dir_1 = tempDir.resolve(\"dir_1\");\n    Path dir_2 = tempDir.resolve(\"dir_2\");\n    Files.createDirectories(dir_1);\n    Files.createDirectories(dir_2);\n\n    Directory luceneDir_1 = newFSDirectory(dir_1);\n    Directory luceneDir_2 = newFSDirectory(dir_2);\n    try {\n      try (IndexOutput output = luceneDir_1.createOutput(\"foo.bar\", IOContext.DEFAULT)) {\n        CodecUtil.writeHeader(output, \"foo\", 0);\n        output.writeString(\"hey man, nice shot!\");\n        CodecUtil.writeFooter(output);\n      }\n      // In case luceneDir_1 has an NRTCachingDirectory\n      luceneDir_1.sync(Collections.singleton(\"foo.bar\"));\n      try {\n        Files.createLink(tempDir.resolve(\"test\"), dir_1.resolve(\"foo.bar\"));\n        BasicFileAttributes destAttr = Files.readAttributes(tempDir.resolve(\"test\"), BasicFileAttributes.class);\n        BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n        assumeTrue(\"hardlinks are not supported\", destAttr.fileKey() != null\n            && destAttr.fileKey().equals(sourceAttr.fileKey()));\n      } catch (UnsupportedOperationException ex) {\n        assumeFalse(\"hardlinks are not supported\", true);\n      }\n\n      HardlinkCopyDirectoryWrapper wrapper = new HardlinkCopyDirectoryWrapper(luceneDir_2);\n      wrapper.copyFrom(luceneDir_1, \"foo.bar\", \"bar.foo\", IOContext.DEFAULT);\n      assertTrue(Files.exists(dir_2.resolve(\"bar.foo\")));\n      BasicFileAttributes destAttr = Files.readAttributes(dir_2.resolve(\"bar.foo\"), BasicFileAttributes.class);\n      BasicFileAttributes sourceAttr = Files.readAttributes(dir_1.resolve(\"foo.bar\"), BasicFileAttributes.class);\n      assertEquals(destAttr.fileKey(), sourceAttr.fileKey());\n      try (ChecksumIndexInput indexInput = wrapper.openChecksumInput(\"bar.foo\", IOContext.DEFAULT)) {\n        CodecUtil.checkHeader(indexInput, \"foo\", 0, 0);\n        assertEquals(\"hey man, nice shot!\", indexInput.readString());\n        CodecUtil.checkFooter(indexInput);\n      }\n    } finally {\n      // close them in a finally block we might run into an assume here\n      IOUtils.close(luceneDir_1, luceneDir_2);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d7fdc63b467a1f8d68d35c0f1b4bb61d1fc64ef5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f67776cd6679ba08f8672f626db4bd30ba27cc3":["d7fdc63b467a1f8d68d35c0f1b4bb61d1fc64ef5"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8f67776cd6679ba08f8672f626db4bd30ba27cc3"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["83870855d82aba6819217abeff5a40779dbb28b4","09747ef413c6f8904556697d3171737eaa527334"],"09747ef413c6f8904556697d3171737eaa527334":["8f67776cd6679ba08f8672f626db4bd30ba27cc3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","09747ef413c6f8904556697d3171737eaa527334"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["83870855d82aba6819217abeff5a40779dbb28b4","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09747ef413c6f8904556697d3171737eaa527334"]},"commit2Childs":{"d7fdc63b467a1f8d68d35c0f1b4bb61d1fc64ef5":["8f67776cd6679ba08f8672f626db4bd30ba27cc3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7fdc63b467a1f8d68d35c0f1b4bb61d1fc64ef5","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"8f67776cd6679ba08f8672f626db4bd30ba27cc3":["83870855d82aba6819217abeff5a40779dbb28b4","09747ef413c6f8904556697d3171737eaa527334"],"83870855d82aba6819217abeff5a40779dbb28b4":["5b8ee93140fd0efef7e101786e3ed5160a700b5f","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"09747ef413c6f8904556697d3171737eaa527334":["5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}