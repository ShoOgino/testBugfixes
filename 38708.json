{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#getMemoryUsage().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#getMemoryUsage().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an estimate of the amount of memory used by this table. Called only in\n   * this package. Memory is consumed mainly by three structures: the hash arrays,\n   * label repository and collision map.\n   */\n  int getMemoryUsage() {\n    int memoryUsage = 0;\n    if (this.hashArrays != null) {\n      // HashArray capacity is instance-specific.\n      for (HashArray ha : this.hashArrays) {\n        // Each has 2 capacity-length arrays of ints.\n        memoryUsage += ( ha.capacity * 2 * 4 ) + 4;\n      }\n    }\n    if (this.labelRepository != null) {\n      // All blocks are the same size.\n      int blockSize = this.labelRepository.blockSize;\n      // Each block has room for blockSize UTF-16 chars.\n      int actualBlockSize = ( blockSize * 2 ) + 4;\n      memoryUsage += this.labelRepository.blocks.size() * actualBlockSize; \n      memoryUsage += 8;   // Two int values for array as a whole.\n    }\n    if (this.collisionMap != null) {\n      memoryUsage += this.collisionMap.getMemoryUsage();\n    }\n    return memoryUsage;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#getMemoryUsage().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an estimate of the amount of memory used by this table. Called only in\n   * this package. Memory is consumed mainly by three structures: the hash arrays,\n   * label repository and collision map.\n   */\n  int getMemoryUsage() {\n    int memoryUsage = 0;\n    if (this.hashArrays != null) {\n      // HashArray capacity is instance-specific.\n      for (HashArray ha : this.hashArrays) {\n        // Each has 2 capacity-length arrays of ints.\n        memoryUsage += ( ha.capacity * 2 * 4 ) + 4;\n      }\n    }\n    if (this.labelRepository != null) {\n      // All blocks are the same size.\n      int blockSize = this.labelRepository.blockSize;\n      // Each block has room for blockSize UTF-16 chars.\n      int actualBlockSize = ( blockSize * 2 ) + 4;\n      memoryUsage += this.labelRepository.blocks.size() * actualBlockSize; \n      memoryUsage += 8;   // Two int values for array as a whole.\n    }\n    if (this.collisionMap != null) {\n      memoryUsage += this.collisionMap.getMemoryUsage();\n    }\n    return memoryUsage;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#getMemoryUsage().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an estimate of the amount of memory used by this table. Called only in\n   * this package. Memory is consumed mainly by three structures: the hash arrays,\n   * label repository and collision map.\n   */\n  int getMemoryUsage() {\n    int memoryUsage = 0;\n    if (this.hashArrays != null) {\n      // HashArray capacity is instance-specific.\n      for (HashArray ha : this.hashArrays) {\n        // Each has 2 capacity-length arrays of ints.\n        memoryUsage += ( ha.capacity * 2 * 4 ) + 4;\n      }\n    }\n    if (this.labelRepository != null) {\n      // All blocks are the same size.\n      int blockSize = this.labelRepository.blockSize;\n      // Each block has room for blockSize UTF-16 chars.\n      int actualBlockSize = ( blockSize * 2 ) + 4;\n      memoryUsage += this.labelRepository.blocks.size() * actualBlockSize; \n      memoryUsage += 8;   // Two int values for array as a whole.\n    }\n    if (this.collisionMap != null) {\n      memoryUsage += this.collisionMap.getMemoryUsage();\n    }\n    return memoryUsage;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#getMemoryUsage().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#getMemoryUsage().mjava","sourceNew":"  /**\n   * Returns an estimate of the amount of memory used by this table. Called only in\n   * this package. Memory is consumed mainly by three structures: the hash arrays,\n   * label repository and collision map.\n   */\n  int getMemoryUsage() {\n    int memoryUsage = 0;\n    if (this.hashArrays != null) {\n      // HashArray capacity is instance-specific.\n      for (HashArray ha : this.hashArrays) {\n        // Each has 2 capacity-length arrays of ints.\n        memoryUsage += ( ha.capacity * 2 * 4 ) + 4;\n      }\n    }\n    if (this.labelRepository != null) {\n      // All blocks are the same size.\n      int blockSize = this.labelRepository.blockSize;\n      // Each block has room for blockSize UTF-16 chars.\n      int actualBlockSize = ( blockSize * 2 ) + 4;\n      memoryUsage += this.labelRepository.blocks.size() * actualBlockSize; \n      memoryUsage += 8;   // Two int values for array as a whole.\n    }\n    if (this.collisionMap != null) {\n      memoryUsage += this.collisionMap.getMemoryUsage();\n    }\n    return memoryUsage;\n  }\n\n","sourceOld":"  /**\n   * Returns an estimate of the amount of memory used by this table. Called only in\n   * this package. Memory is consumed mainly by three structures: the hash arrays,\n   * label repository and collision map.\n   */\n  int getMemoryUsage() {\n    int memoryUsage = 0;\n    if (this.hashArrays != null) {\n      // HashArray capacity is instance-specific.\n      for (HashArray ha : this.hashArrays) {\n        // Each has 2 capacity-length arrays of ints.\n        memoryUsage += ( ha.capacity * 2 * 4 ) + 4;\n      }\n    }\n    if (this.labelRepository != null) {\n      // All blocks are the same size.\n      int blockSize = this.labelRepository.blockSize;\n      // Each block has room for blockSize UTF-16 chars.\n      int actualBlockSize = ( blockSize * 2 ) + 4;\n      memoryUsage += this.labelRepository.blocks.size() * actualBlockSize; \n      memoryUsage += 8;   // Two int values for array as a whole.\n    }\n    if (this.collisionMap != null) {\n      memoryUsage += this.collisionMap.getMemoryUsage();\n    }\n    return memoryUsage;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}