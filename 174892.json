{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitToSeeReplicasInState(String,Collection[String]).mjava","commits":[{"id":"eb4db141b31e99d2285436da1428411ed5501f56","date":1394114795,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#lookupReplicas(String,Collection[String]).mjava","sourceNew":"  private Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<String, Replica>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(\n          collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (System.nanoTime() > endTime) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  private Map<String, Replica> lookupReplicas(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<String, Replica>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n    for(;;) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String  coreName : coreNames) {\n        if(result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if(coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName,replica);\n              break;\n            }\n          }\n        }\n      }\n\n      if(result.size() == coreNames.size()) {\n        return result;\n      }\n      if( System.nanoTime() > endTime) {\n        //time up . throw exception and go out\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create replica entries in ZK\");\n      }\n\n      Thread.sleep(100);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b51e891605604cf911ab579fb28c49b26749f93","date":1394126258,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#lookupReplicas(String,Collection[String]).mjava","sourceNew":"  private Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<String, Replica>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(\n          collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (System.nanoTime() > endTime) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  private Map<String, Replica> lookupReplicas(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<String, Replica>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n    for(;;) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String  coreName : coreNames) {\n        if(result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if(coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName,replica);\n              break;\n            }\n          }\n        }\n      }\n\n      if(result.size() == coreNames.size()) {\n        return result;\n      }\n      if( System.nanoTime() > endTime) {\n        //time up . throw exception and go out\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create replica entries in ZK\");\n      }\n\n      Thread.sleep(100);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#lookupReplicas(String,Collection[String]).mjava","sourceNew":"  private Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<String, Replica>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(\n          collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (System.nanoTime() > endTime) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  private Map<String, Replica> lookupReplicas(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<String, Replica>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n    for(;;) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String  coreName : coreNames) {\n        if(result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if(coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName,replica);\n              break;\n            }\n          }\n        }\n      }\n\n      if(result.size() == coreNames.size()) {\n        return result;\n      }\n      if( System.nanoTime() > endTime) {\n        //time up . throw exception and go out\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create replica entries in ZK\");\n      }\n\n      Thread.sleep(100);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitToSeeReplicasInState(String,Collection[String]).mjava","sourceNew":"  private Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(\n          collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (System.nanoTime() > endTime) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  private Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<String, Replica>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(\n          collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (System.nanoTime() > endTime) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b81868c96ab084d96d4589dd330753c529bc450","date":1435652870,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitToSeeReplicasInState(String,Collection[String]).mjava","sourceNew":"  private Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (System.nanoTime() > endTime) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  private Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(\n          collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (System.nanoTime() > endTime) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":["eb4db141b31e99d2285436da1428411ed5501f56"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitToSeeReplicasInState(String,Collection[String]).mjava","sourceNew":"  private Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (System.nanoTime() > endTime) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  private Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (System.nanoTime() > endTime) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["8b81868c96ab084d96d4589dd330753c529bc450"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["eb4db141b31e99d2285436da1428411ed5501f56"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb4db141b31e99d2285436da1428411ed5501f56"],"6b51e891605604cf911ab579fb28c49b26749f93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb4db141b31e99d2285436da1428411ed5501f56"],"8b81868c96ab084d96d4589dd330753c529bc450":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"eb4db141b31e99d2285436da1428411ed5501f56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8b81868c96ab084d96d4589dd330753c529bc450"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"6b51e891605604cf911ab579fb28c49b26749f93":[],"8b81868c96ab084d96d4589dd330753c529bc450":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"eb4db141b31e99d2285436da1428411ed5501f56":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","96ea64d994d340044e0d57aeb6a5871539d10ca5","6b51e891605604cf911ab579fb28c49b26749f93"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96ea64d994d340044e0d57aeb6a5871539d10ca5","6b51e891605604cf911ab579fb28c49b26749f93","eb4db141b31e99d2285436da1428411ed5501f56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","6b51e891605604cf911ab579fb28c49b26749f93","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}