{"path":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#createCore(SolrCore,int,HashPartitioner.Range).mjava","commits":[{"id":"c2d1ec821a2d311389d0085f20e2b2698e4b3442","date":1346690180,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#createCore(SolrCore,int,HashPartitioner.Range).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a new core and registers it. The returned core will have it's reference count incremented an extra time and close() should be called when finished. */\n  private SolrCore createCore(SolrCore current, int ord, HashPartitioner.Range newRange) throws IOException, SAXException, ParserConfigurationException {\n    CoreDescriptor currCoreD = current.getCoreDescriptor();\n    CloudDescriptor currCloudD = currCoreD.getCloudDescriptor();\n\n    String currName = currCoreD.getName();\n\n    // TODO: nicer way to come up with core names?\n    String name = currName + \"_\" + ord;\n\n    String instanceDir = name;\n\n\n    // TODO: do this via a clone / constructor?\n    CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n    dcore.setConfigName( currCoreD.getConfigName() );\n    dcore.setSchemaName(currCoreD.getSchemaName());\n    // default dcore.setDataDir()\n\n    // TODO: for this to work in non-cloud mode, we will either need to make a copy of the conf directory, or\n    // develop named configs like we have in cloud mode.\n\n\n    CloudDescriptor cd = null;\n    if (currCloudD != null) {\n      cd = new CloudDescriptor();\n\n      // TODO: should we copy these?  any params that are core specific?\n      cd.setParams( currCloudD.getParams() );\n      cd.setCollectionName( currCloudD.getCollectionName() );\n      cd.setRoles( currCloudD.getRoles() );\n\n      // TODO: we must be careful that an unrelated node starting up does not try\n      // to become the new shard leader!  How do we designate ourselves as the\n      // leader but prevent new shards from trying to replicate from us before we are ready (i.e. have the split index)?\n      String shardId = currCloudD.getShardId() + \"_\" + ord;\n      cd.setShardId( shardId );\n\n      dcore.setCloudDescriptor(cd);\n    }\n\n    SolrCore core = coreContainer.create(dcore);\n    core.open();  // inc ref count before registering to ensure no one can close the core before we are done with it\n    coreContainer.register(name, core, false);\n    return core;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#createCore(SolrCore,int,DocRouter.Range).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#createCore(SolrCore,int,HashPartitioner.Range).mjava","sourceNew":"  /** Creates a new core and registers it. The returned core will have it's reference count incremented an extra time and close() should be called when finished. */\n  private SolrCore createCore(SolrCore current, int ord, DocRouter.Range newRange) throws IOException, SAXException, ParserConfigurationException {\n    CoreDescriptor currCoreD = current.getCoreDescriptor();\n    CloudDescriptor currCloudD = currCoreD.getCloudDescriptor();\n\n    String currName = currCoreD.getName();\n\n    // TODO: nicer way to come up with core names?\n    String name = currName + \"_\" + ord;\n\n    String instanceDir = name;\n\n\n    // TODO: do this via a clone / constructor?\n    CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n    dcore.setConfigName( currCoreD.getConfigName() );\n    dcore.setSchemaName(currCoreD.getSchemaName());\n    // default dcore.setDataDir()\n\n    // TODO: for this to work in non-cloud mode, we will either need to make a copy of the conf directory, or\n    // develop named configs like we have in cloud mode.\n\n\n    CloudDescriptor cd = null;\n    if (currCloudD != null) {\n      cd = new CloudDescriptor();\n\n      // TODO: should we copy these?  any params that are core specific?\n      cd.setParams( currCloudD.getParams() );\n      cd.setCollectionName( currCloudD.getCollectionName() );\n      cd.setRoles( currCloudD.getRoles() );\n\n      // TODO: we must be careful that an unrelated node starting up does not try\n      // to become the new shard leader!  How do we designate ourselves as the\n      // leader but prevent new shards from trying to replicate from us before we are ready (i.e. have the split index)?\n      String shardId = currCloudD.getShardId() + \"_\" + ord;\n      cd.setShardId( shardId );\n\n      dcore.setCloudDescriptor(cd);\n    }\n\n    SolrCore core = coreContainer.create(dcore);\n    core.open();  // inc ref count before registering to ensure no one can close the core before we are done with it\n    coreContainer.register(name, core, false);\n    return core;\n  }\n\n","sourceOld":"  /** Creates a new core and registers it. The returned core will have it's reference count incremented an extra time and close() should be called when finished. */\n  private SolrCore createCore(SolrCore current, int ord, HashPartitioner.Range newRange) throws IOException, SAXException, ParserConfigurationException {\n    CoreDescriptor currCoreD = current.getCoreDescriptor();\n    CloudDescriptor currCloudD = currCoreD.getCloudDescriptor();\n\n    String currName = currCoreD.getName();\n\n    // TODO: nicer way to come up with core names?\n    String name = currName + \"_\" + ord;\n\n    String instanceDir = name;\n\n\n    // TODO: do this via a clone / constructor?\n    CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n    dcore.setConfigName( currCoreD.getConfigName() );\n    dcore.setSchemaName(currCoreD.getSchemaName());\n    // default dcore.setDataDir()\n\n    // TODO: for this to work in non-cloud mode, we will either need to make a copy of the conf directory, or\n    // develop named configs like we have in cloud mode.\n\n\n    CloudDescriptor cd = null;\n    if (currCloudD != null) {\n      cd = new CloudDescriptor();\n\n      // TODO: should we copy these?  any params that are core specific?\n      cd.setParams( currCloudD.getParams() );\n      cd.setCollectionName( currCloudD.getCollectionName() );\n      cd.setRoles( currCloudD.getRoles() );\n\n      // TODO: we must be careful that an unrelated node starting up does not try\n      // to become the new shard leader!  How do we designate ourselves as the\n      // leader but prevent new shards from trying to replicate from us before we are ready (i.e. have the split index)?\n      String shardId = currCloudD.getShardId() + \"_\" + ord;\n      cd.setShardId( shardId );\n\n      dcore.setCloudDescriptor(cd);\n    }\n\n    SolrCore core = coreContainer.create(dcore);\n    core.open();  // inc ref count before registering to ensure no one can close the core before we are done with it\n    coreContainer.register(name, core, false);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#createCore(SolrCore,int,HashPartitioner.Range).mjava","sourceNew":null,"sourceOld":"  /** Creates a new core and registers it. The returned core will have it's reference count incremented an extra time and close() should be called when finished. */\n  private SolrCore createCore(SolrCore current, int ord, HashPartitioner.Range newRange) throws IOException, SAXException, ParserConfigurationException {\n    CoreDescriptor currCoreD = current.getCoreDescriptor();\n    CloudDescriptor currCloudD = currCoreD.getCloudDescriptor();\n\n    String currName = currCoreD.getName();\n\n    // TODO: nicer way to come up with core names?\n    String name = currName + \"_\" + ord;\n\n    String instanceDir = name;\n\n\n    // TODO: do this via a clone / constructor?\n    CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, instanceDir);\n    dcore.setConfigName( currCoreD.getConfigName() );\n    dcore.setSchemaName(currCoreD.getSchemaName());\n    // default dcore.setDataDir()\n\n    // TODO: for this to work in non-cloud mode, we will either need to make a copy of the conf directory, or\n    // develop named configs like we have in cloud mode.\n\n\n    CloudDescriptor cd = null;\n    if (currCloudD != null) {\n      cd = new CloudDescriptor();\n\n      // TODO: should we copy these?  any params that are core specific?\n      cd.setParams( currCloudD.getParams() );\n      cd.setCollectionName( currCloudD.getCollectionName() );\n      cd.setRoles( currCloudD.getRoles() );\n\n      // TODO: we must be careful that an unrelated node starting up does not try\n      // to become the new shard leader!  How do we designate ourselves as the\n      // leader but prevent new shards from trying to replicate from us before we are ready (i.e. have the split index)?\n      String shardId = currCloudD.getShardId() + \"_\" + ord;\n      cd.setShardId( shardId );\n\n      dcore.setCloudDescriptor(cd);\n    }\n\n    SolrCore core = coreContainer.create(dcore);\n    core.open();  // inc ref count before registering to ensure no one can close the core before we are done with it\n    coreContainer.register(name, core, false);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5a558d54519c651068ddb202f03befefb1514a7":["c2d1ec821a2d311389d0085f20e2b2698e4b3442"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c2d1ec821a2d311389d0085f20e2b2698e4b3442","c5a558d54519c651068ddb202f03befefb1514a7"],"c2d1ec821a2d311389d0085f20e2b2698e4b3442":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5a558d54519c651068ddb202f03befefb1514a7"]},"commit2Childs":{"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2d1ec821a2d311389d0085f20e2b2698e4b3442"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"c2d1ec821a2d311389d0085f20e2b2698e4b3442":["c5a558d54519c651068ddb202f03befefb1514a7","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}