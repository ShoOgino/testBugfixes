{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer#coreChanged(String,Set[CoreState]).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#coreChanged(String,Set[CoreState]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void coreChanged(final String nodeName, final Set<CoreState> states) throws KeeperException, InterruptedException  {\n    log.debug(\"Cores changed: \" + nodeName + \" states:\" + states);\n    synchronized(reader.getUpdateLock()) {\n      reader.updateCloudState(true);\n      CloudState cloudState = reader.getCloudState();\n      for (CoreState state : states) {\n        cloudState = updateState(cloudState, nodeName, state);\n      }\n\n      try {\n        zkClient.setData(ZkStateReader.CLUSTER_STATE,\n            ZkStateReader.toJSON(cloudState), true);  \n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Interrupted while publishing new state\", e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#coreChanged(String,Set[CoreState]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void coreChanged(final String nodeName, final Set<CoreState> states) throws KeeperException, InterruptedException  {\n    log.debug(\"Cores changed: \" + nodeName + \" states:\" + states);\n    synchronized(reader.getUpdateLock()) {\n      reader.updateCloudState(true);\n      CloudState cloudState = reader.getCloudState();\n      for (CoreState state : states) {\n        cloudState = updateState(cloudState, nodeName, state);\n      }\n\n      try {\n        zkClient.setData(ZkStateReader.CLUSTER_STATE,\n            ZkStateReader.toJSON(cloudState), true);  \n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Interrupted while publishing new state\", e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#coreChanged(String,Set[CoreState]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void coreChanged(final String nodeName, final Set<CoreState> states) throws KeeperException, InterruptedException  {\n    log.debug(\"Cores changed: \" + nodeName + \" states:\" + states);\n    synchronized(reader.getUpdateLock()) {\n      reader.updateCloudState(true);\n      CloudState cloudState = reader.getCloudState();\n      for (CoreState state : states) {\n        cloudState = updateState(cloudState, nodeName, state);\n      }\n\n      try {\n        zkClient.setData(ZkStateReader.CLUSTER_STATE,\n            ZkStateReader.toJSON(cloudState), true);  \n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Interrupted while publishing new state\", e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0492616b11aace806d95ec9df44f57a60160bf7","date":1327803775,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#coreChanged(String,Set[CoreState]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#coreChanged(String,Set[CoreState]).mjava","sourceNew":"  @Override\n  public void coreChanged(final String nodeName, final Set<CoreState> states)\n      throws KeeperException, InterruptedException {\n    log.info(\"Core change pooled: \" + nodeName + \" states:\" + states);\n    for (CoreState state : states) {\n      fifo.add(new CloudStateUpdateRequest(Op.StateChange, nodeName, state));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void coreChanged(final String nodeName, final Set<CoreState> states) throws KeeperException, InterruptedException  {\n    log.debug(\"Cores changed: \" + nodeName + \" states:\" + states);\n    synchronized(reader.getUpdateLock()) {\n      reader.updateCloudState(true);\n      CloudState cloudState = reader.getCloudState();\n      for (CoreState state : states) {\n        cloudState = updateState(cloudState, nodeName, state);\n      }\n\n      try {\n        zkClient.setData(ZkStateReader.CLUSTER_STATE,\n            ZkStateReader.toJSON(cloudState), true);  \n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Interrupted while publishing new state\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4a0c306589f8607dc4b33f7abaf753db19f76e","date":1327836084,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#coreChanged(String,Set[CoreState]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#coreChanged(String,Set[CoreState]).mjava","sourceNew":"  @Override\n  public void coreChanged(final String nodeName, final Set<CoreState> states)\n      throws KeeperException, InterruptedException {\n    log.info(\"Core change pooled: \" + nodeName + \" states:\" + states);\n    for (CoreState state : states) {\n      fifo.add(new CloudStateUpdateRequest(Op.StateChange, nodeName, state));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void coreChanged(final String nodeName, final Set<CoreState> states) throws KeeperException, InterruptedException  {\n    log.debug(\"Cores changed: \" + nodeName + \" states:\" + states);\n    synchronized(reader.getUpdateLock()) {\n      reader.updateCloudState(true);\n      CloudState cloudState = reader.getCloudState();\n      for (CoreState state : states) {\n        cloudState = updateState(cloudState, nodeName, state);\n      }\n\n      try {\n        zkClient.setData(ZkStateReader.CLUSTER_STATE,\n            ZkStateReader.toJSON(cloudState), true);  \n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Interrupted while publishing new state\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#coreChanged(String,Set[CoreState]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#coreChanged(String,Set[CoreState]).mjava","sourceNew":"  @Override\n  public void coreChanged(final String nodeName, final Set<CoreState> states)\n      throws KeeperException, InterruptedException {\n    log.info(\"Core change pooled: \" + nodeName + \" states:\" + states);\n    for (CoreState state : states) {\n      fifo.add(new CloudStateUpdateRequest(Op.StateChange, nodeName, state));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void coreChanged(final String nodeName, final Set<CoreState> states) throws KeeperException, InterruptedException  {\n    log.debug(\"Cores changed: \" + nodeName + \" states:\" + states);\n    synchronized(reader.getUpdateLock()) {\n      reader.updateCloudState(true);\n      CloudState cloudState = reader.getCloudState();\n      for (CoreState state : states) {\n        cloudState = updateState(cloudState, nodeName, state);\n      }\n\n      try {\n        zkClient.setData(ZkStateReader.CLUSTER_STATE,\n            ZkStateReader.toJSON(cloudState), true);  \n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Interrupted while publishing new state\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":4,"author":"Sami Siren","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#coreChanged(String,Set[CoreState]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void coreChanged(final String nodeName, final Set<CoreState> states)\n      throws KeeperException, InterruptedException {\n    log.info(\"Core change pooled: \" + nodeName + \" states:\" + states);\n    for (CoreState state : states) {\n      fifo.add(new CloudStateUpdateRequest(Op.StateChange, nodeName, state));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["d0492616b11aace806d95ec9df44f57a60160bf7"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","d0492616b11aace806d95ec9df44f57a60160bf7"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0492616b11aace806d95ec9df44f57a60160bf7":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d0492616b11aace806d95ec9df44f57a60160bf7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5093a9e893633cc091cf2f729d7863671c2b715"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a5093a9e893633cc091cf2f729d7863671c2b715":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["8f4a0c306589f8607dc4b33f7abaf753db19f76e"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d0492616b11aace806d95ec9df44f57a60160bf7"],"d0492616b11aace806d95ec9df44f57a60160bf7":["a5093a9e893633cc091cf2f729d7863671c2b715","fd92b8bcc88e969302510acf77bd6970da3994c4","8f4a0c306589f8607dc4b33f7abaf753db19f76e"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","8f4a0c306589f8607dc4b33f7abaf753db19f76e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}