{"path":"lucene/core/src/test/org/apache/lucene/index/TestFilterIndexReader#testOverrideMethods().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterIndexReader#testOverrideMethods().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testOverrideMethods().mjava","sourceNew":"  public void testOverrideMethods() throws Exception {\n    boolean fail = false;\n    for (Method m : FilterIndexReader.class.getMethods()) {\n      int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isFinal(mods) || m.isSynthetic()) {\n        continue;\n      }\n      Class<?> declaringClass = m.getDeclaringClass();\n      String name = m.getName();\n      if (declaringClass != FilterIndexReader.class && declaringClass != Object.class) {\n        System.err.println(\"method is not overridden by FilterIndexReader: \" + name);\n        fail = true;\n      }\n    }\n    assertFalse(\"FilterIndexReader overrides (or not) some problematic methods; see log above\", fail);\n  }\n\n","sourceOld":"  public void testOverrideMethods() throws Exception {\n    boolean fail = false;\n    for (Method m : FilterIndexReader.class.getMethods()) {\n      int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isFinal(mods) || m.isSynthetic()) {\n        continue;\n      }\n      Class<?> declaringClass = m.getDeclaringClass();\n      String name = m.getName();\n      if (declaringClass != FilterIndexReader.class && declaringClass != Object.class) {\n        System.err.println(\"method is not overridden by FilterIndexReader: \" + name);\n        fail = true;\n      }\n    }\n    assertFalse(\"FilterIndexReader overrides (or not) some problematic methods; see log above\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"635548f88824977119a14d0594bf158e75cb2b48","date":1328965599,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterIndexReader#testOverrideMethods().mjava","sourceNew":"  public void testOverrideMethods() throws Exception {\n    boolean fail = false;\n    for (Method m : FilterAtomicReader.class.getMethods()) {\n      int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isFinal(mods) || m.isSynthetic()) {\n        continue;\n      }\n      Class<?> declaringClass = m.getDeclaringClass();\n      String name = m.getName();\n      if (declaringClass != FilterAtomicReader.class && declaringClass != Object.class) {\n        System.err.println(\"method is not overridden by FilterIndexReader: \" + name);\n        fail = true;\n      }\n    }\n    assertFalse(\"FilterIndexReader overrides (or not) some problematic methods; see log above\", fail);\n  }\n\n","sourceOld":"  public void testOverrideMethods() throws Exception {\n    boolean fail = false;\n    for (Method m : FilterIndexReader.class.getMethods()) {\n      int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isFinal(mods) || m.isSynthetic()) {\n        continue;\n      }\n      Class<?> declaringClass = m.getDeclaringClass();\n      String name = m.getName();\n      if (declaringClass != FilterIndexReader.class && declaringClass != Object.class) {\n        System.err.println(\"method is not overridden by FilterIndexReader: \" + name);\n        fail = true;\n      }\n    }\n    assertFalse(\"FilterIndexReader overrides (or not) some problematic methods; see log above\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"635548f88824977119a14d0594bf158e75cb2b48":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["635548f88824977119a14d0594bf158e75cb2b48"]},"commit2Childs":{"635548f88824977119a14d0594bf158e75cb2b48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["635548f88824977119a14d0594bf158e75cb2b48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}