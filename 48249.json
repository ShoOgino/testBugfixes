{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetErrors#testDomainErrors().mjava","commits":[{"id":"a067727e528e9edadcd1704b7a3a10912e5d95c1","date":1584973258,"type":1,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetErrors#testDomainErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testDomainErrors().mjava","sourceNew":"  @Test\n  public void testDomainErrors() throws Exception {\n    Client client = Client.localClient();\n    client.deleteByQuery(\"*:*\", null);\n    indexSimple(client);\n\n    // using assertQEx so that, status code and error message can be asserted\n    assertQEx(\"Should Fail as filter with qparser in domain becomes null\",\n        \"QParser yields null, perhaps unresolved parameter reference in: {!query v=$NOfilt}\",\n        req(\"q\", \"*:*\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,domain:{filter:'{!query v=$NOfilt}'}}}\"),\n        SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    assertQEx(\"Should Fail as filter in domain becomes null\",\n        \"QParser yields null, perhaps unresolved parameter reference in: {!v=$NOfilt}\",\n        req(\"q\", \"*:*\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,domain:{filter:'{!v=$NOfilt}'}}}\"),\n        SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    // when domain type is invalid\n    assertQEx(\"Should Fail as domain not of type map\",\n        \"Expected Map for 'domain', received String=bleh , path=facet/cat_s\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,domain:bleh}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    // when domain = null, should not throw exception\n    assertQ(\"Should pass as no domain is specified\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s}}\"));\n\n    // when blockChildren or blockParent is passed but not of string\n    assertQEx(\"Should Fail as blockChildren is of type map\",\n        \"Expected string type for param 'blockChildren' but got LinkedHashMap = {} , path=facet/cat_s\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,domain:{blockChildren:{}}}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"Should Fail as blockParent is of type map\",\n        \"Expected string type for param 'blockParent' but got LinkedHashMap = {} , path=facet/cat_s\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,domain:{blockParent:{}}}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n  }\n\n","sourceOld":"  @Test\n  public void testDomainErrors() throws Exception {\n    Client client = Client.localClient();\n    client.deleteByQuery(\"*:*\", null);\n    indexSimple(client);\n\n    // using assertQEx so that, status code and error message can be asserted\n    assertQEx(\"Should Fail as filter with qparser in domain becomes null\",\n        \"QParser yields null, perhaps unresolved parameter reference in: {!query v=$NOfilt}\",\n        req(\"q\", \"*:*\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,domain:{filter:'{!query v=$NOfilt}'}}}\"),\n        SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    assertQEx(\"Should Fail as filter in domain becomes null\",\n        \"QParser yields null, perhaps unresolved parameter reference in: {!v=$NOfilt}\",\n        req(\"q\", \"*:*\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,domain:{filter:'{!v=$NOfilt}'}}}\"),\n        SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    // when domain type is invalid\n    assertQEx(\"Should Fail as domain not of type map\",\n        \"Expected Map for 'domain', received String=bleh , path=facet/cat_s\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,domain:bleh}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    // when domain = null, should not throw exception\n    assertQ(\"Should pass as no domain is specified\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s}}\"));\n\n    // when blockChildren or blockParent is passed but not of string\n    assertQEx(\"Should Fail as blockChildren is of type map\",\n        \"Expected string type for param 'blockChildren' but got LinkedHashMap = {} , path=facet/cat_s\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,domain:{blockChildren:{}}}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"Should Fail as blockParent is of type map\",\n        \"Expected string type for param 'blockParent' but got LinkedHashMap = {} , path=facet/cat_s\",\n        req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{cat_s:{type:terms,field:cat_s,domain:{blockParent:{}}}}\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a067727e528e9edadcd1704b7a3a10912e5d95c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a067727e528e9edadcd1704b7a3a10912e5d95c1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a067727e528e9edadcd1704b7a3a10912e5d95c1"],"a067727e528e9edadcd1704b7a3a10912e5d95c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}