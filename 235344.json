{"path":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","commits":[{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRef ref = new BytesRef();\n    for (int j = 0; j < 2 * RANDOM_MULTIPLIER; j++) {\n      final int mod = 1+random.nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRef ref = new BytesRef();\n    for (int j = 0; j < 2 * RANDOM_MULTIPLIER; j++) {\n      final int mod = 1+random.nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","sourceNew":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      final int mod = 1+random.nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRef ref = new BytesRef();\n    for (int j = 0; j < 2 * RANDOM_MULTIPLIER; j++) {\n      final int mod = 1+random.nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","sourceNew":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      final int mod = 1+random.nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRef ref = new BytesRef();\n    for (int j = 0; j < 2 * RANDOM_MULTIPLIER; j++) {\n      final int mod = 1+random.nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","sourceNew":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      final int mod = 1+random.nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRef ref = new BytesRef();\n    for (int j = 0; j < 2 * RANDOM_MULTIPLIER; j++) {\n      final int mod = 1+random.nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","sourceNew":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      final int mod = 1+random.nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      final int mod = 1+random.nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","sourceNew":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      final int mod = 1+random.nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      final int mod = 1+random.nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e6e919043fa85ee891123768dd655a98edbbf63c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","f83af14a2a8131b14d7aee6274c740334e0363d3"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"e6e919043fa85ee891123768dd655a98edbbf63c":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","e6e919043fa85ee891123768dd655a98edbbf63c"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f83af14a2a8131b14d7aee6274c740334e0363d3","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"e6e919043fa85ee891123768dd655a98edbbf63c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}