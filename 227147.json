{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#compare(byte[],byte[]).mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#compare(byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      checkPackedValue(\"min packed value\", minPackedValue, -1);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n      checkPackedValue(\"max packed value\", maxPackedValue, -1);\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = bytesPerDim * dim;\n\n        if (StringHelper.compare(bytesPerDim, minPackedValue, offset, maxPackedValue, offset) > 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the cell's maxPackedValue \" + Arrays.toString(maxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        // Make sure this cell is not outside of the global min/max:\n        if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n          throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                     \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n        if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n          throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                     \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n      }                                   \n\n      // We always pretend the query shape is so complex that it crosses every cell, so\n      // that packedValue is passed for every document\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#compare(byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      checkPackedValue(\"min packed value\", minPackedValue, -1);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n      checkPackedValue(\"max packed value\", maxPackedValue, -1);\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = bytesPerDim * dim;\n\n        if (StringHelper.compare(bytesPerDim, minPackedValue, offset, maxPackedValue, offset) > 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the cell's maxPackedValue \" + Arrays.toString(maxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        // Make sure this cell is not outside of the global min/max:\n        if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n          throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                     \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n        if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n          throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                     \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n      }                                   \n\n      // We always pretend the query shape is so complex that it crosses every cell, so\n      // that packedValue is passed for every document\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#compare(byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      checkPackedValue(\"min packed value\", minPackedValue, -1);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n      checkPackedValue(\"max packed value\", maxPackedValue, -1);\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = bytesPerDim * dim;\n\n        if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) > 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the cell's maxPackedValue \" + Arrays.toString(maxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        // Make sure this cell is not outside of the global min/max:\n        if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, globalMinPackedValue, offset, offset + bytesPerDim) < 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        if (FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, globalMinPackedValue, offset, offset + bytesPerDim) < 0) {\n          throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                     \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, globalMaxPackedValue, offset, offset + bytesPerDim) > 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n        if (FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, globalMaxPackedValue, offset, offset + bytesPerDim) > 0) {\n          throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                     \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n      }                                   \n\n      // We always pretend the query shape is so complex that it crosses every cell, so\n      // that packedValue is passed for every document\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    }\n\n","sourceOld":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      checkPackedValue(\"min packed value\", minPackedValue, -1);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n      checkPackedValue(\"max packed value\", maxPackedValue, -1);\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = bytesPerDim * dim;\n\n        if (StringHelper.compare(bytesPerDim, minPackedValue, offset, maxPackedValue, offset) > 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the cell's maxPackedValue \" + Arrays.toString(maxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        // Make sure this cell is not outside of the global min/max:\n        if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n          throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                     \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n        if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n          throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                     \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n      }                                   \n\n      // We always pretend the query shape is so complex that it crosses every cell, so\n      // that packedValue is passed for every document\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#compare(byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      checkPackedValue(\"min packed value\", minPackedValue, -1);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedIndexBytesCount);\n      checkPackedValue(\"max packed value\", maxPackedValue, -1);\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedIndexBytesCount);\n\n      for(int dim=0;dim<numIndexDims;dim++) {\n        int offset = bytesPerDim * dim;\n\n        if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) > 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the cell's maxPackedValue \" + Arrays.toString(maxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        // Make sure this cell is not outside of the global min/max:\n        if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, globalMinPackedValue, offset, offset + bytesPerDim) < 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        if (FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, globalMinPackedValue, offset, offset + bytesPerDim) < 0) {\n          throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                     \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, globalMaxPackedValue, offset, offset + bytesPerDim) > 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n        if (FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, globalMaxPackedValue, offset, offset + bytesPerDim) > 0) {\n          throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                     \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n      }                                   \n\n      // We always pretend the query shape is so complex that it crosses every cell, so\n      // that packedValue is passed for every document\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    }\n\n","sourceOld":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      checkPackedValue(\"min packed value\", minPackedValue, -1);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n      checkPackedValue(\"max packed value\", maxPackedValue, -1);\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n      for(int dim=0;dim<numDims;dim++) {\n        int offset = bytesPerDim * dim;\n\n        if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) > 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the cell's maxPackedValue \" + Arrays.toString(maxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        // Make sure this cell is not outside of the global min/max:\n        if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, globalMinPackedValue, offset, offset + bytesPerDim) < 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        if (FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, globalMinPackedValue, offset, offset + bytesPerDim) < 0) {\n          throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                     \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, globalMaxPackedValue, offset, offset + bytesPerDim) > 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n        if (FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, globalMaxPackedValue, offset, offset + bytesPerDim) > 0) {\n          throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                     \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n      }                                   \n\n      // We always pretend the query shape is so complex that it crosses every cell, so\n      // that packedValue is passed for every document\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#compare(byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex.VerifyPointsVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      checkPackedValue(\"min packed value\", minPackedValue, -1);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedIndexBytesCount);\n      checkPackedValue(\"max packed value\", maxPackedValue, -1);\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedIndexBytesCount);\n\n      for(int dim=0;dim<numIndexDims;dim++) {\n        int offset = bytesPerDim * dim;\n\n        if (Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) > 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the cell's maxPackedValue \" + Arrays.toString(maxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        // Make sure this cell is not outside of the global min/max:\n        if (Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, globalMinPackedValue, offset, offset + bytesPerDim) < 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        if (Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, globalMinPackedValue, offset, offset + bytesPerDim) < 0) {\n          throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                     \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        if (Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, globalMaxPackedValue, offset, offset + bytesPerDim) > 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n        if (Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, globalMaxPackedValue, offset, offset + bytesPerDim) > 0) {\n          throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                     \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n      }                                   \n\n      // We always pretend the query shape is so complex that it crosses every cell, so\n      // that packedValue is passed for every document\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    }\n\n","sourceOld":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      checkPackedValue(\"min packed value\", minPackedValue, -1);\n      System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedIndexBytesCount);\n      checkPackedValue(\"max packed value\", maxPackedValue, -1);\n      System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedIndexBytesCount);\n\n      for(int dim=0;dim<numIndexDims;dim++) {\n        int offset = bytesPerDim * dim;\n\n        if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) > 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the cell's maxPackedValue \" + Arrays.toString(maxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        // Make sure this cell is not outside of the global min/max:\n        if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, globalMinPackedValue, offset, offset + bytesPerDim) < 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        if (FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, globalMinPackedValue, offset, offset + bytesPerDim) < 0) {\n          throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                     \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n\n        if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, globalMaxPackedValue, offset, offset + bytesPerDim) > 0) {\n          throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                     \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n        if (FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, globalMaxPackedValue, offset, offset + bytesPerDim) > 0) {\n          throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                     \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldName + \"\\\"\");\n        }\n      }                                   \n\n      // We always pretend the query shape is so complex that it crosses every cell, so\n      // that packedValue is passed for every document\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["41f60ea1802fda42d3c91d023406066d00ddb5f8","9856095f7afb5a607bf5e65077615ed91273508c"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["f6652c943595e92c187ee904c382863013eae28f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}