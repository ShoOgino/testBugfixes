{"path":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","pathOld":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, solrHomeDirectory);\n\n    tempDir = TEMP_DIR + \"/test-morphlines-\" + System.currentTimeMillis();\n    new File(tempDir).mkdirs();\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    MRUnitBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\");\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(dataDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, dataDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, dataDir + File.separator +  \"nm-logs\");\n\n    \n    createTempDir();\n    new File(dataDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", dataDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(dataDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, solrHomeDirectory);\n\n    tempDir = TEMP_DIR + \"/test-morphlines-\" + System.currentTimeMillis();\n    new File(tempDir).mkdirs();\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    MRUnitBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\");\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(dataDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, dataDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, dataDir + File.separator +  \"nm-logs\");\n\n    \n    createTempDir();\n    new File(dataDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", dataDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(dataDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, solrHomeDirectory);\n\n    tempDir = TEMP_DIR + \"/test-morphlines-\" + System.currentTimeMillis();\n    new File(tempDir).mkdirs();\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    MRUnitBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\");\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(dataDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, dataDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, dataDir + File.separator +  \"nm-logs\");\n\n    \n    createTempDir();\n    new File(dataDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", dataDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(dataDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96fdd7189254bc9698a673fdf4e2b0e97e993ede","date":1387480427,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, solrHomeDirectory);\n\n    tempDir = TEMP_DIR + \"/test-morphlines-\" + System.currentTimeMillis();\n    new File(tempDir).mkdirs();\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(dataDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, dataDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, dataDir + File.separator +  \"nm-logs\");\n\n    \n    createTempDir();\n    new File(dataDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", dataDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(dataDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, solrHomeDirectory);\n\n    tempDir = TEMP_DIR + \"/test-morphlines-\" + System.currentTimeMillis();\n    new File(tempDir).mkdirs();\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    MRUnitBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\");\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(dataDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, dataDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, dataDir + File.separator +  \"nm-logs\");\n\n    \n    createTempDir();\n    new File(dataDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", dataDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(dataDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"244821694227ed9a83c94b37bb3aa091edfbfd28","date":1393195844,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, solrHomeDirectory);\n\n    tempDir = TEMP_DIR + \"/test-morphlines-\" + System.currentTimeMillis();\n    new File(tempDir).mkdirs();\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(dataDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, dataDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, dataDir + File.separator +  \"nm-logs\");\n\n    \n    createTempDir();\n    new File(dataDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", dataDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(dataDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, solrHomeDirectory);\n\n    tempDir = TEMP_DIR + \"/test-morphlines-\" + System.currentTimeMillis();\n    new File(tempDir).mkdirs();\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(dataDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, dataDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, dataDir + File.separator +  \"nm-logs\");\n\n    \n    createTempDir();\n    new File(dataDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", dataDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(dataDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    solrHomeDirectory = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n\n    tempDir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName()).getAbsolutePath();\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(dataDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, dataDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, dataDir + File.separator +  \"nm-logs\");\n\n    \n    createTempDir();\n    new File(dataDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", dataDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(dataDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, solrHomeDirectory);\n\n    tempDir = TEMP_DIR + \"/test-morphlines-\" + System.currentTimeMillis();\n    new File(tempDir).mkdirs();\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(dataDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, dataDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, dataDir + File.separator +  \"nm-logs\");\n\n    \n    createTempDir();\n    new File(dataDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", dataDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(dataDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, solrHomeDirectory);\n\n    tempDir = dataDir + \"/test-morphlines-\" + System.currentTimeMillis();\n    new File(tempDir).mkdirs();\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(dataDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, dataDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, dataDir + File.separator +  \"nm-logs\");\n\n    \n    new File(dataDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", dataDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(dataDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, solrHomeDirectory);\n\n    tempDir = TEMP_DIR + \"/test-morphlines-\" + System.currentTimeMillis();\n    new File(tempDir).mkdirs();\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(dataDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, dataDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, dataDir + File.separator +  \"nm-logs\");\n\n    \n    createTempDir();\n    new File(dataDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", dataDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(dataDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n    tempDir = createTempDir().getAbsolutePath();\n\n    new File(tempDir).mkdirs();\n\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(tempDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, tempDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, tempDir + File.separator +  \"nm-logs\");\n\n    \n    new File(tempDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", tempDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(tempDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    solrHomeDirectory = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n\n    tempDir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName()).getAbsolutePath();\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(dataDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, dataDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, dataDir + File.separator +  \"nm-logs\");\n\n    \n    createTempDir();\n    new File(dataDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", dataDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(dataDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9b03c6f22f23b6e96325e9211502c1c2bcf985f","date":1395969631,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    solrHomeDirectory = createTempDir();\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n    tempDir = createTempDir().getAbsolutePath();\n\n    new File(tempDir).mkdirs();\n\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(tempDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, tempDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, tempDir + File.separator +  \"nm-logs\");\n\n    \n    new File(tempDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", tempDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(tempDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n    tempDir = createTempDir().getAbsolutePath();\n\n    new File(tempDir).mkdirs();\n\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(tempDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, tempDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, tempDir + File.separator +  \"nm-logs\");\n\n    \n    new File(tempDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", tempDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(tempDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    solrHomeDirectory = createTempDir();\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n    tempDir = createTempDir().getAbsolutePath();\n\n    new File(tempDir).mkdirs();\n\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(tempDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, tempDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, tempDir + File.separator +  \"nm-logs\");\n\n    \n    new File(tempDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", tempDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(tempDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, solrHomeDirectory);\n\n    tempDir = dataDir + \"/test-morphlines-\" + System.currentTimeMillis();\n    new File(tempDir).mkdirs();\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(dataDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, dataDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, dataDir + File.separator +  \"nm-logs\");\n\n    \n    new File(dataDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", dataDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(dataDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19","date":1400739326,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    solrHomeDirectory = createTempDir();\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n    tempDir = createTempDir().getAbsolutePath();\n\n    new File(tempDir).mkdirs();\n\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(tempDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, tempDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, tempDir + File.separator +  \"nm-logs\");\n\n    \n    new File(tempDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", tempDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n\n    // Initialize AFTER test.build.dir is set, JarFinder uses it.\n    SEARCH_ARCHIVES_JAR = JarFinder.getJar(MapReduceIndexerTool.class);\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(tempDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    solrHomeDirectory = createTempDir();\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n    tempDir = createTempDir().getAbsolutePath();\n\n    new File(tempDir).mkdirs();\n\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(tempDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, tempDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, tempDir + File.separator +  \"nm-logs\");\n\n    \n    new File(tempDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", tempDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(tempDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    solrHomeDirectory = createTempDir();\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n    tempDir = createTempDir().getAbsolutePath();\n\n    new File(tempDir).mkdirs();\n\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(tempDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, tempDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, tempDir + File.separator +  \"nm-logs\");\n\n    \n    new File(tempDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", tempDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n\n    // Initialize AFTER test.build.dir is set, JarFinder uses it.\n    SEARCH_ARCHIVES_JAR = JarFinder.getJar(MapReduceIndexerTool.class);\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(tempDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    solrHomeDirectory = createTempDir();\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n    tempDir = createTempDir().getAbsolutePath();\n\n    new File(tempDir).mkdirs();\n\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(tempDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, tempDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, tempDir + File.separator +  \"nm-logs\");\n\n    \n    new File(tempDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", tempDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(tempDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d29d666b8eaa2fe8efe1e0d42fc8e32876d7294","date":1408633409,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    System.setProperty(\"solr.hdfs.blockcache.global\", Boolean.toString(LuceneTestCase.random().nextBoolean()));\n    System.setProperty(\"solr.hdfs.blockcache.enabled\", Boolean.toString(LuceneTestCase.random().nextBoolean()));\n    System.setProperty(\"solr.hdfs.blockcache.blocksperbank\", \"2048\");\n    \n    solrHomeDirectory = createTempDir();\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n    tempDir = createTempDir().getAbsolutePath();\n\n    new File(tempDir).mkdirs();\n\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(tempDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, tempDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, tempDir + File.separator +  \"nm-logs\");\n\n    \n    new File(tempDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", tempDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n\n    // Initialize AFTER test.build.dir is set, JarFinder uses it.\n    SEARCH_ARCHIVES_JAR = JarFinder.getJar(MapReduceIndexerTool.class);\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(tempDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    solrHomeDirectory = createTempDir();\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n    tempDir = createTempDir().getAbsolutePath();\n\n    new File(tempDir).mkdirs();\n\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(tempDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, tempDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, tempDir + File.separator +  \"nm-logs\");\n\n    \n    new File(tempDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", tempDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n\n    // Initialize AFTER test.build.dir is set, JarFinder uses it.\n    SEARCH_ARCHIVES_JAR = JarFinder.getJar(MapReduceIndexerTool.class);\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(tempDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","bugFix":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    System.setProperty(\"solr.hdfs.blockcache.global\", Boolean.toString(LuceneTestCase.random().nextBoolean()));\n    System.setProperty(\"solr.hdfs.blockcache.enabled\", Boolean.toString(LuceneTestCase.random().nextBoolean()));\n    System.setProperty(\"solr.hdfs.blockcache.blocksperbank\", \"2048\");\n    \n    solrHomeDirectory = createTempDir().toFile();\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n    tempDir = createTempDir().toFile().getAbsolutePath();\n\n    new File(tempDir).mkdirs();\n\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(tempDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, tempDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, tempDir + File.separator +  \"nm-logs\");\n\n    \n    new File(tempDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", tempDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n\n    // Initialize AFTER test.build.dir is set, JarFinder uses it.\n    SEARCH_ARCHIVES_JAR = JarFinder.getJar(MapReduceIndexerTool.class);\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(tempDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    System.setProperty(\"solr.hdfs.blockcache.global\", Boolean.toString(LuceneTestCase.random().nextBoolean()));\n    System.setProperty(\"solr.hdfs.blockcache.enabled\", Boolean.toString(LuceneTestCase.random().nextBoolean()));\n    System.setProperty(\"solr.hdfs.blockcache.blocksperbank\", \"2048\");\n    \n    solrHomeDirectory = createTempDir();\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n    tempDir = createTempDir().getAbsolutePath();\n\n    new File(tempDir).mkdirs();\n\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(tempDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, tempDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, tempDir + File.separator +  \"nm-logs\");\n\n    \n    new File(tempDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", tempDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n\n    // Initialize AFTER test.build.dir is set, JarFinder uses it.\n    SEARCH_ARCHIVES_JAR = JarFinder.getJar(MapReduceIndexerTool.class);\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(tempDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"455446bf7574d2672ab6c3b46668b820914e3f75","date":1421663696,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    System.setProperty(\"solr.hdfs.blockcache.global\", Boolean.toString(LuceneTestCase.random().nextBoolean()));\n    System.setProperty(\"solr.hdfs.blockcache.enabled\", Boolean.toString(LuceneTestCase.random().nextBoolean()));\n    System.setProperty(\"solr.hdfs.blockcache.blocksperbank\", \"2048\");\n    \n    solrHomeDirectory = createTempDir().toFile();\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n    tempDir = createTempDir().toFile().getAbsolutePath();\n\n    new File(tempDir).mkdirs();\n\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(tempDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, tempDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, tempDir + File.separator +  \"nm-logs\");\n\n    \n    new File(tempDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", tempDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n\n    // Initialize AFTER test.build.dir is set, JarFinder uses it.\n    SEARCH_ARCHIVES_JAR = JarFinder.getJar(MapReduceIndexerTool.class);\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(tempDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    System.setProperty(\"solr.hdfs.blockcache.global\", Boolean.toString(LuceneTestCase.random().nextBoolean()));\n    System.setProperty(\"solr.hdfs.blockcache.enabled\", Boolean.toString(LuceneTestCase.random().nextBoolean()));\n    System.setProperty(\"solr.hdfs.blockcache.blocksperbank\", \"2048\");\n    \n    solrHomeDirectory = createTempDir().toFile();\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n    tempDir = createTempDir().toFile().getAbsolutePath();\n\n    new File(tempDir).mkdirs();\n\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(tempDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, tempDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, tempDir + File.separator +  \"nm-logs\");\n\n    \n    new File(tempDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", tempDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n\n    // Initialize AFTER test.build.dir is set, JarFinder uses it.\n    SEARCH_ARCHIVES_JAR = JarFinder.getJar(MapReduceIndexerTool.class);\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(tempDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da59c6d3748d1a2a9d1a58a69f70383622d68379","date":1433873890,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    System.setProperty(\"solr.hdfs.blockcache.global\", Boolean.toString(LuceneTestCase.random().nextBoolean()));\n    System.setProperty(\"solr.hdfs.blockcache.enabled\", Boolean.toString(LuceneTestCase.random().nextBoolean()));\n    System.setProperty(\"solr.hdfs.blockcache.blocksperbank\", \"2048\");\n    \n    solrHomeDirectory = createTempDir().toFile();\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n    tempDir = createTempDir().toFile().getAbsolutePath();\n\n    new File(tempDir).mkdirs();\n\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(tempDir, \"logs\").getAbsolutePath());\n    \n    int dataNodes = 2;\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n    conf.set(\"mapreduce.jobhistory.minicluster.fixed.ports\", \"false\");\n    conf.set(\"mapreduce.jobhistory.admin.address\", \"0.0.0.0:0\");\n    \n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, tempDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, tempDir + File.separator +  \"nm-logs\");\n\n    \n    new File(tempDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", tempDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n\n    // Initialize AFTER test.build.dir is set, JarFinder uses it.\n    SEARCH_ARCHIVES_JAR = JarFinder.getJar(MapReduceIndexerTool.class);\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(tempDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    System.setProperty(\"solr.hdfs.blockcache.global\", Boolean.toString(LuceneTestCase.random().nextBoolean()));\n    System.setProperty(\"solr.hdfs.blockcache.enabled\", Boolean.toString(LuceneTestCase.random().nextBoolean()));\n    System.setProperty(\"solr.hdfs.blockcache.blocksperbank\", \"2048\");\n    \n    solrHomeDirectory = createTempDir().toFile();\n    assumeTrue(\n            \"Currently this test can only be run without the lucene test security policy in place\",\n            System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n    tempDir = createTempDir().toFile().getAbsolutePath();\n\n    new File(tempDir).mkdirs();\n\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(tempDir, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 2;\n    int dataNodes = 2;\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, tempDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, tempDir + File.separator +  \"nm-logs\");\n\n    \n    new File(tempDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", tempDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n\n    // Initialize AFTER test.build.dir is set, JarFinder uses it.\n    SEARCH_ARCHIVES_JAR = JarFinder.getJar(MapReduceIndexerTool.class);\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(tempDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","bugFix":["d6e604e9030fb0cabf0c5a85ae6039921a81419c","408dc7b6a106b3cdf24fc9833fe653ab1ef74e41"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    System.setProperty(\"solr.hdfs.blockcache.global\", Boolean.toString(LuceneTestCase.random().nextBoolean()));\n    System.setProperty(\"solr.hdfs.blockcache.enabled\", Boolean.toString(LuceneTestCase.random().nextBoolean()));\n    System.setProperty(\"solr.hdfs.blockcache.blocksperbank\", \"2048\");\n    \n    solrHomeDirectory = createTempDir().toFile();\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n    tempDir = createTempDir().toFile().getAbsolutePath();\n\n    new File(tempDir).mkdirs();\n\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(tempDir, \"logs\").getAbsolutePath());\n    \n    int dataNodes = 2;\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n    conf.set(\"mapreduce.jobhistory.minicluster.fixed.ports\", \"false\");\n    conf.set(\"mapreduce.jobhistory.admin.address\", \"0.0.0.0:0\");\n    \n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, tempDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, tempDir + File.separator +  \"nm-logs\");\n\n    \n    new File(tempDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", tempDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n\n    // Initialize AFTER test.build.dir is set, JarFinder uses it.\n    SEARCH_ARCHIVES_JAR = JarFinder.getJar(MapReduceIndexerTool.class);\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(tempDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#setupClass().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    System.setProperty(\"solr.hdfs.blockcache.global\", Boolean.toString(LuceneTestCase.random().nextBoolean()));\n    System.setProperty(\"solr.hdfs.blockcache.enabled\", Boolean.toString(LuceneTestCase.random().nextBoolean()));\n    System.setProperty(\"solr.hdfs.blockcache.blocksperbank\", \"2048\");\n    \n    solrHomeDirectory = createTempDir().toFile();\n\n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test does not work with Windows because of native library requirements\", Constants.WINDOWS);\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_INSTANCE_DIR, AbstractZkTestCase.SOLRHOME);\n    tempDir = createTempDir().toFile().getAbsolutePath();\n\n    new File(tempDir).mkdirs();\n\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    AbstractSolrMorphlineTestBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\", true);\n    \n    \n    System.setProperty(\"hadoop.log.dir\", new File(tempDir, \"logs\").getAbsolutePath());\n    \n    int dataNodes = 2;\n    \n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n    conf.set(\"mapreduce.jobhistory.minicluster.fixed.ports\", \"false\");\n    conf.set(\"mapreduce.jobhistory.admin.address\", \"0.0.0.0:0\");\n    \n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, tempDir + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, tempDir + File.separator +  \"nm-logs\");\n\n    \n    new File(tempDir + File.separator +  \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"test.build.dir\", tempDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", tempDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n\n    // Initialize AFTER test.build.dir is set, JarFinder uses it.\n    SEARCH_ARCHIVES_JAR = JarFinder.getJar(MapReduceIndexerTool.class);\n    \n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"),\n        FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"),\n        FsPermission.valueOf(\"-rwx------\"));\n    \n    mrCluster = MiniMRClientClusterFactory.create(MorphlineGoLiveMiniMRTest.class, 1, conf, new File(tempDir, \"mrCluster\")); \n        \n        //new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,\n        //hosts, null, conf);\n\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12109b652e9210b8d58fca47f6c4a725d058a58e":["da59c6d3748d1a2a9d1a58a69f70383622d68379"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","d9b03c6f22f23b6e96325e9211502c1c2bcf985f"],"da59c6d3748d1a2a9d1a58a69f70383622d68379":["455446bf7574d2672ab6c3b46668b820914e3f75"],"d9b03c6f22f23b6e96325e9211502c1c2bcf985f":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"b7605579001505896d48b07160075a5c8b8e128e":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"f4abec28b874149a7223e32cc7a01704c27790de":["0d29d666b8eaa2fe8efe1e0d42fc8e32876d7294"],"d0d579490a72f2e6297eaa648940611234c57cf1":["244821694227ed9a83c94b37bb3aa091edfbfd28"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["da59c6d3748d1a2a9d1a58a69f70383622d68379"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d29d666b8eaa2fe8efe1e0d42fc8e32876d7294":["4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["244821694227ed9a83c94b37bb3aa091edfbfd28"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"96fdd7189254bc9698a673fdf4e2b0e97e993ede":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"244821694227ed9a83c94b37bb3aa091edfbfd28":["96fdd7189254bc9698a673fdf4e2b0e97e993ede"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"],"455446bf7574d2672ab6c3b46668b820914e3f75":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d9b03c6f22f23b6e96325e9211502c1c2bcf985f"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["b7605579001505896d48b07160075a5c8b8e128e","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"da59c6d3748d1a2a9d1a58a69f70383622d68379":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"d9b03c6f22f23b6e96325e9211502c1c2bcf985f":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b7605579001505896d48b07160075a5c8b8e128e":[],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"f4abec28b874149a7223e32cc7a01704c27790de":["455446bf7574d2672ab6c3b46668b820914e3f75"],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["b7605579001505896d48b07160075a5c8b8e128e","0d29d666b8eaa2fe8efe1e0d42fc8e32876d7294"],"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","96fdd7189254bc9698a673fdf4e2b0e97e993ede"],"0d29d666b8eaa2fe8efe1e0d42fc8e32876d7294":["f4abec28b874149a7223e32cc7a01704c27790de"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"96fdd7189254bc9698a673fdf4e2b0e97e993ede":["244821694227ed9a83c94b37bb3aa091edfbfd28"],"244821694227ed9a83c94b37bb3aa091edfbfd28":["d0d579490a72f2e6297eaa648940611234c57cf1","1416f9d09d016a6894cd17e1caac137dad2bba59"],"455446bf7574d2672ab6c3b46668b820914e3f75":["da59c6d3748d1a2a9d1a58a69f70383622d68379"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","fe1c4aa9af769a38e878f608070f672efbeac27f","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}