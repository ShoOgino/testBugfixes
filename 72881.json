{"path":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","commits":[{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return peek();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, false, null);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fd1b710c5464a5da208b929fe456d5cb5126b6e8","fd1b710c5464a5da208b929fe456d5cb5126b6e8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return peek();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, false, null);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2d0da1152c8dd998675c30a3f6f599a91770c2b","date":1342792640,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return peek();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return peek();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, false, null);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return peek();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return peek();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, false, null);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return peek();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return peek();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, false, null);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return peek();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return peek();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd1b710c5464a5da208b929fe456d5cb5126b6e8","date":1353510167,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return peek();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await(DEFAULT_TIMEOUT);\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return peek();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","bugFix":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return peek();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await(DEFAULT_TIMEOUT);\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return peek();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c986b1ea9768aff3c903f05a2c85b7b672b5c225","date":1359126891,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   */\n  public QueueEvent peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return element();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await(DEFAULT_TIMEOUT);\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return new QueueEvent(path, data, childWatcher.getWatchedEvent());\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return peek();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await(DEFAULT_TIMEOUT);\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   */\n  public QueueEvent peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return element();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await(DEFAULT_TIMEOUT);\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return new QueueEvent(path, data, childWatcher.getWatchedEvent());\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return peek();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await(DEFAULT_TIMEOUT);\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e6c873b95174ff04c895232927baa76a95925eb","date":1385054916,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty and block is false.\n   * \n   * @param block if true, blocks until an element enters the queue\n   * @return data at the first element of the queue, or null.\n   */\n  public QueueEvent peek(boolean block) throws KeeperException, InterruptedException {\n    return peek(block ? Long.MAX_VALUE : 0);\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   */\n  public QueueEvent peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return element();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await(DEFAULT_TIMEOUT);\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return new QueueEvent(path, data, childWatcher.getWatchedEvent());\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty and block is false.\n   * \n   * @param block if true, blocks until an element enters the queue\n   * @return data at the first element of the queue, or null.\n   */\n  public QueueEvent peek(boolean block) throws KeeperException, InterruptedException {\n    return peek(block ? Long.MAX_VALUE : 0);\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty.\n   * \n   * @return data at the first element of the queue, or null.\n   */\n  public QueueEvent peek(boolean block) throws KeeperException, InterruptedException {\n    if (!block) {\n      return element();\n    }\n    \n    TreeMap<Long,String> orderedChildren;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await(DEFAULT_TIMEOUT);\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return new QueueEvent(path, data, childWatcher.getWatchedEvent());\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty and block is false.\n   *\n   * @param block if true, blocks until an element enters the queue\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    return block ? peek(Long.MAX_VALUE) : peek();\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty and block is false.\n   * \n   * @param block if true, blocks until an element enters the queue\n   * @return data at the first element of the queue, or null.\n   */\n  public QueueEvent peek(boolean block) throws KeeperException, InterruptedException {\n    return peek(block ? Long.MAX_VALUE : 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#peek(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty and block is false.\n   *\n   * @param block if true, blocks until an element enters the queue\n   * @return data at the first element of the queue, or null.\n   */\n  @Override\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    return block ? peek(Long.MAX_VALUE) : peek();\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty and block is false.\n   *\n   * @param block if true, blocks until an element enters the queue\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    return block ? peek(Long.MAX_VALUE) : peek();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#peek(boolean).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty and block is false.\n   *\n   * @param block if true, blocks until an element enters the queue\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    return block ? peek(Long.MAX_VALUE) : peek();\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty and block is false.\n   *\n   * @param block if true, blocks until an element enters the queue\n   * @return data at the first element of the queue, or null.\n   */\n  @Override\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    return block ? peek(Long.MAX_VALUE) : peek();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#peek(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty and block is false.\n   *\n   * @param block if true, blocks until an element enters the queue\n   * @return data at the first element of the queue, or null.\n   */\n  @Override\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    return block ? peek(Long.MAX_VALUE) : peek();\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty and block is false.\n   *\n   * @param block if true, blocks until an element enters the queue\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    return block ? peek(Long.MAX_VALUE) : peek();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#peek(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(boolean).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty and block is false.\n   *\n   * @param block if true, blocks until an element enters the queue\n   * @return data at the first element of the queue, or null.\n   */\n  @Override\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    return block ? peek(Long.MAX_VALUE) : peek();\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty and block is false.\n   *\n   * @param block if true, blocks until an element enters the queue\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(boolean block) throws KeeperException, InterruptedException {\n    return block ? peek(Long.MAX_VALUE) : peek();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c2d0da1152c8dd998675c30a3f6f599a91770c2b"],"c2d0da1152c8dd998675c30a3f6f599a91770c2b":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"fd1b710c5464a5da208b929fe456d5cb5126b6e8":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","fd1b710c5464a5da208b929fe456d5cb5126b6e8"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["407687e67faf6e1f02a211ca078d8e3eed631027","c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"aba371508186796cc6151d8223a5b4e16d02e26e":["33d0ed80b7b47e34ad3ff033a77544563aba3085","c2d0da1152c8dd998675c30a3f6f599a91770c2b"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"9e6c873b95174ff04c895232927baa76a95925eb":["c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"c986b1ea9768aff3c903f05a2c85b7b672b5c225":["fd1b710c5464a5da208b929fe456d5cb5126b6e8"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33d0ed80b7b47e34ad3ff033a77544563aba3085"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["c986b1ea9768aff3c903f05a2c85b7b672b5c225","9e6c873b95174ff04c895232927baa76a95925eb"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c2d0da1152c8dd998675c30a3f6f599a91770c2b"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["9e6c873b95174ff04c895232927baa76a95925eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["fd1b710c5464a5da208b929fe456d5cb5126b6e8","407687e67faf6e1f02a211ca078d8e3eed631027"],"c2d0da1152c8dd998675c30a3f6f599a91770c2b":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["c2d0da1152c8dd998675c30a3f6f599a91770c2b","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"fd1b710c5464a5da208b929fe456d5cb5126b6e8":["407687e67faf6e1f02a211ca078d8e3eed631027","c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"407687e67faf6e1f02a211ca078d8e3eed631027":["dd45d4a2ee01a1932d33eec42f5272c2402da679"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"9e6c873b95174ff04c895232927baa76a95925eb":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","2a282020d6c9a4ea32a359539e283e4771a2fda8"],"c986b1ea9768aff3c903f05a2c85b7b672b5c225":["dd45d4a2ee01a1932d33eec42f5272c2402da679","9e6c873b95174ff04c895232927baa76a95925eb","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33d0ed80b7b47e34ad3ff033a77544563aba3085","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","aba371508186796cc6151d8223a5b4e16d02e26e","6240b74b884c5587f2a4062dd27d6c32bf228889","74f45af4339b0daf7a95c820ab88c1aea74fbce0","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}