{"path":"lucene/backwards/src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","sourceNew":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet<String> getWordSet(File wordfile) throws IOException {\n    HashSet<String> result = new HashSet<String>();\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      result = getWordSet(reader);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet<String> getWordSet(File wordfile) throws IOException {\n    HashSet<String> result = new HashSet<String>();\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      result = getWordSet(reader);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File).mjava","sourceNew":null,"sourceOld":"  /**\n   * Loads a text file and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @return A HashSet with the file's words\n   */\n  public static HashSet<String> getWordSet(File wordfile) throws IOException {\n    HashSet<String> result = new HashSet<String>();\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      result = getWordSet(reader);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}