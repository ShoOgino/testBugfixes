{"path":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacetOverPointFieldWithMinCount0().mjava","commits":[{"id":"0b21c0ef4cefc9a6c012a77388d894c9d2ceda12","date":1501539735,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacetOverPointFieldWithMinCount0().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFacetOverPointFieldWithMinCount0() {\n    String field = \"f_\" + new String[]{\"i\",\"l\",\"f\",\"d\"}[random().nextInt(4)] + \"_p\";\n    final SolrQueryRequest req = req(\"q\", \"id:1.0\", \n        FacetParams.FACET, \"true\", \n        FacetParams.FACET_FIELD, field, \n        FacetParams.FACET_MINCOUNT, \"0\", \n        FacetParams.FACET_METHOD, FacetParams.FACET_METHOD_fc);\n    Exception e = expectThrows(SolrException.class, () -> h.query(req));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ((SolrException)e).code());\n    assertTrue(e.getMessage().contains(\"Cannot use facet.mincount=0 on field \" + field + \" which is Points-based\"));\n\n    String mvField = \"f_\" + new String[]{\"is\",\"ls\",\"fs\",\"ds\"}[random().nextInt(4)] + \"_p\";\n    final SolrQueryRequest req2 = req(\"q\", \"id:1.0\",\n        FacetParams.FACET, \"true\",\n        FacetParams.FACET_FIELD, mvField,\n        FacetParams.FACET_MINCOUNT, \"0\",\n        FacetParams.FACET_METHOD, FacetParams.FACET_METHOD_fc);\n    e = expectThrows(SolrException.class, () -> h.query(req2));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ((SolrException)e).code());\n    assertTrue(e.getMessage().contains(\"Cannot use facet.mincount=0 on field \" + mvField + \" which is Points-based\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29100f1cf3406ddc394298904704d022872303d5","date":1501594929,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacetOverPointFieldWithMinCount0().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testFacetOverPointFieldWithMinCount0() {\n    String field = \"f_\" + new String[]{\"i\",\"l\",\"f\",\"d\"}[random().nextInt(4)] + \"_p\";\n    final SolrQueryRequest req = req(\"q\", \"id:1.0\", \n        FacetParams.FACET, \"true\", \n        FacetParams.FACET_FIELD, field, \n        FacetParams.FACET_MINCOUNT, \"0\", \n        FacetParams.FACET_METHOD, FacetParams.FACET_METHOD_fc);\n    Exception e = expectThrows(SolrException.class, () -> h.query(req));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ((SolrException)e).code());\n    assertTrue(e.getMessage().contains(\"Cannot use facet.mincount=0 on field \" + field + \" which is Points-based\"));\n\n    String mvField = \"f_\" + new String[]{\"is\",\"ls\",\"fs\",\"ds\"}[random().nextInt(4)] + \"_p\";\n    final SolrQueryRequest req2 = req(\"q\", \"id:1.0\",\n        FacetParams.FACET, \"true\",\n        FacetParams.FACET_FIELD, mvField,\n        FacetParams.FACET_MINCOUNT, \"0\",\n        FacetParams.FACET_METHOD, FacetParams.FACET_METHOD_fc);\n    e = expectThrows(SolrException.class, () -> h.query(req2));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ((SolrException)e).code());\n    assertTrue(e.getMessage().contains(\"Cannot use facet.mincount=0 on field \" + mvField + \" which is Points-based\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebff2e24a6d2f84582ff6315d8d377380941b23e","date":1501630388,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacetOverPointFieldWithMinCount0().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFacetOverPointFieldWithMinCount0() {\n    String field = \"f_\" + new String[]{\"i\",\"l\",\"f\",\"d\"}[random().nextInt(4)] + \"_p\";\n    String expectedWarning = \"Raising facet.mincount from 0 to 1, because field \" + field + \" is Points-based.\";\n    SolrQueryRequest req = req(\"q\", \"id:1.0\",\n        FacetParams.FACET, \"true\",\n        FacetParams.FACET_FIELD, field,\n        FacetParams.FACET_MINCOUNT, \"0\");\n    assertQ(req\n        , \"/response/lst[@name='responseHeader']/arr[@name='warnings']/str[.='\" + expectedWarning + \"']\");\n    \n    field = \"f_\" + new String[]{\"is\",\"ls\",\"fs\",\"ds\"}[random().nextInt(4)] + \"_p\";\n    expectedWarning = \"Raising facet.mincount from 0 to 1, because field \" + field + \" is Points-based.\";\n    req = req(\"q\", \"id:1.0\",\n        FacetParams.FACET, \"true\",\n        FacetParams.FACET_FIELD, field,\n        FacetParams.FACET_MINCOUNT, \"0\");\n    assertQ(req\n        , \"/response/lst[@name='responseHeader']/arr[@name='warnings']/str[.='\" + expectedWarning + \"']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testFacetOverPointFieldWithMinCount0().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFacetOverPointFieldWithMinCount0() {\n    String field = \"f_\" + new String[]{\"i\",\"l\",\"f\",\"d\"}[random().nextInt(4)] + \"_p\";\n    String expectedWarning = \"Raising facet.mincount from 0 to 1, because field \" + field + \" is Points-based.\";\n    SolrQueryRequest req = req(\"q\", \"id:1.0\",\n        FacetParams.FACET, \"true\",\n        FacetParams.FACET_FIELD, field,\n        FacetParams.FACET_MINCOUNT, \"0\");\n    assertQ(req\n        , \"/response/lst[@name='responseHeader']/arr[@name='warnings']/str[.='\" + expectedWarning + \"']\");\n    \n    field = \"f_\" + new String[]{\"is\",\"ls\",\"fs\",\"ds\"}[random().nextInt(4)] + \"_p\";\n    expectedWarning = \"Raising facet.mincount from 0 to 1, because field \" + field + \" is Points-based.\";\n    req = req(\"q\", \"id:1.0\",\n        FacetParams.FACET, \"true\",\n        FacetParams.FACET_FIELD, field,\n        FacetParams.FACET_MINCOUNT, \"0\");\n    assertQ(req\n        , \"/response/lst[@name='responseHeader']/arr[@name='warnings']/str[.='\" + expectedWarning + \"']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29100f1cf3406ddc394298904704d022872303d5":["0b21c0ef4cefc9a6c012a77388d894c9d2ceda12"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ebff2e24a6d2f84582ff6315d8d377380941b23e"],"ebff2e24a6d2f84582ff6315d8d377380941b23e":["29100f1cf3406ddc394298904704d022872303d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0b21c0ef4cefc9a6c012a77388d894c9d2ceda12":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ebff2e24a6d2f84582ff6315d8d377380941b23e"]},"commit2Childs":{"29100f1cf3406ddc394298904704d022872303d5":["ebff2e24a6d2f84582ff6315d8d377380941b23e"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"ebff2e24a6d2f84582ff6315d8d377380941b23e":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","0b21c0ef4cefc9a6c012a77388d894c9d2ceda12"],"0b21c0ef4cefc9a6c012a77388d894c9d2ceda12":["29100f1cf3406ddc394298904704d022872303d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}