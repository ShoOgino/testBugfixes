{"path":"src/java/org/apache/lucene/index/TermInfosReader#setIndexDivisor(int).mjava","commits":[{"id":"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa","date":1195161267,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#setIndexDivisor(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>Sets the indexDivisor, which subsamples the number\n   * of indexed terms loaded into memory.  This has a\n   * similar effect as {@link\n   * IndexWriter#setTermIndexInterval} except that setting\n   * must be done at indexing time while this setting can be\n   * set per reader.  When set to N, then one in every\n   * N*termIndexInterval terms in the index is loaded into\n   * memory.  By setting this to a value > 1 you can reduce\n   * memory usage, at the expense of higher latency when\n   * loading a TermInfo.  The default value is 1.</p>\n   *\n   * <b>NOTE:</b> you must call this before the term\n   * index is loaded.  If the index is already loaded,\n   * an IllegalStateException is thrown.\n   *\n   + @throws IllegalStateException if the term index has\n   * already been loaded into memory.\n   */\n  public void setIndexDivisor(int indexDivisor) throws IllegalStateException {\n    if (indexDivisor < 1)\n      throw new IllegalArgumentException(\"indexDivisor must be > 0: got \" + indexDivisor);\n\n    if (indexTerms != null)\n      throw new IllegalStateException(\"index terms are already loaded\");\n\n    this.indexDivisor = indexDivisor;\n    totalIndexInterval = origEnum.indexInterval * indexDivisor;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"961159f13aece73fbb30aea720e77a2237e8bafd","date":1247258916,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#setIndexDivisor(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>Sets the indexDivisor, which subsamples the number\n   * of indexed terms loaded into memory.  This has a\n   * similar effect as {@link\n   * IndexWriter#setTermIndexInterval} except that setting\n   * must be done at indexing time while this setting can be\n   * set per reader.  When set to N, then one in every\n   * N*termIndexInterval terms in the index is loaded into\n   * memory.  By setting this to a value > 1 you can reduce\n   * memory usage, at the expense of higher latency when\n   * loading a TermInfo.  The default value is 1.</p>\n   *\n   * <b>NOTE:</b> you must call this before the term\n   * index is loaded.  If the index is already loaded,\n   * an IllegalStateException is thrown.\n   *\n   + @throws IllegalStateException if the term index has\n   * already been loaded into memory.\n   */\n  public void setIndexDivisor(int indexDivisor) throws IllegalStateException {\n    if (indexDivisor < 1)\n      throw new IllegalArgumentException(\"indexDivisor must be > 0: got \" + indexDivisor);\n\n    if (indexTerms != null)\n      throw new IllegalStateException(\"index terms are already loaded\");\n\n    this.indexDivisor = indexDivisor;\n    totalIndexInterval = origEnum.indexInterval * indexDivisor;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"961159f13aece73fbb30aea720e77a2237e8bafd":["cf2ab57cc5ab974400f01fd95f84903ac6d4abfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["961159f13aece73fbb30aea720e77a2237e8bafd"],"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"961159f13aece73fbb30aea720e77a2237e8bafd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf2ab57cc5ab974400f01fd95f84903ac6d4abfa"],"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa":["961159f13aece73fbb30aea720e77a2237e8bafd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}