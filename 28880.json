{"path":"src/java/org/apache/solr/analysis/EnglishPorterFilterFactory#inform(ResourceLoader).mjava","commits":[{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/EnglishPorterFilterFactory#inform(ResourceLoader).mjava","pathOld":"src/java/org/apache/solr/analysis/EnglishPorterFilterFactory#init(SolrConfig,Map[String,String]).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String wordFile = args.get(\"protected\");\n    if (wordFile != null) {\n      try {\n        List<String> wlist = loader.getLines(wordFile);\n         protectedWords = StopFilter.makeStopSet((String[])wlist.toArray(new String[0]));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(SolrConfig solrConfig, Map<String, String> args) {\n    super.init(solrConfig, args);\n    String wordFile = args.get(\"protected\");\n    if (wordFile != null) {\n      try {\n        List<String> wlist = solrConfig.getLines(wordFile);\n         protectedWords = StopFilter.makeStopSet((String[])wlist.toArray(new String[0]));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe8ae1ed027200f075b0de9f264776fa32c4862f","date":1207066219,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/EnglishPorterFilterFactory#inform(ResourceLoader).mjava","pathOld":"src/java/org/apache/solr/analysis/EnglishPorterFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String wordFile = args.get(PROTECTED_TOKENS);\n    if (wordFile != null) {\n      try {\n        List<String> wlist = loader.getLines(wordFile);\n        //This cast is safe in Lucene\n        protectedWords = new CharArraySet(wlist, false);//No need to go through StopFilter as before, since it just uses a List internally\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String wordFile = args.get(\"protected\");\n    if (wordFile != null) {\n      try {\n        List<String> wlist = loader.getLines(wordFile);\n         protectedWords = StopFilter.makeStopSet((String[])wlist.toArray(new String[0]));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"460ea70a086b1e40166cc236947edc7e52a3ddf9","date":1217405516,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/EnglishPorterFilterFactory#inform(ResourceLoader).mjava","pathOld":"src/java/org/apache/solr/analysis/EnglishPorterFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(PROTECTED_TOKENS);\n    if (wordFiles != null) {\n      try {\n        File protectedWordFiles = new File(wordFiles);\n        if (protectedWordFiles.exists()) {\n          List<String> wlist = loader.getLines(wordFiles);\n          //This cast is safe in Lucene\n          protectedWords = new CharArraySet(wlist, false);//No need to go through StopFilter as before, since it just uses a List internally\n        } else  {\n          List<String> files = StrUtils.splitFileNames(wordFiles);\n          for (String file : files) {\n            List<String> wlist = loader.getLines(file.trim());\n            if (protectedWords == null)\n              protectedWords = new CharArraySet(wlist, false);\n            else\n              protectedWords.addAll(wlist);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String wordFile = args.get(PROTECTED_TOKENS);\n    if (wordFile != null) {\n      try {\n        List<String> wlist = loader.getLines(wordFile);\n        //This cast is safe in Lucene\n        protectedWords = new CharArraySet(wlist, false);//No need to go through StopFilter as before, since it just uses a List internally\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/EnglishPorterFilterFactory#inform(ResourceLoader).mjava","pathOld":"src/java/org/apache/solr/analysis/EnglishPorterFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(PROTECTED_TOKENS);\n    if (wordFiles != null) {\n      try {\n        File protectedWordFiles = new File(wordFiles);\n        if (protectedWordFiles.exists()) {\n          List<String> wlist = loader.getLines(wordFiles);\n          //This cast is safe in Lucene\n          protectedWords = new CharArraySet(wlist, false);//No need to go through StopFilter as before, since it just uses a List internally\n        } else  {\n          List<String> files = StrUtils.splitFileNames(wordFiles);\n          for (String file : files) {\n            List<String> wlist = loader.getLines(file.trim());\n            if (protectedWords == null)\n              protectedWords = new CharArraySet(wlist, false);\n            else\n              protectedWords.addAll(wlist);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(PROTECTED_TOKENS);\n    if (wordFiles != null) {\n      try {\n        File protectedWordFiles = new File(wordFiles);\n        if (protectedWordFiles.exists()) {\n          List<String> wlist = loader.getLines(wordFiles);\n          //This cast is safe in Lucene\n          protectedWords = new CharArraySet(wlist, false);//No need to go through StopFilter as before, since it just uses a List internally\n        } else  {\n          List<String> files = StrUtils.splitFileNames(wordFiles);\n          for (String file : files) {\n            List<String> wlist = loader.getLines(file.trim());\n            if (protectedWords == null)\n              protectedWords = new CharArraySet(wlist, false);\n            else\n              protectedWords.addAll(wlist);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe8ae1ed027200f075b0de9f264776fa32c4862f":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"460ea70a086b1e40166cc236947edc7e52a3ddf9":["fe8ae1ed027200f075b0de9f264776fa32c4862f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["460ea70a086b1e40166cc236947edc7e52a3ddf9"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fe8ae1ed027200f075b0de9f264776fa32c4862f":["460ea70a086b1e40166cc236947edc7e52a3ddf9"],"460ea70a086b1e40166cc236947edc7e52a3ddf9":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["fe8ae1ed027200f075b0de9f264776fa32c4862f"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}