{"path":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusAliasTest().mjava","commits":[{"id":"78ae724e55b07e7d158110151c0a7247cd54b460","date":1396011287,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusAliasTest().mjava","pathOld":"/dev/null","sourceNew":"  private void clusterStatusAliasTest() throws Exception  {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusAliasTest().mjava","pathOld":"/dev/null","sourceNew":"  private void clusterStatusAliasTest() throws Exception  {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2434ed0b85e169536d867d4445ae92599339bdad","date":1403868554,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusAliasTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusAliasTest().mjava","sourceNew":"  private void clusterStatusAliasTest() throws Exception  {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  private void clusterStatusAliasTest() throws Exception  {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusAliasTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusAliasTest().mjava","sourceNew":"  private void clusterStatusAliasTest() throws Exception  {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  private void clusterStatusAliasTest() throws Exception  {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusAliasTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusAliasTest().mjava","sourceNew":"  private void clusterStatusAliasTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusAliasTest() throws Exception  {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f900ef89aa1e7b79fbc0a8a4a81937ca271b962a","date":1428989112,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusAliasTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusAliasTest().mjava","sourceNew":"  private void clusterStatusAliasTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusAliasTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusAliasTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusAliasTest().mjava","sourceNew":"  private void clusterStatusAliasTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusAliasTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusAliasTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusAliasTest().mjava","sourceNew":"  private void clusterStatusAliasTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusAliasTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","78ae724e55b07e7d158110151c0a7247cd54b460"],"b94236357aaa22b76c10629851fe4e376e0cea82":["f900ef89aa1e7b79fbc0a8a4a81937ca271b962a","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["f900ef89aa1e7b79fbc0a8a4a81937ca271b962a"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["2434ed0b85e169536d867d4445ae92599339bdad"],"2434ed0b85e169536d867d4445ae92599339bdad":["78ae724e55b07e7d158110151c0a7247cd54b460"],"78ae724e55b07e7d158110151c0a7247cd54b460":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f900ef89aa1e7b79fbc0a8a4a81937ca271b962a":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","78ae724e55b07e7d158110151c0a7247cd54b460"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["f900ef89aa1e7b79fbc0a8a4a81937ca271b962a"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"2434ed0b85e169536d867d4445ae92599339bdad":["bafca15d8e408346a67f4282ad1143b88023893b"],"78ae724e55b07e7d158110151c0a7247cd54b460":["5eb2511ababf862ea11e10761c70ee560cd84510","2434ed0b85e169536d867d4445ae92599339bdad"],"f900ef89aa1e7b79fbc0a8a4a81937ca271b962a":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}