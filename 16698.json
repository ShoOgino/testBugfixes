{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#get(long).mjava","commits":[{"id":"37b84753dc1f66eba4973779932885fe42cde001","date":1358812051,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#get(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Get value at <code>index</code>. */\n  public long get(long index) {\n    assert index >= 0 && index < valueCount;\n    final int block = (int) (index >>> blockShift);\n    if (subReaders[block] == null) {\n      return minValues == null ? 0 : minValues[block];\n    }\n    final int idx = (int) (index & blockMask);\n    return (minValues == null ? 0 : minValues[block]) + subReaders[block].get(idx);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e76d3450662dab47d54e3f462c7b3eba4e38b9ac","date":1358866496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#get(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#get(long).mjava","sourceNew":"  /** Get value at <code>index</code>. */\n  public long get(long index) {\n    assert index >= 0 && index < valueCount;\n    final int block = (int) (index >>> blockShift);\n    final int idx = (int) (index & blockMask);\n    return (minValues == null ? 0 : minValues[block]) + subReaders[block].get(idx);\n  }\n\n","sourceOld":"  /** Get value at <code>index</code>. */\n  public long get(long index) {\n    assert index >= 0 && index < valueCount;\n    final int block = (int) (index >>> blockShift);\n    if (subReaders[block] == null) {\n      return minValues == null ? 0 : minValues[block];\n    }\n    final int idx = (int) (index & blockMask);\n    return (minValues == null ? 0 : minValues[block]) + subReaders[block].get(idx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#get(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Get value at <code>index</code>. */\n  public long get(long index) {\n    assert index >= 0 && index < valueCount;\n    final int block = (int) (index >>> blockShift);\n    final int idx = (int) (index & blockMask);\n    return (minValues == null ? 0 : minValues[block]) + subReaders[block].get(idx);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d50d971859a3c7841c17117b0aac14e733441ebf","date":1384264257,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#get(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#get(long).mjava","sourceNew":"  @Override\n  public long get(long index) {\n    assert index >= 0 && index < valueCount;\n    final int block = (int) (index >>> blockShift);\n    final int idx = (int) (index & blockMask);\n    return (minValues == null ? 0 : minValues[block]) + subReaders[block].get(idx);\n  }\n\n","sourceOld":"  /** Get value at <code>index</code>. */\n  public long get(long index) {\n    assert index >= 0 && index < valueCount;\n    final int block = (int) (index >>> blockShift);\n    final int idx = (int) (index & blockMask);\n    return (minValues == null ? 0 : minValues[block]) + subReaders[block].get(idx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d50d971859a3c7841c17117b0aac14e733441ebf":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["37b84753dc1f66eba4973779932885fe42cde001"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37b84753dc1f66eba4973779932885fe42cde001":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d50d971859a3c7841c17117b0aac14e733441ebf"]},"commit2Childs":{"d50d971859a3c7841c17117b0aac14e733441ebf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["d50d971859a3c7841c17117b0aac14e733441ebf"],"37b84753dc1f66eba4973779932885fe42cde001":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","37b84753dc1f66eba4973779932885fe42cde001"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}