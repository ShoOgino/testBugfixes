{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#writeSparseMissingBitset(Iterable[Number],NumberType,long).mjava","commits":[{"id":"da47a1f45f2abb37566ea2df3253436a04f5e6fe","date":1446815076,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#writeSparseMissingBitset(Iterable[Number],NumberType,long).mjava","pathOld":"/dev/null","sourceNew":"  long writeSparseMissingBitset(Iterable<Number> values, NumberType numberType, long numDocsWithValue) throws IOException {\n    meta.writeVLong(numDocsWithValue);\n\n    // Write doc IDs that have a value\n    meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n    final DirectMonotonicWriter docIdsWriter = DirectMonotonicWriter.getInstance(meta, data, numDocsWithValue, DIRECT_MONOTONIC_BLOCK_SHIFT);\n    long docID = 0;\n    for (Number nv : values) {\n      switch (numberType) {\n        case VALUE:\n          if (nv != null) {\n            docIdsWriter.add(docID);\n          }\n          break;\n        case ORDINAL:\n          if (nv.longValue() != -1L) {\n            docIdsWriter.add(docID);\n          }\n          break;\n        default:\n          throw new AssertionError();\n      }\n      docID++;\n    }\n    docIdsWriter.finish();\n    return docID;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#writeSparseMissingBitset(Iterable[Number],NumberType,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#writeSparseMissingBitset(Iterable[Number],NumberType,long).mjava","sourceNew":"  long writeSparseMissingBitset(Iterable<Number> values, NumberType numberType, long numDocsWithValue) throws IOException {\n    meta.writeVLong(numDocsWithValue);\n\n    // Write doc IDs that have a value\n    meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n    final DirectMonotonicWriter docIdsWriter = DirectMonotonicWriter.getInstance(meta, data, numDocsWithValue, DIRECT_MONOTONIC_BLOCK_SHIFT);\n    long docID = 0;\n    for (Number nv : values) {\n      switch (numberType) {\n        case VALUE:\n          if (nv != null) {\n            docIdsWriter.add(docID);\n          }\n          break;\n        case ORDINAL:\n          if (nv.longValue() != -1L) {\n            docIdsWriter.add(docID);\n          }\n          break;\n        default:\n          throw new AssertionError();\n      }\n      docID++;\n    }\n    docIdsWriter.finish();\n    return docID;\n  }\n\n","sourceOld":"  long writeSparseMissingBitset(Iterable<Number> values, NumberType numberType, long numDocsWithValue) throws IOException {\n    meta.writeVLong(numDocsWithValue);\n\n    // Write doc IDs that have a value\n    meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n    final DirectMonotonicWriter docIdsWriter = DirectMonotonicWriter.getInstance(meta, data, numDocsWithValue, DIRECT_MONOTONIC_BLOCK_SHIFT);\n    long docID = 0;\n    for (Number nv : values) {\n      switch (numberType) {\n        case VALUE:\n          if (nv != null) {\n            docIdsWriter.add(docID);\n          }\n          break;\n        case ORDINAL:\n          if (nv.longValue() != -1L) {\n            docIdsWriter.add(docID);\n          }\n          break;\n        default:\n          throw new AssertionError();\n      }\n      docID++;\n    }\n    docIdsWriter.finish();\n    return docID;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#writeSparseMissingBitset(Iterable[Number],NumberType,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#writeSparseMissingBitset(Iterable[Number],NumberType,long).mjava","sourceNew":"  long writeSparseMissingBitset(Iterable<Number> values, NumberType numberType, long numDocsWithValue) throws IOException {\n    meta.writeVLong(numDocsWithValue);\n\n    // Write doc IDs that have a value\n    meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n    final DirectMonotonicWriter docIdsWriter = DirectMonotonicWriter.getInstance(meta, data, numDocsWithValue, DIRECT_MONOTONIC_BLOCK_SHIFT);\n    long docID = 0;\n    for (Number nv : values) {\n      switch (numberType) {\n        case VALUE:\n          if (nv != null) {\n            docIdsWriter.add(docID);\n          }\n          break;\n        case ORDINAL:\n          if (nv.longValue() != -1L) {\n            docIdsWriter.add(docID);\n          }\n          break;\n        default:\n          throw new AssertionError();\n      }\n      docID++;\n    }\n    docIdsWriter.finish();\n    return docID;\n  }\n\n","sourceOld":"  long writeSparseMissingBitset(Iterable<Number> values, NumberType numberType, long numDocsWithValue) throws IOException {\n    meta.writeVLong(numDocsWithValue);\n\n    // Write doc IDs that have a value\n    meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n    final DirectMonotonicWriter docIdsWriter = DirectMonotonicWriter.getInstance(meta, data, numDocsWithValue, DIRECT_MONOTONIC_BLOCK_SHIFT);\n    long docID = 0;\n    for (Number nv : values) {\n      switch (numberType) {\n        case VALUE:\n          if (nv != null) {\n            docIdsWriter.add(docID);\n          }\n          break;\n        case ORDINAL:\n          if (nv.longValue() != -1L) {\n            docIdsWriter.add(docID);\n          }\n          break;\n        default:\n          throw new AssertionError();\n      }\n      docID++;\n    }\n    docIdsWriter.finish();\n    return docID;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["da47a1f45f2abb37566ea2df3253436a04f5e6fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"da47a1f45f2abb37566ea2df3253436a04f5e6fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["da47a1f45f2abb37566ea2df3253436a04f5e6fe","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da47a1f45f2abb37566ea2df3253436a04f5e6fe"],"da47a1f45f2abb37566ea2df3253436a04f5e6fe":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}