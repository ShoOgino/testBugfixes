{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST.Arc#copyFrom(Arc[T]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST.Arc#copyFrom(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST.Arc#copyFrom(Arc[T]).mjava","sourceNew":"    /** Returns this */\n    public Arc<T> copyFrom(Arc<T> other) {\n      node = other.node;\n      label = other.label;\n      target = other.target;\n      flags = other.flags;\n      output = other.output;\n      nextFinalOutput = other.nextFinalOutput;\n      nextArc = other.nextArc;\n      bytesPerArc = other.bytesPerArc;\n      if (bytesPerArc != 0) {\n        posArcsStart = other.posArcsStart;\n        arcIdx = other.arcIdx;\n        numArcs = other.numArcs;\n      }\n      return this;\n    }\n\n","sourceOld":"    /** Returns this */\n    public Arc<T> copyFrom(Arc<T> other) {\n      node = other.node;\n      label = other.label;\n      target = other.target;\n      flags = other.flags;\n      output = other.output;\n      nextFinalOutput = other.nextFinalOutput;\n      nextArc = other.nextArc;\n      bytesPerArc = other.bytesPerArc;\n      if (bytesPerArc != 0) {\n        posArcsStart = other.posArcsStart;\n        arcIdx = other.arcIdx;\n        numArcs = other.numArcs;\n      }\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cbc4730743fac2e69e7d622848778d3ad9f2151","date":1502282443,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST.Arc#copyFrom(Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST.Arc#copyFrom(Arc[T]).mjava","sourceNew":"    /** Returns this */\n    public Arc<T> copyFrom(Arc<T> other) {\n      label = other.label;\n      target = other.target;\n      flags = other.flags;\n      output = other.output;\n      nextFinalOutput = other.nextFinalOutput;\n      nextArc = other.nextArc;\n      bytesPerArc = other.bytesPerArc;\n      if (bytesPerArc != 0) {\n        posArcsStart = other.posArcsStart;\n        arcIdx = other.arcIdx;\n        numArcs = other.numArcs;\n      }\n      return this;\n    }\n\n","sourceOld":"    /** Returns this */\n    public Arc<T> copyFrom(Arc<T> other) {\n      node = other.node;\n      label = other.label;\n      target = other.target;\n      flags = other.flags;\n      output = other.output;\n      nextFinalOutput = other.nextFinalOutput;\n      nextArc = other.nextArc;\n      bytesPerArc = other.bytesPerArc;\n      if (bytesPerArc != 0) {\n        posArcsStart = other.posArcsStart;\n        arcIdx = other.arcIdx;\n        numArcs = other.numArcs;\n      }\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST.Arc#copyFrom(Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST.Arc#copyFrom(Arc[T]).mjava","sourceNew":"    /** Returns this */\n    public Arc<T> copyFrom(Arc<T> other) {\n      label = other.label;\n      target = other.target;\n      flags = other.flags;\n      output = other.output;\n      nextFinalOutput = other.nextFinalOutput;\n      nextArc = other.nextArc;\n      bytesPerArc = other.bytesPerArc;\n      if (bytesPerArc != 0) {\n        posArcsStart = other.posArcsStart;\n        arcIdx = other.arcIdx;\n        numArcs = other.numArcs;\n      }\n      return this;\n    }\n\n","sourceOld":"    /** Returns this */\n    public Arc<T> copyFrom(Arc<T> other) {\n      node = other.node;\n      label = other.label;\n      target = other.target;\n      flags = other.flags;\n      output = other.output;\n      nextFinalOutput = other.nextFinalOutput;\n      nextArc = other.nextArc;\n      bytesPerArc = other.bytesPerArc;\n      if (bytesPerArc != 0) {\n        posArcsStart = other.posArcsStart;\n        arcIdx = other.arcIdx;\n        numArcs = other.numArcs;\n      }\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST.Arc#copyFrom(Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST.Arc#copyFrom(Arc[T]).mjava","sourceNew":"    /** Returns this */\n    public Arc<T> copyFrom(Arc<T> other) {\n      label = other.label;\n      target = other.target;\n      flags = other.flags;\n      output = other.output;\n      nextFinalOutput = other.nextFinalOutput;\n      nextArc = other.nextArc;\n      bytesPerArc = other.bytesPerArc;\n      if (bytesPerArc != 0) {\n        posArcsStart = other.posArcsStart;\n        arcIdx = other.arcIdx;\n        numArcs = other.numArcs;\n      }\n      return this;\n    }\n\n","sourceOld":"    /** Returns this */\n    public Arc<T> copyFrom(Arc<T> other) {\n      node = other.node;\n      label = other.label;\n      target = other.target;\n      flags = other.flags;\n      output = other.output;\n      nextFinalOutput = other.nextFinalOutput;\n      nextArc = other.nextArc;\n      bytesPerArc = other.bytesPerArc;\n      if (bytesPerArc != 0) {\n        posArcsStart = other.posArcsStart;\n        arcIdx = other.arcIdx;\n        numArcs = other.numArcs;\n      }\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST.Arc#copyFrom(Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST.Arc#copyFrom(Arc[T]).mjava","sourceNew":"    /** Returns this */\n    public Arc<T> copyFrom(Arc<T> other) {\n      label = other.label();\n      target = other.target();\n      flags = other.flags();\n      output = other.output();\n      nextFinalOutput = other.nextFinalOutput();\n      nextArc = other.nextArc();\n      bytesPerArc = other.bytesPerArc();\n      if (bytesPerArc() != 0) {\n        posArcsStart = other.posArcsStart();\n        arcIdx = other.arcIdx();\n        numArcs = other.numArcs();\n      }\n      return this;\n    }\n\n","sourceOld":"    /** Returns this */\n    public Arc<T> copyFrom(Arc<T> other) {\n      label = other.label;\n      target = other.target;\n      flags = other.flags;\n      output = other.output;\n      nextFinalOutput = other.nextFinalOutput;\n      nextArc = other.nextArc;\n      bytesPerArc = other.bytesPerArc;\n      if (bytesPerArc != 0) {\n        posArcsStart = other.posArcsStart;\n        arcIdx = other.arcIdx;\n        numArcs = other.numArcs;\n      }\n      return this;\n    }\n\n","bugFix":null,"bugIntro":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST.Arc#copyFrom(Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST.Arc#copyFrom(Arc[T]).mjava","sourceNew":"    /** Returns this */\n    public Arc<T> copyFrom(Arc<T> other) {\n      label = other.label();\n      target = other.target();\n      flags = other.flags();\n      output = other.output();\n      nextFinalOutput = other.nextFinalOutput();\n      nextArc = other.nextArc();\n      bytesPerArc = other.bytesPerArc();\n      if (bytesPerArc() != 0) {\n        posArcsStart = other.posArcsStart();\n        arcIdx = other.arcIdx();\n        numArcs = other.numArcs();\n      }\n      return this;\n    }\n\n","sourceOld":"    /** Returns this */\n    public Arc<T> copyFrom(Arc<T> other) {\n      label = other.label;\n      target = other.target;\n      flags = other.flags;\n      output = other.output;\n      nextFinalOutput = other.nextFinalOutput;\n      nextArc = other.nextArc;\n      bytesPerArc = other.bytesPerArc;\n      if (bytesPerArc != 0) {\n        posArcsStart = other.posArcsStart;\n        arcIdx = other.arcIdx;\n        numArcs = other.numArcs;\n      }\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST.Arc#copyFrom(Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST.Arc#copyFrom(Arc[T]).mjava","sourceNew":"    /** Returns this */\n    public Arc<T> copyFrom(Arc<T> other) {\n      label = other.label();\n      target = other.target();\n      flags = other.flags();\n      output = other.output();\n      nextFinalOutput = other.nextFinalOutput();\n      nextArc = other.nextArc();\n      nodeFlags = other.nodeFlags();\n      bytesPerArc = other.bytesPerArc();\n      if (bytesPerArc() != 0) {\n        posArcsStart = other.posArcsStart();\n        arcIdx = other.arcIdx();\n        numArcs = other.numArcs();\n        if (nodeFlags() == ARCS_FOR_DIRECT_ADDRESSING) {\n          bitTable = other.bitTable() == null ? null : other.bitTable().copy();\n          firstLabel = other.firstLabel();\n        }\n      }\n      return this;\n    }\n\n","sourceOld":"    /** Returns this */\n    public Arc<T> copyFrom(Arc<T> other) {\n      label = other.label();\n      target = other.target();\n      flags = other.flags();\n      output = other.output();\n      nextFinalOutput = other.nextFinalOutput();\n      nextArc = other.nextArc();\n      bytesPerArc = other.bytesPerArc();\n      if (bytesPerArc() != 0) {\n        posArcsStart = other.posArcsStart();\n        arcIdx = other.arcIdx();\n        numArcs = other.numArcs();\n      }\n      return this;\n    }\n\n","bugFix":null,"bugIntro":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06086b5bd0f0d57858f0675becc58edf1f6b7c11","date":1586421397,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST.Arc#copyFrom(Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST.Arc#copyFrom(Arc[T]).mjava","sourceNew":"    /** Returns this */\n    public Arc<T> copyFrom(Arc<T> other) {\n      label = other.label();\n      target = other.target();\n      flags = other.flags();\n      output = other.output();\n      nextFinalOutput = other.nextFinalOutput();\n      nextArc = other.nextArc();\n      nodeFlags = other.nodeFlags();\n      bytesPerArc = other.bytesPerArc();\n\n      // Fields for arcs belonging to a node with fixed length arcs.\n      // We could avoid copying them if bytesPerArc() == 0 (this was the case with previous code, and the current code\n      // still supports that), but it may actually help external uses of FST to have consistent arc state, and debugging\n      // is easier.\n      posArcsStart = other.posArcsStart();\n      arcIdx = other.arcIdx();\n      numArcs = other.numArcs();\n      bitTableStart = other.bitTableStart;\n      firstLabel = other.firstLabel();\n      presenceIndex = other.presenceIndex;\n\n      return this;\n    }\n\n","sourceOld":"    /** Returns this */\n    public Arc<T> copyFrom(Arc<T> other) {\n      label = other.label();\n      target = other.target();\n      flags = other.flags();\n      output = other.output();\n      nextFinalOutput = other.nextFinalOutput();\n      nextArc = other.nextArc();\n      nodeFlags = other.nodeFlags();\n      bytesPerArc = other.bytesPerArc();\n      if (bytesPerArc() != 0) {\n        posArcsStart = other.posArcsStart();\n        arcIdx = other.arcIdx();\n        numArcs = other.numArcs();\n        if (nodeFlags() == ARCS_FOR_DIRECT_ADDRESSING) {\n          bitTable = other.bitTable() == null ? null : other.bitTable().copy();\n          firstLabel = other.firstLabel();\n        }\n      }\n      return this;\n    }\n\n","bugFix":["56da903869515527852ee21ea7ef7bfe414cd40d","71d31a7d5773508492505519bb5230b87c8937ad","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["9cbc4730743fac2e69e7d622848778d3ad9f2151"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9cbc4730743fac2e69e7d622848778d3ad9f2151"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["71d31a7d5773508492505519bb5230b87c8937ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9cbc4730743fac2e69e7d622848778d3ad9f2151":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9cbc4730743fac2e69e7d622848778d3ad9f2151"],"71d31a7d5773508492505519bb5230b87c8937ad":["54204c8a3ca26aeafd273139fc29baf70d0f6786"],"f8061ddd97f3352007d927dae445884a6f3d857b":["9cbc4730743fac2e69e7d622848778d3ad9f2151","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["71d31a7d5773508492505519bb5230b87c8937ad","f8061ddd97f3352007d927dae445884a6f3d857b"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["58884af1f68e9d61c217c753fbd6266d86a63b14","9cbc4730743fac2e69e7d622848778d3ad9f2151","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9cbc4730743fac2e69e7d622848778d3ad9f2151":["54204c8a3ca26aeafd273139fc29baf70d0f6786","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","f8061ddd97f3352007d927dae445884a6f3d857b"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"71d31a7d5773508492505519bb5230b87c8937ad":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}