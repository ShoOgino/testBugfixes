{"path":"solr/core/src/java/org/apache/solr/util/DOMUtil#substituteProperties(Node,Properties).mjava","commits":[{"id":"e6a2315ba749856e5787b2ad962fa124bc3ed121","date":1334194349,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DOMUtil#substituteProperties(Node,Properties).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#substituteProperties(Node,Properties).mjava","sourceNew":"  /**\n   * Replaces ${property[:default value]} references in all attributes\n   * and text nodes of supplied node.  If the property is not defined neither in the\n   * given Properties instance nor in System.getProperty and no\n   * default value is provided, a runtime exception is thrown.\n   *\n   * @param node DOM node to walk for substitutions\n   * @param properties the Properties instance from which a value can be looked up\n   */\n  public static void substituteProperties(Node node, Properties properties) {\n    // loop through child nodes\n    Node child;\n    Node next = node.getFirstChild();\n    while ((child = next) != null) {\n\n      // set next before we change anything\n      next = child.getNextSibling();\n\n      // handle child by node type\n      if (child.getNodeType() == Node.TEXT_NODE) {\n        child.setNodeValue(substituteProperty(child.getNodeValue(), properties));\n      } else if (child.getNodeType() == Node.ELEMENT_NODE) {\n        // handle child elements with recursive call\n        NamedNodeMap attributes = child.getAttributes();\n        for (int i = 0; i < attributes.getLength(); i++) {\n          Node attribute = attributes.item(i);\n          attribute.setNodeValue(substituteProperty(attribute.getNodeValue(), properties));\n        }\n        substituteProperties(child, properties);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Replaces ${property[:default value]} references in all attributes\n   * and text nodes of supplied node.  If the property is not defined neither in the\n   * given Properties instance nor in System.getProperty and no\n   * default value is provided, a runtime exception is thrown.\n   *\n   * @param node DOM node to walk for substitutions\n   * @param properties the Properties instance from which a value can be looked up\n   */\n  public static void substituteProperties(Node node, Properties properties) {\n    // loop through child nodes\n    Node child;\n    Node next = node.getFirstChild();\n    while ((child = next) != null) {\n\n      // set next before we change anything\n      next = child.getNextSibling();\n\n      // handle child by node type\n      if (child.getNodeType() == Node.TEXT_NODE) {\n        child.setNodeValue(substituteProperty(child.getNodeValue(), properties));\n      } else if (child.getNodeType() == Node.ELEMENT_NODE) {\n        // handle child elements with recursive call\n        NamedNodeMap attributes = child.getAttributes();\n        for (int i = 0; i < attributes.getLength(); i++) {\n          Node attribute = attributes.item(i);\n          attribute.setNodeValue(substituteProperty(attribute.getNodeValue(), properties));\n        }\n        substituteProperties(child, properties);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DOMUtil#substituteProperties(Node,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DOMUtil#substituteProperties(Node,Properties).mjava","sourceNew":"  /**\n   * Replaces ${property[:default value]} references in all attributes\n   * and text nodes of supplied node.  If the property is not defined neither in the\n   * given Properties instance nor in System.getProperty and no\n   * default value is provided, a runtime exception is thrown.\n   *\n   * @param node DOM node to walk for substitutions\n   * @param properties the Properties instance from which a value can be looked up\n   */\n  public static void substituteProperties(Node node, Properties properties) {\n    // loop through child nodes\n    Node child;\n    Node next = node.getFirstChild();\n    while ((child = next) != null) {\n\n      // set next before we change anything\n      next = child.getNextSibling();\n\n      // handle child by node type\n      if (child.getNodeType() == Node.TEXT_NODE) {\n        child.setNodeValue(PropertiesUtil.substituteProperty(child.getNodeValue(), properties));\n      } else if (child.getNodeType() == Node.ELEMENT_NODE) {\n        // handle child elements with recursive call\n        NamedNodeMap attributes = child.getAttributes();\n        for (int i = 0; i < attributes.getLength(); i++) {\n          Node attribute = attributes.item(i);\n          attribute.setNodeValue(PropertiesUtil.substituteProperty(attribute.getNodeValue(), properties));\n        }\n        substituteProperties(child, properties);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Replaces ${property[:default value]} references in all attributes\n   * and text nodes of supplied node.  If the property is not defined neither in the\n   * given Properties instance nor in System.getProperty and no\n   * default value is provided, a runtime exception is thrown.\n   *\n   * @param node DOM node to walk for substitutions\n   * @param properties the Properties instance from which a value can be looked up\n   */\n  public static void substituteProperties(Node node, Properties properties) {\n    // loop through child nodes\n    Node child;\n    Node next = node.getFirstChild();\n    while ((child = next) != null) {\n\n      // set next before we change anything\n      next = child.getNextSibling();\n\n      // handle child by node type\n      if (child.getNodeType() == Node.TEXT_NODE) {\n        child.setNodeValue(substituteProperty(child.getNodeValue(), properties));\n      } else if (child.getNodeType() == Node.ELEMENT_NODE) {\n        // handle child elements with recursive call\n        NamedNodeMap attributes = child.getAttributes();\n        for (int i = 0; i < attributes.getLength(); i++) {\n          Node attribute = attributes.item(i);\n          attribute.setNodeValue(substituteProperty(attribute.getNodeValue(), properties));\n        }\n        substituteProperties(child, properties);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23a18981fcc2648fd6e83e9e84e8fa023eb0484b","date":1602334330,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#substituteProperties(Node,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DOMUtil#substituteProperties(Node,Properties).mjava","sourceNew":"  /**\n   * Replaces ${property[:default value]} references in all attributes\n   * and text nodes of supplied node.  If the property is not defined neither in the\n   * given Properties instance nor in System.getProperty and no\n   * default value is provided, a runtime exception is thrown.\n   *\n   * @param node DOM node to walk for substitutions\n   * @param properties the Properties instance from which a value can be looked up\n   */\n  public static void substituteProperties(Node node, Properties properties) {\n    // loop through child nodes\n    Node child;\n    Node next = node.getFirstChild();\n    while ((child = next) != null) {\n\n      // set next before we change anything\n      next = child.getNextSibling();\n\n      // handle child by node type\n      if (child.getNodeType() == Node.TEXT_NODE) {\n        child.setNodeValue(PropertiesUtil.substituteProperty(child.getNodeValue(), properties));\n      } else if (child.getNodeType() == Node.ELEMENT_NODE) {\n        // handle child elements with recursive call\n        NamedNodeMap attributes = child.getAttributes();\n        for (int i = 0; i < attributes.getLength(); i++) {\n          Node attribute = attributes.item(i);\n          attribute.setNodeValue(PropertiesUtil.substituteProperty(attribute.getNodeValue(), properties));\n        }\n        substituteProperties(child, properties);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Replaces ${property[:default value]} references in all attributes\n   * and text nodes of supplied node.  If the property is not defined neither in the\n   * given Properties instance nor in System.getProperty and no\n   * default value is provided, a runtime exception is thrown.\n   *\n   * @param node DOM node to walk for substitutions\n   * @param properties the Properties instance from which a value can be looked up\n   */\n  public static void substituteProperties(Node node, Properties properties) {\n    // loop through child nodes\n    Node child;\n    Node next = node.getFirstChild();\n    while ((child = next) != null) {\n\n      // set next before we change anything\n      next = child.getNextSibling();\n\n      // handle child by node type\n      if (child.getNodeType() == Node.TEXT_NODE) {\n        child.setNodeValue(PropertiesUtil.substituteProperty(child.getNodeValue(), properties));\n      } else if (child.getNodeType() == Node.ELEMENT_NODE) {\n        // handle child elements with recursive call\n        NamedNodeMap attributes = child.getAttributes();\n        for (int i = 0; i < attributes.getLength(); i++) {\n          Node attribute = attributes.item(i);\n          attribute.setNodeValue(PropertiesUtil.substituteProperty(attribute.getNodeValue(), properties));\n        }\n        substituteProperties(child, properties);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23a18981fcc2648fd6e83e9e84e8fa023eb0484b":["a837c064b67fa63a9394136e31218b908cdcf783"],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a837c064b67fa63a9394136e31218b908cdcf783":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23a18981fcc2648fd6e83e9e84e8fa023eb0484b"]},"commit2Childs":{"23a18981fcc2648fd6e83e9e84e8fa023eb0484b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["a837c064b67fa63a9394136e31218b908cdcf783"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"a837c064b67fa63a9394136e31218b908cdcf783":["23a18981fcc2648fd6e83e9e84e8fa023eb0484b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}