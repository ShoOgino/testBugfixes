{"path":"src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","commits":[{"id":"bad80f233c792910046d4541105f48b3fc1cfb0e","date":1116898513,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    final SpanNearQuery spanNearQuery = (SpanNearQuery) o;\n\n    if (inOrder != spanNearQuery.inOrder) return false;\n    if (slop != spanNearQuery.slop) return false;\n    if (!clauses.equals(spanNearQuery.clauses)) return false;\n    if (!field.equals(spanNearQuery.field)) return false;\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df8dadf22de84eeb1294e70792e292ecf8ded564","date":1130577981,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    final SpanNearQuery spanNearQuery = (SpanNearQuery) o;\n\n    if (inOrder != spanNearQuery.inOrder) return false;\n    if (slop != spanNearQuery.slop) return false;\n    if (!clauses.equals(spanNearQuery.clauses)) return false;\n    if (!field.equals(spanNearQuery.field)) return false;\n\n    return getBoost() == spanNearQuery.getBoost();\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    final SpanNearQuery spanNearQuery = (SpanNearQuery) o;\n\n    if (inOrder != spanNearQuery.inOrder) return false;\n    if (slop != spanNearQuery.slop) return false;\n    if (!clauses.equals(spanNearQuery.clauses)) return false;\n    if (!field.equals(spanNearQuery.field)) return false;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37727c003d0055afbc22d49ba0434cc4028166db","date":1135617136,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SpanNearQuery)) return false;\n\n    final SpanNearQuery spanNearQuery = (SpanNearQuery) o;\n\n    if (inOrder != spanNearQuery.inOrder) return false;\n    if (slop != spanNearQuery.slop) return false;\n    if (!clauses.equals(spanNearQuery.clauses)) return false;\n\n    return getBoost() == spanNearQuery.getBoost();\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    final SpanNearQuery spanNearQuery = (SpanNearQuery) o;\n\n    if (inOrder != spanNearQuery.inOrder) return false;\n    if (slop != spanNearQuery.slop) return false;\n    if (!clauses.equals(spanNearQuery.clauses)) return false;\n    if (!field.equals(spanNearQuery.field)) return false;\n\n    return getBoost() == spanNearQuery.getBoost();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SpanNearQuery)) return false;\n\n    final SpanNearQuery spanNearQuery = (SpanNearQuery) o;\n\n    if (inOrder != spanNearQuery.inOrder) return false;\n    if (slop != spanNearQuery.slop) return false;\n    if (!clauses.equals(spanNearQuery.clauses)) return false;\n\n    return getBoost() == spanNearQuery.getBoost();\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SpanNearQuery)) return false;\n\n    final SpanNearQuery spanNearQuery = (SpanNearQuery) o;\n\n    if (inOrder != spanNearQuery.inOrder) return false;\n    if (slop != spanNearQuery.slop) return false;\n    if (!clauses.equals(spanNearQuery.clauses)) return false;\n\n    return getBoost() == spanNearQuery.getBoost();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#equals(Object).mjava","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SpanNearQuery)) return false;\n\n    final SpanNearQuery spanNearQuery = (SpanNearQuery) o;\n\n    if (inOrder != spanNearQuery.inOrder) return false;\n    if (slop != spanNearQuery.slop) return false;\n    if (!clauses.equals(spanNearQuery.clauses)) return false;\n\n    return getBoost() == spanNearQuery.getBoost();\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SpanNearQuery)) return false;\n\n    final SpanNearQuery spanNearQuery = (SpanNearQuery) o;\n\n    if (inOrder != spanNearQuery.inOrder) return false;\n    if (slop != spanNearQuery.slop) return false;\n    if (!clauses.equals(spanNearQuery.clauses)) return false;\n\n    return getBoost() == spanNearQuery.getBoost();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df8dadf22de84eeb1294e70792e292ecf8ded564":["bad80f233c792910046d4541105f48b3fc1cfb0e"],"8a9e385641d717e641408d8fbbc62be8fc766357":["37727c003d0055afbc22d49ba0434cc4028166db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37727c003d0055afbc22d49ba0434cc4028166db":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"bad80f233c792910046d4541105f48b3fc1cfb0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"df8dadf22de84eeb1294e70792e292ecf8ded564":["37727c003d0055afbc22d49ba0434cc4028166db"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bad80f233c792910046d4541105f48b3fc1cfb0e"],"37727c003d0055afbc22d49ba0434cc4028166db":["8a9e385641d717e641408d8fbbc62be8fc766357"],"bad80f233c792910046d4541105f48b3fc1cfb0e":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}