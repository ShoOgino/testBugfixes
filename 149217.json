{"path":"solr/core/src/java/org/apache/solr/util/MockSearchableSolrClient#request(SolrRequest,String).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/MockSearchableSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/MockSearchableSolrClient#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public synchronized NamedList<Object> request(SolrRequest request, String coll) throws SolrServerException, IOException {\n    if (coll == null) {\n      if (request.getParams() != null) {\n        coll = request.getParams().get(\"collection\");\n      }\n    }\n    if (coll == null) {\n      coll = \"\";\n    }\n    final String collection = coll;\n    NamedList<Object> res = new NamedList<>();\n    if (request instanceof UpdateRequest) {\n      List<SolrInputDocument> docList = ((UpdateRequest) request).getDocuments();\n      if (docList != null) {\n        docList.forEach(doc -> {\n          String id = (String) doc.getFieldValue(\"id\");\n          Objects.requireNonNull(id, doc.toString());\n          docs.computeIfAbsent(collection, c -> new LinkedHashMap<>()).put(id, doc);\n        });\n      }\n    } else if (request instanceof QueryRequest) {\n      SolrParams params = request.getParams();\n      if (params == null) {\n        throw new UnsupportedOperationException(\"invalid request, no params: \" + request);\n      }\n      String query = params.get(\"q\");\n      final SolrDocumentList lst = new SolrDocumentList();\n      if (query != null) {\n        if (query.startsWith(\"{!term f=id}\") || query.startsWith(\"id:\")) {\n          String id;\n          if (query.startsWith(\"{!\")) {\n            id = query.substring(12);\n          } else {\n            id = query.substring(3);\n          }\n          Map<String, SolrInputDocument> collDocs = docs.get(collection);\n          if (collDocs != null) {\n            SolrInputDocument doc = collDocs.get(id);\n            if (doc != null) {\n              SolrDocument d = new SolrDocument();\n              doc.forEach((k, f) -> f.forEach(v -> d.addField(k, v)));\n              lst.add(d);\n              lst.setNumFound(1);\n            }\n          }\n        } else if (query.equals(\"*:*\")) {\n          Map<String, SolrInputDocument> collDocs = docs.get(collection);\n          if (collDocs != null) {\n            lst.setNumFound(collDocs.size());\n            collDocs.values().forEach(doc -> {\n              SolrDocument d = new SolrDocument();\n              doc.forEach((k, f) -> f.forEach(v -> d.addField(k, v)));\n              lst.add(d);\n            });\n          }\n        }\n      }\n      res.add(\"response\", lst);\n    } else {\n      throw new UnsupportedOperationException(\"Unsupported request type: \" + request.getClass() + \":\" + request);\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public synchronized NamedList<Object> request(SolrRequest request, String coll) throws SolrServerException, IOException {\n    if (coll == null) {\n      if (request.getParams() != null) {\n        coll = request.getParams().get(\"collection\");\n      }\n    }\n    if (coll == null) {\n      coll = \"\";\n    }\n    final String collection = coll;\n    NamedList<Object> res = new NamedList<>();\n    if (request instanceof UpdateRequest) {\n      List<SolrInputDocument> docList = ((UpdateRequest) request).getDocuments();\n      if (docList != null) {\n        docList.forEach(doc -> {\n          String id = (String) doc.getFieldValue(\"id\");\n          Assert.assertNotNull(doc.toString(), id);\n          docs.computeIfAbsent(collection, c -> new LinkedHashMap<>()).put(id, doc);\n        });\n      }\n    } else if (request instanceof QueryRequest) {\n      SolrParams params = request.getParams();\n      if (params == null) {\n        throw new UnsupportedOperationException(\"invalid request, no params: \" + request);\n      }\n      String query = params.get(\"q\");\n      final SolrDocumentList lst = new SolrDocumentList();\n      if (query != null) {\n        if (query.startsWith(\"{!term f=id}\") || query.startsWith(\"id:\")) {\n          String id;\n          if (query.startsWith(\"{!\")) {\n            id = query.substring(12);\n          } else {\n            id = query.substring(3);\n          }\n          Map<String, SolrInputDocument> collDocs = docs.get(collection);\n          if (collDocs != null) {\n            SolrInputDocument doc = collDocs.get(id);\n            if (doc != null) {\n              SolrDocument d = new SolrDocument();\n              doc.forEach((k, f) -> f.forEach(v -> d.addField(k, v)));\n              lst.add(d);\n              lst.setNumFound(1);\n            }\n          }\n        } else if (query.equals(\"*:*\")) {\n          Map<String, SolrInputDocument> collDocs = docs.get(collection);\n          if (collDocs != null) {\n            lst.setNumFound(collDocs.size());\n            collDocs.values().forEach(doc -> {\n              SolrDocument d = new SolrDocument();\n              doc.forEach((k, f) -> f.forEach(v -> d.addField(k, v)));\n              lst.add(d);\n            });\n          }\n        }\n      }\n      res.add(\"response\", lst);\n    } else {\n      throw new UnsupportedOperationException(\"Unsupported request type: \" + request.getClass() + \":\" + request);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fcabe49715bf68189751a1e27f0af5151ae9437","date":1560255030,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/MockSearchableSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/MockSearchableSolrClient#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public synchronized NamedList<Object> request(SolrRequest request, String coll) throws SolrServerException, IOException {\n    if (coll == null) {\n      if (request.getParams() != null) {\n        coll = request.getParams().get(\"collection\");\n      }\n    }\n    if (coll == null) {\n      coll = \"\";\n    }\n    final String collection = coll;\n    NamedList<Object> res = new NamedList<>();\n    if (request instanceof UpdateRequest) {\n      List<SolrInputDocument> docList = ((UpdateRequest) request).getDocuments();\n      if (docList != null) {\n        docList.forEach(doc -> {\n          String id = (String) doc.getFieldValue(\"id\");\n          Objects.requireNonNull(id, doc.toString());\n          docs.computeIfAbsent(collection, c -> new LinkedHashMap<>()).put(id, doc);\n          numUpdates.incrementAndGet();\n        });\n      }\n    } else if (request instanceof QueryRequest) {\n      SolrParams params = request.getParams();\n      if (params == null) {\n        throw new UnsupportedOperationException(\"invalid request, no params: \" + request);\n      }\n      String query = params.get(\"q\");\n      final SolrDocumentList lst = new SolrDocumentList();\n      if (query != null) {\n        if (query.startsWith(\"{!term f=id}\") || query.startsWith(\"id:\")) {\n          numQueries.incrementAndGet();\n          String id;\n          if (query.startsWith(\"{!\")) {\n            id = query.substring(12);\n          } else {\n            id = query.substring(3);\n          }\n          Map<String, SolrInputDocument> collDocs = docs.get(collection);\n          if (collDocs != null) {\n            SolrInputDocument doc = collDocs.get(id);\n            if (doc != null) {\n              SolrDocument d = new SolrDocument();\n              doc.forEach((k, f) -> f.forEach(v -> d.addField(k, v)));\n              lst.add(d);\n              lst.setNumFound(1);\n            }\n          }\n        } else if (query.equals(\"*:*\")) {\n          numQueries.incrementAndGet();\n          Map<String, SolrInputDocument> collDocs = docs.get(collection);\n          if (collDocs != null) {\n            lst.setNumFound(collDocs.size());\n            collDocs.values().forEach(doc -> {\n              SolrDocument d = new SolrDocument();\n              doc.forEach((k, f) -> f.forEach(v -> d.addField(k, v)));\n              lst.add(d);\n            });\n          }\n        }\n      }\n      res.add(\"response\", lst);\n    } else {\n      throw new UnsupportedOperationException(\"Unsupported request type: \" + request.getClass() + \":\" + request);\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public synchronized NamedList<Object> request(SolrRequest request, String coll) throws SolrServerException, IOException {\n    if (coll == null) {\n      if (request.getParams() != null) {\n        coll = request.getParams().get(\"collection\");\n      }\n    }\n    if (coll == null) {\n      coll = \"\";\n    }\n    final String collection = coll;\n    NamedList<Object> res = new NamedList<>();\n    if (request instanceof UpdateRequest) {\n      List<SolrInputDocument> docList = ((UpdateRequest) request).getDocuments();\n      if (docList != null) {\n        docList.forEach(doc -> {\n          String id = (String) doc.getFieldValue(\"id\");\n          Objects.requireNonNull(id, doc.toString());\n          docs.computeIfAbsent(collection, c -> new LinkedHashMap<>()).put(id, doc);\n        });\n      }\n    } else if (request instanceof QueryRequest) {\n      SolrParams params = request.getParams();\n      if (params == null) {\n        throw new UnsupportedOperationException(\"invalid request, no params: \" + request);\n      }\n      String query = params.get(\"q\");\n      final SolrDocumentList lst = new SolrDocumentList();\n      if (query != null) {\n        if (query.startsWith(\"{!term f=id}\") || query.startsWith(\"id:\")) {\n          String id;\n          if (query.startsWith(\"{!\")) {\n            id = query.substring(12);\n          } else {\n            id = query.substring(3);\n          }\n          Map<String, SolrInputDocument> collDocs = docs.get(collection);\n          if (collDocs != null) {\n            SolrInputDocument doc = collDocs.get(id);\n            if (doc != null) {\n              SolrDocument d = new SolrDocument();\n              doc.forEach((k, f) -> f.forEach(v -> d.addField(k, v)));\n              lst.add(d);\n              lst.setNumFound(1);\n            }\n          }\n        } else if (query.equals(\"*:*\")) {\n          Map<String, SolrInputDocument> collDocs = docs.get(collection);\n          if (collDocs != null) {\n            lst.setNumFound(collDocs.size());\n            collDocs.values().forEach(doc -> {\n              SolrDocument d = new SolrDocument();\n              doc.forEach((k, f) -> f.forEach(v -> d.addField(k, v)));\n              lst.add(d);\n            });\n          }\n        }\n      }\n      res.add(\"response\", lst);\n    } else {\n      throw new UnsupportedOperationException(\"Unsupported request type: \" + request.getClass() + \":\" + request);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/MockSearchableSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/MockSearchableSolrClient#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public synchronized NamedList<Object> request(@SuppressWarnings({\"rawtypes\"})SolrRequest request,\n                                                String coll) throws SolrServerException, IOException {\n    if (coll == null) {\n      if (request.getParams() != null) {\n        coll = request.getParams().get(\"collection\");\n      }\n    }\n    if (coll == null) {\n      coll = \"\";\n    }\n    final String collection = coll;\n    NamedList<Object> res = new NamedList<>();\n    if (request instanceof UpdateRequest) {\n      List<SolrInputDocument> docList = ((UpdateRequest) request).getDocuments();\n      if (docList != null) {\n        docList.forEach(doc -> {\n          String id = (String) doc.getFieldValue(\"id\");\n          Objects.requireNonNull(id, doc.toString());\n          docs.computeIfAbsent(collection, c -> new LinkedHashMap<>()).put(id, doc);\n          numUpdates.incrementAndGet();\n        });\n      }\n    } else if (request instanceof QueryRequest) {\n      SolrParams params = request.getParams();\n      if (params == null) {\n        throw new UnsupportedOperationException(\"invalid request, no params: \" + request);\n      }\n      String query = params.get(\"q\");\n      final SolrDocumentList lst = new SolrDocumentList();\n      if (query != null) {\n        if (query.startsWith(\"{!term f=id}\") || query.startsWith(\"id:\")) {\n          numQueries.incrementAndGet();\n          String id;\n          if (query.startsWith(\"{!\")) {\n            id = query.substring(12);\n          } else {\n            id = query.substring(3);\n          }\n          Map<String, SolrInputDocument> collDocs = docs.get(collection);\n          if (collDocs != null) {\n            SolrInputDocument doc = collDocs.get(id);\n            if (doc != null) {\n              SolrDocument d = new SolrDocument();\n              doc.forEach((k, f) -> f.forEach(v -> d.addField(k, v)));\n              lst.add(d);\n              lst.setNumFound(1);\n            }\n          }\n        } else if (query.equals(\"*:*\")) {\n          numQueries.incrementAndGet();\n          Map<String, SolrInputDocument> collDocs = docs.get(collection);\n          if (collDocs != null) {\n            lst.setNumFound(collDocs.size());\n            collDocs.values().forEach(doc -> {\n              SolrDocument d = new SolrDocument();\n              doc.forEach((k, f) -> f.forEach(v -> d.addField(k, v)));\n              lst.add(d);\n            });\n          }\n        }\n      }\n      res.add(\"response\", lst);\n    } else {\n      throw new UnsupportedOperationException(\"Unsupported request type: \" + request.getClass() + \":\" + request);\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public synchronized NamedList<Object> request(SolrRequest request, String coll) throws SolrServerException, IOException {\n    if (coll == null) {\n      if (request.getParams() != null) {\n        coll = request.getParams().get(\"collection\");\n      }\n    }\n    if (coll == null) {\n      coll = \"\";\n    }\n    final String collection = coll;\n    NamedList<Object> res = new NamedList<>();\n    if (request instanceof UpdateRequest) {\n      List<SolrInputDocument> docList = ((UpdateRequest) request).getDocuments();\n      if (docList != null) {\n        docList.forEach(doc -> {\n          String id = (String) doc.getFieldValue(\"id\");\n          Objects.requireNonNull(id, doc.toString());\n          docs.computeIfAbsent(collection, c -> new LinkedHashMap<>()).put(id, doc);\n          numUpdates.incrementAndGet();\n        });\n      }\n    } else if (request instanceof QueryRequest) {\n      SolrParams params = request.getParams();\n      if (params == null) {\n        throw new UnsupportedOperationException(\"invalid request, no params: \" + request);\n      }\n      String query = params.get(\"q\");\n      final SolrDocumentList lst = new SolrDocumentList();\n      if (query != null) {\n        if (query.startsWith(\"{!term f=id}\") || query.startsWith(\"id:\")) {\n          numQueries.incrementAndGet();\n          String id;\n          if (query.startsWith(\"{!\")) {\n            id = query.substring(12);\n          } else {\n            id = query.substring(3);\n          }\n          Map<String, SolrInputDocument> collDocs = docs.get(collection);\n          if (collDocs != null) {\n            SolrInputDocument doc = collDocs.get(id);\n            if (doc != null) {\n              SolrDocument d = new SolrDocument();\n              doc.forEach((k, f) -> f.forEach(v -> d.addField(k, v)));\n              lst.add(d);\n              lst.setNumFound(1);\n            }\n          }\n        } else if (query.equals(\"*:*\")) {\n          numQueries.incrementAndGet();\n          Map<String, SolrInputDocument> collDocs = docs.get(collection);\n          if (collDocs != null) {\n            lst.setNumFound(collDocs.size());\n            collDocs.values().forEach(doc -> {\n              SolrDocument d = new SolrDocument();\n              doc.forEach((k, f) -> f.forEach(v -> d.addField(k, v)));\n              lst.add(d);\n            });\n          }\n        }\n      }\n      res.add(\"response\", lst);\n    } else {\n      throw new UnsupportedOperationException(\"Unsupported request type: \" + request.getClass() + \":\" + request);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5fcabe49715bf68189751a1e27f0af5151ae9437":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["5fcabe49715bf68189751a1e27f0af5151ae9437"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"5fcabe49715bf68189751a1e27f0af5151ae9437":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["5fcabe49715bf68189751a1e27f0af5151ae9437"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}