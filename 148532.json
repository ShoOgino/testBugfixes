{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","commits":[{"id":"9f2be786bbf3746ffcd9720e0b473f4b121c4228","date":1359663177,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#DiskDocValuesProducer(SegmentReadState).mjava","sourceNew":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, metaCodec, \n                                DiskDocValuesFormat.VERSION_START,\n                                DiskDocValuesFormat.VERSION_START);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n    \n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    data = state.directory.openInput(dataName, state.context);\n    CodecUtil.checkHeader(data, dataCodec, \n                                DiskDocValuesFormat.VERSION_START,\n                                DiskDocValuesFormat.VERSION_START);\n  }\n\n","sourceOld":"  DiskDocValuesProducer(SegmentReadState state) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, \"ddvm\");\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, DiskDocValuesFormat.METADATA_CODEC, \n                                DiskDocValuesFormat.VERSION_START,\n                                DiskDocValuesFormat.VERSION_START);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in, state.fieldInfos);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n    \n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, \"ddvd\");\n    data = state.directory.openInput(dataName, state.context);\n    CodecUtil.checkHeader(data, DiskDocValuesFormat.DATA_CODEC, \n                                DiskDocValuesFormat.VERSION_START,\n                                DiskDocValuesFormat.VERSION_START);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, metaCodec, \n                                DiskDocValuesFormat.VERSION_START,\n                                DiskDocValuesFormat.VERSION_START);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n    \n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    data = state.directory.openInput(dataName, state.context);\n    CodecUtil.checkHeader(data, dataCodec, \n                                DiskDocValuesFormat.VERSION_START,\n                                DiskDocValuesFormat.VERSION_START);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56fca4cf418a84a71d0701bbb6fda4db84fa5796","date":1361031660,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, metaCodec, \n                                DiskDocValuesFormat.VERSION_START,\n                                DiskDocValuesFormat.VERSION_START);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n    \n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    data = state.directory.openInput(dataName, state.context);\n    CodecUtil.checkHeader(data, dataCodec, \n                                DiskDocValuesFormat.VERSION_START,\n                                DiskDocValuesFormat.VERSION_START);\n  }\n\n","sourceOld":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, metaCodec, \n                                DiskDocValuesFormat.VERSION_START,\n                                DiskDocValuesFormat.VERSION_START);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n    \n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    data = state.directory.openInput(dataName, state.context);\n    CodecUtil.checkHeader(data, dataCodec, \n                                DiskDocValuesFormat.VERSION_START,\n                                DiskDocValuesFormat.VERSION_START);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, metaCodec, \n                                DiskDocValuesFormat.VERSION_START,\n                                DiskDocValuesFormat.VERSION_START);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n    \n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    data = state.directory.openInput(dataName, state.context);\n    CodecUtil.checkHeader(data, dataCodec, \n                                DiskDocValuesFormat.VERSION_START,\n                                DiskDocValuesFormat.VERSION_START);\n  }\n\n","sourceOld":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, metaCodec, \n                                DiskDocValuesFormat.VERSION_START,\n                                DiskDocValuesFormat.VERSION_START);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n    \n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    data = state.directory.openInput(dataName, state.context);\n    CodecUtil.checkHeader(data, dataCodec, \n                                DiskDocValuesFormat.VERSION_START,\n                                DiskDocValuesFormat.VERSION_START);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf317f41f8247db62a955791ebb8a5ab3e7c8d47","date":1366724337,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      DiskDocValuesFormat.VERSION_START,\n                                      DiskDocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 DiskDocValuesFormat.VERSION_START,\n                                                 DiskDocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n\n  }\n\n","sourceOld":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, metaCodec, \n                                DiskDocValuesFormat.VERSION_START,\n                                DiskDocValuesFormat.VERSION_START);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n    \n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    data = state.directory.openInput(dataName, state.context);\n    CodecUtil.checkHeader(data, dataCodec, \n                                DiskDocValuesFormat.VERSION_START,\n                                DiskDocValuesFormat.VERSION_START);\n  }\n\n","bugFix":null,"bugIntro":["37bbe660229a1c295260800f4ee03365b37fa15c","37bbe660229a1c295260800f4ee03365b37fa15c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad01348544f9eb6ee985c300245013a75addfc6","date":1376095061,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      DiskDocValuesFormat.VERSION_CURRENT,\n                                      DiskDocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 DiskDocValuesFormat.VERSION_CURRENT,\n                                                 DiskDocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n\n  }\n\n","sourceOld":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      DiskDocValuesFormat.VERSION_START,\n                                      DiskDocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 DiskDocValuesFormat.VERSION_START,\n                                                 DiskDocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      DiskDocValuesFormat.VERSION_CURRENT,\n                                      DiskDocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 DiskDocValuesFormat.VERSION_CURRENT,\n                                                 DiskDocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n\n  }\n\n","sourceOld":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      DiskDocValuesFormat.VERSION_START,\n                                      DiskDocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 DiskDocValuesFormat.VERSION_START,\n                                                 DiskDocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      DiskDocValuesFormat.VERSION_CURRENT,\n                                      DiskDocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 DiskDocValuesFormat.VERSION_CURRENT,\n                                                 DiskDocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n\n  }\n\n","sourceOld":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      DiskDocValuesFormat.VERSION_CURRENT,\n                                      DiskDocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 DiskDocValuesFormat.VERSION_CURRENT,\n                                                 DiskDocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_CURRENT,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_CURRENT,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      DiskDocValuesFormat.VERSION_CURRENT,\n                                      DiskDocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 DiskDocValuesFormat.VERSION_CURRENT,\n                                                 DiskDocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#MemoryDocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  MemoryDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    maxDoc = state.segmentInfo.getDocCount();\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      VERSION_START,\n                                      VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 VERSION_START,\n                                                 VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      DiskDocValuesFormat.VERSION_CURRENT,\n                                      DiskDocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 DiskDocValuesFormat.VERSION_CURRENT,\n                                                 DiskDocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_CURRENT,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_CURRENT,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      DiskDocValuesFormat.VERSION_CURRENT,\n                                      DiskDocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 DiskDocValuesFormat.VERSION_CURRENT,\n                                                 DiskDocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":null,"sourceOld":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      DiskDocValuesFormat.VERSION_CURRENT,\n                                      DiskDocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 DiskDocValuesFormat.VERSION_CURRENT,\n                                                 DiskDocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["0ad01348544f9eb6ee985c300245013a75addfc6"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"56fca4cf418a84a71d0701bbb6fda4db84fa5796":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["0ad01348544f9eb6ee985c300245013a75addfc6","11a746437bc5c0a0b3df0337ed249c387c812871"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","56fca4cf418a84a71d0701bbb6fda4db84fa5796"],"11a746437bc5c0a0b3df0337ed249c387c812871":["9faa42f41b6adb98daf009cf99a4ee239189e469"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"0ad01348544f9eb6ee985c300245013a75addfc6":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["11a746437bc5c0a0b3df0337ed249c387c812871"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"56fca4cf418a84a71d0701bbb6fda4db84fa5796":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","0ad01348544f9eb6ee985c300245013a75addfc6"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["56fca4cf418a84a71d0701bbb6fda4db84fa5796","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9f2be786bbf3746ffcd9720e0b473f4b121c4228","d4d69c535930b5cce125cff868d40f6373dc27d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"0ad01348544f9eb6ee985c300245013a75addfc6":["9faa42f41b6adb98daf009cf99a4ee239189e469","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}