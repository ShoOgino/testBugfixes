{"path":"backwards/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","pathOld":"/dev/null","sourceNew":"  public void testTransactions() throws Throwable {\n    RANDOM = newRandom();\n    MockRAMDirectory dir1 = new MockRAMDirectory();\n    MockRAMDirectory dir2 = new MockRAMDirectory();\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!((TimedThread) threads[i]).failed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestTransactions#testTransactions().mjava","sourceNew":"  public void testTransactions() throws Throwable {\n    RANDOM = newRandom();\n    MockRAMDirectory dir1 = new MockRAMDirectory();\n    MockRAMDirectory dir2 = new MockRAMDirectory();\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!((TimedThread) threads[i]).failed);\n  }\n\n","sourceOld":"  public void testTransactions() throws Throwable {\n    RANDOM = newRandom();\n    MockRAMDirectory dir1 = new MockRAMDirectory();\n    MockRAMDirectory dir2 = new MockRAMDirectory();\n    dir1.setPreventDoubleWrite(false);\n    dir2.setPreventDoubleWrite(false);\n    dir1.failOn(new RandomFailure());\n    dir2.failOn(new RandomFailure());\n\n    initIndex(dir1);\n    initIndex(dir2);\n\n    TimedThread[] threads = new TimedThread[3];\n    int numThread = 0;\n\n    IndexerThread indexerThread = new IndexerThread(this, dir1, dir2, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n\n    SearcherThread searcherThread1 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(this, dir1, dir2, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!((TimedThread) threads[i]).failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}