{"path":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map).mjava","pathOld":"/dev/null","sourceNew":"  //A map is currently represented as a named list\n  public void writeMap(String name, Map val) throws IOException {\n    Map map = val;\n    int sz = map.size();\n    startTag(\"lst\", name, sz<=0);\n    incLevel();\n    for (Map.Entry entry : (Set<Map.Entry>)map.entrySet()) {\n      // possible class-cast exception here...\n      String k = (String)entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal(k,v);\n    }\n    decLevel();\n    if (sz > 0) {\n      if (doIndent) indent();\n      writer.write(\"</lst>\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map).mjava","sourceNew":null,"sourceOld":"  //A map is currently represented as a named list\n  public void writeMap(String name, Map val) throws IOException {\n    Map map = val;\n    int sz = map.size();\n    startTag(\"lst\", name, sz<=0);\n    incLevel();\n    for (Map.Entry entry : (Set<Map.Entry>)map.entrySet()) {\n      // possible class-cast exception here...\n      String k = (String)entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal(k,v);\n    }\n    decLevel();\n    if (sz > 0) {\n      if (doIndent) indent();\n      writer.write(\"</lst>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map).mjava","pathOld":"src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map).mjava","sourceNew":"  //A map is currently represented as a named list\n  public void writeMap(String name, Map val) throws IOException {\n    Map map = val;\n    int sz = map.size();\n    startTag(\"lst\", name, sz<=0);\n    incLevel();\n    for (Map.Entry entry : (Set<Map.Entry>)map.entrySet()) {\n      // possible class-cast exception here...\n      String k = (String)entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal(k,v);\n    }\n    decLevel();\n    if (sz > 0) {\n      if (doIndent) indent();\n      writer.write(\"</lst>\");\n    }\n  }\n\n","sourceOld":"  //A map is currently represented as a named list\n  public void writeMap(String name, Map val) throws IOException {\n    Map map = val;\n    int sz = map.size();\n    startTag(\"lst\", name, sz<=0);\n    incLevel();\n    for (Map.Entry entry : (Set<Map.Entry>)map.entrySet()) {\n      // possible class-cast exception here...\n      String k = (String)entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal(k,v);\n    }\n    decLevel();\n    if (sz > 0) {\n      if (doIndent) indent();\n      writer.write(\"</lst>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map).mjava","pathOld":"/dev/null","sourceNew":"  //A map is currently represented as a named list\n  public void writeMap(String name, Map val) throws IOException {\n    Map map = val;\n    int sz = map.size();\n    startTag(\"lst\", name, sz<=0);\n    incLevel();\n    for (Map.Entry entry : (Set<Map.Entry>)map.entrySet()) {\n      // possible class-cast exception here...\n      String k = (String)entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal(k,v);\n    }\n    decLevel();\n    if (sz > 0) {\n      if (doIndent) indent();\n      writer.write(\"</lst>\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92d79904976c4035739e5d1e0048d727d7cc5c16","date":1269105502,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map[Object,Object]).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map).mjava","sourceNew":"  /**\n   * writes a Map in the same format as a NamedList, using the\n   * stringification of the key Object when it's non-null.\n   *\n   * @param name\n   * @param map\n   * @throws IOException\n   * @see http://lucene.apache.org/solr/api/org/apache/solr/response/SolrQueryResponse.html#returnable_data\n   */\n  public void writeMap(String name, Map<Object,Object> map) throws IOException {\n    int sz = map.size();\n    startTag(\"lst\", name, sz<=0);\n    incLevel();\n    for (Map.Entry<Object,Object> entry : map.entrySet()) {\n      Object k = entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal( null == k ? null : k.toString(), v);\n    }\n    decLevel();\n    if (sz > 0) {\n      if (doIndent) indent();\n      writer.write(\"</lst>\");\n    }\n  }\n\n","sourceOld":"  //A map is currently represented as a named list\n  public void writeMap(String name, Map val) throws IOException {\n    Map map = val;\n    int sz = map.size();\n    startTag(\"lst\", name, sz<=0);\n    incLevel();\n    for (Map.Entry entry : (Set<Map.Entry>)map.entrySet()) {\n      // possible class-cast exception here...\n      String k = (String)entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal(k,v);\n    }\n    decLevel();\n    if (sz > 0) {\n      if (doIndent) indent();\n      writer.write(\"</lst>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92d79904976c4035739e5d1e0048d727d7cc5c16"],"92d79904976c4035739e5d1e0048d727d7cc5c16":["1da8d55113b689b06716246649de6f62430f15c0"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["92d79904976c4035739e5d1e0048d727d7cc5c16"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"92d79904976c4035739e5d1e0048d727d7cc5c16":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}