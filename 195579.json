{"path":"solr/src/common/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/common/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":null,"sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"src/common/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}