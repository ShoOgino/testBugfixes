{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","pathOld":"modules/spatial/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","sourceNew":"  /**\n   * Get Test Queries\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n    return new LineReader<SpatialTestQuery>(new InputStreamReader(in,\"UTF-8\")) {\n\n      @Override\n      public SpatialTestQuery parseLine(String line) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = getLineNumber();\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          return test;\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Get Test Queries\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n    return new LineReader<SpatialTestQuery>(new InputStreamReader(in,\"UTF-8\")) {\n\n      @Override\n      public SpatialTestQuery parseLine(String line) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = getLineNumber();\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          return test;\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","sourceNew":"  /**\n   * Get Test Queries.  The InputStream is closed.\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n\n    List<SpatialTestQuery> results = new ArrayList<SpatialTestQuery>();\n\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in,\"UTF-8\"));\n    try {\n      String line;\n      for (int lineNumber = 1; (line = bufInput.readLine()) != null; lineNumber++) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = lineNumber;\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          results.add(test);\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","sourceOld":"  /**\n   * Get Test Queries\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n    return new LineReader<SpatialTestQuery>(new InputStreamReader(in,\"UTF-8\")) {\n\n      @Override\n      public SpatialTestQuery parseLine(String line) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = getLineNumber();\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          return test;\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","sourceNew":"  /**\n   * Get Test Queries.  The InputStream is closed.\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n\n    List<SpatialTestQuery> results = new ArrayList<>();\n\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in,\"UTF-8\"));\n    try {\n      String line;\n      for (int lineNumber = 1; (line = bufInput.readLine()) != null; lineNumber++) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = lineNumber;\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          results.add(test);\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","sourceOld":"  /**\n   * Get Test Queries.  The InputStream is closed.\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n\n    List<SpatialTestQuery> results = new ArrayList<SpatialTestQuery>();\n\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in,\"UTF-8\"));\n    try {\n      String line;\n      for (int lineNumber = 1; (line = bufInput.readLine()) != null; lineNumber++) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = lineNumber;\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          results.add(test);\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","sourceNew":"  /**\n   * Get Test Queries.  The InputStream is closed.\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n\n    List<SpatialTestQuery> results = new ArrayList<>();\n\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n    try {\n      String line;\n      for (int lineNumber = 1; (line = bufInput.readLine()) != null; lineNumber++) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = lineNumber;\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          results.add(test);\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","sourceOld":"  /**\n   * Get Test Queries.  The InputStream is closed.\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n\n    List<SpatialTestQuery> results = new ArrayList<>();\n\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in,\"UTF-8\"));\n    try {\n      String line;\n      for (int lineNumber = 1; (line = bufInput.readLine()) != null; lineNumber++) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = lineNumber;\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          results.add(test);\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","sourceNew":"  /**\n   * Get Test Queries.  The InputStream is closed.\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n\n    List<SpatialTestQuery> results = new ArrayList<>();\n\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n    try {\n      String line;\n      for (int lineNumber = 1; (line = bufInput.readLine()) != null; lineNumber++) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = lineNumber;\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          results.add(test);\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","sourceOld":"  /**\n   * Get Test Queries.  The InputStream is closed.\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n\n    List<SpatialTestQuery> results = new ArrayList<>();\n\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in,\"UTF-8\"));\n    try {\n      String line;\n      for (int lineNumber = 1; (line = bufInput.readLine()) != null; lineNumber++) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = lineNumber;\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          results.add(test);\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","sourceNew":"  /**\n   * Get Test Queries.  The InputStream is closed.\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n\n    List<SpatialTestQuery> results = new ArrayList<>();\n\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n    try {\n      String line;\n      for (int lineNumber = 1; (line = bufInput.readLine()) != null; lineNumber++) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = lineNumber;\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          results.add(test);\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","sourceOld":"  /**\n   * Get Test Queries.  The InputStream is closed.\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n\n    List<SpatialTestQuery> results = new ArrayList<>();\n\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n    try {\n      String line;\n      for (int lineNumber = 1; (line = bufInput.readLine()) != null; lineNumber++) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = lineNumber;\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          results.add(test);\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","sourceNew":"  /**\n   * Get Test Queries.  The InputStream is closed.\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n\n    List<SpatialTestQuery> results = new ArrayList<>();\n\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n    try {\n      String line;\n      for (int lineNumber = 1; (line = bufInput.readLine()) != null; lineNumber++) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = lineNumber;\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          results.add(test);\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","sourceOld":"  /**\n   * Get Test Queries.  The InputStream is closed.\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n\n    List<SpatialTestQuery> results = new ArrayList<>();\n\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n    try {\n      String line;\n      for (int lineNumber = 1; (line = bufInput.readLine()) != null; lineNumber++) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = lineNumber;\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          results.add(test);\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9d3d365762604952e436b51980101dfc84cc1b3e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"af2638813028b254a88b418ebeafb541afb49653":["9d3d365762604952e436b51980101dfc84cc1b3e","112d77ac8d3e10a362516ad834c9a11d35c94234"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d3d365762604952e436b51980101dfc84cc1b3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["9d3d365762604952e436b51980101dfc84cc1b3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}