{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"701af9c5bc5323c862e3fd5320e14e5a56ee584a","date":1308639362,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":["1bc1076e669ef72f6939198a862b40a0ffd1fc70"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"718f8730b97959cb87aaeadc9fafb9513f3c1bfe","date":1308670382,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase()));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase()));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase()));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac37ac3060fa2b5b4f0a733ee55d6a54df7e2a44","date":1329754637,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase(Locale.ENGLISH)));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase()));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase(Locale.ENGLISH)));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase(Locale.ENGLISH)));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ac37ac3060fa2b5b4f0a733ee55d6a54df7e2a44"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"701af9c5bc5323c862e3fd5320e14e5a56ee584a":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"718f8730b97959cb87aaeadc9fafb9513f3c1bfe":["ecc11368dc265bfdad90214f8bf5da99016ab1e2","701af9c5bc5323c862e3fd5320e14e5a56ee584a"],"2553b00f699380c64959ccb27991289aae87be2e":["718f8730b97959cb87aaeadc9fafb9513f3c1bfe","090a0320e4de4a3674376aef96b9701f47564f86"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ecc11368dc265bfdad90214f8bf5da99016ab1e2","090a0320e4de4a3674376aef96b9701f47564f86"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ac37ac3060fa2b5b4f0a733ee55d6a54df7e2a44":["090a0320e4de4a3674376aef96b9701f47564f86"],"090a0320e4de4a3674376aef96b9701f47564f86":["701af9c5bc5323c862e3fd5320e14e5a56ee584a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","701af9c5bc5323c862e3fd5320e14e5a56ee584a","718f8730b97959cb87aaeadc9fafb9513f3c1bfe","d083e83f225b11e5fdd900e83d26ddb385b6955c","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"701af9c5bc5323c862e3fd5320e14e5a56ee584a":["718f8730b97959cb87aaeadc9fafb9513f3c1bfe","090a0320e4de4a3674376aef96b9701f47564f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"718f8730b97959cb87aaeadc9fafb9513f3c1bfe":["2553b00f699380c64959ccb27991289aae87be2e"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"ac37ac3060fa2b5b4f0a733ee55d6a54df7e2a44":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"090a0320e4de4a3674376aef96b9701f47564f86":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","ac37ac3060fa2b5b4f0a733ee55d6a54df7e2a44"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}