{"path":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testEqualsHashCode().mjava","commits":[{"id":"a194d3ac4639a7909ea614667b9a7632a6aa14d1","date":1355475351,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testEqualsHashCode().mjava","pathOld":"/dev/null","sourceNew":"  public void testEqualsHashCode() {\n    CommonTermsQuery query = new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean());\n    int terms = atLeast(2);\n    for (int i = 0; i < terms; i++) {\n      query.add(new Term(_TestUtil.randomRealisticUnicodeString(random()),\n          _TestUtil.randomRealisticUnicodeString(random())));\n    }\n    QueryUtils.checkHashEquals(query);\n    QueryUtils.checkUnequal(new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean()),\n        query);\n    \n    {\n      final long seed = random().nextLong();\n      Random r = new Random(seed);\n      CommonTermsQuery left = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int leftTerms = atLeast(r, 2);\n      for (int i = 0; i < leftTerms; i++) {\n        left.add(new Term(_TestUtil.randomRealisticUnicodeString(r), _TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      \n      r = new Random(seed);\n      CommonTermsQuery right = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int rightTerms = atLeast(r, 2);\n      for (int i = 0; i < rightTerms; i++) {\n        right.add(new Term(_TestUtil.randomRealisticUnicodeString(r), _TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      QueryUtils.checkEqual(left, right);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testEqualsHashCode().mjava","pathOld":"/dev/null","sourceNew":"  public void testEqualsHashCode() {\n    CommonTermsQuery query = new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean());\n    int terms = atLeast(2);\n    for (int i = 0; i < terms; i++) {\n      query.add(new Term(_TestUtil.randomRealisticUnicodeString(random()),\n          _TestUtil.randomRealisticUnicodeString(random())));\n    }\n    QueryUtils.checkHashEquals(query);\n    QueryUtils.checkUnequal(new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean()),\n        query);\n    \n    {\n      final long seed = random().nextLong();\n      Random r = new Random(seed);\n      CommonTermsQuery left = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int leftTerms = atLeast(r, 2);\n      for (int i = 0; i < leftTerms; i++) {\n        left.add(new Term(_TestUtil.randomRealisticUnicodeString(r), _TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      \n      r = new Random(seed);\n      CommonTermsQuery right = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int rightTerms = atLeast(r, 2);\n      for (int i = 0; i < rightTerms; i++) {\n        right.add(new Term(_TestUtil.randomRealisticUnicodeString(r), _TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      QueryUtils.checkEqual(left, right);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"620f2c9cd3df8f77948c19b3165b5dc20700a5d5","date":1375193294,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testEqualsHashCode().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testEqualsHashCode().mjava","sourceNew":"  public void testEqualsHashCode() {\n    CommonTermsQuery query = new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean());\n    int terms = atLeast(2);\n    for (int i = 0; i < terms; i++) {\n      query.add(new Term(_TestUtil.randomRealisticUnicodeString(random()),\n          _TestUtil.randomRealisticUnicodeString(random())));\n    }\n    QueryUtils.checkHashEquals(query);\n    QueryUtils.checkUnequal(new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean()),\n        query);\n    \n    {\n      final long seed = random().nextLong();\n      Random r = new Random(seed);\n      CommonTermsQuery left = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int leftTerms = atLeast(r, 2);\n      for (int i = 0; i < leftTerms; i++) {\n        left.add(new Term(_TestUtil.randomRealisticUnicodeString(r), _TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      left.setHighFreqMinimumNumberShouldMatch(r.nextInt(4));\n      left.setLowFreqMinimumNumberShouldMatch(r.nextInt(4));\n      \n      r = new Random(seed);\n      CommonTermsQuery right = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int rightTerms = atLeast(r, 2);\n      for (int i = 0; i < rightTerms; i++) {\n        right.add(new Term(_TestUtil.randomRealisticUnicodeString(r), _TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      right.setHighFreqMinimumNumberShouldMatch(r.nextInt(4));\n      right.setLowFreqMinimumNumberShouldMatch(r.nextInt(4));\n      QueryUtils.checkEqual(left, right);\n    }\n  }\n\n","sourceOld":"  public void testEqualsHashCode() {\n    CommonTermsQuery query = new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean());\n    int terms = atLeast(2);\n    for (int i = 0; i < terms; i++) {\n      query.add(new Term(_TestUtil.randomRealisticUnicodeString(random()),\n          _TestUtil.randomRealisticUnicodeString(random())));\n    }\n    QueryUtils.checkHashEquals(query);\n    QueryUtils.checkUnequal(new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean()),\n        query);\n    \n    {\n      final long seed = random().nextLong();\n      Random r = new Random(seed);\n      CommonTermsQuery left = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int leftTerms = atLeast(r, 2);\n      for (int i = 0; i < leftTerms; i++) {\n        left.add(new Term(_TestUtil.randomRealisticUnicodeString(r), _TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      \n      r = new Random(seed);\n      CommonTermsQuery right = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int rightTerms = atLeast(r, 2);\n      for (int i = 0; i < rightTerms; i++) {\n        right.add(new Term(_TestUtil.randomRealisticUnicodeString(r), _TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      QueryUtils.checkEqual(left, right);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testEqualsHashCode().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testEqualsHashCode().mjava","sourceNew":"  public void testEqualsHashCode() {\n    CommonTermsQuery query = new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean());\n    int terms = atLeast(2);\n    for (int i = 0; i < terms; i++) {\n      query.add(new Term(_TestUtil.randomRealisticUnicodeString(random()),\n          _TestUtil.randomRealisticUnicodeString(random())));\n    }\n    QueryUtils.checkHashEquals(query);\n    QueryUtils.checkUnequal(new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean()),\n        query);\n    \n    {\n      final long seed = random().nextLong();\n      Random r = new Random(seed);\n      CommonTermsQuery left = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int leftTerms = atLeast(r, 2);\n      for (int i = 0; i < leftTerms; i++) {\n        left.add(new Term(_TestUtil.randomRealisticUnicodeString(r), _TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      left.setHighFreqMinimumNumberShouldMatch(r.nextInt(4));\n      left.setLowFreqMinimumNumberShouldMatch(r.nextInt(4));\n      \n      r = new Random(seed);\n      CommonTermsQuery right = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int rightTerms = atLeast(r, 2);\n      for (int i = 0; i < rightTerms; i++) {\n        right.add(new Term(_TestUtil.randomRealisticUnicodeString(r), _TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      right.setHighFreqMinimumNumberShouldMatch(r.nextInt(4));\n      right.setLowFreqMinimumNumberShouldMatch(r.nextInt(4));\n      QueryUtils.checkEqual(left, right);\n    }\n  }\n\n","sourceOld":"  public void testEqualsHashCode() {\n    CommonTermsQuery query = new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean());\n    int terms = atLeast(2);\n    for (int i = 0; i < terms; i++) {\n      query.add(new Term(_TestUtil.randomRealisticUnicodeString(random()),\n          _TestUtil.randomRealisticUnicodeString(random())));\n    }\n    QueryUtils.checkHashEquals(query);\n    QueryUtils.checkUnequal(new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean()),\n        query);\n    \n    {\n      final long seed = random().nextLong();\n      Random r = new Random(seed);\n      CommonTermsQuery left = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int leftTerms = atLeast(r, 2);\n      for (int i = 0; i < leftTerms; i++) {\n        left.add(new Term(_TestUtil.randomRealisticUnicodeString(r), _TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      \n      r = new Random(seed);\n      CommonTermsQuery right = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int rightTerms = atLeast(r, 2);\n      for (int i = 0; i < rightTerms; i++) {\n        right.add(new Term(_TestUtil.randomRealisticUnicodeString(r), _TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      QueryUtils.checkEqual(left, right);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testEqualsHashCode().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testEqualsHashCode().mjava","sourceNew":"  public void testEqualsHashCode() {\n    CommonTermsQuery query = new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean());\n    int terms = atLeast(2);\n    for (int i = 0; i < terms; i++) {\n      query.add(new Term(TestUtil.randomRealisticUnicodeString(random()),\n          TestUtil.randomRealisticUnicodeString(random())));\n    }\n    QueryUtils.checkHashEquals(query);\n    QueryUtils.checkUnequal(new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean()),\n        query);\n    \n    {\n      final long seed = random().nextLong();\n      Random r = new Random(seed);\n      CommonTermsQuery left = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int leftTerms = atLeast(r, 2);\n      for (int i = 0; i < leftTerms; i++) {\n        left.add(new Term(TestUtil.randomRealisticUnicodeString(r), TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      left.setHighFreqMinimumNumberShouldMatch(r.nextInt(4));\n      left.setLowFreqMinimumNumberShouldMatch(r.nextInt(4));\n      \n      r = new Random(seed);\n      CommonTermsQuery right = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int rightTerms = atLeast(r, 2);\n      for (int i = 0; i < rightTerms; i++) {\n        right.add(new Term(TestUtil.randomRealisticUnicodeString(r), TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      right.setHighFreqMinimumNumberShouldMatch(r.nextInt(4));\n      right.setLowFreqMinimumNumberShouldMatch(r.nextInt(4));\n      QueryUtils.checkEqual(left, right);\n    }\n  }\n\n","sourceOld":"  public void testEqualsHashCode() {\n    CommonTermsQuery query = new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean());\n    int terms = atLeast(2);\n    for (int i = 0; i < terms; i++) {\n      query.add(new Term(_TestUtil.randomRealisticUnicodeString(random()),\n          _TestUtil.randomRealisticUnicodeString(random())));\n    }\n    QueryUtils.checkHashEquals(query);\n    QueryUtils.checkUnequal(new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean()),\n        query);\n    \n    {\n      final long seed = random().nextLong();\n      Random r = new Random(seed);\n      CommonTermsQuery left = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int leftTerms = atLeast(r, 2);\n      for (int i = 0; i < leftTerms; i++) {\n        left.add(new Term(_TestUtil.randomRealisticUnicodeString(r), _TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      left.setHighFreqMinimumNumberShouldMatch(r.nextInt(4));\n      left.setLowFreqMinimumNumberShouldMatch(r.nextInt(4));\n      \n      r = new Random(seed);\n      CommonTermsQuery right = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int rightTerms = atLeast(r, 2);\n      for (int i = 0; i < rightTerms; i++) {\n        right.add(new Term(_TestUtil.randomRealisticUnicodeString(r), _TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      right.setHighFreqMinimumNumberShouldMatch(r.nextInt(4));\n      right.setLowFreqMinimumNumberShouldMatch(r.nextInt(4));\n      QueryUtils.checkEqual(left, right);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testEqualsHashCode().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testEqualsHashCode().mjava","sourceNew":"  public void testEqualsHashCode() {\n    CommonTermsQuery query = new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat());\n    int terms = atLeast(2);\n    for (int i = 0; i < terms; i++) {\n      query.add(new Term(TestUtil.randomRealisticUnicodeString(random()),\n          TestUtil.randomRealisticUnicodeString(random())));\n    }\n    QueryUtils.checkHashEquals(query);\n    QueryUtils.checkUnequal(new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat()),\n        query);\n    \n    {\n      final long seed = random().nextLong();\n      Random r = new Random(seed);\n      CommonTermsQuery left = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat());\n      int leftTerms = atLeast(r, 2);\n      for (int i = 0; i < leftTerms; i++) {\n        left.add(new Term(TestUtil.randomRealisticUnicodeString(r), TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      left.setHighFreqMinimumNumberShouldMatch(r.nextInt(4));\n      left.setLowFreqMinimumNumberShouldMatch(r.nextInt(4));\n      \n      r = new Random(seed);\n      CommonTermsQuery right = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat());\n      int rightTerms = atLeast(r, 2);\n      for (int i = 0; i < rightTerms; i++) {\n        right.add(new Term(TestUtil.randomRealisticUnicodeString(r), TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      right.setHighFreqMinimumNumberShouldMatch(r.nextInt(4));\n      right.setLowFreqMinimumNumberShouldMatch(r.nextInt(4));\n      QueryUtils.checkEqual(left, right);\n    }\n  }\n\n","sourceOld":"  public void testEqualsHashCode() {\n    CommonTermsQuery query = new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean());\n    int terms = atLeast(2);\n    for (int i = 0; i < terms; i++) {\n      query.add(new Term(TestUtil.randomRealisticUnicodeString(random()),\n          TestUtil.randomRealisticUnicodeString(random())));\n    }\n    QueryUtils.checkHashEquals(query);\n    QueryUtils.checkUnequal(new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean()),\n        query);\n    \n    {\n      final long seed = random().nextLong();\n      Random r = new Random(seed);\n      CommonTermsQuery left = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int leftTerms = atLeast(r, 2);\n      for (int i = 0; i < leftTerms; i++) {\n        left.add(new Term(TestUtil.randomRealisticUnicodeString(r), TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      left.setHighFreqMinimumNumberShouldMatch(r.nextInt(4));\n      left.setLowFreqMinimumNumberShouldMatch(r.nextInt(4));\n      \n      r = new Random(seed);\n      CommonTermsQuery right = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int rightTerms = atLeast(r, 2);\n      for (int i = 0; i < rightTerms; i++) {\n        right.add(new Term(TestUtil.randomRealisticUnicodeString(r), TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      right.setHighFreqMinimumNumberShouldMatch(r.nextInt(4));\n      right.setLowFreqMinimumNumberShouldMatch(r.nextInt(4));\n      QueryUtils.checkEqual(left, right);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testEqualsHashCode().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testEqualsHashCode().mjava","sourceNew":"  public void testEqualsHashCode() {\n    CommonTermsQuery query = new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat());\n    int terms = atLeast(2);\n    for (int i = 0; i < terms; i++) {\n      query.add(new Term(TestUtil.randomRealisticUnicodeString(random()),\n          TestUtil.randomRealisticUnicodeString(random())));\n    }\n    QueryUtils.checkHashEquals(query);\n    QueryUtils.checkUnequal(new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat()),\n        query);\n    \n    {\n      final long seed = random().nextLong();\n      Random r = new Random(seed);\n      CommonTermsQuery left = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat());\n      int leftTerms = atLeast(r, 2);\n      for (int i = 0; i < leftTerms; i++) {\n        left.add(new Term(TestUtil.randomRealisticUnicodeString(r), TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      left.setHighFreqMinimumNumberShouldMatch(r.nextInt(4));\n      left.setLowFreqMinimumNumberShouldMatch(r.nextInt(4));\n      \n      r = new Random(seed);\n      CommonTermsQuery right = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat());\n      int rightTerms = atLeast(r, 2);\n      for (int i = 0; i < rightTerms; i++) {\n        right.add(new Term(TestUtil.randomRealisticUnicodeString(r), TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      right.setHighFreqMinimumNumberShouldMatch(r.nextInt(4));\n      right.setLowFreqMinimumNumberShouldMatch(r.nextInt(4));\n      QueryUtils.checkEqual(left, right);\n    }\n  }\n\n","sourceOld":"  public void testEqualsHashCode() {\n    CommonTermsQuery query = new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean());\n    int terms = atLeast(2);\n    for (int i = 0; i < terms; i++) {\n      query.add(new Term(TestUtil.randomRealisticUnicodeString(random()),\n          TestUtil.randomRealisticUnicodeString(random())));\n    }\n    QueryUtils.checkHashEquals(query);\n    QueryUtils.checkUnequal(new CommonTermsQuery(randomOccur(random()),\n        randomOccur(random()), random().nextFloat(), random().nextBoolean()),\n        query);\n    \n    {\n      final long seed = random().nextLong();\n      Random r = new Random(seed);\n      CommonTermsQuery left = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int leftTerms = atLeast(r, 2);\n      for (int i = 0; i < leftTerms; i++) {\n        left.add(new Term(TestUtil.randomRealisticUnicodeString(r), TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      left.setHighFreqMinimumNumberShouldMatch(r.nextInt(4));\n      left.setLowFreqMinimumNumberShouldMatch(r.nextInt(4));\n      \n      r = new Random(seed);\n      CommonTermsQuery right = new CommonTermsQuery(randomOccur(r),\n          randomOccur(r), r.nextFloat(), r.nextBoolean());\n      int rightTerms = atLeast(r, 2);\n      for (int i = 0; i < rightTerms; i++) {\n        right.add(new Term(TestUtil.randomRealisticUnicodeString(r), TestUtil\n            .randomRealisticUnicodeString(r)));\n      }\n      right.setHighFreqMinimumNumberShouldMatch(r.nextInt(4));\n      right.setLowFreqMinimumNumberShouldMatch(r.nextInt(4));\n      QueryUtils.checkEqual(left, right);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"6613659748fe4411a7dcf85266e55db1f95f7315":["620f2c9cd3df8f77948c19b3165b5dc20700a5d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"620f2c9cd3df8f77948c19b3165b5dc20700a5d5":["a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"c8a0e442f7b61f811680273b25da95994a724466":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a194d3ac4639a7909ea614667b9a7632a6aa14d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6613659748fe4411a7dcf85266e55db1f95f7315","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"620f2c9cd3df8f77948c19b3165b5dc20700a5d5":["6613659748fe4411a7dcf85266e55db1f95f7315"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a194d3ac4639a7909ea614667b9a7632a6aa14d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","620f2c9cd3df8f77948c19b3165b5dc20700a5d5","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}