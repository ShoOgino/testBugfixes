{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointWriter#close().mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (dataOut != null) {\n      SimpleTextUtil.writeChecksum(dataOut, scratch);\n      dataOut.close();\n      dataOut = null;\n\n      // Write index file\n      String fileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name, writeState.segmentSuffix, SimpleTextPointFormat.POINT_INDEX_EXTENSION);\n      try (IndexOutput indexOut = writeState.directory.createOutput(fileName, writeState.context)) {\n        int count = indexFPs.size();\n        write(indexOut, FIELD_COUNT);\n        write(indexOut, Integer.toString(count));\n        newline(indexOut);\n        for(Map.Entry<String,Long> ent : indexFPs.entrySet()) {\n          write(indexOut, FIELD_FP_NAME);\n          write(indexOut, ent.getKey());\n          newline(indexOut);\n          write(indexOut, FIELD_FP);\n          write(indexOut, Long.toString(ent.getValue()));\n          newline(indexOut);\n        }\n        SimpleTextUtil.writeChecksum(indexOut, scratch);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    if (dataOut != null) {\n      SimpleTextUtil.writeChecksum(dataOut, scratch);\n      dataOut.close();\n      dataOut = null;\n\n      // Write index file\n      String fileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name, writeState.segmentSuffix, SimpleTextDimensionalFormat.DIMENSIONAL_INDEX_EXTENSION);\n      try (IndexOutput indexOut = writeState.directory.createOutput(fileName, writeState.context)) {\n        int count = indexFPs.size();\n        write(indexOut, FIELD_COUNT);\n        write(indexOut, Integer.toString(count));\n        newline(indexOut);\n        for(Map.Entry<String,Long> ent : indexFPs.entrySet()) {\n          write(indexOut, FIELD_FP_NAME);\n          write(indexOut, ent.getKey());\n          newline(indexOut);\n          write(indexOut, FIELD_FP);\n          write(indexOut, Long.toString(ent.getValue()));\n          newline(indexOut);\n        }\n        SimpleTextUtil.writeChecksum(indexOut, scratch);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85ca0e073c286ebb2c89364ada6dd2740fc18880","date":1453996944,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (dataOut != null) {\n      dataOut.close();\n      dataOut = null;\n\n      // Write index file\n      String fileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name, writeState.segmentSuffix, SimpleTextPointFormat.POINT_INDEX_EXTENSION);\n      try (IndexOutput indexOut = writeState.directory.createOutput(fileName, writeState.context)) {\n        int count = indexFPs.size();\n        write(indexOut, FIELD_COUNT);\n        write(indexOut, Integer.toString(count));\n        newline(indexOut);\n        for(Map.Entry<String,Long> ent : indexFPs.entrySet()) {\n          write(indexOut, FIELD_FP_NAME);\n          write(indexOut, ent.getKey());\n          newline(indexOut);\n          write(indexOut, FIELD_FP);\n          write(indexOut, Long.toString(ent.getValue()));\n          newline(indexOut);\n        }\n        SimpleTextUtil.writeChecksum(indexOut, scratch);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    if (dataOut != null) {\n      SimpleTextUtil.writeChecksum(dataOut, scratch);\n      dataOut.close();\n      dataOut = null;\n\n      // Write index file\n      String fileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name, writeState.segmentSuffix, SimpleTextPointFormat.POINT_INDEX_EXTENSION);\n      try (IndexOutput indexOut = writeState.directory.createOutput(fileName, writeState.context)) {\n        int count = indexFPs.size();\n        write(indexOut, FIELD_COUNT);\n        write(indexOut, Integer.toString(count));\n        newline(indexOut);\n        for(Map.Entry<String,Long> ent : indexFPs.entrySet()) {\n          write(indexOut, FIELD_FP_NAME);\n          write(indexOut, ent.getKey());\n          newline(indexOut);\n          write(indexOut, FIELD_FP);\n          write(indexOut, Long.toString(ent.getValue()));\n          newline(indexOut);\n        }\n        SimpleTextUtil.writeChecksum(indexOut, scratch);\n      }\n    }\n  }\n\n","bugFix":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (dataOut != null) {\n      dataOut.close();\n      dataOut = null;\n\n      // Write index file\n      String fileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name, writeState.segmentSuffix, SimpleTextPointFormat.POINT_INDEX_EXTENSION);\n      try (IndexOutput indexOut = writeState.directory.createOutput(fileName, writeState.context)) {\n        int count = indexFPs.size();\n        write(indexOut, FIELD_COUNT);\n        write(indexOut, Integer.toString(count));\n        newline(indexOut);\n        for(Map.Entry<String,Long> ent : indexFPs.entrySet()) {\n          write(indexOut, FIELD_FP_NAME);\n          write(indexOut, ent.getKey());\n          newline(indexOut);\n          write(indexOut, FIELD_FP);\n          write(indexOut, Long.toString(ent.getValue()));\n          newline(indexOut);\n        }\n        SimpleTextUtil.writeChecksum(indexOut, scratch);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    if (dataOut != null) {\n      SimpleTextUtil.writeChecksum(dataOut, scratch);\n      dataOut.close();\n      dataOut = null;\n\n      // Write index file\n      String fileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name, writeState.segmentSuffix, SimpleTextPointFormat.POINT_INDEX_EXTENSION);\n      try (IndexOutput indexOut = writeState.directory.createOutput(fileName, writeState.context)) {\n        int count = indexFPs.size();\n        write(indexOut, FIELD_COUNT);\n        write(indexOut, Integer.toString(count));\n        newline(indexOut);\n        for(Map.Entry<String,Long> ent : indexFPs.entrySet()) {\n          write(indexOut, FIELD_FP_NAME);\n          write(indexOut, ent.getKey());\n          newline(indexOut);\n          write(indexOut, FIELD_FP);\n          write(indexOut, Long.toString(ent.getValue()));\n          newline(indexOut);\n        }\n        SimpleTextUtil.writeChecksum(indexOut, scratch);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (dataOut != null) {\n      dataOut.close();\n      dataOut = null;\n\n      // Write index file\n      String fileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name, writeState.segmentSuffix, SimpleTextPointFormat.POINT_INDEX_EXTENSION);\n      try (IndexOutput indexOut = writeState.directory.createOutput(fileName, writeState.context)) {\n        int count = indexFPs.size();\n        write(indexOut, FIELD_COUNT);\n        write(indexOut, Integer.toString(count));\n        newline(indexOut);\n        for(Map.Entry<String,Long> ent : indexFPs.entrySet()) {\n          write(indexOut, FIELD_FP_NAME);\n          write(indexOut, ent.getKey());\n          newline(indexOut);\n          write(indexOut, FIELD_FP);\n          write(indexOut, Long.toString(ent.getValue()));\n          newline(indexOut);\n        }\n        SimpleTextUtil.writeChecksum(indexOut, scratch);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    if (dataOut != null) {\n      SimpleTextUtil.writeChecksum(dataOut, scratch);\n      dataOut.close();\n      dataOut = null;\n\n      // Write index file\n      String fileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name, writeState.segmentSuffix, SimpleTextPointFormat.POINT_INDEX_EXTENSION);\n      try (IndexOutput indexOut = writeState.directory.createOutput(fileName, writeState.context)) {\n        int count = indexFPs.size();\n        write(indexOut, FIELD_COUNT);\n        write(indexOut, Integer.toString(count));\n        newline(indexOut);\n        for(Map.Entry<String,Long> ent : indexFPs.entrySet()) {\n          write(indexOut, FIELD_FP_NAME);\n          write(indexOut, ent.getKey());\n          newline(indexOut);\n          write(indexOut, FIELD_FP);\n          write(indexOut, Long.toString(ent.getValue()));\n          newline(indexOut);\n        }\n        SimpleTextUtil.writeChecksum(indexOut, scratch);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointsWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (dataOut != null) {\n      dataOut.close();\n      dataOut = null;\n\n      // Write index file\n      String fileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name, writeState.segmentSuffix, SimpleTextPointsFormat.POINT_INDEX_EXTENSION);\n      try (IndexOutput indexOut = writeState.directory.createOutput(fileName, writeState.context)) {\n        int count = indexFPs.size();\n        write(indexOut, FIELD_COUNT);\n        write(indexOut, Integer.toString(count));\n        newline(indexOut);\n        for(Map.Entry<String,Long> ent : indexFPs.entrySet()) {\n          write(indexOut, FIELD_FP_NAME);\n          write(indexOut, ent.getKey());\n          newline(indexOut);\n          write(indexOut, FIELD_FP);\n          write(indexOut, Long.toString(ent.getValue()));\n          newline(indexOut);\n        }\n        SimpleTextUtil.writeChecksum(indexOut, scratch);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    if (dataOut != null) {\n      dataOut.close();\n      dataOut = null;\n\n      // Write index file\n      String fileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name, writeState.segmentSuffix, SimpleTextPointFormat.POINT_INDEX_EXTENSION);\n      try (IndexOutput indexOut = writeState.directory.createOutput(fileName, writeState.context)) {\n        int count = indexFPs.size();\n        write(indexOut, FIELD_COUNT);\n        write(indexOut, Integer.toString(count));\n        newline(indexOut);\n        for(Map.Entry<String,Long> ent : indexFPs.entrySet()) {\n          write(indexOut, FIELD_FP_NAME);\n          write(indexOut, ent.getKey());\n          newline(indexOut);\n          write(indexOut, FIELD_FP);\n          write(indexOut, Long.toString(ent.getValue()));\n          newline(indexOut);\n        }\n        SimpleTextUtil.writeChecksum(indexOut, scratch);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","8d15e34266d75e4e8b95da046cd0afc812367b38"],"85ca0e073c286ebb2c89364ada6dd2740fc18880":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","85ca0e073c286ebb2c89364ada6dd2740fc18880"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"]},"commit2Childs":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","85ca0e073c286ebb2c89364ada6dd2740fc18880","8d15e34266d75e4e8b95da046cd0afc812367b38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"85ca0e073c286ebb2c89364ada6dd2740fc18880":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["4522ffca5a1f420c6a02198c9332d7c596a30ca5","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}