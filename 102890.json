{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#assertDVIterate(Directory).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#assertDVIterate(Directory).mjava","pathOld":"/dev/null","sourceNew":"  // Asserts equality of stored value vs. DocValue by iterating DocValues one at a time\n  protected void assertDVIterate(Directory dir) throws IOException {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues docValues = DocValues.getNumeric(r, \"dv\");\n      docValues.nextDoc();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String storedValue = r.document(i).get(\"stored\");\n        if (storedValue == null) {\n          assertTrue(docValues.docID() > i);\n        } else {\n          assertEquals(i, docValues.docID());\n          assertEquals(Long.parseLong(storedValue), docValues.longValue());\n          docValues.nextDoc();\n        }\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docValues.docID());\n    }\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#assertDVIterate(Directory).mjava","pathOld":"/dev/null","sourceNew":"  // Asserts equality of stored value vs. DocValue by iterating DocValues one at a time\n  protected void assertDVIterate(Directory dir) throws IOException {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues docValues = DocValues.getNumeric(r, \"dv\");\n      docValues.nextDoc();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String storedValue = r.document(i).get(\"stored\");\n        if (storedValue == null) {\n          assertTrue(docValues.docID() > i);\n        } else {\n          assertEquals(i, docValues.docID());\n          assertEquals(Long.parseLong(storedValue), docValues.longValue());\n          docValues.nextDoc();\n        }\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docValues.docID());\n    }\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}