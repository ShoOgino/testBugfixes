{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSoftDeletes().mjava","commits":[{"id":"9135dfa8824df4c6f7619bd2ac9507d821c61239","date":1544123763,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSoftDeletes().mjava","pathOld":"/dev/null","sourceNew":"  public void testSoftDeletes() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random())).setSoftDeletesField(\"__soft_delete\");\n    IndexWriter writer = new IndexWriter(dir, conf);\n    int maxDoc = writer.maxDoc();\n    writer.updateDocValues(new Term(\"id\", \"1\"),new NumericDocValuesField(\"__soft_delete\", 1));\n\n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    writer.forceMerge(1);\n    writer.commit();\n    assertEquals(maxDoc-1, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSoftDeletes().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSoftDeletes().mjava","sourceNew":"  public void testSoftDeletes() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random())).setSoftDeletesField(\"__soft_delete\");\n    IndexWriter writer = new IndexWriter(dir, conf);\n    int maxDoc = writer.getDocStats().maxDoc;\n    writer.updateDocValues(new Term(\"id\", \"1\"),new NumericDocValuesField(\"__soft_delete\", 1));\n\n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    writer.forceMerge(1);\n    writer.commit();\n    assertEquals(maxDoc-1, writer.getDocStats().maxDoc);\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSoftDeletes() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random())).setSoftDeletesField(\"__soft_delete\");\n    IndexWriter writer = new IndexWriter(dir, conf);\n    int maxDoc = writer.maxDoc();\n    writer.updateDocValues(new Term(\"id\", \"1\"),new NumericDocValuesField(\"__soft_delete\", 1));\n\n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    writer.forceMerge(1);\n    writer.commit();\n    assertEquals(maxDoc-1, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d722b735bc69d2234e957cb69cf96ad28ea7e1c3","date":1546867201,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSoftDeletes().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSoftDeletes().mjava","sourceNew":"  public void testSoftDeletes() throws Exception {\n    assumeTrue(\"Reenable when 8.0 is released\", false);\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random())).setSoftDeletesField(\"__soft_delete\");\n    IndexWriter writer = new IndexWriter(dir, conf);\n    int maxDoc = writer.getDocStats().maxDoc;\n    writer.updateDocValues(new Term(\"id\", \"1\"),new NumericDocValuesField(\"__soft_delete\", 1));\n\n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    writer.forceMerge(1);\n    writer.commit();\n    assertEquals(maxDoc-1, writer.getDocStats().maxDoc);\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSoftDeletes() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random())).setSoftDeletesField(\"__soft_delete\");\n    IndexWriter writer = new IndexWriter(dir, conf);\n    int maxDoc = writer.getDocStats().maxDoc;\n    writer.updateDocValues(new Term(\"id\", \"1\"),new NumericDocValuesField(\"__soft_delete\", 1));\n\n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    writer.forceMerge(1);\n    writer.commit();\n    assertEquals(maxDoc-1, writer.getDocStats().maxDoc);\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c167f43985b3d924e6402ded39beada51a81b6b","date":1552568413,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSoftDeletes().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSoftDeletes().mjava","sourceNew":"  public void testSoftDeletes() throws Exception {\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random())).setSoftDeletesField(\"__soft_delete\");\n    IndexWriter writer = new IndexWriter(dir, conf);\n    int maxDoc = writer.getDocStats().maxDoc;\n    writer.updateDocValues(new Term(\"id\", \"1\"),new NumericDocValuesField(\"__soft_delete\", 1));\n\n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    writer.forceMerge(1);\n    writer.commit();\n    assertEquals(maxDoc-1, writer.getDocStats().maxDoc);\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSoftDeletes() throws Exception {\n    assumeTrue(\"Reenable when 8.0 is released\", false);\n    Path oldIndexDir = createTempDir(\"dvupdates\");\n    TestUtil.unzip(getDataInputStream(dvUpdatesIndex), oldIndexDir);\n    Directory dir = newFSDirectory(oldIndexDir);\n    verifyUsesDefaultCodec(dir, dvUpdatesIndex);\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random())).setSoftDeletesField(\"__soft_delete\");\n    IndexWriter writer = new IndexWriter(dir, conf);\n    int maxDoc = writer.getDocStats().maxDoc;\n    writer.updateDocValues(new Term(\"id\", \"1\"),new NumericDocValuesField(\"__soft_delete\", 1));\n\n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    writer.forceMerge(1);\n    writer.commit();\n    assertEquals(maxDoc-1, writer.getDocStats().maxDoc);\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"feb4029567b43f074ed7b6eb8fb126d355075dfd":["9135dfa8824df4c6f7619bd2ac9507d821c61239"],"9135dfa8824df4c6f7619bd2ac9507d821c61239":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3c167f43985b3d924e6402ded39beada51a81b6b":["d722b735bc69d2234e957cb69cf96ad28ea7e1c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c167f43985b3d924e6402ded39beada51a81b6b"],"d722b735bc69d2234e957cb69cf96ad28ea7e1c3":["feb4029567b43f074ed7b6eb8fb126d355075dfd"]},"commit2Childs":{"feb4029567b43f074ed7b6eb8fb126d355075dfd":["d722b735bc69d2234e957cb69cf96ad28ea7e1c3"],"9135dfa8824df4c6f7619bd2ac9507d821c61239":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9135dfa8824df4c6f7619bd2ac9507d821c61239"],"3c167f43985b3d924e6402ded39beada51a81b6b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d722b735bc69d2234e957cb69cf96ad28ea7e1c3":["3c167f43985b3d924e6402ded39beada51a81b6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}