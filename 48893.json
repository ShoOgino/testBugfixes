{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestSimpleDrillSideways#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = new DrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query: \n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    IOUtils.close(searcher.getIndexReader(), taxoReader, writer, taxoWriter, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    SimpleDrillSideways ds = new SimpleDrillSideways(searcher, config, taxoReader);\n\n    // Simple case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query: \n    SimpleDrillDownQuery ddq = new SimpleDrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    SimpleDrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new SimpleDrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on on single fields\n    // but OR of two values\n    ddq = new SimpleDrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new SimpleDrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new SimpleDrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new SimpleDrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new SimpleDrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new SimpleDrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new SimpleDrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    IOUtils.close(searcher.getIndexReader(), taxoReader, writer, taxoWriter, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = new DrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query: \n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    IOUtils.close(searcher.getIndexReader(), taxoReader, writer, taxoWriter, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = new DrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query: \n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    IOUtils.close(searcher.getIndexReader(), taxoReader, writer, taxoWriter, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56d44586f4c409c6c6c5942b9f0227df806b7300","date":1386027853,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = new DrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query: \n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    IOUtils.close(searcher.getIndexReader(), taxoReader, writer, taxoWriter, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = new DrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query: \n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    IOUtils.close(searcher.getIndexReader(), taxoReader, writer, taxoWriter, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = new DrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query: \n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    IOUtils.close(searcher.getIndexReader(), taxoReader, writer, taxoWriter, dir, taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e36d54295a482663caa1b849aa6172b8f868feb","date":1394970334,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = new DrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query: \n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    assertTrue(r.facets instanceof MultiFacets);\n    List<FacetResult> allResults = r.facets.getAllDims(10);\n    assertEquals(2, allResults.size());\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", allResults.get(0).toString());\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", allResults.get(1).toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    IOUtils.close(searcher.getIndexReader(), taxoReader, writer, taxoWriter, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = new DrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query: \n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    IOUtils.close(searcher.getIndexReader(), taxoReader, writer, taxoWriter, dir, taxoDir);\n  }\n\n","bugFix":["28ac5cee8abf30398e12bc016a5ce9d441831a63"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = new DrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query: \n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    assertTrue(r.facets instanceof MultiFacets);\n    List<FacetResult> allResults = r.facets.getAllDims(10);\n    assertEquals(2, allResults.size());\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", allResults.get(0).toString());\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", allResults.get(1).toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    writer.shutdown();\n    IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = new DrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query: \n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    assertTrue(r.facets instanceof MultiFacets);\n    List<FacetResult> allResults = r.facets.getAllDims(10);\n    assertEquals(2, allResults.size());\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", allResults.get(0).toString());\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", allResults.get(1).toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    IOUtils.close(searcher.getIndexReader(), taxoReader, writer, taxoWriter, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = new DrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query: \n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    assertTrue(r.facets instanceof MultiFacets);\n    List<FacetResult> allResults = r.facets.getAllDims(10);\n    assertEquals(2, allResults.size());\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", allResults.get(0).toString());\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", allResults.get(1).toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    writer.close();\n    IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = new DrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query: \n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    assertTrue(r.facets instanceof MultiFacets);\n    List<FacetResult> allResults = r.facets.getAllDims(10);\n    assertEquals(2, allResults.size());\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", allResults.get(0).toString());\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", allResults.get(1).toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    writer.shutdown();\n    IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = new DrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    assertTrue(r.facets instanceof MultiFacets);\n    List<FacetResult> allResults = r.facets.getAllDims(10);\n    assertEquals(2, allResults.size());\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", allResults.get(0).toString());\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", allResults.get(1).toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    writer.close();\n    IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = new DrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query: \n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    assertTrue(r.facets instanceof MultiFacets);\n    List<FacetResult> allResults = r.facets.getAllDims(10);\n    assertEquals(2, allResults.size());\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", allResults.get(0).toString());\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", allResults.get(1).toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    writer.close();\n    IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = new DrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    assertTrue(r.facets instanceof MultiFacets);\n    List<FacetResult> allResults = r.facets.getAllDims(10);\n    assertEquals(2, allResults.size());\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", allResults.get(0).toString());\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", allResults.get(1).toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    writer.close();\n    IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = new DrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query: \n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    assertTrue(r.facets instanceof MultiFacets);\n    List<FacetResult> allResults = r.facets.getAllDims(10);\n    assertEquals(2, allResults.size());\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", allResults.get(0).toString());\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", allResults.get(1).toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    writer.close();\n    IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91eb857a56b1a3a6659c666f88e2398347fc1c5a","date":1483442809,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = getNewDrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    assertTrue(r.facets instanceof MultiFacets);\n    List<FacetResult> allResults = r.facets.getAllDims(10);\n    assertEquals(2, allResults.size());\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            allResults.get(0).toString());\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            allResults.get(1).toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    writer.close();\n    IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = new DrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    assertTrue(r.facets instanceof MultiFacets);\n    List<FacetResult> allResults = r.facets.getAllDims(10);\n    assertEquals(2, allResults.size());\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", allResults.get(0).toString());\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", allResults.get(1).toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    writer.close();\n    IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = getNewDrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    assertTrue(r.facets instanceof MultiFacets);\n    List<FacetResult> allResults = r.facets.getAllDims(10);\n    assertEquals(2, allResults.size());\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            allResults.get(0).toString());\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            allResults.get(1).toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    writer.close();\n    IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = new DrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    assertTrue(r.facets instanceof MultiFacets);\n    List<FacetResult> allResults = r.facets.getAllDims(10);\n    assertEquals(2, allResults.size());\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", allResults.get(0).toString());\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", allResults.get(1).toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\", r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\", r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    writer.close();\n    IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = getNewDrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits.value);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    assertTrue(r.facets instanceof MultiFacets);\n    List<FacetResult> allResults = r.facets.getAllDims(10);\n    assertEquals(2, allResults.size());\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            allResults.get(0).toString());\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            allResults.get(1).toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits.value);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits.value);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits.value);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    writer.close();\n    IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = getNewDrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    assertTrue(r.facets instanceof MultiFacets);\n    List<FacetResult> allResults = r.facets.getAllDims(10);\n    assertEquals(2, allResults.size());\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            allResults.get(0).toString());\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            allResults.get(1).toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    writer.close();\n    IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132e4d2b791f182f095041c89860f21eb11c31a5","date":1600099601,"type":3,"author":"Julie Tibshirani","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = getNewSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = getNewDrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits.value);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    assertTrue(r.facets instanceof MultiFacets);\n    List<FacetResult> allResults = r.facets.getAllDims(10);\n    assertEquals(2, allResults.size());\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            allResults.get(0).toString());\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            allResults.get(1).toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits.value);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits.value);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits.value);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    writer.close();\n    IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = getNewDrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits.value);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    assertTrue(r.facets instanceof MultiFacets);\n    List<FacetResult> allResults = r.facets.getAllDims(10);\n    assertEquals(2, allResults.size());\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            allResults.get(0).toString());\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            allResults.get(1).toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits.value);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits.value);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits.value);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    writer.close();\n    IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = getNewSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = getNewDrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits.value);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    assertTrue(r.facets instanceof MultiFacets);\n    List<FacetResult> allResults = r.facets.getAllDims(10);\n    assertEquals(2, allResults.size());\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            allResults.get(0).toString());\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            allResults.get(1).toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits.value);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits.value);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits.value);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    writer.close();\n    IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the\n    // main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Bob\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"15\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2010\", \"10\", \"20\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Lisa\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Susan\"));\n    doc.add(new FacetField(\"Publish Date\", \"2012\", \"1\", \"7\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    doc = new Document();\n    doc.add(new FacetField(\"Author\", \"Frank\"));\n    doc.add(new FacetField(\"Publish Date\", \"1999\", \"5\", \"5\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    //System.out.println(\"searcher=\" + searcher);\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    DrillSideways ds = getNewDrillSideways(searcher, config, taxoReader);\n\n    //  case: drill-down on a single field; in this\n    // case the drill-sideways + drill-down counts ==\n    // drill-down of just the query:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    DrillSidewaysResult r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Same simple case, but no baseQuery (pure browse):\n    // drill-down on a single field; in this case the\n    // drill-sideways + drill-down counts == drill-down of\n    // just the query:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Another simple case: drill-down on single fields\n    // but OR of two values\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(3, r.hits.totalHits.value);\n    // Publish Date is only drill-down: Lisa and Bob\n    // (drill-down) published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    assertTrue(r.facets instanceof MultiFacets);\n    List<FacetResult> allResults = r.facets.getAllDims(10);\n    assertEquals(2, allResults.size());\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            allResults.get(0).toString());\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            allResults.get(1).toString());\n\n    // More interesting case: drill-down on two fields\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(1, r.hits.totalHits.value);\n    // Publish Date is drill-sideways + drill-down: Lisa\n    // (drill-down) published once in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Even more interesting case: drill down on two fields,\n    // but one of them is OR\n    ddq = new DrillDownQuery(config);\n\n    // Drill down on Lisa or Bob:\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Publish Date\", \"2010\");\n    ddq.add(\"Author\", \"Bob\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is both drill-sideways + drill-down:\n    // Lisa or Bob published twice in 2010 and once in 2012:\n    assertEquals(\"dim=Publish Date path=[] value=3 childCount=2\\n  2010 (2)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down:\n    // only Lisa & Bob published (once each) in 2010:\n    assertEquals(\"dim=Author path=[] value=2 childCount=2\\n  Bob (1)\\n  Lisa (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // Test drilling down on invalid field:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Foobar\", \"Baz\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(0, r.hits.totalHits.value);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Foobar\"));\n\n    // Test drilling down on valid term or'd with invalid term:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n    // Author is drill-sideways + drill-down: Lisa\n    // (drill-down) published twice, and Frank/Susan/Bob\n    // published once:\n    assertEquals(\"dim=Author path=[] value=5 childCount=4\\n  Lisa (2)\\n  Bob (1)\\n  Susan (1)\\n  Frank (1)\\n\",\n            r.facets.getTopChildren(10, \"Author\").toString());\n\n    // LUCENE-4915: test drilling down on a dimension but\n    // NOT facet counting it:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"Author\", \"Lisa\");\n    ddq.add(\"Author\", \"Tom\");\n    r = ds.search(null, ddq, 10);\n    assertEquals(2, r.hits.totalHits.value);\n    // Publish Date is only drill-down, and Lisa published\n    // one in 2012 and one in 2010:\n    assertEquals(\"dim=Publish Date path=[] value=2 childCount=2\\n  2010 (1)\\n  2012 (1)\\n\",\n            r.facets.getTopChildren(10, \"Publish Date\").toString());\n\n    // Test main query gets null scorer:\n    ddq = new DrillDownQuery(config, new TermQuery(new Term(\"foobar\", \"baz\")));\n    ddq.add(\"Author\", \"Lisa\");\n    r = ds.search(null, ddq, 10);\n\n    assertEquals(0, r.hits.totalHits.value);\n    assertNull(r.facets.getTopChildren(10, \"Publish Date\"));\n    assertNull(r.facets.getTopChildren(10, \"Author\"));\n    writer.close();\n    IOUtils.close(searcher.getIndexReader(), taxoReader, taxoWriter, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"6e36d54295a482663caa1b849aa6172b8f868feb":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"91eb857a56b1a3a6659c666f88e2398347fc1c5a":["0e7bc21595222ae4f75509300fbb7726691f387f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d0ef034a4f10871667ae75181537775ddcf8ade4","0e7bc21595222ae4f75509300fbb7726691f387f"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","91eb857a56b1a3a6659c666f88e2398347fc1c5a"],"132e4d2b791f182f095041c89860f21eb11c31a5":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"680b6449f09827f58fe987aff279e014c311d966":["83788ad129a5154d5c6562c4e8ce3db48793aada","132e4d2b791f182f095041c89860f21eb11c31a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["21d36d0db865f7b84026b447bec653469a6e66df"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6e36d54295a482663caa1b849aa6172b8f868feb"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56d44586f4c409c6c6c5942b9f0227df806b7300"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["91eb857a56b1a3a6659c666f88e2398347fc1c5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"6e36d54295a482663caa1b849aa6172b8f868feb":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"91eb857a56b1a3a6659c666f88e2398347fc1c5a":["f03e4bed5023ec3ef93a771b8888cae991cf448d","83788ad129a5154d5c6562c4e8ce3db48793aada"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"132e4d2b791f182f095041c89860f21eb11c31a5":["680b6449f09827f58fe987aff279e014c311d966"],"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","3cc728b07df73b197e6d940d27f9b08b63918f13"],"0e7bc21595222ae4f75509300fbb7726691f387f":["91eb857a56b1a3a6659c666f88e2398347fc1c5a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0e7bc21595222ae4f75509300fbb7726691f387f"],"21d36d0db865f7b84026b447bec653469a6e66df":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["56d44586f4c409c6c6c5942b9f0227df806b7300"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6e36d54295a482663caa1b849aa6172b8f868feb"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["132e4d2b791f182f095041c89860f21eb11c31a5","680b6449f09827f58fe987aff279e014c311d966"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}