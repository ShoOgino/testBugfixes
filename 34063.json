{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"5287d62ad5da27d35a88ada646ae7d9adfb76826","date":1450041712,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter limitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n    \n    // bucketSorts, required\n    FieldComparator[] bucketSorts = null;\n    if(null != bucketSortExpression){\n      if(bucketSortExpression.getParameter() instanceof StreamExpressionValue){\n        bucketSorts = parseBucketSorts(((StreamExpressionValue)bucketSortExpression.getParameter()).getValue());\n      }\n    }\n    if(null == bucketSorts || 0 == bucketSorts.length){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n    \n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n    \n    if(null == limitExpression || null == limitExpression.getParameter() || !(limitExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'limit' parameter of type positive integer but didn't find one\",expression));\n    }\n    String limitStr = ((StreamExpressionValue)limitExpression.getParameter()).getValue();\n    int limitInt = 0;\n    try{\n      limitInt = Integer.parseInt(limitStr);\n      if(limitInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' must be greater than 0.\",expression, limitStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' is not a valid integer.\",expression, limitStr));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, params, buckets, bucketSorts, metrics, limitInt, zkHost);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a027750b86452a8dcd054ac993d54b203dae9102","date":1451953949,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter limitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n    \n    // bucketSorts, required\n    FieldComparator[] bucketSorts = null;\n    if(null != bucketSortExpression){\n      if(bucketSortExpression.getParameter() instanceof StreamExpressionValue){\n        bucketSorts = parseBucketSorts(((StreamExpressionValue)bucketSortExpression.getParameter()).getValue());\n      }\n    }\n    if(null == bucketSorts || 0 == bucketSorts.length){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n    \n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n    \n    if(null == limitExpression || null == limitExpression.getParameter() || !(limitExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'limit' parameter of type positive integer but didn't find one\",expression));\n    }\n    String limitStr = ((StreamExpressionValue)limitExpression.getParameter()).getValue();\n    int limitInt = 0;\n    try{\n      limitInt = Integer.parseInt(limitStr);\n      if(limitInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' must be greater than 0.\",expression, limitStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' is not a valid integer.\",expression, limitStr));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, params, buckets, bucketSorts, metrics, limitInt, zkHost);\n  }\n\n","sourceOld":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter limitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n    \n    // bucketSorts, required\n    FieldComparator[] bucketSorts = null;\n    if(null != bucketSortExpression){\n      if(bucketSortExpression.getParameter() instanceof StreamExpressionValue){\n        bucketSorts = parseBucketSorts(((StreamExpressionValue)bucketSortExpression.getParameter()).getValue());\n      }\n    }\n    if(null == bucketSorts || 0 == bucketSorts.length){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n    \n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n    \n    if(null == limitExpression || null == limitExpression.getParameter() || !(limitExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'limit' parameter of type positive integer but didn't find one\",expression));\n    }\n    String limitStr = ((StreamExpressionValue)limitExpression.getParameter()).getValue();\n    int limitInt = 0;\n    try{\n      limitInt = Integer.parseInt(limitStr);\n      if(limitInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' must be greater than 0.\",expression, limitStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' is not a valid integer.\",expression, limitStr));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, params, buckets, bucketSorts, metrics, limitInt, zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter limitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n    \n    // bucketSorts, required\n    FieldComparator[] bucketSorts = null;\n    if(null != bucketSortExpression){\n      if(bucketSortExpression.getParameter() instanceof StreamExpressionValue){\n        bucketSorts = parseBucketSorts(((StreamExpressionValue)bucketSortExpression.getParameter()).getValue());\n      }\n    }\n    if(null == bucketSorts || 0 == bucketSorts.length){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n    \n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n    \n    if(null == limitExpression || null == limitExpression.getParameter() || !(limitExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'limit' parameter of type positive integer but didn't find one\",expression));\n    }\n    String limitStr = ((StreamExpressionValue)limitExpression.getParameter()).getValue();\n    int limitInt = 0;\n    try{\n      limitInt = Integer.parseInt(limitStr);\n      if(limitInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' must be greater than 0.\",expression, limitStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' is not a valid integer.\",expression, limitStr));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, params, buckets, bucketSorts, metrics, limitInt, zkHost);\n  }\n\n","sourceOld":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter limitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n    \n    // bucketSorts, required\n    FieldComparator[] bucketSorts = null;\n    if(null != bucketSortExpression){\n      if(bucketSortExpression.getParameter() instanceof StreamExpressionValue){\n        bucketSorts = parseBucketSorts(((StreamExpressionValue)bucketSortExpression.getParameter()).getValue());\n      }\n    }\n    if(null == bucketSorts || 0 == bucketSorts.length){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n    \n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n    \n    if(null == limitExpression || null == limitExpression.getParameter() || !(limitExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'limit' parameter of type positive integer but didn't find one\",expression));\n    }\n    String limitStr = ((StreamExpressionValue)limitExpression.getParameter()).getValue();\n    int limitInt = 0;\n    try{\n      limitInt = Integer.parseInt(limitStr);\n      if(limitInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' must be greater than 0.\",expression, limitStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' is not a valid integer.\",expression, limitStr));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, params, buckets, bucketSorts, metrics, limitInt, zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter limitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n    \n    // bucketSorts, required\n    FieldComparator[] bucketSorts = null;\n    if(null != bucketSortExpression){\n      if(bucketSortExpression.getParameter() instanceof StreamExpressionValue){\n        bucketSorts = parseBucketSorts(((StreamExpressionValue)bucketSortExpression.getParameter()).getValue());\n      }\n    }\n    if(null == bucketSorts || 0 == bucketSorts.length){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n    \n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n    \n    if(null == limitExpression || null == limitExpression.getParameter() || !(limitExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'limit' parameter of type positive integer but didn't find one\",expression));\n    }\n    String limitStr = ((StreamExpressionValue)limitExpression.getParameter()).getValue();\n    int limitInt = 0;\n    try{\n      limitInt = Integer.parseInt(limitStr);\n      if(limitInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' must be greater than 0.\",expression, limitStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' is not a valid integer.\",expression, limitStr));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, params, buckets, bucketSorts, metrics, limitInt, zkHost);\n  }\n\n","sourceOld":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter limitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n    \n    // bucketSorts, required\n    FieldComparator[] bucketSorts = null;\n    if(null != bucketSortExpression){\n      if(bucketSortExpression.getParameter() instanceof StreamExpressionValue){\n        bucketSorts = parseBucketSorts(((StreamExpressionValue)bucketSortExpression.getParameter()).getValue());\n      }\n    }\n    if(null == bucketSorts || 0 == bucketSorts.length){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n    \n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n    \n    if(null == limitExpression || null == limitExpression.getParameter() || !(limitExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'limit' parameter of type positive integer but didn't find one\",expression));\n    }\n    String limitStr = ((StreamExpressionValue)limitExpression.getParameter()).getValue();\n    int limitInt = 0;\n    try{\n      limitInt = Integer.parseInt(limitStr);\n      if(limitInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' must be greater than 0.\",expression, limitStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' is not a valid integer.\",expression, limitStr));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, params, buckets, bucketSorts, metrics, limitInt, zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter limitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n    \n    // bucketSorts, required\n    FieldComparator[] bucketSorts = null;\n    if(null != bucketSortExpression){\n      if(bucketSortExpression.getParameter() instanceof StreamExpressionValue){\n        bucketSorts = parseBucketSorts(((StreamExpressionValue)bucketSortExpression.getParameter()).getValue());\n      }\n    }\n    if(null == bucketSorts || 0 == bucketSorts.length){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n    \n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n    \n    if(null == limitExpression || null == limitExpression.getParameter() || !(limitExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'limit' parameter of type positive integer but didn't find one\",expression));\n    }\n    String limitStr = ((StreamExpressionValue)limitExpression.getParameter()).getValue();\n    int limitInt = 0;\n    try{\n      limitInt = Integer.parseInt(limitStr);\n      if(limitInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' must be greater than 0.\",expression, limitStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' is not a valid integer.\",expression, limitStr));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, params, buckets, bucketSorts, metrics, limitInt, zkHost);\n  }\n\n","sourceOld":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter limitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n    \n    // bucketSorts, required\n    FieldComparator[] bucketSorts = null;\n    if(null != bucketSortExpression){\n      if(bucketSortExpression.getParameter() instanceof StreamExpressionValue){\n        bucketSorts = parseBucketSorts(((StreamExpressionValue)bucketSortExpression.getParameter()).getValue());\n      }\n    }\n    if(null == bucketSorts || 0 == bucketSorts.length){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n    \n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n    \n    if(null == limitExpression || null == limitExpression.getParameter() || !(limitExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'limit' parameter of type positive integer but didn't find one\",expression));\n    }\n    String limitStr = ((StreamExpressionValue)limitExpression.getParameter()).getValue();\n    int limitInt = 0;\n    try{\n      limitInt = Integer.parseInt(limitStr);\n      if(limitInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' must be greater than 0.\",expression, limitStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' is not a valid integer.\",expression, limitStr));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, params, buckets, bucketSorts, metrics, limitInt, zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter limitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n    \n    // bucketSorts, required\n    FieldComparator[] bucketSorts = null;\n    if(null != bucketSortExpression){\n      if(bucketSortExpression.getParameter() instanceof StreamExpressionValue){\n        bucketSorts = parseBucketSorts(((StreamExpressionValue)bucketSortExpression.getParameter()).getValue());\n      }\n    }\n    if(null == bucketSorts || 0 == bucketSorts.length){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n    \n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n    \n    if(null == limitExpression || null == limitExpression.getParameter() || !(limitExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'limit' parameter of type positive integer but didn't find one\",expression));\n    }\n    String limitStr = ((StreamExpressionValue)limitExpression.getParameter()).getValue();\n    int limitInt = 0;\n    try{\n      limitInt = Integer.parseInt(limitStr);\n      if(limitInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' must be greater than 0.\",expression, limitStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' is not a valid integer.\",expression, limitStr));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, params, buckets, bucketSorts, metrics, limitInt, zkHost);\n  }\n\n","sourceOld":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter limitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n    \n    // bucketSorts, required\n    FieldComparator[] bucketSorts = null;\n    if(null != bucketSortExpression){\n      if(bucketSortExpression.getParameter() instanceof StreamExpressionValue){\n        bucketSorts = parseBucketSorts(((StreamExpressionValue)bucketSortExpression.getParameter()).getValue());\n      }\n    }\n    if(null == bucketSorts || 0 == bucketSorts.length){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n    \n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n    \n    if(null == limitExpression || null == limitExpression.getParameter() || !(limitExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'limit' parameter of type positive integer but didn't find one\",expression));\n    }\n    String limitStr = ((StreamExpressionValue)limitExpression.getParameter()).getValue();\n    int limitInt = 0;\n    try{\n      limitInt = Integer.parseInt(limitStr);\n      if(limitInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' must be greater than 0.\",expression, limitStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' is not a valid integer.\",expression, limitStr));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, params, buckets, bucketSorts, metrics, limitInt, zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58199c2d60bb7cc4bec1a7e70b16f72c4fc7d9d9","date":1536688684,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter limitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n    \n    // bucketSorts, required\n    FieldComparator[] bucketSorts = null;\n    if(null != bucketSortExpression){\n      if(bucketSortExpression.getParameter() instanceof StreamExpressionValue){\n        bucketSorts = parseBucketSorts(((StreamExpressionValue)bucketSortExpression.getParameter()).getValue());\n      }\n    }\n    if(null == bucketSorts || 0 == bucketSorts.length){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n    \n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n    \n    if(null == limitExpression || null == limitExpression.getParameter() || !(limitExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'limit' parameter of type positive integer but didn't find one\",expression));\n    }\n    String limitStr = ((StreamExpressionValue)limitExpression.getParameter()).getValue();\n    int limitInt = 0;\n    try{\n      limitInt = Integer.parseInt(limitStr);\n      if(limitInt <= 0 && limitInt != -1){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' must be greater than 0 or -1.\",expression, limitStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' is not a valid integer.\",expression, limitStr));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, params, buckets, bucketSorts, metrics, limitInt, zkHost);\n  }\n\n","sourceOld":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter limitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n    \n    // bucketSorts, required\n    FieldComparator[] bucketSorts = null;\n    if(null != bucketSortExpression){\n      if(bucketSortExpression.getParameter() instanceof StreamExpressionValue){\n        bucketSorts = parseBucketSorts(((StreamExpressionValue)bucketSortExpression.getParameter()).getValue());\n      }\n    }\n    if(null == bucketSorts || 0 == bucketSorts.length){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n    \n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n    \n    if(null == limitExpression || null == limitExpression.getParameter() || !(limitExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'limit' parameter of type positive integer but didn't find one\",expression));\n    }\n    String limitStr = ((StreamExpressionValue)limitExpression.getParameter()).getValue();\n    int limitInt = 0;\n    try{\n      limitInt = Integer.parseInt(limitStr);\n      if(limitInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' must be greater than 0.\",expression, limitStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' is not a valid integer.\",expression, limitStr));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, params, buckets, bucketSorts, metrics, limitInt, zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"011d43366b2da54d1652d93e7ec6412848eeb009","date":1541521420,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter bucketLimitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    StreamExpressionNamedParameter rowsExpression = factory.getNamedOperand(expression, \"rows\");\n    StreamExpressionNamedParameter offsetExpression = factory.getNamedOperand(expression, \"offset\");\n    StreamExpressionNamedParameter overfetchExpression = factory.getNamedOperand(expression, \"overfetch\");\n    StreamExpressionNamedParameter refineExpression = factory.getNamedOperand(expression, \"refine\");\n    StreamExpressionNamedParameter methodExpression = factory.getNamedOperand(expression, \"method\");\n\n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"buckets\") &&\n          !namedParam.getName().equals(\"bucketSorts\") &&\n          !namedParam.getName().equals(\"bucketSizeLimit\") &&\n          !namedParam.getName().equals(\"method\") &&\n          !namedParam.getName().equals(\"offset\") &&\n          !namedParam.getName().equals(\"rows\") &&\n          !namedParam.getName().equals(\"refine\") &&\n          !namedParam.getName().equals(\"overfetch\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n\n    String bucketSortString = null;\n\n    if(bucketSortExpression == null) {\n      bucketSortString = \"count(*) desc\";\n    } else {\n      bucketSortString = ((StreamExpressionValue)bucketSortExpression.getParameter()).getValue();\n    }\n\n    FieldComparator[] bucketSorts = parseBucketSorts(bucketSortString, buckets);\n\n    if(null == bucketSorts || 0 == bucketSorts.length) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx) {\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    boolean refine = false;\n\n    if(refineExpression != null) {\n      String refineStr = ((StreamExpressionValue) refineExpression.getParameter()).getValue();\n      if (refineStr != null) {\n        refine = Boolean.parseBoolean(refineStr);\n      }\n    }\n\n    if(bucketLimitExpression != null && (rowsExpression != null ||\n                                         offsetExpression != null ||\n                                         overfetchExpression != null)) {\n      throw new IOException(\"bucketSizeLimit is incompatible with rows, offset and overfetch.\");\n    }\n\n    String methodStr = null;\n    if(methodExpression != null) {\n      methodStr = ((StreamExpressionValue) methodExpression.getParameter()).getValue();\n    }\n\n    int overfetchInt = 150;\n    if(overfetchExpression != null) {\n      String overfetchStr = ((StreamExpressionValue) overfetchExpression.getParameter()).getValue();\n      overfetchInt = Integer.parseInt(overfetchStr);\n    }\n\n    int offsetInt = 0;\n    if(offsetExpression != null) {\n      String offsetStr = ((StreamExpressionValue) offsetExpression.getParameter()).getValue();\n      offsetInt = Integer.parseInt(offsetStr);\n    }\n\n    int rowsInt = Integer.MIN_VALUE;\n    int bucketLimit = Integer.MIN_VALUE;\n    boolean bucketLimitSet = false;\n\n    if(null != rowsExpression) {\n      String rowsStr = ((StreamExpressionValue)rowsExpression.getParameter()).getValue();\n      try {\n        rowsInt = Integer.parseInt(rowsStr);\n        if (rowsInt <= 0 && rowsInt != -1) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - limit '%s' must be greater than 0 or -1.\", expression, rowsStr));\n        }\n        //Rows is set so configure the bucketLimitSize\n        if(rowsInt == -1) {\n          bucketLimit = rowsInt = Integer.MAX_VALUE;\n        } else if(overfetchInt == -1) {\n          bucketLimit = Integer.MAX_VALUE;\n        }else{\n          bucketLimit = offsetInt+overfetchInt+rowsInt;\n        }\n      } catch (NumberFormatException e) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - limit '%s' is not a valid integer.\", expression, rowsStr));\n      }\n    }\n\n    if(bucketLimitExpression != null) {\n      String bucketLimitStr = ((StreamExpressionValue) bucketLimitExpression.getParameter()).getValue();\n      try {\n        bucketLimit = Integer.parseInt(bucketLimitStr);\n        bucketLimitSet = true;\n\n        if (bucketLimit <= 0 && bucketLimit != -1) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - bucketSizeLimit '%s' must be greater than 0 or -1.\", expression, bucketLimitStr));\n        }\n\n        // Bucket limit is set. So set rows.\n        if(bucketLimit == -1) {\n         rowsInt = bucketLimit = Integer.MAX_VALUE;\n        } else {\n          rowsInt = bucketLimit;\n        }\n      }  catch (NumberFormatException e) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - bucketSizeLimit '%s' is not a valid integer.\", expression, bucketLimitStr));\n      }\n    }\n\n    if(rowsExpression == null && bucketLimitExpression == null) {\n      rowsInt = 10;\n      if(overfetchInt == -1) {\n        bucketLimit = Integer.MAX_VALUE;\n      }else{\n        bucketLimit = offsetInt+overfetchInt+rowsInt;\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName,\n         params,\n         buckets,\n         bucketSorts,\n         metrics,\n         rowsInt,\n         offsetInt,\n         bucketLimit,\n         refine,\n         methodStr,\n         bucketLimitSet,\n         overfetchInt,\n         zkHost);\n  }\n\n","sourceOld":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter limitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"buckets\") && !namedParam.getName().equals(\"bucketSorts\") && !namedParam.getName().equals(\"limit\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n    \n    // bucketSorts, required\n    FieldComparator[] bucketSorts = null;\n    if(null != bucketSortExpression){\n      if(bucketSortExpression.getParameter() instanceof StreamExpressionValue){\n        bucketSorts = parseBucketSorts(((StreamExpressionValue)bucketSortExpression.getParameter()).getValue());\n      }\n    }\n    if(null == bucketSorts || 0 == bucketSorts.length){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n    \n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n    \n    if(null == limitExpression || null == limitExpression.getParameter() || !(limitExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'limit' parameter of type positive integer but didn't find one\",expression));\n    }\n    String limitStr = ((StreamExpressionValue)limitExpression.getParameter()).getValue();\n    int limitInt = 0;\n    try{\n      limitInt = Integer.parseInt(limitStr);\n      if(limitInt <= 0 && limitInt != -1){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' must be greater than 0 or -1.\",expression, limitStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - limit '%s' is not a valid integer.\",expression, limitStr));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, params, buckets, bucketSorts, metrics, limitInt, zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d54dd7a8b2bd4a9f0eb00fc325cbef1846b14b34","date":1541599137,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter bucketLimitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    StreamExpressionNamedParameter rowsExpression = factory.getNamedOperand(expression, \"rows\");\n    StreamExpressionNamedParameter offsetExpression = factory.getNamedOperand(expression, \"offset\");\n    StreamExpressionNamedParameter overfetchExpression = factory.getNamedOperand(expression, \"overfetch\");\n    StreamExpressionNamedParameter refineExpression = factory.getNamedOperand(expression, \"refine\");\n    StreamExpressionNamedParameter methodExpression = factory.getNamedOperand(expression, \"method\");\n\n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"buckets\") &&\n          !namedParam.getName().equals(\"bucketSorts\") &&\n          !namedParam.getName().equals(\"bucketSizeLimit\") &&\n          !namedParam.getName().equals(\"method\") &&\n          !namedParam.getName().equals(\"offset\") &&\n          !namedParam.getName().equals(\"rows\") &&\n          !namedParam.getName().equals(\"refine\") &&\n          !namedParam.getName().equals(\"overfetch\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n\n    String bucketSortString = null;\n\n    if(bucketSortExpression == null) {\n      throw new IOException(\"The bucketSorts parameter is required for the facet function.\");\n    } else {\n      bucketSortString = ((StreamExpressionValue)bucketSortExpression.getParameter()).getValue();\n    }\n\n    FieldComparator[] bucketSorts = parseBucketSorts(bucketSortString, buckets);\n\n    if(null == bucketSorts || 0 == bucketSorts.length) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx) {\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    boolean refine = false;\n\n    if(refineExpression != null) {\n      String refineStr = ((StreamExpressionValue) refineExpression.getParameter()).getValue();\n      if (refineStr != null) {\n        refine = Boolean.parseBoolean(refineStr);\n      }\n    }\n\n    if(bucketLimitExpression != null && (rowsExpression != null ||\n                                         offsetExpression != null ||\n                                         overfetchExpression != null)) {\n      throw new IOException(\"bucketSizeLimit is incompatible with rows, offset and overfetch.\");\n    }\n\n    String methodStr = null;\n    if(methodExpression != null) {\n      methodStr = ((StreamExpressionValue) methodExpression.getParameter()).getValue();\n    }\n\n    int overfetchInt = 150;\n    if(overfetchExpression != null) {\n      String overfetchStr = ((StreamExpressionValue) overfetchExpression.getParameter()).getValue();\n      overfetchInt = Integer.parseInt(overfetchStr);\n    }\n\n    int offsetInt = 0;\n    if(offsetExpression != null) {\n      String offsetStr = ((StreamExpressionValue) offsetExpression.getParameter()).getValue();\n      offsetInt = Integer.parseInt(offsetStr);\n    }\n\n    int rowsInt = Integer.MIN_VALUE;\n    int bucketLimit = Integer.MIN_VALUE;\n    boolean bucketLimitSet = false;\n\n    if(null != rowsExpression) {\n      String rowsStr = ((StreamExpressionValue)rowsExpression.getParameter()).getValue();\n      try {\n        rowsInt = Integer.parseInt(rowsStr);\n        if (rowsInt <= 0 && rowsInt != -1) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - limit '%s' must be greater than 0 or -1.\", expression, rowsStr));\n        }\n        //Rows is set so configure the bucketLimitSize\n        if(rowsInt == -1) {\n          bucketLimit = rowsInt = Integer.MAX_VALUE;\n        } else if(overfetchInt == -1) {\n          bucketLimit = Integer.MAX_VALUE;\n        }else{\n          bucketLimit = offsetInt+overfetchInt+rowsInt;\n        }\n      } catch (NumberFormatException e) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - limit '%s' is not a valid integer.\", expression, rowsStr));\n      }\n    }\n\n    if(bucketLimitExpression != null) {\n      String bucketLimitStr = ((StreamExpressionValue) bucketLimitExpression.getParameter()).getValue();\n      try {\n        bucketLimit = Integer.parseInt(bucketLimitStr);\n        bucketLimitSet = true;\n\n        if (bucketLimit <= 0 && bucketLimit != -1) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - bucketSizeLimit '%s' must be greater than 0 or -1.\", expression, bucketLimitStr));\n        }\n\n        // Bucket limit is set. So set rows.\n        if(bucketLimit == -1) {\n         rowsInt = bucketLimit = Integer.MAX_VALUE;\n        } else {\n          rowsInt = bucketLimit;\n        }\n      }  catch (NumberFormatException e) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - bucketSizeLimit '%s' is not a valid integer.\", expression, bucketLimitStr));\n      }\n    }\n\n    if(rowsExpression == null && bucketLimitExpression == null) {\n      rowsInt = 10;\n      if(overfetchInt == -1) {\n        bucketLimit = Integer.MAX_VALUE;\n      }else{\n        bucketLimit = offsetInt+overfetchInt+rowsInt;\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName,\n         params,\n         buckets,\n         bucketSorts,\n         metrics,\n         rowsInt,\n         offsetInt,\n         bucketLimit,\n         refine,\n         methodStr,\n         bucketLimitSet,\n         overfetchInt,\n         zkHost);\n  }\n\n","sourceOld":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter bucketLimitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    StreamExpressionNamedParameter rowsExpression = factory.getNamedOperand(expression, \"rows\");\n    StreamExpressionNamedParameter offsetExpression = factory.getNamedOperand(expression, \"offset\");\n    StreamExpressionNamedParameter overfetchExpression = factory.getNamedOperand(expression, \"overfetch\");\n    StreamExpressionNamedParameter refineExpression = factory.getNamedOperand(expression, \"refine\");\n    StreamExpressionNamedParameter methodExpression = factory.getNamedOperand(expression, \"method\");\n\n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"buckets\") &&\n          !namedParam.getName().equals(\"bucketSorts\") &&\n          !namedParam.getName().equals(\"bucketSizeLimit\") &&\n          !namedParam.getName().equals(\"method\") &&\n          !namedParam.getName().equals(\"offset\") &&\n          !namedParam.getName().equals(\"rows\") &&\n          !namedParam.getName().equals(\"refine\") &&\n          !namedParam.getName().equals(\"overfetch\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n\n    String bucketSortString = null;\n\n    if(bucketSortExpression == null) {\n      bucketSortString = \"count(*) desc\";\n    } else {\n      bucketSortString = ((StreamExpressionValue)bucketSortExpression.getParameter()).getValue();\n    }\n\n    FieldComparator[] bucketSorts = parseBucketSorts(bucketSortString, buckets);\n\n    if(null == bucketSorts || 0 == bucketSorts.length) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx) {\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    boolean refine = false;\n\n    if(refineExpression != null) {\n      String refineStr = ((StreamExpressionValue) refineExpression.getParameter()).getValue();\n      if (refineStr != null) {\n        refine = Boolean.parseBoolean(refineStr);\n      }\n    }\n\n    if(bucketLimitExpression != null && (rowsExpression != null ||\n                                         offsetExpression != null ||\n                                         overfetchExpression != null)) {\n      throw new IOException(\"bucketSizeLimit is incompatible with rows, offset and overfetch.\");\n    }\n\n    String methodStr = null;\n    if(methodExpression != null) {\n      methodStr = ((StreamExpressionValue) methodExpression.getParameter()).getValue();\n    }\n\n    int overfetchInt = 150;\n    if(overfetchExpression != null) {\n      String overfetchStr = ((StreamExpressionValue) overfetchExpression.getParameter()).getValue();\n      overfetchInt = Integer.parseInt(overfetchStr);\n    }\n\n    int offsetInt = 0;\n    if(offsetExpression != null) {\n      String offsetStr = ((StreamExpressionValue) offsetExpression.getParameter()).getValue();\n      offsetInt = Integer.parseInt(offsetStr);\n    }\n\n    int rowsInt = Integer.MIN_VALUE;\n    int bucketLimit = Integer.MIN_VALUE;\n    boolean bucketLimitSet = false;\n\n    if(null != rowsExpression) {\n      String rowsStr = ((StreamExpressionValue)rowsExpression.getParameter()).getValue();\n      try {\n        rowsInt = Integer.parseInt(rowsStr);\n        if (rowsInt <= 0 && rowsInt != -1) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - limit '%s' must be greater than 0 or -1.\", expression, rowsStr));\n        }\n        //Rows is set so configure the bucketLimitSize\n        if(rowsInt == -1) {\n          bucketLimit = rowsInt = Integer.MAX_VALUE;\n        } else if(overfetchInt == -1) {\n          bucketLimit = Integer.MAX_VALUE;\n        }else{\n          bucketLimit = offsetInt+overfetchInt+rowsInt;\n        }\n      } catch (NumberFormatException e) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - limit '%s' is not a valid integer.\", expression, rowsStr));\n      }\n    }\n\n    if(bucketLimitExpression != null) {\n      String bucketLimitStr = ((StreamExpressionValue) bucketLimitExpression.getParameter()).getValue();\n      try {\n        bucketLimit = Integer.parseInt(bucketLimitStr);\n        bucketLimitSet = true;\n\n        if (bucketLimit <= 0 && bucketLimit != -1) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - bucketSizeLimit '%s' must be greater than 0 or -1.\", expression, bucketLimitStr));\n        }\n\n        // Bucket limit is set. So set rows.\n        if(bucketLimit == -1) {\n         rowsInt = bucketLimit = Integer.MAX_VALUE;\n        } else {\n          rowsInt = bucketLimit;\n        }\n      }  catch (NumberFormatException e) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - bucketSizeLimit '%s' is not a valid integer.\", expression, bucketLimitStr));\n      }\n    }\n\n    if(rowsExpression == null && bucketLimitExpression == null) {\n      rowsInt = 10;\n      if(overfetchInt == -1) {\n        bucketLimit = Integer.MAX_VALUE;\n      }else{\n        bucketLimit = offsetInt+overfetchInt+rowsInt;\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName,\n         params,\n         buckets,\n         bucketSorts,\n         metrics,\n         rowsInt,\n         offsetInt,\n         bucketLimit,\n         refine,\n         methodStr,\n         bucketLimitSet,\n         overfetchInt,\n         zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a209db4770770843a101e5dfe46086a63507fd3","date":1544624168,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter bucketLimitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    StreamExpressionNamedParameter rowsExpression = factory.getNamedOperand(expression, \"rows\");\n    StreamExpressionNamedParameter offsetExpression = factory.getNamedOperand(expression, \"offset\");\n    StreamExpressionNamedParameter overfetchExpression = factory.getNamedOperand(expression, \"overfetch\");\n    StreamExpressionNamedParameter refineExpression = factory.getNamedOperand(expression, \"refine\");\n    StreamExpressionNamedParameter methodExpression = factory.getNamedOperand(expression, \"method\");\n\n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"buckets\") &&\n          !namedParam.getName().equals(\"bucketSorts\") &&\n          !namedParam.getName().equals(\"bucketSizeLimit\") &&\n          !namedParam.getName().equals(\"method\") &&\n          !namedParam.getName().equals(\"offset\") &&\n          !namedParam.getName().equals(\"rows\") &&\n          !namedParam.getName().equals(\"refine\") &&\n          !namedParam.getName().equals(\"overfetch\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n\n    String bucketSortString = null;\n\n    if(bucketSortExpression == null) {\n      throw new IOException(\"The bucketSorts parameter is required for the facet function.\");\n    } else {\n      bucketSortString = ((StreamExpressionValue)bucketSortExpression.getParameter()).getValue();\n    }\n\n    FieldComparator[] bucketSorts = parseBucketSorts(bucketSortString, buckets);\n\n    if(null == bucketSorts || 0 == bucketSorts.length) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx) {\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    boolean refine = false;\n\n    if(refineExpression != null) {\n      String refineStr = ((StreamExpressionValue) refineExpression.getParameter()).getValue();\n      if (refineStr != null) {\n        refine = Boolean.parseBoolean(refineStr);\n      }\n    }\n\n    if(bucketLimitExpression != null && (rowsExpression != null ||\n                                         offsetExpression != null ||\n                                         overfetchExpression != null)) {\n      throw new IOException(\"bucketSizeLimit is incompatible with rows, offset and overfetch.\");\n    }\n\n    String methodStr = null;\n    if(methodExpression != null) {\n      methodStr = ((StreamExpressionValue) methodExpression.getParameter()).getValue();\n    }\n\n    int overfetchInt = 150;\n    if(overfetchExpression != null) {\n      String overfetchStr = ((StreamExpressionValue) overfetchExpression.getParameter()).getValue();\n      overfetchInt = Integer.parseInt(overfetchStr);\n    }\n\n    int offsetInt = 0;\n    if(offsetExpression != null) {\n      String offsetStr = ((StreamExpressionValue) offsetExpression.getParameter()).getValue();\n      offsetInt = Integer.parseInt(offsetStr);\n    }\n\n    int rowsInt = Integer.MIN_VALUE;\n    int bucketLimit = Integer.MIN_VALUE;\n    boolean bucketLimitSet = false;\n\n    if(null != rowsExpression) {\n      String rowsStr = ((StreamExpressionValue)rowsExpression.getParameter()).getValue();\n      try {\n        rowsInt = Integer.parseInt(rowsStr);\n        if (rowsInt <= 0 && rowsInt != -1) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - limit '%s' must be greater than 0 or -1.\", expression, rowsStr));\n        }\n        //Rows is set so configure the bucketLimitSize\n        if(rowsInt == -1) {\n          bucketLimit = rowsInt = Integer.MAX_VALUE;\n        } else if(overfetchInt == -1) {\n          bucketLimit = Integer.MAX_VALUE;\n        }else{\n          bucketLimit = offsetInt+overfetchInt+rowsInt;\n        }\n      } catch (NumberFormatException e) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - limit '%s' is not a valid integer.\", expression, rowsStr));\n      }\n    }\n\n    if(bucketLimitExpression != null) {\n      String bucketLimitStr = ((StreamExpressionValue) bucketLimitExpression.getParameter()).getValue();\n      try {\n        bucketLimit = Integer.parseInt(bucketLimitStr);\n        bucketLimitSet = true;\n\n        if (bucketLimit <= 0 && bucketLimit != -1) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - bucketSizeLimit '%s' must be greater than 0 or -1.\", expression, bucketLimitStr));\n        }\n\n        // Bucket limit is set. So set rows.\n        if(bucketLimit == -1) {\n         rowsInt = bucketLimit = Integer.MAX_VALUE;\n        } else {\n          rowsInt = bucketLimit;\n        }\n      }  catch (NumberFormatException e) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - bucketSizeLimit '%s' is not a valid integer.\", expression, bucketLimitStr));\n      }\n    }\n\n    if(rowsExpression == null && bucketLimitExpression == null) {\n      rowsInt = 10;\n      if(overfetchInt == -1) {\n        bucketLimit = Integer.MAX_VALUE;\n      }else{\n        bucketLimit = offsetInt+overfetchInt+rowsInt;\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName,\n         params,\n         buckets,\n         bucketSorts,\n         metrics,\n         rowsInt,\n         offsetInt,\n         bucketLimit,\n         refine,\n         methodStr,\n         bucketLimitSet,\n         overfetchInt,\n         zkHost);\n  }\n\n","sourceOld":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter bucketLimitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    StreamExpressionNamedParameter rowsExpression = factory.getNamedOperand(expression, \"rows\");\n    StreamExpressionNamedParameter offsetExpression = factory.getNamedOperand(expression, \"offset\");\n    StreamExpressionNamedParameter overfetchExpression = factory.getNamedOperand(expression, \"overfetch\");\n    StreamExpressionNamedParameter refineExpression = factory.getNamedOperand(expression, \"refine\");\n    StreamExpressionNamedParameter methodExpression = factory.getNamedOperand(expression, \"method\");\n\n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"buckets\") &&\n          !namedParam.getName().equals(\"bucketSorts\") &&\n          !namedParam.getName().equals(\"bucketSizeLimit\") &&\n          !namedParam.getName().equals(\"method\") &&\n          !namedParam.getName().equals(\"offset\") &&\n          !namedParam.getName().equals(\"rows\") &&\n          !namedParam.getName().equals(\"refine\") &&\n          !namedParam.getName().equals(\"overfetch\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n\n    String bucketSortString = null;\n\n    if(bucketSortExpression == null) {\n      throw new IOException(\"The bucketSorts parameter is required for the facet function.\");\n    } else {\n      bucketSortString = ((StreamExpressionValue)bucketSortExpression.getParameter()).getValue();\n    }\n\n    FieldComparator[] bucketSorts = parseBucketSorts(bucketSortString, buckets);\n\n    if(null == bucketSorts || 0 == bucketSorts.length) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx) {\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    boolean refine = false;\n\n    if(refineExpression != null) {\n      String refineStr = ((StreamExpressionValue) refineExpression.getParameter()).getValue();\n      if (refineStr != null) {\n        refine = Boolean.parseBoolean(refineStr);\n      }\n    }\n\n    if(bucketLimitExpression != null && (rowsExpression != null ||\n                                         offsetExpression != null ||\n                                         overfetchExpression != null)) {\n      throw new IOException(\"bucketSizeLimit is incompatible with rows, offset and overfetch.\");\n    }\n\n    String methodStr = null;\n    if(methodExpression != null) {\n      methodStr = ((StreamExpressionValue) methodExpression.getParameter()).getValue();\n    }\n\n    int overfetchInt = 150;\n    if(overfetchExpression != null) {\n      String overfetchStr = ((StreamExpressionValue) overfetchExpression.getParameter()).getValue();\n      overfetchInt = Integer.parseInt(overfetchStr);\n    }\n\n    int offsetInt = 0;\n    if(offsetExpression != null) {\n      String offsetStr = ((StreamExpressionValue) offsetExpression.getParameter()).getValue();\n      offsetInt = Integer.parseInt(offsetStr);\n    }\n\n    int rowsInt = Integer.MIN_VALUE;\n    int bucketLimit = Integer.MIN_VALUE;\n    boolean bucketLimitSet = false;\n\n    if(null != rowsExpression) {\n      String rowsStr = ((StreamExpressionValue)rowsExpression.getParameter()).getValue();\n      try {\n        rowsInt = Integer.parseInt(rowsStr);\n        if (rowsInt <= 0 && rowsInt != -1) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - limit '%s' must be greater than 0 or -1.\", expression, rowsStr));\n        }\n        //Rows is set so configure the bucketLimitSize\n        if(rowsInt == -1) {\n          bucketLimit = rowsInt = Integer.MAX_VALUE;\n        } else if(overfetchInt == -1) {\n          bucketLimit = Integer.MAX_VALUE;\n        }else{\n          bucketLimit = offsetInt+overfetchInt+rowsInt;\n        }\n      } catch (NumberFormatException e) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - limit '%s' is not a valid integer.\", expression, rowsStr));\n      }\n    }\n\n    if(bucketLimitExpression != null) {\n      String bucketLimitStr = ((StreamExpressionValue) bucketLimitExpression.getParameter()).getValue();\n      try {\n        bucketLimit = Integer.parseInt(bucketLimitStr);\n        bucketLimitSet = true;\n\n        if (bucketLimit <= 0 && bucketLimit != -1) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - bucketSizeLimit '%s' must be greater than 0 or -1.\", expression, bucketLimitStr));\n        }\n\n        // Bucket limit is set. So set rows.\n        if(bucketLimit == -1) {\n         rowsInt = bucketLimit = Integer.MAX_VALUE;\n        } else {\n          rowsInt = bucketLimit;\n        }\n      }  catch (NumberFormatException e) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - bucketSizeLimit '%s' is not a valid integer.\", expression, bucketLimitStr));\n      }\n    }\n\n    if(rowsExpression == null && bucketLimitExpression == null) {\n      rowsInt = 10;\n      if(overfetchInt == -1) {\n        bucketLimit = Integer.MAX_VALUE;\n      }else{\n        bucketLimit = offsetInt+overfetchInt+rowsInt;\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName,\n         params,\n         buckets,\n         bucketSorts,\n         metrics,\n         rowsInt,\n         offsetInt,\n         bucketLimit,\n         refine,\n         methodStr,\n         bucketLimitSet,\n         overfetchInt,\n         zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","date":1575925443,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter bucketLimitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    StreamExpressionNamedParameter rowsExpression = factory.getNamedOperand(expression, \"rows\");\n    StreamExpressionNamedParameter offsetExpression = factory.getNamedOperand(expression, \"offset\");\n    StreamExpressionNamedParameter overfetchExpression = factory.getNamedOperand(expression, \"overfetch\");\n    StreamExpressionNamedParameter refineExpression = factory.getNamedOperand(expression, \"refine\");\n    StreamExpressionNamedParameter methodExpression = factory.getNamedOperand(expression, \"method\");\n\n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"buckets\") &&\n          !namedParam.getName().equals(\"bucketSorts\") &&\n          !namedParam.getName().equals(\"bucketSizeLimit\") &&\n          !namedParam.getName().equals(\"method\") &&\n          !namedParam.getName().equals(\"offset\") &&\n          !namedParam.getName().equals(\"rows\") &&\n          !namedParam.getName().equals(\"refine\") &&\n          !namedParam.getName().equals(\"overfetch\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx) {\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(metrics.length == 0) {\n      metrics = new Metric[1];\n      metrics[0] = new CountMetric();\n    }\n\n    String bucketSortString = null;\n\n    if(bucketSortExpression == null) {\n      bucketSortString = metrics[0].getIdentifier()+\" desc\";\n    } else {\n      bucketSortString = ((StreamExpressionValue)bucketSortExpression.getParameter()).getValue();\n      if(bucketSortString.contains(\"(\") &&\n          metricExpressions.size() == 0 &&\n          (!bucketSortExpression.equals(\"count(*) desc\") &&\n           !bucketSortExpression.equals(\"count(*) asc\"))) {\n      //Attempting bucket sort on a metric that is not going to be calculated.\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - the bucketSort is being performed on a metric that is not being calculated.\",expression,collectionName));\n      }\n    }\n\n    FieldComparator[] bucketSorts = parseBucketSorts(bucketSortString, buckets);\n\n    if(null == bucketSorts || 0 == bucketSorts.length) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n\n\n\n    boolean refine = false;\n\n    if(refineExpression != null) {\n      String refineStr = ((StreamExpressionValue) refineExpression.getParameter()).getValue();\n      if (refineStr != null) {\n        refine = Boolean.parseBoolean(refineStr);\n      }\n    }\n\n    if(bucketLimitExpression != null && (rowsExpression != null ||\n                                         offsetExpression != null ||\n                                         overfetchExpression != null)) {\n      throw new IOException(\"bucketSizeLimit is incompatible with rows, offset and overfetch.\");\n    }\n\n    String methodStr = null;\n    if(methodExpression != null) {\n      methodStr = ((StreamExpressionValue) methodExpression.getParameter()).getValue();\n    }\n\n    int overfetchInt = 250;\n    if(overfetchExpression != null) {\n      String overfetchStr = ((StreamExpressionValue) overfetchExpression.getParameter()).getValue();\n      overfetchInt = Integer.parseInt(overfetchStr);\n    }\n\n    int offsetInt = 0;\n    if(offsetExpression != null) {\n      String offsetStr = ((StreamExpressionValue) offsetExpression.getParameter()).getValue();\n      offsetInt = Integer.parseInt(offsetStr);\n    }\n\n    int rowsInt = Integer.MIN_VALUE;\n    int bucketLimit = Integer.MIN_VALUE;\n    boolean bucketLimitSet = false;\n\n    if(null != rowsExpression) {\n      String rowsStr = ((StreamExpressionValue)rowsExpression.getParameter()).getValue();\n      try {\n        rowsInt = Integer.parseInt(rowsStr);\n        if (rowsInt <= 0 && rowsInt != -1) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - limit '%s' must be greater than 0 or -1.\", expression, rowsStr));\n        }\n        //Rows is set so configure the bucketLimitSize\n        if(rowsInt == -1) {\n          bucketLimit = rowsInt = Integer.MAX_VALUE;\n        } else if(overfetchInt == -1) {\n          bucketLimit = Integer.MAX_VALUE;\n        }else{\n          bucketLimit = offsetInt+overfetchInt+rowsInt;\n        }\n      } catch (NumberFormatException e) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - limit '%s' is not a valid integer.\", expression, rowsStr));\n      }\n    }\n\n    if(bucketLimitExpression != null) {\n      String bucketLimitStr = ((StreamExpressionValue) bucketLimitExpression.getParameter()).getValue();\n      try {\n        bucketLimit = Integer.parseInt(bucketLimitStr);\n        bucketLimitSet = true;\n\n        if (bucketLimit <= 0 && bucketLimit != -1) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - bucketSizeLimit '%s' must be greater than 0 or -1.\", expression, bucketLimitStr));\n        }\n\n        // Bucket limit is set. So set rows.\n        if(bucketLimit == -1) {\n         rowsInt = bucketLimit = Integer.MAX_VALUE;\n        } else {\n          rowsInt = bucketLimit;\n        }\n      }  catch (NumberFormatException e) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - bucketSizeLimit '%s' is not a valid integer.\", expression, bucketLimitStr));\n      }\n    }\n\n    if(rowsExpression == null && bucketLimitExpression == null) {\n      rowsInt = 10;\n      if(overfetchInt == -1) {\n        bucketLimit = Integer.MAX_VALUE;\n      }else{\n        bucketLimit = offsetInt+overfetchInt+rowsInt;\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName,\n         params,\n         buckets,\n         bucketSorts,\n         metrics,\n         rowsInt,\n         offsetInt,\n         bucketLimit,\n         refine,\n         methodStr,\n         bucketLimitSet,\n         overfetchInt,\n         zkHost);\n  }\n\n","sourceOld":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter bucketLimitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    StreamExpressionNamedParameter rowsExpression = factory.getNamedOperand(expression, \"rows\");\n    StreamExpressionNamedParameter offsetExpression = factory.getNamedOperand(expression, \"offset\");\n    StreamExpressionNamedParameter overfetchExpression = factory.getNamedOperand(expression, \"overfetch\");\n    StreamExpressionNamedParameter refineExpression = factory.getNamedOperand(expression, \"refine\");\n    StreamExpressionNamedParameter methodExpression = factory.getNamedOperand(expression, \"method\");\n\n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"buckets\") &&\n          !namedParam.getName().equals(\"bucketSorts\") &&\n          !namedParam.getName().equals(\"bucketSizeLimit\") &&\n          !namedParam.getName().equals(\"method\") &&\n          !namedParam.getName().equals(\"offset\") &&\n          !namedParam.getName().equals(\"rows\") &&\n          !namedParam.getName().equals(\"refine\") &&\n          !namedParam.getName().equals(\"overfetch\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n\n    String bucketSortString = null;\n\n    if(bucketSortExpression == null) {\n      throw new IOException(\"The bucketSorts parameter is required for the facet function.\");\n    } else {\n      bucketSortString = ((StreamExpressionValue)bucketSortExpression.getParameter()).getValue();\n    }\n\n    FieldComparator[] bucketSorts = parseBucketSorts(bucketSortString, buckets);\n\n    if(null == bucketSorts || 0 == bucketSorts.length) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx) {\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    boolean refine = false;\n\n    if(refineExpression != null) {\n      String refineStr = ((StreamExpressionValue) refineExpression.getParameter()).getValue();\n      if (refineStr != null) {\n        refine = Boolean.parseBoolean(refineStr);\n      }\n    }\n\n    if(bucketLimitExpression != null && (rowsExpression != null ||\n                                         offsetExpression != null ||\n                                         overfetchExpression != null)) {\n      throw new IOException(\"bucketSizeLimit is incompatible with rows, offset and overfetch.\");\n    }\n\n    String methodStr = null;\n    if(methodExpression != null) {\n      methodStr = ((StreamExpressionValue) methodExpression.getParameter()).getValue();\n    }\n\n    int overfetchInt = 150;\n    if(overfetchExpression != null) {\n      String overfetchStr = ((StreamExpressionValue) overfetchExpression.getParameter()).getValue();\n      overfetchInt = Integer.parseInt(overfetchStr);\n    }\n\n    int offsetInt = 0;\n    if(offsetExpression != null) {\n      String offsetStr = ((StreamExpressionValue) offsetExpression.getParameter()).getValue();\n      offsetInt = Integer.parseInt(offsetStr);\n    }\n\n    int rowsInt = Integer.MIN_VALUE;\n    int bucketLimit = Integer.MIN_VALUE;\n    boolean bucketLimitSet = false;\n\n    if(null != rowsExpression) {\n      String rowsStr = ((StreamExpressionValue)rowsExpression.getParameter()).getValue();\n      try {\n        rowsInt = Integer.parseInt(rowsStr);\n        if (rowsInt <= 0 && rowsInt != -1) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - limit '%s' must be greater than 0 or -1.\", expression, rowsStr));\n        }\n        //Rows is set so configure the bucketLimitSize\n        if(rowsInt == -1) {\n          bucketLimit = rowsInt = Integer.MAX_VALUE;\n        } else if(overfetchInt == -1) {\n          bucketLimit = Integer.MAX_VALUE;\n        }else{\n          bucketLimit = offsetInt+overfetchInt+rowsInt;\n        }\n      } catch (NumberFormatException e) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - limit '%s' is not a valid integer.\", expression, rowsStr));\n      }\n    }\n\n    if(bucketLimitExpression != null) {\n      String bucketLimitStr = ((StreamExpressionValue) bucketLimitExpression.getParameter()).getValue();\n      try {\n        bucketLimit = Integer.parseInt(bucketLimitStr);\n        bucketLimitSet = true;\n\n        if (bucketLimit <= 0 && bucketLimit != -1) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - bucketSizeLimit '%s' must be greater than 0 or -1.\", expression, bucketLimitStr));\n        }\n\n        // Bucket limit is set. So set rows.\n        if(bucketLimit == -1) {\n         rowsInt = bucketLimit = Integer.MAX_VALUE;\n        } else {\n          rowsInt = bucketLimit;\n        }\n      }  catch (NumberFormatException e) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - bucketSizeLimit '%s' is not a valid integer.\", expression, bucketLimitStr));\n      }\n    }\n\n    if(rowsExpression == null && bucketLimitExpression == null) {\n      rowsInt = 10;\n      if(overfetchInt == -1) {\n        bucketLimit = Integer.MAX_VALUE;\n      }else{\n        bucketLimit = offsetInt+overfetchInt+rowsInt;\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName,\n         params,\n         buckets,\n         bucketSorts,\n         metrics,\n         rowsInt,\n         offsetInt,\n         bucketLimit,\n         refine,\n         methodStr,\n         bucketLimitSet,\n         overfetchInt,\n         zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7107555998ea86d6f61e2ad770687d674fa8e012","date":1575927428,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#FacetStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter bucketLimitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    StreamExpressionNamedParameter rowsExpression = factory.getNamedOperand(expression, \"rows\");\n    StreamExpressionNamedParameter offsetExpression = factory.getNamedOperand(expression, \"offset\");\n    StreamExpressionNamedParameter overfetchExpression = factory.getNamedOperand(expression, \"overfetch\");\n    StreamExpressionNamedParameter refineExpression = factory.getNamedOperand(expression, \"refine\");\n    StreamExpressionNamedParameter methodExpression = factory.getNamedOperand(expression, \"method\");\n\n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"buckets\") &&\n          !namedParam.getName().equals(\"bucketSorts\") &&\n          !namedParam.getName().equals(\"bucketSizeLimit\") &&\n          !namedParam.getName().equals(\"method\") &&\n          !namedParam.getName().equals(\"offset\") &&\n          !namedParam.getName().equals(\"rows\") &&\n          !namedParam.getName().equals(\"refine\") &&\n          !namedParam.getName().equals(\"overfetch\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx) {\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(metrics.length == 0) {\n      metrics = new Metric[1];\n      metrics[0] = new CountMetric();\n    }\n\n    String bucketSortString = null;\n\n    if(bucketSortExpression == null) {\n      bucketSortString = metrics[0].getIdentifier()+\" desc\";\n    } else {\n      bucketSortString = ((StreamExpressionValue)bucketSortExpression.getParameter()).getValue();\n      if(bucketSortString.contains(\"(\") &&\n          metricExpressions.size() == 0 &&\n          (!bucketSortExpression.equals(\"count(*) desc\") &&\n           !bucketSortExpression.equals(\"count(*) asc\"))) {\n      //Attempting bucket sort on a metric that is not going to be calculated.\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - the bucketSort is being performed on a metric that is not being calculated.\",expression,collectionName));\n      }\n    }\n\n    FieldComparator[] bucketSorts = parseBucketSorts(bucketSortString, buckets);\n\n    if(null == bucketSorts || 0 == bucketSorts.length) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n\n\n\n    boolean refine = false;\n\n    if(refineExpression != null) {\n      String refineStr = ((StreamExpressionValue) refineExpression.getParameter()).getValue();\n      if (refineStr != null) {\n        refine = Boolean.parseBoolean(refineStr);\n      }\n    }\n\n    if(bucketLimitExpression != null && (rowsExpression != null ||\n                                         offsetExpression != null ||\n                                         overfetchExpression != null)) {\n      throw new IOException(\"bucketSizeLimit is incompatible with rows, offset and overfetch.\");\n    }\n\n    String methodStr = null;\n    if(methodExpression != null) {\n      methodStr = ((StreamExpressionValue) methodExpression.getParameter()).getValue();\n    }\n\n    int overfetchInt = 250;\n    if(overfetchExpression != null) {\n      String overfetchStr = ((StreamExpressionValue) overfetchExpression.getParameter()).getValue();\n      overfetchInt = Integer.parseInt(overfetchStr);\n    }\n\n    int offsetInt = 0;\n    if(offsetExpression != null) {\n      String offsetStr = ((StreamExpressionValue) offsetExpression.getParameter()).getValue();\n      offsetInt = Integer.parseInt(offsetStr);\n    }\n\n    int rowsInt = Integer.MIN_VALUE;\n    int bucketLimit = Integer.MIN_VALUE;\n    boolean bucketLimitSet = false;\n\n    if(null != rowsExpression) {\n      String rowsStr = ((StreamExpressionValue)rowsExpression.getParameter()).getValue();\n      try {\n        rowsInt = Integer.parseInt(rowsStr);\n        if (rowsInt <= 0 && rowsInt != -1) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - limit '%s' must be greater than 0 or -1.\", expression, rowsStr));\n        }\n        //Rows is set so configure the bucketLimitSize\n        if(rowsInt == -1) {\n          bucketLimit = rowsInt = Integer.MAX_VALUE;\n        } else if(overfetchInt == -1) {\n          bucketLimit = Integer.MAX_VALUE;\n        }else{\n          bucketLimit = offsetInt+overfetchInt+rowsInt;\n        }\n      } catch (NumberFormatException e) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - limit '%s' is not a valid integer.\", expression, rowsStr));\n      }\n    }\n\n    if(bucketLimitExpression != null) {\n      String bucketLimitStr = ((StreamExpressionValue) bucketLimitExpression.getParameter()).getValue();\n      try {\n        bucketLimit = Integer.parseInt(bucketLimitStr);\n        bucketLimitSet = true;\n\n        if (bucketLimit <= 0 && bucketLimit != -1) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - bucketSizeLimit '%s' must be greater than 0 or -1.\", expression, bucketLimitStr));\n        }\n\n        // Bucket limit is set. So set rows.\n        if(bucketLimit == -1) {\n         rowsInt = bucketLimit = Integer.MAX_VALUE;\n        } else {\n          rowsInt = bucketLimit;\n        }\n      }  catch (NumberFormatException e) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - bucketSizeLimit '%s' is not a valid integer.\", expression, bucketLimitStr));\n      }\n    }\n\n    if(rowsExpression == null && bucketLimitExpression == null) {\n      rowsInt = 10;\n      if(overfetchInt == -1) {\n        bucketLimit = Integer.MAX_VALUE;\n      }else{\n        bucketLimit = offsetInt+overfetchInt+rowsInt;\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName,\n         params,\n         buckets,\n         bucketSorts,\n         metrics,\n         rowsInt,\n         offsetInt,\n         bucketLimit,\n         refine,\n         methodStr,\n         bucketLimitSet,\n         overfetchInt,\n         zkHost);\n  }\n\n","sourceOld":"  public FacetStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketExpression = factory.getNamedOperand(expression, \"buckets\");\n    StreamExpressionNamedParameter bucketSortExpression = factory.getNamedOperand(expression, \"bucketSorts\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter bucketLimitExpression = factory.getNamedOperand(expression, \"bucketSizeLimit\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    StreamExpressionNamedParameter rowsExpression = factory.getNamedOperand(expression, \"rows\");\n    StreamExpressionNamedParameter offsetExpression = factory.getNamedOperand(expression, \"offset\");\n    StreamExpressionNamedParameter overfetchExpression = factory.getNamedOperand(expression, \"overfetch\");\n    StreamExpressionNamedParameter refineExpression = factory.getNamedOperand(expression, \"refine\");\n    StreamExpressionNamedParameter methodExpression = factory.getNamedOperand(expression, \"method\");\n\n    // Validate there are no unknown parameters\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"buckets\") &&\n          !namedParam.getName().equals(\"bucketSorts\") &&\n          !namedParam.getName().equals(\"bucketSizeLimit\") &&\n          !namedParam.getName().equals(\"method\") &&\n          !namedParam.getName().equals(\"offset\") &&\n          !namedParam.getName().equals(\"rows\") &&\n          !namedParam.getName().equals(\"refine\") &&\n          !namedParam.getName().equals(\"overfetch\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // buckets, required - comma separated\n    Bucket[] buckets = null;\n    if(null != bucketExpression){\n      if(bucketExpression.getParameter() instanceof StreamExpressionValue){\n        String[] keys = ((StreamExpressionValue)bucketExpression.getParameter()).getValue().split(\",\");\n        if(0 != keys.length){\n          buckets = new Bucket[keys.length];\n          for(int idx = 0; idx < keys.length; ++idx){\n            buckets[idx] = new Bucket(keys[idx].trim());\n          }\n        }\n      }\n    }\n\n    if(null == buckets){      \n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket expected. eg. 'buckets=\\\"name\\\"'\",expression,collectionName));\n    }\n\n    String bucketSortString = null;\n\n    if(bucketSortExpression == null) {\n      throw new IOException(\"The bucketSorts parameter is required for the facet function.\");\n    } else {\n      bucketSortString = ((StreamExpressionValue)bucketSortExpression.getParameter()).getValue();\n    }\n\n    FieldComparator[] bucketSorts = parseBucketSorts(bucketSortString, buckets);\n\n    if(null == bucketSorts || 0 == bucketSorts.length) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one bucket sort expected. eg. 'bucketSorts=\\\"name asc\\\"'\",expression,collectionName));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx) {\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    boolean refine = false;\n\n    if(refineExpression != null) {\n      String refineStr = ((StreamExpressionValue) refineExpression.getParameter()).getValue();\n      if (refineStr != null) {\n        refine = Boolean.parseBoolean(refineStr);\n      }\n    }\n\n    if(bucketLimitExpression != null && (rowsExpression != null ||\n                                         offsetExpression != null ||\n                                         overfetchExpression != null)) {\n      throw new IOException(\"bucketSizeLimit is incompatible with rows, offset and overfetch.\");\n    }\n\n    String methodStr = null;\n    if(methodExpression != null) {\n      methodStr = ((StreamExpressionValue) methodExpression.getParameter()).getValue();\n    }\n\n    int overfetchInt = 150;\n    if(overfetchExpression != null) {\n      String overfetchStr = ((StreamExpressionValue) overfetchExpression.getParameter()).getValue();\n      overfetchInt = Integer.parseInt(overfetchStr);\n    }\n\n    int offsetInt = 0;\n    if(offsetExpression != null) {\n      String offsetStr = ((StreamExpressionValue) offsetExpression.getParameter()).getValue();\n      offsetInt = Integer.parseInt(offsetStr);\n    }\n\n    int rowsInt = Integer.MIN_VALUE;\n    int bucketLimit = Integer.MIN_VALUE;\n    boolean bucketLimitSet = false;\n\n    if(null != rowsExpression) {\n      String rowsStr = ((StreamExpressionValue)rowsExpression.getParameter()).getValue();\n      try {\n        rowsInt = Integer.parseInt(rowsStr);\n        if (rowsInt <= 0 && rowsInt != -1) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - limit '%s' must be greater than 0 or -1.\", expression, rowsStr));\n        }\n        //Rows is set so configure the bucketLimitSize\n        if(rowsInt == -1) {\n          bucketLimit = rowsInt = Integer.MAX_VALUE;\n        } else if(overfetchInt == -1) {\n          bucketLimit = Integer.MAX_VALUE;\n        }else{\n          bucketLimit = offsetInt+overfetchInt+rowsInt;\n        }\n      } catch (NumberFormatException e) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - limit '%s' is not a valid integer.\", expression, rowsStr));\n      }\n    }\n\n    if(bucketLimitExpression != null) {\n      String bucketLimitStr = ((StreamExpressionValue) bucketLimitExpression.getParameter()).getValue();\n      try {\n        bucketLimit = Integer.parseInt(bucketLimitStr);\n        bucketLimitSet = true;\n\n        if (bucketLimit <= 0 && bucketLimit != -1) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - bucketSizeLimit '%s' must be greater than 0 or -1.\", expression, bucketLimitStr));\n        }\n\n        // Bucket limit is set. So set rows.\n        if(bucketLimit == -1) {\n         rowsInt = bucketLimit = Integer.MAX_VALUE;\n        } else {\n          rowsInt = bucketLimit;\n        }\n      }  catch (NumberFormatException e) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - bucketSizeLimit '%s' is not a valid integer.\", expression, bucketLimitStr));\n      }\n    }\n\n    if(rowsExpression == null && bucketLimitExpression == null) {\n      rowsInt = 10;\n      if(overfetchInt == -1) {\n        bucketLimit = Integer.MAX_VALUE;\n      }else{\n        bucketLimit = offsetInt+overfetchInt+rowsInt;\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName,\n         params,\n         buckets,\n         bucketSorts,\n         metrics,\n         rowsInt,\n         offsetInt,\n         bucketLimit,\n         refine,\n         methodStr,\n         bucketLimitSet,\n         overfetchInt,\n         zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["5a209db4770770843a101e5dfe46086a63507fd3"],"5a209db4770770843a101e5dfe46086a63507fd3":["d54dd7a8b2bd4a9f0eb00fc325cbef1846b14b34"],"d54dd7a8b2bd4a9f0eb00fc325cbef1846b14b34":["011d43366b2da54d1652d93e7ec6412848eeb009"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["a027750b86452a8dcd054ac993d54b203dae9102"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a027750b86452a8dcd054ac993d54b203dae9102","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a027750b86452a8dcd054ac993d54b203dae9102","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"5287d62ad5da27d35a88ada646ae7d9adfb76826":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7107555998ea86d6f61e2ad770687d674fa8e012":["5a209db4770770843a101e5dfe46086a63507fd3","76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"011d43366b2da54d1652d93e7ec6412848eeb009":["58199c2d60bb7cc4bec1a7e70b16f72c4fc7d9d9"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a027750b86452a8dcd054ac993d54b203dae9102","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"a027750b86452a8dcd054ac993d54b203dae9102":["5287d62ad5da27d35a88ada646ae7d9adfb76826"],"58199c2d60bb7cc4bec1a7e70b16f72c4fc7d9d9":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"]},"commit2Childs":{"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["7107555998ea86d6f61e2ad770687d674fa8e012","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a209db4770770843a101e5dfe46086a63507fd3":["76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","7107555998ea86d6f61e2ad770687d674fa8e012"],"d54dd7a8b2bd4a9f0eb00fc325cbef1846b14b34":["5a209db4770770843a101e5dfe46086a63507fd3"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","58199c2d60bb7cc4bec1a7e70b16f72c4fc7d9d9"],"5287d62ad5da27d35a88ada646ae7d9adfb76826":["a027750b86452a8dcd054ac993d54b203dae9102"],"7107555998ea86d6f61e2ad770687d674fa8e012":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5287d62ad5da27d35a88ada646ae7d9adfb76826"],"011d43366b2da54d1652d93e7ec6412848eeb009":["d54dd7a8b2bd4a9f0eb00fc325cbef1846b14b34"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"a027750b86452a8dcd054ac993d54b203dae9102":["826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"58199c2d60bb7cc4bec1a7e70b16f72c4fc7d9d9":["011d43366b2da54d1652d93e7ec6412848eeb009"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7107555998ea86d6f61e2ad770687d674fa8e012","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}