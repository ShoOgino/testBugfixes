{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesTypeCompatibility#testAddCompatibleDoubleTypes2().mjava","commits":[{"id":"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18","date":1339188570,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesTypeCompatibility#testAddCompatibleDoubleTypes2().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddCompatibleDoubleTypes2() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    int numIter = atLeast(10);\n    for (int i = 0; i < numIter; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      int numDocs = atLeast(100);\n      \n      iwc.setMaxBufferedDocs(2 * numDocs); // make sure we hit the same DWPT\n                                           // here\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setRAMPerThreadHardLimitMB(2000);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexableField[] fields = new IndexableField[] {\n          new DoubleDocValuesField(\"f\", 1.0), new IntDocValuesField(\"f\", 1),\n          new ShortDocValuesField(\"f\", (short) 1),\n          new ByteDocValuesField(\"f\", (byte) 1)};\n      int base = random().nextInt(fields.length - 1);\n      \n      addDoc(writer, fields[base]);\n      \n      for (int j = 0; j < numDocs; j++) {\n        int f = base + random().nextInt(fields.length - base);\n        addDoc(writer, fields[f]);\n      }\n      writer.close();\n      dir.close();\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesTypeCompatibility#testAddCompatibleDoubleTypes2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesTypeCompatibility#testAddCompatibleDoubleTypes2().mjava","sourceNew":"  public void testAddCompatibleDoubleTypes2() throws IOException {\n    int numIter = atLeast(10);\n    for (int i = 0; i < numIter; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      int numDocs = atLeast(100);\n      \n      iwc.setMaxBufferedDocs(2 * numDocs); // make sure we hit the same DWPT\n                                           // here\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setRAMPerThreadHardLimitMB(2000);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexableField[] fields = new IndexableField[] {\n          new DoubleDocValuesField(\"f\", 1.0), new IntDocValuesField(\"f\", 1),\n          new ShortDocValuesField(\"f\", (short) 1),\n          new ByteDocValuesField(\"f\", (byte) 1)};\n      int base = random().nextInt(fields.length - 1);\n      \n      addDoc(writer, fields[base]);\n      \n      for (int j = 0; j < numDocs; j++) {\n        int f = base + random().nextInt(fields.length - base);\n        addDoc(writer, fields[f]);\n      }\n      writer.close();\n      dir.close();\n    }\n    \n  }\n\n","sourceOld":"  public void testAddCompatibleDoubleTypes2() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    int numIter = atLeast(10);\n    for (int i = 0; i < numIter; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      int numDocs = atLeast(100);\n      \n      iwc.setMaxBufferedDocs(2 * numDocs); // make sure we hit the same DWPT\n                                           // here\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setRAMPerThreadHardLimitMB(2000);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexableField[] fields = new IndexableField[] {\n          new DoubleDocValuesField(\"f\", 1.0), new IntDocValuesField(\"f\", 1),\n          new ShortDocValuesField(\"f\", (short) 1),\n          new ByteDocValuesField(\"f\", (byte) 1)};\n      int base = random().nextInt(fields.length - 1);\n      \n      addDoc(writer, fields[base]);\n      \n      for (int j = 0; j < numDocs; j++) {\n        int f = base + random().nextInt(fields.length - base);\n        addDoc(writer, fields[f]);\n      }\n      writer.close();\n      dir.close();\n    }\n    \n  }\n\n","bugFix":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesTypeCompatibility#testAddCompatibleDoubleTypes2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesTypeCompatibility#testAddCompatibleDoubleTypes2().mjava","sourceNew":"  public void testAddCompatibleDoubleTypes2() throws IOException {\n    int numIter = atLeast(10);\n    for (int i = 0; i < numIter; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      int numDocs = atLeast(100);\n      \n      iwc.setMaxBufferedDocs(2 * numDocs); // make sure we hit the same DWPT\n                                           // here\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setRAMPerThreadHardLimitMB(2000);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexableField[] fields = new IndexableField[] {\n          new DoubleDocValuesField(\"f\", 1.0), new IntDocValuesField(\"f\", 1),\n          new ShortDocValuesField(\"f\", (short) 1),\n          new ByteDocValuesField(\"f\", (byte) 1)};\n      int base = random().nextInt(fields.length - 1);\n      \n      addDoc(writer, fields[base]);\n      \n      for (int j = 0; j < numDocs; j++) {\n        int f = base + random().nextInt(fields.length - base);\n        addDoc(writer, fields[f]);\n      }\n      writer.close();\n      dir.close();\n    }\n    \n  }\n\n","sourceOld":"  public void testAddCompatibleDoubleTypes2() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    int numIter = atLeast(10);\n    for (int i = 0; i < numIter; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      int numDocs = atLeast(100);\n      \n      iwc.setMaxBufferedDocs(2 * numDocs); // make sure we hit the same DWPT\n                                           // here\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setRAMPerThreadHardLimitMB(2000);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexableField[] fields = new IndexableField[] {\n          new DoubleDocValuesField(\"f\", 1.0), new IntDocValuesField(\"f\", 1),\n          new ShortDocValuesField(\"f\", (short) 1),\n          new ByteDocValuesField(\"f\", (byte) 1)};\n      int base = random().nextInt(fields.length - 1);\n      \n      addDoc(writer, fields[base]);\n      \n      for (int j = 0; j < numDocs; j++) {\n        int f = base + random().nextInt(fields.length - base);\n        addDoc(writer, fields[f]);\n      }\n      writer.close();\n      dir.close();\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesTypeCompatibility#testAddCompatibleDoubleTypes2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesTypeCompatibility#testAddCompatibleDoubleTypes2().mjava","sourceNew":"  public void testAddCompatibleDoubleTypes2() throws IOException {\n    int numIter = atLeast(10);\n    for (int i = 0; i < numIter; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      int numDocs = atLeast(100);\n      \n      iwc.setMaxBufferedDocs(2 * numDocs); // make sure we hit the same DWPT\n                                           // here\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setRAMPerThreadHardLimitMB(2000);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      Field[] fields = new Field[] {\n          new DoubleDocValuesField(\"f\", 1.0), new IntDocValuesField(\"f\", 1),\n          new ShortDocValuesField(\"f\", (short) 1),\n          new ByteDocValuesField(\"f\", (byte) 1)};\n      int base = random().nextInt(fields.length - 1);\n      \n      addDoc(writer, fields[base]);\n      \n      for (int j = 0; j < numDocs; j++) {\n        int f = base + random().nextInt(fields.length - base);\n        addDoc(writer, fields[f]);\n      }\n      writer.close();\n      dir.close();\n    }\n    \n  }\n\n","sourceOld":"  public void testAddCompatibleDoubleTypes2() throws IOException {\n    int numIter = atLeast(10);\n    for (int i = 0; i < numIter; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      int numDocs = atLeast(100);\n      \n      iwc.setMaxBufferedDocs(2 * numDocs); // make sure we hit the same DWPT\n                                           // here\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setRAMPerThreadHardLimitMB(2000);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexableField[] fields = new IndexableField[] {\n          new DoubleDocValuesField(\"f\", 1.0), new IntDocValuesField(\"f\", 1),\n          new ShortDocValuesField(\"f\", (short) 1),\n          new ByteDocValuesField(\"f\", (byte) 1)};\n      int base = random().nextInt(fields.length - 1);\n      \n      addDoc(writer, fields[base]);\n      \n      for (int j = 0; j < numDocs; j++) {\n        int f = base + random().nextInt(fields.length - base);\n        addDoc(writer, fields[f]);\n      }\n      writer.close();\n      dir.close();\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesTypeCompatibility#testAddCompatibleDoubleTypes2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesTypeCompatibility#testAddCompatibleDoubleTypes2().mjava","sourceNew":"  public void testAddCompatibleDoubleTypes2() throws IOException {\n    int numIter = atLeast(10);\n    for (int i = 0; i < numIter; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      int numDocs = atLeast(100);\n      \n      iwc.setMaxBufferedDocs(2 * numDocs); // make sure we hit the same DWPT\n                                           // here\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setRAMPerThreadHardLimitMB(2000);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      Field[] fields = new Field[] {\n          new DoubleDocValuesField(\"f\", 1.0), new IntDocValuesField(\"f\", 1),\n          new ShortDocValuesField(\"f\", (short) 1),\n          new ByteDocValuesField(\"f\", (byte) 1)};\n      int base = random().nextInt(fields.length - 1);\n      \n      addDoc(writer, fields[base]);\n      \n      for (int j = 0; j < numDocs; j++) {\n        int f = base + random().nextInt(fields.length - base);\n        addDoc(writer, fields[f]);\n      }\n      writer.close();\n      dir.close();\n    }\n    \n  }\n\n","sourceOld":"  public void testAddCompatibleDoubleTypes2() throws IOException {\n    int numIter = atLeast(10);\n    for (int i = 0; i < numIter; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      int numDocs = atLeast(100);\n      \n      iwc.setMaxBufferedDocs(2 * numDocs); // make sure we hit the same DWPT\n                                           // here\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setRAMPerThreadHardLimitMB(2000);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexableField[] fields = new IndexableField[] {\n          new DoubleDocValuesField(\"f\", 1.0), new IntDocValuesField(\"f\", 1),\n          new ShortDocValuesField(\"f\", (short) 1),\n          new ByteDocValuesField(\"f\", (byte) 1)};\n      int base = random().nextInt(fields.length - 1);\n      \n      addDoc(writer, fields[base]);\n      \n      for (int j = 0; j < numDocs; j++) {\n        int f = base + random().nextInt(fields.length - base);\n        addDoc(writer, fields[f]);\n      }\n      writer.close();\n      dir.close();\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2893fd5349134af382d33ccc3d84840394c6c1","date":1353682567,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesTypeCompatibility#testAddCompatibleDoubleTypes2().mjava","sourceNew":null,"sourceOld":"  public void testAddCompatibleDoubleTypes2() throws IOException {\n    int numIter = atLeast(10);\n    for (int i = 0; i < numIter; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      int numDocs = atLeast(100);\n      \n      iwc.setMaxBufferedDocs(2 * numDocs); // make sure we hit the same DWPT\n                                           // here\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setRAMPerThreadHardLimitMB(2000);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      Field[] fields = new Field[] {\n          new DoubleDocValuesField(\"f\", 1.0), new IntDocValuesField(\"f\", 1),\n          new ShortDocValuesField(\"f\", (short) 1),\n          new ByteDocValuesField(\"f\", (byte) 1)};\n      int base = random().nextInt(fields.length - 1);\n      \n      addDoc(writer, fields[base]);\n      \n      for (int j = 0; j < numDocs; j++) {\n        int f = base + random().nextInt(fields.length - base);\n        addDoc(writer, fields[f]);\n      }\n      writer.close();\n      dir.close();\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesTypeCompatibility#testAddCompatibleDoubleTypes2().mjava","sourceNew":null,"sourceOld":"  public void testAddCompatibleDoubleTypes2() throws IOException {\n    int numIter = atLeast(10);\n    for (int i = 0; i < numIter; i++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random()));\n      int numDocs = atLeast(100);\n      \n      iwc.setMaxBufferedDocs(2 * numDocs); // make sure we hit the same DWPT\n                                           // here\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setRAMPerThreadHardLimitMB(2000);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      Field[] fields = new Field[] {\n          new DoubleDocValuesField(\"f\", 1.0), new IntDocValuesField(\"f\", 1),\n          new ShortDocValuesField(\"f\", (short) 1),\n          new ByteDocValuesField(\"f\", (byte) 1)};\n      int base = random().nextInt(fields.length - 1);\n      \n      addDoc(writer, fields[base]);\n      \n      for (int j = 0; j < numDocs; j++) {\n        int f = base + random().nextInt(fields.length - base);\n        addDoc(writer, fields[f]);\n      }\n      writer.close();\n      dir.close();\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409324b31a1419d7c05a38211168cf317e39be77":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","409324b31a1419d7c05a38211168cf317e39be77"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["1d028314cced5858683a1bb4741423d0f934257b","6e2893fd5349134af382d33ccc3d84840394c6c1"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["1d028314cced5858683a1bb4741423d0f934257b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"1d028314cced5858683a1bb4741423d0f934257b":["d4d69c535930b5cce125cff868d40f6373dc27d4","6e2893fd5349134af382d33ccc3d84840394c6c1"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["409324b31a1419d7c05a38211168cf317e39be77","1d028314cced5858683a1bb4741423d0f934257b","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}