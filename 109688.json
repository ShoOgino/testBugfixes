{"path":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter<Byte> fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter<Byte> fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c","date":1270671893,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter<Byte> fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","bugFix":["e450c7d50c2fc84c963d0d7ade9d3217d868064d","6bcde5e3f23911110baa101ed062b544162825b5","3a0b8ae4ac997de7adea27f34c380588fa28d646"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  public void testSparseIndex() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  public void testSparseIndex() throws IOException {\n    MockRAMDirectory dir = newDirectory(rand);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  public void testSparseIndex() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory(rand);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  public void testSparseIndex() throws IOException {\n    MockRAMDirectory dir = newDirectory(rand);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory(rand);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"150488c1317972164a9a824be05b1ba2ba0fc68c","date":1284316090,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    search.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs).\n  @Test\n  public void testSparseIndex() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\",Integer.toString(d), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\",\"body\", StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    writer.forceMerge(1);\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher search = newSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertEquals(\"find all\", 11, result.length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","150488c1317972164a9a824be05b1ba2ba0fc68c"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["150488c1317972164a9a824be05b1ba2ba0fc68c","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1509f151d7692d84fae414b2b799ac06ba60fcb4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"962d04139994fce5193143ef35615499a9a96d78":[],"790e1fde4caa765b3faaad3fbcd25c6973450336":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}