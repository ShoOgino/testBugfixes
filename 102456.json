{"path":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAutoGeneratePhraseQueries().mjava","commits":[{"id":"8b360a3d5b9d443b4e880d2c92724cffd7def8db","date":1490740768,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAutoGeneratePhraseQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n\n    // From synonyms.txt:\n    //\n    //     crow blackbird, grackle\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); // \"text\" has autoGeneratePhraseQueries=\"true\"\n      Query q = qParser.getQuery();\n      assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n      }\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); // \"text_sw\" doesn't specify autoGeneratePhraseQueries => default false\n        Query q = qParser.getQuery();\n        assertEquals(\"+((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n          q.toString());\n    }\n    \n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n                + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n            + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl)) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n            q.toString());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8d5f9da379ac10a8ebcbf30e00314c561652932b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36d81030ef9ff5ae6820e560c0833127181c7a2c","date":1490873946,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAutoGeneratePhraseQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n\n    // From synonyms.txt:\n    //\n    //     crow blackbird, grackle\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); // \"text\" has autoGeneratePhraseQueries=\"true\"\n      Query q = qParser.getQuery();\n      assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n      }\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); // \"text_sw\" doesn't specify autoGeneratePhraseQueries => default false\n        Query q = qParser.getQuery();\n        assertEquals(\"+((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n          q.toString());\n    }\n    \n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n                + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n            + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl)) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n            q.toString());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4260b228cfff6ad78ac88d519f0f7746529c3c","date":1493136145,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAutoGeneratePhraseQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAutoGeneratePhraseQueries().mjava","sourceNew":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n\n    // From synonyms.txt:\n    //\n    //     crow blackbird, grackle\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); // \"text\" has autoGeneratePhraseQueries=\"true\"\n        Query q = qParser.getQuery();\n        assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); // \"text_sw\" doesn't specify autoGeneratePhraseQueries => default false\n        Query q = qParser.getQuery();\n        assertEquals(\"+((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n                + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl)) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n\n","sourceOld":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n\n    // From synonyms.txt:\n    //\n    //     crow blackbird, grackle\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); // \"text\" has autoGeneratePhraseQueries=\"true\"\n      Query q = qParser.getQuery();\n      assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n      }\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); // \"text_sw\" doesn't specify autoGeneratePhraseQueries => default false\n        Query q = qParser.getQuery();\n        assertEquals(\"+((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n          q.toString());\n    }\n    \n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n                + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n            + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl)) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n            q.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["8d5f9da379ac10a8ebcbf30e00314c561652932b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a144790859eb303122988cd315215ff30f449d2","date":1493938430,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAutoGeneratePhraseQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAutoGeneratePhraseQueries().mjava","sourceNew":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    noSowParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    sowFalseParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n    sowTrueParams.add(\"df\", \"text\");\n\n    // From synonyms.txt:\n    //\n    //     crow blackbird, grackle\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); // \"text\" has autoGeneratePhraseQueries=\"true\"\n        Query q = qParser.getQuery();\n        assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); // \"text_sw\" doesn't specify autoGeneratePhraseQueries => default false\n        Query q = qParser.getQuery();\n        assertEquals(\"+((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n                + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl)) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n\n","sourceOld":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n\n    // From synonyms.txt:\n    //\n    //     crow blackbird, grackle\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); // \"text\" has autoGeneratePhraseQueries=\"true\"\n        Query q = qParser.getQuery();\n        assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); // \"text_sw\" doesn't specify autoGeneratePhraseQueries => default false\n        Query q = qParser.getQuery();\n        assertEquals(\"+((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n                + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl)) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAutoGeneratePhraseQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAutoGeneratePhraseQueries().mjava","sourceNew":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    noSowParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    sowFalseParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n    sowTrueParams.add(\"df\", \"text\");\n\n    // From synonyms.txt:\n    //\n    //     crow blackbird, grackle\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); // \"text\" has autoGeneratePhraseQueries=\"true\"\n        Query q = qParser.getQuery();\n        assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); // \"text_sw\" doesn't specify autoGeneratePhraseQueries => default false\n        Query q = qParser.getQuery();\n        assertEquals(\"+((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n                + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl)) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n\n","sourceOld":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n\n    // From synonyms.txt:\n    //\n    //     crow blackbird, grackle\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); // \"text\" has autoGeneratePhraseQueries=\"true\"\n      Query q = qParser.getQuery();\n      assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n      }\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); // \"text_sw\" doesn't specify autoGeneratePhraseQueries => default false\n        Query q = qParser.getQuery();\n        assertEquals(\"+((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n          q.toString());\n    }\n    \n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n                + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n            + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl)) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n            q.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d5f9da379ac10a8ebcbf30e00314c561652932b","date":1497616966,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAutoGeneratePhraseQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAutoGeneratePhraseQueries().mjava","sourceNew":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    noSowParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    sowFalseParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n    sowTrueParams.add(\"df\", \"text\");\n\n    // From synonyms.txt:\n    //\n    //     crow blackbird, grackle\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); // \"text\" has autoGeneratePhraseQueries=\"true\"\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl))\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); // \"text_sw\" doesn't specify autoGeneratePhraseQueries => default false\n        Query q = qParser.getQuery();\n        assertEquals(\"+(((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl))\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl))) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n\n","sourceOld":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    noSowParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    sowFalseParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n    sowTrueParams.add(\"df\", \"text\");\n\n    // From synonyms.txt:\n    //\n    //     crow blackbird, grackle\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); // \"text\" has autoGeneratePhraseQueries=\"true\"\n        Query q = qParser.getQuery();\n        assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); // \"text_sw\" doesn't specify autoGeneratePhraseQueries => default false\n        Query q = qParser.getQuery();\n        assertEquals(\"+((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n                + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl)) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n\n","bugFix":["7a4260b228cfff6ad78ac88d519f0f7746529c3c","8b360a3d5b9d443b4e880d2c92724cffd7def8db"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAutoGeneratePhraseQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAutoGeneratePhraseQueries().mjava","sourceNew":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    noSowParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    sowFalseParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n    sowTrueParams.add(\"df\", \"text\");\n\n    // From synonyms.txt:\n    //\n    //     crow blackbird, grackle\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); // \"text\" has autoGeneratePhraseQueries=\"true\"\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl))\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); // \"text_sw\" doesn't specify autoGeneratePhraseQueries => default false\n        Query q = qParser.getQuery();\n        assertEquals(\"+(((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl))\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl))) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n\n","sourceOld":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    noSowParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    sowFalseParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n    sowTrueParams.add(\"df\", \"text\");\n\n    // From synonyms.txt:\n    //\n    //     crow blackbird, grackle\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); // \"text\" has autoGeneratePhraseQueries=\"true\"\n        Query q = qParser.getQuery();\n        assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); // \"text_sw\" doesn't specify autoGeneratePhraseQueries => default false\n        Query q = qParser.getQuery();\n        assertEquals(\"+((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n                + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl)) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAutoGeneratePhraseQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAutoGeneratePhraseQueries().mjava","sourceNew":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    noSowParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    sowFalseParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n    sowTrueParams.add(\"df\", \"text\");\n\n    // From synonyms.txt:\n    //\n    //     crow blackbird, grackle\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); // \"text\" has autoGeneratePhraseQueries=\"true\"\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl))\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); // \"text_sw\" doesn't specify autoGeneratePhraseQueries => default false\n        Query q = qParser.getQuery();\n        assertEquals(\"+(((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl))\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl))) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n\n","sourceOld":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    noSowParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    sowFalseParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n    sowTrueParams.add(\"df\", \"text\");\n\n    // From synonyms.txt:\n    //\n    //     crow blackbird, grackle\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); // \"text\" has autoGeneratePhraseQueries=\"true\"\n        Query q = qParser.getQuery();\n        assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); // \"text_sw\" doesn't specify autoGeneratePhraseQueries => default false\n        Query q = qParser.getQuery();\n        assertEquals(\"+((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n                + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl)) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02bf300ae49caa47cd23550d69d6683a61ad89cb","date":1582727554,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAutoGeneratePhraseQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAutoGeneratePhraseQueries().mjava","sourceNew":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    noSowParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    sowFalseParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n    sowTrueParams.add(\"df\", \"text\");\n\n    // From synonyms.txt:\n    //\n    //     crow blackbird, grackle\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); // \"text\" has autoGeneratePhraseQueries=\"true\"\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl))\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); // \"text_sw\" doesn't specify autoGeneratePhraseQueries => default false\n        Query q = qParser.getQuery();\n        assertEquals(\"+(((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl))\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl)\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl))) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n\n","sourceOld":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    noSowParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    sowFalseParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n    sowTrueParams.add(\"df\", \"text\");\n\n    // From synonyms.txt:\n    //\n    //     crow blackbird, grackle\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); // \"text\" has autoGeneratePhraseQueries=\"true\"\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl))\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); // \"text_sw\" doesn't specify autoGeneratePhraseQueries => default false\n        Query q = qParser.getQuery();\n        assertEquals(\"+(((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl))\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl))) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["36d81030ef9ff5ae6820e560c0833127181c7a2c","1a144790859eb303122988cd315215ff30f449d2"],"8b360a3d5b9d443b4e880d2c92724cffd7def8db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"02bf300ae49caa47cd23550d69d6683a61ad89cb":["28288370235ed02234a64753cdbf0c6ec096304a"],"8d5f9da379ac10a8ebcbf30e00314c561652932b":["1a144790859eb303122988cd315215ff30f449d2"],"1a144790859eb303122988cd315215ff30f449d2":["7a4260b228cfff6ad78ac88d519f0f7746529c3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"36d81030ef9ff5ae6820e560c0833127181c7a2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["1a144790859eb303122988cd315215ff30f449d2","8d5f9da379ac10a8ebcbf30e00314c561652932b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","8d5f9da379ac10a8ebcbf30e00314c561652932b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02bf300ae49caa47cd23550d69d6683a61ad89cb"],"7a4260b228cfff6ad78ac88d519f0f7746529c3c":["8b360a3d5b9d443b4e880d2c92724cffd7def8db"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"8b360a3d5b9d443b4e880d2c92724cffd7def8db":["7a4260b228cfff6ad78ac88d519f0f7746529c3c"],"02bf300ae49caa47cd23550d69d6683a61ad89cb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8d5f9da379ac10a8ebcbf30e00314c561652932b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"1a144790859eb303122988cd315215ff30f449d2":["e9017cf144952056066919f1ebc7897ff9bd71b1","8d5f9da379ac10a8ebcbf30e00314c561652932b","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b360a3d5b9d443b4e880d2c92724cffd7def8db","36d81030ef9ff5ae6820e560c0833127181c7a2c"],"36d81030ef9ff5ae6820e560c0833127181c7a2c":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["02bf300ae49caa47cd23550d69d6683a61ad89cb"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"7a4260b228cfff6ad78ac88d519f0f7746529c3c":["1a144790859eb303122988cd315215ff30f449d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}