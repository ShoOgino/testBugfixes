{"path":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#downloadFromZK(SolrZkClient,String,URI).mjava","commits":[{"id":"4c623a7f72be34d6c45bee682028c50327d9e4b7","date":1467791293,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#downloadFromZK(SolrZkClient,String,URI).mjava","pathOld":"/dev/null","sourceNew":"  private void downloadFromZK(SolrZkClient zkClient, String zkPath, URI dir) throws IOException {\n    try {\n      if (!repository.exists(dir)) {\n        repository.createDirectory(dir);\n      }\n      List<String> files = zkClient.getChildren(zkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          log.info(\"Writing file {}\", file);\n          byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n          try (OutputStream os = repository.createOutput(repository.createURI(dir.getPath(), file))) {\n            os.write(data);\n          }\n        } else {\n          downloadFromZK(zkClient, zkPath + \"/\" + file, repository.createURI(dir.getPath(), file));\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error downloading files from zookeeper path \" + zkPath + \" to \" + dir.toString(),\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["af3193c66df8e8324d4bce9f66df967af9e8c602"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af3193c66df8e8324d4bce9f66df967af9e8c602","date":1472772499,"type":3,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#downloadFromZK(SolrZkClient,String,URI).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#downloadFromZK(SolrZkClient,String,URI).mjava","sourceNew":"  private void downloadFromZK(SolrZkClient zkClient, String zkPath, URI dir) throws IOException {\n    try {\n      if (!repository.exists(dir)) {\n        repository.createDirectory(dir);\n      }\n      List<String> files = zkClient.getChildren(zkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          log.info(\"Writing file {}\", file);\n          byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n          try (OutputStream os = repository.createOutput(repository.resolve(dir, file))) {\n            os.write(data);\n          }\n        } else {\n          downloadFromZK(zkClient, zkPath + \"/\" + file, repository.resolve(dir, file));\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error downloading files from zookeeper path \" + zkPath + \" to \" + dir.toString(),\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  private void downloadFromZK(SolrZkClient zkClient, String zkPath, URI dir) throws IOException {\n    try {\n      if (!repository.exists(dir)) {\n        repository.createDirectory(dir);\n      }\n      List<String> files = zkClient.getChildren(zkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          log.info(\"Writing file {}\", file);\n          byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n          try (OutputStream os = repository.createOutput(repository.createURI(dir.getPath(), file))) {\n            os.write(data);\n          }\n        } else {\n          downloadFromZK(zkClient, zkPath + \"/\" + file, repository.createURI(dir.getPath(), file));\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error downloading files from zookeeper path \" + zkPath + \" to \" + dir.toString(),\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da02fc41cfc83eaee66abb7c926f2c909bda6d26","date":1472818509,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#downloadFromZK(SolrZkClient,String,URI).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#downloadFromZK(SolrZkClient,String,URI).mjava","sourceNew":"  private void downloadFromZK(SolrZkClient zkClient, String zkPath, URI dir) throws IOException {\n    try {\n      if (!repository.exists(dir)) {\n        repository.createDirectory(dir);\n      }\n      List<String> files = zkClient.getChildren(zkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          log.info(\"Writing file {}\", file);\n          byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n          try (OutputStream os = repository.createOutput(repository.resolve(dir, file))) {\n            os.write(data);\n          }\n        } else {\n          downloadFromZK(zkClient, zkPath + \"/\" + file, repository.resolve(dir, file));\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error downloading files from zookeeper path \" + zkPath + \" to \" + dir.toString(),\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  private void downloadFromZK(SolrZkClient zkClient, String zkPath, URI dir) throws IOException {\n    try {\n      if (!repository.exists(dir)) {\n        repository.createDirectory(dir);\n      }\n      List<String> files = zkClient.getChildren(zkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          log.info(\"Writing file {}\", file);\n          byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n          try (OutputStream os = repository.createOutput(repository.createURI(dir.getPath(), file))) {\n            os.write(data);\n          }\n        } else {\n          downloadFromZK(zkClient, zkPath + \"/\" + file, repository.createURI(dir.getPath(), file));\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error downloading files from zookeeper path \" + zkPath + \" to \" + dir.toString(),\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#downloadFromZK(SolrZkClient,String,URI).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#downloadFromZK(SolrZkClient,String,URI).mjava","sourceNew":"  private void downloadFromZK(SolrZkClient zkClient, String zkPath, URI dir) throws IOException {\n    try {\n      if (!repository.exists(dir)) {\n        repository.createDirectory(dir);\n      }\n      List<String> files = zkClient.getChildren(zkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          log.info(\"Writing file {}\", file);\n          byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n          try (OutputStream os = repository.createOutput(repository.resolve(dir, file))) {\n            os.write(data);\n          }\n        } else {\n          downloadFromZK(zkClient, zkPath + \"/\" + file, repository.resolve(dir, file));\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error downloading files from zookeeper path \" + zkPath + \" to \" + dir.toString(),\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  private void downloadFromZK(SolrZkClient zkClient, String zkPath, URI dir) throws IOException {\n    try {\n      if (!repository.exists(dir)) {\n        repository.createDirectory(dir);\n      }\n      List<String> files = zkClient.getChildren(zkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          log.info(\"Writing file {}\", file);\n          byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n          try (OutputStream os = repository.createOutput(repository.createURI(dir.getPath(), file))) {\n            os.write(data);\n          }\n        } else {\n          downloadFromZK(zkClient, zkPath + \"/\" + file, repository.createURI(dir.getPath(), file));\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error downloading files from zookeeper path \" + zkPath + \" to \" + dir.toString(),\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#downloadFromZK(SolrZkClient,String,URI).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#downloadFromZK(SolrZkClient,String,URI).mjava","sourceNew":"  private void downloadFromZK(SolrZkClient zkClient, String zkPath, URI dir) throws IOException {\n    try {\n      if (!repository.exists(dir)) {\n        repository.createDirectory(dir);\n      }\n      List<String> files = zkClient.getChildren(zkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          log.info(\"Writing file {}\", file);\n          byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n          try (OutputStream os = repository.createOutput(repository.resolve(dir, file))) {\n            os.write(data);\n          }\n        } else {\n          downloadFromZK(zkClient, zkPath + \"/\" + file, repository.resolve(dir, file));\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error downloading files from zookeeper path \" + zkPath + \" to \" + dir.toString(),\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  private void downloadFromZK(SolrZkClient zkClient, String zkPath, URI dir) throws IOException {\n    try {\n      if (!repository.exists(dir)) {\n        repository.createDirectory(dir);\n      }\n      List<String> files = zkClient.getChildren(zkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          log.info(\"Writing file {}\", file);\n          byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n          try (OutputStream os = repository.createOutput(repository.createURI(dir.getPath(), file))) {\n            os.write(data);\n          }\n        } else {\n          downloadFromZK(zkClient, zkPath + \"/\" + file, repository.createURI(dir.getPath(), file));\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error downloading files from zookeeper path \" + zkPath + \" to \" + dir.toString(),\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#downloadFromZK(SolrZkClient,String,URI).mjava","pathOld":"/dev/null","sourceNew":"  private void downloadFromZK(SolrZkClient zkClient, String zkPath, URI dir) throws IOException {\n    try {\n      if (!repository.exists(dir)) {\n        repository.createDirectory(dir);\n      }\n      List<String> files = zkClient.getChildren(zkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          log.info(\"Writing file {}\", file);\n          byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n          try (OutputStream os = repository.createOutput(repository.resolve(dir, file))) {\n            os.write(data);\n          }\n        } else {\n          downloadFromZK(zkClient, zkPath + \"/\" + file, repository.resolve(dir, file));\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error downloading files from zookeeper path \" + zkPath + \" to \" + dir.toString(),\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4136b71b12272d6fb7a4f277f5f0e23fe608804d","date":1510093882,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#downloadFromZK(SolrZkClient,String,URI).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#downloadFromZK(SolrZkClient,String,URI).mjava","sourceNew":"  private void downloadFromZK(SolrZkClient zkClient, String zkPath, URI dir) throws IOException {\n    try {\n      if (!repository.exists(dir)) {\n        repository.createDirectory(dir);\n      }\n      List<String> files = zkClient.getChildren(zkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          log.debug(\"Writing file {}\", file);\n          byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n          try (OutputStream os = repository.createOutput(repository.resolve(dir, file))) {\n            os.write(data);\n          }\n        } else {\n          downloadFromZK(zkClient, zkPath + \"/\" + file, repository.resolve(dir, file));\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error downloading files from zookeeper path \" + zkPath + \" to \" + dir.toString(),\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  private void downloadFromZK(SolrZkClient zkClient, String zkPath, URI dir) throws IOException {\n    try {\n      if (!repository.exists(dir)) {\n        repository.createDirectory(dir);\n      }\n      List<String> files = zkClient.getChildren(zkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          log.info(\"Writing file {}\", file);\n          byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n          try (OutputStream os = repository.createOutput(repository.resolve(dir, file))) {\n            os.write(data);\n          }\n        } else {\n          downloadFromZK(zkClient, zkPath + \"/\" + file, repository.resolve(dir, file));\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error downloading files from zookeeper path \" + zkPath + \" to \" + dir.toString(),\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#downloadFromZK(SolrZkClient,String,URI).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#downloadFromZK(SolrZkClient,String,URI).mjava","sourceNew":"  private void downloadFromZK(SolrZkClient zkClient, String zkPath, URI dir) throws IOException {\n    try {\n      if (!repository.exists(dir)) {\n        repository.createDirectory(dir);\n      }\n      List<String> files = zkClient.getChildren(zkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          log.debug(\"Writing file {}\", file);\n          byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n          try (OutputStream os = repository.createOutput(repository.resolve(dir, file))) {\n            os.write(data);\n          }\n        } else {\n          downloadFromZK(zkClient, zkPath + \"/\" + file, repository.resolve(dir, file));\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error downloading files from zookeeper path \" + zkPath + \" to \" + dir.toString(),\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  private void downloadFromZK(SolrZkClient zkClient, String zkPath, URI dir) throws IOException {\n    try {\n      if (!repository.exists(dir)) {\n        repository.createDirectory(dir);\n      }\n      List<String> files = zkClient.getChildren(zkPath, null, true);\n      for (String file : files) {\n        List<String> children = zkClient.getChildren(zkPath + \"/\" + file, null, true);\n        if (children.size() == 0) {\n          log.info(\"Writing file {}\", file);\n          byte[] data = zkClient.getData(zkPath + \"/\" + file, null, null, true);\n          try (OutputStream os = repository.createOutput(repository.resolve(dir, file))) {\n            os.write(data);\n          }\n        } else {\n          downloadFromZK(zkClient, zkPath + \"/\" + file, repository.resolve(dir, file));\n        }\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error downloading files from zookeeper path \" + zkPath + \" to \" + dir.toString(),\n          SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["4c623a7f72be34d6c45bee682028c50327d9e4b7","af3193c66df8e8324d4bce9f66df967af9e8c602"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4136b71b12272d6fb7a4f277f5f0e23fe608804d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4c623a7f72be34d6c45bee682028c50327d9e4b7","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"bc8f206328a706450934717bec7ccc22ad166fc0":["4c623a7f72be34d6c45bee682028c50327d9e4b7","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"4136b71b12272d6fb7a4f277f5f0e23fe608804d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["da02fc41cfc83eaee66abb7c926f2c909bda6d26","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","af3193c66df8e8324d4bce9f66df967af9e8c602","bc8f206328a706450934717bec7ccc22ad166fc0"],"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c623a7f72be34d6c45bee682028c50327d9e4b7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","4136b71b12272d6fb7a4f277f5f0e23fe608804d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"4136b71b12272d6fb7a4f277f5f0e23fe608804d":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}