{"path":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoException().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoException().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoException().mjava","sourceNew":"  @Test\n  public void testCacheVetoException() throws Exception {\n    HttpMethodBase m = getSelectMethod(\"GET\");\n    // We force an exception from Solr. This should emit \"no-cache\" HTTP headers\n    m.setQueryString(new NameValuePair[] { new NameValuePair(\"q\", \"xyz_ignore_exception:solr\"),\n        new NameValuePair(\"qt\", \"standard\") });\n    getClient().executeMethod(m);\n    assertFalse(m.getStatusCode() == 200);\n    checkVetoHeaders(m, false);\n  }\n\n","sourceOld":"  @Test\n  public void testCacheVetoException() throws Exception {\n    HttpMethodBase m = getSelectMethod(\"GET\");\n    // We force an exception from Solr. This should emit \"no-cache\" HTTP headers\n    m.setQueryString(new NameValuePair[] { new NameValuePair(\"q\", \"xyz_ignore_exception:solr\"),\n        new NameValuePair(\"qt\", \"standard\") });\n    getClient().executeMethod(m);\n    assertFalse(m.getStatusCode() == 200);\n    checkVetoHeaders(m, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoException().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoException().mjava","sourceNew":"  @Test\n  public void testCacheVetoException() throws Exception {\n    HttpMethodBase m = getSelectMethod(\"GET\");\n    // We force an exception from Solr. This should emit \"no-cache\" HTTP headers\n    m.setQueryString(new NameValuePair[] { new NameValuePair(\"q\", \"xyz_ignore_exception:solr\"),\n        new NameValuePair(\"qt\", \"standard\") });\n    getClient().executeMethod(m);\n    assertFalse(m.getStatusCode() == 200);\n    checkVetoHeaders(m, false);\n  }\n\n","sourceOld":"  @Test\n  public void testCacheVetoException() throws Exception {\n    HttpMethodBase m = getSelectMethod(\"GET\");\n    // We force an exception from Solr. This should emit \"no-cache\" HTTP headers\n    m.setQueryString(new NameValuePair[] { new NameValuePair(\"q\", \"xyz_ignore_exception:solr\"),\n        new NameValuePair(\"qt\", \"standard\") });\n    getClient().executeMethod(m);\n    assertFalse(m.getStatusCode() == 200);\n    checkVetoHeaders(m, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoException().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoException().mjava","sourceNew":"  @Test\n  public void testCacheVetoException() throws Exception {\n    HttpMethodBase m = getSelectMethod(\"GET\");\n    // We force an exception from Solr. This should emit \"no-cache\" HTTP headers\n    m.setQueryString(new NameValuePair[] { new NameValuePair(\"q\", \"xyz_ignore_exception:solr\"),\n        new NameValuePair(\"qt\", \"standard\") });\n    getClient().executeMethod(m);\n    assertFalse(m.getStatusCode() == 200);\n    checkVetoHeaders(m, false);\n  }\n\n","sourceOld":"  @Test\n  public void testCacheVetoException() throws Exception {\n    HttpMethodBase m = getSelectMethod(\"GET\");\n    // We force an exception from Solr. This should emit \"no-cache\" HTTP headers\n    m.setQueryString(new NameValuePair[] { new NameValuePair(\"q\", \"xyz_ignore_exception:solr\"),\n        new NameValuePair(\"qt\", \"standard\") });\n    getClient().executeMethod(m);\n    assertFalse(m.getStatusCode() == 200);\n    checkVetoHeaders(m, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoException().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoException().mjava","sourceNew":"  @Test\n  public void testCacheVetoException() throws Exception {\n    HttpRequestBase m = getSelectMethod(\"GET\", \"q\", \"xyz_ignore_exception:solr\", \"qt\", \"standard\");\n    // We force an exception from Solr. This should emit \"no-cache\" HTTP headers\n    HttpResponse response = getClient().execute(m);\n    assertFalse(response.getStatusLine().getStatusCode() == 200);\n    checkVetoHeaders(response, false);\n  }\n\n","sourceOld":"  @Test\n  public void testCacheVetoException() throws Exception {\n    HttpMethodBase m = getSelectMethod(\"GET\");\n    // We force an exception from Solr. This should emit \"no-cache\" HTTP headers\n    m.setQueryString(new NameValuePair[] { new NameValuePair(\"q\", \"xyz_ignore_exception:solr\"),\n        new NameValuePair(\"qt\", \"standard\") });\n    getClient().executeMethod(m);\n    assertFalse(m.getStatusCode() == 200);\n    checkVetoHeaders(m, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}