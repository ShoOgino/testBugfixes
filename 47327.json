{"path":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#TVMapper(String[],IndexReader,boolean,boolean,boolean,boolean,boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#TVMapper(String[],IndexReader,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     *\n     * @param fields\n     * @param reader\n     * @param termFreq\n     * @param positions true if the TVM should try to get position info from the Term Vector, assuming it is present\n     * @param offsets true if the TVM should try to get offset info from the Term Vector, assuming it is present\n     * @param docFreq\n     * @param tfIdf\n     */\n    public TVMapper(String[] fields, IndexReader reader, boolean termFreq, boolean positions, boolean offsets, boolean docFreq, boolean tfIdf) {\n\n      this.reader = reader;\n      this.fields = fields != null ? new HashSet<String>(Arrays.asList(fields)) : Collections.<String>emptySet();\n      this.termFreq = termFreq;\n      this.positions = positions;\n      this.offsets = offsets;\n      this.docFreq = docFreq;\n      this.tfIdf = tfIdf;\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#TVMapper(String[],IndexReader,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":null,"sourceOld":"    /**\n     *\n     * @param fields\n     * @param reader\n     * @param termFreq\n     * @param positions true if the TVM should try to get position info from the Term Vector, assuming it is present\n     * @param offsets true if the TVM should try to get offset info from the Term Vector, assuming it is present\n     * @param docFreq\n     * @param tfIdf\n     */\n    public TVMapper(String[] fields, IndexReader reader, boolean termFreq, boolean positions, boolean offsets, boolean docFreq, boolean tfIdf) {\n\n      this.reader = reader;\n      this.fields = fields != null ? new HashSet<String>(Arrays.asList(fields)) : Collections.<String>emptySet();\n      this.termFreq = termFreq;\n      this.positions = positions;\n      this.offsets = offsets;\n      this.docFreq = docFreq;\n      this.tfIdf = tfIdf;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#TVMapper(String[],IndexReader,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#TVMapper(String[],IndexReader,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"    /**\n     *\n     * @param fields\n     * @param reader\n     * @param termFreq\n     * @param positions true if the TVM should try to get position info from the Term Vector, assuming it is present\n     * @param offsets true if the TVM should try to get offset info from the Term Vector, assuming it is present\n     * @param docFreq\n     * @param tfIdf\n     */\n    public TVMapper(String[] fields, IndexReader reader, boolean termFreq, boolean positions, boolean offsets, boolean docFreq, boolean tfIdf) {\n\n      this.reader = reader;\n      this.fields = fields != null ? new HashSet<String>(Arrays.asList(fields)) : Collections.<String>emptySet();\n      this.termFreq = termFreq;\n      this.positions = positions;\n      this.offsets = offsets;\n      this.docFreq = docFreq;\n      this.tfIdf = tfIdf;\n\n    }\n\n","sourceOld":"    /**\n     *\n     * @param fields\n     * @param reader\n     * @param termFreq\n     * @param positions true if the TVM should try to get position info from the Term Vector, assuming it is present\n     * @param offsets true if the TVM should try to get offset info from the Term Vector, assuming it is present\n     * @param docFreq\n     * @param tfIdf\n     */\n    public TVMapper(String[] fields, IndexReader reader, boolean termFreq, boolean positions, boolean offsets, boolean docFreq, boolean tfIdf) {\n\n      this.reader = reader;\n      this.fields = fields != null ? new HashSet<String>(Arrays.asList(fields)) : Collections.<String>emptySet();\n      this.termFreq = termFreq;\n      this.positions = positions;\n      this.offsets = offsets;\n      this.docFreq = docFreq;\n      this.tfIdf = tfIdf;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#TVMapper(String[],IndexReader,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     *\n     * @param fields\n     * @param reader\n     * @param termFreq\n     * @param positions true if the TVM should try to get position info from the Term Vector, assuming it is present\n     * @param offsets true if the TVM should try to get offset info from the Term Vector, assuming it is present\n     * @param docFreq\n     * @param tfIdf\n     */\n    public TVMapper(String[] fields, IndexReader reader, boolean termFreq, boolean positions, boolean offsets, boolean docFreq, boolean tfIdf) {\n\n      this.reader = reader;\n      this.fields = fields != null ? new HashSet<String>(Arrays.asList(fields)) : Collections.<String>emptySet();\n      this.termFreq = termFreq;\n      this.positions = positions;\n      this.offsets = offsets;\n      this.docFreq = docFreq;\n      this.tfIdf = tfIdf;\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df18b2465217a237531d0d944c22ea4a4316411e","date":1278157467,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#TVMapper(String[],IndexReader,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":null,"sourceOld":"    /**\n     *\n     * @param fields\n     * @param reader\n     * @param termFreq\n     * @param positions true if the TVM should try to get position info from the Term Vector, assuming it is present\n     * @param offsets true if the TVM should try to get offset info from the Term Vector, assuming it is present\n     * @param docFreq\n     * @param tfIdf\n     */\n    public TVMapper(String[] fields, IndexReader reader, boolean termFreq, boolean positions, boolean offsets, boolean docFreq, boolean tfIdf) {\n\n      this.reader = reader;\n      this.fields = fields != null ? new HashSet<String>(Arrays.asList(fields)) : Collections.<String>emptySet();\n      this.termFreq = termFreq;\n      this.positions = positions;\n      this.offsets = offsets;\n      this.docFreq = docFreq;\n      this.tfIdf = tfIdf;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#TVMapper(String[],IndexReader,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":null,"sourceOld":"    /**\n     *\n     * @param fields\n     * @param reader\n     * @param termFreq\n     * @param positions true if the TVM should try to get position info from the Term Vector, assuming it is present\n     * @param offsets true if the TVM should try to get offset info from the Term Vector, assuming it is present\n     * @param docFreq\n     * @param tfIdf\n     */\n    public TVMapper(String[] fields, IndexReader reader, boolean termFreq, boolean positions, boolean offsets, boolean docFreq, boolean tfIdf) {\n\n      this.reader = reader;\n      this.fields = fields != null ? new HashSet<String>(Arrays.asList(fields)) : Collections.<String>emptySet();\n      this.termFreq = termFreq;\n      this.positions = positions;\n      this.offsets = offsets;\n      this.docFreq = docFreq;\n      this.tfIdf = tfIdf;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","df18b2465217a237531d0d944c22ea4a4316411e"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"df18b2465217a237531d0d944c22ea4a4316411e":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df18b2465217a237531d0d944c22ea4a4316411e"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["5f4e87790277826a2aea119328600dfb07761f32","df18b2465217a237531d0d944c22ea4a4316411e"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"df18b2465217a237531d0d944c22ea4a4316411e":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}