{"path":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","commits":[{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#reportAdditionalFailureInfo().mjava","sourceNew":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running 'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \")\n     .append(\"-Dtestcase=\").append(RandomizedContext.current().getTargetClass().getSimpleName());\n    if (testName != null) {\n      b.append(\" -Dtests.method=\").append(testName);\n    }\n    b.append(\" -Dtests.seed=\")\n     .append(RandomizedContext.current().getRunnerSeedAsString())\n     .append(reproduceWithExtraParams());\n    System.err.println(b.toString());\n  }\n\n","sourceOld":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \")\n     .append(\"-Dtestcase=\").append(getTestClass().getSimpleName());\n    if (getName() != null) {\n      b.append(\" -Dtests.method=\").append(getName());\n    }\n    b.append(\" -Dtests.seed=\")\n     .append(RandomizedContext.current().getRunnerSeedAsString())\n     .append(reproduceWithExtraParams());\n    System.err.println(b.toString());\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running 'ant get-jenkins-line-docs' in the lucene directory\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e4c52ba7e637d69fc83a489586479d19fe1672b","date":1338413823,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","sourceNew":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n      \t\t\"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n    }\n    // Randomize this: LUCENE-4094\n    addVmOpt(b, \"args\", \"-Dfile.encoding=\" + System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","sourceOld":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running 'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \")\n     .append(\"-Dtestcase=\").append(RandomizedContext.current().getTargetClass().getSimpleName());\n    if (testName != null) {\n      b.append(\" -Dtests.method=\").append(testName);\n    }\n    b.append(\" -Dtests.seed=\")\n     .append(RandomizedContext.current().getRunnerSeedAsString())\n     .append(reproduceWithExtraParams());\n    System.err.println(b.toString());\n  }\n\n","bugFix":null,"bugIntro":["f8414c6a288704914389b19a9b51705f9733bd6e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e5cdcd748191056a300c1c1137788a25b725c735","date":1338902380,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","sourceNew":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n      \t\t\"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n    // Randomize this: LUCENE-4094\n    addVmOpt(b, \"args\", \"-Dfile.encoding=\" + System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","sourceOld":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n      \t\t\"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n    }\n    // Randomize this: LUCENE-4094\n    addVmOpt(b, \"args\", \"-Dfile.encoding=\" + System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"016daa869456a9e0e5ff009efef2ced1e604851f","date":1341484801,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","sourceNew":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n      \t\t\"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    addVmOpt(b, \"randomized.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","sourceOld":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n      \t\t\"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n    // Randomize this: LUCENE-4094\n    addVmOpt(b, \"args\", \"-Dfile.encoding=\" + System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dbf8fb6e0d01fdc62ed84d3dd074edbf7137ce96","date":1341484844,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","sourceNew":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n      \t\t\"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","sourceOld":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n      \t\t\"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    addVmOpt(b, \"randomized.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","sourceNew":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n      \t\t\"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","sourceOld":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n      \t\t\"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n    // Randomize this: LUCENE-4094\n    addVmOpt(b, \"args\", \"-Dfile.encoding=\" + System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","sourceNew":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","sourceOld":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n      \t\t\"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","sourceNew":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","sourceOld":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","sourceNew":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","sourceOld":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518","date":1398331323,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","sourceNew":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n    \n    // Misc switches.\n    addVmOpt(b, SYSPROP_SYSOUTS, System.getProperty(SYSPROP_SYSOUTS));\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","sourceOld":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15f78d4c3703bdf31ef64dc18dd5d5c7996bcd0a","date":1398846443,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","sourceNew":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","sourceOld":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n    \n    // Misc switches.\n    addVmOpt(b, SYSPROP_SYSOUTS, System.getProperty(SYSPROP_SYSOUTS));\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4","date":1414017220,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","sourceNew":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    if (LuceneTestCase.assertsAreEnabled) {\n      addVmOpt(b, \"tests.asserts\", \"true\");\n    } else {\n      addVmOpt(b, \"tests.asserts\", \"false\");\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","sourceOld":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87c7d629214df0f68f06ac56645f149da1e98c4a","date":1429269681,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","sourceNew":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (suppressReproduceLine) {\n      return;\n    }\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    if (LuceneTestCase.assertsAreEnabled) {\n      addVmOpt(b, \"tests.asserts\", \"true\");\n    } else {\n      addVmOpt(b, \"tests.asserts\", \"false\");\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","sourceOld":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    if (LuceneTestCase.assertsAreEnabled) {\n      addVmOpt(b, \"tests.asserts\", \"true\");\n    } else {\n      addVmOpt(b, \"tests.asserts\", \"false\");\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a72cdac51dd6e3756b9d267dd995bf7b0718d90","date":1452897717,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","sourceNew":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (suppressReproduceLine) {\n      return;\n    }\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale.toLanguageTag());\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    if (LuceneTestCase.assertsAreEnabled) {\n      addVmOpt(b, \"tests.asserts\", \"true\");\n    } else {\n      addVmOpt(b, \"tests.asserts\", \"false\");\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","sourceOld":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (suppressReproduceLine) {\n      return;\n    }\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale);\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    if (LuceneTestCase.assertsAreEnabled) {\n      addVmOpt(b, \"tests.asserts\", \"true\");\n    } else {\n      addVmOpt(b, \"tests.asserts\", \"false\");\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8414c6a288704914389b19a9b51705f9733bd6e","date":1477041552,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","sourceNew":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (suppressReproduceLine) {\n      return;\n    }\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null && classEnvRule.isInitialized()) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale.toLanguageTag());\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    if (LuceneTestCase.assertsAreEnabled) {\n      addVmOpt(b, \"tests.asserts\", \"true\");\n    } else {\n      addVmOpt(b, \"tests.asserts\", \"false\");\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","sourceOld":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (suppressReproduceLine) {\n      return;\n    }\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale.toLanguageTag());\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    if (LuceneTestCase.assertsAreEnabled) {\n      addVmOpt(b, \"tests.asserts\", \"true\");\n    } else {\n      addVmOpt(b, \"tests.asserts\", \"false\");\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","bugFix":["9e4c52ba7e637d69fc83a489586479d19fe1672b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","sourceNew":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (suppressReproduceLine) {\n      return;\n    }\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null && classEnvRule.isInitialized()) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale.toLanguageTag());\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    if (LuceneTestCase.assertsAreEnabled) {\n      addVmOpt(b, \"tests.asserts\", \"true\");\n    } else {\n      addVmOpt(b, \"tests.asserts\", \"false\");\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","sourceOld":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (suppressReproduceLine) {\n      return;\n    }\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale.toLanguageTag());\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    if (LuceneTestCase.assertsAreEnabled) {\n      addVmOpt(b, \"tests.asserts\", \"true\");\n    } else {\n      addVmOpt(b, \"tests.asserts\", \"false\");\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa1d44439e2f488caedd2caa8865314a470173ad","date":1519775220,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","sourceNew":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (suppressReproduceLine) {\n      return;\n    }\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_MONSTER) addVmOpt(b, SYSPROP_MONSTER, TEST_MONSTER);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n    if (TEST_BADAPPLES) addVmOpt(b, SYSPROP_BADAPPLES, TEST_BADAPPLES);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null && classEnvRule.isInitialized()) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale.toLanguageTag());\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    if (LuceneTestCase.assertsAreEnabled) {\n      addVmOpt(b, \"tests.asserts\", \"true\");\n    } else {\n      addVmOpt(b, \"tests.asserts\", \"false\");\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","sourceOld":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (suppressReproduceLine) {\n      return;\n    }\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null && classEnvRule.isInitialized()) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale.toLanguageTag());\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    if (LuceneTestCase.assertsAreEnabled) {\n      addVmOpt(b, \"tests.asserts\", \"true\");\n    } else {\n      addVmOpt(b, \"tests.asserts\", \"false\");\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eae8b38e10daa721fd079d4fd7a51c87aeddcc4c","date":1600082972,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","sourceNew":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (suppressReproduceLine) {\n      return;\n    }\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: gradlew test \");\n\n    // Figure out the test case name and method, if any.\n    String testClass = RandomizedContext.current().getTargetClass().getSimpleName();\n    b.append(\"--tests \");\n    b.append(testClass);\n    if (testName != null) {\n      b.append(\".\").append(testName);\n    }\n\n    // Pass the master seed.\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_MONSTER) addVmOpt(b, SYSPROP_MONSTER, TEST_MONSTER);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n    if (TEST_BADAPPLES) addVmOpt(b, SYSPROP_BADAPPLES, TEST_BADAPPLES);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null && classEnvRule.isInitialized()) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale.toLanguageTag());\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    if (LuceneTestCase.assertsAreEnabled) {\n      addVmOpt(b, \"tests.asserts\", \"true\");\n    } else {\n      addVmOpt(b, \"tests.asserts\", \"false\");\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","sourceOld":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (suppressReproduceLine) {\n      return;\n    }\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_MONSTER) addVmOpt(b, SYSPROP_MONSTER, TEST_MONSTER);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n    if (TEST_BADAPPLES) addVmOpt(b, SYSPROP_BADAPPLES, TEST_BADAPPLES);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null && classEnvRule.isInitialized()) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale.toLanguageTag());\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    if (LuceneTestCase.assertsAreEnabled) {\n      addVmOpt(b, \"tests.asserts\", \"true\");\n    } else {\n      addVmOpt(b, \"tests.asserts\", \"false\");\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo#reportAdditionalFailureInfo(String).mjava","sourceNew":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (suppressReproduceLine) {\n      return;\n    }\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: gradlew test \");\n\n    // Figure out the test case name and method, if any.\n    String testClass = RandomizedContext.current().getTargetClass().getSimpleName();\n    b.append(\"--tests \");\n    b.append(testClass);\n    if (testName != null) {\n      b.append(\".\").append(testName);\n    }\n\n    // Pass the master seed.\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_MONSTER) addVmOpt(b, SYSPROP_MONSTER, TEST_MONSTER);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n    if (TEST_BADAPPLES) addVmOpt(b, SYSPROP_BADAPPLES, TEST_BADAPPLES);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null && classEnvRule.isInitialized()) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale.toLanguageTag());\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    if (LuceneTestCase.assertsAreEnabled) {\n      addVmOpt(b, \"tests.asserts\", \"true\");\n    } else {\n      addVmOpt(b, \"tests.asserts\", \"false\");\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","sourceOld":"  private void reportAdditionalFailureInfo(final String testName) {\n    if (suppressReproduceLine) {\n      return;\n    }\n    if (TEST_LINE_DOCS_FILE.endsWith(JENKINS_LARGE_LINE_DOCS_FILE)) {\n      System.err.println(\"NOTE: download the large Jenkins line-docs file by running \" +\n        \"'ant get-jenkins-line-docs' in the lucene directory.\");\n    }\n\n    final StringBuilder b = new StringBuilder();\n    b.append(\"NOTE: reproduce with: ant test \");\n\n    // Test case, method, seed.\n    addVmOpt(b, \"testcase\", RandomizedContext.current().getTargetClass().getSimpleName());\n    addVmOpt(b, \"tests.method\", testName);\n    addVmOpt(b, \"tests.seed\", RandomizedContext.current().getRunnerSeedAsString());\n\n    // Test groups and multipliers.\n    if (RANDOM_MULTIPLIER > 1) addVmOpt(b, \"tests.multiplier\", RANDOM_MULTIPLIER);\n    if (TEST_NIGHTLY) addVmOpt(b, SYSPROP_NIGHTLY, TEST_NIGHTLY);\n    if (TEST_WEEKLY) addVmOpt(b, SYSPROP_WEEKLY, TEST_WEEKLY);\n    if (TEST_SLOW) addVmOpt(b, SYSPROP_SLOW, TEST_SLOW);\n    if (TEST_MONSTER) addVmOpt(b, SYSPROP_MONSTER, TEST_MONSTER);\n    if (TEST_AWAITSFIX) addVmOpt(b, SYSPROP_AWAITSFIX, TEST_AWAITSFIX);\n    if (TEST_BADAPPLES) addVmOpt(b, SYSPROP_BADAPPLES, TEST_BADAPPLES);\n\n    // Codec, postings, directories.\n    if (!TEST_CODEC.equals(\"random\")) addVmOpt(b, \"tests.codec\", TEST_CODEC);\n    if (!TEST_POSTINGSFORMAT.equals(\"random\")) addVmOpt(b, \"tests.postingsformat\", TEST_POSTINGSFORMAT);\n    if (!TEST_DOCVALUESFORMAT.equals(\"random\")) addVmOpt(b, \"tests.docvaluesformat\", TEST_DOCVALUESFORMAT);\n    if (!TEST_DIRECTORY.equals(\"random\")) addVmOpt(b, \"tests.directory\", TEST_DIRECTORY);\n\n    // Environment.\n    if (!TEST_LINE_DOCS_FILE.equals(DEFAULT_LINE_DOCS_FILE)) addVmOpt(b, \"tests.linedocsfile\", TEST_LINE_DOCS_FILE);\n    if (classEnvRule != null && classEnvRule.isInitialized()) {\n      addVmOpt(b, \"tests.locale\", classEnvRule.locale.toLanguageTag());\n      if (classEnvRule.timeZone != null) {\n        addVmOpt(b, \"tests.timezone\", classEnvRule.timeZone.getID());\n      }\n    }\n\n    if (LuceneTestCase.assertsAreEnabled) {\n      addVmOpt(b, \"tests.asserts\", \"true\");\n    } else {\n      addVmOpt(b, \"tests.asserts\", \"false\");\n    }\n\n    addVmOpt(b, \"tests.file.encoding\", System.getProperty(\"file.encoding\"));\n\n    System.err.println(b.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8414c6a288704914389b19a9b51705f9733bd6e":["1a72cdac51dd6e3756b9d267dd995bf7b0718d90"],"016daa869456a9e0e5ff009efef2ced1e604851f":["e5cdcd748191056a300c1c1137788a25b725c735"],"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9e4c52ba7e637d69fc83a489586479d19fe1672b":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"eae8b38e10daa721fd079d4fd7a51c87aeddcc4c":["aa1d44439e2f488caedd2caa8865314a470173ad"],"1a72cdac51dd6e3756b9d267dd995bf7b0718d90":["87c7d629214df0f68f06ac56645f149da1e98c4a"],"aa1d44439e2f488caedd2caa8865314a470173ad":["f8414c6a288704914389b19a9b51705f9733bd6e"],"e5cdcd748191056a300c1c1137788a25b725c735":["9e4c52ba7e637d69fc83a489586479d19fe1672b"],"680b6449f09827f58fe987aff279e014c311d966":["aa1d44439e2f488caedd2caa8865314a470173ad","eae8b38e10daa721fd079d4fd7a51c87aeddcc4c"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376","423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e5cdcd748191056a300c1c1137788a25b725c735","dbf8fb6e0d01fdc62ed84d3dd074edbf7137ce96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["1a72cdac51dd6e3756b9d267dd995bf7b0718d90","f8414c6a288704914389b19a9b51705f9733bd6e"],"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"dbf8fb6e0d01fdc62ed84d3dd074edbf7137ce96":["016daa869456a9e0e5ff009efef2ced1e604851f"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"87c7d629214df0f68f06ac56645f149da1e98c4a":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4"],"15f78d4c3703bdf31ef64dc18dd5d5c7996bcd0a":["e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["dbf8fb6e0d01fdc62ed84d3dd074edbf7137ce96"]},"commit2Childs":{"f8414c6a288704914389b19a9b51705f9733bd6e":["aa1d44439e2f488caedd2caa8865314a470173ad","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"016daa869456a9e0e5ff009efef2ced1e604851f":["dbf8fb6e0d01fdc62ed84d3dd074edbf7137ce96"],"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4":["87c7d629214df0f68f06ac56645f149da1e98c4a"],"9e4c52ba7e637d69fc83a489586479d19fe1672b":["e5cdcd748191056a300c1c1137788a25b725c735"],"eae8b38e10daa721fd079d4fd7a51c87aeddcc4c":["680b6449f09827f58fe987aff279e014c311d966"],"1a72cdac51dd6e3756b9d267dd995bf7b0718d90":["f8414c6a288704914389b19a9b51705f9733bd6e","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"e5cdcd748191056a300c1c1137788a25b725c735":["016daa869456a9e0e5ff009efef2ced1e604851f","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aa1d44439e2f488caedd2caa8865314a470173ad":["eae8b38e10daa721fd079d4fd7a51c87aeddcc4c","680b6449f09827f58fe987aff279e014c311d966"],"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4","e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["9e4c52ba7e637d69fc83a489586479d19fe1672b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518":["15f78d4c3703bdf31ef64dc18dd5d5c7996bcd0a"],"dbf8fb6e0d01fdc62ed84d3dd074edbf7137ce96":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"87c7d629214df0f68f06ac56645f149da1e98c4a":["1a72cdac51dd6e3756b9d267dd995bf7b0718d90"],"15f78d4c3703bdf31ef64dc18dd5d5c7996bcd0a":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["d4d69c535930b5cce125cff868d40f6373dc27d4","423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","15f78d4c3703bdf31ef64dc18dd5d5c7996bcd0a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}