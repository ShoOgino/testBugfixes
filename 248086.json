{"path":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,ParsedParams,List[String]).mjava","commits":[{"id":"aa62c79a7afa4d7f22e1f71b883659f3213d7db1","date":1435334422,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,ParsedParams,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,DocSet,List[String]).mjava","sourceNew":"  /**\n   * Computes the term-&gt;count counts for the specified term values relative to the \n   * @param field the name of the field to compute term counts against\n   * @param parsed contains the docset to compute term counts relative to\n   * @param terms a list of term values (in the specified field) to compute the counts for \n   */\n  protected NamedList<Integer> getListedTermCounts(String field, final ParsedParams parsed, List<String> terms) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> res = new NamedList<>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), parsed.docs);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":"  /**\n   * Computes the term-&gt;count counts for the specified term values relative to the \n   * @param field the name of the field to compute term counts against\n   * @param base the docset to compute term counts relative to\n   * @param terms a list of term values (in the specified field) to compute the counts for \n   */\n  protected NamedList<Integer> getListedTermCounts(String field, DocSet base, List<String> terms) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> res = new NamedList<>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,ParsedParams,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,ParsedParams,List[String]).mjava","sourceNew":"  /**\n   * Computes the term-&gt;count counts for the specified term values relative to the \n   * @param field the name of the field to compute term counts against\n   * @param parsed contains the docset to compute term counts relative to\n   * @param terms a list of term values (in the specified field) to compute the counts for \n   */\n  protected NamedList<Integer> getListedTermCounts(String field, final ParsedParams parsed, List<String> terms) throws IOException {\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType ft = sf.getType();\n    NamedList<Integer> res = new NamedList<>();\n    if (ft.isPointField()) {\n      for (String term : terms) {\n        int count = searcher.numDocs(ft.getFieldQuery(null, sf, term), parsed.docs);\n        res.add(term, count);\n      }\n    } else {\n      for (String term : terms) {\n        String internal = ft.toInternal(term);\n        int count = searcher.numDocs(new TermQuery(new Term(field, internal)), parsed.docs);\n        res.add(term, count);\n      }\n    }\n    return res;    \n  }\n\n","sourceOld":"  /**\n   * Computes the term-&gt;count counts for the specified term values relative to the \n   * @param field the name of the field to compute term counts against\n   * @param parsed contains the docset to compute term counts relative to\n   * @param terms a list of term values (in the specified field) to compute the counts for \n   */\n  protected NamedList<Integer> getListedTermCounts(String field, final ParsedParams parsed, List<String> terms) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> res = new NamedList<>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), parsed.docs);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":["aab508a3cd5a554096365ed514f5eba621b30279"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,ParsedParams,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,ParsedParams,List[String]).mjava","sourceNew":"  /**\n   * Computes the term-&gt;count counts for the specified term values relative to the \n   * @param field the name of the field to compute term counts against\n   * @param parsed contains the docset to compute term counts relative to\n   * @param terms a list of term values (in the specified field) to compute the counts for \n   */\n  protected NamedList<Integer> getListedTermCounts(String field, final ParsedParams parsed, List<String> terms) throws IOException {\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType ft = sf.getType();\n    NamedList<Integer> res = new NamedList<>();\n    if (ft.isPointField()) {\n      for (String term : terms) {\n        int count = searcher.numDocs(ft.getFieldQuery(null, sf, term), parsed.docs);\n        res.add(term, count);\n      }\n    } else {\n      for (String term : terms) {\n        String internal = ft.toInternal(term);\n        int count = searcher.numDocs(new TermQuery(new Term(field, internal)), parsed.docs);\n        res.add(term, count);\n      }\n    }\n    return res;    \n  }\n\n","sourceOld":"  /**\n   * Computes the term-&gt;count counts for the specified term values relative to the \n   * @param field the name of the field to compute term counts against\n   * @param parsed contains the docset to compute term counts relative to\n   * @param terms a list of term values (in the specified field) to compute the counts for \n   */\n  protected NamedList<Integer> getListedTermCounts(String field, final ParsedParams parsed, List<String> terms) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> res = new NamedList<>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), parsed.docs);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"150a49c75d5db301739e922d53b62a90859940c8","date":1491004902,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,ParsedParams,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,ParsedParams,List[String]).mjava","sourceNew":"  /**\n   * Computes the term-&gt;count counts for the specified term values relative to the \n   * @param field the name of the field to compute term counts against\n   * @param parsed contains the docset to compute term counts relative to\n   * @param terms a list of term values (in the specified field) to compute the counts for \n   */\n  protected NamedList<Integer> getListedTermCounts(String field, final ParsedParams parsed, List<String> terms) throws IOException {\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType ft = sf.getType();\n    NamedList<Integer> res = new NamedList<>();\n    for (String term : terms) {\n      int count = searcher.numDocs(ft.getFieldQuery(null, sf, term), parsed.docs);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":"  /**\n   * Computes the term-&gt;count counts for the specified term values relative to the \n   * @param field the name of the field to compute term counts against\n   * @param parsed contains the docset to compute term counts relative to\n   * @param terms a list of term values (in the specified field) to compute the counts for \n   */\n  protected NamedList<Integer> getListedTermCounts(String field, final ParsedParams parsed, List<String> terms) throws IOException {\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType ft = sf.getType();\n    NamedList<Integer> res = new NamedList<>();\n    if (ft.isPointField()) {\n      for (String term : terms) {\n        int count = searcher.numDocs(ft.getFieldQuery(null, sf, term), parsed.docs);\n        res.add(term, count);\n      }\n    } else {\n      for (String term : terms) {\n        String internal = ft.toInternal(term);\n        int count = searcher.numDocs(new TermQuery(new Term(field, internal)), parsed.docs);\n        res.add(term, count);\n      }\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":["aab508a3cd5a554096365ed514f5eba621b30279"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2d919a30060a1ccbce7a29ad75de14be6494caea","date":1491045405,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,ParsedParams,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,ParsedParams,List[String]).mjava","sourceNew":"  /**\n   * Computes the term-&gt;count counts for the specified term values relative to the \n   * @param field the name of the field to compute term counts against\n   * @param parsed contains the docset to compute term counts relative to\n   * @param terms a list of term values (in the specified field) to compute the counts for \n   */\n  protected NamedList<Integer> getListedTermCounts(String field, final ParsedParams parsed, List<String> terms) throws IOException {\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType ft = sf.getType();\n    NamedList<Integer> res = new NamedList<>();\n    for (String term : terms) {\n      int count = searcher.numDocs(ft.getFieldQuery(null, sf, term), parsed.docs);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":"  /**\n   * Computes the term-&gt;count counts for the specified term values relative to the \n   * @param field the name of the field to compute term counts against\n   * @param parsed contains the docset to compute term counts relative to\n   * @param terms a list of term values (in the specified field) to compute the counts for \n   */\n  protected NamedList<Integer> getListedTermCounts(String field, final ParsedParams parsed, List<String> terms) throws IOException {\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType ft = sf.getType();\n    NamedList<Integer> res = new NamedList<>();\n    if (ft.isPointField()) {\n      for (String term : terms) {\n        int count = searcher.numDocs(ft.getFieldQuery(null, sf, term), parsed.docs);\n        res.add(term, count);\n      }\n    } else {\n      for (String term : terms) {\n        String internal = ft.toInternal(term);\n        int count = searcher.numDocs(new TermQuery(new Term(field, internal)), parsed.docs);\n        res.add(term, count);\n      }\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aab508a3cd5a554096365ed514f5eba621b30279","date":1548678429,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,ParsedParams,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,ParsedParams,List[String]).mjava","sourceNew":"  /**\n   * Computes the term-&gt;count counts for the specified term values relative to the\n   *\n   * @param field the name of the field to compute term counts against\n   * @param parsed contains the docset to compute term counts relative to\n   * @param terms a list of term values (in the specified field) to compute the counts for\n   */\n  protected NamedList<Integer> getListedTermCounts(String field, final ParsedParams parsed, List<String> terms)\n      throws IOException {\n    final String sort = parsed.params.getFieldParam(field, FacetParams.FACET_SORT, \"empty\");\n    final SchemaField sf = searcher.getSchema().getField(field);\n    final FieldType ft = sf.getType();\n    final DocSet baseDocset = parsed.docs;\n    final NamedList<Integer> res = new NamedList<>();\n    Stream<String> inputStream = terms.stream();\n    if (sort.equals(FacetParams.FACET_SORT_INDEX)) { // it might always make sense\n      inputStream = inputStream.sorted();\n    }\n    Stream<SimpleImmutableEntry<String,Integer>> termCountEntries = inputStream\n        .map((term) -> new SimpleImmutableEntry<>(term, numDocs(term, sf, ft, baseDocset)));\n    if (sort.equals(FacetParams.FACET_SORT_COUNT)) {\n      termCountEntries = termCountEntries.sorted(Collections.reverseOrder(Map.Entry.comparingByValue()));\n    }\n    termCountEntries.forEach(e -> res.add(e.getKey(), e.getValue()));\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Computes the term-&gt;count counts for the specified term values relative to the \n   * @param field the name of the field to compute term counts against\n   * @param parsed contains the docset to compute term counts relative to\n   * @param terms a list of term values (in the specified field) to compute the counts for \n   */\n  protected NamedList<Integer> getListedTermCounts(String field, final ParsedParams parsed, List<String> terms) throws IOException {\n    SchemaField sf = searcher.getSchema().getField(field);\n    FieldType ft = sf.getType();\n    NamedList<Integer> res = new NamedList<>();\n    for (String term : terms) {\n      int count = searcher.numDocs(ft.getFieldQuery(null, sf, term), parsed.docs);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1","46dc9ac8b3e748407baaef82453138ff3974480c","92751ba9273251eab6a2e379ec42a1697a32ff96","150a49c75d5db301739e922d53b62a90859940c8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46dc9ac8b3e748407baaef82453138ff3974480c":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"150a49c75d5db301739e922d53b62a90859940c8":["46dc9ac8b3e748407baaef82453138ff3974480c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d919a30060a1ccbce7a29ad75de14be6494caea":["46dc9ac8b3e748407baaef82453138ff3974480c"],"aab508a3cd5a554096365ed514f5eba621b30279":["150a49c75d5db301739e922d53b62a90859940c8"],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aab508a3cd5a554096365ed514f5eba621b30279"]},"commit2Childs":{"46dc9ac8b3e748407baaef82453138ff3974480c":["150a49c75d5db301739e922d53b62a90859940c8","2d919a30060a1ccbce7a29ad75de14be6494caea","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"150a49c75d5db301739e922d53b62a90859940c8":["aab508a3cd5a554096365ed514f5eba621b30279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"2d919a30060a1ccbce7a29ad75de14be6494caea":[],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"aab508a3cd5a554096365ed514f5eba621b30279":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2d919a30060a1ccbce7a29ad75de14be6494caea","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}