{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FSTDictionary.Browser#nextKey().mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FSTDictionary.Browser#nextKey().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public BytesRef nextKey() {\n      try {\n        if (state == STATE_END) {\n          // if fstEnum is at end, then that's it.\n          return null;\n        }\n\n        if (state == STATE_SEEK && blockFilePointer == -1) { // see seekBlock\n          if (fstEnum.next() == null) { // advance.\n            state = STATE_END; // probably never happens (empty FST)?  We code defensively.\n            return null;\n          }\n        }\n        keyBuilder.copyBytes(fstEnum.current().input);\n        blockFilePointer = fstEnum.current().output;\n        assert blockFilePointer >= 0;\n\n        state = STATE_NEXT;\n\n        BytesRef key = keyBuilder.get();\n\n        // advance fstEnum\n        BytesRefFSTEnum.InputOutput<Long> inputOutput = fstEnum.next();\n\n        // calc common prefix\n        if (inputOutput == null) {\n          state = STATE_END; // for *next* call; current state is good\n          blockPrefixLen = 0;\n        } else {\n          int sortKeyLength = StringHelper.sortKeyLength(key, inputOutput.input);\n          assert sortKeyLength >= 1;\n          blockPrefixLen = sortKeyLength - 1;\n        }\n        return key;\n      } catch (IOException e) {\n        // Should never happen.\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f6185d883389450f593fb00103d2e89a0b8336","date":1577705030,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FSTDictionary.Browser#nextKey().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FSTDictionary.Browser#nextKey().mjava","sourceNew":"    @Override\n    public BytesRef nextKey() throws IOException {\n      if (state == STATE_END) {\n        // if fstEnum is at end, then that's it.\n        return null;\n      }\n\n      if (state == STATE_SEEK && blockFilePointer == -1) { // see seekBlock\n        if (fstEnum.next() == null) { // advance.\n          state = STATE_END; // probably never happens (empty FST)?  We code defensively.\n          return null;\n        }\n      }\n      keyBuilder.copyBytes(fstEnum.current().input);\n      blockFilePointer = fstEnum.current().output;\n      assert blockFilePointer >= 0;\n\n      state = STATE_NEXT;\n\n      BytesRef key = keyBuilder.get();\n\n      // advance fstEnum\n      BytesRefFSTEnum.InputOutput<Long> inputOutput = fstEnum.next();\n\n      // calc common prefix\n      if (inputOutput == null) {\n        state = STATE_END; // for *next* call; current state is good\n        blockPrefixLen = 0;\n      } else {\n        int sortKeyLength = StringHelper.sortKeyLength(key, inputOutput.input);\n        assert sortKeyLength >= 1;\n        blockPrefixLen = sortKeyLength - 1;\n      }\n      return key;\n    }\n\n","sourceOld":"    @Override\n    public BytesRef nextKey() {\n      try {\n        if (state == STATE_END) {\n          // if fstEnum is at end, then that's it.\n          return null;\n        }\n\n        if (state == STATE_SEEK && blockFilePointer == -1) { // see seekBlock\n          if (fstEnum.next() == null) { // advance.\n            state = STATE_END; // probably never happens (empty FST)?  We code defensively.\n            return null;\n          }\n        }\n        keyBuilder.copyBytes(fstEnum.current().input);\n        blockFilePointer = fstEnum.current().output;\n        assert blockFilePointer >= 0;\n\n        state = STATE_NEXT;\n\n        BytesRef key = keyBuilder.get();\n\n        // advance fstEnum\n        BytesRefFSTEnum.InputOutput<Long> inputOutput = fstEnum.next();\n\n        // calc common prefix\n        if (inputOutput == null) {\n          state = STATE_END; // for *next* call; current state is good\n          blockPrefixLen = 0;\n        } else {\n          int sortKeyLength = StringHelper.sortKeyLength(key, inputOutput.input);\n          assert sortKeyLength >= 1;\n          blockPrefixLen = sortKeyLength - 1;\n        }\n        return key;\n      } catch (IOException e) {\n        // Should never happen.\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e478fa10594a2ef9d1ddf7d195020300453c4e","date":1577783287,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FSTDictionary.Browser#nextKey().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FSTDictionary.Browser#nextKey().mjava","sourceNew":"    @Override\n    public BytesRef nextKey() throws IOException {\n      if (state == STATE_END) {\n        // if fstEnum is at end, then that's it.\n        return null;\n      }\n\n      if (state == STATE_SEEK && blockFilePointer == -1) { // see seekBlock\n        if (fstEnum.next() == null) { // advance.\n          state = STATE_END; // probably never happens (empty FST)?  We code defensively.\n          return null;\n        }\n      }\n      keyBuilder.copyBytes(fstEnum.current().input);\n      blockFilePointer = fstEnum.current().output;\n      assert blockFilePointer >= 0;\n\n      state = STATE_NEXT;\n\n      BytesRef key = keyBuilder.get();\n\n      // advance fstEnum\n      BytesRefFSTEnum.InputOutput<Long> inputOutput = fstEnum.next();\n\n      // calc common prefix\n      if (inputOutput == null) {\n        state = STATE_END; // for *next* call; current state is good\n        blockPrefixLen = 0;\n      } else {\n        int sortKeyLength = StringHelper.sortKeyLength(key, inputOutput.input);\n        assert sortKeyLength >= 1;\n        blockPrefixLen = sortKeyLength - 1;\n      }\n      return key;\n    }\n\n","sourceOld":"    @Override\n    public BytesRef nextKey() {\n      try {\n        if (state == STATE_END) {\n          // if fstEnum is at end, then that's it.\n          return null;\n        }\n\n        if (state == STATE_SEEK && blockFilePointer == -1) { // see seekBlock\n          if (fstEnum.next() == null) { // advance.\n            state = STATE_END; // probably never happens (empty FST)?  We code defensively.\n            return null;\n          }\n        }\n        keyBuilder.copyBytes(fstEnum.current().input);\n        blockFilePointer = fstEnum.current().output;\n        assert blockFilePointer >= 0;\n\n        state = STATE_NEXT;\n\n        BytesRef key = keyBuilder.get();\n\n        // advance fstEnum\n        BytesRefFSTEnum.InputOutput<Long> inputOutput = fstEnum.next();\n\n        // calc common prefix\n        if (inputOutput == null) {\n          state = STATE_END; // for *next* call; current state is good\n          blockPrefixLen = 0;\n        } else {\n          int sortKeyLength = StringHelper.sortKeyLength(key, inputOutput.input);\n          assert sortKeyLength >= 1;\n          blockPrefixLen = sortKeyLength - 1;\n        }\n        return key;\n      } catch (IOException e) {\n        // Should never happen.\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23fcccd57316410c404dd37307a496ab850efa9c","date":1582897939,"type":4,"author":"Bruno Roustant","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FSTDictionary.Browser#nextKey().mjava","sourceNew":null,"sourceOld":"    @Override\n    public BytesRef nextKey() throws IOException {\n      if (state == STATE_END) {\n        // if fstEnum is at end, then that's it.\n        return null;\n      }\n\n      if (state == STATE_SEEK && blockFilePointer == -1) { // see seekBlock\n        if (fstEnum.next() == null) { // advance.\n          state = STATE_END; // probably never happens (empty FST)?  We code defensively.\n          return null;\n        }\n      }\n      keyBuilder.copyBytes(fstEnum.current().input);\n      blockFilePointer = fstEnum.current().output;\n      assert blockFilePointer >= 0;\n\n      state = STATE_NEXT;\n\n      BytesRef key = keyBuilder.get();\n\n      // advance fstEnum\n      BytesRefFSTEnum.InputOutput<Long> inputOutput = fstEnum.next();\n\n      // calc common prefix\n      if (inputOutput == null) {\n        state = STATE_END; // for *next* call; current state is good\n        blockPrefixLen = 0;\n      } else {\n        int sortKeyLength = StringHelper.sortKeyLength(key, inputOutput.input);\n        assert sortKeyLength >= 1;\n        blockPrefixLen = sortKeyLength - 1;\n      }\n      return key;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42f6185d883389450f593fb00103d2e89a0b8336":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62e478fa10594a2ef9d1ddf7d195020300453c4e":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","42f6185d883389450f593fb00103d2e89a0b8336"],"23fcccd57316410c404dd37307a496ab850efa9c":["42f6185d883389450f593fb00103d2e89a0b8336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23fcccd57316410c404dd37307a496ab850efa9c"]},"commit2Childs":{"42f6185d883389450f593fb00103d2e89a0b8336":["62e478fa10594a2ef9d1ddf7d195020300453c4e","23fcccd57316410c404dd37307a496ab850efa9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["42f6185d883389450f593fb00103d2e89a0b8336","62e478fa10594a2ef9d1ddf7d195020300453c4e"],"62e478fa10594a2ef9d1ddf7d195020300453c4e":[],"23fcccd57316410c404dd37307a496ab850efa9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e478fa10594a2ef9d1ddf7d195020300453c4e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}