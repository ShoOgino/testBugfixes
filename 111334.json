{"path":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadCheckQuery#testUnorderedPayloadChecks().mjava","commits":[{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadCheckQuery#testUnorderedPayloadChecks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadCheckQuery#testUnorderedPayloadChecks().mjava","sourceNew":"  public void testUnorderedPayloadChecks() throws Exception {\n\n    SpanTermQuery term5 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    SpanTermQuery term100 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery term4 = new SpanTermQuery(new Term(\"field\", \"four\"));\n    SpanNearQuery nearQuery = new SpanNearQuery(new SpanQuery[]{term5, term100, term4}, 0, false);\n\n    List<BytesRef> payloads = new ArrayList<>();\n    payloads.add(new BytesRef(\"pos: \" + 2));\n    payloads.add(new BytesRef(\"pos: \" + 1));\n    payloads.add(new BytesRef(\"pos: \" + 0));\n\n    SpanPayloadCheckQuery payloadQuery = new SpanPayloadCheckQuery(nearQuery, payloads);\n    checkHits(payloadQuery, new int[]{ 405 });\n\n    payloads.clear();\n    payloads.add(new BytesRef(\"pos: \" + 0));\n    payloads.add(new BytesRef(\"pos: \" + 1));\n    payloads.add(new BytesRef(\"pos: \" + 2));\n\n    payloadQuery = new SpanPayloadCheckQuery(nearQuery, payloads);\n    checkHits(payloadQuery, new int[]{ 504 });\n\n  }\n\n","sourceOld":"  public void testUnorderedPayloadChecks() throws Exception {\n\n    SpanTermQuery term5 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    SpanTermQuery term100 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery term4 = new SpanTermQuery(new Term(\"field\", \"four\"));\n    SpanNearQuery nearQuery = new SpanNearQuery(new SpanQuery[]{term5, term100, term4}, 0, false);\n\n    List<BytesRef> payloads = new ArrayList<>();\n    payloads.add(new BytesRef(\"pos: \" + 2));\n    payloads.add(new BytesRef(\"pos: \" + 1));\n    payloads.add(new BytesRef(\"pos: \" + 0));\n\n    SpanPayloadCheckQuery payloadQuery = new SpanPayloadCheckQuery(nearQuery, payloads);\n    checkHits(payloadQuery, new int[]{ 405 });\n\n    payloads.clear();\n    payloads.add(new BytesRef(\"pos: \" + 0));\n    payloads.add(new BytesRef(\"pos: \" + 1));\n    payloads.add(new BytesRef(\"pos: \" + 2));\n\n    payloadQuery = new SpanPayloadCheckQuery(nearQuery, payloads);\n    checkHits(payloadQuery, new int[]{ 504 });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}