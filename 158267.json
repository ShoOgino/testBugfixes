{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","commits":[{"id":"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1","date":1338332414,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","pathOld":"/dev/null","sourceNew":"  public void testReuse() throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    doc.add(newField(\"foo\", \"bar\", TextField.TYPE_STORED));\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n    riw.addDocument(doc);\n    riw.close();\n\n    // Sharing IWC should be fine:\n    riw = new RandomIndexWriter(random(), dir, iwc);\n    riw.addDocument(doc);\n    riw.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","sourceNew":"  public void testReuse() throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    doc.add(newTextField(\"foo\", \"bar\", Store.YES));\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n    riw.addDocument(doc);\n    riw.close();\n\n    // Sharing IWC should be fine:\n    riw = new RandomIndexWriter(random(), dir, iwc);\n    riw.addDocument(doc);\n    riw.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testReuse() throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    doc.add(newField(\"foo\", \"bar\", TextField.TYPE_STORED));\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n    riw.addDocument(doc);\n    riw.close();\n\n    // Sharing IWC should be fine:\n    riw = new RandomIndexWriter(random(), dir, iwc);\n    riw.addDocument(doc);\n    riw.close();\n\n    dir.close();\n  }\n\n","bugFix":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4e54ed7cef46f86888b5fb547594f62160395c","date":1340006971,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","sourceNew":"  @Test\n  public void testReuse() throws Exception {\n    Directory dir = newDirectory();\n    // test that if the same IWC is reused across two IWs, it is cloned by each.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, conf);\n    LiveIndexWriterConfig liveConf1 = iw.w.getConfig();\n    iw.close();\n    \n    iw = new RandomIndexWriter(random(), dir, conf);\n    LiveIndexWriterConfig liveConf2 = iw.w.getConfig();\n    iw.close();\n    \n    // LiveIndexWriterConfig's \"copy\" constructor doesn't clone objects.\n    assertNotSame(\"IndexWriterConfig should have been cloned\", liveConf1.getMergePolicy(), liveConf2.getMergePolicy());\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testReuse() throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    doc.add(newTextField(\"foo\", \"bar\", Store.YES));\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n    riw.addDocument(doc);\n    riw.close();\n\n    // Sharing IWC should be fine:\n    riw = new RandomIndexWriter(random(), dir, iwc);\n    riw.addDocument(doc);\n    riw.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["4ce24aa081e44190692bbebc8aead342ad7060e8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ce24aa081e44190692bbebc8aead342ad7060e8","date":1374951664,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","sourceNew":"  @Test\n  public void testReuse() throws Exception {\n    Directory dir = newDirectory();\n    // test that IWC cannot be reused across two IWs\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    new RandomIndexWriter(random(), dir, conf).close();\n\n    // this should fail\n    try {\n      assertNotNull(new RandomIndexWriter(random(), dir, conf));\n      fail(\"should have hit AlreadySetException\");\n    } catch (AlreadySetException e) {\n      // expected\n    }\n\n    // also cloning it won't help, after it has been used already\n    try {\n      assertNotNull(new RandomIndexWriter(random(), dir, conf.clone()));\n      fail(\"should have hit AlreadySetException\");\n    } catch (AlreadySetException e) {\n      // expected\n    }\n    \n    // if it's cloned in advance, it should be ok\n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    new RandomIndexWriter(random(), dir, conf.clone()).close();\n    new RandomIndexWriter(random(), dir, conf.clone()).close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testReuse() throws Exception {\n    Directory dir = newDirectory();\n    // test that if the same IWC is reused across two IWs, it is cloned by each.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, conf);\n    LiveIndexWriterConfig liveConf1 = iw.w.getConfig();\n    iw.close();\n    \n    iw = new RandomIndexWriter(random(), dir, conf);\n    LiveIndexWriterConfig liveConf2 = iw.w.getConfig();\n    iw.close();\n    \n    // LiveIndexWriterConfig's \"copy\" constructor doesn't clone objects.\n    assertNotSame(\"IndexWriterConfig should have been cloned\", liveConf1.getMergePolicy(), liveConf2.getMergePolicy());\n    \n    dir.close();\n  }\n\n","bugFix":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","sourceNew":"  @Test\n  public void testReuse() throws Exception {\n    Directory dir = newDirectory();\n    // test that IWC cannot be reused across two IWs\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    new RandomIndexWriter(random(), dir, conf).close();\n\n    // this should fail\n    try {\n      assertNotNull(new RandomIndexWriter(random(), dir, conf));\n      fail(\"should have hit AlreadySetException\");\n    } catch (AlreadySetException e) {\n      // expected\n    }\n\n    // also cloning it won't help, after it has been used already\n    try {\n      assertNotNull(new RandomIndexWriter(random(), dir, conf.clone()));\n      fail(\"should have hit AlreadySetException\");\n    } catch (AlreadySetException e) {\n      // expected\n    }\n    \n    // if it's cloned in advance, it should be ok\n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    new RandomIndexWriter(random(), dir, conf.clone()).close();\n    new RandomIndexWriter(random(), dir, conf.clone()).close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testReuse() throws Exception {\n    Directory dir = newDirectory();\n    // test that if the same IWC is reused across two IWs, it is cloned by each.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, conf);\n    LiveIndexWriterConfig liveConf1 = iw.w.getConfig();\n    iw.close();\n    \n    iw = new RandomIndexWriter(random(), dir, conf);\n    LiveIndexWriterConfig liveConf2 = iw.w.getConfig();\n    iw.close();\n    \n    // LiveIndexWriterConfig's \"copy\" constructor doesn't clone objects.\n    assertNotSame(\"IndexWriterConfig should have been cloned\", liveConf1.getMergePolicy(), liveConf2.getMergePolicy());\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","sourceNew":"  @Test\n  public void testReuse() throws Exception {\n    Directory dir = newDirectory();\n    // test that IWC cannot be reused across two IWs\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    new RandomIndexWriter(random(), dir, conf).shutdown();\n\n    // this should fail\n    try {\n      assertNotNull(new RandomIndexWriter(random(), dir, conf));\n      fail(\"should have hit AlreadySetException\");\n    } catch (AlreadySetException e) {\n      // expected\n    }\n\n    // also cloning it won't help, after it has been used already\n    try {\n      assertNotNull(new RandomIndexWriter(random(), dir, conf.clone()));\n      fail(\"should have hit AlreadySetException\");\n    } catch (AlreadySetException e) {\n      // expected\n    }\n    \n    // if it's cloned in advance, it should be ok\n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    new RandomIndexWriter(random(), dir, conf.clone()).shutdown();\n    new RandomIndexWriter(random(), dir, conf.clone()).shutdown();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testReuse() throws Exception {\n    Directory dir = newDirectory();\n    // test that IWC cannot be reused across two IWs\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    new RandomIndexWriter(random(), dir, conf).close();\n\n    // this should fail\n    try {\n      assertNotNull(new RandomIndexWriter(random(), dir, conf));\n      fail(\"should have hit AlreadySetException\");\n    } catch (AlreadySetException e) {\n      // expected\n    }\n\n    // also cloning it won't help, after it has been used already\n    try {\n      assertNotNull(new RandomIndexWriter(random(), dir, conf.clone()));\n      fail(\"should have hit AlreadySetException\");\n    } catch (AlreadySetException e) {\n      // expected\n    }\n    \n    // if it's cloned in advance, it should be ok\n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    new RandomIndexWriter(random(), dir, conf.clone()).close();\n    new RandomIndexWriter(random(), dir, conf.clone()).close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cfc45818441587d8004ff1a119fb60ac9ecb9a14","date":1401437797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","sourceNew":"  @Test\n  public void testReuse() throws Exception {\n    Directory dir = newDirectory();\n    // test that IWC cannot be reused across two IWs\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    new RandomIndexWriter(random(), dir, conf).shutdown();\n\n    // this should fail\n    try {\n      assertNotNull(new RandomIndexWriter(random(), dir, conf));\n      fail(\"should have hit AlreadySetException\");\n    } catch (AlreadySetException e) {\n      // expected\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testReuse() throws Exception {\n    Directory dir = newDirectory();\n    // test that IWC cannot be reused across two IWs\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    new RandomIndexWriter(random(), dir, conf).shutdown();\n\n    // this should fail\n    try {\n      assertNotNull(new RandomIndexWriter(random(), dir, conf));\n      fail(\"should have hit AlreadySetException\");\n    } catch (AlreadySetException e) {\n      // expected\n    }\n\n    // also cloning it won't help, after it has been used already\n    try {\n      assertNotNull(new RandomIndexWriter(random(), dir, conf.clone()));\n      fail(\"should have hit AlreadySetException\");\n    } catch (AlreadySetException e) {\n      // expected\n    }\n    \n    // if it's cloned in advance, it should be ok\n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    new RandomIndexWriter(random(), dir, conf.clone()).shutdown();\n    new RandomIndexWriter(random(), dir, conf.clone()).shutdown();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","sourceNew":"  @Test\n  public void testReuse() throws Exception {\n    Directory dir = newDirectory();\n    // test that IWC cannot be reused across two IWs\n    IndexWriterConfig conf = newIndexWriterConfig(null);\n    new RandomIndexWriter(random(), dir, conf).shutdown();\n\n    // this should fail\n    try {\n      assertNotNull(new RandomIndexWriter(random(), dir, conf));\n      fail(\"should have hit AlreadySetException\");\n    } catch (AlreadySetException e) {\n      // expected\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testReuse() throws Exception {\n    Directory dir = newDirectory();\n    // test that IWC cannot be reused across two IWs\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    new RandomIndexWriter(random(), dir, conf).shutdown();\n\n    // this should fail\n    try {\n      assertNotNull(new RandomIndexWriter(random(), dir, conf));\n      fail(\"should have hit AlreadySetException\");\n    } catch (AlreadySetException e) {\n      // expected\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","sourceNew":"  @Test\n  public void testReuse() throws Exception {\n    Directory dir = newDirectory();\n    // test that IWC cannot be reused across two IWs\n    IndexWriterConfig conf = newIndexWriterConfig(null);\n    new RandomIndexWriter(random(), dir, conf).close();\n\n    // this should fail\n    try {\n      assertNotNull(new RandomIndexWriter(random(), dir, conf));\n      fail(\"should have hit AlreadySetException\");\n    } catch (AlreadySetException e) {\n      // expected\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testReuse() throws Exception {\n    Directory dir = newDirectory();\n    // test that IWC cannot be reused across two IWs\n    IndexWriterConfig conf = newIndexWriterConfig(null);\n    new RandomIndexWriter(random(), dir, conf).shutdown();\n\n    // this should fail\n    try {\n      assertNotNull(new RandomIndexWriter(random(), dir, conf));\n      fail(\"should have hit AlreadySetException\");\n    } catch (AlreadySetException e) {\n      // expected\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9299079153fd7895bf3cf6835cf7019af2ba89b3","date":1417813477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","sourceNew":"  @Test\n  public void testReuse() throws Exception {\n    Directory dir = newDirectory();\n    // test that IWC cannot be reused across two IWs\n    IndexWriterConfig conf = newIndexWriterConfig(null);\n    new RandomIndexWriter(random(), dir, conf).close();\n\n    // this should fail\n    try {\n      assertNotNull(new RandomIndexWriter(random(), dir, conf));\n      fail(\"should have hit AlreadySetException\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testReuse() throws Exception {\n    Directory dir = newDirectory();\n    // test that IWC cannot be reused across two IWs\n    IndexWriterConfig conf = newIndexWriterConfig(null);\n    new RandomIndexWriter(random(), dir, conf).close();\n\n    // this should fail\n    try {\n      assertNotNull(new RandomIndexWriter(random(), dir, conf));\n      fail(\"should have hit AlreadySetException\");\n    } catch (AlreadySetException e) {\n      // expected\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testReuse().mjava","sourceNew":"  @Test\n  public void testReuse() throws Exception {\n    Directory dir = newDirectory();\n    // test that IWC cannot be reused across two IWs\n    IndexWriterConfig conf = newIndexWriterConfig(null);\n    new RandomIndexWriter(random(), dir, conf).close();\n\n    // this should fail\n    expectThrows(IllegalStateException.class, () -> {\n      assertNotNull(new RandomIndexWriter(random(), dir, conf));\n    });\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testReuse() throws Exception {\n    Directory dir = newDirectory();\n    // test that IWC cannot be reused across two IWs\n    IndexWriterConfig conf = newIndexWriterConfig(null);\n    new RandomIndexWriter(random(), dir, conf).close();\n\n    // this should fail\n    try {\n      assertNotNull(new RandomIndexWriter(random(), dir, conf));\n      fail(\"should have hit AlreadySetException\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n\n    dir.close();\n  }\n\n","bugFix":["4ce24aa081e44190692bbebc8aead342ad7060e8","9299079153fd7895bf3cf6835cf7019af2ba89b3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["cfc45818441587d8004ff1a119fb60ac9ecb9a14"],"cfc45818441587d8004ff1a119fb60ac9ecb9a14":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"05fe562aa248790944d43cdd478f512572835ba0":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"4ce24aa081e44190692bbebc8aead342ad7060e8":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"7f4e54ed7cef46f86888b5fb547594f62160395c":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["4ce24aa081e44190692bbebc8aead342ad7060e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cfc45818441587d8004ff1a119fb60ac9ecb9a14":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"4ce24aa081e44190692bbebc8aead342ad7060e8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"7f4e54ed7cef46f86888b5fb547594f62160395c":["4ce24aa081e44190692bbebc8aead342ad7060e8","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["05fe562aa248790944d43cdd478f512572835ba0"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["cfc45818441587d8004ff1a119fb60ac9ecb9a14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}