{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,SolrClient,String,String).mjava","commits":[{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,SolrClient,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException, InterruptedException, TimeoutException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            OverseerCollectionMessageHandler.NUM_SLICES, numShards,\n            ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n            ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n            ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n            OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr),\n        client, configName);\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException, InterruptedException, TimeoutException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            OverseerCollectionMessageHandler.NUM_SLICES, numShards,\n            ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n            ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n            ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n            OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr,\n            ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, configName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}