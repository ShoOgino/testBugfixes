{"path":"lucene/core/src/java/org/apache/lucene/util/IOUtils#reThrow(Throwable).mjava","commits":[{"id":"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666","date":1381263930,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#reThrow(Throwable).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simple utilty method that takes a previously caught\n   * {@code Throwable} and rethrows either {@code\n   * IOException} or an unchecked exception.  If the\n   * argument is null then this method does nothing.\n   */\n  public static void reThrow(Throwable th) throws IOException {\n    if (th != null) {\n      if (th instanceof IOException) {\n        throw (IOException) th;\n      }\n      if (th instanceof RuntimeException) {\n        throw (RuntimeException) th;\n      }\n      if (th instanceof Error) {\n        throw (Error) th;\n      }\n      throw new RuntimeException(th);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6f8a4ddee78d8bc3c8c736c1cdb130b94cde0b89"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f8a4ddee78d8bc3c8c736c1cdb130b94cde0b89","date":1395763949,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#reThrow(Throwable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#reThrow(Throwable).mjava","sourceNew":"  /**\n   * Simple utilty method that takes a previously caught\n   * {@code Throwable} and rethrows either {@code\n   * IOException} or an unchecked exception.  If the\n   * argument is null then this method does nothing.\n   */\n  public static void reThrow(Throwable th) throws IOException {\n    if (th != null) {\n      if (th instanceof IOException) {\n        throw (IOException) th;\n      }\n      reThrowUnchecked(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * Simple utilty method that takes a previously caught\n   * {@code Throwable} and rethrows either {@code\n   * IOException} or an unchecked exception.  If the\n   * argument is null then this method does nothing.\n   */\n  public static void reThrow(Throwable th) throws IOException {\n    if (th != null) {\n      if (th instanceof IOException) {\n        throw (IOException) th;\n      }\n      if (th instanceof RuntimeException) {\n        throw (RuntimeException) th;\n      }\n      if (th instanceof Error) {\n        throw (Error) th;\n      }\n      throw new RuntimeException(th);\n    }\n  }\n\n","bugFix":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"949847c0040cd70a68222d526cb0da7bf6cbb3c2","date":1410997182,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#reThrow(Throwable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#reThrow(Throwable).mjava","sourceNew":"  /**\n   * Simple utility method that takes a previously caught\n   * {@code Throwable} and rethrows either {@code\n   * IOException} or an unchecked exception.  If the\n   * argument is null then this method does nothing.\n   */\n  public static void reThrow(Throwable th) throws IOException {\n    if (th != null) {\n      if (th instanceof IOException) {\n        throw (IOException) th;\n      }\n      reThrowUnchecked(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * Simple utilty method that takes a previously caught\n   * {@code Throwable} and rethrows either {@code\n   * IOException} or an unchecked exception.  If the\n   * argument is null then this method does nothing.\n   */\n  public static void reThrow(Throwable th) throws IOException {\n    if (th != null) {\n      if (th instanceof IOException) {\n        throw (IOException) th;\n      }\n      reThrowUnchecked(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#reThrow(Throwable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#reThrow(Throwable).mjava","sourceNew":"  /**\n   * Rethrows the argument as {@code IOException} or {@code RuntimeException} \n   * if it's not null.\n   * \n   * @deprecated This method is deprecated in favor of {@link #rethrowAlways}. Code should\n   * be updated to {@link #rethrowAlways} and guarded with an additional null-argument check\n   * (because {@link #rethrowAlways} is not accepting null arguments). \n   */\n  @Deprecated\n  public static void reThrow(Throwable th) throws IOException {\n    if (th != null) {\n      throw rethrowAlways(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * Simple utility method that takes a previously caught\n   * {@code Throwable} and rethrows either {@code\n   * IOException} or an unchecked exception.  If the\n   * argument is null then this method does nothing.\n   */\n  public static void reThrow(Throwable th) throws IOException {\n    if (th != null) {\n      if (th instanceof IOException) {\n        throw (IOException) th;\n      }\n      reThrowUnchecked(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#reThrow(Throwable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#reThrow(Throwable).mjava","sourceNew":"  /**\n   * Rethrows the argument as {@code IOException} or {@code RuntimeException} \n   * if it's not null.\n   * \n   * @deprecated This method is deprecated in favor of {@link #rethrowAlways}. Code should\n   * be updated to {@link #rethrowAlways} and guarded with an additional null-argument check\n   * (because {@link #rethrowAlways} is not accepting null arguments). \n   */\n  @Deprecated\n  public static void reThrow(Throwable th) throws IOException {\n    if (th != null) {\n      throw rethrowAlways(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * Simple utility method that takes a previously caught\n   * {@code Throwable} and rethrows either {@code\n   * IOException} or an unchecked exception.  If the\n   * argument is null then this method does nothing.\n   */\n  public static void reThrow(Throwable th) throws IOException {\n    if (th != null) {\n      if (th instanceof IOException) {\n        throw (IOException) th;\n      }\n      reThrowUnchecked(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["949847c0040cd70a68222d526cb0da7bf6cbb3c2","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"6f8a4ddee78d8bc3c8c736c1cdb130b94cde0b89":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["6f8a4ddee78d8bc3c8c736c1cdb130b94cde0b89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"]},"commit2Childs":{"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["6f8a4ddee78d8bc3c8c736c1cdb130b94cde0b89"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6f8a4ddee78d8bc3c8c736c1cdb130b94cde0b89":["949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["e9017cf144952056066919f1ebc7897ff9bd71b1","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}