{"path":"lucene/test-framework/src/java/org/apache/lucene/mockfile/VirusCheckingFS#delete(Path).mjava","commits":[{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/mockfile/VirusCheckingFS#delete(Path).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void delete(Path path) throws IOException {\n    \n    if (enabled // test infra disables when it's \"really\" time to delete after test is done\n        && Files.exists(path) // important that we NOT delay a NoSuchFileException until later\n        && path.getFileName().toString().equals(IndexWriter.WRITE_LOCK_NAME) == false // life is particularly difficult if the virus checker hits our lock file\n        && random.nextInt(5) == 1) {\n      throw new AccessDeniedException(\"VirusCheckingFS is randomly refusing to delete file \\\"\" + path + \"\\\"\");\n    }\n    super.delete(path);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9","date":1454454426,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/mockfile/VirusCheckingFS#delete(Path).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/mockfile/VirusCheckingFS#delete(Path).mjava","sourceNew":"  @Override\n  public void delete(Path path) throws IOException {\n    \n    if (enabled // test infra disables when it's \"really\" time to delete after test is done\n        && Files.exists(path) // important that we NOT delay a NoSuchFileException until later\n        && path.getFileName().toString().equals(IndexWriter.WRITE_LOCK_NAME) == false // life is particularly difficult if the virus checker hits our lock file\n        && random.nextInt(5) == 1) {\n      if (true || LuceneTestCase.VERBOSE) {\n        System.out.println(\"NOTE: VirusCheckingFS now refusing to delete \" + path);\n      }\n      throw new AccessDeniedException(\"VirusCheckingFS is randomly refusing to delete file \\\"\" + path + \"\\\"\");\n    }\n    super.delete(path);\n  }\n\n","sourceOld":"  @Override\n  public void delete(Path path) throws IOException {\n    \n    if (enabled // test infra disables when it's \"really\" time to delete after test is done\n        && Files.exists(path) // important that we NOT delay a NoSuchFileException until later\n        && path.getFileName().toString().equals(IndexWriter.WRITE_LOCK_NAME) == false // life is particularly difficult if the virus checker hits our lock file\n        && random.nextInt(5) == 1) {\n      throw new AccessDeniedException(\"VirusCheckingFS is randomly refusing to delete file \\\"\" + path + \"\\\"\");\n    }\n    super.delete(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/mockfile/VirusCheckingFS#delete(Path).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/mockfile/VirusCheckingFS#delete(Path).mjava","sourceNew":"  @Override\n  public void delete(Path path) throws IOException {\n    \n    if (enabled // test infra disables when it's \"really\" time to delete after test is done\n        && Files.exists(path) // important that we NOT delay a NoSuchFileException until later\n        && path.getFileName().toString().equals(IndexWriter.WRITE_LOCK_NAME) == false // life is particularly difficult if the virus checker hits our lock file\n        && random.nextInt(5) == 1) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"NOTE: VirusCheckingFS now refusing to delete \" + path);\n      }\n      throw new AccessDeniedException(\"VirusCheckingFS is randomly refusing to delete file \\\"\" + path + \"\\\"\");\n    }\n    super.delete(path);\n  }\n\n","sourceOld":"  @Override\n  public void delete(Path path) throws IOException {\n    \n    if (enabled // test infra disables when it's \"really\" time to delete after test is done\n        && Files.exists(path) // important that we NOT delay a NoSuchFileException until later\n        && path.getFileName().toString().equals(IndexWriter.WRITE_LOCK_NAME) == false // life is particularly difficult if the virus checker hits our lock file\n        && random.nextInt(5) == 1) {\n      if (true || LuceneTestCase.VERBOSE) {\n        System.out.println(\"NOTE: VirusCheckingFS now refusing to delete \" + path);\n      }\n      throw new AccessDeniedException(\"VirusCheckingFS is randomly refusing to delete file \\\"\" + path + \"\\\"\");\n    }\n    super.delete(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44a0466296f4b2d9deac60e3e524628c97aa5191","date":1454532248,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/mockfile/VirusCheckingFS#delete(Path).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/mockfile/VirusCheckingFS#delete(Path).mjava","sourceNew":"  @Override\n  public void delete(Path path) throws IOException {\n\n    // Fake but deterministic and hopefully portable like-randomness:\n    long hash = state.incrementAndGet() * path.getFileName().hashCode();\n    \n    if (enabled // test infra disables when it's \"really\" time to delete after test is done, so it can reclaim temp dirs\n        && Files.exists(path) // important that we NOT delay a NoSuchFileException until later\n        && path.getFileName().toString().equals(IndexWriter.WRITE_LOCK_NAME) == false // life is particularly difficult if the virus checker hits our lock file\n        && (hash % 5) == 1) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"NOTE: VirusCheckingFS now refusing to delete \" + path);\n      }\n      throw new AccessDeniedException(\"VirusCheckingFS is randomly refusing to delete file \\\"\" + path + \"\\\"\");\n    }\n    super.delete(path);\n  }\n\n","sourceOld":"  @Override\n  public void delete(Path path) throws IOException {\n    \n    if (enabled // test infra disables when it's \"really\" time to delete after test is done\n        && Files.exists(path) // important that we NOT delay a NoSuchFileException until later\n        && path.getFileName().toString().equals(IndexWriter.WRITE_LOCK_NAME) == false // life is particularly difficult if the virus checker hits our lock file\n        && random.nextInt(5) == 1) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"NOTE: VirusCheckingFS now refusing to delete \" + path);\n      }\n      throw new AccessDeniedException(\"VirusCheckingFS is randomly refusing to delete file \\\"\" + path + \"\\\"\");\n    }\n    super.delete(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/mockfile/VirusCheckingFS#delete(Path).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void delete(Path path) throws IOException {\n\n    // Fake but deterministic and hopefully portable like-randomness:\n    long hash = state.incrementAndGet() * path.getFileName().hashCode();\n    \n    if (enabled // test infra disables when it's \"really\" time to delete after test is done, so it can reclaim temp dirs\n        && Files.exists(path) // important that we NOT delay a NoSuchFileException until later\n        && path.getFileName().toString().equals(IndexWriter.WRITE_LOCK_NAME) == false // life is particularly difficult if the virus checker hits our lock file\n        && (hash % 5) == 1) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"NOTE: VirusCheckingFS now refusing to delete \" + path);\n      }\n      throw new AccessDeniedException(\"VirusCheckingFS is randomly refusing to delete file \\\"\" + path + \"\\\"\");\n    }\n    super.delete(path);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/mockfile/VirusCheckingFS#delete(Path).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void delete(Path path) throws IOException {\n\n    // Fake but deterministic and hopefully portable like-randomness:\n    long hash = state.incrementAndGet() * path.getFileName().hashCode();\n    \n    if (enabled // test infra disables when it's \"really\" time to delete after test is done, so it can reclaim temp dirs\n        && Files.exists(path) // important that we NOT delay a NoSuchFileException until later\n        && path.getFileName().toString().equals(IndexWriter.WRITE_LOCK_NAME) == false // life is particularly difficult if the virus checker hits our lock file\n        && (hash % 5) == 1) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"NOTE: VirusCheckingFS now refusing to delete \" + path);\n      }\n      throw new AccessDeniedException(\"VirusCheckingFS is randomly refusing to delete file \\\"\" + path + \"\\\"\");\n    }\n    super.delete(path);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":0,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/mockfile/VirusCheckingFS#delete(Path).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void delete(Path path) throws IOException {\n\n    // Fake but deterministic and hopefully portable like-randomness:\n    long hash = state.incrementAndGet() * path.getFileName().hashCode();\n    \n    if (enabled // test infra disables when it's \"really\" time to delete after test is done, so it can reclaim temp dirs\n        && Files.exists(path) // important that we NOT delay a NoSuchFileException until later\n        && path.getFileName().toString().equals(IndexWriter.WRITE_LOCK_NAME) == false // life is particularly difficult if the virus checker hits our lock file\n        && (hash % 5) == 1) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"NOTE: VirusCheckingFS now refusing to delete \" + path);\n      }\n      throw new AccessDeniedException(\"VirusCheckingFS is randomly refusing to delete file \\\"\" + path + \"\\\"\");\n    }\n    super.delete(path);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9"],"5a207d19eac354d649c3f0e2cce070017c78125e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","44a0466296f4b2d9deac60e3e524628c97aa5191"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b470f36a9372c97283360b1304eacbde22df6c0d"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"44a0466296f4b2d9deac60e3e524628c97aa5191":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["44a0466296f4b2d9deac60e3e524628c97aa5191"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9"],"44a0466296f4b2d9deac60e3e524628c97aa5191":["b470f36a9372c97283360b1304eacbde22df6c0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}