{"path":"src/java/org/apache/solr/analysis/MappingCharFilter#read().mjava","commits":[{"id":"00c1e7284eb0e728903446dd05972acc9905dd53","date":1226627781,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/MappingCharFilter#read().mjava","pathOld":"/dev/null","sourceNew":"  public int read() throws IOException {\n    while( true ){\n      if( replacement != null && charPointer < replacement.length() )\n        return replacement.charAt( charPointer++ );\n\n      int firstChar = nextChar();\n      if( firstChar == -1 ) return -1;\n      NormalizeMap nm = normMap.submap != null ?\n        normMap.submap.get( (char)firstChar ) : null;\n      if( nm == null ) return firstChar;\n      NormalizeMap result = match( nm );\n      if( result == null ) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if( result.diff != 0 ){\n        int prevCumulativeDiff = pcmList.isEmpty() ? 0 :\n          pcmList.get( pcmList.size() - 1 ).cumulativeDiff;\n        if( result.diff < 0 ){\n          for( int i = 0; i < -result.diff ; i++ )\n            pcmList.add( new PosCorrectMap( nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i ) );\n        }\n        else{\n          pcmList.add( new PosCorrectMap( nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff ) );\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"009a655450b630274fba0e72d1f9fc541e2ec90b","date":1226745878,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/MappingCharFilter#read().mjava","pathOld":"src/java/org/apache/solr/analysis/MappingCharFilter#read().mjava","sourceNew":"  public int read() throws IOException {\n    while( true ){\n      if( replacement != null && charPointer < replacement.length() )\n        return replacement.charAt( charPointer++ );\n\n      int firstChar = nextChar();\n      if( firstChar == -1 ) return -1;\n      NormalizeMap nm = normMap.submap != null ?\n        normMap.submap.get( (char)firstChar ) : null;\n      if( nm == null ) return firstChar;\n      NormalizeMap result = match( nm );\n      if( result == null ) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if( result.diff != 0 ){\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if( result.diff < 0 ){\n          for( int i = 0; i < -result.diff ; i++ )\n            addPosCorrectMap( nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i );\n        }\n        else{\n          addPosCorrectMap( nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff ) ;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public int read() throws IOException {\n    while( true ){\n      if( replacement != null && charPointer < replacement.length() )\n        return replacement.charAt( charPointer++ );\n\n      int firstChar = nextChar();\n      if( firstChar == -1 ) return -1;\n      NormalizeMap nm = normMap.submap != null ?\n        normMap.submap.get( (char)firstChar ) : null;\n      if( nm == null ) return firstChar;\n      NormalizeMap result = match( nm );\n      if( result == null ) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if( result.diff != 0 ){\n        int prevCumulativeDiff = pcmList.isEmpty() ? 0 :\n          pcmList.get( pcmList.size() - 1 ).cumulativeDiff;\n        if( result.diff < 0 ){\n          for( int i = 0; i < -result.diff ; i++ )\n            pcmList.add( new PosCorrectMap( nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i ) );\n        }\n        else{\n          pcmList.add( new PosCorrectMap( nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff ) );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57bd7a02a040f2a0cfe036a57cf0c5009e3a16fa","date":1237463531,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/MappingCharFilter#read().mjava","pathOld":"src/java/org/apache/solr/analysis/MappingCharFilter#read().mjava","sourceNew":"  public int read() throws IOException {\n    while( true ){\n      if( replacement != null && charPointer < replacement.length() )\n        return replacement.charAt( charPointer++ );\n\n      int firstChar = nextChar();\n      if( firstChar == -1 ) return -1;\n      NormalizeMap nm = normMap.submap != null ?\n        normMap.submap.get( (char)firstChar ) : null;\n      if( nm == null ) return firstChar;\n      NormalizeMap result = match( nm );\n      if( result == null ) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if( result.diff != 0 ){\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if( result.diff < 0 ){\n          for( int i = 0; i < -result.diff ; i++ )\n            addOffCorrectMap( nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i );\n        }\n        else{\n          addOffCorrectMap( nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff ) ;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public int read() throws IOException {\n    while( true ){\n      if( replacement != null && charPointer < replacement.length() )\n        return replacement.charAt( charPointer++ );\n\n      int firstChar = nextChar();\n      if( firstChar == -1 ) return -1;\n      NormalizeMap nm = normMap.submap != null ?\n        normMap.submap.get( (char)firstChar ) : null;\n      if( nm == null ) return firstChar;\n      NormalizeMap result = match( nm );\n      if( result == null ) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if( result.diff != 0 ){\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if( result.diff < 0 ){\n          for( int i = 0; i < -result.diff ; i++ )\n            addPosCorrectMap( nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i );\n        }\n        else{\n          addPosCorrectMap( nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff ) ;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e77721aaf23393f6ea7926045ae6f8efea0ce8e","date":1247678464,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/analysis/MappingCharFilter#read().mjava","sourceNew":null,"sourceOld":"  public int read() throws IOException {\n    while( true ){\n      if( replacement != null && charPointer < replacement.length() )\n        return replacement.charAt( charPointer++ );\n\n      int firstChar = nextChar();\n      if( firstChar == -1 ) return -1;\n      NormalizeMap nm = normMap.submap != null ?\n        normMap.submap.get( (char)firstChar ) : null;\n      if( nm == null ) return firstChar;\n      NormalizeMap result = match( nm );\n      if( result == null ) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if( result.diff != 0 ){\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if( result.diff < 0 ){\n          for( int i = 0; i < -result.diff ; i++ )\n            addOffCorrectMap( nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i );\n        }\n        else{\n          addOffCorrectMap( nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff ) ;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e77721aaf23393f6ea7926045ae6f8efea0ce8e":["57bd7a02a040f2a0cfe036a57cf0c5009e3a16fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"009a655450b630274fba0e72d1f9fc541e2ec90b":["00c1e7284eb0e728903446dd05972acc9905dd53"],"00c1e7284eb0e728903446dd05972acc9905dd53":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"57bd7a02a040f2a0cfe036a57cf0c5009e3a16fa":["009a655450b630274fba0e72d1f9fc541e2ec90b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e77721aaf23393f6ea7926045ae6f8efea0ce8e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["00c1e7284eb0e728903446dd05972acc9905dd53"],"009a655450b630274fba0e72d1f9fc541e2ec90b":["57bd7a02a040f2a0cfe036a57cf0c5009e3a16fa"],"00c1e7284eb0e728903446dd05972acc9905dd53":["009a655450b630274fba0e72d1f9fc541e2ec90b"],"57bd7a02a040f2a0cfe036a57cf0c5009e3a16fa":["1e77721aaf23393f6ea7926045ae6f8efea0ce8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e77721aaf23393f6ea7926045ae6f8efea0ce8e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}