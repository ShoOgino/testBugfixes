{"path":"solr/core/src/test/org/apache/solr/cloud/ClusterStateMockUtil#makeReplicaProps(String,String,String,String,String).mjava","commits":[{"id":"7f6c2c088b7e829984b5bca4359702c0d5ccc62b","date":1581143367,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateMockUtil#makeReplicaProps(String,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static Map<String, Object> makeReplicaProps(String sliceName, String node, String replicaName, String stateCode, String replicaTypeCode) {\n    if (node == null || node.trim().length() == 0) {\n      node = \"1\";\n    }\n\n    Replica.State state = Replica.State.ACTIVE;\n    if (stateCode != null) {\n      switch (stateCode.charAt(0)) {\n        case 'S':\n          state = Replica.State.ACTIVE;\n          break;\n        case 'R':\n          state = Replica.State.RECOVERING;\n          break;\n        case 'D':\n          state = Replica.State.DOWN;\n          break;\n        case 'F':\n          state = Replica.State.RECOVERY_FAILED;\n          break;\n        default:\n          throw new IllegalArgumentException(\n              \"Unexpected state for replica: \" + stateCode);\n      }\n    }\n\n    Replica.Type replicaType = Replica.Type.NRT;\n    switch (replicaTypeCode)  {\n      case \"t\":\n        replicaType = Replica.Type.TLOG;\n        break;\n      case \"p\":\n        replicaType = Replica.Type.PULL;\n        break;\n    }\n\n    Map<String,Object> replicaPropMap = new HashMap<>();\n    replicaPropMap.put(ZkStateReader.NODE_NAME_PROP, \"baseUrl\" + node + \"_\");\n    replicaPropMap.put(ZkStateReader.BASE_URL_PROP, \"http://baseUrl\" + node);\n    replicaPropMap.put(ZkStateReader.STATE_PROP, state.toString());\n    replicaPropMap.put(ZkStateReader.CORE_NAME_PROP, sliceName + \"_\" + replicaName);\n    replicaPropMap.put(ZkStateReader.REPLICA_TYPE, replicaType.name());\n    return replicaPropMap;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f6c2c088b7e829984b5bca4359702c0d5ccc62b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f6c2c088b7e829984b5bca4359702c0d5ccc62b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f6c2c088b7e829984b5bca4359702c0d5ccc62b"],"7f6c2c088b7e829984b5bca4359702c0d5ccc62b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}