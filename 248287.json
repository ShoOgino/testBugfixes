{"path":"solr/core/src/java/org/apache/solr/schema/PointField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","commits":[{"id":"3cdd24a5b48ffd59f921ccc4f5199fc029f65797","date":1485039431,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues() && !field.multiValued()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues() && !field.multiValued()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744b111b17d15d490a648eb021bfa240e7f11556","date":1487008069,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues() && !field.multiValued()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues() && !field.multiValued()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues() && !field.multiValued()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues() && !field.multiValued()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19284d685ce334cd95ff0ace2793842f84bf7383","date":1487788272,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else if (field.indexed() && field.hasDocValues()) {\n      Query pointsQuery = getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      Query dvQuery = getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      return new IndexOrDocValuesQuery(pointsQuery, dvQuery);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c81907bd971f786e378654d32b80da32b0e950d","date":1578330742,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n                                           boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else if (field.indexed() && field.hasDocValues()) {\n      Query pointsQuery = getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      Query dvQuery = getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      return new IndexOrDocValuesQuery(pointsQuery, dvQuery);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else if (field.indexed() && field.hasDocValues()) {\n      Query pointsQuery = getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      Query dvQuery = getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      return new IndexOrDocValuesQuery(pointsQuery, dvQuery);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n                                           boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else if (field.indexed() && field.hasDocValues()) {\n      Query pointsQuery = getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      Query dvQuery = getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      return new IndexOrDocValuesQuery(pointsQuery, dvQuery);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else if (field.indexed() && field.hasDocValues()) {\n      Query pointsQuery = getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      Query dvQuery = getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      return new IndexOrDocValuesQuery(pointsQuery, dvQuery);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381df1a98f2a399bf06d747fc8cea1b2a17ae38","date":1578526395,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else if (field.indexed() && field.hasDocValues()) {\n      Query pointsQuery = getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      Query dvQuery = getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      return new IndexOrDocValuesQuery(pointsQuery, dvQuery);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n                                           boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else if (field.indexed() && field.hasDocValues()) {\n      Query pointsQuery = getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      Query dvQuery = getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      return new IndexOrDocValuesQuery(pointsQuery, dvQuery);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else if (field.indexed() && field.hasDocValues()) {\n      Query pointsQuery = getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      Query dvQuery = getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      return new IndexOrDocValuesQuery(pointsQuery, dvQuery);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n                                           boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else if (field.indexed() && field.hasDocValues()) {\n      Query pointsQuery = getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      Query dvQuery = getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      return new IndexOrDocValuesQuery(pointsQuery, dvQuery);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c7ba457c7f2595139254fab54362be336c5c355","date":1579734055,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n                                           boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else if (field.indexed() && field.hasDocValues()) {\n      Query pointsQuery = getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      Query dvQuery = getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      return new IndexOrDocValuesQuery(pointsQuery, dvQuery);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    } else if (field.indexed() && field.hasDocValues()) {\n      Query pointsQuery = getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      Query dvQuery = getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n      return new IndexOrDocValuesQuery(pointsQuery, dvQuery);\n    } else {\n      return getPointRangeQuery(parser, field, min, max, minInclusive, maxInclusive);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19284d685ce334cd95ff0ace2793842f84bf7383":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"3cdd24a5b48ffd59f921ccc4f5199fc029f65797":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["0c81907bd971f786e378654d32b80da32b0e950d"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"1da93834e39ce341a13e42b611d0a83bd3114bba":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["19284d685ce334cd95ff0ace2793842f84bf7383","0c81907bd971f786e378654d32b80da32b0e950d"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdd24a5b48ffd59f921ccc4f5199fc029f65797"],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797","744b111b17d15d490a648eb021bfa240e7f11556"],"0c81907bd971f786e378654d32b80da32b0e950d":["19284d685ce334cd95ff0ace2793842f84bf7383"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c7ba457c7f2595139254fab54362be336c5c355":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"744b111b17d15d490a648eb021bfa240e7f11556":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c7ba457c7f2595139254fab54362be336c5c355"]},"commit2Childs":{"19284d685ce334cd95ff0ace2793842f84bf7383":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","0c81907bd971f786e378654d32b80da32b0e950d"],"3cdd24a5b48ffd59f921ccc4f5199fc029f65797":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","022a4de90e0479b604264ca9c2e134c996454ab3","744b111b17d15d490a648eb021bfa240e7f11556"],"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["1da93834e39ce341a13e42b611d0a83bd3114bba","5c7ba457c7f2595139254fab54362be336c5c355"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["19284d685ce334cd95ff0ace2793842f84bf7383"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["1da93834e39ce341a13e42b611d0a83bd3114bba"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"0c81907bd971f786e378654d32b80da32b0e950d":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"5c7ba457c7f2595139254fab54362be336c5c355":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"744b111b17d15d490a648eb021bfa240e7f11556":["022a4de90e0479b604264ca9c2e134c996454ab3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}