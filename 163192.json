{"path":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#encodeCollationKey(byte[]).mjava","commits":[{"id":"d17d4fe0503a62f6522b1dd15204dd25cd231edf","date":1313599393,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#encodeCollationKey(byte[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#encodeCollationKey(byte[]).mjava","sourceNew":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   * @deprecated only for testing deprecated filters\n   */\n  @Deprecated\n  protected String encodeCollationKey(byte[] keyBits) {\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    int encodedLength = IndexableBinaryStringTools.getEncodedLength(keyBits, 0, keyBits.length);\n    char[] encodedBegArray = new char[encodedLength];\n    IndexableBinaryStringTools.encode(keyBits, 0, keyBits.length, encodedBegArray, 0, encodedLength);\n    return new String(encodedBegArray);\n  }\n\n","sourceOld":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   * @deprecated only for testing deprecated filters\n   */\n  @Deprecated\n  protected String encodeCollationKey(byte[] keyBits) {\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    int encodedLength = IndexableBinaryStringTools.getEncodedLength(keyBits, 0, keyBits.length);\n    char[] encodedBegArray = new char[encodedLength];\n    IndexableBinaryStringTools.encode(keyBits, 0, keyBits.length, encodedBegArray, 0, encodedLength);\n    return new String(encodedBegArray);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#encodeCollationKey(byte[]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#encodeCollationKey(byte[]).mjava","sourceNew":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   * @deprecated only for testing deprecated filters\n   */\n  @Deprecated\n  protected String encodeCollationKey(byte[] keyBits) {\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    int encodedLength = IndexableBinaryStringTools.getEncodedLength(keyBits, 0, keyBits.length);\n    char[] encodedBegArray = new char[encodedLength];\n    IndexableBinaryStringTools.encode(keyBits, 0, keyBits.length, encodedBegArray, 0, encodedLength);\n    return new String(encodedBegArray);\n  }\n\n","sourceOld":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   * @deprecated only for testing deprecated filters\n   */\n  @Deprecated\n  protected String encodeCollationKey(byte[] keyBits) {\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    int encodedLength = IndexableBinaryStringTools.getEncodedLength(keyBits, 0, keyBits.length);\n    char[] encodedBegArray = new char[encodedLength];\n    IndexableBinaryStringTools.encode(keyBits, 0, keyBits.length, encodedBegArray, 0, encodedLength);\n    return new String(encodedBegArray);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["d17d4fe0503a62f6522b1dd15204dd25cd231edf"],"d17d4fe0503a62f6522b1dd15204dd25cd231edf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d17d4fe0503a62f6522b1dd15204dd25cd231edf":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d17d4fe0503a62f6522b1dd15204dd25cd231edf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}