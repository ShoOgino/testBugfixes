{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/search/index/IndexController#addIndexSchema(IndexSchema).mjava","commits":[{"id":"09fe963da2613c724ffe82353b4ca2364a1f93c6","date":1155249160,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/search/index/IndexController#addIndexSchema(IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * add a schema to the index controller and create the indexer. create\n     * directories and check out existing indexes\n     */\n    protected void addIndexSchema(IndexSchema schema) {\n        if (this.destroyed.get())\n            throw new IllegalStateException(\n                    \"IndexController has been destroyed\");\n        if (schema.getName() == null)\n            throw new IllegalStateException(\n                    \"schema has no name -- is not associated with any service\");\n        if (this.indexerMap.containsKey(schema.getName()))\n            throw new IllegalStateException(\"schema for service \"\n                    + schema.getName() + \" is already registered\");\n        if (LOG.isInfoEnabled())\n            LOG.info(\"add new IndexSchema for service \" + schema.getName()\n                    + \" -- \" + schema);\n        try {\n            ServiceIndex bean = createIndexer(schema);\n            ReferenceCounter<IndexSearcher> searcher = getNewServiceSearcher(bean.getDirectory());\n            bean.setSearcher(searcher);\n            this.indexerMap.put(schema.getName(), bean);\n        } catch (IOException e) {\n            LOG.error(\"Can not create indexer for service \" + schema.getName(),\n                    e);\n            throw new GdataIndexerException(\n                    \"Can not create indexer for service \" + schema.getName(), e);\n        }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"032a97fadd06b99cd75ebc3be22b74701f80e25d","date":1155763286,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/search/index/IndexController#addIndexSchema(IndexSchema).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/search/index/IndexController#addIndexSchema(IndexSchema).mjava","sourceNew":"    /*\n     * add a schema to the index controller and create the indexer. create\n     * directories and check out existing indexes\n     */\n    protected void addIndexSchema(final IndexSchema schema) {\n        checkDestroyed();\n        if (schema.getName() == null)\n            throw new IllegalStateException(\n                    \"schema has no name -- is not associated with any service\");\n        if (this.indexerMap.containsKey(schema.getName()))\n            throw new IllegalStateException(\"schema for service \"\n                    + schema.getName() + \" is already registered\");\n        if (LOG.isInfoEnabled())\n            LOG.info(\"add new IndexSchema for service \" + schema.getName()\n                    + \" -- \" + schema);\n        try {\n            ServiceIndex bean = createIndexer(schema);\n            ReferenceCounter<IndexSearcher> searcher = getNewServiceSearcher(bean.getDirectory());\n            bean.setSearcher(searcher);\n            this.indexerMap.put(schema.getName(), bean);\n        } catch (IOException e) {\n            LOG.error(\"Can not create indexer for service \" + schema.getName(),\n                    e);\n            throw new GdataIndexerException(\n                    \"Can not create indexer for service \" + schema.getName(), e);\n        }\n\n    }\n\n","sourceOld":"    /*\n     * add a schema to the index controller and create the indexer. create\n     * directories and check out existing indexes\n     */\n    protected void addIndexSchema(IndexSchema schema) {\n        if (this.destroyed.get())\n            throw new IllegalStateException(\n                    \"IndexController has been destroyed\");\n        if (schema.getName() == null)\n            throw new IllegalStateException(\n                    \"schema has no name -- is not associated with any service\");\n        if (this.indexerMap.containsKey(schema.getName()))\n            throw new IllegalStateException(\"schema for service \"\n                    + schema.getName() + \" is already registered\");\n        if (LOG.isInfoEnabled())\n            LOG.info(\"add new IndexSchema for service \" + schema.getName()\n                    + \" -- \" + schema);\n        try {\n            ServiceIndex bean = createIndexer(schema);\n            ReferenceCounter<IndexSearcher> searcher = getNewServiceSearcher(bean.getDirectory());\n            bean.setSearcher(searcher);\n            this.indexerMap.put(schema.getName(), bean);\n        } catch (IOException e) {\n            LOG.error(\"Can not create indexer for service \" + schema.getName(),\n                    e);\n            throw new GdataIndexerException(\n                    \"Can not create indexer for service \" + schema.getName(), e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/search/index/IndexController#addIndexSchema(IndexSchema).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/search/index/IndexController#addIndexSchema(IndexSchema).mjava","sourceNew":"    /*\n     * add a schema to the index controller and create the indexer. create\n     * directories and check out existing indexes\n     */\n    protected void addIndexSchema(final IndexSchema schema) {\n        checkDestroyed();\n        if (schema.getName() == null)\n            throw new IllegalStateException(\n                    \"schema has no name -- is not associated with any service\");\n        if (this.indexerMap.containsKey(schema.getName()))\n            throw new IllegalStateException(\"schema for service \"\n                    + schema.getName() + \" is already registered\");\n        if (LOG.isInfoEnabled())\n            LOG.info(\"add new IndexSchema for service \" + schema.getName()\n                    + \" -- \" + schema);\n        try {\n            ServiceIndex bean = createIndexer(schema);\n            ReferenceCounter<IndexSearcher> searcher = getNewServiceSearcher(bean.getDirectory());\n            bean.setSearcher(searcher);\n            this.indexerMap.put(schema.getName(), bean);\n        } catch (IOException e) {\n            LOG.error(\"Can not create indexer for service \" + schema.getName(),\n                    e);\n            throw new GdataIndexerException(\n                    \"Can not create indexer for service \" + schema.getName(), e);\n        }\n\n    }\n\n","sourceOld":"    /*\n     * add a schema to the index controller and create the indexer. create\n     * directories and check out existing indexes\n     */\n    protected void addIndexSchema(final IndexSchema schema) {\n        checkDestroyed();\n        if (schema.getName() == null)\n            throw new IllegalStateException(\n                    \"schema has no name -- is not associated with any service\");\n        if (this.indexerMap.containsKey(schema.getName()))\n            throw new IllegalStateException(\"schema for service \"\n                    + schema.getName() + \" is already registered\");\n        if (LOG.isInfoEnabled())\n            LOG.info(\"add new IndexSchema for service \" + schema.getName()\n                    + \" -- \" + schema);\n        try {\n            ServiceIndex bean = createIndexer(schema);\n            ReferenceCounter<IndexSearcher> searcher = getNewServiceSearcher(bean.getDirectory());\n            bean.setSearcher(searcher);\n            this.indexerMap.put(schema.getName(), bean);\n        } catch (IOException e) {\n            LOG.error(\"Can not create indexer for service \" + schema.getName(),\n                    e);\n            throw new GdataIndexerException(\n                    \"Can not create indexer for service \" + schema.getName(), e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09fe963da2613c724ffe82353b4ca2364a1f93c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"032a97fadd06b99cd75ebc3be22b74701f80e25d":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["032a97fadd06b99cd75ebc3be22b74701f80e25d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"]},"commit2Childs":{"09fe963da2613c724ffe82353b4ca2364a1f93c6":["032a97fadd06b99cd75ebc3be22b74701f80e25d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"032a97fadd06b99cd75ebc3be22b74701f80e25d":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}