{"path":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","pathOld":"/dev/null","sourceNew":"    private int calculateMaxDistance(int m) {\n      return (int) ((1-minSimilarity) * (Math.min(text.length, m) + realPrefixLength));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"971c6449b5391e0af36ec7578133d205a03e2836","date":1281210435,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","sourceNew":"    /**\n     * The max Distance is the maximum Levenshtein distance for the text\n     * compared to some other value that results in score that is\n     * better than the minimum similarity.\n     * @param m the length of the \"other value\"\n     * @return the maximum levenshtein distance that we care about\n     */\n    private int calculateMaxDistance(int m) {\n      return (int) ((1-minSimilarity) * (Math.min(text.length, m) + realPrefixLength));\n    }\n\n","sourceOld":"    private int calculateMaxDistance(int m) {\n      return (int) ((1-minSimilarity) * (Math.min(text.length, m) + realPrefixLength));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a4d59223802237d352245759cf541e315aab20a","date":1285686672,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","sourceNew":"    /**\n     * The max Distance is the maximum Levenshtein distance for the text\n     * compared to some other value that results in score that is\n     * better than the minimum similarity.\n     * @param m the length of the \"other value\"\n     * @return the maximum levenshtein distance that we care about\n     */\n    private int calculateMaxDistance(int m) {\n      return raw ? maxEdits : Math.min(maxEdits, \n          (int)((1-minSimilarity) * (Math.min(text.length, m) + realPrefixLength)));\n    }\n\n","sourceOld":"    /**\n     * The max Distance is the maximum Levenshtein distance for the text\n     * compared to some other value that results in score that is\n     * better than the minimum similarity.\n     * @param m the length of the \"other value\"\n     * @return the maximum levenshtein distance that we care about\n     */\n    private int calculateMaxDistance(int m) {\n      return (int) ((1-minSimilarity) * (Math.min(text.length, m) + realPrefixLength));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","sourceNew":"    /**\n     * The max Distance is the maximum Levenshtein distance for the text\n     * compared to some other value that results in score that is\n     * better than the minimum similarity.\n     * @param m the length of the \"other value\"\n     * @return the maximum levenshtein distance that we care about\n     */\n    private int calculateMaxDistance(int m) {\n      return raw ? maxEdits : Math.min(maxEdits, \n          (int)((1-minSimilarity) * (Math.min(text.length, m) + realPrefixLength)));\n    }\n\n","sourceOld":"    private int calculateMaxDistance(int m) {\n      return (int) ((1-minSimilarity) * (Math.min(text.length, m) + realPrefixLength));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","sourceNew":"    /**\n     * The max Distance is the maximum Levenshtein distance for the text\n     * compared to some other value that results in score that is\n     * better than the minimum similarity.\n     * @param m the length of the \"other value\"\n     * @return the maximum levenshtein distance that we care about\n     */\n    private int calculateMaxDistance(int m) {\n      return raw ? maxEdits : Math.min(maxEdits, \n          (int)((1-minSimilarity) * (Math.min(text.length, m) + realPrefixLength)));\n    }\n\n","sourceOld":"    /**\n     * The max Distance is the maximum Levenshtein distance for the text\n     * compared to some other value that results in score that is\n     * better than the minimum similarity.\n     * @param m the length of the \"other value\"\n     * @return the maximum levenshtein distance that we care about\n     */\n    private int calculateMaxDistance(int m) {\n      return raw ? maxEdits : Math.min(maxEdits, \n          (int)((1-minSimilarity) * (Math.min(text.length, m) + realPrefixLength)));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3a4d59223802237d352245759cf541e315aab20a"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3a4d59223802237d352245759cf541e315aab20a":["971c6449b5391e0af36ec7578133d205a03e2836"],"971c6449b5391e0af36ec7578133d205a03e2836":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","3a4d59223802237d352245759cf541e315aab20a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["971c6449b5391e0af36ec7578133d205a03e2836","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"3a4d59223802237d352245759cf541e315aab20a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"971c6449b5391e0af36ec7578133d205a03e2836":["3a4d59223802237d352245759cf541e315aab20a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}