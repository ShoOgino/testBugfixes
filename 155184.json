{"path":"lucene/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","commits":[{"id":"4e9bbb27241bcf9645bb2f724c137537aa69918a","date":1287780008,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getRangeQuery(fields[i], part1, part2, startInclusive, endInclusive),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getRangeQuery(fields[i], part1, part2, inclusive),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getRangeQuery(fields[i], part1, part2, startInclusive, endInclusive),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getRangeQuery(fields[i], part1, part2, inclusive),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getRangeQuery(fields[i], part1, part2, startInclusive, endInclusive),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getRangeQuery(fields[i], part1, part2, startInclusive, endInclusive),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getRangeQuery(fields[i], part1, part2, startInclusive, endInclusive),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e9bbb27241bcf9645bb2f724c137537aa69918a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["4e9bbb27241bcf9645bb2f724c137537aa69918a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e9bbb27241bcf9645bb2f724c137537aa69918a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e9bbb27241bcf9645bb2f724c137537aa69918a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"]},"commit2Childs":{"4e9bbb27241bcf9645bb2f724c137537aa69918a":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e9bbb27241bcf9645bb2f724c137537aa69918a","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}