{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getList(String,Map[String,Object],List[Object]).mjava","commits":[{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getList(String,Map[String,Object],List[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getList(String,Map[String,Object],List[String]).mjava","sourceNew":"  private static List<Object> getList(String key, Map<String, Object> properties, List<Object> defaultList) {\n    if (defaultList == null) {\n      defaultList = Collections.emptyList();\n    }\n    Object o = properties.get(key);\n    if (o == null) {\n      return defaultList;\n    }\n    if (o instanceof List) {\n      return (List)o;\n    } else if (o instanceof Collection) {\n      return new ArrayList<>((Collection) o);\n    } else {\n      return Collections.singletonList(String.valueOf(o));\n    }\n  }\n\n","sourceOld":"  private static List<String> getList(String key, Map<String, Object> properties, List<String> defaultList) {\n    if (defaultList == null) {\n      defaultList = Collections.emptyList();\n    }\n    Object o = properties.get(key);\n    if (o == null) {\n      return defaultList;\n    }\n    if (o instanceof List) {\n      return (List)o;\n    } else {\n      return Collections.singletonList(String.valueOf(o));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getList(String,Map[String,Object],List[Object]).mjava","pathOld":"/dev/null","sourceNew":"  private static List<Object> getList(String key, Map<String, Object> properties, List<Object> defaultList) {\n    if (defaultList == null) {\n      defaultList = Collections.emptyList();\n    }\n    Object o = properties.get(key);\n    if (o == null) {\n      return defaultList;\n    }\n    if (o instanceof List) {\n      return (List)o;\n    } else if (o instanceof Collection) {\n      return new ArrayList<>((Collection) o);\n    } else {\n      return Collections.singletonList(String.valueOf(o));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getList(String,Map[String,Object],List[Object]).mjava","pathOld":"/dev/null","sourceNew":"  private static List<Object> getList(String key, Map<String, Object> properties, List<Object> defaultList) {\n    if (defaultList == null) {\n      defaultList = Collections.emptyList();\n    }\n    Object o = properties.get(key);\n    if (o == null) {\n      return defaultList;\n    }\n    if (o instanceof List) {\n      return (List)o;\n    } else if (o instanceof Collection) {\n      return new ArrayList<>((Collection) o);\n    } else {\n      return Collections.singletonList(String.valueOf(o));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getList(String,Map[String,Object],List[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getList(String,Map[String,Object],List[Object]).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  private static List<Object> getList(String key, Map<String, Object> properties, List<Object> defaultList) {\n    if (defaultList == null) {\n      defaultList = Collections.emptyList();\n    }\n    Object o = properties.get(key);\n    if (o == null) {\n      return defaultList;\n    }\n    if (o instanceof List) {\n      return (List)o;\n    } else if (o instanceof Collection) {\n      return new ArrayList<>((Collection) o);\n    } else {\n      return Collections.singletonList(String.valueOf(o));\n    }\n  }\n\n","sourceOld":"  private static List<Object> getList(String key, Map<String, Object> properties, List<Object> defaultList) {\n    if (defaultList == null) {\n      defaultList = Collections.emptyList();\n    }\n    Object o = properties.get(key);\n    if (o == null) {\n      return defaultList;\n    }\n    if (o instanceof List) {\n      return (List)o;\n    } else if (o instanceof Collection) {\n      return new ArrayList<>((Collection) o);\n    } else {\n      return Collections.singletonList(String.valueOf(o));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getList(String,Map[String,Object],List[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getList(String,Map[String,Object],List[Object]).mjava","sourceNew":"  private static List<Object> getList(String key, Map<String, Object> properties, List<Object> defaultList) {\n    if (defaultList == null) {\n      defaultList = Collections.emptyList();\n    }\n    Object o = properties.get(key);\n    if (o == null) {\n      return defaultList;\n    }\n    if (o instanceof List) {\n      return (List)o;\n    } else if (o instanceof Collection) {\n      return new ArrayList<>((Collection) o);\n    } else {\n      return Collections.singletonList(String.valueOf(o));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  private static List<Object> getList(String key, Map<String, Object> properties, List<Object> defaultList) {\n    if (defaultList == null) {\n      defaultList = Collections.emptyList();\n    }\n    Object o = properties.get(key);\n    if (o == null) {\n      return defaultList;\n    }\n    if (o instanceof List) {\n      return (List)o;\n    } else if (o instanceof Collection) {\n      return new ArrayList<>((Collection) o);\n    } else {\n      return Collections.singletonList(String.valueOf(o));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getList(String,Map[String,Object],List[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getList(String,Map[String,Object],List[Object]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private static List<Object> getList(String key, Map<String, Object> properties, List<Object> defaultList) {\n    if (defaultList == null) {\n      defaultList = Collections.emptyList();\n    }\n    Object o = properties.get(key);\n    if (o == null) {\n      return defaultList;\n    }\n    if (o instanceof List) {\n      return (List)o;\n    } else if (o instanceof Collection) {\n      return new ArrayList<>((Collection) o);\n    } else {\n      return Collections.singletonList(String.valueOf(o));\n    }\n  }\n\n","sourceOld":"  private static List<Object> getList(String key, Map<String, Object> properties, List<Object> defaultList) {\n    if (defaultList == null) {\n      defaultList = Collections.emptyList();\n    }\n    Object o = properties.get(key);\n    if (o == null) {\n      return defaultList;\n    }\n    if (o instanceof List) {\n      return (List)o;\n    } else if (o instanceof Collection) {\n      return new ArrayList<>((Collection) o);\n    } else {\n      return Collections.singletonList(String.valueOf(o));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getList(String,Map[String,Object],List[Object]).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private static List<Object> getList(String key, Map<String, Object> properties, List<Object> defaultList) {\n    if (defaultList == null) {\n      defaultList = Collections.emptyList();\n    }\n    Object o = properties.get(key);\n    if (o == null) {\n      return defaultList;\n    }\n    if (o instanceof List) {\n      return (List)o;\n    } else if (o instanceof Collection) {\n      return new ArrayList<>((Collection) o);\n    } else {\n      return Collections.singletonList(String.valueOf(o));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55ed5a78f8a4b37108ac73a894a105db562d303e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["560c18d71dad43d675158783c3840f8c80d6d39c"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["527adea7ce767368d7317339023e18e39702132e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"527adea7ce767368d7317339023e18e39702132e":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","55ed5a78f8a4b37108ac73a894a105db562d303e","560c18d71dad43d675158783c3840f8c80d6d39c"],"527adea7ce767368d7317339023e18e39702132e":["3f504512a03d978990cbff30db0522b354e846db"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["527adea7ce767368d7317339023e18e39702132e"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}