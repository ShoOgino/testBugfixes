{"path":"solr/core/src/java/org/apache/solr/util/FSHDFSUtils#recoverLease(DistributedFileSystem,int,Path,long).mjava","commits":[{"id":"c6d82c04c0bc088fae82f28ef47cb25a164f47fd","date":1422552161,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/FSHDFSUtils#recoverLease(DistributedFileSystem,int,Path,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Try to recover the lease.\n   * @return True if dfs#recoverLease came by true.\n   */\n  static boolean recoverLease(final DistributedFileSystem dfs, final int nbAttempt, final Path p, final long startWaiting)\n    throws FileNotFoundException {\n    boolean recovered = false;\n    try {\n      recovered = dfs.recoverLease(p);\n      log.info(\"recoverLease=\" + recovered + \", \" +\n        getLogMessageDetail(nbAttempt, p, startWaiting));\n    } catch (IOException e) {\n      if (e instanceof LeaseExpiredException && e.getMessage().contains(\"File does not exist\")) {\n        // This exception comes out instead of FNFE, fix it\n        throw new FileNotFoundException(\"The given transactionlog file wasn't found at \" + p);\n      } else if (e instanceof FileNotFoundException) {\n        throw (FileNotFoundException)e;\n      }\n      log.warn(getLogMessageDetail(nbAttempt, p, startWaiting), e);\n    }\n    return recovered;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99b97f030e743d8dd4d7685202f71718d7e5af22","date":1548957620,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/FSHDFSUtils#recoverLease(DistributedFileSystem,int,Path,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FSHDFSUtils#recoverLease(DistributedFileSystem,int,Path,long).mjava","sourceNew":"  /**\n   * Try to recover the lease.\n   * @return True if dfs#recoverLease came by true.\n   */\n  static boolean recoverLease(final DistributedFileSystem dfs, final int nbAttempt, final Path p, final long startWaiting)\n    throws FileNotFoundException {\n    boolean recovered = false;\n    try {\n      recovered = dfs.recoverLease(p);\n      log.info(\"recoverLease=\" + recovered + \", \" +\n        getLogMessageDetail(nbAttempt, p, startWaiting));\n    } catch (IOException e) {\n      if (e.getMessage().contains(\"File does not exist\")) {\n        // This exception comes out instead of FNFE, fix it\n        throw new FileNotFoundException(\"The given transactionlog file wasn't found at \" + p);\n      } else if (e instanceof FileNotFoundException) {\n        throw (FileNotFoundException)e;\n      }\n      log.warn(getLogMessageDetail(nbAttempt, p, startWaiting), e);\n    }\n    return recovered;\n  }\n\n","sourceOld":"  /**\n   * Try to recover the lease.\n   * @return True if dfs#recoverLease came by true.\n   */\n  static boolean recoverLease(final DistributedFileSystem dfs, final int nbAttempt, final Path p, final long startWaiting)\n    throws FileNotFoundException {\n    boolean recovered = false;\n    try {\n      recovered = dfs.recoverLease(p);\n      log.info(\"recoverLease=\" + recovered + \", \" +\n        getLogMessageDetail(nbAttempt, p, startWaiting));\n    } catch (IOException e) {\n      if (e instanceof LeaseExpiredException && e.getMessage().contains(\"File does not exist\")) {\n        // This exception comes out instead of FNFE, fix it\n        throw new FileNotFoundException(\"The given transactionlog file wasn't found at \" + p);\n      } else if (e instanceof FileNotFoundException) {\n        throw (FileNotFoundException)e;\n      }\n      log.warn(getLogMessageDetail(nbAttempt, p, startWaiting), e);\n    }\n    return recovered;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34b74c124d68d8e306d6ef09624f3cd053b8a2fd","date":1548981962,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/FSHDFSUtils#recoverLease(DistributedFileSystem,int,Path,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FSHDFSUtils#recoverLease(DistributedFileSystem,int,Path,long).mjava","sourceNew":"  /**\n   * Try to recover the lease.\n   * @return True if dfs#recoverLease came by true.\n   */\n  static boolean recoverLease(final DistributedFileSystem dfs, final int nbAttempt, final Path p, final long startWaiting)\n    throws FileNotFoundException {\n    boolean recovered = false;\n    try {\n      recovered = dfs.recoverLease(p);\n      log.info(\"recoverLease=\" + recovered + \", \" +\n        getLogMessageDetail(nbAttempt, p, startWaiting));\n    } catch (IOException e) {\n      if (e instanceof LeaseExpiredException && e.getMessage().contains(\"File does not exist\")) {\n        // This exception comes out instead of FNFE, fix it\n        throw new FileNotFoundException(\"The given transactionlog file wasn't found at \" + p);\n      } else if (e instanceof FileNotFoundException) {\n        throw (FileNotFoundException)e;\n      }\n      log.warn(getLogMessageDetail(nbAttempt, p, startWaiting), e);\n    }\n    return recovered;\n  }\n\n","sourceOld":"  /**\n   * Try to recover the lease.\n   * @return True if dfs#recoverLease came by true.\n   */\n  static boolean recoverLease(final DistributedFileSystem dfs, final int nbAttempt, final Path p, final long startWaiting)\n    throws FileNotFoundException {\n    boolean recovered = false;\n    try {\n      recovered = dfs.recoverLease(p);\n      log.info(\"recoverLease=\" + recovered + \", \" +\n        getLogMessageDetail(nbAttempt, p, startWaiting));\n    } catch (IOException e) {\n      if (e.getMessage().contains(\"File does not exist\")) {\n        // This exception comes out instead of FNFE, fix it\n        throw new FileNotFoundException(\"The given transactionlog file wasn't found at \" + p);\n      } else if (e instanceof FileNotFoundException) {\n        throw (FileNotFoundException)e;\n      }\n      log.warn(getLogMessageDetail(nbAttempt, p, startWaiting), e);\n    }\n    return recovered;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44ca189138a5b6e1989d12ab992fab60e235ddc7","date":1549051496,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/FSHDFSUtils#recoverLease(DistributedFileSystem,int,Path,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FSHDFSUtils#recoverLease(DistributedFileSystem,int,Path,long).mjava","sourceNew":"  /**\n   * Try to recover the lease.\n   * @return True if dfs#recoverLease came by true.\n   */\n  static boolean recoverLease(final DistributedFileSystem dfs, final int nbAttempt, final Path p, final long startWaiting)\n    throws FileNotFoundException {\n    boolean recovered = false;\n    try {\n      recovered = dfs.recoverLease(p);\n      log.info(\"recoverLease=\" + recovered + \", \" +\n        getLogMessageDetail(nbAttempt, p, startWaiting));\n    } catch (IOException e) {\n      if (e.getMessage().contains(\"File does not exist\")) {\n        // This exception comes out instead of FNFE, fix it\n        throw new FileNotFoundException(\"The given transactionlog file wasn't found at \" + p);\n      } else if (e instanceof FileNotFoundException) {\n        throw (FileNotFoundException)e;\n      }\n      log.warn(getLogMessageDetail(nbAttempt, p, startWaiting), e);\n    }\n    return recovered;\n  }\n\n","sourceOld":"  /**\n   * Try to recover the lease.\n   * @return True if dfs#recoverLease came by true.\n   */\n  static boolean recoverLease(final DistributedFileSystem dfs, final int nbAttempt, final Path p, final long startWaiting)\n    throws FileNotFoundException {\n    boolean recovered = false;\n    try {\n      recovered = dfs.recoverLease(p);\n      log.info(\"recoverLease=\" + recovered + \", \" +\n        getLogMessageDetail(nbAttempt, p, startWaiting));\n    } catch (IOException e) {\n      if (e instanceof LeaseExpiredException && e.getMessage().contains(\"File does not exist\")) {\n        // This exception comes out instead of FNFE, fix it\n        throw new FileNotFoundException(\"The given transactionlog file wasn't found at \" + p);\n      } else if (e instanceof FileNotFoundException) {\n        throw (FileNotFoundException)e;\n      }\n      log.warn(getLogMessageDetail(nbAttempt, p, startWaiting), e);\n    }\n    return recovered;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/FSHDFSUtils#recoverLease(DistributedFileSystem,int,Path,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FSHDFSUtils#recoverLease(DistributedFileSystem,int,Path,long).mjava","sourceNew":"  /**\n   * Try to recover the lease.\n   * @return True if dfs#recoverLease came by true.\n   */\n  static boolean recoverLease(final DistributedFileSystem dfs, final int nbAttempt, final Path p, final long startWaiting)\n    throws FileNotFoundException {\n    boolean recovered = false;\n    try {\n      recovered = dfs.recoverLease(p);\n      if (log.isInfoEnabled()) {\n        log.info(\"recoverLease={}, {}\", recovered, getLogMessageDetail(nbAttempt, p, startWaiting));\n      }\n    } catch (IOException e) {\n      if (e.getMessage().contains(\"File does not exist\")) {\n        // This exception comes out instead of FNFE, fix it\n        throw new FileNotFoundException(\"The given transactionlog file wasn't found at \" + p);\n      } else if (e instanceof FileNotFoundException) {\n        throw (FileNotFoundException)e;\n      }\n      if (log.isWarnEnabled()) {\n        log.warn(getLogMessageDetail(nbAttempt, p, startWaiting), e);\n      }\n    }\n    return recovered;\n  }\n\n","sourceOld":"  /**\n   * Try to recover the lease.\n   * @return True if dfs#recoverLease came by true.\n   */\n  static boolean recoverLease(final DistributedFileSystem dfs, final int nbAttempt, final Path p, final long startWaiting)\n    throws FileNotFoundException {\n    boolean recovered = false;\n    try {\n      recovered = dfs.recoverLease(p);\n      log.info(\"recoverLease=\" + recovered + \", \" +\n        getLogMessageDetail(nbAttempt, p, startWaiting));\n    } catch (IOException e) {\n      if (e.getMessage().contains(\"File does not exist\")) {\n        // This exception comes out instead of FNFE, fix it\n        throw new FileNotFoundException(\"The given transactionlog file wasn't found at \" + p);\n      } else if (e instanceof FileNotFoundException) {\n        throw (FileNotFoundException)e;\n      }\n      log.warn(getLogMessageDetail(nbAttempt, p, startWaiting), e);\n    }\n    return recovered;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/FSHDFSUtils#recoverLease(DistributedFileSystem,int,Path,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FSHDFSUtils#recoverLease(DistributedFileSystem,int,Path,long).mjava","sourceNew":"  /**\n   * Try to recover the lease.\n   * @return True if dfs#recoverLease came by true.\n   */\n  static boolean recoverLease(final DistributedFileSystem dfs, final int nbAttempt, final Path p, final long startWaiting)\n    throws FileNotFoundException {\n    boolean recovered = false;\n    try {\n      recovered = dfs.recoverLease(p);\n      if (log.isInfoEnabled()) {\n        log.info(\"recoverLease={}, {}\", recovered, getLogMessageDetail(nbAttempt, p, startWaiting));\n      }\n    } catch (IOException e) {\n      if (e.getMessage().contains(\"File does not exist\")) {\n        // This exception comes out instead of FNFE, fix it\n        throw new FileNotFoundException(\"The given transactionlog file wasn't found at \" + p);\n      } else if (e instanceof FileNotFoundException) {\n        throw (FileNotFoundException)e;\n      }\n      log.warn(getLogMessageDetail(nbAttempt, p, startWaiting), e);\n    }\n    return recovered;\n  }\n\n","sourceOld":"  /**\n   * Try to recover the lease.\n   * @return True if dfs#recoverLease came by true.\n   */\n  static boolean recoverLease(final DistributedFileSystem dfs, final int nbAttempt, final Path p, final long startWaiting)\n    throws FileNotFoundException {\n    boolean recovered = false;\n    try {\n      recovered = dfs.recoverLease(p);\n      if (log.isInfoEnabled()) {\n        log.info(\"recoverLease={}, {}\", recovered, getLogMessageDetail(nbAttempt, p, startWaiting));\n      }\n    } catch (IOException e) {\n      if (e.getMessage().contains(\"File does not exist\")) {\n        // This exception comes out instead of FNFE, fix it\n        throw new FileNotFoundException(\"The given transactionlog file wasn't found at \" + p);\n      } else if (e instanceof FileNotFoundException) {\n        throw (FileNotFoundException)e;\n      }\n      if (log.isWarnEnabled()) {\n        log.warn(getLogMessageDetail(nbAttempt, p, startWaiting), e);\n      }\n    }\n    return recovered;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34b74c124d68d8e306d6ef09624f3cd053b8a2fd":["99b97f030e743d8dd4d7685202f71718d7e5af22"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["44ca189138a5b6e1989d12ab992fab60e235ddc7"],"99b97f030e743d8dd4d7685202f71718d7e5af22":["c6d82c04c0bc088fae82f28ef47cb25a164f47fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["34b74c124d68d8e306d6ef09624f3cd053b8a2fd"],"575e66bd4b2349209027f6801184da7fc3cba13f":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"c6d82c04c0bc088fae82f28ef47cb25a164f47fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"34b74c124d68d8e306d6ef09624f3cd053b8a2fd":["44ca189138a5b6e1989d12ab992fab60e235ddc7"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["575e66bd4b2349209027f6801184da7fc3cba13f"],"99b97f030e743d8dd4d7685202f71718d7e5af22":["34b74c124d68d8e306d6ef09624f3cd053b8a2fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6d82c04c0bc088fae82f28ef47cb25a164f47fd"],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"c6d82c04c0bc088fae82f28ef47cb25a164f47fd":["99b97f030e743d8dd4d7685202f71718d7e5af22"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}