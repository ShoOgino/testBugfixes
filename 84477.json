{"path":"src/test/org/apache/lucene/search/TestSort#getScores(ScoreDoc[],Searcher).mjava","commits":[{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#getScores(ScoreDoc[],Searcher).mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#getScores(Hits).mjava","sourceNew":"  private HashMap getScores (ScoreDoc[] hits, Searcher searcher)\n\tthrows IOException {\n\t\tHashMap scoreMap = new HashMap();\n    int n = hits.length;\n\t\tfor (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(hits[i].doc);\n\t\t\tString[] v = doc.getValues(\"tracer\");\n\t\t\tassertEquals (v.length, 1);\n      scoreMap.put (v[0], new Float(hits[i].score));\n\t\t}\n\t\treturn scoreMap;\n\t}\n\n","sourceOld":"\tprivate HashMap getScores (Hits hits)\n\tthrows IOException {\n\t\tHashMap scoreMap = new HashMap();\n\t\tint n = hits.length();\n\t\tfor (int i=0; i<n; ++i) {\n\t\t\tDocument doc = hits.doc(i);\n\t\t\tString[] v = doc.getValues(\"tracer\");\n\t\t\tassertEquals (v.length, 1);\n\t\t\tscoreMap.put (v[0], new Float(hits.score(i)));\n\t\t}\n\t\treturn scoreMap;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#getScores(ScoreDoc[],Searcher).mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#getScores(ScoreDoc[],Searcher).mjava","sourceNew":"  private HashMap getScores (ScoreDoc[] hits, Searcher searcher)\n  throws IOException {\n    HashMap scoreMap = new HashMap();\n    int n = hits.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(hits[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      assertEquals (v.length, 1);\n      scoreMap.put (v[0], new Float(hits[i].score));\n    }\n    return scoreMap;\n  }\n\n","sourceOld":"  private HashMap getScores (ScoreDoc[] hits, Searcher searcher)\n\tthrows IOException {\n\t\tHashMap scoreMap = new HashMap();\n    int n = hits.length;\n\t\tfor (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(hits[i].doc);\n\t\t\tString[] v = doc.getValues(\"tracer\");\n\t\t\tassertEquals (v.length, 1);\n      scoreMap.put (v[0], new Float(hits[i].score));\n\t\t}\n\t\treturn scoreMap;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#getScores(ScoreDoc[],Searcher).mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#getScores(ScoreDoc[],Searcher).mjava","sourceNew":"  private HashMap getScores (ScoreDoc[] hits, Searcher searcher)\n  throws IOException {\n    HashMap scoreMap = new HashMap();\n    int n = hits.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(hits[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      assertEquals (v.length, 1);\n      scoreMap.put (v[0], Float.valueOf(hits[i].score));\n    }\n    return scoreMap;\n  }\n\n","sourceOld":"  private HashMap getScores (ScoreDoc[] hits, Searcher searcher)\n  throws IOException {\n    HashMap scoreMap = new HashMap();\n    int n = hits.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(hits[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      assertEquals (v.length, 1);\n      scoreMap.put (v[0], new Float(hits[i].score));\n    }\n    return scoreMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#getScores(ScoreDoc[],Searcher).mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#getScores(ScoreDoc[],Searcher).mjava","sourceNew":"  private HashMap<String,Float> getScores (ScoreDoc[] hits, Searcher searcher)\n  throws IOException {\n    HashMap<String,Float> scoreMap = new HashMap<String,Float>();\n    int n = hits.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(hits[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      assertEquals (v.length, 1);\n      scoreMap.put (v[0], Float.valueOf(hits[i].score));\n    }\n    return scoreMap;\n  }\n\n","sourceOld":"  private HashMap getScores (ScoreDoc[] hits, Searcher searcher)\n  throws IOException {\n    HashMap scoreMap = new HashMap();\n    int n = hits.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(hits[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      assertEquals (v.length, 1);\n      scoreMap.put (v[0], Float.valueOf(hits[i].score));\n    }\n    return scoreMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#getScores(ScoreDoc[],Searcher).mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#getScores(ScoreDoc[],Searcher).mjava","sourceNew":"  private HashMap<String,Float> getScores (ScoreDoc[] hits, Searcher searcher)\n  throws IOException {\n    HashMap<String,Float> scoreMap = new HashMap<String,Float>();\n    int n = hits.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(hits[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      assertEquals (v.length, 1);\n      scoreMap.put (v[0], Float.valueOf(hits[i].score));\n    }\n    return scoreMap;\n  }\n\n","sourceOld":"  private HashMap<String,Float> getScores (ScoreDoc[] hits, Searcher searcher)\n  throws IOException {\n    HashMap<String,Float> scoreMap = new HashMap<String,Float>();\n    int n = hits.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(hits[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      assertEquals (v.length, 1);\n      scoreMap.put (v[0], Float.valueOf(hits[i].score));\n    }\n    return scoreMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["63bc3238545c6012bd44f5d294077997f236bc4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["6bcde5e3f23911110baa101ed062b544162825b5"],"63bc3238545c6012bd44f5d294077997f236bc4e":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["63bc3238545c6012bd44f5d294077997f236bc4e"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"63bc3238545c6012bd44f5d294077997f236bc4e":["6bcde5e3f23911110baa101ed062b544162825b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}