{"path":"solr/core/src/java/org/apache/solr/handler/component/StatsField.Stat#Stat(boolean,Stat...).mjava","commits":[{"id":"d12bbc45d641864ffe03291bc30f178eb34e434c","date":1426001646,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField.Stat#Stat(boolean,Stat...).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Sole constructor for Stat enum values\n     * @param deps the set of stat values, other then this one, which are a distributed \n     *        dependency and must be computed and returned by each individual shards in \n     *        order to compute <i>this</i> stat over the entire distributed result set.\n     * @param selfDep indicates that when computing this stat across a distributed result \n     *        set, each shard must compute this stat <i>in addition to</i> any other \n     *        distributed dependences.\n     * @see #getDistribDeps\n     */\n    Stat(boolean selfDep, Stat... deps) {\n      distribDeps = new ArrayList<Stat>(deps.length+1);\n      distribDeps.addAll(Arrays.asList(deps));\n      if (selfDep) { \n        distribDeps.add(this);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField.Stat#Stat(boolean,Stat...).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Sole constructor for Stat enum values\n     * @param deps the set of stat values, other then this one, which are a distributed \n     *        dependency and must be computed and returned by each individual shards in \n     *        order to compute <i>this</i> stat over the entire distributed result set.\n     * @param selfDep indicates that when computing this stat across a distributed result \n     *        set, each shard must compute this stat <i>in addition to</i> any other \n     *        distributed dependences.\n     * @see #getDistribDeps\n     */\n    Stat(boolean selfDep, Stat... deps) {\n      distribDeps = new ArrayList<Stat>(deps.length+1);\n      distribDeps.addAll(Arrays.asList(deps));\n      if (selfDep) { \n        distribDeps.add(this);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasi≈Ñski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField.Stat#Stat(boolean,Stat...).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField.Stat#Stat(boolean,Stat...).mjava","sourceNew":"    /**\n     * Sole constructor for Stat enum values\n     * @param deps the set of stat values, other then this one, which are a distributed \n     *        dependency and must be computed and returned by each individual shards in \n     *        order to compute <i>this</i> stat over the entire distributed result set.\n     * @param selfDep indicates that when computing this stat across a distributed result \n     *        set, each shard must compute this stat <i>in addition to</i> any other \n     *        distributed dependencies.\n     * @see #getDistribDeps\n     */\n    Stat(boolean selfDep, Stat... deps) {\n      distribDeps = new ArrayList<Stat>(deps.length+1);\n      distribDeps.addAll(Arrays.asList(deps));\n      if (selfDep) { \n        distribDeps.add(this);\n      }\n    }\n\n","sourceOld":"    /**\n     * Sole constructor for Stat enum values\n     * @param deps the set of stat values, other then this one, which are a distributed \n     *        dependency and must be computed and returned by each individual shards in \n     *        order to compute <i>this</i> stat over the entire distributed result set.\n     * @param selfDep indicates that when computing this stat across a distributed result \n     *        set, each shard must compute this stat <i>in addition to</i> any other \n     *        distributed dependences.\n     * @see #getDistribDeps\n     */\n    Stat(boolean selfDep, Stat... deps) {\n      distribDeps = new ArrayList<Stat>(deps.length+1);\n      distribDeps.addAll(Arrays.asList(deps));\n      if (selfDep) { \n        distribDeps.add(this);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField.Stat#Stat(boolean,Stat...).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField.Stat#Stat(boolean,Stat...).mjava","sourceNew":"    /**\n     * Sole constructor for Stat enum values\n     * @param deps the set of stat values, other then this one, which are a distributed \n     *        dependency and must be computed and returned by each individual shards in \n     *        order to compute <i>this</i> stat over the entire distributed result set.\n     * @param selfDep indicates that when computing this stat across a distributed result \n     *        set, each shard must compute this stat <i>in addition to</i> any other \n     *        distributed dependencies.\n     * @see #getDistribDeps\n     */\n    Stat(boolean selfDep, Stat... deps) {\n      distribDeps = new ArrayList<Stat>(deps.length+1);\n      distribDeps.addAll(Arrays.asList(deps));\n      if (selfDep) { \n        distribDeps.add(this);\n      }\n    }\n\n","sourceOld":"    /**\n     * Sole constructor for Stat enum values\n     * @param deps the set of stat values, other then this one, which are a distributed \n     *        dependency and must be computed and returned by each individual shards in \n     *        order to compute <i>this</i> stat over the entire distributed result set.\n     * @param selfDep indicates that when computing this stat across a distributed result \n     *        set, each shard must compute this stat <i>in addition to</i> any other \n     *        distributed dependences.\n     * @see #getDistribDeps\n     */\n    Stat(boolean selfDep, Stat... deps) {\n      distribDeps = new ArrayList<Stat>(deps.length+1);\n      distribDeps.addAll(Arrays.asList(deps));\n      if (selfDep) { \n        distribDeps.add(this);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField.Stat#Stat(boolean,Stat...).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField.Stat#Stat(boolean,Stat...).mjava","sourceNew":"    /**\n     * Sole constructor for Stat enum values\n     * @param deps the set of stat values, other then this one, which are a distributed \n     *        dependency and must be computed and returned by each individual shards in \n     *        order to compute <i>this</i> stat over the entire distributed result set.\n     * @param selfDep indicates that when computing this stat across a distributed result \n     *        set, each shard must compute this stat <i>in addition to</i> any other \n     *        distributed dependencies.\n     * @see #getDistribDeps\n     */\n    Stat(boolean selfDep, Stat... deps) {\n      distribDeps = new ArrayList<Stat>(deps.length+1);\n      distribDeps.addAll(Arrays.asList(deps));\n      if (selfDep) { \n        distribDeps.add(this);\n      }\n    }\n\n","sourceOld":"    /**\n     * Sole constructor for Stat enum values\n     * @param deps the set of stat values, other then this one, which are a distributed \n     *        dependency and must be computed and returned by each individual shards in \n     *        order to compute <i>this</i> stat over the entire distributed result set.\n     * @param selfDep indicates that when computing this stat across a distributed result \n     *        set, each shard must compute this stat <i>in addition to</i> any other \n     *        distributed dependences.\n     * @see #getDistribDeps\n     */\n    Stat(boolean selfDep, Stat... deps) {\n      distribDeps = new ArrayList<Stat>(deps.length+1);\n      distribDeps.addAll(Arrays.asList(deps));\n      if (selfDep) { \n        distribDeps.add(this);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d12bbc45d641864ffe03291bc30f178eb34e434c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d12bbc45d641864ffe03291bc30f178eb34e434c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d12bbc45d641864ffe03291bc30f178eb34e434c","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["d12bbc45d641864ffe03291bc30f178eb34e434c","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["d12bbc45d641864ffe03291bc30f178eb34e434c"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d12bbc45d641864ffe03291bc30f178eb34e434c"],"d12bbc45d641864ffe03291bc30f178eb34e434c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}