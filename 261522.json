{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestReturnNonStored(String,boolean,String...).mjava","commits":[{"id":"459679dac02ecc58120b21ff31374b6ca915e88c","date":1491590182,"type":1,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestReturnNonStored(String,boolean,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestNonReturnable(String,String...).mjava","sourceNew":"  public void doTestReturnNonStored(final String fieldName, boolean shouldReturnFieldIfRequested, final String... values) throws Exception {\n    final String RETURN_FIELD = \"count(//doc/*[@name='\" + fieldName + \"'])=10\";\n    final String DONT_RETURN_FIELD = \"count(//doc/*[@name='\" + fieldName + \"'])=0\";\n    assertFalse(h.getCore().getLatestSchema().getField(fieldName).stored());\n    for (int i=0; i < 10; i++) {\n      SolrInputDocument doc = sdoc(\"id\", String.valueOf(i));\n      for (String value : values) {\n        doc.addField(fieldName, value);\n      }\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"rows\", \"100\", \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='10']\",\n            \"count(//doc)=10\", // exactly 10 docs in response\n            (shouldReturnFieldIfRequested?RETURN_FIELD:DONT_RETURN_FIELD)); // no field in any doc other then 'id'\n\n    assertQ(req(\"q\", \"*:*\", \"rows\", \"100\", \"fl\", \"*\"), \n        \"//*[@numFound='10']\",\n        \"count(//doc)=10\", // exactly 10 docs in response\n        DONT_RETURN_FIELD); // no field in any doc other then 'id'\n\n    assertQ(req(\"q\", \"*:*\", \"rows\", \"100\"), \n        \"//*[@numFound='10']\",\n        \"count(//doc)=10\", // exactly 10 docs in response\n        DONT_RETURN_FIELD); // no field in any doc other then 'id'\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":"  public void doTestNonReturnable(final String fieldName, final String... values) throws Exception {\n    for (int i=0; i < 10; i++) {\n      SolrInputDocument doc = sdoc(\"id\", String.valueOf(i));\n      for (String value : values) {\n        doc.addField(fieldName, value);\n      }\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"rows\", \"100\", \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='10']\",\n            \"count(//doc)=10\", // exactly 10 docs in response\n            \"count(//doc/*)=10\", // exactly 10 fields across all docs\n            \"count(//doc/*[@name!='id'])=0\"); // no field in any doc other then 'id'\n    clearIndex();\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestReturnNonStored(String,boolean,String...).mjava","pathOld":"/dev/null","sourceNew":"  public void doTestReturnNonStored(final String fieldName, boolean shouldReturnFieldIfRequested, final String... values) throws Exception {\n    final String RETURN_FIELD = \"count(//doc/*[@name='\" + fieldName + \"'])=10\";\n    final String DONT_RETURN_FIELD = \"count(//doc/*[@name='\" + fieldName + \"'])=0\";\n    assertFalse(h.getCore().getLatestSchema().getField(fieldName).stored());\n    for (int i=0; i < 10; i++) {\n      SolrInputDocument doc = sdoc(\"id\", String.valueOf(i));\n      for (String value : values) {\n        doc.addField(fieldName, value);\n      }\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"rows\", \"100\", \"fl\", \"id,\" + fieldName), \n            \"//*[@numFound='10']\",\n            \"count(//doc)=10\", // exactly 10 docs in response\n            (shouldReturnFieldIfRequested?RETURN_FIELD:DONT_RETURN_FIELD)); // no field in any doc other then 'id'\n\n    assertQ(req(\"q\", \"*:*\", \"rows\", \"100\", \"fl\", \"*\"), \n        \"//*[@numFound='10']\",\n        \"count(//doc)=10\", // exactly 10 docs in response\n        DONT_RETURN_FIELD); // no field in any doc other then 'id'\n\n    assertQ(req(\"q\", \"*:*\", \"rows\", \"100\"), \n        \"//*[@numFound='10']\",\n        \"count(//doc)=10\", // exactly 10 docs in response\n        DONT_RETURN_FIELD); // no field in any doc other then 'id'\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"459679dac02ecc58120b21ff31374b6ca915e88c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["459679dac02ecc58120b21ff31374b6ca915e88c"]},"commit2Childs":{"459679dac02ecc58120b21ff31374b6ca915e88c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["459679dac02ecc58120b21ff31374b6ca915e88c","54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}