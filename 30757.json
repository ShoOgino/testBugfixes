{"path":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","commits":[{"id":"d557675722a84e5a95aef2ecd199db8e68485f64","date":1032412484,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"/dev/null","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        //creating file's for the FSDirectories\n        File a = new File(System.getProperty(\"user.home\"), \"indexStoreA\");\n        File b = new File(System.getProperty(\"user.home\"), \"indexStoreB\");\n\n        //creating two directories for indices\n        FSDirectory indexStoreA = FSDirectory.getDirectory(a, true);\n        FSDirectory indexStoreB = FSDirectory.getDirectory(b, true);\n\n        //creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(Field.Text(\"fulltext\", \"Once upon a time.....\"));\n        lDoc.add(Field.Keyword(\"id\", \"doc1\"));\n        lDoc.add(Field.Keyword(\"handle\", \"1\"));\n\n        //creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(Field.Text(\"fulltext\", \"in a galaxy far far away.....\"));\n        lDoc2.add(Field.Keyword(\"id\", \"doc2\"));\n        lDoc2.add(Field.Keyword(\"handle\", \"1\"));\n\n        //creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(Field.Text(\"fulltext\", \"a bizarre bug manifested itself....\"));\n        lDoc3.add(Field.Keyword(\"id\", \"doc3\"));\n        lDoc3.add(Field.Keyword(\"handle\", \"1\"));\n\n        //creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        //creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        //writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.close();\n        writerA.optimize();\n\n        //closing the second index\n        writerB.close();\n\n        //creating the query\n        Query query = QueryParser.parse(\"handle:1\", \"fulltext\", new StandardAnalyzer());\n\n        //bulding the searchables\n        Searcher[] searchers = new Searcher[2];\n        //VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        //creating the mulitSearcher\n        Searcher mSearcher = new MultiSearcher(searchers);\n        //performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        try {\n            //iterating over the hit documents\n            for (int i = 0; i < hits.length(); i++) {\n                //false ArrayIndexOutOfBounds should happen at this point\n                Document d = hits.doc(i);\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            fail(\"ArrayIndexOutOfBoundsException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher.close();\n        }\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        //adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        //building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        //VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        //creating the mulitSearcher\n        Searcher mSearcher2 = new MultiSearcher(searchers2);\n        //performing same the search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits.length());\n\n        try {\n            //iterating over the hit documents\n            for (int i = 0; i < hits2.length(); i++) {\n                //no exception should happen at this point\n                Document d = hits2.doc(i);\n            }\n        }\n        catch (Exception e)\n        {\n            fail(\"Exception thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher2.close();\n        }\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        //deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.delete(term);\n        readerB.close();\n\n        //optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        //bulding the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        //creating the mulitSearcher\n        Searcher mSearcher3 = new MultiSearcher(searchers3);\n        //performing same the search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits.length());\n\n        try {\n            //iterating over the hit documents\n            for (int i = 0; i < hits3.length(); i++) {\n                //false IOException should happen at this point\n                Document d = hits3.doc(i);\n            }\n        }\n        catch (IOException e)\n        {\n            fail(\"IOException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher3.close();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d725b42c52bb29bf1fb7524ed4f698e8fd911b33","date":1032415823,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating file's for the FSDirectories\n        File a = new File(System.getProperty(\"user.home\"), \"indexStoreA\");\n        File b = new File(System.getProperty(\"user.home\"), \"indexStoreB\");\n\n        // creating two directories for indices\n        FSDirectory indexStoreA = FSDirectory.getDirectory(a, true);\n        FSDirectory indexStoreB = FSDirectory.getDirectory(b, true);\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(Field.Text(\"fulltext\", \"Once upon a time.....\"));\n        lDoc.add(Field.Keyword(\"id\", \"doc1\"));\n        lDoc.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(Field.Text(\"fulltext\", \"in a galaxy far far away.....\"));\n        lDoc2.add(Field.Keyword(\"id\", \"doc2\"));\n        lDoc2.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(Field.Text(\"fulltext\", \"a bizarre bug manifested itself....\"));\n        lDoc3.add(Field.Keyword(\"id\", \"doc3\"));\n        lDoc3.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.close();\n        writerA.optimize();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        Query query = QueryParser.parse(\"handle:1\", \"fulltext\", new StandardAnalyzer());\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = new MultiSearcher(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits.length(); i++) {\n                Document d = hits.doc(i);\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            fail(\"ArrayIndexOutOfBoundsException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher.close();\n        }\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher2 = new MultiSearcher(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits2.length(); i++) {\n                // no exception should happen at this point\n                Document d = hits2.doc(i);\n            }\n        }\n        catch (Exception e)\n        {\n            fail(\"Exception thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher2.close();\n        }\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.delete(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = new MultiSearcher(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits3.length(); i++) {\n                Document d = hits3.doc(i);\n            }\n        }\n        catch (IOException e)\n        {\n            fail(\"IOException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher3.close();\n        }\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        //creating file's for the FSDirectories\n        File a = new File(System.getProperty(\"user.home\"), \"indexStoreA\");\n        File b = new File(System.getProperty(\"user.home\"), \"indexStoreB\");\n\n        //creating two directories for indices\n        FSDirectory indexStoreA = FSDirectory.getDirectory(a, true);\n        FSDirectory indexStoreB = FSDirectory.getDirectory(b, true);\n\n        //creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(Field.Text(\"fulltext\", \"Once upon a time.....\"));\n        lDoc.add(Field.Keyword(\"id\", \"doc1\"));\n        lDoc.add(Field.Keyword(\"handle\", \"1\"));\n\n        //creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(Field.Text(\"fulltext\", \"in a galaxy far far away.....\"));\n        lDoc2.add(Field.Keyword(\"id\", \"doc2\"));\n        lDoc2.add(Field.Keyword(\"handle\", \"1\"));\n\n        //creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(Field.Text(\"fulltext\", \"a bizarre bug manifested itself....\"));\n        lDoc3.add(Field.Keyword(\"id\", \"doc3\"));\n        lDoc3.add(Field.Keyword(\"handle\", \"1\"));\n\n        //creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        //creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        //writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.close();\n        writerA.optimize();\n\n        //closing the second index\n        writerB.close();\n\n        //creating the query\n        Query query = QueryParser.parse(\"handle:1\", \"fulltext\", new StandardAnalyzer());\n\n        //bulding the searchables\n        Searcher[] searchers = new Searcher[2];\n        //VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        //creating the mulitSearcher\n        Searcher mSearcher = new MultiSearcher(searchers);\n        //performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        try {\n            //iterating over the hit documents\n            for (int i = 0; i < hits.length(); i++) {\n                //false ArrayIndexOutOfBounds should happen at this point\n                Document d = hits.doc(i);\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            fail(\"ArrayIndexOutOfBoundsException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher.close();\n        }\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        //adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        //building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        //VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        //creating the mulitSearcher\n        Searcher mSearcher2 = new MultiSearcher(searchers2);\n        //performing same the search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits.length());\n\n        try {\n            //iterating over the hit documents\n            for (int i = 0; i < hits2.length(); i++) {\n                //no exception should happen at this point\n                Document d = hits2.doc(i);\n            }\n        }\n        catch (Exception e)\n        {\n            fail(\"Exception thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher2.close();\n        }\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        //deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.delete(term);\n        readerB.close();\n\n        //optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        //bulding the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        //creating the mulitSearcher\n        Searcher mSearcher3 = new MultiSearcher(searchers3);\n        //performing same the search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits.length());\n\n        try {\n            //iterating over the hit documents\n            for (int i = 0; i < hits3.length(); i++) {\n                //false IOException should happen at this point\n                Document d = hits3.doc(i);\n            }\n        }\n        catch (IOException e)\n        {\n            fail(\"IOException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher3.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b23a5c3b72983a45f576d198465f6dd90174712a","date":1032438943,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating file's for the FSDirectories\n        File a = new File(System.getProperty(\"user.home\"), \"indexStoreA\");\n        File b = new File(System.getProperty(\"user.home\"), \"indexStoreB\");\n\n        // creating two directories for indices\n        FSDirectory indexStoreA = FSDirectory.getDirectory(a, true);\n        FSDirectory indexStoreB = FSDirectory.getDirectory(b, true);\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(Field.Text(\"fulltext\", \"Once upon a time.....\"));\n        lDoc.add(Field.Keyword(\"id\", \"doc1\"));\n        lDoc.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(Field.Text(\"fulltext\", \"in a galaxy far far away.....\"));\n        lDoc2.add(Field.Keyword(\"id\", \"doc2\"));\n        lDoc2.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(Field.Text(\"fulltext\", \"a bizarre bug manifested itself....\"));\n        lDoc3.add(Field.Keyword(\"id\", \"doc3\"));\n        lDoc3.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.close();\n        writerA.optimize();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        Query query = QueryParser.parse(\"handle:1\", \"fulltext\", new StandardAnalyzer());\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = new MultiSearcher(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits.length(); i++) {\n                Document d = hits.doc(i);\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            fail(\"ArrayIndexOutOfBoundsException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher.close();\n        }\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher2 = new MultiSearcher(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits2.length(); i++) {\n                // no exception should happen at this point\n                Document d = hits2.doc(i);\n            }\n        }\n        catch (Exception e)\n        {\n            fail(\"Exception thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher2.close();\n        }\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.delete(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = new MultiSearcher(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits3.length(); i++) {\n                Document d = hits3.doc(i);\n            }\n        }\n        catch (IOException e)\n        {\n            fail(\"IOException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher3.close();\n        }\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating file's for the FSDirectories\n        File a = new File(System.getProperty(\"user.home\"), \"indexStoreA\");\n        File b = new File(System.getProperty(\"user.home\"), \"indexStoreB\");\n\n        // creating two directories for indices\n        FSDirectory indexStoreA = FSDirectory.getDirectory(a, true);\n        FSDirectory indexStoreB = FSDirectory.getDirectory(b, true);\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(Field.Text(\"fulltext\", \"Once upon a time.....\"));\n        lDoc.add(Field.Keyword(\"id\", \"doc1\"));\n        lDoc.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(Field.Text(\"fulltext\", \"in a galaxy far far away.....\"));\n        lDoc2.add(Field.Keyword(\"id\", \"doc2\"));\n        lDoc2.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(Field.Text(\"fulltext\", \"a bizarre bug manifested itself....\"));\n        lDoc3.add(Field.Keyword(\"id\", \"doc3\"));\n        lDoc3.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.close();\n        writerA.optimize();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        Query query = QueryParser.parse(\"handle:1\", \"fulltext\", new StandardAnalyzer());\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = new MultiSearcher(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits.length(); i++) {\n                Document d = hits.doc(i);\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            fail(\"ArrayIndexOutOfBoundsException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher.close();\n        }\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher2 = new MultiSearcher(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits2.length(); i++) {\n                // no exception should happen at this point\n                Document d = hits2.doc(i);\n            }\n        }\n        catch (Exception e)\n        {\n            fail(\"Exception thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher2.close();\n        }\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.delete(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = new MultiSearcher(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits3.length(); i++) {\n                Document d = hits3.doc(i);\n            }\n        }\n        catch (IOException e)\n        {\n            fail(\"IOException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher3.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afaf1c4d23b7ef3b159166d3ef9c273e2c756e5d","date":1038331903,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new RAMDirectory();\n        Directory indexStoreB = new RAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(Field.Text(\"fulltext\", \"Once upon a time.....\"));\n        lDoc.add(Field.Keyword(\"id\", \"doc1\"));\n        lDoc.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(Field.Text(\"fulltext\", \"in a galaxy far far away.....\"));\n        lDoc2.add(Field.Keyword(\"id\", \"doc2\"));\n        lDoc2.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(Field.Text(\"fulltext\", \"a bizarre bug manifested itself....\"));\n        lDoc3.add(Field.Keyword(\"id\", \"doc3\"));\n        lDoc3.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.close();\n        writerA.optimize();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        Query query = QueryParser.parse(\"handle:1\", \"fulltext\", new StandardAnalyzer());\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = new MultiSearcher(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits.length(); i++) {\n                Document d = hits.doc(i);\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            fail(\"ArrayIndexOutOfBoundsException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher.close();\n        }\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher2 = new MultiSearcher(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits2.length(); i++) {\n                // no exception should happen at this point\n                Document d = hits2.doc(i);\n            }\n        }\n        catch (Exception e)\n        {\n            fail(\"Exception thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher2.close();\n        }\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.delete(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = new MultiSearcher(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits3.length(); i++) {\n                Document d = hits3.doc(i);\n            }\n        }\n        catch (IOException e)\n        {\n            fail(\"IOException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher3.close();\n        }\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating file's for the FSDirectories\n        File a = new File(System.getProperty(\"user.home\"), \"indexStoreA\");\n        File b = new File(System.getProperty(\"user.home\"), \"indexStoreB\");\n\n        // creating two directories for indices\n        FSDirectory indexStoreA = FSDirectory.getDirectory(a, true);\n        FSDirectory indexStoreB = FSDirectory.getDirectory(b, true);\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(Field.Text(\"fulltext\", \"Once upon a time.....\"));\n        lDoc.add(Field.Keyword(\"id\", \"doc1\"));\n        lDoc.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(Field.Text(\"fulltext\", \"in a galaxy far far away.....\"));\n        lDoc2.add(Field.Keyword(\"id\", \"doc2\"));\n        lDoc2.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(Field.Text(\"fulltext\", \"a bizarre bug manifested itself....\"));\n        lDoc3.add(Field.Keyword(\"id\", \"doc3\"));\n        lDoc3.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.close();\n        writerA.optimize();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        Query query = QueryParser.parse(\"handle:1\", \"fulltext\", new StandardAnalyzer());\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = new MultiSearcher(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits.length(); i++) {\n                Document d = hits.doc(i);\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            fail(\"ArrayIndexOutOfBoundsException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher.close();\n        }\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher2 = new MultiSearcher(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits2.length(); i++) {\n                // no exception should happen at this point\n                Document d = hits2.doc(i);\n            }\n        }\n        catch (Exception e)\n        {\n            fail(\"Exception thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher2.close();\n        }\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.delete(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = new MultiSearcher(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits3.length(); i++) {\n                Document d = hits3.doc(i);\n            }\n        }\n        catch (IOException e)\n        {\n            fail(\"IOException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher3.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"82dc8f80042322d1c443b6c70bdec5249eb745c2","date":1074623829,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new RAMDirectory();\n        Directory indexStoreB = new RAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(Field.Text(\"fulltext\", \"Once upon a time.....\"));\n        lDoc.add(Field.Keyword(\"id\", \"doc1\"));\n        lDoc.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(Field.Text(\"fulltext\", \"in a galaxy far far away.....\"));\n        lDoc2.add(Field.Keyword(\"id\", \"doc2\"));\n        lDoc2.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(Field.Text(\"fulltext\", \"a bizarre bug manifested itself....\"));\n        lDoc3.add(Field.Keyword(\"id\", \"doc3\"));\n        lDoc3.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.close();\n        writerA.optimize();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        Query query = QueryParser.parse(\"handle:1\", \"fulltext\", new StandardAnalyzer());\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits.length(); i++) {\n                Document d = hits.doc(i);\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            fail(\"ArrayIndexOutOfBoundsException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher.close();\n        }\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits2.length(); i++) {\n                // no exception should happen at this point\n                Document d = hits2.doc(i);\n            }\n        }\n        catch (Exception e)\n        {\n            fail(\"Exception thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher2.close();\n        }\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.delete(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits3.length(); i++) {\n                Document d = hits3.doc(i);\n            }\n        }\n        catch (IOException e)\n        {\n            fail(\"IOException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher3.close();\n        }\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new RAMDirectory();\n        Directory indexStoreB = new RAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(Field.Text(\"fulltext\", \"Once upon a time.....\"));\n        lDoc.add(Field.Keyword(\"id\", \"doc1\"));\n        lDoc.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(Field.Text(\"fulltext\", \"in a galaxy far far away.....\"));\n        lDoc2.add(Field.Keyword(\"id\", \"doc2\"));\n        lDoc2.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(Field.Text(\"fulltext\", \"a bizarre bug manifested itself....\"));\n        lDoc3.add(Field.Keyword(\"id\", \"doc3\"));\n        lDoc3.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.close();\n        writerA.optimize();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        Query query = QueryParser.parse(\"handle:1\", \"fulltext\", new StandardAnalyzer());\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = new MultiSearcher(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits.length(); i++) {\n                Document d = hits.doc(i);\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            fail(\"ArrayIndexOutOfBoundsException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher.close();\n        }\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher2 = new MultiSearcher(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits2.length(); i++) {\n                // no exception should happen at this point\n                Document d = hits2.doc(i);\n            }\n        }\n        catch (Exception e)\n        {\n            fail(\"Exception thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher2.close();\n        }\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.delete(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = new MultiSearcher(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits3.length(); i++) {\n                Document d = hits3.doc(i);\n            }\n        }\n        catch (IOException e)\n        {\n            fail(\"IOException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher3.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"81ccae92bdc7f3f87e8ea4723c28b7b9a2a626b1","date":1078232997,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new RAMDirectory();\n        Directory indexStoreB = new RAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(Field.Text(\"fulltext\", \"Once upon a time.....\"));\n        lDoc.add(Field.Keyword(\"id\", \"doc1\"));\n        lDoc.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(Field.Text(\"fulltext\", \"in a galaxy far far away.....\"));\n        lDoc2.add(Field.Keyword(\"id\", \"doc2\"));\n        lDoc2.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(Field.Text(\"fulltext\", \"a bizarre bug manifested itself....\"));\n        lDoc3.add(Field.Keyword(\"id\", \"doc3\"));\n        lDoc3.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        Query query = QueryParser.parse(\"handle:1\", \"fulltext\", new StandardAnalyzer());\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits.length(); i++) {\n                Document d = hits.doc(i);\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            fail(\"ArrayIndexOutOfBoundsException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher.close();\n        }\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits2.length(); i++) {\n                // no exception should happen at this point\n                Document d = hits2.doc(i);\n            }\n        }\n        catch (Exception e)\n        {\n            fail(\"Exception thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher2.close();\n        }\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.delete(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits3.length(); i++) {\n                Document d = hits3.doc(i);\n            }\n        }\n        catch (IOException e)\n        {\n            fail(\"IOException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher3.close();\n        }\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new RAMDirectory();\n        Directory indexStoreB = new RAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(Field.Text(\"fulltext\", \"Once upon a time.....\"));\n        lDoc.add(Field.Keyword(\"id\", \"doc1\"));\n        lDoc.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(Field.Text(\"fulltext\", \"in a galaxy far far away.....\"));\n        lDoc2.add(Field.Keyword(\"id\", \"doc2\"));\n        lDoc2.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(Field.Text(\"fulltext\", \"a bizarre bug manifested itself....\"));\n        lDoc3.add(Field.Keyword(\"id\", \"doc3\"));\n        lDoc3.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.close();\n        writerA.optimize();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        Query query = QueryParser.parse(\"handle:1\", \"fulltext\", new StandardAnalyzer());\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits.length(); i++) {\n                Document d = hits.doc(i);\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            fail(\"ArrayIndexOutOfBoundsException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher.close();\n        }\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits2.length(); i++) {\n                // no exception should happen at this point\n                Document d = hits2.doc(i);\n            }\n        }\n        catch (Exception e)\n        {\n            fail(\"Exception thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher2.close();\n        }\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.delete(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits3.length(); i++) {\n                Document d = hits3.doc(i);\n            }\n        }\n        catch (IOException e)\n        {\n            fail(\"IOException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher3.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"408d26dbf1cc3cfec92adb60cca54f91d3838b92","date":1094508109,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new RAMDirectory();\n        Directory indexStoreB = new RAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        Query query = QueryParser.parse(\"handle:1\", \"fulltext\", new StandardAnalyzer());\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits.length(); i++) {\n                Document d = hits.doc(i);\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            fail(\"ArrayIndexOutOfBoundsException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher.close();\n        }\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits2.length(); i++) {\n                // no exception should happen at this point\n                Document d = hits2.doc(i);\n            }\n        }\n        catch (Exception e)\n        {\n            fail(\"Exception thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher2.close();\n        }\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.delete(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits3.length(); i++) {\n                Document d = hits3.doc(i);\n            }\n        }\n        catch (IOException e)\n        {\n            fail(\"IOException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher3.close();\n        }\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new RAMDirectory();\n        Directory indexStoreB = new RAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(Field.Text(\"fulltext\", \"Once upon a time.....\"));\n        lDoc.add(Field.Keyword(\"id\", \"doc1\"));\n        lDoc.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(Field.Text(\"fulltext\", \"in a galaxy far far away.....\"));\n        lDoc2.add(Field.Keyword(\"id\", \"doc2\"));\n        lDoc2.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(Field.Text(\"fulltext\", \"a bizarre bug manifested itself....\"));\n        lDoc3.add(Field.Keyword(\"id\", \"doc3\"));\n        lDoc3.add(Field.Keyword(\"handle\", \"1\"));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        Query query = QueryParser.parse(\"handle:1\", \"fulltext\", new StandardAnalyzer());\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits.length(); i++) {\n                Document d = hits.doc(i);\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            fail(\"ArrayIndexOutOfBoundsException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher.close();\n        }\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits2.length(); i++) {\n                // no exception should happen at this point\n                Document d = hits2.doc(i);\n            }\n        }\n        catch (Exception e)\n        {\n            fail(\"Exception thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher2.close();\n        }\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.delete(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits3.length(); i++) {\n                Document d = hits3.doc(i);\n            }\n        }\n        catch (IOException e)\n        {\n            fail(\"IOException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher3.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7cecbacd2f253331ff961f96749d7d28ac51bbbf","date":1120322444,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new RAMDirectory();\n        Directory indexStoreB = new RAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        Query query = QueryParser.parse(\"handle:1\", \"fulltext\", new StandardAnalyzer());\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length(); i++) {\n            Document d = hits.doc(i);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length(); i++) {\n            // no exception should happen at this point\n            Document d = hits2.doc(i);\n        }\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.delete(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length(); i++) {\n            Document d = hits3.doc(i);\n        }\n        mSearcher3.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new RAMDirectory();\n        Directory indexStoreB = new RAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        Query query = QueryParser.parse(\"handle:1\", \"fulltext\", new StandardAnalyzer());\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits.length(); i++) {\n                Document d = hits.doc(i);\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            fail(\"ArrayIndexOutOfBoundsException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher.close();\n        }\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits2.length(); i++) {\n                // no exception should happen at this point\n                Document d = hits2.doc(i);\n            }\n        }\n        catch (Exception e)\n        {\n            fail(\"Exception thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher2.close();\n        }\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.delete(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        try {\n            // iterating over the hit documents\n            for (int i = 0; i < hits3.length(); i++) {\n                Document d = hits3.doc(i);\n            }\n        }\n        catch (IOException e)\n        {\n            fail(\"IOException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } finally{\n            mSearcher3.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new RAMDirectory();\n        Directory indexStoreB = new RAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length(); i++) {\n            Document d = hits.doc(i);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length(); i++) {\n            // no exception should happen at this point\n            Document d = hits2.doc(i);\n        }\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length(); i++) {\n            Document d = hits3.doc(i);\n        }\n        mSearcher3.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new RAMDirectory();\n        Directory indexStoreB = new RAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        Query query = QueryParser.parse(\"handle:1\", \"fulltext\", new StandardAnalyzer());\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length(); i++) {\n            Document d = hits.doc(i);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length(); i++) {\n            // no exception should happen at this point\n            Document d = hits2.doc(i);\n        }\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.delete(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length(); i++) {\n            Document d = hits3.doc(i);\n        }\n        mSearcher3.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe3cbc17501e667854b0c4575747f6a39dd5ea01","date":1170969169,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new RAMDirectory();\n        Directory indexStoreB = new RAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length(); i++) {\n            Document d = hits.doc(i);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length(); i++) {\n            // no exception should happen at this point\n            Document d = hits2.doc(i);\n        }\n        mSearcher2.close();\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery);\n        assertEquals(2, hits2.length());\n        assertEquals(0, mSearcher2.subSearcher(hits2.id(0)));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2.id(1)));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery);\n        assertEquals(1, hits2.length());\n        assertEquals(1, mSearcher2.subSearcher(hits2.id(0)));   // hit from searchers2[1]\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length(); i++) {\n            Document d = hits3.doc(i);\n        }\n        mSearcher3.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new RAMDirectory();\n        Directory indexStoreB = new RAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length(); i++) {\n            Document d = hits.doc(i);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length(); i++) {\n            // no exception should happen at this point\n            Document d = hits2.doc(i);\n        }\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length(); i++) {\n            Document d = hits3.doc(i);\n        }\n        mSearcher3.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"111f5f9f92c974cb15ad5a47e0caec190ca207b7","date":1172978580,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new RAMDirectory();\n        Directory indexStoreB = new RAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length(); i++) {\n            Document d = hits.doc(i);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length(); i++) {\n            // no exception should happen at this point\n            Document d = hits2.doc(i);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery);\n        assertEquals(2, hits2.length());\n        assertEquals(0, mSearcher2.subSearcher(hits2.id(0)));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2.id(1)));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery);\n        assertEquals(1, hits2.length());\n        assertEquals(1, mSearcher2.subSearcher(hits2.id(0)));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length(); i++) {\n            Document d = hits3.doc(i);\n        }\n        mSearcher3.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new RAMDirectory();\n        Directory indexStoreB = new RAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length(); i++) {\n            Document d = hits.doc(i);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length(); i++) {\n            // no exception should happen at this point\n            Document d = hits2.doc(i);\n        }\n        mSearcher2.close();\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery);\n        assertEquals(2, hits2.length());\n        assertEquals(0, mSearcher2.subSearcher(hits2.id(0)));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2.id(1)));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery);\n        assertEquals(1, hits2.length());\n        assertEquals(1, mSearcher2.subSearcher(hits2.id(0)));   // hit from searchers2[1]\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length(); i++) {\n            Document d = hits3.doc(i);\n        }\n        mSearcher3.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d72db039743bd6a2da9be6306f57c71654ca1bf6","date":1173217255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length(); i++) {\n            Document d = hits.doc(i);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length(); i++) {\n            // no exception should happen at this point\n            Document d = hits2.doc(i);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery);\n        assertEquals(2, hits2.length());\n        assertEquals(0, mSearcher2.subSearcher(hits2.id(0)));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2.id(1)));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery);\n        assertEquals(1, hits2.length());\n        assertEquals(1, mSearcher2.subSearcher(hits2.id(0)));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length(); i++) {\n            Document d = hits3.doc(i);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new RAMDirectory();\n        Directory indexStoreB = new RAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length(); i++) {\n            Document d = hits.doc(i);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length(); i++) {\n            // no exception should happen at this point\n            Document d = hits2.doc(i);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery);\n        assertEquals(2, hits2.length());\n        assertEquals(0, mSearcher2.subSearcher(hits2.id(0)));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2.id(1)));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery);\n        assertEquals(1, hits2.length());\n        assertEquals(1, mSearcher2.subSearcher(hits2.id(0)));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length(); i++) {\n            Document d = hits3.doc(i);\n        }\n        mSearcher3.close();\n    }\n\n","bugFix":["afaf1c4d23b7ef3b159166d3ef9c273e2c756e5d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length(); i++) {\n            Document d = hits.doc(i);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length(); i++) {\n            // no exception should happen at this point\n            Document d = hits2.doc(i);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery);\n        assertEquals(2, hits2.length());\n        assertEquals(0, mSearcher2.subSearcher(hits2.id(0)));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2.id(1)));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery);\n        assertEquals(1, hits2.length());\n        assertEquals(1, mSearcher2.subSearcher(hits2.id(0)));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length(); i++) {\n            Document d = hits3.doc(i);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length(); i++) {\n            Document d = hits.doc(i);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length(); i++) {\n            // no exception should happen at this point\n            Document d = hits2.doc(i);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery);\n        assertEquals(2, hits2.length());\n        assertEquals(0, mSearcher2.subSearcher(hits2.id(0)));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2.id(1)));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery);\n        assertEquals(1, hits2.length());\n        assertEquals(1, mSearcher2.subSearcher(hits2.id(0)));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length(); i++) {\n            Document d = hits3.doc(i);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n            Document d = mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n            // no exception should happen at this point\n            Document d = mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n            Document d = mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        Hits hits = mSearcher.search(query);\n\n        assertEquals(3, hits.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length(); i++) {\n            Document d = hits.doc(i);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        Hits hits2 = mSearcher2.search(query);\n\n        assertEquals(4, hits2.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length(); i++) {\n            // no exception should happen at this point\n            Document d = hits2.doc(i);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery);\n        assertEquals(2, hits2.length());\n        assertEquals(0, mSearcher2.subSearcher(hits2.id(0)));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2.id(1)));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery);\n        assertEquals(1, hits2.length());\n        assertEquals(1, mSearcher2.subSearcher(hits2.id(0)));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        Hits hits3 = mSearcher3.search(query);\n\n        assertEquals(3, hits3.length());\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length(); i++) {\n            Document d = hits3.doc(i);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n            Document d = mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n            // no exception should happen at this point\n            Document d = mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n            Document d = mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.TOKENIZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n            Document d = mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n            // no exception should happen at this point\n            Document d = mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n            Document d = mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3965529a7891904512492d9c6a0c4dc6323899bc","date":1243970180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n            Document d = mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n            // no exception should happen at this point\n            Document d = mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n            Document d = mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB);\n        searchers[1] = new IndexSearcher(indexStoreA);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB);\n        searchers2[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB);\n        searchers3[1] = new IndexSearcher(indexStoreA);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"fulltext\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"fulltext\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT)));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT)));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT).setAnalyzer(\n                new StandardAnalyzer(TEST_VERSION_CURRENT))\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT).setAnalyzer(\n                new StandardAnalyzer(TEST_VERSION_CURRENT))\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT)));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT)));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT).setAnalyzer(\n                new StandardAnalyzer(TEST_VERSION_CURRENT))\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT).setAnalyzer(\n                new StandardAnalyzer(TEST_VERSION_CURRENT))\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new StandardAnalyzer(TEST_VERSION_CURRENT))\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new StandardAnalyzer(TEST_VERSION_CURRENT))\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex()\n        throws Exception\n    {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new StandardAnalyzer(TEST_VERSION_CURRENT))\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new StandardAnalyzer(TEST_VERSION_CURRENT))\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new StandardAnalyzer(TEST_VERSION_CURRENT))\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new StandardAnalyzer(TEST_VERSION_CURRENT))\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d725b42c52bb29bf1fb7524ed4f698e8fd911b33":["d557675722a84e5a95aef2ecd199db8e68485f64"],"0a046c0c310bc77931fc8441bd920053b607dd14":["3965529a7891904512492d9c6a0c4dc6323899bc","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"7cecbacd2f253331ff961f96749d7d28ac51bbbf":["408d26dbf1cc3cfec92adb60cca54f91d3838b92"],"81ccae92bdc7f3f87e8ea4723c28b7b9a2a626b1":["82dc8f80042322d1c443b6c70bdec5249eb745c2"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"82dc8f80042322d1c443b6c70bdec5249eb745c2":["afaf1c4d23b7ef3b159166d3ef9c273e2c756e5d"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"408d26dbf1cc3cfec92adb60cca54f91d3838b92":["81ccae92bdc7f3f87e8ea4723c28b7b9a2a626b1"],"b23a5c3b72983a45f576d198465f6dd90174712a":["d725b42c52bb29bf1fb7524ed4f698e8fd911b33"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["0a046c0c310bc77931fc8441bd920053b607dd14"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"fe3cbc17501e667854b0c4575747f6a39dd5ea01":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"afaf1c4d23b7ef3b159166d3ef9c273e2c756e5d":["b23a5c3b72983a45f576d198465f6dd90174712a"],"3965529a7891904512492d9c6a0c4dc6323899bc":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["ba1116b3450a9c1642c89445d131b37344055245"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["3965529a7891904512492d9c6a0c4dc6323899bc"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["7cecbacd2f253331ff961f96749d7d28ac51bbbf"],"111f5f9f92c974cb15ad5a47e0caec190ca207b7":["fe3cbc17501e667854b0c4575747f6a39dd5ea01"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["111f5f9f92c974cb15ad5a47e0caec190ca207b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d557675722a84e5a95aef2ecd199db8e68485f64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d725b42c52bb29bf1fb7524ed4f698e8fd911b33":["b23a5c3b72983a45f576d198465f6dd90174712a"],"0a046c0c310bc77931fc8441bd920053b607dd14":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"7cecbacd2f253331ff961f96749d7d28ac51bbbf":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"81ccae92bdc7f3f87e8ea4723c28b7b9a2a626b1":["408d26dbf1cc3cfec92adb60cca54f91d3838b92"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"82dc8f80042322d1c443b6c70bdec5249eb745c2":["81ccae92bdc7f3f87e8ea4723c28b7b9a2a626b1"],"ba1116b3450a9c1642c89445d131b37344055245":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d557675722a84e5a95aef2ecd199db8e68485f64"],"408d26dbf1cc3cfec92adb60cca54f91d3838b92":["7cecbacd2f253331ff961f96749d7d28ac51bbbf"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"b23a5c3b72983a45f576d198465f6dd90174712a":["afaf1c4d23b7ef3b159166d3ef9c273e2c756e5d"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe3cbc17501e667854b0c4575747f6a39dd5ea01":["111f5f9f92c974cb15ad5a47e0caec190ca207b7"],"afaf1c4d23b7ef3b159166d3ef9c273e2c756e5d":["82dc8f80042322d1c443b6c70bdec5249eb745c2"],"3965529a7891904512492d9c6a0c4dc6323899bc":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["3965529a7891904512492d9c6a0c4dc6323899bc"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["fe3cbc17501e667854b0c4575747f6a39dd5ea01"],"111f5f9f92c974cb15ad5a47e0caec190ca207b7":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"d557675722a84e5a95aef2ecd199db8e68485f64":["d725b42c52bb29bf1fb7524ed4f698e8fd911b33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}