{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","commits":[{"id":"b799defcfda6d303cbb180917bf1e749089adf42","date":1370695356,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.SloppyTFIDFDocScorer#score(int,float).mjava","sourceNew":"    @Override\n    public float score(int doc, float freq) {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n      \n      return norms == null ? raw : raw * decodeNormValue((byte)norms.get(doc));  // normalize for field\n    }\n\n","sourceOld":"    @Override\n    public float score(int doc, float freq) {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n      \n      return norms == null ? raw : raw * decodeNormValue((byte)norms.get(doc));  // normalize for field\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"496cc26fd7f5a8e2aa6c46d43e50860ef4225098","date":1372185568,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","sourceNew":"    @Override\n    public float score(int doc, float freq) {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n      \n      return norms == null ? raw : raw * decodeNormValue(norms.get(doc));  // normalize for field\n    }\n\n","sourceOld":"    @Override\n    public float score(int doc, float freq) {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n      \n      return norms == null ? raw : raw * decodeNormValue((byte)norms.get(doc));  // normalize for field\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","sourceNew":"    @Override\n    public float score(int doc, float freq) {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n      \n      return norms == null ? raw : raw * decodeNormValue(norms.get(doc));  // normalize for field\n    }\n\n","sourceOld":"    @Override\n    public float score(int doc, float freq) {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n      \n      return norms == null ? raw : raw * decodeNormValue((byte)norms.get(doc));  // normalize for field\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","sourceNew":"    @Override\n    public float score(int doc, float freq) throws IOException {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n\n      if (norms == null) {\n        return raw;\n      } else {\n        long normValue;\n        int normsDocID = norms.docID();\n        if (normsDocID < doc) {\n          normsDocID = norms.advance(doc);\n        }\n        if (normsDocID == doc) {\n          normValue = norms.longValue();\n        } else {\n          normValue = 0;\n        }\n        return raw * decodeNormValue(normValue);  // normalize for field\n      }\n    }\n\n","sourceOld":"    @Override\n    public float score(int doc, float freq) {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n      \n      return norms == null ? raw : raw * decodeNormValue(norms.get(doc));  // normalize for field\n    }\n\n","bugFix":null,"bugIntro":["0f82a9bd302914a72572934ddb0a4ee15edfe4c6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","sourceNew":"    @Override\n    public float score(int doc, float freq) throws IOException {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n\n      if (norms == null) {\n        return raw;\n      } else {\n        long normValue;\n        int normsDocID = norms.docID();\n        if (normsDocID < doc) {\n          normsDocID = norms.advance(doc);\n        }\n        if (normsDocID == doc) {\n          normValue = norms.longValue();\n        } else {\n          normValue = 0;\n        }\n        return raw * decodeNormValue(normValue);  // normalize for field\n      }\n    }\n\n","sourceOld":"    @Override\n    public float score(int doc, float freq) {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n      \n      return norms == null ? raw : raw * decodeNormValue(norms.get(doc));  // normalize for field\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","sourceNew":"    @Override\n    public float score(int doc, float freq) throws IOException {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n\n      if (norms == null) {\n        return raw;\n      } else {\n        long normValue;\n        int normsDocID = norms.docID();\n        if (normsDocID < doc) {\n          normsDocID = norms.advance(doc);\n        }\n        if (normsDocID == doc) {\n          normValue = norms.longValue();\n        } else {\n          normValue = 0;\n        }\n        return raw * decodeNormValue(normValue);  // normalize for field\n      }\n    }\n\n","sourceOld":"    @Override\n    public float score(int doc, float freq) {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n      \n      return norms == null ? raw : raw * decodeNormValue(norms.get(doc));  // normalize for field\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","sourceNew":"    @Override\n    public float score(int doc, float freq) throws IOException {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n\n      if (norms == null) {\n        return raw;\n      } else {\n        long normValue;\n        if (norms.advanceExact(doc)) {\n          normValue = norms.longValue();\n        } else {\n          normValue = 0;\n        }\n        return raw * decodeNormValue(normValue);  // normalize for field\n      }\n    }\n\n","sourceOld":"    @Override\n    public float score(int doc, float freq) throws IOException {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n\n      if (norms == null) {\n        return raw;\n      } else {\n        long normValue;\n        int normsDocID = norms.docID();\n        if (normsDocID < doc) {\n          normsDocID = norms.advance(doc);\n        }\n        if (normsDocID == doc) {\n          normValue = norms.longValue();\n        } else {\n          normValue = 0;\n        }\n        return raw * decodeNormValue(normValue);  // normalize for field\n      }\n    }\n\n","bugFix":null,"bugIntro":["0f82a9bd302914a72572934ddb0a4ee15edfe4c6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","sourceNew":"    @Override\n    public float score(int doc, float freq) throws IOException {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n\n      if (norms == null) {\n        return raw;\n      } else {\n        long normValue;\n        if (norms.advanceExact(doc)) {\n          normValue = norms.longValue();\n        } else {\n          normValue = 0;\n        }\n        return raw * decodeNormValue(normValue);  // normalize for field\n      }\n    }\n\n","sourceOld":"    @Override\n    public float score(int doc, float freq) throws IOException {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n\n      if (norms == null) {\n        return raw;\n      } else {\n        long normValue;\n        int normsDocID = norms.docID();\n        if (normsDocID < doc) {\n          normsDocID = norms.advance(doc);\n        }\n        if (normsDocID == doc) {\n          normValue = norms.longValue();\n        } else {\n          normValue = 0;\n        }\n        return raw * decodeNormValue(normValue);  // normalize for field\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","sourceNew":"    @Override\n    public float score(int doc, float freq) throws IOException {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n\n      if (norms == null) {\n        return raw;\n      } else {\n        long normValue;\n        if (norms.advanceExact(doc)) {\n          normValue = norms.longValue();\n        } else {\n          normValue = 0;\n        }\n        return raw * decodeNormValue(normValue);  // normalize for field\n      }\n    }\n\n","sourceOld":"    @Override\n    public float score(int doc, float freq) throws IOException {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n\n      if (norms == null) {\n        return raw;\n      } else {\n        long normValue;\n        int normsDocID = norms.docID();\n        if (normsDocID < doc) {\n          normsDocID = norms.advance(doc);\n        }\n        if (normsDocID == doc) {\n          normValue = norms.longValue();\n        } else {\n          normValue = 0;\n        }\n        return raw * decodeNormValue(normValue);  // normalize for field\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","sourceNew":"    @Override\n    public float score(int doc, float freq) throws IOException {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n\n      if (norms == null) {\n        return raw;\n      } else {\n        float normValue;\n        if (norms.advanceExact(doc)) {\n          normValue = normTable[(int) (norms.longValue() & 0xFF)];\n        } else {\n          normValue = 0;\n        }\n        return raw * normValue;  // normalize for field\n      }\n    }\n\n","sourceOld":"    @Override\n    public float score(int doc, float freq) throws IOException {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n\n      if (norms == null) {\n        return raw;\n      } else {\n        long normValue;\n        if (norms.advanceExact(doc)) {\n          normValue = norms.longValue();\n        } else {\n          normValue = 0;\n        }\n        return raw * decodeNormValue(normValue);  // normalize for field\n      }\n    }\n\n","bugFix":null,"bugIntro":["0f82a9bd302914a72572934ddb0a4ee15edfe4c6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","sourceNew":"    @Override\n    public float score(int doc, float freq) throws IOException {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n\n      if (norms == null) {\n        return raw;\n      } else {\n        float normValue;\n        if (norms.advanceExact(doc)) {\n          normValue = normTable[(int) (norms.longValue() & 0xFF)];\n        } else {\n          normValue = 0;\n        }\n        return raw * normValue;  // normalize for field\n      }\n    }\n\n","sourceOld":"    @Override\n    public float score(int doc, float freq) throws IOException {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n\n      if (norms == null) {\n        return raw;\n      } else {\n        long normValue;\n        if (norms.advanceExact(doc)) {\n          normValue = norms.longValue();\n        } else {\n          normValue = 0;\n        }\n        return raw * decodeNormValue(normValue);  // normalize for field\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f82a9bd302914a72572934ddb0a4ee15edfe4c6","date":1509493555,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","sourceNew":"    @Override\n    public float score(int doc, float freq) throws IOException {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n\n      if (norms == null) {\n        return raw;\n      } else {\n        boolean found = norms.advanceExact(doc);\n        assert found;\n        float normValue = normTable[(int) (norms.longValue() & 0xFF)];\n        return raw * normValue;  // normalize for field\n      }\n    }\n\n","sourceOld":"    @Override\n    public float score(int doc, float freq) throws IOException {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n\n      if (norms == null) {\n        return raw;\n      } else {\n        float normValue;\n        if (norms.advanceExact(doc)) {\n          normValue = normTable[(int) (norms.longValue() & 0xFF)];\n        } else {\n          normValue = 0;\n        }\n        return raw * normValue;  // normalize for field\n      }\n    }\n\n","bugFix":["615370d2b876c3435773b5174df2e2242ad7981a","11134e449dabe11d6d0ff6a564d84b82cbe93722","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","sourceNew":null,"sourceOld":"    @Override\n    public float score(int doc, float freq) throws IOException {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n\n      if (norms == null) {\n        return raw;\n      } else {\n        boolean found = norms.advanceExact(doc);\n        assert found;\n        float normValue = normTable[(int) (norms.longValue() & 0xFF)];\n        return raw * normValue;  // normalize for field\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.TFIDFSimScorer#score(int,float).mjava","sourceNew":null,"sourceOld":"    @Override\n    public float score(int doc, float freq) throws IOException {\n      final float raw = tf(freq) * weightValue; // compute tf(f)*weight\n\n      if (norms == null) {\n        return raw;\n      } else {\n        boolean found = norms.advanceExact(doc);\n        assert found;\n        float normValue = normTable[(int) (norms.longValue() & 0xFF)];\n        return raw * normValue;  // normalize for field\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["0f82a9bd302914a72572934ddb0a4ee15edfe4c6","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b799defcfda6d303cbb180917bf1e749089adf42","496cc26fd7f5a8e2aa6c46d43e50860ef4225098"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["496cc26fd7f5a8e2aa6c46d43e50860ef4225098","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["0f82a9bd302914a72572934ddb0a4ee15edfe4c6"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76","615370d2b876c3435773b5174df2e2242ad7981a"],"496cc26fd7f5a8e2aa6c46d43e50860ef4225098":["b799defcfda6d303cbb180917bf1e749089adf42"],"615370d2b876c3435773b5174df2e2242ad7981a":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b799defcfda6d303cbb180917bf1e749089adf42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["496cc26fd7f5a8e2aa6c46d43e50860ef4225098","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["496cc26fd7f5a8e2aa6c46d43e50860ef4225098"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"0f82a9bd302914a72572934ddb0a4ee15edfe4c6":["615370d2b876c3435773b5174df2e2242ad7981a"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"496cc26fd7f5a8e2aa6c46d43e50860ef4225098":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","0f82a9bd302914a72572934ddb0a4ee15edfe4c6"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"b799defcfda6d303cbb180917bf1e749089adf42":["37a0f60745e53927c4c876cfe5b5a58170f0646c","496cc26fd7f5a8e2aa6c46d43e50860ef4225098"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b799defcfda6d303cbb180917bf1e749089adf42"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"0f82a9bd302914a72572934ddb0a4ee15edfe4c6":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","e9017cf144952056066919f1ebc7897ff9bd71b1","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}