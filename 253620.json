{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","commits":[{"id":"f4cdb4d252303817a657f62a39d7a8ca669abc2a","date":1394456576,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBackCompat() {\n    List iteratorAsList = null;\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(\"/solrj/javabin_backcompat.bin\");\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n\n      assertEquals(unmarshaledObj.size(), matchObj.size());\n      for(int i=0; i < unmarshaledObj.size(); i++) {\n\n        if(unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n          byte[] b1 = (byte[]) unmarshaledObj.get(i);\n          byte[] b2 = (byte[]) matchObj.get(i);\n          assertTrue(Arrays.equals(b1, b2));\n\n        } else {\n          assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n        }\n\n      }\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0146597a1c108e2e637e97237e4619e0e5ba2aef","date":1394471404,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","sourceNew":"  @Test\n  public void testBackCompat() {\n    List iteratorAsList = null;\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n\n      assertEquals(unmarshaledObj.size(), matchObj.size());\n      for(int i=0; i < unmarshaledObj.size(); i++) {\n\n        if(unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n          byte[] b1 = (byte[]) unmarshaledObj.get(i);\n          byte[] b2 = (byte[]) matchObj.get(i);\n          assertTrue(Arrays.equals(b1, b2));\n\n        } else {\n          assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n        }\n\n      }\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBackCompat() {\n    List iteratorAsList = null;\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(\"/solrj/javabin_backcompat.bin\");\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n\n      assertEquals(unmarshaledObj.size(), matchObj.size());\n      for(int i=0; i < unmarshaledObj.size(); i++) {\n\n        if(unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n          byte[] b1 = (byte[]) unmarshaledObj.get(i);\n          byte[] b2 = (byte[]) matchObj.get(i);\n          assertTrue(Arrays.equals(b1, b2));\n\n        } else {\n          assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n        }\n\n      }\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBackCompat() {\n    List iteratorAsList = null;\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n\n      assertEquals(unmarshaledObj.size(), matchObj.size());\n      for(int i=0; i < unmarshaledObj.size(); i++) {\n\n        if(unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n          byte[] b1 = (byte[]) unmarshaledObj.get(i);\n          byte[] b2 = (byte[]) matchObj.get(i);\n          assertTrue(Arrays.equals(b1, b2));\n\n        } else {\n          assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n        }\n\n      }\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6071e662e00f61ccd046fe73a31ac6e57aaca116","date":1394797480,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","sourceNew":"  @Test\n  public void testBackCompat() {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n\n      assertEquals(unmarshaledObj.size(), matchObj.size());\n      for(int i=0; i < unmarshaledObj.size(); i++) {\n\n        if(unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n          byte[] b1 = (byte[]) unmarshaledObj.get(i);\n          byte[] b2 = (byte[]) matchObj.get(i);\n          assertTrue(Arrays.equals(b1, b2));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocument && matchObj.get(i) instanceof SolrDocument ) {\n          assertSolrDocumentEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocumentList && matchObj.get(i) instanceof SolrDocumentList ) {\n          assertSolrDocumentEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputDocument && matchObj.get(i) instanceof SolrInputDocument) {\n          assertSolrInputDocumentEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputField && matchObj.get(i) instanceof SolrInputField) {\n          assertSolrInputFieldEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else {\n          assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n        }\n\n      }\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBackCompat() {\n    List iteratorAsList = null;\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n\n      assertEquals(unmarshaledObj.size(), matchObj.size());\n      for(int i=0; i < unmarshaledObj.size(); i++) {\n\n        if(unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n          byte[] b1 = (byte[]) unmarshaledObj.get(i);\n          byte[] b2 = (byte[]) matchObj.get(i);\n          assertTrue(Arrays.equals(b1, b2));\n\n        } else {\n          assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n        }\n\n      }\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["3f50fec5dadda9f0c72e0e8fe342b6438178a459"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","date":1402094642,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","sourceNew":"  @Test\n  public void testBackCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n\n      assertEquals(unmarshaledObj.size(), matchObj.size());\n      for(int i=0; i < unmarshaledObj.size(); i++) {\n\n        if(unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n          byte[] b1 = (byte[]) unmarshaledObj.get(i);\n          byte[] b2 = (byte[]) matchObj.get(i);\n          assertTrue(Arrays.equals(b1, b2));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocument && matchObj.get(i) instanceof SolrDocument ) {\n          assertSolrDocumentEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocumentList && matchObj.get(i) instanceof SolrDocumentList ) {\n          assertSolrDocumentEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputDocument && matchObj.get(i) instanceof SolrInputDocument) {\n          assertSolrInputDocumentEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputField && matchObj.get(i) instanceof SolrInputField) {\n          assertSolrInputFieldEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else {\n          assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n        }\n\n      }\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBackCompat() {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n\n      assertEquals(unmarshaledObj.size(), matchObj.size());\n      for(int i=0; i < unmarshaledObj.size(); i++) {\n\n        if(unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n          byte[] b1 = (byte[]) unmarshaledObj.get(i);\n          byte[] b2 = (byte[]) matchObj.get(i);\n          assertTrue(Arrays.equals(b1, b2));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocument && matchObj.get(i) instanceof SolrDocument ) {\n          assertSolrDocumentEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocumentList && matchObj.get(i) instanceof SolrDocumentList ) {\n          assertSolrDocumentEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputDocument && matchObj.get(i) instanceof SolrInputDocument) {\n          assertSolrInputDocumentEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputField && matchObj.get(i) instanceof SolrInputField) {\n          assertSolrInputFieldEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else {\n          assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n        }\n\n      }\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f50fec5dadda9f0c72e0e8fe342b6438178a459","date":1402575501,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","sourceNew":"  @Test\n  public void testBackCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n\n      assertEquals(unmarshaledObj.size(), matchObj.size());\n      for(int i=0; i < unmarshaledObj.size(); i++) {\n\n        if(unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n          byte[] b1 = (byte[]) unmarshaledObj.get(i);\n          byte[] b2 = (byte[]) matchObj.get(i);\n          assertTrue(Arrays.equals(b1, b2));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocument && matchObj.get(i) instanceof SolrDocument ) {\n          assertTrue(compareSolrDocument(unmarshaledObj.get(i), matchObj.get(i)));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocumentList && matchObj.get(i) instanceof SolrDocumentList ) {\n          assertTrue(compareSolrDocumentList(unmarshaledObj.get(i), matchObj.get(i)));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputDocument && matchObj.get(i) instanceof SolrInputDocument) {\n          assertTrue(compareSolrInputDocument(unmarshaledObj.get(i), matchObj.get(i)));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputField && matchObj.get(i) instanceof SolrInputField) {\n          assertTrue(assertSolrInputFieldEquals(unmarshaledObj.get(i), matchObj.get(i)));\n        } else {\n          assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n        }\n\n      }\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBackCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n\n      assertEquals(unmarshaledObj.size(), matchObj.size());\n      for(int i=0; i < unmarshaledObj.size(); i++) {\n\n        if(unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n          byte[] b1 = (byte[]) unmarshaledObj.get(i);\n          byte[] b2 = (byte[]) matchObj.get(i);\n          assertTrue(Arrays.equals(b1, b2));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocument && matchObj.get(i) instanceof SolrDocument ) {\n          assertSolrDocumentEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocumentList && matchObj.get(i) instanceof SolrDocumentList ) {\n          assertSolrDocumentEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputDocument && matchObj.get(i) instanceof SolrInputDocument) {\n          assertSolrInputDocumentEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputField && matchObj.get(i) instanceof SolrInputField) {\n          assertSolrInputFieldEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else {\n          assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n        }\n\n      }\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","bugFix":["6071e662e00f61ccd046fe73a31ac6e57aaca116"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","sourceNew":"  @Test\n  public void testBackCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n\n      assertEquals(unmarshaledObj.size(), matchObj.size());\n      for(int i=0; i < unmarshaledObj.size(); i++) {\n\n        if(unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n          byte[] b1 = (byte[]) unmarshaledObj.get(i);\n          byte[] b2 = (byte[]) matchObj.get(i);\n          assertTrue(Arrays.equals(b1, b2));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocument && matchObj.get(i) instanceof SolrDocument ) {\n          assertTrue(compareSolrDocument(unmarshaledObj.get(i), matchObj.get(i)));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocumentList && matchObj.get(i) instanceof SolrDocumentList ) {\n          assertTrue(compareSolrDocumentList(unmarshaledObj.get(i), matchObj.get(i)));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputDocument && matchObj.get(i) instanceof SolrInputDocument) {\n          assertTrue(compareSolrInputDocument(unmarshaledObj.get(i), matchObj.get(i)));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputField && matchObj.get(i) instanceof SolrInputField) {\n          assertTrue(assertSolrInputFieldEquals(unmarshaledObj.get(i), matchObj.get(i)));\n        } else {\n          assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n        }\n\n      }\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBackCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n\n      assertEquals(unmarshaledObj.size(), matchObj.size());\n      for(int i=0; i < unmarshaledObj.size(); i++) {\n\n        if(unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n          byte[] b1 = (byte[]) unmarshaledObj.get(i);\n          byte[] b2 = (byte[]) matchObj.get(i);\n          assertTrue(Arrays.equals(b1, b2));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocument && matchObj.get(i) instanceof SolrDocument ) {\n          assertSolrDocumentEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocumentList && matchObj.get(i) instanceof SolrDocumentList ) {\n          assertSolrDocumentEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputDocument && matchObj.get(i) instanceof SolrInputDocument) {\n          assertSolrInputDocumentEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputField && matchObj.get(i) instanceof SolrInputField) {\n          assertSolrInputFieldEquals(unmarshaledObj.get(i), matchObj.get(i));\n        } else {\n          assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n        }\n\n      }\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04aef18a25f8e0d1832199f0cc7607773de5a229","date":1473142144,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","sourceNew":"  @Test\n  public void testBackCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n      compareObjects(unmarshaledObj, matchObj);\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBackCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n\n      assertEquals(unmarshaledObj.size(), matchObj.size());\n      for(int i=0; i < unmarshaledObj.size(); i++) {\n\n        if(unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n          byte[] b1 = (byte[]) unmarshaledObj.get(i);\n          byte[] b2 = (byte[]) matchObj.get(i);\n          assertTrue(Arrays.equals(b1, b2));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocument && matchObj.get(i) instanceof SolrDocument ) {\n          assertTrue(compareSolrDocument(unmarshaledObj.get(i), matchObj.get(i)));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocumentList && matchObj.get(i) instanceof SolrDocumentList ) {\n          assertTrue(compareSolrDocumentList(unmarshaledObj.get(i), matchObj.get(i)));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputDocument && matchObj.get(i) instanceof SolrInputDocument) {\n          assertTrue(compareSolrInputDocument(unmarshaledObj.get(i), matchObj.get(i)));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputField && matchObj.get(i) instanceof SolrInputField) {\n          assertTrue(assertSolrInputFieldEquals(unmarshaledObj.get(i), matchObj.get(i)));\n        } else {\n          assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n        }\n\n      }\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","sourceNew":"  @Test\n  public void testBackCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n      compareObjects(unmarshaledObj, matchObj);\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBackCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n\n      assertEquals(unmarshaledObj.size(), matchObj.size());\n      for(int i=0; i < unmarshaledObj.size(); i++) {\n\n        if(unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n          byte[] b1 = (byte[]) unmarshaledObj.get(i);\n          byte[] b2 = (byte[]) matchObj.get(i);\n          assertTrue(Arrays.equals(b1, b2));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocument && matchObj.get(i) instanceof SolrDocument ) {\n          assertTrue(compareSolrDocument(unmarshaledObj.get(i), matchObj.get(i)));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocumentList && matchObj.get(i) instanceof SolrDocumentList ) {\n          assertTrue(compareSolrDocumentList(unmarshaledObj.get(i), matchObj.get(i)));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputDocument && matchObj.get(i) instanceof SolrInputDocument) {\n          assertTrue(compareSolrInputDocument(unmarshaledObj.get(i), matchObj.get(i)));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputField && matchObj.get(i) instanceof SolrInputField) {\n          assertTrue(assertSolrInputFieldEquals(unmarshaledObj.get(i), matchObj.get(i)));\n        } else {\n          assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n        }\n\n      }\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","sourceNew":"  @Test\n  public void testBackCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n      compareObjects(unmarshaledObj, matchObj);\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBackCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n\n      assertEquals(unmarshaledObj.size(), matchObj.size());\n      for(int i=0; i < unmarshaledObj.size(); i++) {\n\n        if(unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n          byte[] b1 = (byte[]) unmarshaledObj.get(i);\n          byte[] b2 = (byte[]) matchObj.get(i);\n          assertTrue(Arrays.equals(b1, b2));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocument && matchObj.get(i) instanceof SolrDocument ) {\n          assertTrue(compareSolrDocument(unmarshaledObj.get(i), matchObj.get(i)));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocumentList && matchObj.get(i) instanceof SolrDocumentList ) {\n          assertTrue(compareSolrDocumentList(unmarshaledObj.get(i), matchObj.get(i)));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputDocument && matchObj.get(i) instanceof SolrInputDocument) {\n          assertTrue(compareSolrInputDocument(unmarshaledObj.get(i), matchObj.get(i)));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputField && matchObj.get(i) instanceof SolrInputField) {\n          assertTrue(assertSolrInputFieldEquals(unmarshaledObj.get(i), matchObj.get(i)));\n        } else {\n          assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n        }\n\n      }\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","sourceNew":"  @Test\n  public void testBackCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n      compareObjects(unmarshaledObj, matchObj);\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBackCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n\n      assertEquals(unmarshaledObj.size(), matchObj.size());\n      for(int i=0; i < unmarshaledObj.size(); i++) {\n\n        if(unmarshaledObj.get(i) instanceof byte[] && matchObj.get(i) instanceof byte[]) {\n          byte[] b1 = (byte[]) unmarshaledObj.get(i);\n          byte[] b2 = (byte[]) matchObj.get(i);\n          assertTrue(Arrays.equals(b1, b2));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocument && matchObj.get(i) instanceof SolrDocument ) {\n          assertTrue(compareSolrDocument(unmarshaledObj.get(i), matchObj.get(i)));\n        } else if(unmarshaledObj.get(i) instanceof SolrDocumentList && matchObj.get(i) instanceof SolrDocumentList ) {\n          assertTrue(compareSolrDocumentList(unmarshaledObj.get(i), matchObj.get(i)));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputDocument && matchObj.get(i) instanceof SolrInputDocument) {\n          assertTrue(compareSolrInputDocument(unmarshaledObj.get(i), matchObj.get(i)));\n        } else if(unmarshaledObj.get(i) instanceof SolrInputField && matchObj.get(i) instanceof SolrInputField) {\n          assertTrue(assertSolrInputFieldEquals(unmarshaledObj.get(i), matchObj.get(i)));\n        } else {\n          assertEquals(unmarshaledObj.get(i), matchObj.get(i));\n        }\n\n      }\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","date":1497850557,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","sourceNew":"  @Test\n  public void testBackCompat() throws IOException {\n    try (InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN); JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };)\n    {\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n      compareObjects(unmarshaledObj, matchObj);\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBackCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n      compareObjects(unmarshaledObj, matchObj);\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","sourceNew":"  @Test\n  public void testBackCompat() throws IOException {\n    try (InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN); JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };)\n    {\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n      compareObjects(unmarshaledObj, matchObj);\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBackCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n      compareObjects(unmarshaledObj, matchObj);\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","sourceNew":"  @Test\n  public void testBackCompat() throws IOException {\n    try (InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN); JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };)\n    {\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n      compareObjects(unmarshaledObj, matchObj);\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBackCompat() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN);\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n      compareObjects(unmarshaledObj, matchObj);\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompat().mjava","sourceNew":"  @Test\n  public void testBackCompat() throws IOException {\n    try (InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN); JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };)\n    {\n      @SuppressWarnings({\"unchecked\"})\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n      compareObjects(unmarshaledObj, matchObj);\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBackCompat() throws IOException {\n    try (InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN); JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };)\n    {\n      List<Object> unmarshaledObj = (List<Object>) javabin.unmarshal(is);\n      List<Object> matchObj = generateAllDataTypes();\n      compareObjects(unmarshaledObj, matchObj);\n    } catch (IOException e) {\n      throw e;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["28288370235ed02234a64753cdbf0c6ec096304a"],"04aef18a25f8e0d1832199f0cc7607773de5a229":["3f50fec5dadda9f0c72e0e8fe342b6438178a459"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0146597a1c108e2e637e97237e4619e0e5ba2aef"],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["6071e662e00f61ccd046fe73a31ac6e57aaca116"],"3f50fec5dadda9f0c72e0e8fe342b6438178a459":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"0146597a1c108e2e637e97237e4619e0e5ba2aef":["f4cdb4d252303817a657f62a39d7a8ca669abc2a"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","3f50fec5dadda9f0c72e0e8fe342b6438178a459"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3f50fec5dadda9f0c72e0e8fe342b6438178a459","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["3f50fec5dadda9f0c72e0e8fe342b6438178a459","04aef18a25f8e0d1832199f0cc7607773de5a229"],"6071e662e00f61ccd046fe73a31ac6e57aaca116":["0146597a1c108e2e637e97237e4619e0e5ba2aef"],"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["3f50fec5dadda9f0c72e0e8fe342b6438178a459","89424def13674ea17829b41c5883c54ecc31a132"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"f4cdb4d252303817a657f62a39d7a8ca669abc2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04aef18a25f8e0d1832199f0cc7607773de5a229":["89424def13674ea17829b41c5883c54ecc31a132"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["3f50fec5dadda9f0c72e0e8fe342b6438178a459","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"3f50fec5dadda9f0c72e0e8fe342b6438178a459":["04aef18a25f8e0d1832199f0cc7607773de5a229","c6f080a2ab37c464dd98db173f6cbf10dc74f211","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0146597a1c108e2e637e97237e4619e0e5ba2aef":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","6071e662e00f61ccd046fe73a31ac6e57aaca116"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"28288370235ed02234a64753cdbf0c6ec096304a":["9ba1b632c041956c93c41aa1143d16a567014891"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6071e662e00f61ccd046fe73a31ac6e57aaca116":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","f4cdb4d252303817a657f62a39d7a8ca669abc2a"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"f4cdb4d252303817a657f62a39d7a8ca669abc2a":["0146597a1c108e2e637e97237e4619e0e5ba2aef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","c6f080a2ab37c464dd98db173f6cbf10dc74f211","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}