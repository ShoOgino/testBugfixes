{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(SolrResourceLoader,int,String,byte[],boolean).mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(SolrResourceLoader,int,String,byte[],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static boolean persistConfigResourceToZooKeeper( SolrResourceLoader loader, int znodeVersion , String resourceName, byte[] content, boolean createIfNotExists) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getCollectionZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - version mismatch\";\n    try {\n      try {\n        zkClient.setData(resourceLocation , content,znodeVersion, true);\n      } catch (NoNodeException e) {\n        if(createIfNotExists){\n          try {\n            zkClient.create(resourceLocation,content, CreateMode.PERSISTENT,true);\n          } catch (KeeperException.NodeExistsException nee) {\n            log.info(MessageFormat.format(errMsg,resourceLocation));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve){\n      log.info(MessageFormat.format(errMsg,resourceLocation));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation) + \", retry.\");\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17778d9c1f3a8a67383edebf24754bf30a5120f8","date":1415342366,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(SolrResourceLoader,int,String,byte[],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(SolrResourceLoader,int,String,byte[],boolean).mjava","sourceNew":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static boolean persistConfigResourceToZooKeeper( SolrResourceLoader loader, int znodeVersion , String resourceName, byte[] content, boolean createIfNotExists) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - version mismatch\";\n    try {\n      try {\n        zkClient.setData(resourceLocation , content,znodeVersion, true);\n      } catch (NoNodeException e) {\n        if(createIfNotExists){\n          try {\n            zkClient.create(resourceLocation,content, CreateMode.PERSISTENT,true);\n          } catch (KeeperException.NodeExistsException nee) {\n            log.info(MessageFormat.format(errMsg,resourceLocation));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve){\n      log.info(MessageFormat.format(errMsg,resourceLocation));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation) + \", retry.\");\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static boolean persistConfigResourceToZooKeeper( SolrResourceLoader loader, int znodeVersion , String resourceName, byte[] content, boolean createIfNotExists) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getCollectionZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - version mismatch\";\n    try {\n      try {\n        zkClient.setData(resourceLocation , content,znodeVersion, true);\n      } catch (NoNodeException e) {\n        if(createIfNotExists){\n          try {\n            zkClient.create(resourceLocation,content, CreateMode.PERSISTENT,true);\n          } catch (KeeperException.NodeExistsException nee) {\n            log.info(MessageFormat.format(errMsg,resourceLocation));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve){\n      log.info(MessageFormat.format(errMsg,resourceLocation));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation) + \", retry.\");\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08f9f60ad238cb88d12306a20077e84d1f1f93e4","date":1416549887,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(SolrResourceLoader,int,String,byte[],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(SolrResourceLoader,int,String,byte[],boolean).mjava","sourceNew":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static boolean persistConfigResourceToZooKeeper( SolrResourceLoader loader, int znodeVersion ,\n                                                          String resourceName, byte[] content,\n                                                          boolean createIfNotExists) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - version mismatch {1}\";\n    try {\n      try {\n        zkClient.setData(resourceLocation , content,znodeVersion, true);\n        zkClient.setData(zkLoader.getConfigSetZkPath(),new byte[]{0},true);\n      } catch (NoNodeException e) {\n        if(createIfNotExists){\n          try {\n            zkClient.create(resourceLocation,content, CreateMode.PERSISTENT,true);\n            zkClient.setData(zkLoader.getConfigSetZkPath(), new byte[]{0}, true);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {} and expected version is {} \", stat.getVersion(),znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(MessageFormat.format(errMsg,resourceLocation,znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation,znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve){\n      log.info(MessageFormat.format(errMsg,resourceLocation));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation,znodeVersion) + \", retry.\");\n    }catch (ResourceModifiedInZkException e){\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static boolean persistConfigResourceToZooKeeper( SolrResourceLoader loader, int znodeVersion , String resourceName, byte[] content, boolean createIfNotExists) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - version mismatch\";\n    try {\n      try {\n        zkClient.setData(resourceLocation , content,znodeVersion, true);\n      } catch (NoNodeException e) {\n        if(createIfNotExists){\n          try {\n            zkClient.create(resourceLocation,content, CreateMode.PERSISTENT,true);\n          } catch (KeeperException.NodeExistsException nee) {\n            log.info(MessageFormat.format(errMsg,resourceLocation));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve){\n      log.info(MessageFormat.format(errMsg,resourceLocation));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation) + \", retry.\");\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d72e80cee24be385c713864a9f1f90be3744482","date":1417420925,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(SolrResourceLoader,int,String,byte[],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(SolrResourceLoader,int,String,byte[],boolean).mjava","sourceNew":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static boolean persistConfigResourceToZooKeeper( SolrResourceLoader loader, int znodeVersion ,\n                                                          String resourceName, byte[] content,\n                                                          boolean createIfNotExists) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        zkClient.setData(resourceLocation , content,znodeVersion, true);\n        zkClient.setData(zkLoader.getConfigSetZkPath(),new byte[]{0},true);\n      } catch (NoNodeException e) {\n        if(createIfNotExists){\n          try {\n            zkClient.create(resourceLocation,content, CreateMode.PERSISTENT,true);\n            zkClient.setData(zkLoader.getConfigSetZkPath(), new byte[]{0}, true);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {0} and expected version is {1} \", stat.getVersion(),znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(MessageFormat.format(errMsg,resourceLocation,znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation,znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve){\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(MessageFormat.format(errMsg+ \" zkVersion= \"+v,resourceLocation,znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation,znodeVersion) + \", retry.\");\n    }catch (ResourceModifiedInZkException e){\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static boolean persistConfigResourceToZooKeeper( SolrResourceLoader loader, int znodeVersion ,\n                                                          String resourceName, byte[] content,\n                                                          boolean createIfNotExists) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - version mismatch {1}\";\n    try {\n      try {\n        zkClient.setData(resourceLocation , content,znodeVersion, true);\n        zkClient.setData(zkLoader.getConfigSetZkPath(),new byte[]{0},true);\n      } catch (NoNodeException e) {\n        if(createIfNotExists){\n          try {\n            zkClient.create(resourceLocation,content, CreateMode.PERSISTENT,true);\n            zkClient.setData(zkLoader.getConfigSetZkPath(), new byte[]{0}, true);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {} and expected version is {} \", stat.getVersion(),znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(MessageFormat.format(errMsg,resourceLocation,znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation,znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve){\n      log.info(MessageFormat.format(errMsg,resourceLocation));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation,znodeVersion) + \", retry.\");\n    }catch (ResourceModifiedInZkException e){\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45a5f13e4e6b3c60912dc0911227739fe2f371c2","date":1420449490,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(SolrResourceLoader,int,String,byte[],boolean).mjava","sourceNew":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static boolean persistConfigResourceToZooKeeper( ZkSolrResourceLoader zkLoader, int znodeVersion ,\n                                                          String resourceName, byte[] content,\n                                                          boolean createIfNotExists) {\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        zkClient.setData(resourceLocation , content,znodeVersion, true);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if(createIfNotExists){\n          try {\n            zkClient.create(resourceLocation,content, CreateMode.PERSISTENT,true);\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {0} and expected version is {1} \", stat.getVersion(),znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(MessageFormat.format(errMsg,resourceLocation,znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation,znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve){\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(MessageFormat.format(errMsg+ \" zkVersion= \"+v,resourceLocation,znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation,znodeVersion) + \", retry.\");\n    }catch (ResourceModifiedInZkException e){\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static boolean persistConfigResourceToZooKeeper( SolrResourceLoader loader, int znodeVersion ,\n                                                          String resourceName, byte[] content,\n                                                          boolean createIfNotExists) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        zkClient.setData(resourceLocation , content,znodeVersion, true);\n        zkClient.setData(zkLoader.getConfigSetZkPath(),new byte[]{0},true);\n      } catch (NoNodeException e) {\n        if(createIfNotExists){\n          try {\n            zkClient.create(resourceLocation,content, CreateMode.PERSISTENT,true);\n            zkClient.setData(zkLoader.getConfigSetZkPath(), new byte[]{0}, true);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {0} and expected version is {1} \", stat.getVersion(),znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(MessageFormat.format(errMsg,resourceLocation,znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation,znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve){\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(MessageFormat.format(errMsg+ \" zkVersion= \"+v,resourceLocation,znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation,znodeVersion) + \", retry.\");\n    }catch (ResourceModifiedInZkException e){\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["17778d9c1f3a8a67383edebf24754bf30a5120f8"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d72e80cee24be385c713864a9f1f90be3744482":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"17778d9c1f3a8a67383edebf24754bf30a5120f8":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45a5f13e4e6b3c60912dc0911227739fe2f371c2":["7d72e80cee24be385c713864a9f1f90be3744482"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45a5f13e4e6b3c60912dc0911227739fe2f371c2"]},"commit2Childs":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["7d72e80cee24be385c713864a9f1f90be3744482"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["17778d9c1f3a8a67383edebf24754bf30a5120f8"],"7d72e80cee24be385c713864a9f1f90be3744482":["45a5f13e4e6b3c60912dc0911227739fe2f371c2"],"17778d9c1f3a8a67383edebf24754bf30a5120f8":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"45a5f13e4e6b3c60912dc0911227739fe2f371c2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}