{"path":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","commits":[{"id":"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2","date":1293213108,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","pathOld":"/dev/null","sourceNew":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      writer.write(stylesheet);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less\n    if (version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            writePrim(name,null,val.toString(),false);\n          } else {\n            writeVal(name,val);\n          }\n        }\n        decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","pathOld":"/dev/null","sourceNew":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      writer.write(stylesheet);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less\n    if (version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            writePrim(name,null,val.toString(),false);\n          } else {\n            writeVal(name,val);\n          }\n        }\n        decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","pathOld":"/dev/null","sourceNew":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      writer.write(stylesheet);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less\n    if (version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            writePrim(name,null,val.toString(),false);\n          } else {\n            writeVal(name,val);\n          }\n        }\n        decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a90b76c28e3d82d234874d6cbfff50c145c9b7b","date":1298853692,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      XML.escapeAttributeValue(stylesheet, writer);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less\n    if (version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            writePrim(name,null,val.toString(),false);\n          } else {\n            writeVal(name,val);\n          }\n        }\n        decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      writer.write(stylesheet);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less\n    if (version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            writePrim(name,null,val.toString(),false);\n          } else {\n            writeVal(name,val);\n          }\n        }\n        decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ce6aae13e6441cf187f083d13afaf8e9a2884e3","date":1299700113,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      XML.escapeAttributeValue(stylesheet, writer);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      XML.escapeAttributeValue(stylesheet, writer);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less\n    if (version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            writePrim(name,null,val.toString(),false);\n          } else {\n            writeVal(name,val);\n          }\n        }\n        decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      XML.escapeAttributeValue(stylesheet, writer);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      writer.write(stylesheet);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less\n    if (version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            writePrim(name,null,val.toString(),false);\n          } else {\n            writeVal(name,val);\n          }\n        }\n        decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      XML.escapeAttributeValue(stylesheet, writer);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      writer.write(stylesheet);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less\n    if (version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            writePrim(name,null,val.toString(),false);\n          } else {\n            writeVal(name,val);\n          }\n        }\n        decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e60cbc5a64afa73e6c7a72c720e0f79dac629f","date":1305916458,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      XML.escapeAttributeValue(stylesheet, writer);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList<?> lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      XML.escapeAttributeValue(stylesheet, writer);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      XML.escapeAttributeValue(stylesheet, writer);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList<?> lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      XML.escapeAttributeValue(stylesheet, writer);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      XML.escapeAttributeValue(stylesheet, writer);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList<?> lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      XML.escapeAttributeValue(stylesheet, writer);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      XML.escapeAttributeValue(stylesheet, writer);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList<?> lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      XML.escapeAttributeValue(stylesheet, writer);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList<?> lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      XML.escapeAttributeValue(stylesheet, writer);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList<?> lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      XML.escapeAttributeValue(stylesheet, writer);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList<?> lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      XML.escapeAttributeValue(stylesheet, writer);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList<?> lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      XML.escapeAttributeValue(stylesheet, writer);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    /***\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n     ***/\n    writer.write(XML_START2_NOSCHEMA);\n\n    // dump response values\n    NamedList<?> lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    for (int i=start; i<sz; i++) {\n      writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["d619839baa8ce5503e496b94a9e42ad6f079293f","01e60cbc5a64afa73e6c7a72c720e0f79dac629f"],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ce6aae13e6441cf187f083d13afaf8e9a2884e3":["7a90b76c28e3d82d234874d6cbfff50c145c9b7b"],"c26f00b574427b55127e869b935845554afde1fa":["01e60cbc5a64afa73e6c7a72c720e0f79dac629f","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"01e60cbc5a64afa73e6c7a72c720e0f79dac629f":["2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"7a90b76c28e3d82d234874d6cbfff50c145c9b7b":["7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2ce6aae13e6441cf187f083d13afaf8e9a2884e3","01e60cbc5a64afa73e6c7a72c720e0f79dac629f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["01e60cbc5a64afa73e6c7a72c720e0f79dac629f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":[],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["70ad682703b8585f5d0a637efec044d57ec05efb","7a90b76c28e3d82d234874d6cbfff50c145c9b7b","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"2ce6aae13e6441cf187f083d13afaf8e9a2884e3":["01e60cbc5a64afa73e6c7a72c720e0f79dac629f","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"01e60cbc5a64afa73e6c7a72c720e0f79dac629f":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","c26f00b574427b55127e869b935845554afde1fa","a3776dccca01c11e7046323cfad46a3b4a471233","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7a90b76c28e3d82d234874d6cbfff50c145c9b7b":["2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}