{"path":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      if (c.prohibited)\n\tbuffer.append(\"-\");\n      else if (c.required)\n\tbuffer.append(\"+\");\n\n      Query subQuery = c.query;\n      if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n\tBooleanQuery bq = (BooleanQuery)subQuery;\n\tbuffer.append(\"(\");\n\tbuffer.append(c.query.toString(field));\n\tbuffer.append(\")\");\n      } else\n\tbuffer.append(c.query.toString(field));\n\n      if (i != clauses.size()-1)\n\tbuffer.append(\" \");\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c17e05f5702993ebdc7a7d98bdc0edb94e15452f","ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d45d0d2289672db76e958087d4bdea72d4bc9f5","date":1042422678,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      if (c.prohibited)\n\tbuffer.append(\"-\");\n      else if (c.required)\n\tbuffer.append(\"+\");\n\n      Query subQuery = c.query;\n      if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n\tbuffer.append(\"(\");\n\tbuffer.append(c.query.toString(field));\n\tbuffer.append(\")\");\n      } else\n\tbuffer.append(c.query.toString(field));\n\n      if (i != clauses.size()-1)\n\tbuffer.append(\" \");\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      if (c.prohibited)\n\tbuffer.append(\"-\");\n      else if (c.required)\n\tbuffer.append(\"+\");\n\n      Query subQuery = c.query;\n      if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n\tBooleanQuery bq = (BooleanQuery)subQuery;\n\tbuffer.append(\"(\");\n\tbuffer.append(c.query.toString(field));\n\tbuffer.append(\")\");\n      } else\n\tbuffer.append(c.query.toString(field));\n\n      if (i != clauses.size()-1)\n\tbuffer.append(\" \");\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    if (getBoost() > 1.0) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      if (c.prohibited)\n\tbuffer.append(\"-\");\n      else if (c.required)\n\tbuffer.append(\"+\");\n\n      Query subQuery = c.query;\n      if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n\tbuffer.append(\"(\");\n\tbuffer.append(c.query.toString(field));\n\tbuffer.append(\")\");\n      } else\n\tbuffer.append(c.query.toString(field));\n\n      if (i != clauses.size()-1)\n\tbuffer.append(\" \");\n    }\n\n    if (getBoost() > 1.0) {\n      buffer.append(\")^\");\n      buffer.append(getBoost());\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      if (c.prohibited)\n\tbuffer.append(\"-\");\n      else if (c.required)\n\tbuffer.append(\"+\");\n\n      Query subQuery = c.query;\n      if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n\tbuffer.append(\"(\");\n\tbuffer.append(c.query.toString(field));\n\tbuffer.append(\")\");\n      } else\n\tbuffer.append(c.query.toString(field));\n\n      if (i != clauses.size()-1)\n\tbuffer.append(\" \");\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"94ab84dbd6e6b39c90c55cea2ebe0bb6032a3214","date":1042502677,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    if (getBoost() != 1.0) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      if (c.prohibited)\n\tbuffer.append(\"-\");\n      else if (c.required)\n\tbuffer.append(\"+\");\n\n      Query subQuery = c.query;\n      if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n\tbuffer.append(\"(\");\n\tbuffer.append(c.query.toString(field));\n\tbuffer.append(\")\");\n      } else\n\tbuffer.append(c.query.toString(field));\n\n      if (i != clauses.size()-1)\n\tbuffer.append(\" \");\n    }\n\n    if (getBoost() != 1.0) {\n      buffer.append(\")^\");\n      buffer.append(getBoost());\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    if (getBoost() > 1.0) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      if (c.prohibited)\n\tbuffer.append(\"-\");\n      else if (c.required)\n\tbuffer.append(\"+\");\n\n      Query subQuery = c.query;\n      if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n\tbuffer.append(\"(\");\n\tbuffer.append(c.query.toString(field));\n\tbuffer.append(\")\");\n      } else\n\tbuffer.append(c.query.toString(field));\n\n      if (i != clauses.size()-1)\n\tbuffer.append(\" \");\n    }\n\n    if (getBoost() > 1.0) {\n      buffer.append(\")^\");\n      buffer.append(getBoost());\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d1fc81afb0c32e0b7589e656cceb5cf177093fa","date":1093637352,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    if (getBoost() != 1.0) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      if (c.isProhibited())\n\tbuffer.append(\"-\");\n      else if (c.isRequired())\n\tbuffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n\tbuffer.append(\"(\");\n\tbuffer.append(c.getQuery().toString(field));\n\tbuffer.append(\")\");\n      } else\n\tbuffer.append(c.getQuery().toString(field));\n\n      if (i != clauses.size()-1)\n\tbuffer.append(\" \");\n    }\n\n    if (getBoost() != 1.0) {\n      buffer.append(\")^\");\n      buffer.append(getBoost());\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    if (getBoost() != 1.0) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      if (c.prohibited)\n\tbuffer.append(\"-\");\n      else if (c.required)\n\tbuffer.append(\"+\");\n\n      Query subQuery = c.query;\n      if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n\tbuffer.append(\"(\");\n\tbuffer.append(c.query.toString(field));\n\tbuffer.append(\")\");\n      } else\n\tbuffer.append(c.query.toString(field));\n\n      if (i != clauses.size()-1)\n\tbuffer.append(\" \");\n    }\n\n    if (getBoost() != 1.0) {\n      buffer.append(\")^\");\n      buffer.append(getBoost());\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df8dadf22de84eeb1294e70792e292ecf8ded564","date":1130577981,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    if (getBoost() != 1.0) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(c.getQuery().toString(field));\n        buffer.append(\")\");\n      } else\n        buffer.append(c.getQuery().toString(field));\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (getBoost() != 1.0) {\n      buffer.append(\")\");\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    if (getBoost() != 1.0) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      if (c.isProhibited())\n\tbuffer.append(\"-\");\n      else if (c.isRequired())\n\tbuffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n\tbuffer.append(\"(\");\n\tbuffer.append(c.getQuery().toString(field));\n\tbuffer.append(\")\");\n      } else\n\tbuffer.append(c.getQuery().toString(field));\n\n      if (i != clauses.size()-1)\n\tbuffer.append(\" \");\n    }\n\n    if (getBoost() != 1.0) {\n      buffer.append(\")^\");\n      buffer.append(getBoost());\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":["c17e05f5702993ebdc7a7d98bdc0edb94e15452f","9f324d6099b423d2c56da1afe7e9f0c327770175"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444","date":1132159199,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    boolean needParens=(getBoost() != 1.0) || (getMinimumNumberShouldMatch()>0) ;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(c.getQuery().toString(field));\n        buffer.append(\")\");\n      } else\n        buffer.append(c.getQuery().toString(field));\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f)\n    {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    if (getBoost() != 1.0) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(c.getQuery().toString(field));\n        buffer.append(\")\");\n      } else\n        buffer.append(c.getQuery().toString(field));\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (getBoost() != 1.0) {\n      buffer.append(\")\");\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e","date":1166323237,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    boolean needParens=(getBoost() != 1.0) || (getMinimumNumberShouldMatch()>0) ;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.get(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(c.getQuery().toString(field));\n        buffer.append(\")\");\n      } else\n        buffer.append(c.getQuery().toString(field));\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f)\n    {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    boolean needParens=(getBoost() != 1.0) || (getMinimumNumberShouldMatch()>0) ;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(c.getQuery().toString(field));\n        buffer.append(\")\");\n      } else\n        buffer.append(c.getQuery().toString(field));\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f)\n    {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c17e05f5702993ebdc7a7d98bdc0edb94e15452f","date":1228313722,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    boolean needParens=(getBoost() != 1.0) || (getMinimumNumberShouldMatch()>0) ;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.get(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f)\n    {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    boolean needParens=(getBoost() != 1.0) || (getMinimumNumberShouldMatch()>0) ;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.get(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(c.getQuery().toString(field));\n        buffer.append(\")\");\n      } else\n        buffer.append(c.getQuery().toString(field));\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f)\n    {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":["91109046a59c58ee0ee5d0d2767b08d1f30d6702","df8dadf22de84eeb1294e70792e292ecf8ded564"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens=(getBoost() != 1.0) || (getMinimumNumberShouldMatch()>0) ;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.get(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f)\n    {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuffer buffer = new StringBuffer();\n    boolean needParens=(getBoost() != 1.0) || (getMinimumNumberShouldMatch()>0) ;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.get(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f)\n    {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc","date":1255773182,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens=(getBoost() != 1.0) || (getMinimumNumberShouldMatch()>0) ;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f)\n    {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens=(getBoost() != 1.0) || (getMinimumNumberShouldMatch()>0) ;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.get(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f)\n    {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens=(getBoost() != 1.0) || (getMinimumNumberShouldMatch()>0) ;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f)\n    {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens=(getBoost() != 1.0) || (getMinimumNumberShouldMatch()>0) ;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f)\n    {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"c17e05f5702993ebdc7a7d98bdc0edb94e15452f":["570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e"],"3d45d0d2289672db76e958087d4bdea72d4bc9f5":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"df8dadf22de84eeb1294e70792e292ecf8ded564":["0d1fc81afb0c32e0b7589e656cceb5cf177093fa"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["3d45d0d2289672db76e958087d4bdea72d4bc9f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"0d1fc81afb0c32e0b7589e656cceb5cf177093fa":["94ab84dbd6e6b39c90c55cea2ebe0bb6032a3214"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["c17e05f5702993ebdc7a7d98bdc0edb94e15452f"],"570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"94ab84dbd6e6b39c90c55cea2ebe0bb6032a3214":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["3d45d0d2289672db76e958087d4bdea72d4bc9f5"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c17e05f5702993ebdc7a7d98bdc0edb94e15452f":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"3d45d0d2289672db76e958087d4bdea72d4bc9f5":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"df8dadf22de84eeb1294e70792e292ecf8ded564":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["94ab84dbd6e6b39c90c55cea2ebe0bb6032a3214"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444":["570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e"],"0d1fc81afb0c32e0b7589e656cceb5cf177093fa":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e":["c17e05f5702993ebdc7a7d98bdc0edb94e15452f"],"94ab84dbd6e6b39c90c55cea2ebe0bb6032a3214":["0d1fc81afb0c32e0b7589e656cceb5cf177093fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}