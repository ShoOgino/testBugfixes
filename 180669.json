{"path":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrntvWriterOverridesAllWrites().mjava","commits":[{"id":"87f40a063571d1870bae89b6d191c3cb53b10f5e","date":1482933535,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrntvWriterOverridesAllWrites().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrnvpWriterOverridesAllWrites().mjava","sourceNew":"  @Test\n  public void testArrntvWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeArray(java.lang.String,java.util.List) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n\n    final Class<?> subClass = ArrayOfNameTypeValueJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    for (final Method superClassMethod : superClass.getDeclaredMethods()) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = subClass.getDeclaredMethod(\n            superClassMethod.getName(),\n            superClassMethod.getParameterTypes());\n\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","sourceOld":"  @Test\n  public void testArrnvpWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeArray(java.lang.String,java.util.List) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n\n    final Class<?> subClass = ArrayOfNamedValuePairJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    for (final Method superClassMethod : superClass.getDeclaredMethods()) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = subClass.getDeclaredMethod(\n            superClassMethod.getName(),\n            superClassMethod.getParameterTypes());\n\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrntvWriterOverridesAllWrites().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testArrntvWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeArray(java.lang.String,java.util.List) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n\n    final Class<?> subClass = ArrayOfNameTypeValueJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    for (final Method superClassMethod : superClass.getDeclaredMethods()) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = subClass.getDeclaredMethod(\n            superClassMethod.getName(),\n            superClassMethod.getParameterTypes());\n\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26dad91f15019714a045b4d8c5f40162b2058b54","date":1528551655,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrntvWriterOverridesAllWrites().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrntvWriterOverridesAllWrites().mjava","sourceNew":"  @Test\n  public void testArrntvWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeArray(java.lang.String,java.util.List) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeJsonIter(java.util.Iterator) throws java.io.IOException\");\n\n    final Class<?> subClass = ArrayOfNameTypeValueJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    List<Method> allSuperClassMethods = new ArrayList<>();\n    for (Method method : superClass.getDeclaredMethods()) allSuperClassMethods.add(method);\n    for (Method method : JsonTextWriter.class.getDeclaredMethods()) allSuperClassMethods.add(method);\n\n\n    for (final Method superClassMethod : allSuperClassMethods) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = getDeclaredMethodInClasses(superClassMethod, subClass);\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","sourceOld":"  @Test\n  public void testArrntvWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeArray(java.lang.String,java.util.List) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n\n    final Class<?> subClass = ArrayOfNameTypeValueJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    for (final Method superClassMethod : superClass.getDeclaredMethods()) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = subClass.getDeclaredMethod(\n            superClassMethod.getName(),\n            superClassMethod.getParameterTypes());\n\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrntvWriterOverridesAllWrites().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrntvWriterOverridesAllWrites().mjava","sourceNew":"  @Test\n  public void testArrntvWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeArray(java.lang.String,java.util.List) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeJsonIter(java.util.Iterator) throws java.io.IOException\");\n\n    final Class<?> subClass = ArrayOfNameTypeValueJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    List<Method> allSuperClassMethods = new ArrayList<>();\n    for (Method method : superClass.getDeclaredMethods()) allSuperClassMethods.add(method);\n    for (Method method : JsonTextWriter.class.getDeclaredMethods()) allSuperClassMethods.add(method);\n\n\n    for (final Method superClassMethod : allSuperClassMethods) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = getDeclaredMethodInClasses(superClassMethod, subClass);\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","sourceOld":"  @Test\n  public void testArrntvWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeArray(java.lang.String,java.util.List) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n\n    final Class<?> subClass = ArrayOfNameTypeValueJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    for (final Method superClassMethod : superClass.getDeclaredMethods()) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = subClass.getDeclaredMethod(\n            superClassMethod.getName(),\n            superClassMethod.getParameterTypes());\n\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrntvWriterOverridesAllWrites().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrntvWriterOverridesAllWrites().mjava","sourceNew":"  @Test\n  public void testArrntvWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeArray(java.lang.String,java.util.List) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeJsonIter(java.util.Iterator) throws java.io.IOException\");\n\n    final Class<?> subClass = ArrayOfNameTypeValueJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    List<Method> allSuperClassMethods = new ArrayList<>();\n    for (Method method : superClass.getDeclaredMethods()) allSuperClassMethods.add(method);\n    for (Method method : JsonTextWriter.class.getDeclaredMethods()) allSuperClassMethods.add(method);\n\n\n    for (final Method superClassMethod : allSuperClassMethods) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = getDeclaredMethodInClasses(superClassMethod, subClass);\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","sourceOld":"  @Test\n  public void testArrntvWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeArray(java.lang.String,java.util.List) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n\n    final Class<?> subClass = ArrayOfNameTypeValueJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    for (final Method superClassMethod : superClass.getDeclaredMethods()) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = subClass.getDeclaredMethod(\n            superClassMethod.getName(),\n            superClassMethod.getParameterTypes());\n\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrntvWriterOverridesAllWrites().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrntvWriterOverridesAllWrites().mjava","sourceNew":"  @Test\n  public void testArrntvWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeArray(java.lang.String,java.util.List) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeJsonIter(java.util.Iterator) throws java.io.IOException\");\n\n    final Class<?> subClass = JSONResponseWriter.ArrayOfNameTypeValueJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    List<Method> allSuperClassMethods = new ArrayList<>();\n    for (Method method : superClass.getDeclaredMethods()) allSuperClassMethods.add(method);\n    for (Method method : JsonTextWriter.class.getDeclaredMethods()) allSuperClassMethods.add(method);\n\n\n    for (final Method superClassMethod : allSuperClassMethods) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = getDeclaredMethodInClasses(superClassMethod, subClass);\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","sourceOld":"  @Test\n  public void testArrntvWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeArray(java.lang.String,java.util.List) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public default void org.apache.solr.common.util.JsonTextWriter.writeJsonIter(java.util.Iterator) throws java.io.IOException\");\n\n    final Class<?> subClass = ArrayOfNameTypeValueJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    List<Method> allSuperClassMethods = new ArrayList<>();\n    for (Method method : superClass.getDeclaredMethods()) allSuperClassMethods.add(method);\n    for (Method method : JsonTextWriter.class.getDeclaredMethods()) allSuperClassMethods.add(method);\n\n\n    for (final Method superClassMethod : allSuperClassMethods) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = getDeclaredMethodInClasses(superClassMethod, subClass);\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["26dad91f15019714a045b4d8c5f40162b2058b54"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["87f40a063571d1870bae89b6d191c3cb53b10f5e","26dad91f15019714a045b4d8c5f40162b2058b54"],"26dad91f15019714a045b4d8c5f40162b2058b54":["87f40a063571d1870bae89b6d191c3cb53b10f5e"],"87f40a063571d1870bae89b6d191c3cb53b10f5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["87f40a063571d1870bae89b6d191c3cb53b10f5e","26dad91f15019714a045b4d8c5f40162b2058b54"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","87f40a063571d1870bae89b6d191c3cb53b10f5e"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"26dad91f15019714a045b4d8c5f40162b2058b54":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"87f40a063571d1870bae89b6d191c3cb53b10f5e":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","26dad91f15019714a045b4d8c5f40162b2058b54","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87f40a063571d1870bae89b6d191c3cb53b10f5e","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}