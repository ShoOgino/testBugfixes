{"path":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n        return getQuery();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":null,"sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n        return getQuery();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81c86ba78280d33631b3536414395ad80a19a8af","date":1302972671,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":["b53e1fdeb877dfb9c1aba24b343170ae7ffe7108","b53e1fdeb877dfb9c1aba24b343170ae7ffe7108","b53e1fdeb877dfb9c1aba24b343170ae7ffe7108"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getAliasedQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedQuery()\n      throws ParseException {\n      Alias a = aliases.get(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n            return getQuery();\n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n\n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          // should we disable coord?\n          BooleanQuery q = new BooleanQuery(disableCoord);\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n      } else {\n\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null) throw unknownField;\n        }\n\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["81c86ba78280d33631b3536414395ad80a19a8af","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["1da8d55113b689b06716246649de6f62430f15c0","81c86ba78280d33631b3536414395ad80a19a8af"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["1da8d55113b689b06716246649de6f62430f15c0","81c86ba78280d33631b3536414395ad80a19a8af"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"81c86ba78280d33631b3536414395ad80a19a8af":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1da8d55113b689b06716246649de6f62430f15c0","81c86ba78280d33631b3536414395ad80a19a8af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["81c86ba78280d33631b3536414395ad80a19a8af"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"1da8d55113b689b06716246649de6f62430f15c0":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","81c86ba78280d33631b3536414395ad80a19a8af","a3776dccca01c11e7046323cfad46a3b4a471233"],"81c86ba78280d33631b3536414395ad80a19a8af":["c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a3776dccca01c11e7046323cfad46a3b4a471233","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}