{"path":"lucene/src/test/org/apache/lucene/util/TestCollectionUtil#testOneElementListSort().mjava","commits":[{"id":"20bec0dc801c18dfd87add05a02af34d5f2177b4","date":1301137613,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestCollectionUtil#testOneElementListSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyArraySort().mjava","sourceNew":"  public void testOneElementListSort() {\n    // check that one-element non-random access lists pass sorting without ex (as sorting is not needed)\n    List<Integer> list = new LinkedList<Integer>();\n    list.add(1);\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","sourceOld":"  // should produce no exceptions\n  public void testEmptyArraySort() {\n    List<Integer> list = Arrays.asList(new Integer[0]);\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestCollectionUtil#testOneElementListSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testOneElementListSort() {\n    // check that one-element non-random access lists pass sorting without ex (as sorting is not needed)\n    List<Integer> list = new LinkedList<Integer>();\n    list.add(1);\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestCollectionUtil#testOneElementListSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testOneElementListSort() {\n    // check that one-element non-random access lists pass sorting without ex (as sorting is not needed)\n    List<Integer> list = new LinkedList<Integer>();\n    list.add(1);\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestCollectionUtil#testOneElementListSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestCollectionUtil#testOneElementListSort().mjava","sourceNew":"  public void testOneElementListSort() {\n    // check that one-element non-random access lists pass sorting without ex (as sorting is not needed)\n    List<Integer> list = new LinkedList<Integer>();\n    list.add(1);\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","sourceOld":"  public void testOneElementListSort() {\n    // check that one-element non-random access lists pass sorting without ex (as sorting is not needed)\n    List<Integer> list = new LinkedList<Integer>();\n    list.add(1);\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20bec0dc801c18dfd87add05a02af34d5f2177b4"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20bec0dc801c18dfd87add05a02af34d5f2177b4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["20bec0dc801c18dfd87add05a02af34d5f2177b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20bec0dc801c18dfd87add05a02af34d5f2177b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","20bec0dc801c18dfd87add05a02af34d5f2177b4"],"20bec0dc801c18dfd87add05a02af34d5f2177b4":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}