{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","sourceNew":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, \n        new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(TEST_VERSION_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.reset(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(CharTermAttribute.class));\n    char[] termBuffer = filter.getAttribute(CharTermAttribute.class).buffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n    assertEquals('\\udc3e', termBuffer[length]);\n    \n  }\n\n","sourceOld":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, \n        new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(TEST_VERSION_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.reset(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(CharTermAttribute.class));\n    char[] termBuffer = filter.getAttribute(CharTermAttribute.class).buffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n    assertEquals('\\udc3e', termBuffer[length]);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b893541afcaa76dcbac2fcd24bbfa05ca6b41129","date":1342450620,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","sourceNew":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, \n        new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(TEST_VERSION_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.setReader(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(CharTermAttribute.class));\n    char[] termBuffer = filter.getAttribute(CharTermAttribute.class).buffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n    assertEquals('\\udc3e', termBuffer[length]);\n    \n  }\n\n","sourceOld":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, \n        new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(TEST_VERSION_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.reset(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(CharTermAttribute.class));\n    char[] termBuffer = filter.getAttribute(CharTermAttribute.class).buffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n    assertEquals('\\udc3e', termBuffer[length]);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","sourceNew":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, \n        new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(TEST_VERSION_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.setReader(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(CharTermAttribute.class));\n    char[] termBuffer = filter.getAttribute(CharTermAttribute.class).buffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n    assertEquals('\\udc3e', termBuffer[length]);\n    \n  }\n\n","sourceOld":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, \n        new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(TEST_VERSION_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.reset(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(CharTermAttribute.class));\n    char[] termBuffer = filter.getAttribute(CharTermAttribute.class).buffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n    assertEquals('\\udc3e', termBuffer[length]);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","sourceNew":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, \n        new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(TEST_VERSION_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.setReader(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(CharTermAttribute.class));\n    char[] termBuffer = filter.getAttribute(CharTermAttribute.class).buffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n    assertEquals('\\udc3e', termBuffer[length]);\n    \n  }\n\n","sourceOld":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, \n        new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(TEST_VERSION_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.reset(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(CharTermAttribute.class));\n    char[] termBuffer = filter.getAttribute(CharTermAttribute.class).buffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n    assertEquals('\\udc3e', termBuffer[length]);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704","date":1371043069,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","sourceNew":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, \n        new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(TEST_VERSION_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.setReader(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(CharTermAttribute.class));\n    char[] termBuffer = filter.getAttribute(CharTermAttribute.class).buffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n  }\n\n","sourceOld":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, \n        new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(TEST_VERSION_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.setReader(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(CharTermAttribute.class));\n    char[] termBuffer = filter.getAttribute(CharTermAttribute.class).buffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n    assertEquals('\\udc3e', termBuffer[length]);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","sourceNew":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT);\n    tokenizer.setReader(new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(TEST_VERSION_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.setReader(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(CharTermAttribute.class));\n    char[] termBuffer = filter.getAttribute(CharTermAttribute.class).buffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n  }\n\n","sourceOld":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, \n        new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(TEST_VERSION_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.setReader(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(CharTermAttribute.class));\n    char[] termBuffer = filter.getAttribute(CharTermAttribute.class).buffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","sourceNew":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer();\n    tokenizer.setReader(new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.setReader(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(CharTermAttribute.class));\n    char[] termBuffer = filter.getAttribute(CharTermAttribute.class).buffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n  }\n\n","sourceOld":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT);\n    tokenizer.setReader(new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(TEST_VERSION_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.setReader(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(CharTermAttribute.class));\n    char[] termBuffer = filter.getAttribute(CharTermAttribute.class).buffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","sourceNew":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT);\n    tokenizer.setReader(new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(TEST_VERSION_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.setReader(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(CharTermAttribute.class));\n    char[] termBuffer = filter.getAttribute(CharTermAttribute.class).buffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n  }\n\n","sourceOld":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer();\n    tokenizer.setReader(new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.setReader(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(CharTermAttribute.class));\n    char[] termBuffer = filter.getAttribute(CharTermAttribute.class).buffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testLowerCaseFilterLowSurrogateLeftover().mjava","sourceNew":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer();\n    tokenizer.setReader(new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.setReader(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(CharTermAttribute.class));\n    char[] termBuffer = filter.getAttribute(CharTermAttribute.class).buffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n  }\n\n","sourceOld":"  /**\n   * Test that LowercaseFilter handles the lowercasing correctly if the term\n   * buffer has a trailing surrogate character leftover and the current term in\n   * the buffer ends with a corresponding leading surrogate.\n   */\n  public void testLowerCaseFilterLowSurrogateLeftover() throws IOException {\n    // test if the limit of the termbuffer is correctly used with supplementary\n    // chars\n    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT);\n    tokenizer.setReader(new StringReader(\"BogustermBogusterm\\udc16\"));\n    LowerCaseFilter filter = new LowerCaseFilter(TEST_VERSION_CURRENT,\n        tokenizer);\n    assertTokenStreamContents(filter, new String[] {\"bogustermbogusterm\\udc16\"});\n    filter.reset();\n    String highSurEndingUpper = \"BogustermBoguster\\ud801\";\n    String highSurEndingLower = \"bogustermboguster\\ud801\";\n    tokenizer.setReader(new StringReader(highSurEndingUpper));\n    assertTokenStreamContents(filter, new String[] {highSurEndingLower});\n    assertTrue(filter.hasAttribute(CharTermAttribute.class));\n    char[] termBuffer = filter.getAttribute(CharTermAttribute.class).buffer();\n    int length = highSurEndingLower.length();\n    assertEquals('\\ud801', termBuffer[length - 1]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["b893541afcaa76dcbac2fcd24bbfa05ca6b41129"],"b893541afcaa76dcbac2fcd24bbfa05ca6b41129":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"aba371508186796cc6151d8223a5b4e16d02e26e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b893541afcaa76dcbac2fcd24bbfa05ca6b41129"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b893541afcaa76dcbac2fcd24bbfa05ca6b41129"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b893541afcaa76dcbac2fcd24bbfa05ca6b41129","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"b893541afcaa76dcbac2fcd24bbfa05ca6b41129":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}