{"path":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","sourceNew":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    Fields fields = MultiFields.getFields(ir);\n    FieldsEnum fieldEnum = fields.iterator();\n    String f = null;\n    while ((f = fieldEnum.next()) != null) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","sourceOld":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    Fields fields = MultiFields.getFields(ir);\n    FieldsEnum fieldEnum = fields.iterator();\n    String f = null;\n    while ((f = fieldEnum.next()) != null) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","sourceNew":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    InvertedFields fields = MultiFields.getFields(ir);\n    FieldsEnum fieldEnum = fields.iterator();\n    String f = null;\n    while ((f = fieldEnum.next()) != null) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","sourceOld":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    Fields fields = MultiFields.getFields(ir);\n    FieldsEnum fieldEnum = fields.iterator();\n    String f = null;\n    while ((f = fieldEnum.next()) != null) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","sourceNew":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    Fields fields = MultiFields.getFields(ir);\n    FieldsEnum fieldEnum = fields.iterator();\n    String f = null;\n    while ((f = fieldEnum.next()) != null) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","sourceOld":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    InvertedFields fields = MultiFields.getFields(ir);\n    FieldsEnum fieldEnum = fields.iterator();\n    String f = null;\n    while ((f = fieldEnum.next()) != null) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","sourceNew":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    Fields fields = MultiFields.getFields(ir);\n\n    for (String f : fields) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","sourceOld":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    Fields fields = MultiFields.getFields(ir);\n    FieldsEnum fieldEnum = fields.iterator();\n    String f = null;\n    while ((f = fieldEnum.next()) != null) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","sourceNew":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    Fields fields = MultiFields.getFields(ir);\n\n    for (String f : fields) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","sourceOld":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    Fields fields = MultiFields.getFields(ir);\n    FieldsEnum fieldEnum = fields.iterator();\n    String f = null;\n    while ((f = fieldEnum.next()) != null) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","sourceNew":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    Fields fields = MultiFields.getFields(ir);\n\n    for (String f : fields) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","sourceOld":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    Fields fields = MultiFields.getFields(ir);\n    FieldsEnum fieldEnum = fields.iterator();\n    String f = null;\n    while ((f = fieldEnum.next()) != null) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","sourceNew":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    Fields fields = MultiFields.getFields(ir);\n\n    for (String f : fields) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator();\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","sourceOld":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    Fields fields = MultiFields.getFields(ir);\n\n    for (String f : fields) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7","date":1538404752,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","sourceNew":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    final Collection<String> fields = MultiFields.getIndexedFields(ir);\n    for (String f : fields) {\n      Terms terms = MultiFields.getTerms(ir, f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator();\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","sourceOld":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    Fields fields = MultiFields.getFields(ir);\n\n    for (String f : fields) {\n      Terms terms = fields.terms(f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator();\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSumDocFreq#assertSumDocFreq(IndexReader).mjava","sourceNew":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    final Collection<String> fields = FieldInfos.getIndexedFields(ir);\n    for (String f : fields) {\n      Terms terms = MultiTerms.getTerms(ir, f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator();\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","sourceOld":"  private void assertSumDocFreq(IndexReader ir) throws Exception {\n    // compute sumDocFreq across all fields\n    final Collection<String> fields = MultiFields.getIndexedFields(ir);\n    for (String f : fields) {\n      Terms terms = MultiFields.getTerms(ir, f);\n      long sumDocFreq = terms.getSumDocFreq();\n      if (sumDocFreq == -1) {\n        if (VERBOSE) {\n          System.out.println(\"skipping field: \" + f + \", codec does not support sumDocFreq\");\n        }\n        continue;\n      }\n      \n      long computedSumDocFreq = 0;\n      TermsEnum termsEnum = terms.iterator();\n      while (termsEnum.next() != null) {\n        computedSumDocFreq += termsEnum.docFreq();\n      }\n      assertEquals(computedSumDocFreq, sumDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fb07ab105350b80ed9d63ca64b117084ed7391bc","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}