{"path":"lucene/core/src/test/org/apache/lucene/store/TestMmapDirectory#testAceWithThreads().mjava","commits":[{"id":"71f8255d67554b78ea0a26a5cdb916a759261aab","date":1471024473,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMmapDirectory#testAceWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  // TODO: @Ignore(\"This test is for JVM testing purposes. There are no guarantees that it may not fail with SIGSEGV!\")\n  public void testAceWithThreads() throws Exception {\n    for (int iter = 0; iter < 10; iter++) {\n      Directory dir = getDirectory(createTempDir(\"testAceWithThreads\"));\n      IndexOutput out = dir.createOutput(\"test\", IOContext.DEFAULT);\n      for (int i = 0; i < 8 * 1024 * 1024; i++) {\n        out.writeInt(random().nextInt());\n      }\n      out.close();\n      IndexInput in = dir.openInput(\"test\", IOContext.DEFAULT);\n      IndexInput clone = in.clone();\n      final byte accum[] = new byte[32 * 1024 * 1024];\n      final CountDownLatch shotgun = new CountDownLatch(1);\n      Thread t1 = new Thread(() -> {\n        try {\n          shotgun.await();\n          for (int i = 0; i < 10; i++) {\n            clone.seek(0);\n            clone.readBytes(accum, 0, accum.length);\n          }\n        } catch (IOException | AlreadyClosedException ok) {\n          // OK\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n      });\n      t1.start();\n      shotgun.countDown();\n      in.close();\n      t1.join();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"760e6d43e7a3e6f65434ce1cac9efdd36855229a","date":1471032073,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMmapDirectory#testAceWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMmapDirectory#testAceWithThreads().mjava","sourceNew":"  // TODO: @Ignore(\"This test is for JVM testing purposes. There are no guarantees that it may not fail with SIGSEGV!\")\n  public void testAceWithThreads() throws Exception {\n    for (int iter = 0; iter < 10; iter++) {\n      Directory dir = getDirectory(createTempDir(\"testAceWithThreads\"));\n      IndexOutput out = dir.createOutput(\"test\", IOContext.DEFAULT);\n      Random random = random();\n      for (int i = 0; i < 8 * 1024 * 1024; i++) {\n        out.writeInt(random.nextInt());\n      }\n      out.close();\n      IndexInput in = dir.openInput(\"test\", IOContext.DEFAULT);\n      IndexInput clone = in.clone();\n      final byte accum[] = new byte[32 * 1024 * 1024];\n      final CountDownLatch shotgun = new CountDownLatch(1);\n      Thread t1 = new Thread(() -> {\n        try {\n          shotgun.await();\n          for (int i = 0; i < 10; i++) {\n            clone.seek(0);\n            clone.readBytes(accum, 0, accum.length);\n          }\n        } catch (IOException | AlreadyClosedException ok) {\n          // OK\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n      });\n      t1.start();\n      shotgun.countDown();\n      in.close();\n      t1.join();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // TODO: @Ignore(\"This test is for JVM testing purposes. There are no guarantees that it may not fail with SIGSEGV!\")\n  public void testAceWithThreads() throws Exception {\n    for (int iter = 0; iter < 10; iter++) {\n      Directory dir = getDirectory(createTempDir(\"testAceWithThreads\"));\n      IndexOutput out = dir.createOutput(\"test\", IOContext.DEFAULT);\n      for (int i = 0; i < 8 * 1024 * 1024; i++) {\n        out.writeInt(random().nextInt());\n      }\n      out.close();\n      IndexInput in = dir.openInput(\"test\", IOContext.DEFAULT);\n      IndexInput clone = in.clone();\n      final byte accum[] = new byte[32 * 1024 * 1024];\n      final CountDownLatch shotgun = new CountDownLatch(1);\n      Thread t1 = new Thread(() -> {\n        try {\n          shotgun.await();\n          for (int i = 0; i < 10; i++) {\n            clone.seek(0);\n            clone.readBytes(accum, 0, accum.length);\n          }\n        } catch (IOException | AlreadyClosedException ok) {\n          // OK\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n      });\n      t1.start();\n      shotgun.countDown();\n      in.close();\n      t1.join();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811843976b6c640567a212abf0958c8055723e1f","date":1471033187,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMmapDirectory#testAceWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMmapDirectory#testAceWithThreads().mjava","sourceNew":"  // TODO: @Ignore(\"This test is for JVM testing purposes. There are no guarantees that it may not fail with SIGSEGV!\")\n  public void testAceWithThreads() throws Exception {\n    for (int iter = 0; iter < 10; iter++) {\n      Directory dir = getDirectory(createTempDir(\"testAceWithThreads\"));\n      IndexOutput out = dir.createOutput(\"test\", IOContext.DEFAULT);\n      Random random = random();\n      for (int i = 0; i < 8 * 1024 * 1024; i++) {\n        out.writeInt(random.nextInt());\n      }\n      out.close();\n      IndexInput in = dir.openInput(\"test\", IOContext.DEFAULT);\n      IndexInput clone = in.clone();\n      final byte accum[] = new byte[32 * 1024 * 1024];\n      final CountDownLatch shotgun = new CountDownLatch(1);\n      Thread t1 = new Thread(() -> {\n        try {\n          shotgun.await();\n          for (int i = 0; i < 10; i++) {\n            clone.seek(0);\n            clone.readBytes(accum, 0, accum.length);\n          }\n        } catch (IOException | AlreadyClosedException ok) {\n          // OK\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n      });\n      t1.start();\n      shotgun.countDown();\n      in.close();\n      t1.join();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // TODO: @Ignore(\"This test is for JVM testing purposes. There are no guarantees that it may not fail with SIGSEGV!\")\n  public void testAceWithThreads() throws Exception {\n    for (int iter = 0; iter < 10; iter++) {\n      Directory dir = getDirectory(createTempDir(\"testAceWithThreads\"));\n      IndexOutput out = dir.createOutput(\"test\", IOContext.DEFAULT);\n      for (int i = 0; i < 8 * 1024 * 1024; i++) {\n        out.writeInt(random().nextInt());\n      }\n      out.close();\n      IndexInput in = dir.openInput(\"test\", IOContext.DEFAULT);\n      IndexInput clone = in.clone();\n      final byte accum[] = new byte[32 * 1024 * 1024];\n      final CountDownLatch shotgun = new CountDownLatch(1);\n      Thread t1 = new Thread(() -> {\n        try {\n          shotgun.await();\n          for (int i = 0; i < 10; i++) {\n            clone.seek(0);\n            clone.readBytes(accum, 0, accum.length);\n          }\n        } catch (IOException | AlreadyClosedException ok) {\n          // OK\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n      });\n      t1.start();\n      shotgun.countDown();\n      in.close();\n      t1.join();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMmapDirectory#testAceWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  // TODO: @Ignore(\"This test is for JVM testing purposes. There are no guarantees that it may not fail with SIGSEGV!\")\n  public void testAceWithThreads() throws Exception {\n    for (int iter = 0; iter < 10; iter++) {\n      Directory dir = getDirectory(createTempDir(\"testAceWithThreads\"));\n      IndexOutput out = dir.createOutput(\"test\", IOContext.DEFAULT);\n      Random random = random();\n      for (int i = 0; i < 8 * 1024 * 1024; i++) {\n        out.writeInt(random.nextInt());\n      }\n      out.close();\n      IndexInput in = dir.openInput(\"test\", IOContext.DEFAULT);\n      IndexInput clone = in.clone();\n      final byte accum[] = new byte[32 * 1024 * 1024];\n      final CountDownLatch shotgun = new CountDownLatch(1);\n      Thread t1 = new Thread(() -> {\n        try {\n          shotgun.await();\n          for (int i = 0; i < 10; i++) {\n            clone.seek(0);\n            clone.readBytes(accum, 0, accum.length);\n          }\n        } catch (IOException | AlreadyClosedException ok) {\n          // OK\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n      });\n      t1.start();\n      shotgun.countDown();\n      in.close();\n      t1.join();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d1d805d936a35e55a1d34bf88587e46f9e4f65d","date":1471528390,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMmapDirectory#testAceWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMmapDirectory#testAceWithThreads().mjava","sourceNew":"  @Ignore(\"This test is for JVM testing purposes. There are no guarantees that it may not fail with SIGSEGV!\")\n  public void testAceWithThreads() throws Exception {\n    for (int iter = 0; iter < 10; iter++) {\n      Directory dir = getDirectory(createTempDir(\"testAceWithThreads\"));\n      IndexOutput out = dir.createOutput(\"test\", IOContext.DEFAULT);\n      Random random = random();\n      for (int i = 0; i < 8 * 1024 * 1024; i++) {\n        out.writeInt(random.nextInt());\n      }\n      out.close();\n      IndexInput in = dir.openInput(\"test\", IOContext.DEFAULT);\n      IndexInput clone = in.clone();\n      final byte accum[] = new byte[32 * 1024 * 1024];\n      final CountDownLatch shotgun = new CountDownLatch(1);\n      Thread t1 = new Thread(() -> {\n        try {\n          shotgun.await();\n          for (int i = 0; i < 10; i++) {\n            clone.seek(0);\n            clone.readBytes(accum, 0, accum.length);\n          }\n        } catch (IOException | AlreadyClosedException ok) {\n          // OK\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n      });\n      t1.start();\n      shotgun.countDown();\n      in.close();\n      t1.join();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // TODO: @Ignore(\"This test is for JVM testing purposes. There are no guarantees that it may not fail with SIGSEGV!\")\n  public void testAceWithThreads() throws Exception {\n    for (int iter = 0; iter < 10; iter++) {\n      Directory dir = getDirectory(createTempDir(\"testAceWithThreads\"));\n      IndexOutput out = dir.createOutput(\"test\", IOContext.DEFAULT);\n      Random random = random();\n      for (int i = 0; i < 8 * 1024 * 1024; i++) {\n        out.writeInt(random.nextInt());\n      }\n      out.close();\n      IndexInput in = dir.openInput(\"test\", IOContext.DEFAULT);\n      IndexInput clone = in.clone();\n      final byte accum[] = new byte[32 * 1024 * 1024];\n      final CountDownLatch shotgun = new CountDownLatch(1);\n      Thread t1 = new Thread(() -> {\n        try {\n          shotgun.await();\n          for (int i = 0; i < 10; i++) {\n            clone.seek(0);\n            clone.readBytes(accum, 0, accum.length);\n          }\n        } catch (IOException | AlreadyClosedException ok) {\n          // OK\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n      });\n      t1.start();\n      shotgun.countDown();\n      in.close();\n      t1.join();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMmapDirectory#testAceWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore(\"This test is for JVM testing purposes. There are no guarantees that it may not fail with SIGSEGV!\")\n  public void testAceWithThreads() throws Exception {\n    for (int iter = 0; iter < 10; iter++) {\n      Directory dir = getDirectory(createTempDir(\"testAceWithThreads\"));\n      IndexOutput out = dir.createOutput(\"test\", IOContext.DEFAULT);\n      Random random = random();\n      for (int i = 0; i < 8 * 1024 * 1024; i++) {\n        out.writeInt(random.nextInt());\n      }\n      out.close();\n      IndexInput in = dir.openInput(\"test\", IOContext.DEFAULT);\n      IndexInput clone = in.clone();\n      final byte accum[] = new byte[32 * 1024 * 1024];\n      final CountDownLatch shotgun = new CountDownLatch(1);\n      Thread t1 = new Thread(() -> {\n        try {\n          shotgun.await();\n          for (int i = 0; i < 10; i++) {\n            clone.seek(0);\n            clone.readBytes(accum, 0, accum.length);\n          }\n        } catch (IOException | AlreadyClosedException ok) {\n          // OK\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n      });\n      t1.start();\n      shotgun.countDown();\n      in.close();\n      t1.join();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMmapDirectory#testAceWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore(\"This test is for JVM testing purposes. There are no guarantees that it may not fail with SIGSEGV!\")\n  public void testAceWithThreads() throws Exception {\n    for (int iter = 0; iter < 10; iter++) {\n      Directory dir = getDirectory(createTempDir(\"testAceWithThreads\"));\n      IndexOutput out = dir.createOutput(\"test\", IOContext.DEFAULT);\n      Random random = random();\n      for (int i = 0; i < 8 * 1024 * 1024; i++) {\n        out.writeInt(random.nextInt());\n      }\n      out.close();\n      IndexInput in = dir.openInput(\"test\", IOContext.DEFAULT);\n      IndexInput clone = in.clone();\n      final byte accum[] = new byte[32 * 1024 * 1024];\n      final CountDownLatch shotgun = new CountDownLatch(1);\n      Thread t1 = new Thread(() -> {\n        try {\n          shotgun.await();\n          for (int i = 0; i < 10; i++) {\n            clone.seek(0);\n            clone.readBytes(accum, 0, accum.length);\n          }\n        } catch (IOException | AlreadyClosedException ok) {\n          // OK\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n      });\n      t1.start();\n      shotgun.countDown();\n      in.close();\n      t1.join();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"811843976b6c640567a212abf0958c8055723e1f":["71f8255d67554b78ea0a26a5cdb916a759261aab","760e6d43e7a3e6f65434ce1cac9efdd36855229a"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0d1d805d936a35e55a1d34bf88587e46f9e4f65d"],"760e6d43e7a3e6f65434ce1cac9efdd36855229a":["71f8255d67554b78ea0a26a5cdb916a759261aab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d1d805d936a35e55a1d34bf88587e46f9e4f65d":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","811843976b6c640567a212abf0958c8055723e1f"],"71f8255d67554b78ea0a26a5cdb916a759261aab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"811843976b6c640567a212abf0958c8055723e1f":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"760e6d43e7a3e6f65434ce1cac9efdd36855229a":["811843976b6c640567a212abf0958c8055723e1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","71f8255d67554b78ea0a26a5cdb916a759261aab","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0d1d805d936a35e55a1d34bf88587e46f9e4f65d":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"71f8255d67554b78ea0a26a5cdb916a759261aab":["811843976b6c640567a212abf0958c8055723e1f","760e6d43e7a3e6f65434ce1cac9efdd36855229a"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["0d1d805d936a35e55a1d34bf88587e46f9e4f65d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}