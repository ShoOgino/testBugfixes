{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/search/LTRQParserPlugin#extractEFIParams(SolrParams).mjava","commits":[{"id":"eec520bd69db5e7976780e93a0dfc7c0f0e75c2e","date":1478891880,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/search/LTRQParserPlugin#extractEFIParams(SolrParams).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/search/LTRQParserPlugin#extractEFIParams(SolrParams).mjava","sourceNew":"  /**\n   * Given a set of local SolrParams, extract all of the efi.key=value params into a map\n   * @param localParams Local request parameters that might conatin efi params\n   * @return Map of efi params, where the key is the name of the efi param, and the\n   *  value is the value of the efi param\n   */\n  public static Map<String,String[]> extractEFIParams(SolrParams localParams) {\n    final Map<String,String[]> externalFeatureInfo = new HashMap<>();\n    for (final Iterator<String> it = localParams.getParameterNamesIterator(); it\n        .hasNext();) {\n      final String name = it.next();\n      if (name.startsWith(EXTERNAL_FEATURE_INFO)) {\n        externalFeatureInfo.put(\n            name.substring(EXTERNAL_FEATURE_INFO.length()),\n            new String[] {localParams.get(name)});\n      }\n    }\n    return externalFeatureInfo;\n  }\n\n","sourceOld":"  /**\n   * Given a set of local SolrParams, extract all of the efi.key=value params into a map\n   * @param localParams Local request parameters that might conatin efi params\n   * @return Map of efi params, where the key is the name of the efi param, and the\n   *  value is the value of the efi param\n   */\n  public static Map<String,String[]> extractEFIParams(SolrParams localParams) {\n    final Map<String,String[]> externalFeatureInfo = new HashMap<>();\n    for (final Iterator<String> it = localParams.getParameterNamesIterator(); it\n        .hasNext();) {\n      final String name = it.next();\n      if (name.startsWith(EXTERNAL_FEATURE_INFO)) {\n        externalFeatureInfo.put(\n            name.substring(EXTERNAL_FEATURE_INFO.length()),\n            new String[] {localParams.get(name)});\n      }\n    }\n    return externalFeatureInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2459db523605752a3affcf444fb717d625904488","date":1478970978,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/search/LTRQParserPlugin#extractEFIParams(SolrParams).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/search/LTRQParserPlugin#extractEFIParams(SolrParams).mjava","sourceNew":"  /**\n   * Given a set of local SolrParams, extract all of the efi.key=value params into a map\n   * @param localParams Local request parameters that might conatin efi params\n   * @return Map of efi params, where the key is the name of the efi param, and the\n   *  value is the value of the efi param\n   */\n  public static Map<String,String[]> extractEFIParams(SolrParams localParams) {\n    final Map<String,String[]> externalFeatureInfo = new HashMap<>();\n    for (final Iterator<String> it = localParams.getParameterNamesIterator(); it\n        .hasNext();) {\n      final String name = it.next();\n      if (name.startsWith(EXTERNAL_FEATURE_INFO)) {\n        externalFeatureInfo.put(\n            name.substring(EXTERNAL_FEATURE_INFO.length()),\n            new String[] {localParams.get(name)});\n      }\n    }\n    return externalFeatureInfo;\n  }\n\n","sourceOld":"  /**\n   * Given a set of local SolrParams, extract all of the efi.key=value params into a map\n   * @param localParams Local request parameters that might conatin efi params\n   * @return Map of efi params, where the key is the name of the efi param, and the\n   *  value is the value of the efi param\n   */\n  public static Map<String,String[]> extractEFIParams(SolrParams localParams) {\n    final Map<String,String[]> externalFeatureInfo = new HashMap<>();\n    for (final Iterator<String> it = localParams.getParameterNamesIterator(); it\n        .hasNext();) {\n      final String name = it.next();\n      if (name.startsWith(EXTERNAL_FEATURE_INFO)) {\n        externalFeatureInfo.put(\n            name.substring(EXTERNAL_FEATURE_INFO.length()),\n            new String[] {localParams.get(name)});\n      }\n    }\n    return externalFeatureInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eec520bd69db5e7976780e93a0dfc7c0f0e75c2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2459db523605752a3affcf444fb717d625904488":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eec520bd69db5e7976780e93a0dfc7c0f0e75c2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eec520bd69db5e7976780e93a0dfc7c0f0e75c2e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eec520bd69db5e7976780e93a0dfc7c0f0e75c2e","2459db523605752a3affcf444fb717d625904488"],"eec520bd69db5e7976780e93a0dfc7c0f0e75c2e":["2459db523605752a3affcf444fb717d625904488","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2459db523605752a3affcf444fb717d625904488":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2459db523605752a3affcf444fb717d625904488","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}