{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","commits":[{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String colString = (String) properties.get(\"collections\");\n    if (colString != null && !colString.isEmpty()) {\n      collections.addAll(StrUtils.splitSmart(colString, ','));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    String colString = args.get(\"collections\");\n    if (colString != null && !colString.isEmpty()) {\n      collections.addAll(StrUtils.splitSmart(colString, ','));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"034aa493deab2c07f8061b37af0a53470dd1e6f6","date":1590123987,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","sourceNew":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n\n    Object value = properties.get(\"collections\");\n    if (value instanceof String) {\n      String colString = (String) value;\n      if (!colString.isEmpty()) {\n        List<String> whiteListedCollections = StrUtils.splitSmart(colString, ',');\n        collectionsPredicate = whiteListedCollections::contains;\n      }\n    } else if (value instanceof Map) {\n      Map<String, String> matchConditions = (Map<String, String>) value;\n      collectionsPredicate = collectionName -> {\n        try {\n          DocCollection collection = cloudManager.getClusterStateProvider().getCollection(collectionName);\n          if (collection == null) {\n            log.debug(\"Collection: {} was not found while evaluating conditions\", collectionName);\n            return false;\n          }\n          for (Map.Entry<String, String> entry : matchConditions.entrySet()) {\n            if (!entry.getValue().equals(collection.get(entry.getKey()))) {\n              if (log.isDebugEnabled()) {\n                log.debug(\"Collection: {} does not match condition: {}:{}\", collectionName, entry.getKey(), entry.getValue());\n              }\n              return false;\n            }\n          }\n          return true;\n        } catch (IOException e) {\n          log.error(\"Exception fetching collection information for: {}\", collectionName, e);\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String colString = (String) properties.get(\"collections\");\n    if (colString != null && !colString.isEmpty()) {\n      collections.addAll(StrUtils.splitSmart(colString, ','));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","sourceNew":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n\n    Object value = properties.get(\"collections\");\n    if (value instanceof String) {\n      String colString = (String) value;\n      if (!colString.isEmpty()) {\n        List<String> whiteListedCollections = StrUtils.splitSmart(colString, ',');\n        collectionsPredicate = whiteListedCollections::contains;\n      }\n    } else if (value instanceof Map) {\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, String> matchConditions = (Map<String, String>) value;\n      collectionsPredicate = collectionName -> {\n        try {\n          DocCollection collection = cloudManager.getClusterStateProvider().getCollection(collectionName);\n          if (collection == null) {\n            log.debug(\"Collection: {} was not found while evaluating conditions\", collectionName);\n            return false;\n          }\n          for (Map.Entry<String, String> entry : matchConditions.entrySet()) {\n            if (!entry.getValue().equals(collection.get(entry.getKey()))) {\n              if (log.isDebugEnabled()) {\n                log.debug(\"Collection: {} does not match condition: {}:{}\", collectionName, entry.getKey(), entry.getValue());\n              }\n              return false;\n            }\n          }\n          return true;\n        } catch (IOException e) {\n          log.error(\"Exception fetching collection information for: {}\", collectionName, e);\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n\n    Object value = properties.get(\"collections\");\n    if (value instanceof String) {\n      String colString = (String) value;\n      if (!colString.isEmpty()) {\n        List<String> whiteListedCollections = StrUtils.splitSmart(colString, ',');\n        collectionsPredicate = whiteListedCollections::contains;\n      }\n    } else if (value instanceof Map) {\n      Map<String, String> matchConditions = (Map<String, String>) value;\n      collectionsPredicate = collectionName -> {\n        try {\n          DocCollection collection = cloudManager.getClusterStateProvider().getCollection(collectionName);\n          if (collection == null) {\n            log.debug(\"Collection: {} was not found while evaluating conditions\", collectionName);\n            return false;\n          }\n          for (Map.Entry<String, String> entry : matchConditions.entrySet()) {\n            if (!entry.getValue().equals(collection.get(entry.getKey()))) {\n              if (log.isDebugEnabled()) {\n                log.debug(\"Collection: {} does not match condition: {}:{}\", collectionName, entry.getKey(), entry.getValue());\n              }\n              return false;\n            }\n          }\n          return true;\n        } catch (IOException e) {\n          log.error(\"Exception fetching collection information for: {}\", collectionName, e);\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n\n    Object value = properties.get(\"collections\");\n    if (value instanceof String) {\n      String colString = (String) value;\n      if (!colString.isEmpty()) {\n        List<String> whiteListedCollections = StrUtils.splitSmart(colString, ',');\n        collectionsPredicate = whiteListedCollections::contains;\n      }\n    } else if (value instanceof Map) {\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, String> matchConditions = (Map<String, String>) value;\n      collectionsPredicate = collectionName -> {\n        try {\n          DocCollection collection = cloudManager.getClusterStateProvider().getCollection(collectionName);\n          if (collection == null) {\n            log.debug(\"Collection: {} was not found while evaluating conditions\", collectionName);\n            return false;\n          }\n          for (Map.Entry<String, String> entry : matchConditions.entrySet()) {\n            if (!entry.getValue().equals(collection.get(entry.getKey()))) {\n              if (log.isDebugEnabled()) {\n                log.debug(\"Collection: {} does not match condition: {}:{}\", collectionName, entry.getKey(), entry.getValue());\n              }\n              return false;\n            }\n          }\n          return true;\n        } catch (IOException e) {\n          log.error(\"Exception fetching collection information for: {}\", collectionName, e);\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}