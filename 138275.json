{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#skipBytes(long).mjava","commits":[{"id":"37b84753dc1f66eba4973779932885fe42cde001","date":1358812051,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#skipBytes(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#skipBytes(long).mjava","sourceNew":"  private void skipBytes(long count) throws IOException {\n    if (in instanceof IndexInput) {\n      final IndexInput iin = (IndexInput) in;\n      iin.seek(iin.getFilePointer() + count);\n    } else {\n      if (blocks == null) {\n        blocks = new byte[blockSize];\n      }\n      long skipped = 0;\n      while (skipped < count) {\n        final int toSkip = (int) Math.min(blocks.length, count - skipped);\n        in.readBytes(blocks, 0, toSkip);\n        skipped += toSkip;\n      }\n    }\n  }\n\n","sourceOld":"  private void skipBytes(long count) throws IOException {\n    if (in instanceof IndexInput) {\n      final IndexInput iin = (IndexInput) in;\n      iin.seek(iin.getFilePointer() + count);\n    } else {\n      if (blocks == null) {\n        blocks = new byte[blockSize];\n      }\n      long skipped = 0;\n      while (skipped < count) {\n        final int toSkip = (int) Math.min(blocks.length, count - skipped);\n        in.readBytes(blocks, 0, toSkip);\n        skipped += toSkip;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#skipBytes(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#skipBytes(long).mjava","sourceNew":"  private void skipBytes(long count) throws IOException {\n    if (in instanceof IndexInput) {\n      final IndexInput iin = (IndexInput) in;\n      iin.seek(iin.getFilePointer() + count);\n    } else {\n      if (blocks == null) {\n        blocks = new byte[blockSize];\n      }\n      long skipped = 0;\n      while (skipped < count) {\n        final int toSkip = (int) Math.min(blocks.length, count - skipped);\n        in.readBytes(blocks, 0, toSkip);\n        skipped += toSkip;\n      }\n    }\n  }\n\n","sourceOld":"  private void skipBytes(long count) throws IOException {\n    if (in instanceof IndexInput) {\n      final IndexInput iin = (IndexInput) in;\n      iin.seek(iin.getFilePointer() + count);\n    } else {\n      if (blocks == null) {\n        blocks = new byte[blockSize];\n      }\n      long skipped = 0;\n      while (skipped < count) {\n        final int toSkip = (int) Math.min(blocks.length, count - skipped);\n        in.readBytes(blocks, 0, toSkip);\n        skipped += toSkip;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","37b84753dc1f66eba4973779932885fe42cde001"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37b84753dc1f66eba4973779932885fe42cde001":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","37b84753dc1f66eba4973779932885fe42cde001"],"37b84753dc1f66eba4973779932885fe42cde001":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}