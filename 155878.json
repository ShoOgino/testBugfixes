{"path":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean).mjava","commits":[{"id":"5a664b1395d4341b88e32d36297d7670f1a665ac","date":1166527887,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir)\n    throws IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      // Create a deleter to keep track of which files can\n      // be deleted:\n      deleter = new IndexFileDeleter(segmentInfos, directory);\n      deleter.setInfoStream(infoStream);\n      deleter.findDeletableFiles();\n      deleter.deleteFiles();\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir)\n    throws IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.getLockFactory().clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      // Create a deleter to keep track of which files can\n      // be deleted:\n      deleter = new IndexFileDeleter(segmentInfos, directory);\n      deleter.setInfoStream(infoStream);\n      deleter.findDeletableFiles();\n      deleter.deleteFiles();\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir)\n    throws IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      // Create a deleter to keep track of which files can\n      // be deleted:\n      deleter = new IndexFileDeleter(segmentInfos, directory);\n      deleter.setInfoStream(infoStream);\n      deleter.findDeletableFiles();\n      deleter.deleteFiles();\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2d1f30eccf6aa8c1df1aecd08f960f17af2ece8d","date":1169573591,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir)\n    throws IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      // Create a deleter to keep track of which files can\n      // be deleted:\n      deleter = new IndexFileDeleter(segmentInfos, directory);\n      deleter.setInfoStream(infoStream);\n      deleter.findDeletableFiles();\n      deleter.deleteFiles();\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir)\n    throws IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.getLockFactory().clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      // Create a deleter to keep track of which files can\n      // be deleted:\n      deleter = new IndexFileDeleter(segmentInfos, directory);\n      deleter.setInfoStream(infoStream);\n      deleter.findDeletableFiles();\n      deleter.deleteFiles();\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      // Create a deleter to keep track of which files can\n      // be deleted:\n      deleter = new IndexFileDeleter(segmentInfos, directory);\n      deleter.setInfoStream(infoStream);\n      deleter.findDeletableFiles();\n      deleter.deleteFiles();\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir)\n    throws IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new IOException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      // Create a deleter to keep track of which files can\n      // be deleted:\n      deleter = new IndexFileDeleter(segmentInfos, directory);\n      deleter.setInfoStream(infoStream);\n      deleter.findDeletableFiles();\n      deleter.deleteFiles();\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    this.infoStream = defaultInfoStream;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      this.autoCommit = autoCommit;\n      if (!autoCommit) {\n        rollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n      }\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream);\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      // Create a deleter to keep track of which files can\n      // be deleted:\n      deleter = new IndexFileDeleter(segmentInfos, directory);\n      deleter.setInfoStream(infoStream);\n      deleter.findDeletableFiles();\n      deleter.deleteFiles();\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66b12ba4967665216eeb706b58d424c51fb3641a":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"1b54a9bc667895a2095a886184bf69a3179e63df":["2d1f30eccf6aa8c1df1aecd08f960f17af2ece8d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d1f30eccf6aa8c1df1aecd08f960f17af2ece8d":["66b12ba4967665216eeb706b58d424c51fb3641a"],"8b6187898fc4413ccd18229711786550a280383c":["1b54a9bc667895a2095a886184bf69a3179e63df"],"5a664b1395d4341b88e32d36297d7670f1a665ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b6187898fc4413ccd18229711786550a280383c"]},"commit2Childs":{"66b12ba4967665216eeb706b58d424c51fb3641a":["2d1f30eccf6aa8c1df1aecd08f960f17af2ece8d"],"1b54a9bc667895a2095a886184bf69a3179e63df":["8b6187898fc4413ccd18229711786550a280383c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"2d1f30eccf6aa8c1df1aecd08f960f17af2ece8d":["1b54a9bc667895a2095a886184bf69a3179e63df"],"5a664b1395d4341b88e32d36297d7670f1a665ac":["66b12ba4967665216eeb706b58d424c51fb3641a"],"8b6187898fc4413ccd18229711786550a280383c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}