{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],int,int,int,int).mjava","commits":[{"id":"c215736a9e29403edd2132d9f0829a287b428df4","date":1354641965,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],int,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],int,int,int).mjava","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      int i, int numShards, int numReplica, int maxShardsPerNode) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplica);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    String collectionName = \"awholynewcollection_\" + i;\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplica);\n    list.add(maxShardsPerNode);\n    collectionInfos.put(collectionName, list);\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n  }\n\n","sourceOld":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      int i, int numShards, int numReplicas) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(\"numShards\", numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    String collectionName = \"awholynewcollection_\" + i;\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    collectionInfos.put(collectionName, list);\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      int i, int numShards, int numReplica, int maxShardsPerNode) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplica);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    String collectionName = \"awholynewcollection_\" + i;\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplica);\n    list.add(maxShardsPerNode);\n    collectionInfos.put(collectionName, list);\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d334938e866757266d62025305edd378ac505a06","date":1355368871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],int,int,int,int).mjava","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    list.add(maxShardsPerNode);\n    collectionInfos.put(collectionName, list);\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n  }\n\n","sourceOld":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      int i, int numShards, int numReplica, int maxShardsPerNode) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplica);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    String collectionName = \"awholynewcollection_\" + i;\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplica);\n    list.add(maxShardsPerNode);\n    collectionInfos.put(collectionName, list);\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n  }\n\n","bugFix":null,"bugIntro":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],int,int,int,int).mjava","sourceNew":null,"sourceOld":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      int i, int numShards, int numReplica, int maxShardsPerNode) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplica);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    String collectionName = \"awholynewcollection_\" + i;\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplica);\n    list.add(maxShardsPerNode);\n    collectionInfos.put(collectionName, list);\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n        0,\n        ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n            - DEFAULT_COLLECTION.length() - 1);\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","d334938e866757266d62025305edd378ac505a06"],"d334938e866757266d62025305edd378ac505a06":["c215736a9e29403edd2132d9f0829a287b428df4"],"c215736a9e29403edd2132d9f0829a287b428df4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c215736a9e29403edd2132d9f0829a287b428df4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d334938e866757266d62025305edd378ac505a06"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d334938e866757266d62025305edd378ac505a06":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c215736a9e29403edd2132d9f0829a287b428df4":["d334938e866757266d62025305edd378ac505a06","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c215736a9e29403edd2132d9f0829a287b428df4","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}