{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,boolean,Bits).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,boolean,Bits).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public BulkScorer bulkScorer(LeafReaderContext context, boolean scoreDocsInOrder,\n                                 Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<BulkScorer> prohibited = new ArrayList<BulkScorer>();\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbd0c3bb84a0d7674a684216c9dcbd9296e899dd","date":1421103556,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,boolean,Bits).mjava","sourceNew":"    @Override\n    public BulkScorer bulkScorer(LeafReaderContext context, boolean scoreDocsInOrder,\n                                 Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<BulkScorer> prohibited = new ArrayList<BulkScorer>();\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n        } else if (c.isProhibited()) {\n          // TODO: there are some cases where BooleanScorer could do this faster\n          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n    }\n\n","sourceOld":"    @Override\n    public BulkScorer bulkScorer(LeafReaderContext context, boolean scoreDocsInOrder,\n                                 Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<BulkScorer> prohibited = new ArrayList<BulkScorer>();\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,boolean,Bits).mjava","sourceNew":"    @Override\n    public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n      if (minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, acceptDocs);\n      }\n\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.bulkScorer(context, acceptDocs);\n        } else if (c.isProhibited()) {\n          // TODO: there are some cases where BooleanScorer could do this faster\n          return super.bulkScorer(context, acceptDocs);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      if (optional.size() == 0) {\n        return null;\n      }\n\n      return new BooleanScorer(this, disableCoord, maxCoord, optional);\n    }\n\n","sourceOld":"    @Override\n    public BulkScorer bulkScorer(LeafReaderContext context, boolean scoreDocsInOrder,\n                                 Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<BulkScorer> prohibited = new ArrayList<BulkScorer>();\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n        } else if (c.isProhibited()) {\n          // TODO: there are some cases where BooleanScorer could do this faster\n          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["cbd0c3bb84a0d7674a684216c9dcbd9296e899dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cbd0c3bb84a0d7674a684216c9dcbd9296e899dd":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"]},"commit2Childs":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cbd0c3bb84a0d7674a684216c9dcbd9296e899dd":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cbd0c3bb84a0d7674a684216c9dcbd9296e899dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}