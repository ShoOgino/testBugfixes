{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArrayMap#testModifyOnUnmodifiable().mjava","commits":[{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArrayMap#testModifyOnUnmodifiable().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","sourceNew":"  // TODO: break this up into simpler test methods vs. \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","sourceOld":"  // TODO: break this up into simpler test methods vs. \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArrayMap#testModifyOnUnmodifiable().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","sourceNew":"  // TODO: break this up into simpler test methods vs. \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","sourceOld":"  // TODO: break this up into simpler test methods vs. \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd8a7e622c1138188be79e193b1dc52f3f0889a5","date":1564419078,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArrayMap#testModifyOnUnmodifiable().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArrayMap#testModifyOnUnmodifiable().mjava","sourceNew":"  // TODO: break this up into simpler test methods vs. \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));\n    assertEquals(1, map.get(\"foo\").intValue());\n    assertTrue(map.containsKey(\"bar\"));\n    assertEquals(2, map.get(\"bar\").intValue());\n\n    CharArrayMap<Integer> unmodifiableMap = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, unmodifiableMap.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", unmodifiableMap.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", unmodifiableMap.get(NOT_IN_MAP));\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableMap.put(NOT_IN_MAP.toCharArray(), 3));\n    assertFalse(\"Test String has been added to unmodifiable map\", unmodifiableMap.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String has been added to unmodifiable map\", unmodifiableMap.get(NOT_IN_MAP));\n    assertEquals(\"Size of unmodifiable map has changed\", size, unmodifiableMap.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableMap.put(NOT_IN_MAP, 3));\n    assertFalse(\"Test String has been added to unmodifiable map\", unmodifiableMap.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String has been added to unmodifiable map\", unmodifiableMap.get(NOT_IN_MAP));\n    assertEquals(\"Size of unmodifiable map has changed\", size, unmodifiableMap.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableMap.put(new StringBuilder(NOT_IN_MAP), 3));\n    assertFalse(\"Test String has been added to unmodifiable map\", unmodifiableMap.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String has been added to unmodifiable map\", unmodifiableMap.get(NOT_IN_MAP));\n    assertEquals(\"Size of unmodifiable map has changed\", size, unmodifiableMap.size());\n\n    expectThrows(UnsupportedOperationException.class,  unmodifiableMap::clear);\n    assertEquals(\"Size of unmodifiable map has changed\", size, unmodifiableMap.size());\n\n    expectThrows(UnsupportedOperationException.class,  () -> unmodifiableMap.entrySet().clear());\n    assertEquals(\"Size of unmodifiable map has changed\", size, unmodifiableMap.size());\n\n    expectThrows(UnsupportedOperationException.class,  () -> unmodifiableMap.keySet().clear());\n    assertEquals(\"Size of unmodifiable map has changed\", size, unmodifiableMap.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableMap.put((Object) NOT_IN_MAP, 3));\n    assertFalse(\"Test String has been added to unmodifiable map\", unmodifiableMap.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String has been added to unmodifiable map\", unmodifiableMap.get(NOT_IN_MAP));\n    assertEquals(\"Size of unmodifiable map has changed\", size, unmodifiableMap.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableMap.putAll(Collections.singletonMap(NOT_IN_MAP, 3)));\n    assertFalse(\"Test String has been added to unmodifiable map\", unmodifiableMap.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String has been added to unmodifiable map\", unmodifiableMap.get(NOT_IN_MAP));\n    assertEquals(\"Size of unmodifiable map has changed\", size, unmodifiableMap.size());\n\n    assertTrue(unmodifiableMap.containsKey(\"foo\"));\n    assertEquals(1, unmodifiableMap.get(\"foo\").intValue());\n    assertTrue(unmodifiableMap.containsKey(\"bar\"));\n    assertEquals(2, unmodifiableMap.get(\"bar\").intValue());\n  }\n\n","sourceOld":"  // TODO: break this up into simpler test methods vs. \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArrayMap#testModifyOnUnmodifiable().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArrayMap#testModifyOnUnmodifiable().mjava","sourceNew":"  // TODO: break this up into simpler test methods vs. \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));\n    assertEquals(1, map.get(\"foo\").intValue());\n    assertTrue(map.containsKey(\"bar\"));\n    assertEquals(2, map.get(\"bar\").intValue());\n\n    CharArrayMap<Integer> unmodifiableMap = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, unmodifiableMap.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", unmodifiableMap.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", unmodifiableMap.get(NOT_IN_MAP));\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableMap.put(NOT_IN_MAP.toCharArray(), 3));\n    assertFalse(\"Test String has been added to unmodifiable map\", unmodifiableMap.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String has been added to unmodifiable map\", unmodifiableMap.get(NOT_IN_MAP));\n    assertEquals(\"Size of unmodifiable map has changed\", size, unmodifiableMap.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableMap.put(NOT_IN_MAP, 3));\n    assertFalse(\"Test String has been added to unmodifiable map\", unmodifiableMap.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String has been added to unmodifiable map\", unmodifiableMap.get(NOT_IN_MAP));\n    assertEquals(\"Size of unmodifiable map has changed\", size, unmodifiableMap.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableMap.put(new StringBuilder(NOT_IN_MAP), 3));\n    assertFalse(\"Test String has been added to unmodifiable map\", unmodifiableMap.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String has been added to unmodifiable map\", unmodifiableMap.get(NOT_IN_MAP));\n    assertEquals(\"Size of unmodifiable map has changed\", size, unmodifiableMap.size());\n\n    expectThrows(UnsupportedOperationException.class,  unmodifiableMap::clear);\n    assertEquals(\"Size of unmodifiable map has changed\", size, unmodifiableMap.size());\n\n    expectThrows(UnsupportedOperationException.class,  () -> unmodifiableMap.entrySet().clear());\n    assertEquals(\"Size of unmodifiable map has changed\", size, unmodifiableMap.size());\n\n    expectThrows(UnsupportedOperationException.class,  () -> unmodifiableMap.keySet().clear());\n    assertEquals(\"Size of unmodifiable map has changed\", size, unmodifiableMap.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableMap.put((Object) NOT_IN_MAP, 3));\n    assertFalse(\"Test String has been added to unmodifiable map\", unmodifiableMap.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String has been added to unmodifiable map\", unmodifiableMap.get(NOT_IN_MAP));\n    assertEquals(\"Size of unmodifiable map has changed\", size, unmodifiableMap.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableMap.putAll(Collections.singletonMap(NOT_IN_MAP, 3)));\n    assertFalse(\"Test String has been added to unmodifiable map\", unmodifiableMap.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String has been added to unmodifiable map\", unmodifiableMap.get(NOT_IN_MAP));\n    assertEquals(\"Size of unmodifiable map has changed\", size, unmodifiableMap.size());\n\n    assertTrue(unmodifiableMap.containsKey(\"foo\"));\n    assertEquals(1, unmodifiableMap.get(\"foo\").intValue());\n    assertTrue(unmodifiableMap.containsKey(\"bar\"));\n    assertEquals(2, unmodifiableMap.get(\"bar\").intValue());\n  }\n\n","sourceOld":"  // TODO: break this up into simpler test methods vs. \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<>(2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","cd8a7e622c1138188be79e193b1dc52f3f0889a5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd8a7e622c1138188be79e193b1dc52f3f0889a5"]},"commit2Childs":{"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["cd8a7e622c1138188be79e193b1dc52f3f0889a5","f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}