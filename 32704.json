{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermEnum#scanTo(Term).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermEnum#scanTo(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermEnum#scanTo(Term).mjava","sourceNew":"  /* Optimized scan, without allocating new terms. \n   *  Return number of invocations to next().\n   *\n   * NOTE: LUCENE-3183: if you pass Term(\"\", \"\") here then this\n   * will incorrectly return before positioning the enum,\n   * and position will be -1; caller must detect this. */\n  final int scanTo(Term term) throws IOException {\n    scanBuffer.set(term);\n    int count = 0;\n    if (first) {\n      // Always force initial next() in case term is\n      // Term(\"\", \"\")\n      next();\n      first = false;\n      count++;\n    }\n    while (scanBuffer.compareTo(termBuffer) > 0 && next()) {\n      count++;\n    }\n    return count;\n  }\n\n","sourceOld":"  /* Optimized scan, without allocating new terms. \n   *  Return number of invocations to next().\n   *\n   * NOTE: LUCENE-3183: if you pass Term(\"\", \"\") here then this\n   * will incorrectly return before positioning the enum,\n   * and position will be -1; caller must detect this. */\n  final int scanTo(Term term) throws IOException {\n    scanBuffer.set(term);\n    int count = 0;\n    if (first) {\n      // Always force initial next() in case term is\n      // Term(\"\", \"\")\n      next();\n      first = false;\n      count++;\n    }\n    while (scanBuffer.compareTo(termBuffer) > 0 && next()) {\n      count++;\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermEnum#scanTo(Term).mjava","sourceNew":null,"sourceOld":"  /* Optimized scan, without allocating new terms. \n   *  Return number of invocations to next().\n   *\n   * NOTE: LUCENE-3183: if you pass Term(\"\", \"\") here then this\n   * will incorrectly return before positioning the enum,\n   * and position will be -1; caller must detect this. */\n  final int scanTo(Term term) throws IOException {\n    scanBuffer.set(term);\n    int count = 0;\n    if (first) {\n      // Always force initial next() in case term is\n      // Term(\"\", \"\")\n      next();\n      first = false;\n      count++;\n    }\n    while (scanBuffer.compareTo(termBuffer) > 0 && next()) {\n      count++;\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}