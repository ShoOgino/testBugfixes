{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","commits":[{"id":"83bbb041887bbef07b8a98d08a0e1713ce137039","date":1200330381,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      boolean diskFull = false;\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      boolean diskFull = false;\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      boolean diskFull = false;\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      boolean diskFull = false;\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestImmediateDiskFullWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void xxxtestImmediateDiskFullWithThreads() throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void xxxtestImmediateDiskFullWithThreads() throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws IOException {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n        else\n          assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"328c74166a16d3b3ee2f271f4524d49bbc2d46f1","date":1260612389,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      try {\n        writer.close(false);\n      } catch (IOException ioe) {\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["e82780afe6097066eb5befb86e9432f077667e3d"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["09c482d1e63332617181729a225b215c452d8a79"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"328c74166a16d3b3ee2f271f4524d49bbc2d46f1":["87c966e9308847938a7c905c2e46a56d8df788b8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["328c74166a16d3b3ee2f271f4524d49bbc2d46f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"87c966e9308847938a7c905c2e46a56d8df788b8":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["87c966e9308847938a7c905c2e46a56d8df788b8"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["e82780afe6097066eb5befb86e9432f077667e3d"],"328c74166a16d3b3ee2f271f4524d49bbc2d46f1":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"e82780afe6097066eb5befb86e9432f077667e3d":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"87c966e9308847938a7c905c2e46a56d8df788b8":["328c74166a16d3b3ee2f271f4524d49bbc2d46f1"],"09c482d1e63332617181729a225b215c452d8a79":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}