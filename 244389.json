{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#assertTopicSubject(TupleStream,String...).mjava","commits":[{"id":"bcbcca681ad951d22b9bb07a88683ce966986ae7","date":1468722990,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#assertTopicSubject(TupleStream,String...).mjava","pathOld":"/dev/null","sourceNew":"  private void assertTopicSubject(TupleStream stream, String... textArray) throws Exception {\n    long version = -1;\n    int count = 0;\n    List<String> texts = new ArrayList();\n    for(String text : textArray) {\n      texts.add(text);\n    }\n\n    try {\n      stream.open();\n      while (true) {\n        Tuple tuple = stream.read();\n        if (tuple.EOF) {\n          break;\n        } else {\n          ++count;\n          String subject = tuple.getString(\"subject\");\n          if (!texts.contains(subject)) {\n            throw new Exception(\"Expecting subject in topic run not found:\" + subject);\n          }\n        }\n      }\n    } finally {\n      stream.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#assertTopicSubject(TupleStream,String...).mjava","pathOld":"/dev/null","sourceNew":"  private void assertTopicSubject(TupleStream stream, String... textArray) throws Exception {\n    long version = -1;\n    int count = 0;\n    List<String> texts = new ArrayList();\n    for(String text : textArray) {\n      texts.add(text);\n    }\n\n    try {\n      stream.open();\n      while (true) {\n        Tuple tuple = stream.read();\n        if (tuple.EOF) {\n          break;\n        } else {\n          ++count;\n          String subject = tuple.getString(\"subject\");\n          if (!texts.contains(subject)) {\n            throw new Exception(\"Expecting subject in topic run not found:\" + subject);\n          }\n        }\n      }\n    } finally {\n      stream.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#assertTopicSubject(TupleStream,String...).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#assertTopicSubject(TupleStream,String...).mjava","sourceNew":"  private void assertTopicSubject(TupleStream stream, String... textArray) throws Exception {\n    long version = -1;\n    int count = 0;\n    List<String> texts = new ArrayList<>();\n    for(String text : textArray) {\n      texts.add(text);\n    }\n\n    try {\n      stream.open();\n      while (true) {\n        Tuple tuple = stream.read();\n        if (tuple.EOF) {\n          break;\n        } else {\n          ++count;\n          String subject = tuple.getString(\"subject\");\n          if (!texts.contains(subject)) {\n            throw new Exception(\"Expecting subject in topic run not found:\" + subject);\n          }\n        }\n      }\n    } finally {\n      stream.close();\n    }\n  }\n\n","sourceOld":"  private void assertTopicSubject(TupleStream stream, String... textArray) throws Exception {\n    long version = -1;\n    int count = 0;\n    List<String> texts = new ArrayList();\n    for(String text : textArray) {\n      texts.add(text);\n    }\n\n    try {\n      stream.open();\n      while (true) {\n        Tuple tuple = stream.read();\n        if (tuple.EOF) {\n          break;\n        } else {\n          ++count;\n          String subject = tuple.getString(\"subject\");\n          if (!texts.contains(subject)) {\n            throw new Exception(\"Expecting subject in topic run not found:\" + subject);\n          }\n        }\n      }\n    } finally {\n      stream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["bcbcca681ad951d22b9bb07a88683ce966986ae7"],"bcbcca681ad951d22b9bb07a88683ce966986ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bcbcca681ad951d22b9bb07a88683ce966986ae7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bcbcca681ad951d22b9bb07a88683ce966986ae7":["9ba1b632c041956c93c41aa1143d16a567014891","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bcbcca681ad951d22b9bb07a88683ce966986ae7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}