{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointsFormat#testRandomDocCount().mjava","commits":[{"id":"3c09c5c6cd995294d83f12c1bdf8d47d8e749f49","date":1570176835,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointsFormat#testRandomDocCount().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomDocCount() {\n    for (int i = 0; i < 100; i++) {\n      long size = TestUtil.nextLong(random(), 1, Long.MAX_VALUE);\n      int maxDoc = (size > Integer.MAX_VALUE) ? Integer.MAX_VALUE : Math.toIntExact(size);\n      int docCount = TestUtil.nextInt(random(), 1, maxDoc);\n      long estimatedPointCount = TestUtil.nextLong(random(), 0, size);\n      PointValues values = getPointValues(size, docCount, estimatedPointCount);\n      long docs = values.estimateDocCount(null);\n      assertTrue(docs <= estimatedPointCount);\n      assertTrue(docs <= maxDoc);\n      assertTrue(docs >= estimatedPointCount / (size/docCount));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointsFormat#testRandomDocCount().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomDocCount() {\n    for (int i = 0; i < 100; i++) {\n      long size = TestUtil.nextLong(random(), 1, Long.MAX_VALUE);\n      int maxDoc = (size > Integer.MAX_VALUE) ? Integer.MAX_VALUE : Math.toIntExact(size);\n      int docCount = TestUtil.nextInt(random(), 1, maxDoc);\n      long estimatedPointCount = TestUtil.nextLong(random(), 0, size);\n      PointValues values = getPointValues(size, docCount, estimatedPointCount);\n      long docs = values.estimateDocCount(null);\n      assertTrue(docs <= estimatedPointCount);\n      assertTrue(docs <= maxDoc);\n      assertTrue(docs >= estimatedPointCount / (size/docCount));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78e689a3b60e84c75dc6dd7b181a71fc19ef8482","date":1591689554,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointsFormat#testRandomDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointsFormat#testRandomDocCount().mjava","sourceNew":"  public void testRandomDocCount() {\n    for (int i = 0; i < 100; i++) {\n      long size = TestUtil.nextLong(random(), 1, Long.MAX_VALUE);\n      int maxDoc = (size > Integer.MAX_VALUE) ? Integer.MAX_VALUE : Math.toIntExact(size);\n      int docCount = TestUtil.nextInt(random(), 1, maxDoc);\n      long estimatedPointCount = TestUtil.nextLong(random(), 0, size);\n      PointValues values = getPointValues(size, docCount, estimatedPointCount);\n      long docs = values.estimateDocCount(null);\n      assertTrue(docs <= estimatedPointCount);\n      assertTrue(docs <= maxDoc);\n      assertTrue(docs >= estimatedPointCount / (size/docCount));\n    }\n  }\n\n","sourceOld":"  public void testRandomDocCount() {\n    for (int i = 0; i < 100; i++) {\n      long size = TestUtil.nextLong(random(), 1, Long.MAX_VALUE);\n      int maxDoc = (size > Integer.MAX_VALUE) ? Integer.MAX_VALUE : Math.toIntExact(size);\n      int docCount = TestUtil.nextInt(random(), 1, maxDoc);\n      long estimatedPointCount = TestUtil.nextLong(random(), 0, size);\n      PointValues values = getPointValues(size, docCount, estimatedPointCount);\n      long docs = values.estimateDocCount(null);\n      assertTrue(docs <= estimatedPointCount);\n      assertTrue(docs <= maxDoc);\n      assertTrue(docs >= estimatedPointCount / (size/docCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78e689a3b60e84c75dc6dd7b181a71fc19ef8482","date":1591689554,"type":6,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene86/TestLucene86PointsFormat#testRandomDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointsFormat#testRandomDocCount().mjava","sourceNew":"  public void testRandomDocCount() {\n    for (int i = 0; i < 100; i++) {\n      long size = TestUtil.nextLong(random(), 1, Long.MAX_VALUE);\n      int maxDoc = (size > Integer.MAX_VALUE) ? Integer.MAX_VALUE : Math.toIntExact(size);\n      int docCount = TestUtil.nextInt(random(), 1, maxDoc);\n      long estimatedPointCount = TestUtil.nextLong(random(), 0, size);\n      PointValues values = getPointValues(size, docCount, estimatedPointCount);\n      long docs = values.estimateDocCount(null);\n      assertTrue(docs <= estimatedPointCount);\n      assertTrue(docs <= maxDoc);\n      assertTrue(docs >= estimatedPointCount / (size/docCount));\n    }\n  }\n\n","sourceOld":"  public void testRandomDocCount() {\n    for (int i = 0; i < 100; i++) {\n      long size = TestUtil.nextLong(random(), 1, Long.MAX_VALUE);\n      int maxDoc = (size > Integer.MAX_VALUE) ? Integer.MAX_VALUE : Math.toIntExact(size);\n      int docCount = TestUtil.nextInt(random(), 1, maxDoc);\n      long estimatedPointCount = TestUtil.nextLong(random(), 0, size);\n      PointValues values = getPointValues(size, docCount, estimatedPointCount);\n      long docs = values.estimateDocCount(null);\n      assertTrue(docs <= estimatedPointCount);\n      assertTrue(docs <= maxDoc);\n      assertTrue(docs >= estimatedPointCount / (size/docCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["3c09c5c6cd995294d83f12c1bdf8d47d8e749f49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"3c09c5c6cd995294d83f12c1bdf8d47d8e749f49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3c09c5c6cd995294d83f12c1bdf8d47d8e749f49"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c09c5c6cd995294d83f12c1bdf8d47d8e749f49","b0b597c65628ca9e73913a07e81691f8229bae35"],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3c09c5c6cd995294d83f12c1bdf8d47d8e749f49":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}