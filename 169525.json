{"path":"src/java/org/apache/solr/core/SolrConfig.PluginInfo#PluginInfo(Node,String,boolean).mjava","commits":[{"id":"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb","date":1244526657,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig.PluginInfo#PluginInfo(Node,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public PluginInfo(Node node, String err, boolean requireName) {\n      name = DOMUtil.getAttr(node, \"name\", requireName ? err : null);\n      className = DOMUtil.getAttr(node, \"class\", err );\n      isDefault = Boolean.parseBoolean(DOMUtil.getAttr(node, \"default\", null));\n      startup = DOMUtil.getAttr(node, \"startup\",null);\n      initArgs = DOMUtil.childNodesToNamedList(node);\n      Map<String ,String> m = new HashMap<String, String>();\n      NamedNodeMap nnm = node.getAttributes();\n      for (int i = 0; i < nnm.getLength(); i++) {\n        String name= nnm.item(i).getNodeName();\n        if(knownAttrs.contains(name)) continue;\n        m.put(name, nnm.item(i).getNodeValue());\n      }\n      otherAttributes = m.isEmpty() ?\n              Collections.<String ,String >emptyMap():\n              Collections.unmodifiableMap(m);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d10311dc892eac490ca97851d5764dfe32d86759","date":1251102986,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/core/SolrConfig.PluginInfo#PluginInfo(Node,String,boolean).mjava","sourceNew":null,"sourceOld":"    public PluginInfo(Node node, String err, boolean requireName) {\n      name = DOMUtil.getAttr(node, \"name\", requireName ? err : null);\n      className = DOMUtil.getAttr(node, \"class\", err );\n      isDefault = Boolean.parseBoolean(DOMUtil.getAttr(node, \"default\", null));\n      startup = DOMUtil.getAttr(node, \"startup\",null);\n      initArgs = DOMUtil.childNodesToNamedList(node);\n      Map<String ,String> m = new HashMap<String, String>();\n      NamedNodeMap nnm = node.getAttributes();\n      for (int i = 0; i < nnm.getLength(); i++) {\n        String name= nnm.item(i).getNodeName();\n        if(knownAttrs.contains(name)) continue;\n        m.put(name, nnm.item(i).getNodeValue());\n      }\n      otherAttributes = m.isEmpty() ?\n              Collections.<String ,String >emptyMap():\n              Collections.unmodifiableMap(m);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d10311dc892eac490ca97851d5764dfe32d86759":["a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb":["d10311dc892eac490ca97851d5764dfe32d86759"],"d10311dc892eac490ca97851d5764dfe32d86759":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d10311dc892eac490ca97851d5764dfe32d86759","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}