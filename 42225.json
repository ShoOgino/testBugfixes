{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","commits":[{"id":"d3102a9c9032617766c43974e7ec8b7a3148fb91","date":1519273763,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c252a8291191876badb5f6235f62895d6e36b33e","date":1519309955,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dec9417ffbde1f9d7317d78c151248cb8f6af88","date":1520019381,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e16ac84f9e5d560008fe1554462ff8b853b3d3c","date":1520142134,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e85888836e267b030da776be55b653ba5dfff37f","date":1520423556,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c9595c75582a7ea7efb585014102ed83f2d9c8b","date":1523581112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b87d1f8719d7f05be003f3477450b74af13706a","date":1523590376,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e","date":1529622176,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n//2018-06-18 (commented)   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n//2018-06-18 (commented)   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n//2018-06-18 (commented)   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3","date":1532119025,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n//2018-06-18 (commented)   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","sourceOld":"  @Test\n//2018-06-18 (commented)   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"648627dd57e08f78d7b6e3b59b1f43530995a69a","date":1535068798,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n//2018-06-18 (commented)   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n//commented 23-AUG-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","sourceOld":"  @Test\n//2018-06-18 (commented)   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n//2018-06-18 (commented)   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n//commented 23-AUG-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","sourceOld":"  @Test\n//2018-06-18 (commented)   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n//commented 23-AUG-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  // this does not appear to be a good way to test this\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","sourceOld":"  @Test\n//2018-06-18 (commented)   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n//commented 23-AUG-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","bugFix":["4cba13865da71de3b9b0937fcbc66d726089356d","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e","648627dd57e08f78d7b6e3b59b1f43530995a69a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testTrigger().mjava","sourceNew":null,"sourceOld":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  // this does not appear to be a good way to test this\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n\n    Map<String, Object> properties = createTriggerProperties(new Date().toInstant().toString(), TimeZone.getDefault().getID());\n\n    scheduledTriggerTest(container, properties);\n\n    TimeZone timeZone = TimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\") //brackets mean optional\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    properties = createTriggerProperties(dateTimeFormatter.format(Instant.now()), timeZone.getID());\n    scheduledTriggerTest(container, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e16ac84f9e5d560008fe1554462ff8b853b3d3c":["1dec9417ffbde1f9d7317d78c151248cb8f6af88"],"3f504512a03d978990cbff30db0522b354e846db":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["4cba13865da71de3b9b0937fcbc66d726089356d"],"3c9595c75582a7ea7efb585014102ed83f2d9c8b":["e85888836e267b030da776be55b653ba5dfff37f"],"1dec9417ffbde1f9d7317d78c151248cb8f6af88":["c252a8291191876badb5f6235f62895d6e36b33e"],"648627dd57e08f78d7b6e3b59b1f43530995a69a":["15600ceffc7023bfa1f532afbf1854e7f8c4e6d3"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["6b87d1f8719d7f05be003f3477450b74af13706a","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"c252a8291191876badb5f6235f62895d6e36b33e":["d3102a9c9032617766c43974e7ec8b7a3148fb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6b87d1f8719d7f05be003f3477450b74af13706a":["e85888836e267b030da776be55b653ba5dfff37f","3c9595c75582a7ea7efb585014102ed83f2d9c8b"],"4cba13865da71de3b9b0937fcbc66d726089356d":["648627dd57e08f78d7b6e3b59b1f43530995a69a"],"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3":["7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e":["6b87d1f8719d7f05be003f3477450b74af13706a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"e85888836e267b030da776be55b653ba5dfff37f":["7e16ac84f9e5d560008fe1554462ff8b853b3d3c"],"d3102a9c9032617766c43974e7ec8b7a3148fb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["6b87d1f8719d7f05be003f3477450b74af13706a","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"]},"commit2Childs":{"7e16ac84f9e5d560008fe1554462ff8b853b3d3c":["e85888836e267b030da776be55b653ba5dfff37f"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["3f504512a03d978990cbff30db0522b354e846db"],"3c9595c75582a7ea7efb585014102ed83f2d9c8b":["6b87d1f8719d7f05be003f3477450b74af13706a"],"1dec9417ffbde1f9d7317d78c151248cb8f6af88":["7e16ac84f9e5d560008fe1554462ff8b853b3d3c"],"648627dd57e08f78d7b6e3b59b1f43530995a69a":["4cba13865da71de3b9b0937fcbc66d726089356d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c252a8291191876badb5f6235f62895d6e36b33e":["1dec9417ffbde1f9d7317d78c151248cb8f6af88"],"6b87d1f8719d7f05be003f3477450b74af13706a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3102a9c9032617766c43974e7ec8b7a3148fb91"],"4cba13865da71de3b9b0937fcbc66d726089356d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3":["648627dd57e08f78d7b6e3b59b1f43530995a69a"],"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","15600ceffc7023bfa1f532afbf1854e7f8c4e6d3","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"e85888836e267b030da776be55b653ba5dfff37f":["3c9595c75582a7ea7efb585014102ed83f2d9c8b","6b87d1f8719d7f05be003f3477450b74af13706a"],"d3102a9c9032617766c43974e7ec8b7a3148fb91":["c252a8291191876badb5f6235f62895d6e36b33e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}