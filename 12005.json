{"path":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(reader, term.field());\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = new String(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      initializeMaxDistances();\n      this.d = initDistanceArray();\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","sourceNew":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(reader, term.field());\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      initializeMaxDistances();\n      this.d = initDistanceArray();\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(reader, term.field());\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = new String(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      initializeMaxDistances();\n      this.d = initDistanceArray();\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"971c6449b5391e0af36ec7578133d205a03e2836","date":1281210435,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","sourceNew":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(reader, term.field());\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(reader, term.field());\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      initializeMaxDistances();\n      this.d = initDistanceArray();\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8dd2a69747e9f2922fd8b6970bd1661b26a692d","date":1291080135,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","sourceNew":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(tenum);\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(reader, term.field());\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","sourceNew":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(tenum);\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(reader, term.field());\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","sourceNew":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(tenum);\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(reader, term.field());\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      initializeMaxDistances();\n      this.d = initDistanceArray();\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","sourceNew":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator());\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(tenum);\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","sourceNew":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator(null));\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator());\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","sourceNew":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator(null));\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists. \n     * \n     * @param reader Delivers terms.\n     * @param term Pattern term.\n     * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n     * @param prefixLength Length of required common prefix. Default value is 0.\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator(null));\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"971c6449b5391e0af36ec7578133d205a03e2836":["2aafd88401639311b0404e67c94e829e123a0e45"],"2aafd88401639311b0404e67c94e829e123a0e45":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["2aafd88401639311b0404e67c94e829e123a0e45","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["971c6449b5391e0af36ec7578133d205a03e2836"],"3bb13258feba31ab676502787ab2e1779f129b7a":["971c6449b5391e0af36ec7578133d205a03e2836","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["2aafd88401639311b0404e67c94e829e123a0e45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"971c6449b5391e0af36ec7578133d205a03e2836":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d","3bb13258feba31ab676502787ab2e1779f129b7a"],"2aafd88401639311b0404e67c94e829e123a0e45":["971c6449b5391e0af36ec7578133d205a03e2836","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["60ba444201d2570214b6fcf1d15600dc1a01f548","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}