{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader).mjava","commits":[{"id":"d902f463d0a39aa9fc43326e245a5e5c94295d68","date":1217857015,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader).mjava","pathOld":"/dev/null","sourceNew":"  private Iterator<Map<String ,Object>> getRowIterator(final Reader data){\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(batchSz);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    new Thread() {\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if(isEnd.get()) return ;\n              try {\n                blockingQueue.offer(readRow(record, xpath), 10, TimeUnit.SECONDS);\n              } catch (Exception e) {\n                isEnd.set(true);\n              }\n            }\n          });\n        } finally {\n          closeIt(data);\n          try {\n            blockingQueue.offer(Collections.EMPTY_MAP, 10, TimeUnit.SECONDS);\n          } catch (Exception e) { }\n        }\n      }\n    }.start();\n\n    return new Iterator<Map<String, Object>>() {\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n      public Map<String, Object> next() {\n        try {\n          Map<String, Object> row = blockingQueue.poll(10, TimeUnit.SECONDS);\n          if (row == null || row == Collections.EMPTY_MAP) {\n            isEnd.set(true);\n            return null;\n          }\n          return row;\n        } catch (InterruptedException e) {\n          isEnd.set(true);\n          return null;\n        }\n      }\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62","date":1226483472,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader).mjava","sourceNew":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(batchSz);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    new Thread() {\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) return;\n              try {\n                blockingQueue.offer(readRow(record, xpath), 10, TimeUnit.SECONDS);\n              } catch (Exception e) {\n                isEnd.set(true);\n              }\n            }\n          });\n        } catch (Exception e) {\n          exp.set(e);\n        } finally {\n          closeIt(data);\n          try {\n            blockingQueue.offer(Collections.EMPTY_MAP, 10, TimeUnit.SECONDS);\n          } catch (Exception e) {\n          }\n        }\n      }\n    }.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        try {\n          Map<String, Object> row = blockingQueue.poll(10, TimeUnit.SECONDS);\n          if (row == null || row == Collections.EMPTY_MAP) {\n            isEnd.set(true);\n            if (exp.get() != null) {\n              String msg = \"Parsing failed for xml, url:\" + s + \"rows processed in this xml:\" + count;\n              if (lastRow != null) msg += \"last row in this xml: \" + lastRow;\n              if (ABORT.equals(onError)) {\n                wrapAndThrow(SEVERE, exp.get(), msg);\n              } else if (SKIP.equals(onError)) {\n                wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n              } else {\n                LOG.warn(msg, exp.get());\n              }\n            }\n            return null;\n          }\n          count++;\n          return lastRow = row;\n        } catch (InterruptedException e) {\n          isEnd.set(true);\n          return null;\n        }\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","sourceOld":"  private Iterator<Map<String ,Object>> getRowIterator(final Reader data){\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(batchSz);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    new Thread() {\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if(isEnd.get()) return ;\n              try {\n                blockingQueue.offer(readRow(record, xpath), 10, TimeUnit.SECONDS);\n              } catch (Exception e) {\n                isEnd.set(true);\n              }\n            }\n          });\n        } finally {\n          closeIt(data);\n          try {\n            blockingQueue.offer(Collections.EMPTY_MAP, 10, TimeUnit.SECONDS);\n          } catch (Exception e) { }\n        }\n      }\n    }.start();\n\n    return new Iterator<Map<String, Object>>() {\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n      public Map<String, Object> next() {\n        try {\n          Map<String, Object> row = blockingQueue.poll(10, TimeUnit.SECONDS);\n          if (row == null || row == Collections.EMPTY_MAP) {\n            isEnd.set(true);\n            return null;\n          }\n          return row;\n        } catch (InterruptedException e) {\n          isEnd.set(true);\n          return null;\n        }\n      }\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":["1b5d20090448d280035afb31f1fd2e67ff43336b"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62":["d902f463d0a39aa9fc43326e245a5e5c94295d68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d902f463d0a39aa9fc43326e245a5e5c94295d68":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d902f463d0a39aa9fc43326e245a5e5c94295d68"],"d902f463d0a39aa9fc43326e245a5e5c94295d68":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}