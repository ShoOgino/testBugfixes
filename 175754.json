{"path":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/shape/AbstractTestShapes#randRange(int,int).mjava","commits":[{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/shape/AbstractTestShapes#randRange(int,int).mjava","pathOld":"modules/spatial-lucene/src/test/java/org/apache/lucene/spatial/base/shape/AbstractTestShapes#randRange(int,int).mjava","sourceNew":"  /** Returns a random integer between [start, end] with a limited number of possibilities instead of end-start+1. */\n  private int randRange(int start, int end) {\n    //I tested this.\n    double r = random.nextDouble();\n    final int BUCKETS = 91;\n    int ir = (int) Math.round(r*(BUCKETS-1));//put into buckets\n    int result = (int)((double)((end - start) * ir) / (double)(BUCKETS-1) + (double)start);\n    assert result >= start && result <= end;\n    return result;\n  }\n\n","sourceOld":"  /** Returns a random integer between [start, end] with a limited number of possibilities instead of end-start+1. */\n  private int randRange(int start, int end) {\n    //I tested this.\n    double r = random.nextDouble();\n    final int BUCKETS = 91;\n    int ir = (int) Math.round(r*(BUCKETS-1));//put into buckets\n    int result = (int)((double)((end - start) * ir) / (double)(BUCKETS-1) + (double)start);\n    assert result >= start && result <= end;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"935445a30e9e8dc0240a7c78efc73d08c2faa6a8","date":1329778521,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#randRange(int,int).mjava","pathOld":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/shape/AbstractTestShapes#randRange(int,int).mjava","sourceNew":"  /** Returns a random integer between [start, end] with a limited number of possibilities instead of end-start+1. */\n  private int randRange(int start, int end) {\n    //I tested this.\n    double r = random.nextDouble();\n    final int BUCKETS = 91;\n    int ir = (int) Math.round(r*(BUCKETS-1));//put into buckets\n    int result = (int)((double)((end - start) * ir) / (double)(BUCKETS-1) + (double)start);\n    assert result >= start && result <= end;\n    return result;\n  }\n\n","sourceOld":"  /** Returns a random integer between [start, end] with a limited number of possibilities instead of end-start+1. */\n  private int randRange(int start, int end) {\n    //I tested this.\n    double r = random.nextDouble();\n    final int BUCKETS = 91;\n    int ir = (int) Math.round(r*(BUCKETS-1));//put into buckets\n    int result = (int)((double)((end - start) * ir) / (double)(BUCKETS-1) + (double)start);\n    assert result >= start && result <= end;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}