{"path":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#checkIfKillIsLegal(String,int).mjava","commits":[{"id":"880ba9508bc60f5a45941227f966e69e521ead10","date":1390432381,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#checkIfKillIsLegal(String,int).mjava","pathOld":"/dev/null","sourceNew":"  private int checkIfKillIsLegal(String slice, int numActive)\n      throws KeeperException, InterruptedException {\n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      \n      // get latest cloud state\n      zkStateReader.updateClusterState(true);\n      \n      Slice theShards = zkStateReader.getClusterState().getSlicesMap(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getReplicasMap().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getReplicasMap().keySet());\n      }\n      \n      String state = props.getStr(ZkStateReader.STATE_PROP);\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n    }\n    return numActive;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#checkIfKillIsLegal(String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#checkIfKillIsLegal(String,int).mjava","sourceNew":"  private int checkIfKillIsLegal(String slice, int numActive) throws KeeperException, InterruptedException {\n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      \n      // get latest cloud state\n      zkStateReader.updateClusterState(true);\n      \n      Slice theShards = zkStateReader.getClusterState().getSlicesMap(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getReplicasMap().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getReplicasMap().keySet());\n      }\n      \n      final Replica.State state = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP));\n      final String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      \n      if (cloudJetty.jetty.isRunning()\n          && state == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n    }\n    return numActive;\n  }\n\n","sourceOld":"  private int checkIfKillIsLegal(String slice, int numActive)\n      throws KeeperException, InterruptedException {\n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      \n      // get latest cloud state\n      zkStateReader.updateClusterState(true);\n      \n      Slice theShards = zkStateReader.getClusterState().getSlicesMap(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getReplicasMap().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getReplicasMap().keySet());\n      }\n      \n      String state = props.getStr(ZkStateReader.STATE_PROP);\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n    }\n    return numActive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#checkIfKillIsLegal(String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#checkIfKillIsLegal(String,int).mjava","sourceNew":"  private int checkIfKillIsLegal(String slice, int numActive) throws KeeperException, InterruptedException {\n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      \n      // get latest cloud state\n      zkStateReader.updateClusterState();\n      \n      Slice theShards = zkStateReader.getClusterState().getSlicesMap(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getReplicasMap().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getReplicasMap().keySet());\n      }\n      \n      final Replica.State state = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP));\n      final String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      \n      if (cloudJetty.jetty.isRunning()\n          && state == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n    }\n    return numActive;\n  }\n\n","sourceOld":"  private int checkIfKillIsLegal(String slice, int numActive) throws KeeperException, InterruptedException {\n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      \n      // get latest cloud state\n      zkStateReader.updateClusterState(true);\n      \n      Slice theShards = zkStateReader.getClusterState().getSlicesMap(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getReplicasMap().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getReplicasMap().keySet());\n      }\n      \n      final Replica.State state = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP));\n      final String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      \n      if (cloudJetty.jetty.isRunning()\n          && state == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n    }\n    return numActive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#checkIfKillIsLegal(String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#checkIfKillIsLegal(String,int).mjava","sourceNew":"  private int checkIfKillIsLegal(String slice, int numActive) throws KeeperException, InterruptedException {\n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      \n      // get latest cloud state\n      zkStateReader.forceUpdateCollection(collection);\n      \n      Slice theShards = zkStateReader.getClusterState().getSlicesMap(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getReplicasMap().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getReplicasMap().keySet());\n      }\n      \n      final Replica.State state = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP));\n      final String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      \n      if (cloudJetty.jetty.isRunning()\n          && state == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n    }\n    return numActive;\n  }\n\n","sourceOld":"  private int checkIfKillIsLegal(String slice, int numActive) throws KeeperException, InterruptedException {\n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      \n      // get latest cloud state\n      zkStateReader.updateClusterState();\n      \n      Slice theShards = zkStateReader.getClusterState().getSlicesMap(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getReplicasMap().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getReplicasMap().keySet());\n      }\n      \n      final Replica.State state = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP));\n      final String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      \n      if (cloudJetty.jetty.isRunning()\n          && state == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n    }\n    return numActive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#checkIfKillIsLegal(String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#checkIfKillIsLegal(String,int).mjava","sourceNew":"  private int checkIfKillIsLegal(String sliceName, int numActive) throws KeeperException, InterruptedException {\n    for (CloudJettyRunner cloudJetty : shardToJetty.get(sliceName)) {\n      \n      // get latest cloud state\n      zkStateReader.forceUpdateCollection(collection);\n      \n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collection);\n      \n      Slice slice = docCollection.getSlice(sliceName);\n      \n      ZkNodeProps props = slice.getReplicasMap().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + slice.getReplicasMap().keySet());\n      }\n      \n      final Replica.State state = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP));\n      final String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      \n      if (cloudJetty.jetty.isRunning()\n          && state == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n    }\n    return numActive;\n  }\n\n","sourceOld":"  private int checkIfKillIsLegal(String slice, int numActive) throws KeeperException, InterruptedException {\n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      \n      // get latest cloud state\n      zkStateReader.forceUpdateCollection(collection);\n      \n      Slice theShards = zkStateReader.getClusterState().getSlicesMap(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getReplicasMap().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getReplicasMap().keySet());\n      }\n      \n      final Replica.State state = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP));\n      final String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      \n      if (cloudJetty.jetty.isRunning()\n          && state == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n    }\n    return numActive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#checkIfKillIsLegal(String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#checkIfKillIsLegal(String,int).mjava","sourceNew":"  private int checkIfKillIsLegal(String sliceName, int numActive) throws KeeperException, InterruptedException {\n    for (CloudJettyRunner cloudJetty : shardToJetty.get(sliceName)) {\n      \n      // get latest cloud state\n      zkStateReader.forceUpdateCollection(collection);\n      \n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collection);\n      \n      Slice slice = docCollection.getSlice(sliceName);\n      \n      ZkNodeProps props = slice.getReplicasMap().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + slice.getReplicasMap().keySet());\n      }\n      \n      final Replica.State state = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP));\n      final String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      \n      if (cloudJetty.jetty.isRunning()\n          && state == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n    }\n    return numActive;\n  }\n\n","sourceOld":"  private int checkIfKillIsLegal(String slice, int numActive) throws KeeperException, InterruptedException {\n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      \n      // get latest cloud state\n      zkStateReader.forceUpdateCollection(collection);\n      \n      Slice theShards = zkStateReader.getClusterState().getSlicesMap(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getReplicasMap().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getReplicasMap().keySet());\n      }\n      \n      final Replica.State state = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP));\n      final String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      \n      if (cloudJetty.jetty.isRunning()\n          && state == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n    }\n    return numActive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["880ba9508bc60f5a45941227f966e69e521ead10"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"880ba9508bc60f5a45941227f966e69e521ead10":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61c45e99cf6676da48f19d7511c73712ad39402b"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["880ba9508bc60f5a45941227f966e69e521ead10"],"880ba9508bc60f5a45941227f966e69e521ead10":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}