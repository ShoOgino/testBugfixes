{"path":"backwards/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#setUpDirs(Directory,Directory).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#setUpDirs(Directory,Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void setUpDirs(Directory dir, Directory aux) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    writer.setMaxBufferedDocs(1000);\n    // add 1000 documents in 1 segment\n    addDocs(writer, 1000);\n    assertEquals(1000, writer.maxDoc());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(10);\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      addDocs(writer, 10);\n      writer.close();\n      writer = newWriter(aux, false);\n      writer.setUseCompoundFile(false); // use one without a compound file\n      writer.setMaxBufferedDocs(100);\n      writer.setMergeFactor(10);\n    }\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#setUpDirs(Directory,Directory).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#setUpDirs(Directory,Directory).mjava","sourceNew":"  private void setUpDirs(Directory dir, Directory aux) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    writer.setMaxBufferedDocs(1000);\n    // add 1000 documents in 1 segment\n    addDocs(writer, 1000);\n    assertEquals(1000, writer.maxDoc());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(10);\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      addDocs(writer, 10);\n      writer.close();\n      writer = newWriter(aux, false);\n      writer.setUseCompoundFile(false); // use one without a compound file\n      writer.setMaxBufferedDocs(100);\n      writer.setMergeFactor(10);\n    }\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","sourceOld":"  private void setUpDirs(Directory dir, Directory aux) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    writer.setMaxBufferedDocs(1000);\n    // add 1000 documents in 1 segment\n    addDocs(writer, 1000);\n    assertEquals(1000, writer.maxDoc());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(10);\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      addDocs(writer, 10);\n      writer.close();\n      writer = newWriter(aux, false);\n      writer.setUseCompoundFile(false); // use one without a compound file\n      writer.setMaxBufferedDocs(100);\n      writer.setMergeFactor(10);\n    }\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}