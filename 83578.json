{"path":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","commits":[{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf();\n\n    String hdfsSolrHome = (String) Preconditions.checkNotNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    try {\n      this.fileSystem = FileSystem.get(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf();\n\n    String hdfsSolrHome = (String) Preconditions.checkNotNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    try {\n      this.fileSystem = FileSystem.get(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5b22bbf58be28e93a9545e12da1c0506e3e59fd","date":1477405317,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf();\n\n    // Configure the umask mode if specified.\n    if (args.get(HDFS_UMASK_MODE_PARAM) != null) {\n      String umaskVal = (String)args.get(HDFS_UMASK_MODE_PARAM);\n      this.hdfsConfig.set(FsPermission.UMASK_LABEL, umaskVal);\n    }\n\n    String hdfsSolrHome = (String) Preconditions.checkNotNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    try {\n      this.fileSystem = FileSystem.get(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf();\n\n    String hdfsSolrHome = (String) Preconditions.checkNotNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    try {\n      this.fileSystem = FileSystem.get(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60b61628d1912768f51eccaa8ead5a5a32ab34c6","date":1477427681,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf();\n\n    // Configure the umask mode if specified.\n    if (args.get(HDFS_UMASK_MODE_PARAM) != null) {\n      String umaskVal = (String)args.get(HDFS_UMASK_MODE_PARAM);\n      this.hdfsConfig.set(FsPermission.UMASK_LABEL, umaskVal);\n    }\n\n    String hdfsSolrHome = (String) Preconditions.checkNotNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    try {\n      this.fileSystem = FileSystem.get(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf();\n\n    String hdfsSolrHome = (String) Preconditions.checkNotNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    try {\n      this.fileSystem = FileSystem.get(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf();\n\n    // Configure the umask mode if specified.\n    if (args.get(HDFS_UMASK_MODE_PARAM) != null) {\n      String umaskVal = (String)args.get(HDFS_UMASK_MODE_PARAM);\n      this.hdfsConfig.set(FsPermission.UMASK_LABEL, umaskVal);\n    }\n\n    String hdfsSolrHome = (String) Preconditions.checkNotNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    try {\n      this.fileSystem = FileSystem.get(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf();\n\n    String hdfsSolrHome = (String) Preconditions.checkNotNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    try {\n      this.fileSystem = FileSystem.get(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","date":1477689538,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf();\n\n    // Configure the umask mode if specified.\n    if (args.get(HDFS_UMASK_MODE_PARAM) != null) {\n      String umaskVal = (String)args.get(HDFS_UMASK_MODE_PARAM);\n      this.hdfsConfig.set(FsPermission.UMASK_LABEL, umaskVal);\n    }\n\n    String hdfsSolrHome = (String) Objects.requireNonNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    try {\n      this.fileSystem = FileSystem.get(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf();\n\n    // Configure the umask mode if specified.\n    if (args.get(HDFS_UMASK_MODE_PARAM) != null) {\n      String umaskVal = (String)args.get(HDFS_UMASK_MODE_PARAM);\n      this.hdfsConfig.set(FsPermission.UMASK_LABEL, umaskVal);\n    }\n\n    String hdfsSolrHome = (String) Preconditions.checkNotNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    try {\n      this.fileSystem = FileSystem.get(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf();\n\n    // Configure the umask mode if specified.\n    if (args.get(HDFS_UMASK_MODE_PARAM) != null) {\n      String umaskVal = (String)args.get(HDFS_UMASK_MODE_PARAM);\n      this.hdfsConfig.set(FsPermission.UMASK_LABEL, umaskVal);\n    }\n\n    String hdfsSolrHome = (String) Objects.requireNonNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    try {\n      this.fileSystem = FileSystem.get(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf();\n\n    // Configure the umask mode if specified.\n    if (args.get(HDFS_UMASK_MODE_PARAM) != null) {\n      String umaskVal = (String)args.get(HDFS_UMASK_MODE_PARAM);\n      this.hdfsConfig.set(FsPermission.UMASK_LABEL, umaskVal);\n    }\n\n    String hdfsSolrHome = (String) Preconditions.checkNotNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    try {\n      this.fileSystem = FileSystem.get(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81554933aa24fa5ebbb1512f37c8426b615a788a","date":1548342369,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    // Configure the size of the buffer used for copying index files to/from HDFS, if specified.\n    if (args.get(HDFS_COPY_BUFFER_SIZE_PARAM) != null) {\n      this.copyBufferSize = (Integer)args.get(HDFS_COPY_BUFFER_SIZE_PARAM);\n      if (this.copyBufferSize <= 0) {\n        throw new IllegalArgumentException(\"Value of \" + HDFS_COPY_BUFFER_SIZE_PARAM + \" must be > 0\");\n      }\n    }\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf();\n\n    // Configure the umask mode if specified.\n    if (args.get(HDFS_UMASK_MODE_PARAM) != null) {\n      String umaskVal = (String)args.get(HDFS_UMASK_MODE_PARAM);\n      this.hdfsConfig.set(FsPermission.UMASK_LABEL, umaskVal);\n    }\n\n    String hdfsSolrHome = (String) Objects.requireNonNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    try {\n      this.fileSystem = FileSystem.get(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf();\n\n    // Configure the umask mode if specified.\n    if (args.get(HDFS_UMASK_MODE_PARAM) != null) {\n      String umaskVal = (String)args.get(HDFS_UMASK_MODE_PARAM);\n      this.hdfsConfig.set(FsPermission.UMASK_LABEL, umaskVal);\n    }\n\n    String hdfsSolrHome = (String) Objects.requireNonNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    try {\n      this.fileSystem = FileSystem.get(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"870bbea2a1d8085b48b52a1480ac95db389476c1","date":1553970360,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    // Configure the size of the buffer used for copying index files to/from HDFS, if specified.\n    if (args.get(HDFS_COPY_BUFFER_SIZE_PARAM) != null) {\n      this.copyBufferSize = (Integer)args.get(HDFS_COPY_BUFFER_SIZE_PARAM);\n      if (this.copyBufferSize <= 0) {\n        throw new IllegalArgumentException(\"Value of \" + HDFS_COPY_BUFFER_SIZE_PARAM + \" must be > 0\");\n      }\n    }\n\n    String hdfsSolrHome = (String) Objects.requireNonNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf(new Path(hdfsSolrHome));\n\n    // Configure the umask mode if specified.\n    if (args.get(HDFS_UMASK_MODE_PARAM) != null) {\n      String umaskVal = (String)args.get(HDFS_UMASK_MODE_PARAM);\n      this.hdfsConfig.set(FsPermission.UMASK_LABEL, umaskVal);\n    }\n\n    try {\n      this.fileSystem = FileSystem.get(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    // Configure the size of the buffer used for copying index files to/from HDFS, if specified.\n    if (args.get(HDFS_COPY_BUFFER_SIZE_PARAM) != null) {\n      this.copyBufferSize = (Integer)args.get(HDFS_COPY_BUFFER_SIZE_PARAM);\n      if (this.copyBufferSize <= 0) {\n        throw new IllegalArgumentException(\"Value of \" + HDFS_COPY_BUFFER_SIZE_PARAM + \" must be > 0\");\n      }\n    }\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf();\n\n    // Configure the umask mode if specified.\n    if (args.get(HDFS_UMASK_MODE_PARAM) != null) {\n      String umaskVal = (String)args.get(HDFS_UMASK_MODE_PARAM);\n      this.hdfsConfig.set(FsPermission.UMASK_LABEL, umaskVal);\n    }\n\n    String hdfsSolrHome = (String) Objects.requireNonNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    try {\n      this.fileSystem = FileSystem.get(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e94b0e7e777364e296aacf369177bb0175c06a85","date":1593867585,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    log.warn(\"HDFS support in Solr has been deprecated as of 8.6. See SOLR-14021 for details.\");\n\n    // Configure the size of the buffer used for copying index files to/from HDFS, if specified.\n    if (args.get(HDFS_COPY_BUFFER_SIZE_PARAM) != null) {\n      this.copyBufferSize = (Integer)args.get(HDFS_COPY_BUFFER_SIZE_PARAM);\n      if (this.copyBufferSize <= 0) {\n        throw new IllegalArgumentException(\"Value of \" + HDFS_COPY_BUFFER_SIZE_PARAM + \" must be > 0\");\n      }\n    }\n\n    String hdfsSolrHome = (String) Objects.requireNonNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf(new Path(hdfsSolrHome));\n\n    // Configure the umask mode if specified.\n    if (args.get(HDFS_UMASK_MODE_PARAM) != null) {\n      String umaskVal = (String)args.get(HDFS_UMASK_MODE_PARAM);\n      this.hdfsConfig.set(FsPermission.UMASK_LABEL, umaskVal);\n    }\n\n    try {\n      this.fileSystem = FileSystem.get(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    // Configure the size of the buffer used for copying index files to/from HDFS, if specified.\n    if (args.get(HDFS_COPY_BUFFER_SIZE_PARAM) != null) {\n      this.copyBufferSize = (Integer)args.get(HDFS_COPY_BUFFER_SIZE_PARAM);\n      if (this.copyBufferSize <= 0) {\n        throw new IllegalArgumentException(\"Value of \" + HDFS_COPY_BUFFER_SIZE_PARAM + \" must be > 0\");\n      }\n    }\n\n    String hdfsSolrHome = (String) Objects.requireNonNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf(new Path(hdfsSolrHome));\n\n    // Configure the umask mode if specified.\n    if (args.get(HDFS_UMASK_MODE_PARAM) != null) {\n      String umaskVal = (String)args.get(HDFS_UMASK_MODE_PARAM);\n      this.hdfsConfig.set(FsPermission.UMASK_LABEL, umaskVal);\n    }\n\n    try {\n      this.fileSystem = FileSystem.get(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbda3ac72421d2db017870a36f62371c5af63dc7","date":1595564878,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/repository/HdfsBackupRepository#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    log.warn(\"HDFS support in Solr has been deprecated as of 8.6. See SOLR-14021 for details.\");\n\n    // Configure the size of the buffer used for copying index files to/from HDFS, if specified.\n    if (args.get(HDFS_COPY_BUFFER_SIZE_PARAM) != null) {\n      this.copyBufferSize = (Integer)args.get(HDFS_COPY_BUFFER_SIZE_PARAM);\n      if (this.copyBufferSize <= 0) {\n        throw new IllegalArgumentException(\"Value of \" + HDFS_COPY_BUFFER_SIZE_PARAM + \" must be > 0\");\n      }\n    }\n\n    String hdfsSolrHome = (String) Objects.requireNonNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf(new Path(hdfsSolrHome));\n\n    // Configure the umask mode if specified.\n    if (args.get(HDFS_UMASK_MODE_PARAM) != null) {\n      String umaskVal = (String)args.get(HDFS_UMASK_MODE_PARAM);\n      this.hdfsConfig.set(FsPermission.UMASK_LABEL, umaskVal);\n    }\n\n    try {\n      this.fileSystem = FileSystem.newInstance(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init(NamedList args) {\n    this.config = args;\n\n    log.warn(\"HDFS support in Solr has been deprecated as of 8.6. See SOLR-14021 for details.\");\n\n    // Configure the size of the buffer used for copying index files to/from HDFS, if specified.\n    if (args.get(HDFS_COPY_BUFFER_SIZE_PARAM) != null) {\n      this.copyBufferSize = (Integer)args.get(HDFS_COPY_BUFFER_SIZE_PARAM);\n      if (this.copyBufferSize <= 0) {\n        throw new IllegalArgumentException(\"Value of \" + HDFS_COPY_BUFFER_SIZE_PARAM + \" must be > 0\");\n      }\n    }\n\n    String hdfsSolrHome = (String) Objects.requireNonNull(args.get(HdfsDirectoryFactory.HDFS_HOME),\n        \"Please specify \" + HdfsDirectoryFactory.HDFS_HOME + \" property.\");\n    Path path = new Path(hdfsSolrHome);\n    while (path != null) { // Compute the path of root file-system (without requiring an additional system property).\n      baseHdfsPath = path;\n      path = path.getParent();\n    }\n\n    // We don't really need this factory instance. But we want to initialize it here to\n    // make sure that all HDFS related initialization is at one place (and not duplicated here).\n    factory = new HdfsDirectoryFactory();\n    factory.init(args);\n    this.hdfsConfig = factory.getConf(new Path(hdfsSolrHome));\n\n    // Configure the umask mode if specified.\n    if (args.get(HDFS_UMASK_MODE_PARAM) != null) {\n      String umaskVal = (String)args.get(HDFS_UMASK_MODE_PARAM);\n      this.hdfsConfig.set(FsPermission.UMASK_LABEL, umaskVal);\n    }\n\n    try {\n      this.fileSystem = FileSystem.get(this.baseHdfsPath.toUri(), this.hdfsConfig);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"870bbea2a1d8085b48b52a1480ac95db389476c1":["81554933aa24fa5ebbb1512f37c8426b615a788a"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"81554933aa24fa5ebbb1512f37c8426b615a788a":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"320888923ec13b91f53082558f01f4c9960dd226":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"e94b0e7e777364e296aacf369177bb0175c06a85":["870bbea2a1d8085b48b52a1480ac95db389476c1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","f5b22bbf58be28e93a9545e12da1c0506e3e59fd"],"f5b22bbf58be28e93a9545e12da1c0506e3e59fd":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bbda3ac72421d2db017870a36f62371c5af63dc7":["e94b0e7e777364e296aacf369177bb0175c06a85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bbda3ac72421d2db017870a36f62371c5af63dc7"]},"commit2Childs":{"870bbea2a1d8085b48b52a1480ac95db389476c1":["e94b0e7e777364e296aacf369177bb0175c06a85"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["81554933aa24fa5ebbb1512f37c8426b615a788a","320888923ec13b91f53082558f01f4c9960dd226"],"81554933aa24fa5ebbb1512f37c8426b615a788a":["870bbea2a1d8085b48b52a1480ac95db389476c1"],"320888923ec13b91f53082558f01f4c9960dd226":[],"e94b0e7e777364e296aacf369177bb0175c06a85":["bbda3ac72421d2db017870a36f62371c5af63dc7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"f5b22bbf58be28e93a9545e12da1c0506e3e59fd":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","60b61628d1912768f51eccaa8ead5a5a32ab34c6","f5b22bbf58be28e93a9545e12da1c0506e3e59fd"],"bbda3ac72421d2db017870a36f62371c5af63dc7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["320888923ec13b91f53082558f01f4c9960dd226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}