{"path":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","commits":[{"id":"32e7c2a80dad193a76a03ec46b878969d469ff6c","date":1323722006,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,DocValues,DocValues).mjava","sourceNew":"  protected double distance(int doc, FunctionValues gh1DV, FunctionValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","sourceOld":"  protected double distance(int doc, DocValues gh1DV, DocValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,DocValues,DocValues).mjava","sourceNew":"  protected double distance(int doc, FunctionValues gh1DV, FunctionValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","sourceOld":"  protected double distance(int doc, DocValues gh1DV, DocValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3859e567816d5987602f2a7ae2469fcdf17f745e","date":1329895924,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  protected double distance(int doc, FunctionValues gh1DV, FunctionValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      Point p1 = GeohashUtils.decode(h1,ctx);\n      Point p2 = GeohashUtils.decode(h2,ctx);\n      result = ctx.getDistCalc().distance(p1, p2);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","sourceOld":"  protected double distance(int doc, FunctionValues gh1DV, FunctionValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  protected double distance(int doc, FunctionValues gh1DV, FunctionValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      Point p1 = GeohashUtils.decode(h1,ctx);\n      Point p2 = GeohashUtils.decode(h2,ctx);\n      result = ctx.getDistCalc().distance(p1, p2);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","sourceOld":"  protected double distance(int doc, FunctionValues gh1DV, FunctionValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da956410d7a790f567af4e7e94584fb0930212f2","date":1346859431,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  protected double distance(int doc, FunctionValues gh1DV, FunctionValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      Point p1 = GeohashUtils.decode(h1,ctx);\n      Point p2 = GeohashUtils.decode(h2,ctx);\n      result = ctx.getDistCalc().distance(p1, p2) * degreesToDist;\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","sourceOld":"  protected double distance(int doc, FunctionValues gh1DV, FunctionValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      Point p1 = GeohashUtils.decode(h1,ctx);\n      Point p2 = GeohashUtils.decode(h2,ctx);\n      result = ctx.getDistCalc().distance(p1, p2);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  protected double distance(int doc, FunctionValues gh1DV, FunctionValues gh2DV) throws IOException {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      Point p1 = GeohashUtils.decode(h1,ctx);\n      Point p2 = GeohashUtils.decode(h2,ctx);\n      result = ctx.getDistCalc().distance(p1, p2) * degreesToDist;\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","sourceOld":"  protected double distance(int doc, FunctionValues gh1DV, FunctionValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      Point p1 = GeohashUtils.decode(h1,ctx);\n      Point p2 = GeohashUtils.decode(h2,ctx);\n      result = ctx.getDistCalc().distance(p1, p2) * degreesToDist;\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  protected double distance(int doc, FunctionValues gh1DV, FunctionValues gh2DV) throws IOException {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      Point p1 = GeohashUtils.decode(h1,ctx);\n      Point p2 = GeohashUtils.decode(h2,ctx);\n      result = ctx.getDistCalc().distance(p1, p2) * degreesToDist;\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","sourceOld":"  protected double distance(int doc, FunctionValues gh1DV, FunctionValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      Point p1 = GeohashUtils.decode(h1,ctx);\n      Point p2 = GeohashUtils.decode(h2,ctx);\n      result = ctx.getDistCalc().distance(p1, p2) * degreesToDist;\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  protected double distance(int doc, FunctionValues gh1DV, FunctionValues gh2DV) throws IOException {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      Point p1 = GeohashUtils.decode(h1,ctx);\n      Point p2 = GeohashUtils.decode(h2,ctx);\n      result = ctx.getDistCalc().distance(p1, p2) * degreesToDist;\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","sourceOld":"  protected double distance(int doc, FunctionValues gh1DV, FunctionValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      Point p1 = GeohashUtils.decode(h1,ctx);\n      Point p2 = GeohashUtils.decode(h2,ctx);\n      result = ctx.getDistCalc().distance(p1, p2) * degreesToDist;\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da956410d7a790f567af4e7e94584fb0930212f2":["e47768b261c28e7e6032060e8331475c81057953"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["da956410d7a790f567af4e7e94584fb0930212f2","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["da956410d7a790f567af4e7e94584fb0930212f2"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e47768b261c28e7e6032060e8331475c81057953":["d638301ad1cfcae567b681b893bc8781f0ee48a5","3859e567816d5987602f2a7ae2469fcdf17f745e"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["da956410d7a790f567af4e7e94584fb0930212f2","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32e7c2a80dad193a76a03ec46b878969d469ff6c"]},"commit2Childs":{"da956410d7a790f567af4e7e94584fb0930212f2":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["32e7c2a80dad193a76a03ec46b878969d469ff6c","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"e47768b261c28e7e6032060e8331475c81057953":["da956410d7a790f567af4e7e94584fb0930212f2"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["e47768b261c28e7e6032060e8331475c81057953"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["e47768b261c28e7e6032060e8331475c81057953","3859e567816d5987602f2a7ae2469fcdf17f745e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}