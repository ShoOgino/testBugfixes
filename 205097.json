{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#watchCoreStartAt(SolrServer,long,Date).mjava","commits":[{"id":"25bbd8e76cd29f2d4b262a24d6a42c754706b143","date":1365910543,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#watchCoreStartAt(SolrServer,long,Date).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Polls the SolrCore stats using the specified client until the \"startTime\" \n   * time for collection is after the specified \"min\".  Will loop for \n   * at most \"timeout\" milliseconds before throwing an assertion failure.\n   * \n   * @param client The SolrServer to poll\n   * @param timeout the max milliseconds to continue polling for\n   * @param min the startTime value must exceed this value before the method will return, if null this method will return the first startTime value encountered.\n   * @return the startTime value of collection\n   */\n  private Date watchCoreStartAt(SolrServer client, final long timeout, \n                                final Date min) throws InterruptedException, IOException, SolrServerException {\n    final long sleepInterval = 200;\n    long timeSlept = 0;\n\n    SolrParams p = params(\"action\",\"status\", \"core\", \"collection1\");\n    while (timeSlept < timeout) {\n      QueryRequest req = new QueryRequest(p);\n      req.setPath(\"/admin/cores\");\n      try {\n        NamedList data = client.request(req);\n        for (String k : new String[] {\"status\",\"collection1\"}) {\n          Object o = data.get(k);\n          assertNotNull(\"core status rsp missing key: \" + k, o);\n          data = (NamedList) o;\n        }\n        Date startTime = (Date) data.get(\"startTime\");\n        assertNotNull(\"core has null startTime\", startTime);\n        if (null == min || startTime.after(min)) {\n          return startTime;\n        }\n      } catch (SolrException e) {\n        // workarround for SOLR-4668\n        if (500 != e.code()) {\n          throw e;\n        } // else server possibly from the core reload in progress...\n      }\n\n      timeSlept += sleepInterval;\n      Thread.sleep(sleepInterval);\n    }\n    fail(\"timed out waiting for collection1 startAt time to exceed: \" + min);\n    return min; // compilation neccessity\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#watchCoreStartAt(SolrClient,long,Date).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#watchCoreStartAt(SolrServer,long,Date).mjava","sourceNew":"  /**\n   * Polls the SolrCore stats using the specified client until the \"startTime\" \n   * time for collection is after the specified \"min\".  Will loop for \n   * at most \"timeout\" milliseconds before throwing an assertion failure.\n   * \n   * @param client The SolrClient to poll\n   * @param timeout the max milliseconds to continue polling for\n   * @param min the startTime value must exceed this value before the method will return, if null this method will return the first startTime value encountered.\n   * @return the startTime value of collection\n   */\n  private Date watchCoreStartAt(SolrClient client, final long timeout,\n                                final Date min) throws InterruptedException, IOException, SolrServerException {\n    final long sleepInterval = 200;\n    long timeSlept = 0;\n\n    SolrParams p = params(\"action\",\"status\", \"core\", \"collection1\");\n    while (timeSlept < timeout) {\n      QueryRequest req = new QueryRequest(p);\n      req.setPath(\"/admin/cores\");\n      try {\n        NamedList data = client.request(req);\n        for (String k : new String[] {\"status\",\"collection1\"}) {\n          Object o = data.get(k);\n          assertNotNull(\"core status rsp missing key: \" + k, o);\n          data = (NamedList) o;\n        }\n        Date startTime = (Date) data.get(\"startTime\");\n        assertNotNull(\"core has null startTime\", startTime);\n        if (null == min || startTime.after(min)) {\n          return startTime;\n        }\n      } catch (SolrException e) {\n        // workarround for SOLR-4668\n        if (500 != e.code()) {\n          throw e;\n        } // else server possibly from the core reload in progress...\n      }\n\n      timeSlept += sleepInterval;\n      Thread.sleep(sleepInterval);\n    }\n    fail(\"timed out waiting for collection1 startAt time to exceed: \" + min);\n    return min; // compilation neccessity\n  }\n\n","sourceOld":"  /**\n   * Polls the SolrCore stats using the specified client until the \"startTime\" \n   * time for collection is after the specified \"min\".  Will loop for \n   * at most \"timeout\" milliseconds before throwing an assertion failure.\n   * \n   * @param client The SolrServer to poll\n   * @param timeout the max milliseconds to continue polling for\n   * @param min the startTime value must exceed this value before the method will return, if null this method will return the first startTime value encountered.\n   * @return the startTime value of collection\n   */\n  private Date watchCoreStartAt(SolrServer client, final long timeout, \n                                final Date min) throws InterruptedException, IOException, SolrServerException {\n    final long sleepInterval = 200;\n    long timeSlept = 0;\n\n    SolrParams p = params(\"action\",\"status\", \"core\", \"collection1\");\n    while (timeSlept < timeout) {\n      QueryRequest req = new QueryRequest(p);\n      req.setPath(\"/admin/cores\");\n      try {\n        NamedList data = client.request(req);\n        for (String k : new String[] {\"status\",\"collection1\"}) {\n          Object o = data.get(k);\n          assertNotNull(\"core status rsp missing key: \" + k, o);\n          data = (NamedList) o;\n        }\n        Date startTime = (Date) data.get(\"startTime\");\n        assertNotNull(\"core has null startTime\", startTime);\n        if (null == min || startTime.after(min)) {\n          return startTime;\n        }\n      } catch (SolrException e) {\n        // workarround for SOLR-4668\n        if (500 != e.code()) {\n          throw e;\n        } // else server possibly from the core reload in progress...\n      }\n\n      timeSlept += sleepInterval;\n      Thread.sleep(sleepInterval);\n    }\n    fail(\"timed out waiting for collection1 startAt time to exceed: \" + min);\n    return min; // compilation neccessity\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}