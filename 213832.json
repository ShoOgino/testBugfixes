{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator#DisjunctionMatchesIterator(List[MatchesIterator]).mjava","commits":[{"id":"657704b225b01c6ff4bada5b6667f1f60aaaad0f","date":1523436207,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator#DisjunctionMatchesIterator(List[MatchesIterator]).mjava","pathOld":"/dev/null","sourceNew":"  private DisjunctionMatchesIterator(List<MatchesIterator> matches) throws IOException {\n    queue = new PriorityQueue<MatchesIterator>(matches.size()){\n      @Override\n      protected boolean lessThan(MatchesIterator a, MatchesIterator b) {\n        return a.startPosition() < b.startPosition() ||\n            (a.startPosition() == b.startPosition() && a.endPosition() < b.endPosition()) ||\n            (a.startPosition() == b.startPosition() && a.endPosition() == b.endPosition() && a.term().compareTo(b.term()) < 0);\n      }\n    };\n    for (MatchesIterator mi : matches) {\n      if (mi.next()) {\n        queue.add(mi);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator#DisjunctionMatchesIterator(List[MatchesIterator]).mjava","pathOld":"/dev/null","sourceNew":"  private DisjunctionMatchesIterator(List<MatchesIterator> matches) throws IOException {\n    queue = new PriorityQueue<MatchesIterator>(matches.size()){\n      @Override\n      protected boolean lessThan(MatchesIterator a, MatchesIterator b) {\n        return a.startPosition() < b.startPosition() ||\n            (a.startPosition() == b.startPosition() && a.endPosition() < b.endPosition()) ||\n            (a.startPosition() == b.startPosition() && a.endPosition() == b.endPosition() && a.term().compareTo(b.term()) < 0);\n      }\n    };\n    for (MatchesIterator mi : matches) {\n      if (mi.next()) {\n        queue.add(mi);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffb7b0a1201e65140f72d01a08b2bc34b0cfc364","date":1524498677,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator#DisjunctionMatchesIterator(List[MatchesIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator#DisjunctionMatchesIterator(List[MatchesIterator]).mjava","sourceNew":"  private DisjunctionMatchesIterator(List<MatchesIterator> matches) throws IOException {\n    queue = new PriorityQueue<MatchesIterator>(matches.size()){\n      @Override\n      protected boolean lessThan(MatchesIterator a, MatchesIterator b) {\n        return a.startPosition() < b.startPosition() ||\n            (a.startPosition() == b.startPosition() && a.endPosition() < b.endPosition()) ||\n            (a.startPosition() == b.startPosition() && a.endPosition() == b.endPosition());\n      }\n    };\n    for (MatchesIterator mi : matches) {\n      if (mi.next()) {\n        queue.add(mi);\n      }\n    }\n  }\n\n","sourceOld":"  private DisjunctionMatchesIterator(List<MatchesIterator> matches) throws IOException {\n    queue = new PriorityQueue<MatchesIterator>(matches.size()){\n      @Override\n      protected boolean lessThan(MatchesIterator a, MatchesIterator b) {\n        return a.startPosition() < b.startPosition() ||\n            (a.startPosition() == b.startPosition() && a.endPosition() < b.endPosition()) ||\n            (a.startPosition() == b.startPosition() && a.endPosition() == b.endPosition() && a.term().compareTo(b.term()) < 0);\n      }\n    };\n    for (MatchesIterator mi : matches) {\n      if (mi.next()) {\n        queue.add(mi);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffb7b0a1201e65140f72d01a08b2bc34b0cfc364":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","657704b225b01c6ff4bada5b6667f1f60aaaad0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ffb7b0a1201e65140f72d01a08b2bc34b0cfc364"]},"commit2Childs":{"ffb7b0a1201e65140f72d01a08b2bc34b0cfc364":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["657704b225b01c6ff4bada5b6667f1f60aaaad0f","43345f1452f9510f8aaadae6156fe0c834e7d957"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["ffb7b0a1201e65140f72d01a08b2bc34b0cfc364"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}