{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],ZkStateReader).mjava","commits":[{"id":"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","date":1386334715,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],ZkStateReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set, ZkStateReader)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, ZkStateReader stateReader) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap(),stateReader);\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,DocCollection> collections = new LinkedHashMap<String,DocCollection>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue());\n      collections.put(collectionName, coll);\n    }\n\n    // System.out.println(\"######## ClusterState.load result:\" + collections);\n    return new ClusterState(version, liveNodes, collections);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,DocCollection> collections = new LinkedHashMap<String,DocCollection>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue());\n      collections.put(collectionName, coll);\n    }\n\n    // System.out.println(\"######## ClusterState.load result:\" + collections);\n    return new ClusterState(version, liveNodes, collections);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set, ZkStateReader)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, ZkStateReader stateReader) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap(),stateReader);\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,DocCollection> collections = new LinkedHashMap<String,DocCollection>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue());\n      collections.put(collectionName, coll);\n    }\n\n    // System.out.println(\"######## ClusterState.load result:\" + collections);\n    return new ClusterState(version, liveNodes, collections);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],ZkStateReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],ZkStateReader).mjava","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set, ZkStateReader)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, ZkStateReader stateReader) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap(),stateReader);\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,DocCollection> collections = new LinkedHashMap<>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue());\n      collections.put(collectionName, coll);\n    }\n\n    // System.out.println(\"######## ClusterState.load result:\" + collections);\n    return new ClusterState(version, liveNodes, collections);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set, ZkStateReader)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, ZkStateReader stateReader) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap(),stateReader);\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,DocCollection> collections = new LinkedHashMap<String,DocCollection>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue());\n      collections.put(collectionName, coll);\n    }\n\n    // System.out.println(\"######## ClusterState.load result:\" + collections);\n    return new ClusterState(version, liveNodes, collections);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],ZkStateReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],ZkStateReader).mjava","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set, ZkStateReader)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, ZkStateReader stateReader) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap(),stateReader);\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,DocCollection> collections = new LinkedHashMap<>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue(), version);\n      collections.put(collectionName, coll);\n    }\n\n    // System.out.println(\"######## ClusterState.load result:\" + collections);\n    return new ClusterState( version, liveNodes, collections,stateReader);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set, ZkStateReader)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, ZkStateReader stateReader) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap(),stateReader);\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,DocCollection> collections = new LinkedHashMap<>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue());\n      collections.put(collectionName, coll);\n    }\n\n    // System.out.println(\"######## ClusterState.load result:\" + collections);\n    return new ClusterState(version, liveNodes, collections);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],ZkStateReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set, ZkStateReader)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, ZkStateReader stateReader) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap(),stateReader);\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,DocCollection> collections = new LinkedHashMap<>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue(), version);\n      collections.put(collectionName, coll);\n    }\n\n    // System.out.println(\"######## ClusterState.load result:\" + collections);\n    return new ClusterState( version, liveNodes, collections,stateReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}