{"path":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","commits":[{"id":"3290eeb0d208ba00305a6cdaaf3f97556f4b9586","date":1198071392,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","pathOld":"/dev/null","sourceNew":"  public void testStopwords() throws Exception {\n    QueryParser qp = new QueryParser(\"a\", new StopAnalyzer(new String[]{\"the\", \"foo\"}));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"693d6573b6621fc1265316fc6b042c24235c81d8","date":1199049557,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    QueryParser qp = new QueryParser(\"a\", new StopAnalyzer(new String[]{\"the\", \"foo\"}));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    QueryParser qp = new QueryParser(\"a\", new StopAnalyzer(new String[]{\"the\", \"foo\"}));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    QueryParser qp = new QueryParser(\"a\", new StopAnalyzer(StopFilter.makeStopSet(\"the\", \"foo\"), true));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    QueryParser qp = new QueryParser(\"a\", new StopAnalyzer(new String[]{\"the\", \"foo\"}));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"a\", new StopAnalyzer(Version.LUCENE_CURRENT, StopFilter.makeStopSet(\"the\", \"foo\")));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    QueryParser qp = new QueryParser(\"a\", new StopAnalyzer(StopFilter.makeStopSet(\"the\", \"foo\"), true));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"a\", new StopAnalyzer(Version.LUCENE_CURRENT, StopFilter.makeStopSet(Version.LUCENE_CURRENT, \"the\", \"foo\")));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"a\", new StopAnalyzer(Version.LUCENE_CURRENT, StopFilter.makeStopSet(\"the\", \"foo\")));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"foo\")));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"a\", new StopAnalyzer(Version.LUCENE_CURRENT, StopFilter.makeStopSet(Version.LUCENE_CURRENT, \"the\", \"foo\")));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"foo\")));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"foo\")));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"foo\")));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"foo\")));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \" + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["693d6573b6621fc1265316fc6b042c24235c81d8"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"693d6573b6621fc1265316fc6b042c24235c81d8":["3290eeb0d208ba00305a6cdaaf3f97556f4b9586"],"3290eeb0d208ba00305a6cdaaf3f97556f4b9586":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3290eeb0d208ba00305a6cdaaf3f97556f4b9586"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"693d6573b6621fc1265316fc6b042c24235c81d8":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3290eeb0d208ba00305a6cdaaf3f97556f4b9586":["693d6573b6621fc1265316fc6b042c24235c81d8"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1116b3450a9c1642c89445d131b37344055245":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}