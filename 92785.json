{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#export().mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#export().mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#export().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<?> export() {\n    final NamedList<Object> base = (NamedList<Object>)super.export();\n    NamedList<NamedList<?>> facetList = new NamedList<>();\n    \n    // Add the field facet buckets to the output\n    base.add(\"fieldFacets\",facetList);\n    for( FieldFacetRequest freq : request.getFieldFacets() ){\n      final String name = freq.getName();\n      if (hiddenFieldFacets.contains(name)) {\n        continue;\n      }\n      final Map<String,Expression[]> buckets = fieldFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n     \n      final FacetSortSpecification sort = fr.getSort();\n      final int limit = fr.getLimit();\n      final int offset = fr.getOffset();\n      final boolean showMissing = fr.showsMissing();\n      if (!showMissing) {\n        buckets.remove(MISSING_VALUE);\n      }\n      // Sorting the buckets if a sort specification is provided\n      if( sort != null && buckets.values().iterator().hasNext()){\n        int sortPlace = Arrays.binarySearch(expressionNames, sort.getStatistic());\n        final Expression first = buckets.values().iterator().next()[sortPlace];\n        final Comparator<Expression> comp = (Comparator<Expression>) first.comparator(sort.getDirection());\n        \n        final List<Entry<String,Expression[]>> sorted = new ArrayList<>(buckets.size());\n        Iterables.addAll(sorted, iter);\n        Collections.sort(sorted, new EntryComparator(comp,sortPlace));\n        iter = sorted;\n      }\n      // apply the limit\n      if( limit > AnalyticsContentHandler.DEFAULT_FACET_LIMIT ){\n        if( offset > 0 ){\n          iter = Iterables.skip(iter, offset);\n        }\n        iter = Iterables.limit(iter, limit);\n      }\n      \n      // Export each expression in the bucket.\n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    // Add the range facet buckets to the output\n    facetList = new NamedList<>();\n    base.add(\"rangeFacets\",facetList);\n    for( RangeFacetRequest freq : request.getRangeFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = rangeFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n    \n    // Add the query facet buckets to the output\n    facetList = new NamedList<>();\n    base.add(\"queryFacets\",facetList);\n    for( QueryFacetRequest freq : request.getQueryFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = queryFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    return base;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<?> export() {\n    final NamedList<Object> base = (NamedList<Object>)super.export();\n    NamedList<NamedList<?>> facetList = new NamedList<>();\n    \n    // Add the field facet buckets to the output\n    base.add(\"fieldFacets\",facetList);\n    for( FieldFacetRequest freq : request.getFieldFacets() ){\n      final String name = freq.getName();\n      if (hiddenFieldFacets.contains(name)) {\n        continue;\n      }\n      final Map<String,Expression[]> buckets = fieldFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n     \n      final FacetSortSpecification sort = fr.getSort();\n      final int limit = fr.getLimit();\n      final int offset = fr.getOffset();\n      final boolean showMissing = fr.showsMissing();\n      if (!showMissing) {\n        buckets.remove(MISSING_VALUE);\n      }\n      // Sorting the buckets if a sort specification is provided\n      if( sort != null && buckets.values().iterator().hasNext()){\n        int sortPlace = Arrays.binarySearch(expressionNames, sort.getStatistic());\n        final Expression first = buckets.values().iterator().next()[sortPlace];\n        final Comparator<Expression> comp = (Comparator<Expression>) first.comparator(sort.getDirection());\n        \n        final List<Entry<String,Expression[]>> sorted = new ArrayList<>(buckets.size());\n        Iterables.addAll(sorted, iter);\n        Collections.sort(sorted, new EntryComparator(comp,sortPlace));\n        iter = sorted;\n      }\n      // apply the limit\n      if( limit > AnalyticsContentHandler.DEFAULT_FACET_LIMIT ){\n        if( offset > 0 ){\n          iter = Iterables.skip(iter, offset);\n        }\n        iter = Iterables.limit(iter, limit);\n      }\n      \n      // Export each expression in the bucket.\n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    // Add the range facet buckets to the output\n    facetList = new NamedList<>();\n    base.add(\"rangeFacets\",facetList);\n    for( RangeFacetRequest freq : request.getRangeFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = rangeFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n    \n    // Add the query facet buckets to the output\n    facetList = new NamedList<>();\n    base.add(\"queryFacets\",facetList);\n    for( QueryFacetRequest freq : request.getQueryFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = queryFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    return base;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#export().mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<?> export() {\n    final NamedList<Object> base = (NamedList<Object>)super.export();\n    NamedList<NamedList<?>> facetList = new NamedList<>();\n    \n    // Add the field facet buckets to the output\n    base.add(\"fieldFacets\",facetList);\n    for( FieldFacetRequest freq : request.getFieldFacets() ){\n      final String name = freq.getName();\n      if (hiddenFieldFacets.contains(name)) {\n        continue;\n      }\n      final Map<String,Expression[]> buckets = fieldFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n     \n      final FacetSortSpecification sort = fr.getSort();\n      final int limit = fr.getLimit();\n      final int offset = fr.getOffset();\n      final boolean showMissing = fr.showsMissing();\n      if (!showMissing) {\n        buckets.remove(MISSING_VALUE);\n      }\n      // Sorting the buckets if a sort specification is provided\n      if( sort != null && buckets.values().iterator().hasNext()){\n        int sortPlace = Arrays.binarySearch(expressionNames, sort.getStatistic());\n        final Expression first = buckets.values().iterator().next()[sortPlace];\n        final Comparator<Expression> comp = (Comparator<Expression>) first.comparator(sort.getDirection());\n        \n        final List<Entry<String,Expression[]>> sorted = new ArrayList<>(buckets.size());\n        Iterables.addAll(sorted, iter);\n        Collections.sort(sorted, new EntryComparator(comp,sortPlace));\n        iter = sorted;\n      }\n      // apply the limit\n      if( limit > AnalyticsContentHandler.DEFAULT_FACET_LIMIT ){\n        if( offset > 0 ){\n          iter = Iterables.skip(iter, offset);\n        }\n        iter = Iterables.limit(iter, limit);\n      }\n      \n      // Export each expression in the bucket.\n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    // Add the range facet buckets to the output\n    facetList = new NamedList<>();\n    base.add(\"rangeFacets\",facetList);\n    for( RangeFacetRequest freq : request.getRangeFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = rangeFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n    \n    // Add the query facet buckets to the output\n    facetList = new NamedList<>();\n    base.add(\"queryFacets\",facetList);\n    for( QueryFacetRequest freq : request.getQueryFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = queryFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    return base;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#export().mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<?> export() {\n    final NamedList<Object> base = (NamedList<Object>)super.export();\n    NamedList<NamedList<?>> facetList = new NamedList<>();\n    \n    // Add the field facet buckets to the output\n    base.add(\"fieldFacets\",facetList);\n    for( FieldFacetRequest freq : request.getFieldFacets() ){\n      final String name = freq.getName();\n      if (hiddenFieldFacets.contains(name)) {\n        continue;\n      }\n      final Map<String,Expression[]> buckets = fieldFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n     \n      final FacetSortSpecification sort = fr.getSort();\n      final int limit = fr.getLimit();\n      final int offset = fr.getOffset();\n      final boolean showMissing = fr.showsMissing();\n      if (!showMissing) {\n        buckets.remove(MISSING_VALUE);\n      }\n      // Sorting the buckets if a sort specification is provided\n      if( sort != null && buckets.values().iterator().hasNext()){\n        int sortPlace = Arrays.binarySearch(expressionNames, sort.getStatistic());\n        final Expression first = buckets.values().iterator().next()[sortPlace];\n        final Comparator<Expression> comp = (Comparator<Expression>) first.comparator(sort.getDirection());\n        \n        final List<Entry<String,Expression[]>> sorted = new ArrayList<>(buckets.size());\n        Iterables.addAll(sorted, iter);\n        Collections.sort(sorted, new EntryComparator(comp,sortPlace));\n        iter = sorted;\n      }\n      // apply the limit\n      if( limit > AnalyticsContentHandler.DEFAULT_FACET_LIMIT ){\n        if( offset > 0 ){\n          iter = Iterables.skip(iter, offset);\n        }\n        iter = Iterables.limit(iter, limit);\n      }\n      \n      // Export each expression in the bucket.\n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    // Add the range facet buckets to the output\n    facetList = new NamedList<>();\n    base.add(\"rangeFacets\",facetList);\n    for( RangeFacetRequest freq : request.getRangeFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = rangeFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n    \n    // Add the query facet buckets to the output\n    facetList = new NamedList<>();\n    base.add(\"queryFacets\",facetList);\n    for( QueryFacetRequest freq : request.getQueryFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = queryFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    return base;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#export().mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<?> export() {\n    final NamedList<Object> base = (NamedList<Object>)super.export();\n    NamedList<NamedList<?>> facetList = new NamedList<>();\n    \n    // Add the field facet buckets to the output\n    base.add(\"fieldFacets\",facetList);\n    for( FieldFacetRequest freq : request.getFieldFacets() ){\n      final String name = freq.getName();\n      if (hiddenFieldFacets.contains(name)) {\n        continue;\n      }\n      final Map<String,Expression[]> buckets = fieldFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n     \n      final FacetSortSpecification sort = fr.getSort();\n      final int limit = fr.getLimit();\n      final int offset = fr.getOffset();\n      final boolean showMissing = fr.showsMissing();\n      if (!showMissing) {\n        buckets.remove(MISSING_VALUE);\n      }\n      // Sorting the buckets if a sort specification is provided\n      if( sort != null && buckets.values().iterator().hasNext()){\n        int sortPlace = Arrays.binarySearch(expressionNames, sort.getStatistic());\n        final Expression first = buckets.values().iterator().next()[sortPlace];\n        final Comparator<Expression> comp = (Comparator<Expression>) first.comparator(sort.getDirection());\n        \n        final List<Entry<String,Expression[]>> sorted = new ArrayList<>(buckets.size());\n        Iterables.addAll(sorted, iter);\n        Collections.sort(sorted, new EntryComparator(comp,sortPlace));\n        iter = sorted;\n      }\n      // apply the limit\n      if( limit > AnalyticsContentHandler.DEFAULT_FACET_LIMIT ){\n        if( offset > 0 ){\n          iter = Iterables.skip(iter, offset);\n        }\n        iter = Iterables.limit(iter, limit);\n      }\n      \n      // Export each expression in the bucket.\n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    // Add the range facet buckets to the output\n    facetList = new NamedList<>();\n    base.add(\"rangeFacets\",facetList);\n    for( RangeFacetRequest freq : request.getRangeFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = rangeFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n    \n    // Add the query facet buckets to the output\n    facetList = new NamedList<>();\n    base.add(\"queryFacets\",facetList);\n    for( QueryFacetRequest freq : request.getQueryFacets() ){\n      final String name = freq.getName();\n      final Map<String,Expression[]> buckets = queryFacetExpressions.get(name);\n      final NamedList<Object> bucketBase = new NamedList<>();\n\n      Iterable<Entry<String,Expression[]>> iter = buckets.entrySet();\n      \n      for( Entry<String,Expression[]> bucket : iter ){\n        bucketBase.add(bucket.getKey(),export(bucket.getValue()));\n      }\n      \n      facetList.add(name, bucketBase);\n    }\n\n    return base;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["0f719faa74f7213d4a395510dbc1f1b7cb178484","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["0f719faa74f7213d4a395510dbc1f1b7cb178484","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}