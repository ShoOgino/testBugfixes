{"path":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","sourceNew":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p/>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * \n   * @throws IOException\n   */\n  public void end() throws IOException {\n    // do nothing by default\n  }\n\n","sourceOld":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p/>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * \n   * @throws IOException\n   */\n  public void end() throws IOException {\n    // do nothing by default\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","sourceNew":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p/>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    // do nothing by default\n  }\n\n","sourceOld":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p/>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * \n   * @throws IOException\n   */\n  public void end() throws IOException {\n    // do nothing by default\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3f8a0f8bebc057ea4bdf65150b3fdc539db3d03","date":1377018786,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","sourceNew":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p/>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * <p>\n   * Additionally any skipped positions (such as those removed by a stopfilter)\n   * can be applied to the position increment, or any adjustment of other\n   * attributes where the end-of-stream value may be important.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    clearAttributes(); // LUCENE-3849: don't consume dirty atts\n    if (hasAttribute(PositionIncrementAttribute.class)) {\n      getAttribute(PositionIncrementAttribute.class).setPositionIncrement(0);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p/>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    // do nothing by default\n  }\n\n","bugFix":null,"bugIntro":["872fe13efaa79731f786f77c6688011fc7101858"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","sourceNew":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p/>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * <p>\n   * Additionally any skipped positions (such as those removed by a stopfilter)\n   * can be applied to the position increment, or any adjustment of other\n   * attributes where the end-of-stream value may be important.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    clearAttributes(); // LUCENE-3849: don't consume dirty atts\n    if (hasAttribute(PositionIncrementAttribute.class)) {\n      getAttribute(PositionIncrementAttribute.class).setPositionIncrement(0);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p/>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    // do nothing by default\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd8e41d532014fca193d0a5d22a7ae75f795ab3","date":1380016401,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","sourceNew":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p/>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * <p>\n   * Additionally any skipped positions (such as those removed by a stopfilter)\n   * can be applied to the position increment, or any adjustment of other\n   * attributes where the end-of-stream value may be important.\n   * <p>\n   * If you override this method, always call {@code super.end()}.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    clearAttributes(); // LUCENE-3849: don't consume dirty atts\n    if (hasAttribute(PositionIncrementAttribute.class)) {\n      getAttribute(PositionIncrementAttribute.class).setPositionIncrement(0);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p/>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * <p>\n   * Additionally any skipped positions (such as those removed by a stopfilter)\n   * can be applied to the position increment, or any adjustment of other\n   * attributes where the end-of-stream value may be important.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    clearAttributes(); // LUCENE-3849: don't consume dirty atts\n    if (hasAttribute(PositionIncrementAttribute.class)) {\n      getAttribute(PositionIncrementAttribute.class).setPositionIncrement(0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"63241596de245e96a0a3c36c7b03eb92130b81db","date":1398708795,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","sourceNew":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p/>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * <p>\n   * Additionally any skipped positions (such as those removed by a stopfilter)\n   * can be applied to the position increment, or any adjustment of other\n   * attributes where the end-of-stream value may be important.\n   * <p>\n   * If you override this method, always call {@code super.end()}.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    clearAttributes(); // LUCENE-3849: don't consume dirty atts\n    PositionIncrementAttribute posIncAtt = getAttribute(PositionIncrementAttribute.class);\n    if (posIncAtt != null) {\n      posIncAtt.setPositionIncrement(0);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p/>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * <p>\n   * Additionally any skipped positions (such as those removed by a stopfilter)\n   * can be applied to the position increment, or any adjustment of other\n   * attributes where the end-of-stream value may be important.\n   * <p>\n   * If you override this method, always call {@code super.end()}.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    clearAttributes(); // LUCENE-3849: don't consume dirty atts\n    if (hasAttribute(PositionIncrementAttribute.class)) {\n      getAttribute(PositionIncrementAttribute.class).setPositionIncrement(0);\n    }\n  }\n\n","bugFix":null,"bugIntro":["872fe13efaa79731f786f77c6688011fc7101858"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","sourceNew":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p/>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * <p>\n   * Additionally any skipped positions (such as those removed by a stopfilter)\n   * can be applied to the position increment, or any adjustment of other\n   * attributes where the end-of-stream value may be important.\n   * <p>\n   * If you override this method, always call {@code super.end()}.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    clearAttributes(); // LUCENE-3849: don't consume dirty atts\n    PositionIncrementAttribute posIncAtt = getAttribute(PositionIncrementAttribute.class);\n    if (posIncAtt != null) {\n      posIncAtt.setPositionIncrement(0);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p/>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * <p>\n   * Additionally any skipped positions (such as those removed by a stopfilter)\n   * can be applied to the position increment, or any adjustment of other\n   * attributes where the end-of-stream value may be important.\n   * <p>\n   * If you override this method, always call {@code super.end()}.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    clearAttributes(); // LUCENE-3849: don't consume dirty atts\n    if (hasAttribute(PositionIncrementAttribute.class)) {\n      getAttribute(PositionIncrementAttribute.class).setPositionIncrement(0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","sourceNew":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p/>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * <p>\n   * Additionally any skipped positions (such as those removed by a stopfilter)\n   * can be applied to the position increment, or any adjustment of other\n   * attributes where the end-of-stream value may be important.\n   * <p>\n   * If you override this method, always call {@code super.end()}.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    clearAttributes(); // LUCENE-3849: don't consume dirty atts\n    PositionIncrementAttribute posIncAtt = getAttribute(PositionIncrementAttribute.class);\n    if (posIncAtt != null) {\n      posIncAtt.setPositionIncrement(0);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p/>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * <p>\n   * Additionally any skipped positions (such as those removed by a stopfilter)\n   * can be applied to the position increment, or any adjustment of other\n   * attributes where the end-of-stream value may be important.\n   * <p>\n   * If you override this method, always call {@code super.end()}.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    clearAttributes(); // LUCENE-3849: don't consume dirty atts\n    if (hasAttribute(PositionIncrementAttribute.class)) {\n      getAttribute(PositionIncrementAttribute.class).setPositionIncrement(0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14600834a1fbc7c12faf344466e00cca8cc67de4","date":1423303834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","sourceNew":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * <p>\n   * Additionally any skipped positions (such as those removed by a stopfilter)\n   * can be applied to the position increment, or any adjustment of other\n   * attributes where the end-of-stream value may be important.\n   * <p>\n   * If you override this method, always call {@code super.end()}.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    clearAttributes(); // LUCENE-3849: don't consume dirty atts\n    PositionIncrementAttribute posIncAtt = getAttribute(PositionIncrementAttribute.class);\n    if (posIncAtt != null) {\n      posIncAtt.setPositionIncrement(0);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p/>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * <p>\n   * Additionally any skipped positions (such as those removed by a stopfilter)\n   * can be applied to the position increment, or any adjustment of other\n   * attributes where the end-of-stream value may be important.\n   * <p>\n   * If you override this method, always call {@code super.end()}.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    clearAttributes(); // LUCENE-3849: don't consume dirty atts\n    PositionIncrementAttribute posIncAtt = getAttribute(PositionIncrementAttribute.class);\n    if (posIncAtt != null) {\n      posIncAtt.setPositionIncrement(0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"872fe13efaa79731f786f77c6688011fc7101858","date":1471619685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","sourceNew":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * <p>\n   * Additionally any skipped positions (such as those removed by a stopfilter)\n   * can be applied to the position increment, or any adjustment of other\n   * attributes where the end-of-stream value may be important.\n   * <p>\n   * If you override this method, always call {@code super.end()}.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    endAttributes(); // LUCENE-3849: don't consume dirty atts\n  }\n\n","sourceOld":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * <p>\n   * Additionally any skipped positions (such as those removed by a stopfilter)\n   * can be applied to the position increment, or any adjustment of other\n   * attributes where the end-of-stream value may be important.\n   * <p>\n   * If you override this method, always call {@code super.end()}.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    clearAttributes(); // LUCENE-3849: don't consume dirty atts\n    PositionIncrementAttribute posIncAtt = getAttribute(PositionIncrementAttribute.class);\n    if (posIncAtt != null) {\n      posIncAtt.setPositionIncrement(0);\n    }\n  }\n\n","bugFix":["f3f8a0f8bebc057ea4bdf65150b3fdc539db3d03","63241596de245e96a0a3c36c7b03eb92130b81db"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","sourceNew":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * <p>\n   * Additionally any skipped positions (such as those removed by a stopfilter)\n   * can be applied to the position increment, or any adjustment of other\n   * attributes where the end-of-stream value may be important.\n   * <p>\n   * If you override this method, always call {@code super.end()}.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    endAttributes(); // LUCENE-3849: don't consume dirty atts\n  }\n\n","sourceOld":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * <p>\n   * Additionally any skipped positions (such as those removed by a stopfilter)\n   * can be applied to the position increment, or any adjustment of other\n   * attributes where the end-of-stream value may be important.\n   * <p>\n   * If you override this method, always call {@code super.end()}.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    clearAttributes(); // LUCENE-3849: don't consume dirty atts\n    PositionIncrementAttribute posIncAtt = getAttribute(PositionIncrementAttribute.class);\n    if (posIncAtt != null) {\n      posIncAtt.setPositionIncrement(0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/TokenStream#end().mjava","sourceNew":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * <p>\n   * Additionally any skipped positions (such as those removed by a stopfilter)\n   * can be applied to the position increment, or any adjustment of other\n   * attributes where the end-of-stream value may be important.\n   * <p>\n   * If you override this method, always call {@code super.end()}.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    endAttributes(); // LUCENE-3849: don't consume dirty atts\n  }\n\n","sourceOld":"  /**\n   * This method is called by the consumer after the last token has been\n   * consumed, after {@link #incrementToken()} returned <code>false</code>\n   * (using the new <code>TokenStream</code> API). Streams implementing the old API\n   * should upgrade to use this feature.\n   * <p>\n   * This method can be used to perform any end-of-stream operations, such as\n   * setting the final offset of a stream. The final offset of a stream might\n   * differ from the offset of the last token eg in case one or more whitespaces\n   * followed after the last token, but a WhitespaceTokenizer was used.\n   * <p>\n   * Additionally any skipped positions (such as those removed by a stopfilter)\n   * can be applied to the position increment, or any adjustment of other\n   * attributes where the end-of-stream value may be important.\n   * <p>\n   * If you override this method, always call {@code super.end()}.\n   * \n   * @throws IOException If an I/O error occurs\n   */\n  public void end() throws IOException {\n    clearAttributes(); // LUCENE-3849: don't consume dirty atts\n    PositionIncrementAttribute posIncAtt = getAttribute(PositionIncrementAttribute.class);\n    if (posIncAtt != null) {\n      posIncAtt.setPositionIncrement(0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["14600834a1fbc7c12faf344466e00cca8cc67de4","872fe13efaa79731f786f77c6688011fc7101858"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["8fd8e41d532014fca193d0a5d22a7ae75f795ab3","3394716f52b34ab259ad5247e7595d9f9db6e935"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","f3f8a0f8bebc057ea4bdf65150b3fdc539db3d03"],"14600834a1fbc7c12faf344466e00cca8cc67de4":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"8fd8e41d532014fca193d0a5d22a7ae75f795ab3":["f3f8a0f8bebc057ea4bdf65150b3fdc539db3d03"],"872fe13efaa79731f786f77c6688011fc7101858":["14600834a1fbc7c12faf344466e00cca8cc67de4"],"f3f8a0f8bebc057ea4bdf65150b3fdc539db3d03":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["14600834a1fbc7c12faf344466e00cca8cc67de4","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["8fd8e41d532014fca193d0a5d22a7ae75f795ab3","63241596de245e96a0a3c36c7b03eb92130b81db"],"63241596de245e96a0a3c36c7b03eb92130b81db":["8fd8e41d532014fca193d0a5d22a7ae75f795ab3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","f3f8a0f8bebc057ea4bdf65150b3fdc539db3d03"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"14600834a1fbc7c12faf344466e00cca8cc67de4":["403d05f7f8d69b65659157eff1bc1d2717f04c66","872fe13efaa79731f786f77c6688011fc7101858","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"8fd8e41d532014fca193d0a5d22a7ae75f795ab3":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3394716f52b34ab259ad5247e7595d9f9db6e935","63241596de245e96a0a3c36c7b03eb92130b81db"],"872fe13efaa79731f786f77c6688011fc7101858":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"f3f8a0f8bebc057ea4bdf65150b3fdc539db3d03":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","8fd8e41d532014fca193d0a5d22a7ae75f795ab3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","14600834a1fbc7c12faf344466e00cca8cc67de4"],"63241596de245e96a0a3c36c7b03eb92130b81db":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}