{"path":"solr/core/src/test/org/apache/solr/api/TestPathTrie#testPathTrie().mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/api/TestPathTrie#testPathTrie().mjava","pathOld":"/dev/null","sourceNew":"  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/api/TestPathTrie#testPathTrie().mjava","pathOld":"/dev/null","sourceNew":"  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5174b677b2536f97776e6b67e8c10ae5c66e6fa2","date":1496916595,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestPathTrie#testPathTrie().mjava","pathOld":"solr/core/src/test/org/apache/solr/api/TestPathTrie#testPathTrie().mjava","sourceNew":"  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n\n  }\n\n","sourceOld":"  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestPathTrie#testPathTrie().mjava","pathOld":"solr/core/src/test/org/apache/solr/api/TestPathTrie#testPathTrie().mjava","sourceNew":"  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n\n  }\n\n","sourceOld":"  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestPathTrie#testPathTrie().mjava","pathOld":"solr/core/src/test/org/apache/solr/api/TestPathTrie#testPathTrie().mjava","sourceNew":"  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n\n  }\n\n","sourceOld":"  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"28288370235ed02234a64753cdbf0c6ec096304a":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","28288370235ed02234a64753cdbf0c6ec096304a","5174b677b2536f97776e6b67e8c10ae5c66e6fa2","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}