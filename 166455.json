{"path":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","commits":[{"id":"150488c1317972164a9a824be05b1ba2ba0fc68c","date":1284316090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#setUp().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Random random = newStaticRandom(TestBasics.class);\n    directory = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(random, \"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f9dba8ffba48fba97d7a90fd45f6da87ba55736","date":1285244347,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Random random = newStaticRandom(TestBasics.class);\n    directory = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(random, \"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"498e168d849b4dbc097ac7b31f6db170d6f55725","date":1286807836,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c34a3639838887e7997850b6be80f838a4d6f7","date":1290278815,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = new SlowMultiReaderWrapper(writer.getReader());\n    searcher = new IndexSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e454a2545d2cb65a99044886565f39373be24796","date":1291079172,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = new IndexSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = new SlowMultiReaderWrapper(writer.getReader());\n    searcher = new IndexSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = new IndexSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = new IndexSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newInOrderLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = new IndexSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = new IndexSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newInOrderLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newInOrderLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = new IndexSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newInOrderLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = new IndexSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newInOrderLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = new IndexSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newInOrderLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newInOrderLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, simplePayloadAnalyzer)\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, simplePayloadAnalyzer)\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, simplePayloadAnalyzer)\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newInOrderLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, simplePayloadAnalyzer)\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, true))\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newInOrderLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, simplePayloadAnalyzer)\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, simplePayloadAnalyzer)\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, simplePayloadAnalyzer)\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 100, 1000)).setMergePolicy(newLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, simplePayloadAnalyzer)\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)).setMergePolicy(newLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, simplePayloadAnalyzer)\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 100, 1000)).setMergePolicy(newLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, simplePayloadAnalyzer)\n                                                     .setMaxBufferedDocs(_TestUtil.nextInt(random, 100, 1000)).setMergePolicy(newLogMergePolicy()));\n    //writer.infoStream = System.out;\n    for (int i = 0; i < 2000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"51c34a3639838887e7997850b6be80f838a4d6f7":["498e168d849b4dbc097ac7b31f6db170d6f55725"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"e454a2545d2cb65a99044886565f39373be24796":["51c34a3639838887e7997850b6be80f838a4d6f7"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e454a2545d2cb65a99044886565f39373be24796"],"498e168d849b4dbc097ac7b31f6db170d6f55725":["5f9dba8ffba48fba97d7a90fd45f6da87ba55736"],"c19f985e36a65cc969e8e564fe337a0d41512075":["e454a2545d2cb65a99044886565f39373be24796"],"5f9dba8ffba48fba97d7a90fd45f6da87ba55736":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["c19f985e36a65cc969e8e564fe337a0d41512075"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"3bb13258feba31ab676502787ab2e1779f129b7a":["498e168d849b4dbc097ac7b31f6db170d6f55725","e454a2545d2cb65a99044886565f39373be24796"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51c34a3639838887e7997850b6be80f838a4d6f7":["e454a2545d2cb65a99044886565f39373be24796"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"e454a2545d2cb65a99044886565f39373be24796":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","3bb13258feba31ab676502787ab2e1779f129b7a"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"498e168d849b4dbc097ac7b31f6db170d6f55725":["51c34a3639838887e7997850b6be80f838a4d6f7","3bb13258feba31ab676502787ab2e1779f129b7a"],"5f9dba8ffba48fba97d7a90fd45f6da87ba55736":["498e168d849b4dbc097ac7b31f6db170d6f55725"],"c19f985e36a65cc969e8e564fe337a0d41512075":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["01e5948db9a07144112d2f08f28ca2e3cd880348","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","150488c1317972164a9a824be05b1ba2ba0fc68c"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["5f9dba8ffba48fba97d7a90fd45f6da87ba55736"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}