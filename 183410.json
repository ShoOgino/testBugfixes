{"path":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#addField(FieldInfo).mjava","commits":[{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#addField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictWriter#addField(FieldInfo).mjava","sourceNew":"  @Override\n  public TermsConsumer addField(FieldInfo field) {\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field);\n    TermsConsumer terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  public TermsConsumer addField(FieldInfo field) {\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    StandardTermsIndexWriter.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field);\n    TermsConsumer terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#addField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#addField(FieldInfo).mjava","sourceNew":"  @Override\n  public TermsConsumer addField(FieldInfo field) {\n    assert currentField == null || currentField.name.compareTo(field.name) < 0 : \"current field name \" + (currentField == null? null: currentField.name) + \" given: \" +field.name;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field);\n    TermsConsumer terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  public TermsConsumer addField(FieldInfo field) {\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field);\n    TermsConsumer terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#addField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public TermsConsumer addField(FieldInfo field) {\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field);\n    TermsConsumer terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#addField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#addField(FieldInfo).mjava","sourceNew":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field);\n    TermsConsumer terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  public TermsConsumer addField(FieldInfo field) {\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field);\n    TermsConsumer terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#addField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#addField(FieldInfo).mjava","sourceNew":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    assert currentField == null || currentField.name.compareTo(field.name) < 0 : \"current field name \" + (currentField == null? null: currentField.name) + \" given: \" +field.name;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field);\n    TermsConsumer terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  public TermsConsumer addField(FieldInfo field) {\n    assert currentField == null || currentField.name.compareTo(field.name) < 0 : \"current field name \" + (currentField == null? null: currentField.name) + \" given: \" +field.name;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field);\n    TermsConsumer terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#addField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#addField(FieldInfo).mjava","sourceNew":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field);\n    TermsConsumer terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  public TermsConsumer addField(FieldInfo field) {\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field);\n    TermsConsumer terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecd298fdc085e7eba27afa7fae58df1ba1a2808","date":1295102557,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#addField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#addField(FieldInfo).mjava","sourceNew":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field);\n    final TermsWriter terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field);\n    TermsConsumer terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#addField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#addField(FieldInfo).mjava","sourceNew":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field);\n    final TermsWriter terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field);\n    TermsConsumer terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#addField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#addField(FieldInfo).mjava","sourceNew":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    //System.out.println(\"\\nBTW.addField seg=\" + segment + \" field=\" + field.name);\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field, out.getFilePointer());\n    final TermsWriter terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field);\n    final TermsWriter terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#addField(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    assert currentField == null || currentField.name.compareTo(field.name) < 0;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field);\n    final TermsWriter terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#addField(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public TermsConsumer addField(FieldInfo field) throws IOException {\n    assert currentField == null || currentField.name.compareTo(field.name) < 0 : \"current field name \" + (currentField == null? null: currentField.name) + \" given: \" +field.name;\n    currentField = field;\n    TermsIndexWriterBase.FieldWriter fieldIndexWriter = termsIndexWriter.addField(field);\n    TermsConsumer terms = new TermsWriter(fieldIndexWriter, field, postingsWriter);\n    fields.add(terms);\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0","56da903869515527852ee21ea7ef7bfe414cd40d"],"16843358872ed92ba92888ab99df297550b9a36a":["868da859b43505d9d2a023bfeae6dd0c795f5295","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99cf56f3a650b908f7017a72f9d23940418f8a52"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["16843358872ed92ba92888ab99df297550b9a36a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"56da903869515527852ee21ea7ef7bfe414cd40d":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["56da903869515527852ee21ea7ef7bfe414cd40d"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1add9ddc0005b07550d4350720aac22dc9886b3"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"16843358872ed92ba92888ab99df297550b9a36a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["70ad682703b8585f5d0a637efec044d57ec05efb"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["16843358872ed92ba92888ab99df297550b9a36a"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["16843358872ed92ba92888ab99df297550b9a36a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d","0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}