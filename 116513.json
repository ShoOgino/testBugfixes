{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator#fromTermsEnum(LeafReaderContext,int,Query,String,BytesRefIterator).mjava","commits":[{"id":"41ebc07bccf12a902ca6a0077910d18ee38b695f","date":1532336521,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator#fromTermsEnum(LeafReaderContext,int,Query,String,BytesRefIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator#fromTermsEnum(LeafReaderContext,int,String,BytesRefIterator).mjava","sourceNew":"  /**\n   * Create a {@link DisjunctionMatchesIterator} over a list of terms extracted from a {@link BytesRefIterator}\n   *\n   * Only terms that have at least one match in the given document will be included\n   */\n  static MatchesIterator fromTermsEnum(LeafReaderContext context, int doc, Query query, String field, BytesRefIterator terms) throws IOException {\n    Objects.requireNonNull(field);\n    List<MatchesIterator> mis = new ArrayList<>();\n    Terms t = context.reader().terms(field);\n    if (t == null)\n      return null;\n    TermsEnum te = t.iterator();\n    PostingsEnum reuse = null;\n    for (BytesRef term = terms.next(); term != null; term = terms.next()) {\n      if (te.seekExact(term)) {\n        PostingsEnum pe = te.postings(reuse, PostingsEnum.OFFSETS);\n        if (pe.advance(doc) == doc) {\n          mis.add(new TermMatchesIterator(query, pe));\n          reuse = null;\n        }\n        else {\n          reuse = pe;\n        }\n      }\n    }\n    return fromSubIterators(mis);\n  }\n\n","sourceOld":"  /**\n   * Create a {@link DisjunctionMatchesIterator} over a list of terms extracted from a {@link BytesRefIterator}\n   *\n   * Only terms that have at least one match in the given document will be included\n   */\n  static MatchesIterator fromTermsEnum(LeafReaderContext context, int doc, String field, BytesRefIterator terms) throws IOException {\n    Objects.requireNonNull(field);\n    List<MatchesIterator> mis = new ArrayList<>();\n    Terms t = context.reader().terms(field);\n    if (t == null)\n      return null;\n    TermsEnum te = t.iterator();\n    PostingsEnum reuse = null;\n    for (BytesRef term = terms.next(); term != null; term = terms.next()) {\n      if (te.seekExact(term)) {\n        PostingsEnum pe = te.postings(reuse, PostingsEnum.OFFSETS);\n        if (pe.advance(doc) == doc) {\n          mis.add(new TermMatchesIterator(pe));\n          reuse = null;\n        }\n        else {\n          reuse = pe;\n        }\n      }\n    }\n    return fromSubIterators(mis);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed92e59fbbda9c37864901408389996d7ac5f97f","date":1565173175,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator#fromTermsEnum(LeafReaderContext,int,Query,String,BytesRefIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator#fromTermsEnum(LeafReaderContext,int,Query,String,BytesRefIterator).mjava","sourceNew":"  /**\n   * Create a {@link DisjunctionMatchesIterator} over a list of terms extracted from a {@link BytesRefIterator}\n   *\n   * Only terms that have at least one match in the given document will be included\n   */\n  static MatchesIterator fromTermsEnum(LeafReaderContext context, int doc, Query query, String field, BytesRefIterator terms) throws IOException {\n    Objects.requireNonNull(field);\n    Terms t = context.reader().terms(field);\n    if (t == null)\n      return null;\n    TermsEnum te = t.iterator();\n    PostingsEnum reuse = null;\n    for (BytesRef term = terms.next(); term != null; term = terms.next()) {\n      if (te.seekExact(term)) {\n        PostingsEnum pe = te.postings(reuse, PostingsEnum.OFFSETS);\n        if (pe.advance(doc) == doc) {\n          return new TermsEnumDisjunctionMatchesIterator(new TermMatchesIterator(query, pe), terms, te, doc, query);\n        }\n        else {\n          reuse = pe;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Create a {@link DisjunctionMatchesIterator} over a list of terms extracted from a {@link BytesRefIterator}\n   *\n   * Only terms that have at least one match in the given document will be included\n   */\n  static MatchesIterator fromTermsEnum(LeafReaderContext context, int doc, Query query, String field, BytesRefIterator terms) throws IOException {\n    Objects.requireNonNull(field);\n    List<MatchesIterator> mis = new ArrayList<>();\n    Terms t = context.reader().terms(field);\n    if (t == null)\n      return null;\n    TermsEnum te = t.iterator();\n    PostingsEnum reuse = null;\n    for (BytesRef term = terms.next(); term != null; term = terms.next()) {\n      if (te.seekExact(term)) {\n        PostingsEnum pe = te.postings(reuse, PostingsEnum.OFFSETS);\n        if (pe.advance(doc) == doc) {\n          mis.add(new TermMatchesIterator(query, pe));\n          reuse = null;\n        }\n        else {\n          reuse = pe;\n        }\n      }\n    }\n    return fromSubIterators(mis);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ed92e59fbbda9c37864901408389996d7ac5f97f":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ed92e59fbbda9c37864901408389996d7ac5f97f"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"ed92e59fbbda9c37864901408389996d7ac5f97f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["ed92e59fbbda9c37864901408389996d7ac5f97f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}