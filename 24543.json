{"path":"lucene/core/src/java/org/apache/lucene/index/MultiDimensionalValues#get(IndexReader).mjava","commits":[{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDimensionalValues#get(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public static DimensionalValues get(IndexReader r) {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getDimensionalValues();\n    }\n\n    boolean anyReal = false;\n    List<DimensionalValues> values = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      DimensionalValues v = context.reader().getDimensionalValues();\n      if (v != null) {\n        values.add(v);\n        docBases.add(context.docBase);\n      }\n    }\n\n    return new MultiDimensionalValues(values, docBases);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e7f3c6423c9f64e03c630917e38b85c14ea0bcc","date":1446148297,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDimensionalValues#get(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDimensionalValues#get(IndexReader).mjava","sourceNew":"  public static DimensionalValues get(IndexReader r) {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getDimensionalValues();\n    }\n\n    List<DimensionalValues> values = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      DimensionalValues v = context.reader().getDimensionalValues();\n      if (v != null) {\n        values.add(v);\n        docBases.add(context.docBase);\n      }\n    }\n\n    return new MultiDimensionalValues(values, docBases);\n  }\n\n","sourceOld":"  public static DimensionalValues get(IndexReader r) {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getDimensionalValues();\n    }\n\n    boolean anyReal = false;\n    List<DimensionalValues> values = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      DimensionalValues v = context.reader().getDimensionalValues();\n      if (v != null) {\n        values.add(v);\n        docBases.add(context.docBase);\n      }\n    }\n\n    return new MultiDimensionalValues(values, docBases);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDimensionalValues#get(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDimensionalValues#get(IndexReader).mjava","sourceNew":"  public static DimensionalValues get(IndexReader r) {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getDimensionalValues();\n    }\n\n    List<DimensionalValues> values = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      DimensionalValues v = context.reader().getDimensionalValues();\n      if (v != null) {\n        values.add(v);\n        docBases.add(context.docBase);\n      }\n    }\n\n    if (values.isEmpty()) {\n      return null;\n    }\n\n    return new MultiDimensionalValues(values, docBases);\n  }\n\n","sourceOld":"  public static DimensionalValues get(IndexReader r) {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getDimensionalValues();\n    }\n\n    List<DimensionalValues> values = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      DimensionalValues v = context.reader().getDimensionalValues();\n      if (v != null) {\n        values.add(v);\n        docBases.add(context.docBase);\n      }\n    }\n\n    return new MultiDimensionalValues(values, docBases);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiPointValues#get(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDimensionalValues#get(IndexReader).mjava","sourceNew":"  public static PointValues get(IndexReader r) {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getPointValues();\n    }\n\n    List<PointValues> values = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      PointValues v = context.reader().getPointValues();\n      if (v != null) {\n        values.add(v);\n        docBases.add(context.docBase);\n      }\n    }\n\n    if (values.isEmpty()) {\n      return null;\n    }\n\n    return new MultiPointValues(values, docBases);\n  }\n\n","sourceOld":"  public static DimensionalValues get(IndexReader r) {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getDimensionalValues();\n    }\n\n    List<DimensionalValues> values = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      DimensionalValues v = context.reader().getDimensionalValues();\n      if (v != null) {\n        values.add(v);\n        docBases.add(context.docBase);\n      }\n    }\n\n    if (values.isEmpty()) {\n      return null;\n    }\n\n    return new MultiDimensionalValues(values, docBases);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["8e7f3c6423c9f64e03c630917e38b85c14ea0bcc"],"8e7f3c6423c9f64e03c630917e38b85c14ea0bcc":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["8e7f3c6423c9f64e03c630917e38b85c14ea0bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"8e7f3c6423c9f64e03c630917e38b85c14ea0bcc":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}