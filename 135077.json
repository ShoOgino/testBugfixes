{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector#mergeSegmentResults(int,int,boolean).mjava","commits":[{"id":"369f44b665973d5aa5fc7d0f2a75ffad475d21ee","date":1331157468,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector#mergeSegmentResults(int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public GroupedFacetResult mergeSegmentResults(int size, int minCount, boolean orderByCount) throws IOException {\n    if (segmentFacetCounts != null) {\n      segmentResults.add(createSegmentResult());\n      segmentFacetCounts = null; // reset\n    }\n\n    int totalCount = 0;\n    int missingCount = 0;\n    SegmentResultPriorityQueue segments = new SegmentResultPriorityQueue(segmentResults.size());\n    for (SegmentResult segmentResult : segmentResults) {\n      missingCount += segmentResult.missing;\n      if (segmentResult.mergePos >= segmentResult.maxTermPos) {\n        continue;\n      }\n      totalCount += segmentResult.total;\n      segmentResult.initializeForMerge();\n      segments.add(segmentResult);\n    }\n\n    GroupedFacetResult facetResult = new GroupedFacetResult(size, minCount, orderByCount, totalCount, missingCount);\n    while (segments.size() > 0) {\n      SegmentResult segmentResult = segments.top();\n      BytesRef currentFacetValue = BytesRef.deepCopyOf(segmentResult.mergeTerm);\n      int count = 0;\n\n      do {\n        count += segmentResult.counts[segmentResult.mergePos++];\n        if (segmentResult.mergePos < segmentResult.maxTermPos) {\n          segmentResult.nextTerm();\n          segmentResult = segments.updateTop();\n        } else {\n          segments.pop();\n          segmentResult = segments.top();\n          if (segmentResult == null) {\n            break;\n          }\n        }\n      } while (currentFacetValue.equals(segmentResult.mergeTerm));\n      facetResult.addFacetCount(currentFacetValue, count);\n    }\n    return facetResult;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector#mergeSegmentResults(int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public GroupedFacetResult mergeSegmentResults(int size, int minCount, boolean orderByCount) throws IOException {\n    if (segmentFacetCounts != null) {\n      segmentResults.add(createSegmentResult());\n      segmentFacetCounts = null; // reset\n    }\n\n    int totalCount = 0;\n    int missingCount = 0;\n    SegmentResultPriorityQueue segments = new SegmentResultPriorityQueue(segmentResults.size());\n    for (SegmentResult segmentResult : segmentResults) {\n      missingCount += segmentResult.missing;\n      if (segmentResult.mergePos >= segmentResult.maxTermPos) {\n        continue;\n      }\n      totalCount += segmentResult.total;\n      segmentResult.initializeForMerge();\n      segments.add(segmentResult);\n    }\n\n    GroupedFacetResult facetResult = new GroupedFacetResult(size, minCount, orderByCount, totalCount, missingCount);\n    while (segments.size() > 0) {\n      SegmentResult segmentResult = segments.top();\n      BytesRef currentFacetValue = BytesRef.deepCopyOf(segmentResult.mergeTerm);\n      int count = 0;\n\n      do {\n        count += segmentResult.counts[segmentResult.mergePos++];\n        if (segmentResult.mergePos < segmentResult.maxTermPos) {\n          segmentResult.nextTerm();\n          segmentResult = segments.updateTop();\n        } else {\n          segments.pop();\n          segmentResult = segments.top();\n          if (segmentResult == null) {\n            break;\n          }\n        }\n      } while (currentFacetValue.equals(segmentResult.mergeTerm));\n      facetResult.addFacetCount(currentFacetValue, count);\n    }\n    return facetResult;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b89f8e2c44ce7efaf10978b9e5c6b95a31706b2","date":1331803866,"type":4,"author":"Martijn van Groningen","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector#mergeSegmentResults(int,int,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public GroupedFacetResult mergeSegmentResults(int size, int minCount, boolean orderByCount) throws IOException {\n    if (segmentFacetCounts != null) {\n      segmentResults.add(createSegmentResult());\n      segmentFacetCounts = null; // reset\n    }\n\n    int totalCount = 0;\n    int missingCount = 0;\n    SegmentResultPriorityQueue segments = new SegmentResultPriorityQueue(segmentResults.size());\n    for (SegmentResult segmentResult : segmentResults) {\n      missingCount += segmentResult.missing;\n      if (segmentResult.mergePos >= segmentResult.maxTermPos) {\n        continue;\n      }\n      totalCount += segmentResult.total;\n      segmentResult.initializeForMerge();\n      segments.add(segmentResult);\n    }\n\n    GroupedFacetResult facetResult = new GroupedFacetResult(size, minCount, orderByCount, totalCount, missingCount);\n    while (segments.size() > 0) {\n      SegmentResult segmentResult = segments.top();\n      BytesRef currentFacetValue = BytesRef.deepCopyOf(segmentResult.mergeTerm);\n      int count = 0;\n\n      do {\n        count += segmentResult.counts[segmentResult.mergePos++];\n        if (segmentResult.mergePos < segmentResult.maxTermPos) {\n          segmentResult.nextTerm();\n          segmentResult = segments.updateTop();\n        } else {\n          segments.pop();\n          segmentResult = segments.top();\n          if (segmentResult == null) {\n            break;\n          }\n        }\n      } while (currentFacetValue.equals(segmentResult.mergeTerm));\n      facetResult.addFacetCount(currentFacetValue, count);\n    }\n    return facetResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","369f44b665973d5aa5fc7d0f2a75ffad475d21ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b89f8e2c44ce7efaf10978b9e5c6b95a31706b2":["369f44b665973d5aa5fc7d0f2a75ffad475d21ee"],"369f44b665973d5aa5fc7d0f2a75ffad475d21ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b89f8e2c44ce7efaf10978b9e5c6b95a31706b2"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","369f44b665973d5aa5fc7d0f2a75ffad475d21ee"],"369f44b665973d5aa5fc7d0f2a75ffad475d21ee":["38e3b736c7ca086d61b7dbb841c905ee115490da","8b89f8e2c44ce7efaf10978b9e5c6b95a31706b2"],"8b89f8e2c44ce7efaf10978b9e5c6b95a31706b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}