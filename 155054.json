{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestIndexSearcher#suggest(String,CharSequence,int,Filter,TopSuggestDocsCollector).mjava","commits":[{"id":"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a","date":1427495869,"type":0,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestIndexSearcher#suggest(String,CharSequence,int,Filter,TopSuggestDocsCollector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Suggests at most <code>num</code> documents filtered by <code>filter</code>\n   * that completes to <code>key</code> for a suggest <code>field</code>\n   * <p>\n   * Collect completions with {@link TopSuggestDocsCollector}\n   * The completions are collected in order of the suggest <code>field</code> weight.\n   * There can be more than one collection of the same document, if the <code>key</code>\n   * matches multiple <code>field</code> values of the same document\n   *\n   * @throws java.lang.IllegalArgumentException if <code>filter</code> does not provide a random access\n   *                                            interface or if <code>field</code> is not a {@link SuggestField}\n   */\n  public void suggest(String field, CharSequence key, int num, Filter filter, TopSuggestDocsCollector collector) throws IOException {\n    // verify input\n    if (field == null) {\n      throw new IllegalArgumentException(\"'field' can not be null\");\n    }\n    if (num <= 0) {\n      throw new IllegalArgumentException(\"'num' should be > 0\");\n    }\n    if (collector == null) {\n      throw new IllegalArgumentException(\"'collector' can not be null\");\n    }\n\n    // build query automaton\n    CompletionAnalyzer analyzer;\n    if (queryAnalyzer instanceof CompletionAnalyzer) {\n      analyzer = (CompletionAnalyzer) queryAnalyzer;\n    } else {\n      analyzer = new CompletionAnalyzer(queryAnalyzer);\n    }\n    final Automaton automaton = analyzer.toAutomaton(field, key);\n\n    // collect results\n    for (LeafReaderContext context : getIndexReader().leaves()) {\n      TopSuggestDocsCollector leafCollector = (TopSuggestDocsCollector) collector.getLeafCollector(context);\n      LeafReader reader = context.reader();\n      Terms terms = reader.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      NRTSuggester suggester;\n      if (terms instanceof CompletionTerms) {\n        CompletionTerms completionTerms = (CompletionTerms) terms;\n        suggester = completionTerms.suggester();\n      } else {\n        throw new IllegalArgumentException(field + \" is not a SuggestField\");\n      }\n      if (suggester == null) {\n        // a segment can have a null suggester\n        // i.e. no FST was built\n        continue;\n      }\n\n      DocIdSet docIdSet = null;\n      if (filter != null) {\n        docIdSet = filter.getDocIdSet(context, reader.getLiveDocs());\n        if (docIdSet == null) {\n          // filter matches no docs in current leave\n          continue;\n        }\n      }\n      suggester.lookup(reader, automaton, num, docIdSet, leafCollector);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestIndexSearcher#suggest(String,CharSequence,int,Filter,TopSuggestDocsCollector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Suggests at most <code>num</code> documents filtered by <code>filter</code>\n   * that completes to <code>key</code> for a suggest <code>field</code>\n   * <p>\n   * Collect completions with {@link TopSuggestDocsCollector}\n   * The completions are collected in order of the suggest <code>field</code> weight.\n   * There can be more than one collection of the same document, if the <code>key</code>\n   * matches multiple <code>field</code> values of the same document\n   *\n   * @throws java.lang.IllegalArgumentException if <code>filter</code> does not provide a random access\n   *                                            interface or if <code>field</code> is not a {@link SuggestField}\n   */\n  public void suggest(String field, CharSequence key, int num, Filter filter, TopSuggestDocsCollector collector) throws IOException {\n    // verify input\n    if (field == null) {\n      throw new IllegalArgumentException(\"'field' can not be null\");\n    }\n    if (num <= 0) {\n      throw new IllegalArgumentException(\"'num' should be > 0\");\n    }\n    if (collector == null) {\n      throw new IllegalArgumentException(\"'collector' can not be null\");\n    }\n\n    // build query automaton\n    CompletionAnalyzer analyzer;\n    if (queryAnalyzer instanceof CompletionAnalyzer) {\n      analyzer = (CompletionAnalyzer) queryAnalyzer;\n    } else {\n      analyzer = new CompletionAnalyzer(queryAnalyzer);\n    }\n    final Automaton automaton = analyzer.toAutomaton(field, key);\n\n    // collect results\n    for (LeafReaderContext context : getIndexReader().leaves()) {\n      TopSuggestDocsCollector leafCollector = (TopSuggestDocsCollector) collector.getLeafCollector(context);\n      LeafReader reader = context.reader();\n      Terms terms = reader.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      NRTSuggester suggester;\n      if (terms instanceof CompletionTerms) {\n        CompletionTerms completionTerms = (CompletionTerms) terms;\n        suggester = completionTerms.suggester();\n      } else {\n        throw new IllegalArgumentException(field + \" is not a SuggestField\");\n      }\n      if (suggester == null) {\n        // a segment can have a null suggester\n        // i.e. no FST was built\n        continue;\n      }\n\n      DocIdSet docIdSet = null;\n      if (filter != null) {\n        docIdSet = filter.getDocIdSet(context, reader.getLiveDocs());\n        if (docIdSet == null) {\n          // filter matches no docs in current leave\n          continue;\n        }\n      }\n      suggester.lookup(reader, automaton, num, docIdSet, leafCollector);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestIndexSearcher#suggest(String,CharSequence,int,Filter,TopSuggestDocsCollector).mjava","sourceNew":null,"sourceOld":"  /**\n   * Suggests at most <code>num</code> documents filtered by <code>filter</code>\n   * that completes to <code>key</code> for a suggest <code>field</code>\n   * <p>\n   * Collect completions with {@link TopSuggestDocsCollector}\n   * The completions are collected in order of the suggest <code>field</code> weight.\n   * There can be more than one collection of the same document, if the <code>key</code>\n   * matches multiple <code>field</code> values of the same document\n   *\n   * @throws java.lang.IllegalArgumentException if <code>filter</code> does not provide a random access\n   *                                            interface or if <code>field</code> is not a {@link SuggestField}\n   */\n  public void suggest(String field, CharSequence key, int num, Filter filter, TopSuggestDocsCollector collector) throws IOException {\n    // verify input\n    if (field == null) {\n      throw new IllegalArgumentException(\"'field' can not be null\");\n    }\n    if (num <= 0) {\n      throw new IllegalArgumentException(\"'num' should be > 0\");\n    }\n    if (collector == null) {\n      throw new IllegalArgumentException(\"'collector' can not be null\");\n    }\n\n    // build query automaton\n    CompletionAnalyzer analyzer;\n    if (queryAnalyzer instanceof CompletionAnalyzer) {\n      analyzer = (CompletionAnalyzer) queryAnalyzer;\n    } else {\n      analyzer = new CompletionAnalyzer(queryAnalyzer);\n    }\n    final Automaton automaton = analyzer.toAutomaton(field, key);\n\n    // collect results\n    for (LeafReaderContext context : getIndexReader().leaves()) {\n      TopSuggestDocsCollector leafCollector = (TopSuggestDocsCollector) collector.getLeafCollector(context);\n      LeafReader reader = context.reader();\n      Terms terms = reader.terms(field);\n      if (terms == null) {\n        continue;\n      }\n      NRTSuggester suggester;\n      if (terms instanceof CompletionTerms) {\n        CompletionTerms completionTerms = (CompletionTerms) terms;\n        suggester = completionTerms.suggester();\n      } else {\n        throw new IllegalArgumentException(field + \" is not a SuggestField\");\n      }\n      if (suggester == null) {\n        // a segment can have a null suggester\n        // i.e. no FST was built\n        continue;\n      }\n\n      DocIdSet docIdSet = null;\n      if (filter != null) {\n        docIdSet = filter.getDocIdSet(context, reader.getLiveDocs());\n        if (docIdSet == null) {\n          // filter matches no docs in current leave\n          continue;\n        }\n      }\n      suggester.lookup(reader, automaton, num, docIdSet, leafCollector);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c33f6677a2078739058f81eca1df69d12cd62b0":["07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c33f6677a2078739058f81eca1df69d12cd62b0"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8c33f6677a2078739058f81eca1df69d12cd62b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}