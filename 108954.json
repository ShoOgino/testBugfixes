{"path":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.Reader#fillSlice(BytesRef,long,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.Reader#fillSlice(BytesRef,long,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fillSlice(BytesRef,long,int).mjava","sourceNew":"    /**\n     * Gets a slice out of {@link PagedBytes} starting at <i>start</i> with a\n     * given length. Iff the slice spans across a block border this method will\n     * allocate sufficient resources and copy the paged data.\n     * <p>\n     * Slices spanning more than one block are not supported.\n     * </p>\n     * @lucene.internal \n     **/\n    public BytesRef fillSlice(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        byte[] buffer = threadBuffers.get();\n        if (buffer == null) {\n          buffer = new byte[length];\n          threadBuffers.set(buffer);\n        } else if (buffer.length < length) {\n          buffer = ArrayUtil.grow(buffer, length);\n          threadBuffers.set(buffer);\n        }\n        b.bytes = buffer;\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, buffer, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, buffer, blockSize-offset, length-(blockSize-offset));\n      }\n      return b;\n    }\n\n","sourceOld":"    /**\n     * Gets a slice out of {@link PagedBytes} starting at <i>start</i> with a\n     * given length. Iff the slice spans across a block border this method will\n     * allocate sufficient resources and copy the paged data.\n     * <p>\n     * Slices spanning more than one block are not supported.\n     * </p>\n     * @lucene.internal \n     **/\n    public BytesRef fillSlice(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        byte[] buffer = threadBuffers.get();\n        if (buffer == null) {\n          buffer = new byte[length];\n          threadBuffers.set(buffer);\n        } else if (buffer.length < length) {\n          buffer = ArrayUtil.grow(buffer, length);\n          threadBuffers.set(buffer);\n        }\n        b.bytes = buffer;\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, buffer, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, buffer, blockSize-offset, length-(blockSize-offset));\n      }\n      return b;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ebb4b4370532662eb5f3238d02b002836b38b2","date":1331733267,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.Reader#fillSlice(BytesRef,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.Reader#fillSlice(BytesRef,long,int).mjava","sourceNew":"    /**\n     * Gets a slice out of {@link PagedBytes} starting at <i>start</i> with a\n     * given length. Iff the slice spans across a block border this method will\n     * allocate sufficient resources and copy the paged data.\n     * <p>\n     * Slices spanning more than one block are not supported.\n     * </p>\n     * @lucene.internal \n     **/\n    public BytesRef fillSlice(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      assert length <= blockSize+1;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        b.bytes = new byte[length];\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, b.bytes, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, b.bytes, blockSize-offset, length-(blockSize-offset));\n      }\n      return b;\n    }\n\n","sourceOld":"    /**\n     * Gets a slice out of {@link PagedBytes} starting at <i>start</i> with a\n     * given length. Iff the slice spans across a block border this method will\n     * allocate sufficient resources and copy the paged data.\n     * <p>\n     * Slices spanning more than one block are not supported.\n     * </p>\n     * @lucene.internal \n     **/\n    public BytesRef fillSlice(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        byte[] buffer = threadBuffers.get();\n        if (buffer == null) {\n          buffer = new byte[length];\n          threadBuffers.set(buffer);\n        } else if (buffer.length < length) {\n          buffer = ArrayUtil.grow(buffer, length);\n          threadBuffers.set(buffer);\n        }\n        b.bytes = buffer;\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, buffer, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, buffer, blockSize-offset, length-(blockSize-offset));\n      }\n      return b;\n    }\n\n","bugFix":null,"bugIntro":["c024a3e8fec0a081cbf9539845db12f0dc84d029"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"caa40272511a69bd4ad04b8242ae420932f5799b","date":1359341326,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.Reader#fillSlice(BytesRef,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.Reader#fillSlice(BytesRef,long,int).mjava","sourceNew":"    /**\n     * Gets a slice out of {@link PagedBytes} starting at <i>start</i> with a\n     * given length. Iff the slice spans across a block border this method will\n     * allocate sufficient resources and copy the paged data.\n     * <p>\n     * Slices spanning more than one block are not supported.\n     * </p>\n     * @lucene.internal \n     **/\n    public void fillSlice(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      assert length <= blockSize+1;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        b.bytes = new byte[length];\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, b.bytes, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, b.bytes, blockSize-offset, length-(blockSize-offset));\n      }\n    }\n\n","sourceOld":"    /**\n     * Gets a slice out of {@link PagedBytes} starting at <i>start</i> with a\n     * given length. Iff the slice spans across a block border this method will\n     * allocate sufficient resources and copy the paged data.\n     * <p>\n     * Slices spanning more than one block are not supported.\n     * </p>\n     * @lucene.internal \n     **/\n    public BytesRef fillSlice(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      assert length <= blockSize+1;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        b.bytes = new byte[length];\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, b.bytes, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, b.bytes, blockSize-offset, length-(blockSize-offset));\n      }\n      return b;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.Reader#fillSlice(BytesRef,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.Reader#fillSlice(BytesRef,long,int).mjava","sourceNew":"    /**\n     * Gets a slice out of {@link PagedBytes} starting at <i>start</i> with a\n     * given length. Iff the slice spans across a block border this method will\n     * allocate sufficient resources and copy the paged data.\n     * <p>\n     * Slices spanning more than one block are not supported.\n     * </p>\n     * @lucene.internal \n     **/\n    public void fillSlice(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      assert length <= blockSize+1;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        b.bytes = new byte[length];\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, b.bytes, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, b.bytes, blockSize-offset, length-(blockSize-offset));\n      }\n    }\n\n","sourceOld":"    /**\n     * Gets a slice out of {@link PagedBytes} starting at <i>start</i> with a\n     * given length. Iff the slice spans across a block border this method will\n     * allocate sufficient resources and copy the paged data.\n     * <p>\n     * Slices spanning more than one block are not supported.\n     * </p>\n     * @lucene.internal \n     **/\n    public BytesRef fillSlice(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      assert length <= blockSize+1;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        b.bytes = new byte[length];\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, b.bytes, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, b.bytes, blockSize-offset, length-(blockSize-offset));\n      }\n      return b;\n    }\n\n","bugFix":["224555f245128127dc8d161673eb9e867d67857c","be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c024a3e8fec0a081cbf9539845db12f0dc84d029","date":1376654698,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.Reader#fillSlice(BytesRef,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.Reader#fillSlice(BytesRef,long,int).mjava","sourceNew":"    /**\n     * Gets a slice out of {@link PagedBytes} starting at <i>start</i> with a\n     * given length. Iff the slice spans across a block border this method will\n     * allocate sufficient resources and copy the paged data.\n     * <p>\n     * Slices spanning more than two blocks are not supported.\n     * </p>\n     * @lucene.internal \n     **/\n    public void fillSlice(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      assert length <= blockSize+1: \"length=\" + length;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        b.bytes = new byte[length];\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, b.bytes, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, b.bytes, blockSize-offset, length-(blockSize-offset));\n      }\n    }\n\n","sourceOld":"    /**\n     * Gets a slice out of {@link PagedBytes} starting at <i>start</i> with a\n     * given length. Iff the slice spans across a block border this method will\n     * allocate sufficient resources and copy the paged data.\n     * <p>\n     * Slices spanning more than one block are not supported.\n     * </p>\n     * @lucene.internal \n     **/\n    public void fillSlice(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      assert length <= blockSize+1;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        b.bytes = new byte[length];\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, b.bytes, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, b.bytes, blockSize-offset, length-(blockSize-offset));\n      }\n    }\n\n","bugFix":["09ebb4b4370532662eb5f3238d02b002836b38b2","224555f245128127dc8d161673eb9e867d67857c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ceca04c06658aeb20e0a319ade784ad9a0576dd","date":1376662287,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.Reader#fillSlice(BytesRef,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.Reader#fillSlice(BytesRef,long,int).mjava","sourceNew":"    /**\n     * Gets a slice out of {@link PagedBytes} starting at <i>start</i> with a\n     * given length. Iff the slice spans across a block border this method will\n     * allocate sufficient resources and copy the paged data.\n     * <p>\n     * Slices spanning more than two blocks are not supported.\n     * </p>\n     * @lucene.internal \n     **/\n    public void fillSlice(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      assert length <= blockSize+1: \"length=\" + length;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        b.bytes = new byte[length];\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, b.bytes, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, b.bytes, blockSize-offset, length-(blockSize-offset));\n      }\n    }\n\n","sourceOld":"    /**\n     * Gets a slice out of {@link PagedBytes} starting at <i>start</i> with a\n     * given length. Iff the slice spans across a block border this method will\n     * allocate sufficient resources and copy the paged data.\n     * <p>\n     * Slices spanning more than one block are not supported.\n     * </p>\n     * @lucene.internal \n     **/\n    public void fillSlice(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      assert length <= blockSize+1;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        b.bytes = new byte[length];\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, b.bytes, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, b.bytes, blockSize-offset, length-(blockSize-offset));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.Reader#fillSlice(BytesRef,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.Reader#fillSlice(BytesRef,long,int).mjava","sourceNew":"    /**\n     * Gets a slice out of {@link PagedBytes} starting at <i>start</i> with a\n     * given length. Iff the slice spans across a block border this method will\n     * allocate sufficient resources and copy the paged data.\n     * <p>\n     * Slices spanning more than two blocks are not supported.\n     * </p>\n     * @lucene.internal \n     **/\n    public void fillSlice(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      assert length <= blockSize+1: \"length=\" + length;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        b.bytes = new byte[length];\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, b.bytes, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, b.bytes, blockSize-offset, length-(blockSize-offset));\n      }\n    }\n\n","sourceOld":"    /**\n     * Gets a slice out of {@link PagedBytes} starting at <i>start</i> with a\n     * given length. Iff the slice spans across a block border this method will\n     * allocate sufficient resources and copy the paged data.\n     * <p>\n     * Slices spanning more than one block are not supported.\n     * </p>\n     * @lucene.internal \n     **/\n    public void fillSlice(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      assert length <= blockSize+1;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        b.bytes = new byte[length];\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, b.bytes, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, b.bytes, blockSize-offset, length-(blockSize-offset));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd6ddfc8e622041c356ebd25ea5530e8f86b1132","date":1380207591,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.Reader#fillSlice(BytesRef,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.Reader#fillSlice(BytesRef,long,int).mjava","sourceNew":"    /**\n     * Gets a slice out of {@link PagedBytes} starting at <i>start</i> with a\n     * given length. Iff the slice spans across a block border this method will\n     * allocate sufficient resources and copy the paged data.\n     * <p>\n     * Slices spanning more than two blocks are not supported.\n     * </p>\n     * @lucene.internal \n     **/\n    public void fillSlice(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      assert length <= blockSize+1: \"length=\" + length;\n      b.length = length;\n      if (length == 0) {\n        return;\n      }\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        b.bytes = new byte[length];\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, b.bytes, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, b.bytes, blockSize-offset, length-(blockSize-offset));\n      }\n    }\n\n","sourceOld":"    /**\n     * Gets a slice out of {@link PagedBytes} starting at <i>start</i> with a\n     * given length. Iff the slice spans across a block border this method will\n     * allocate sufficient resources and copy the paged data.\n     * <p>\n     * Slices spanning more than two blocks are not supported.\n     * </p>\n     * @lucene.internal \n     **/\n    public void fillSlice(BytesRef b, long start, int length) {\n      assert length >= 0: \"length=\" + length;\n      assert length <= blockSize+1: \"length=\" + length;\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      b.length = length;\n      if (blockSize - offset >= length) {\n        // Within block\n        b.bytes = blocks[index];\n        b.offset = offset;\n      } else {\n        // Split\n        b.bytes = new byte[length];\n        b.offset = 0;\n        System.arraycopy(blocks[index], offset, b.bytes, 0, blockSize-offset);\n        System.arraycopy(blocks[1+index], 0, b.bytes, blockSize-offset, length-(blockSize-offset));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["09ebb4b4370532662eb5f3238d02b002836b38b2","caa40272511a69bd4ad04b8242ae420932f5799b"],"bd6ddfc8e622041c356ebd25ea5530e8f86b1132":["c024a3e8fec0a081cbf9539845db12f0dc84d029"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"caa40272511a69bd4ad04b8242ae420932f5799b":["09ebb4b4370532662eb5f3238d02b002836b38b2"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","c024a3e8fec0a081cbf9539845db12f0dc84d029"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c024a3e8fec0a081cbf9539845db12f0dc84d029":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"09ebb4b4370532662eb5f3238d02b002836b38b2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2ceca04c06658aeb20e0a319ade784ad9a0576dd":["d4d69c535930b5cce125cff868d40f6373dc27d4","c024a3e8fec0a081cbf9539845db12f0dc84d029"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd6ddfc8e622041c356ebd25ea5530e8f86b1132"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c024a3e8fec0a081cbf9539845db12f0dc84d029","2ceca04c06658aeb20e0a319ade784ad9a0576dd"],"bd6ddfc8e622041c356ebd25ea5530e8f86b1132":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"caa40272511a69bd4ad04b8242ae420932f5799b":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["09ebb4b4370532662eb5f3238d02b002836b38b2"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c024a3e8fec0a081cbf9539845db12f0dc84d029":["bd6ddfc8e622041c356ebd25ea5530e8f86b1132","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","2ceca04c06658aeb20e0a319ade784ad9a0576dd"],"09ebb4b4370532662eb5f3238d02b002836b38b2":["d4d69c535930b5cce125cff868d40f6373dc27d4","caa40272511a69bd4ad04b8242ae420932f5799b"],"2ceca04c06658aeb20e0a319ade784ad9a0576dd":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","2ceca04c06658aeb20e0a319ade784ad9a0576dd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}