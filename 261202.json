{"path":"solr/solr-ref-guide/tools/BuildNavAndPDFBody.Page#Page(File,DocumentHeader).mjava","commits":[{"id":"d911f2420bc2c190c6ca1cbded67eca0f2bdf932","date":1494452425,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solr-ref-guide/tools/BuildNavAndPDFBody.Page#Page(File,DocumentHeader).mjava","pathOld":"/dev/null","sourceNew":"    public Page(File file, DocumentHeader header) {\n      this.file = file;\n      this.title = header.getDocumentTitle().getMain();\n      \n      // TODO: do error checking if attribute metadata we care about is missing\n      Map<String,Object> attrs = header.getAttributes();\n      this.shortname = (String) attrs.get(\"page-shortname\");\n      this.permalink = (String) attrs.get(\"page-permalink\");\n      \n      if (attrs.containsKey(\"page-children\")) {\n        String kidsString = ((String) attrs.get(\"page-children\")).trim();\n        this.kidShortnames = Collections.<String>unmodifiableList\n          (Arrays.asList(kidsString.split(\",\\\\s+\")));\n        this.mutableKids = new ArrayList<Page>(kidShortnames.size());\n      } else {\n        this.kidShortnames = Collections.<String>emptyList();\n        this.mutableKids = Collections.<Page>emptyList();\n      }\n      this.kids = Collections.<Page>unmodifiableList(mutableKids);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b31ebc7a867ddea79d438a8fca876a94e644d11a","date":1494496172,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solr-ref-guide/tools/BuildNavAndPDFBody.Page#Page(File,DocumentHeader).mjava","pathOld":"/dev/null","sourceNew":"    public Page(File file, DocumentHeader header) {\n      this.file = file;\n      this.title = header.getDocumentTitle().getMain();\n      \n      // TODO: do error checking if attribute metadata we care about is missing\n      Map<String,Object> attrs = header.getAttributes();\n      this.shortname = (String) attrs.get(\"page-shortname\");\n      this.permalink = (String) attrs.get(\"page-permalink\");\n      \n      if (attrs.containsKey(\"page-children\")) {\n        String kidsString = ((String) attrs.get(\"page-children\")).trim();\n        this.kidShortnames = Collections.<String>unmodifiableList\n          (Arrays.asList(kidsString.split(\",\\\\s+\")));\n        this.mutableKids = new ArrayList<Page>(kidShortnames.size());\n      } else {\n        this.kidShortnames = Collections.<String>emptyList();\n        this.mutableKids = Collections.<Page>emptyList();\n      }\n      this.kids = Collections.<Page>unmodifiableList(mutableKids);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solr-ref-guide/tools/BuildNavAndPDFBody.Page#Page(File,DocumentHeader).mjava","pathOld":"/dev/null","sourceNew":"    public Page(File file, DocumentHeader header) {\n      this.file = file;\n      this.title = header.getDocumentTitle().getMain();\n      \n      // TODO: do error checking if attribute metadata we care about is missing\n      Map<String,Object> attrs = header.getAttributes();\n      this.shortname = (String) attrs.get(\"page-shortname\");\n      this.permalink = (String) attrs.get(\"page-permalink\");\n      \n      if (attrs.containsKey(\"page-children\")) {\n        String kidsString = ((String) attrs.get(\"page-children\")).trim();\n        this.kidShortnames = Collections.<String>unmodifiableList\n          (Arrays.asList(kidsString.split(\",\\\\s+\")));\n        this.mutableKids = new ArrayList<Page>(kidShortnames.size());\n      } else {\n        this.kidShortnames = Collections.<String>emptyList();\n        this.mutableKids = Collections.<Page>emptyList();\n      }\n      this.kids = Collections.<Page>unmodifiableList(mutableKids);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb70fac338f4a5e849deb55a5089abe38e25c00d","date":1508871440,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solr-ref-guide/tools/BuildNavAndPDFBody.Page#Page(File,DocumentHeader).mjava","pathOld":"solr/solr-ref-guide/tools/BuildNavAndPDFBody.Page#Page(File,DocumentHeader).mjava","sourceNew":"    public Page(File file, DocumentHeader header) {\n      this.file = file;\n      this.title = header.getDocumentTitle().getMain();\n      \n      // TODO: do error checking if attribute metadata we care about is missing\n      Map<String,Object> attrs = header.getAttributes();\n      this.shortname = (String) attrs.get(\"page-shortname\");\n      this.permalink = (String) attrs.get(\"page-permalink\");\n\n      // TODO: SOLR-11531: we should eliminate these attributes and not depend on them in jekyll, ...\n      // ...but for now at least be sure they are consistent with the filename\n      if (! file.getName().equals(shortname + \".adoc\") ) {\n        throw new RuntimeException(file + \" has a mismatched shortname: \" + shortname);\n      }\n      if (! permalink.equals(shortname + \".html\") ) {\n        throw new RuntimeException(file + \" has a mismatched permalink: \" + permalink);\n      }\n\n      \n      if (attrs.containsKey(\"page-children\")) {\n        String kidsString = ((String) attrs.get(\"page-children\")).trim();\n        this.kidShortnames = Collections.<String>unmodifiableList\n          (Arrays.asList(kidsString.split(\",\\\\s+\")));\n        this.mutableKids = new ArrayList<Page>(kidShortnames.size());\n      } else {\n        this.kidShortnames = Collections.<String>emptyList();\n        this.mutableKids = Collections.<Page>emptyList();\n      }\n      this.kids = Collections.<Page>unmodifiableList(mutableKids);\n    }\n\n","sourceOld":"    public Page(File file, DocumentHeader header) {\n      this.file = file;\n      this.title = header.getDocumentTitle().getMain();\n      \n      // TODO: do error checking if attribute metadata we care about is missing\n      Map<String,Object> attrs = header.getAttributes();\n      this.shortname = (String) attrs.get(\"page-shortname\");\n      this.permalink = (String) attrs.get(\"page-permalink\");\n      \n      if (attrs.containsKey(\"page-children\")) {\n        String kidsString = ((String) attrs.get(\"page-children\")).trim();\n        this.kidShortnames = Collections.<String>unmodifiableList\n          (Arrays.asList(kidsString.split(\",\\\\s+\")));\n        this.mutableKids = new ArrayList<Page>(kidShortnames.size());\n      } else {\n        this.kidShortnames = Collections.<String>emptyList();\n        this.mutableKids = Collections.<Page>emptyList();\n      }\n      this.kids = Collections.<Page>unmodifiableList(mutableKids);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a13952afbc6643820b120fd36e1be84835f09a","date":1508949401,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solr-ref-guide/tools/BuildNavAndPDFBody.Page#Page(File,DocumentHeader).mjava","pathOld":"solr/solr-ref-guide/tools/BuildNavAndPDFBody.Page#Page(File,DocumentHeader).mjava","sourceNew":"    public Page(File file, DocumentHeader header) {\n      if (! file.getName().endsWith(\".adoc\")) {\n        throw new RuntimeException(file + \" has does not end in '.adoc' - this code can't be used\");\n      }\n      \n      this.file = file;\n      this.title = header.getDocumentTitle().getMain();\n\n      this.shortname = file.getName().replaceAll(\"\\\\.adoc$\",\"\");\n      this.permalink = this.shortname + \".html\";\n      \n      // TODO: do error checking if attribute metadata we care about is missing\n      Map<String,Object> attrs = header.getAttributes();\n\n      // TODO: SOLR-11541: we should eliminate these attributes\n      // ...but for now at least be sure they are consistent\n      if (attrs.containsKey(\"page-shortname\")) {\n        String explicit = (String) attrs.get(\"page-shortname\");\n        if (! shortname.equals(explicit)) {\n          throw new RuntimeException(file + \" (\"+shortname+\") has a mismatched page-shortname: \" + explicit);\n        }\n      }\n      if (attrs.containsKey(\"page-permalink\")) {\n        String explicit = (String) attrs.get(\"page-permalink\");\n        if (! permalink.equals(explicit)) {\n          throw new RuntimeException(file + \"(\"+permalink+\") has a mismatched permalink: \" + explicit);\n        }\n      }\n      \n      if (attrs.containsKey(\"page-children\")) {\n        String kidsString = ((String) attrs.get(\"page-children\")).trim();\n        this.kidShortnames = Collections.<String>unmodifiableList\n          (Arrays.asList(kidsString.split(\",\\\\s+\")));\n        this.mutableKids = new ArrayList<Page>(kidShortnames.size());\n      } else {\n        this.kidShortnames = Collections.<String>emptyList();\n        this.mutableKids = Collections.<Page>emptyList();\n      }\n      this.kids = Collections.<Page>unmodifiableList(mutableKids);\n    }\n\n","sourceOld":"    public Page(File file, DocumentHeader header) {\n      this.file = file;\n      this.title = header.getDocumentTitle().getMain();\n      \n      // TODO: do error checking if attribute metadata we care about is missing\n      Map<String,Object> attrs = header.getAttributes();\n      this.shortname = (String) attrs.get(\"page-shortname\");\n      this.permalink = (String) attrs.get(\"page-permalink\");\n\n      // TODO: SOLR-11531: we should eliminate these attributes and not depend on them in jekyll, ...\n      // ...but for now at least be sure they are consistent with the filename\n      if (! file.getName().equals(shortname + \".adoc\") ) {\n        throw new RuntimeException(file + \" has a mismatched shortname: \" + shortname);\n      }\n      if (! permalink.equals(shortname + \".html\") ) {\n        throw new RuntimeException(file + \" has a mismatched permalink: \" + permalink);\n      }\n\n      \n      if (attrs.containsKey(\"page-children\")) {\n        String kidsString = ((String) attrs.get(\"page-children\")).trim();\n        this.kidShortnames = Collections.<String>unmodifiableList\n          (Arrays.asList(kidsString.split(\",\\\\s+\")));\n        this.mutableKids = new ArrayList<Page>(kidShortnames.size());\n      } else {\n        this.kidShortnames = Collections.<String>emptyList();\n        this.mutableKids = Collections.<Page>emptyList();\n      }\n      this.kids = Collections.<Page>unmodifiableList(mutableKids);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4b4a365d0dccc996dd473a5b2a98650a774cf0e","date":1509314923,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solr-ref-guide/tools/BuildNavAndPDFBody.Page#Page(File,DocumentHeader).mjava","pathOld":"solr/solr-ref-guide/tools/BuildNavAndPDFBody.Page#Page(File,DocumentHeader).mjava","sourceNew":"    public Page(File file, DocumentHeader header) {\n      if (! file.getName().endsWith(\".adoc\")) {\n        throw new RuntimeException(file + \" has does not end in '.adoc' - this code can't be used\");\n      }\n      \n      this.file = file;\n      this.title = header.getDocumentTitle().getMain();\n\n      this.shortname = file.getName().replaceAll(\"\\\\.adoc$\",\"\");\n      this.permalink = this.shortname + \".html\";\n      \n      // TODO: do error checking if attribute metadata we care about is missing\n      Map<String,Object> attrs = header.getAttributes();\n\n      // See SOLR-11541: Fail if a user adds new docs with older missleading attributes we don't use/want\n      for (String attr : Arrays.asList(\"page-shortname\", \"page-permalink\")) {\n        if (attrs.containsKey(attr)) {\n          throw new RuntimeException(file + \": remove the \" + attr + \" attribute, it's no longer needed, and may confuse readers/editors\");\n        }\n      }\n      \n      if (attrs.containsKey(\"page-children\")) {\n        String kidsString = ((String) attrs.get(\"page-children\")).trim();\n        this.kidShortnames = Collections.<String>unmodifiableList\n          (Arrays.asList(kidsString.split(\",\\\\s+\")));\n        this.mutableKids = new ArrayList<Page>(kidShortnames.size());\n      } else {\n        this.kidShortnames = Collections.<String>emptyList();\n        this.mutableKids = Collections.<Page>emptyList();\n      }\n      this.kids = Collections.<Page>unmodifiableList(mutableKids);\n    }\n\n","sourceOld":"    public Page(File file, DocumentHeader header) {\n      if (! file.getName().endsWith(\".adoc\")) {\n        throw new RuntimeException(file + \" has does not end in '.adoc' - this code can't be used\");\n      }\n      \n      this.file = file;\n      this.title = header.getDocumentTitle().getMain();\n\n      this.shortname = file.getName().replaceAll(\"\\\\.adoc$\",\"\");\n      this.permalink = this.shortname + \".html\";\n      \n      // TODO: do error checking if attribute metadata we care about is missing\n      Map<String,Object> attrs = header.getAttributes();\n\n      // TODO: SOLR-11541: we should eliminate these attributes\n      // ...but for now at least be sure they are consistent\n      if (attrs.containsKey(\"page-shortname\")) {\n        String explicit = (String) attrs.get(\"page-shortname\");\n        if (! shortname.equals(explicit)) {\n          throw new RuntimeException(file + \" (\"+shortname+\") has a mismatched page-shortname: \" + explicit);\n        }\n      }\n      if (attrs.containsKey(\"page-permalink\")) {\n        String explicit = (String) attrs.get(\"page-permalink\");\n        if (! permalink.equals(explicit)) {\n          throw new RuntimeException(file + \"(\"+permalink+\") has a mismatched permalink: \" + explicit);\n        }\n      }\n      \n      if (attrs.containsKey(\"page-children\")) {\n        String kidsString = ((String) attrs.get(\"page-children\")).trim();\n        this.kidShortnames = Collections.<String>unmodifiableList\n          (Arrays.asList(kidsString.split(\",\\\\s+\")));\n        this.mutableKids = new ArrayList<Page>(kidShortnames.size());\n      } else {\n        this.kidShortnames = Collections.<String>emptyList();\n        this.mutableKids = Collections.<Page>emptyList();\n      }\n      this.kids = Collections.<Page>unmodifiableList(mutableKids);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"580584a6c5fc0f03777842090bc2d2dfb64337e5","date":1574200470,"type":5,"author":"Cassandra Targett","isMerge":false,"pathNew":"solr/solr-ref-guide/tools/BuildNavDataFiles.Page#Page(File,DocumentHeader).mjava","pathOld":"solr/solr-ref-guide/tools/BuildNavAndPDFBody.Page#Page(File,DocumentHeader).mjava","sourceNew":"    public Page(File file, DocumentHeader header) {\n      if (! file.getName().endsWith(\".adoc\")) {\n        throw new RuntimeException(file + \" has does not end in '.adoc' - this code can't be used\");\n      }\n      \n      this.file = file;\n      this.title = header.getDocumentTitle().getMain();\n\n      this.shortname = file.getName().replaceAll(\"\\\\.adoc$\",\"\");\n      this.permalink = this.shortname + \".html\";\n      \n      // TODO: do error checking if attribute metadata we care about is missing\n      Map<String,Object> attrs = header.getAttributes();\n\n      // See SOLR-11541: Fail if a user adds new docs with older missleading attributes we don't use/want\n      for (String attr : Arrays.asList(\"page-shortname\", \"page-permalink\")) {\n        if (attrs.containsKey(attr)) {\n          throw new RuntimeException(file + \": remove the \" + attr + \" attribute, it's no longer needed, and may confuse readers/editors\");\n        }\n      }\n      \n      if (attrs.containsKey(\"page-children\")) {\n        String kidsString = ((String) attrs.get(\"page-children\")).trim();\n        this.kidShortnames = Collections.<String>unmodifiableList\n          (Arrays.asList(kidsString.split(\",\\\\s+\")));\n        this.mutableKids = new ArrayList<Page>(kidShortnames.size());\n      } else {\n        this.kidShortnames = Collections.<String>emptyList();\n        this.mutableKids = Collections.<Page>emptyList();\n      }\n      this.kids = Collections.<Page>unmodifiableList(mutableKids);\n    }\n\n","sourceOld":"    public Page(File file, DocumentHeader header) {\n      if (! file.getName().endsWith(\".adoc\")) {\n        throw new RuntimeException(file + \" has does not end in '.adoc' - this code can't be used\");\n      }\n      \n      this.file = file;\n      this.title = header.getDocumentTitle().getMain();\n\n      this.shortname = file.getName().replaceAll(\"\\\\.adoc$\",\"\");\n      this.permalink = this.shortname + \".html\";\n      \n      // TODO: do error checking if attribute metadata we care about is missing\n      Map<String,Object> attrs = header.getAttributes();\n\n      // See SOLR-11541: Fail if a user adds new docs with older missleading attributes we don't use/want\n      for (String attr : Arrays.asList(\"page-shortname\", \"page-permalink\")) {\n        if (attrs.containsKey(attr)) {\n          throw new RuntimeException(file + \": remove the \" + attr + \" attribute, it's no longer needed, and may confuse readers/editors\");\n        }\n      }\n      \n      if (attrs.containsKey(\"page-children\")) {\n        String kidsString = ((String) attrs.get(\"page-children\")).trim();\n        this.kidShortnames = Collections.<String>unmodifiableList\n          (Arrays.asList(kidsString.split(\",\\\\s+\")));\n        this.mutableKids = new ArrayList<Page>(kidShortnames.size());\n      } else {\n        this.kidShortnames = Collections.<String>emptyList();\n        this.mutableKids = Collections.<Page>emptyList();\n      }\n      this.kids = Collections.<Page>unmodifiableList(mutableKids);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d911f2420bc2c190c6ca1cbded67eca0f2bdf932"],"b31ebc7a867ddea79d438a8fca876a94e644d11a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d911f2420bc2c190c6ca1cbded67eca0f2bdf932"],"d911f2420bc2c190c6ca1cbded67eca0f2bdf932":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4b4a365d0dccc996dd473a5b2a98650a774cf0e":["c5a13952afbc6643820b120fd36e1be84835f09a"],"580584a6c5fc0f03777842090bc2d2dfb64337e5":["b4b4a365d0dccc996dd473a5b2a98650a774cf0e"],"bb70fac338f4a5e849deb55a5089abe38e25c00d":["d911f2420bc2c190c6ca1cbded67eca0f2bdf932"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5a13952afbc6643820b120fd36e1be84835f09a":["bb70fac338f4a5e849deb55a5089abe38e25c00d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["580584a6c5fc0f03777842090bc2d2dfb64337e5"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"b31ebc7a867ddea79d438a8fca876a94e644d11a":[],"d911f2420bc2c190c6ca1cbded67eca0f2bdf932":["e9017cf144952056066919f1ebc7897ff9bd71b1","b31ebc7a867ddea79d438a8fca876a94e644d11a","bb70fac338f4a5e849deb55a5089abe38e25c00d"],"b4b4a365d0dccc996dd473a5b2a98650a774cf0e":["580584a6c5fc0f03777842090bc2d2dfb64337e5"],"580584a6c5fc0f03777842090bc2d2dfb64337e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb70fac338f4a5e849deb55a5089abe38e25c00d":["c5a13952afbc6643820b120fd36e1be84835f09a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","b31ebc7a867ddea79d438a8fca876a94e644d11a","d911f2420bc2c190c6ca1cbded67eca0f2bdf932"],"c5a13952afbc6643820b120fd36e1be84835f09a":["b4b4a365d0dccc996dd473a5b2a98650a774cf0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","b31ebc7a867ddea79d438a8fca876a94e644d11a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}