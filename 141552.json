{"path":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","commits":[{"id":"4f483a44e10befaaa6da11d433e2eb0f52829eec","date":1175273998,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","pathOld":"/dev/null","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException(400, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? '\\'' : encStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["908c8e2c79736122e37d47d73a053999c24bac65","908c8e2c79736122e37d47d73a053999c24bac65","908c8e2c79736122e37d47d73a053999c24bac65"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","pathOld":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? '\\'' : encStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","sourceOld":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException(400, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? '\\'' : encStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"043be52e4a637fdb0d38454fa788a92c1b48a036","date":1199807445,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","pathOld":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || encStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","sourceOld":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? '\\'' : encStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["cb86c78a8d2dd3274986efff7797f6d2ef52b5b9","df476dd588f9e2c99c43fd9d3d896fd30221938f","df476dd588f9e2c99c43fd9d3d896fd30221938f","df476dd588f9e2c99c43fd9d3d896fd30221938f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","pathOld":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || encStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","sourceOld":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n\n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || encStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"043be52e4a637fdb0d38454fa788a92c1b48a036":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["043be52e4a637fdb0d38454fa788a92c1b48a036"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["4f483a44e10befaaa6da11d433e2eb0f52829eec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4f483a44e10befaaa6da11d433e2eb0f52829eec":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"043be52e4a637fdb0d38454fa788a92c1b48a036":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4f483a44e10befaaa6da11d433e2eb0f52829eec"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["043be52e4a637fdb0d38454fa788a92c1b48a036"],"4f483a44e10befaaa6da11d433e2eb0f52829eec":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}