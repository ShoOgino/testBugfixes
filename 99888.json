{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#readTerm(IndexInput,FieldInfo,PrefixCodedTermState,boolean).mjava","commits":[{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#readTerm(IndexInput,FieldInfo,PrefixCodedTermState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#readTerm(IndexInput,FieldInfo,TermState,boolean).mjava","sourceNew":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, PrefixCodedTermState termState, boolean isIndexTerm)\n    throws IOException {\n    final StandardTermState docTermState = (StandardTermState) termState;\n\n    if (isIndexTerm) {\n      docTermState.freqOffset = termsIn.readVLong();\n    } else {\n      docTermState.freqOffset += termsIn.readVLong();\n    }\n\n    if (docTermState.docFreq >= skipInterval) {\n      docTermState.skipOffset = termsIn.readVInt();\n    } else {\n      docTermState.skipOffset = 0;\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isIndexTerm) {\n        docTermState.proxOffset = termsIn.readVLong();\n      } else {\n        docTermState.proxOffset += termsIn.readVLong();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, TermState termState, boolean isIndexTerm)\n    throws IOException {\n\n    final DocTermState docTermState = (DocTermState) termState;\n\n    if (isIndexTerm) {\n      docTermState.freqOffset = termsIn.readVLong();\n    } else {\n      docTermState.freqOffset += termsIn.readVLong();\n    }\n\n    if (docTermState.docFreq >= skipInterval) {\n      docTermState.skipOffset = termsIn.readVInt();\n    } else {\n      docTermState.skipOffset = 0;\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isIndexTerm) {\n        docTermState.proxOffset = termsIn.readVLong();\n      } else {\n        docTermState.proxOffset += termsIn.readVLong();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#readTerm(IndexInput,FieldInfo,PrefixCodedTermState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, PrefixCodedTermState termState, boolean isIndexTerm)\n    throws IOException {\n    final StandardTermState docTermState = (StandardTermState) termState;\n\n    if (isIndexTerm) {\n      docTermState.freqOffset = termsIn.readVLong();\n    } else {\n      docTermState.freqOffset += termsIn.readVLong();\n    }\n\n    if (docTermState.docFreq >= skipInterval) {\n      docTermState.skipOffset = termsIn.readVInt();\n    } else {\n      docTermState.skipOffset = 0;\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isIndexTerm) {\n        docTermState.proxOffset = termsIn.readVLong();\n      } else {\n        docTermState.proxOffset += termsIn.readVLong();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#readTerm(IndexInput,FieldInfo,PrefixCodedTermState,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, PrefixCodedTermState termState, boolean isIndexTerm)\n    throws IOException {\n    final StandardTermState docTermState = (StandardTermState) termState;\n\n    if (isIndexTerm) {\n      docTermState.freqOffset = termsIn.readVLong();\n    } else {\n      docTermState.freqOffset += termsIn.readVLong();\n    }\n\n    if (docTermState.docFreq >= skipInterval) {\n      docTermState.skipOffset = termsIn.readVInt();\n    } else {\n      docTermState.skipOffset = 0;\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isIndexTerm) {\n        docTermState.proxOffset = termsIn.readVLong();\n      } else {\n        docTermState.proxOffset += termsIn.readVLong();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#readTerm(IndexInput,FieldInfo,PrefixCodedTermState,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, PrefixCodedTermState termState, boolean isIndexTerm)\n    throws IOException {\n    final StandardTermState docTermState = (StandardTermState) termState;\n\n    if (isIndexTerm) {\n      docTermState.freqOffset = termsIn.readVLong();\n    } else {\n      docTermState.freqOffset += termsIn.readVLong();\n    }\n\n    if (docTermState.docFreq >= skipInterval) {\n      docTermState.skipOffset = termsIn.readVInt();\n    } else {\n      docTermState.skipOffset = 0;\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isIndexTerm) {\n        docTermState.proxOffset = termsIn.readVLong();\n      } else {\n        docTermState.proxOffset += termsIn.readVLong();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","b1add9ddc0005b07550d4350720aac22dc9886b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1add9ddc0005b07550d4350720aac22dc9886b3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa1a999d6674423e5c4ac858b410283f6fe03f20","868da859b43505d9d2a023bfeae6dd0c795f5295"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["b1add9ddc0005b07550d4350720aac22dc9886b3","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}