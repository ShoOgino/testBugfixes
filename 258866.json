{"path":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","sourceNew":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    Arrays.sort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","sourceOld":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    Arrays.sort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","date":1288192616,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","sourceNew":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    ArrayUtil.quickSort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","sourceOld":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    Arrays.sort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","sourceNew":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    ArrayUtil.quickSort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","sourceOld":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    Arrays.sort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","sourceNew":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    ArrayUtil.quickSort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","sourceOld":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    Arrays.sort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0d986f42c7320fce5b6ba6a767c160289c738a","date":1304428044,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","sourceNew":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    ArrayUtil.mergeSort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","sourceOld":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    ArrayUtil.quickSort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","sourceNew":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    ArrayUtil.mergeSort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","sourceOld":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    ArrayUtil.quickSort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","sourceNew":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    ArrayUtil.mergeSort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","sourceOld":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    ArrayUtil.quickSort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","sourceNew":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    ArrayUtil.mergeSort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","sourceOld":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    ArrayUtil.mergeSort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2a0d986f42c7320fce5b6ba6a767c160289c738a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","2a0d986f42c7320fce5b6ba6a767c160289c738a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","2a0d986f42c7320fce5b6ba6a767c160289c738a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["9454a6510e2db155fb01faa5c049b06ece95fab9","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"2a0d986f42c7320fce5b6ba6a767c160289c738a":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","2a0d986f42c7320fce5b6ba6a767c160289c738a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"2a0d986f42c7320fce5b6ba6a767c160289c738a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}