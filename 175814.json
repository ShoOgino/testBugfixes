{"path":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#getStorageQuery().mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#getStorageQuery().mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#getStorageQuery().mjava","sourceNew":"    /**\n     * returns a <tt>StorageQuery</tt> to query the storage index. The\n     * returned object is a reference counter to keep track of the references to\n     * the <tt>StorageQuery</tt>. The reference is already incremented before\n     * returned from this method.\n     * <p>\n     * if the reference counter has no remaining references the resource e.g.\n     * the <tt>StorageQuery</tt> will be closed. This ensures that a\n     * <tt>StorageQuery</tt> instance will be around as long as needed and\n     * the resources will be released. The reference counter should be\n     * decremented by clients after finished using the query instance.\n     * </p>\n     * \n     * @return a {@link ReferenceCounter} instance holding the StorageQuery as a\n     *         resource.\n     * \n     */\n    protected ReferenceCounter<StorageQuery> getStorageQuery() {\n    \tif(this.isClosed.get())\n    \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n        this.storageControllerLock.lock();\n        try{\n        \tif(this.isClosed.get())\n        \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n            if (this.storageQuery == null) {\n                this.storageQuery = getNewStorageQueryHolder(new StorageQuery(\n                        this.currentBuffer, this.searcher));\n                if (LOG.isInfoEnabled())\n                    LOG.info(\"Release new StorageQuery\");\n            }\n            this.storageQuery.increamentReference();\n            return this.storageQuery;\n        }finally{\n            try{\n        \tthis.closeCondition.signalAll();\n            }catch (Throwable e) {/**/}\n        \tthis.storageControllerLock.unlock();\n        }\n    }\n\n","sourceOld":"    /**\n     * returns a <tt>StorageQuery</tt> to query the storage index. The\n     * returned object is a reference counter to keep track of the references to\n     * the <tt>StorageQuery</tt>. The reference is already incremented before\n     * returned from this method.\n     * <p>\n     * if the reference counter has no remaining references the resource e.g.\n     * the <tt>StorageQuery</tt> will be closed. This ensures that a\n     * <tt>StorageQuery</tt> instance will be around as long as needed and\n     * the resources will be released. The reference counter should be\n     * decremented by clients after finished using the query instance.\n     * </p>\n     * \n     * @return a {@link ReferenceCounter} instance holding the StorageQuery as a\n     *         resource.\n     * \n     */\n    protected ReferenceCounter<StorageQuery> getStorageQuery() {\n    \tif(this.isClosed.get())\n    \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n        this.storageControllerLock.lock();\n        try{\n        \tif(this.isClosed.get())\n        \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n            if (this.storageQuery == null) {\n                this.storageQuery = getNewStorageQueryHolder(new StorageQuery(\n                        this.currentBuffer, this.searcher));\n                if (LOG.isInfoEnabled())\n                    LOG.info(\"Release new StorageQuery\");\n            }\n            this.storageQuery.increamentReference();\n            return this.storageQuery;\n        }finally{\n            try{\n        \tthis.closeCondition.signalAll();\n            }catch (Throwable e) {/**/}\n        \tthis.storageControllerLock.unlock();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#getStorageQuery().mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#getStorageQuery().mjava","sourceNew":"    /**\n     * returns a <tt>StorageQuery</tt> to query the storage index. The\n     * returned object is a reference counter to keep track of the references to\n     * the <tt>StorageQuery</tt>. The reference is already incremented before\n     * returned from this method.\n     * <p>\n     * if the reference counter has no remaining references the resource e.g.\n     * the <tt>StorageQuery</tt> will be closed. This ensures that a\n     * <tt>StorageQuery</tt> instance will be around as long as needed and\n     * the resources will be released. The reference counter should be\n     * decremented by clients after finished using the query instance.\n     * </p>\n     * \n     * @return a {@link ReferenceCounter} instance holding the StorageQuery as a\n     *         resource.\n     * \n     */\n    protected ReferenceCounter<StorageQuery> getStorageQuery() {\n    \tif(this.isClosed.get())\n    \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n        this.storageControllerLock.lock();\n        try{\n        \tif(this.isClosed.get())\n        \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n            if (this.storageQuery == null) {\n                this.storageQuery = getNewStorageQueryHolder(new StorageQuery(\n                        this.currentBuffer, this.searcher));\n                if (LOG.isInfoEnabled())\n                    LOG.info(\"Release new StorageQuery\");\n            }\n            this.storageQuery.increamentReference();\n            return this.storageQuery;\n        }finally{\n            try{\n        \tthis.closeCondition.signalAll();\n            }catch (Throwable e) {/**/}\n        \tthis.storageControllerLock.unlock();\n        }\n    }\n\n","sourceOld":"    /**\n     * returns a <tt>StorageQuery</tt> to query the storage index. The\n     * returned object is a reference counter to keep track of the references to\n     * the <tt>StorageQuery</tt>. The reference is already incremented before\n     * returned from this method.\n     * <p>\n     * if the reference counter has no remaining references the resource e.g.\n     * the <tt>StorageQuery</tt> will be closed. This ensures that a\n     * <tt>StorageQuery</tt> instance will be around as long as needed and\n     * the resources will be released. The reference counter should be\n     * decremented by clients after finished using the query instance.\n     * </p>\n     * \n     * @return a {@link ReferenceCounter} instance holding the StorageQuery as a\n     *         resource.\n     * \n     */\n    protected ReferenceCounter<StorageQuery> getStorageQuery() {\n    \tif(this.isClosed.get())\n    \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n        this.storageControllerLock.lock();\n        try{\n        \tif(this.isClosed.get())\n        \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n            if (this.storageQuery == null) {\n                this.storageQuery = getNewStorageQueryHolder(new StorageQuery(\n                        this.currentBuffer, this.searcher));\n                if (LOG.isInfoEnabled())\n                    LOG.info(\"Release new StorageQuery\");\n            }\n            this.storageQuery.increamentReference();\n            return this.storageQuery;\n        }finally{\n            try{\n        \tthis.closeCondition.signalAll();\n            }catch (Throwable e) {/**/}\n        \tthis.storageControllerLock.unlock();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}