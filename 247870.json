{"path":"src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrIndexSearcher,IndexSchema,int,int).mjava","commits":[{"id":"e4b5867a57b32674ce740e66e6a7da8db3d4dd33","date":1148163441,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrIndexSearcher,IndexSchema,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Executes a basic query in lucene syntax\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrIndexSearcher searcher,\n                                      IndexSchema schema,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    Query query = QueryParsing.parseQuery(qs, schema);\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(commands.get(1), schema);\n      if (sortSpec != null) {\n        sort = sortSpec.getSort();\n        if (sortSpec.getCount() >= 0) {\n          limit = sortSpec.getCount();\n        }\n      }\n    }\n\n    DocList results = searcher.getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6075cf7db5ebb03b013c9110fca8f1013ba6a72","date":1196271697,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrIndexSearcher,IndexSchema,int,int).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrIndexSearcher,IndexSchema,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query in lucene syntax\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrIndexSearcher searcher,\n                                      IndexSchema schema,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    Query query = QueryParsing.parseQuery(qs, schema);\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), schema);\n    }\n\n    DocList results = searcher.getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query in lucene syntax\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrIndexSearcher searcher,\n                                      IndexSchema schema,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    Query query = QueryParsing.parseQuery(qs, schema);\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(commands.get(1), schema);\n      if (sortSpec != null) {\n        sort = sortSpec.getSort();\n        if (sortSpec.getCount() >= 0) {\n          limit = sortSpec.getCount();\n        }\n      }\n    }\n\n    DocList results = searcher.getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrIndexSearcher,IndexSchema,int,int).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrIndexSearcher,IndexSchema,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query in lucene syntax\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrIndexSearcher searcher,\n                                      IndexSchema schema,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    Query query = QueryParsing.parseQuery(qs, schema);\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), schema);\n    }\n\n    DocList results = searcher.getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query in lucene syntax\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrIndexSearcher searcher,\n                                      IndexSchema schema,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    Query query = QueryParsing.parseQuery(qs, schema);\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), schema);\n    }\n\n    DocList results = searcher.getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c6075cf7db5ebb03b013c9110fca8f1013ba6a72"],"c6075cf7db5ebb03b013c9110fca8f1013ba6a72":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["c6075cf7db5ebb03b013c9110fca8f1013ba6a72"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c6075cf7db5ebb03b013c9110fca8f1013ba6a72":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}