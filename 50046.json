{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":null,"sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}