{"path":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialPrefixTreeFieldType#init(IndexSchema,Map[String,String]).mjava","commits":[{"id":"c11e1d33f2ba742976268153f6edd2d29710cf69","date":1347851822,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialPrefixTreeFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<String, String>(args);\n    grid = SpatialPrefixTreeFactory.makeSPT(argsWrap, schema.getResourceLoader().getClassLoader(), ctx);\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    String v = args.remove(SpatialArgsParser.DIST_ERR_PCT);\n    if (v != null)\n      distErrPct = Double.valueOf(v);\n\n    v = args.remove(DEFAULT_FIELD_VALUES_ARRAY_LEN);\n    if (v != null)\n      defaultFieldValuesArrayLen = Integer.valueOf(v);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialPrefixTreeFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialPrefixTreeFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<>(args);\n    grid = SpatialPrefixTreeFactory.makeSPT(argsWrap, schema.getResourceLoader().getClassLoader(), ctx);\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    String v = args.remove(SpatialArgsParser.DIST_ERR_PCT);\n    if (v != null)\n      distErrPct = Double.valueOf(v);\n\n    v = args.remove(DEFAULT_FIELD_VALUES_ARRAY_LEN);\n    if (v != null)\n      defaultFieldValuesArrayLen = Integer.valueOf(v);\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<String, String>(args);\n    grid = SpatialPrefixTreeFactory.makeSPT(argsWrap, schema.getResourceLoader().getClassLoader(), ctx);\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    String v = args.remove(SpatialArgsParser.DIST_ERR_PCT);\n    if (v != null)\n      distErrPct = Double.valueOf(v);\n\n    v = args.remove(DEFAULT_FIELD_VALUES_ARRAY_LEN);\n    if (v != null)\n      defaultFieldValuesArrayLen = Integer.valueOf(v);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"167133992e7b384ce97f83ddb1dd2ddd09daf7aa","date":1420315776,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialPrefixTreeFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialPrefixTreeFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    // Convert the maxDistErr to degrees (based on distanceUnits) since Lucene spatial layer depends on degrees\n    if(args.containsKey(SpatialPrefixTreeFactory.MAX_DIST_ERR)) {\n      double maxDistErrOriginal = Double.parseDouble(args.get(SpatialPrefixTreeFactory.MAX_DIST_ERR));\n      args.put(SpatialPrefixTreeFactory.MAX_DIST_ERR, \n          Double.toString(maxDistErrOriginal * distanceUnits.multiplierFromThisUnitToDegrees()));\n    }\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<>(args);\n    grid = SpatialPrefixTreeFactory.makeSPT(argsWrap, schema.getResourceLoader().getClassLoader(), ctx);\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    String v = args.remove(SpatialArgsParser.DIST_ERR_PCT);\n    if (v != null)\n      distErrPct = Double.valueOf(v);\n\n    v = args.remove(DEFAULT_FIELD_VALUES_ARRAY_LEN);\n    if (v != null)\n      defaultFieldValuesArrayLen = Integer.valueOf(v);\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<>(args);\n    grid = SpatialPrefixTreeFactory.makeSPT(argsWrap, schema.getResourceLoader().getClassLoader(), ctx);\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    String v = args.remove(SpatialArgsParser.DIST_ERR_PCT);\n    if (v != null)\n      distErrPct = Double.valueOf(v);\n\n    v = args.remove(DEFAULT_FIELD_VALUES_ARRAY_LEN);\n    if (v != null)\n      defaultFieldValuesArrayLen = Integer.valueOf(v);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e34e9db64b6fb5add5b2968e3a46342cef8363c7","date":1566335373,"type":3,"author":"nppoly","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialPrefixTreeFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialPrefixTreeFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    args.putIfAbsent(SpatialPrefixTreeFactory.VERSION, schema.getDefaultLuceneMatchVersion().toString());\n\n    // Convert the maxDistErr to degrees (based on distanceUnits) since Lucene spatial layer depends on degrees\n    if(args.containsKey(SpatialPrefixTreeFactory.MAX_DIST_ERR)) {\n      double maxDistErrOriginal = Double.parseDouble(args.get(SpatialPrefixTreeFactory.MAX_DIST_ERR));\n      args.put(SpatialPrefixTreeFactory.MAX_DIST_ERR, \n          Double.toString(maxDistErrOriginal * distanceUnits.multiplierFromThisUnitToDegrees()));\n    }\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<>(args);\n    grid = SpatialPrefixTreeFactory.makeSPT(argsWrap, schema.getResourceLoader().getClassLoader(), ctx);\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    String v = args.remove(SpatialArgsParser.DIST_ERR_PCT);\n    if (v != null)\n      distErrPct = Double.valueOf(v);\n\n    v = args.remove(DEFAULT_FIELD_VALUES_ARRAY_LEN);\n    if (v != null)\n      defaultFieldValuesArrayLen = Integer.valueOf(v);\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    // Convert the maxDistErr to degrees (based on distanceUnits) since Lucene spatial layer depends on degrees\n    if(args.containsKey(SpatialPrefixTreeFactory.MAX_DIST_ERR)) {\n      double maxDistErrOriginal = Double.parseDouble(args.get(SpatialPrefixTreeFactory.MAX_DIST_ERR));\n      args.put(SpatialPrefixTreeFactory.MAX_DIST_ERR, \n          Double.toString(maxDistErrOriginal * distanceUnits.multiplierFromThisUnitToDegrees()));\n    }\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<>(args);\n    grid = SpatialPrefixTreeFactory.makeSPT(argsWrap, schema.getResourceLoader().getClassLoader(), ctx);\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    String v = args.remove(SpatialArgsParser.DIST_ERR_PCT);\n    if (v != null)\n      distErrPct = Double.valueOf(v);\n\n    v = args.remove(DEFAULT_FIELD_VALUES_ARRAY_LEN);\n    if (v != null)\n      defaultFieldValuesArrayLen = Integer.valueOf(v);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"c11e1d33f2ba742976268153f6edd2d29710cf69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e34e9db64b6fb5add5b2968e3a46342cef8363c7":["167133992e7b384ce97f83ddb1dd2ddd09daf7aa"],"167133992e7b384ce97f83ddb1dd2ddd09daf7aa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e34e9db64b6fb5add5b2968e3a46342cef8363c7"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["167133992e7b384ce97f83ddb1dd2ddd09daf7aa"],"c11e1d33f2ba742976268153f6edd2d29710cf69":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"e34e9db64b6fb5add5b2968e3a46342cef8363c7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"167133992e7b384ce97f83ddb1dd2ddd09daf7aa":["e34e9db64b6fb5add5b2968e3a46342cef8363c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}