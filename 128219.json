{"path":"solr/core/src/java/org/apache/solr/search/facet/PercentileAgg.Acc#collect(int,int).mjava","commits":[{"id":"7e1a5b7d1a46c866d92b1922fa64a4b7ae6f7d1f","date":1427306546,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/PercentileAgg.Acc#collect(int,int).mjava","pathOld":"/dev/null","sourceNew":"    public void collect(int doc, int slotNum) {\n      if (!values.exists(doc)) return;\n      double val = values.doubleVal(doc);\n\n      AVLTreeDigest digest = digests[slotNum];\n      if (digest == null) {\n        digests[slotNum] = digest = new AVLTreeDigest(100);   // TODO: make compression configurable\n      }\n\n      digest.add(val);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/PercentileAgg.Acc#collect(int,int).mjava","pathOld":"/dev/null","sourceNew":"    public void collect(int doc, int slotNum) {\n      if (!values.exists(doc)) return;\n      double val = values.doubleVal(doc);\n\n      AVLTreeDigest digest = digests[slotNum];\n      if (digest == null) {\n        digests[slotNum] = digest = new AVLTreeDigest(100);   // TODO: make compression configurable\n      }\n\n      digest.add(val);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/PercentileAgg.Acc#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/PercentileAgg.Acc#collect(int,int).mjava","sourceNew":"    public void collect(int doc, int slotNum) throws IOException {\n      if (!values.exists(doc)) return;\n      double val = values.doubleVal(doc);\n\n      AVLTreeDigest digest = digests[slotNum];\n      if (digest == null) {\n        digests[slotNum] = digest = new AVLTreeDigest(100);   // TODO: make compression configurable\n      }\n\n      digest.add(val);\n    }\n\n","sourceOld":"    public void collect(int doc, int slotNum) {\n      if (!values.exists(doc)) return;\n      double val = values.doubleVal(doc);\n\n      AVLTreeDigest digest = digests[slotNum];\n      if (digest == null) {\n        digests[slotNum] = digest = new AVLTreeDigest(100);   // TODO: make compression configurable\n      }\n\n      digest.add(val);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/PercentileAgg.Acc#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/PercentileAgg.Acc#collect(int,int).mjava","sourceNew":"    public void collect(int doc, int slotNum) throws IOException {\n      if (!values.exists(doc)) return;\n      double val = values.doubleVal(doc);\n\n      AVLTreeDigest digest = digests[slotNum];\n      if (digest == null) {\n        digests[slotNum] = digest = new AVLTreeDigest(100);   // TODO: make compression configurable\n      }\n\n      digest.add(val);\n    }\n\n","sourceOld":"    public void collect(int doc, int slotNum) {\n      if (!values.exists(doc)) return;\n      double val = values.doubleVal(doc);\n\n      AVLTreeDigest digest = digests[slotNum];\n      if (digest == null) {\n        digests[slotNum] = digest = new AVLTreeDigest(100);   // TODO: make compression configurable\n      }\n\n      digest.add(val);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/PercentileAgg.Acc#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/PercentileAgg.Acc#collect(int,int).mjava","sourceNew":"    public void collect(int doc, int slotNum) throws IOException {\n      if (!values.exists(doc)) return;\n      double val = values.doubleVal(doc);\n\n      AVLTreeDigest digest = digests[slotNum];\n      if (digest == null) {\n        digests[slotNum] = digest = new AVLTreeDigest(100);   // TODO: make compression configurable\n      }\n\n      digest.add(val);\n    }\n\n","sourceOld":"    public void collect(int doc, int slotNum) {\n      if (!values.exists(doc)) return;\n      double val = values.doubleVal(doc);\n\n      AVLTreeDigest digest = digests[slotNum];\n      if (digest == null) {\n        digests[slotNum] = digest = new AVLTreeDigest(100);   // TODO: make compression configurable\n      }\n\n      digest.add(val);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":5,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/PercentileAgg.Acc#collect(int,int,IntFunction[SlotContext]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/PercentileAgg.Acc#collect(int,int).mjava","sourceNew":"    public void collect(int doc, int slotNum, IntFunction<SlotContext> slotContext) throws IOException {\n      if (!values.exists(doc)) return;\n      double val = values.doubleVal(doc);\n\n      AVLTreeDigest digest = digests[slotNum];\n      if (digest == null) {\n        digests[slotNum] = digest = new AVLTreeDigest(100);   // TODO: make compression configurable\n      }\n\n      digest.add(val);\n    }\n\n","sourceOld":"    public void collect(int doc, int slotNum) throws IOException {\n      if (!values.exists(doc)) return;\n      double val = values.doubleVal(doc);\n\n      AVLTreeDigest digest = digests[slotNum];\n      if (digest == null) {\n        digests[slotNum] = digest = new AVLTreeDigest(100);   // TODO: make compression configurable\n      }\n\n      digest.add(val);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7e1a5b7d1a46c866d92b1922fa64a4b7ae6f7d1f"],"7e1a5b7d1a46c866d92b1922fa64a4b7ae6f7d1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7e1a5b7d1a46c866d92b1922fa64a4b7ae6f7d1f","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["7e1a5b7d1a46c866d92b1922fa64a4b7ae6f7d1f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7e1a5b7d1a46c866d92b1922fa64a4b7ae6f7d1f","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c705a0d590cf911e7c942df49563ca2ea176e22"]},"commit2Childs":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"7e1a5b7d1a46c866d92b1922fa64a4b7ae6f7d1f":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2c705a0d590cf911e7c942df49563ca2ea176e22","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7e1a5b7d1a46c866d92b1922fa64a4b7ae6f7d1f"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}