{"path":"lucene/core/src/java/org/apache/lucene/util/packed/Packed32#Packed32(int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed32#Packed32(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/Packed32#Packed32(int,int).mjava","sourceNew":"  /**\n   * Creates an array with the internal structures adjusted for the given\n   * limits and initialized to 0.\n   * @param valueCount   the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   *        Note: bitsPerValue >32 is not supported by this implementation.\n   */\n  public Packed32(int valueCount, int bitsPerValue) {\n    this(new int[(int)(((long)valueCount) * bitsPerValue / BLOCK_SIZE + 2)],\n            valueCount, bitsPerValue);\n  }\n\n","sourceOld":"  /**\n   * Creates an array with the internal structures adjusted for the given\n   * limits and initialized to 0.\n   * @param valueCount   the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   *        Note: bitsPerValue >32 is not supported by this implementation.\n   */\n  public Packed32(int valueCount, int bitsPerValue) {\n    this(new int[(int)(((long)valueCount) * bitsPerValue / BLOCK_SIZE + 2)],\n            valueCount, bitsPerValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed32#Packed32(int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates an array with the internal structures adjusted for the given\n   * limits and initialized to 0.\n   * @param valueCount   the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   *        Note: bitsPerValue >32 is not supported by this implementation.\n   */\n  public Packed32(int valueCount, int bitsPerValue) {\n    this(new int[(int)(((long)valueCount) * bitsPerValue / BLOCK_SIZE + 2)],\n            valueCount, bitsPerValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}