{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","commits":[{"id":"389d072b64597cdcf75c2d536aaec3e8afe3393f","date":1427818698,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return new Runnable() {\n      @Override\n      public void run() {\n        log.info(\"config update listener called for core {}\", coreName);\n        SolrZkClient zkClient = cc.getZkController().getZkClient();\n        int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n        SolrConfig cfg = null;\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          cfg = core.getSolrConfig();\n          solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n          overlayVersion = core.getSolrConfig().getZnodeVersion();\n          if (managedSchmaResourcePath != null) {\n            managedSchemaVersion = ((ManagedIndexSchema) core.getLatestSchema()).getSchemaZkVersion();\n          }\n\n        }\n        if (cfg != null) {\n          cfg.refreshRequestParams();\n        }\n        if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n            checkStale(zkClient, solrConfigPath, overlayVersion) ||\n            checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n          log.info(\"core reload {}\", coreName);\n          cc.reload(coreName);\n          return;\n        }\n        //some files in conf directory may have  other than managedschema, overlay, params\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          for (Runnable listener : core.confListeners) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.error(\"Error in listener \", e);\n            }\n          }\n        }\n\n      }\n    };\n  }\n\n","sourceOld":"  private static Runnable getListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return new Runnable() {\n      @Override\n      public void run() {\n        log.info(\"config update listener called for core {}\", coreName);\n        SolrZkClient zkClient = cc.getZkController().getZkClient();\n        int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n        SolrConfig cfg = null;\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          cfg = core.getSolrConfig();\n          solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n          overlayVersion = core.getSolrConfig().getZnodeVersion();\n          if (managedSchmaResourcePath != null) {\n            managedSchemaVersion = ((ManagedIndexSchema) core.getLatestSchema()).getSchemaZkVersion();\n          }\n\n        }\n        if (cfg != null) {\n          cfg.refreshRequestParams();\n        }\n        if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n            checkStale(zkClient, solrConfigPath, overlayVersion) ||\n            checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n          log.info(\"core reload {}\", coreName);\n          cc.reload(coreName);\n          return;\n        }\n        //some files in conf directoy has changed other than schema.xml,\n        // solrconfig.xml. so fire event listeners\n\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          for (Runnable listener : core.confListeners) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.error(\"Error in listener \", e);\n            }\n          }\n        }\n\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return new Runnable() {\n      @Override\n      public void run() {\n        log.info(\"config update listener called for core {}\", coreName);\n        SolrZkClient zkClient = cc.getZkController().getZkClient();\n        int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n        SolrConfig cfg = null;\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          cfg = core.getSolrConfig();\n          solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n          overlayVersion = core.getSolrConfig().getZnodeVersion();\n          if (managedSchmaResourcePath != null) {\n            managedSchemaVersion = ((ManagedIndexSchema) core.getLatestSchema()).getSchemaZkVersion();\n          }\n\n        }\n        if (cfg != null) {\n          cfg.refreshRequestParams();\n        }\n        if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n            checkStale(zkClient, solrConfigPath, overlayVersion) ||\n            checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n          log.info(\"core reload {}\", coreName);\n          cc.reload(coreName);\n          return;\n        }\n        //some files in conf directory may have  other than managedschema, overlay, params\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          for (Runnable listener : core.confListeners) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.error(\"Error in listener \", e);\n            }\n          }\n        }\n\n      }\n    };\n  }\n\n","sourceOld":"  private static Runnable getListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return new Runnable() {\n      @Override\n      public void run() {\n        log.info(\"config update listener called for core {}\", coreName);\n        SolrZkClient zkClient = cc.getZkController().getZkClient();\n        int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n        SolrConfig cfg = null;\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          cfg = core.getSolrConfig();\n          solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n          overlayVersion = core.getSolrConfig().getZnodeVersion();\n          if (managedSchmaResourcePath != null) {\n            managedSchemaVersion = ((ManagedIndexSchema) core.getLatestSchema()).getSchemaZkVersion();\n          }\n\n        }\n        if (cfg != null) {\n          cfg.refreshRequestParams();\n        }\n        if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n            checkStale(zkClient, solrConfigPath, overlayVersion) ||\n            checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n          log.info(\"core reload {}\", coreName);\n          cc.reload(coreName);\n          return;\n        }\n        //some files in conf directoy has changed other than schema.xml,\n        // solrconfig.xml. so fire event listeners\n\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          for (Runnable listener : core.confListeners) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.error(\"Error in listener \", e);\n            }\n          }\n        }\n\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore core1 = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (core1 == null || core1.isClosed()) return;\n        cfg = core1.getSolrConfig();\n        solrConfigversion = core1.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = core1.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) core1.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        cc.reload(coreName);\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore core1 = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (core1 == null || core1.isClosed()) return;\n        for (Runnable listener : core1.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return new Runnable() {\n      @Override\n      public void run() {\n        log.info(\"config update listener called for core {}\", coreName);\n        SolrZkClient zkClient = cc.getZkController().getZkClient();\n        int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n        SolrConfig cfg = null;\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          cfg = core.getSolrConfig();\n          solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n          overlayVersion = core.getSolrConfig().getZnodeVersion();\n          if (managedSchmaResourcePath != null) {\n            managedSchemaVersion = ((ManagedIndexSchema) core.getLatestSchema()).getSchemaZkVersion();\n          }\n\n        }\n        if (cfg != null) {\n          cfg.refreshRequestParams();\n        }\n        if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n            checkStale(zkClient, solrConfigPath, overlayVersion) ||\n            checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n          log.info(\"core reload {}\", coreName);\n          cc.reload(coreName);\n          return;\n        }\n        //some files in conf directory may have  other than managedschema, overlay, params\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          for (Runnable listener : core.confListeners) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.error(\"Error in listener \", e);\n            }\n          }\n        }\n\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["ed32d8e4e6f80a018e7092cc35f204dcef1e87ec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ed32d8e4e6f80a018e7092cc35f204dcef1e87ec","date":1457637589,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore core1 = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (core1 == null || core1.isClosed()) return;\n        cfg = core1.getSolrConfig();\n        solrConfigversion = core1.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = core1.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) core1.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        try {\n          cc.reload(coreName);\n        } catch (SolrCoreState.CoreIsClosedException e) {\n          /*no problem this core is already closed*/\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore core1 = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (core1 == null || core1.isClosed()) return;\n        for (Runnable listener : core1.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore core1 = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (core1 == null || core1.isClosed()) return;\n        cfg = core1.getSolrConfig();\n        solrConfigversion = core1.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = core1.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) core1.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        cc.reload(coreName);\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore core1 = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (core1 == null || core1.isClosed()) return;\n        for (Runnable listener : core1.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","bugFix":["3a0c04b71951333291abc7f317109a6a5957bd28"],"bugIntro":["a2e033fd1aeb190ab4f80020ab3b057baf75856b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"734d38d5abe4f98cce936b31450702d597f6fc69","date":1467794285,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n\n        try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          solrCore.setLatestSchema(SchemaManager.getFreshManagedSchema(solrCore));\n        } catch (Exception e) {\n          log.warn(\"\", SolrZkClient.checkInterrupted(e));\n        }\n\n        log.info(\"core reload {}\", coreName);\n        try {\n          cc.reload(coreName);\n        } catch (SolrCoreState.CoreIsClosedException e) {\n          /*no problem this core is already closed*/\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore core1 = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (core1 == null || core1.isClosed()) return;\n        cfg = core1.getSolrConfig();\n        solrConfigversion = core1.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = core1.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) core1.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        try {\n          cc.reload(coreName);\n        } catch (SolrCoreState.CoreIsClosedException e) {\n          /*no problem this core is already closed*/\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore core1 = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (core1 == null || core1.isClosed()) return;\n        for (Runnable listener : core1.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","5b25ee75ed6af3df45e6fa30072db01d921df493"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n\n        try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          solrCore.setLatestSchema(SchemaManager.getFreshManagedSchema(solrCore));\n        } catch (Exception e) {\n          log.warn(\"\", SolrZkClient.checkInterrupted(e));\n        }\n\n        log.info(\"core reload {}\", coreName);\n        try {\n          cc.reload(coreName);\n        } catch (SolrCoreState.CoreIsClosedException e) {\n          /*no problem this core is already closed*/\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore core1 = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (core1 == null || core1.isClosed()) return;\n        cfg = core1.getSolrConfig();\n        solrConfigversion = core1.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = core1.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) core1.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        try {\n          cc.reload(coreName);\n        } catch (SolrCoreState.CoreIsClosedException e) {\n          /*no problem this core is already closed*/\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore core1 = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (core1 == null || core1.isClosed()) return;\n        for (Runnable listener : core1.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b25ee75ed6af3df45e6fa30072db01d921df493","date":1481047896,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        try {\n          cc.reload(coreName);\n        } catch (SolrCoreState.CoreIsClosedException e) {\n          /*no problem this core is already closed*/\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n\n        try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          solrCore.setLatestSchema(SchemaManager.getFreshManagedSchema(solrCore));\n        } catch (Exception e) {\n          log.warn(\"\", SolrZkClient.checkInterrupted(e));\n        }\n\n        log.info(\"core reload {}\", coreName);\n        try {\n          cc.reload(coreName);\n        } catch (SolrCoreState.CoreIsClosedException e) {\n          /*no problem this core is already closed*/\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","bugFix":["734d38d5abe4f98cce936b31450702d597f6fc69"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","date":1481116359,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        try {\n          cc.reload(coreName);\n        } catch (SolrCoreState.CoreIsClosedException e) {\n          /*no problem this core is already closed*/\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n\n        try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          solrCore.setLatestSchema(SchemaManager.getFreshManagedSchema(solrCore));\n        } catch (Exception e) {\n          log.warn(\"\", SolrZkClient.checkInterrupted(e));\n        }\n\n        log.info(\"core reload {}\", coreName);\n        try {\n          cc.reload(coreName);\n        } catch (SolrCoreState.CoreIsClosedException e) {\n          /*no problem this core is already closed*/\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        try {\n          cc.reload(coreName);\n        } catch (SolrCoreState.CoreIsClosedException e) {\n          /*no problem this core is already closed*/\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n\n        try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          solrCore.setLatestSchema(SchemaManager.getFreshManagedSchema(solrCore));\n        } catch (Exception e) {\n          log.warn(\"\", SolrZkClient.checkInterrupted(e));\n        }\n\n        log.info(\"core reload {}\", coreName);\n        try {\n          cc.reload(coreName);\n        } catch (SolrCoreState.CoreIsClosedException e) {\n          /*no problem this core is already closed*/\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        try {\n          cc.reload(coreName);\n        } catch (SolrCoreState.CoreIsClosedException e) {\n          /*no problem this core is already closed*/\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        try {\n          cc.reload(coreName);\n        } catch (SolrCoreState.CoreIsClosedException e) {\n          /*no problem this core is already closed*/\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        try {\n          cc.reload(coreName);\n        } catch (SolrCoreState.CoreIsClosedException e) {\n          /*no problem this core is already closed*/\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        try {\n          cc.reload(coreName);\n        } catch (SolrCoreState.CoreIsClosedException e) {\n          /*no problem this core is already closed*/\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a2e033fd1aeb190ab4f80020ab3b057baf75856b","date":1493784605,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        SolrConfigHandler configHandler = ((SolrConfigHandler)core.getRequestHandler(\"/config\"));\n        if (configHandler.getReloadLock().tryLock()){\n          \n          try {\n            cc.reload(coreName);\n          } catch (SolrCoreState.CoreIsClosedException e) {\n            /*no problem this core is already closed*/\n          } finally {\n            configHandler.getReloadLock().unlock();\n          }\n        \n        } else {\n          log.info(\"Another reload is in progress. Not doing anything.\");\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        try {\n          cc.reload(coreName);\n        } catch (SolrCoreState.CoreIsClosedException e) {\n          /*no problem this core is already closed*/\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","bugFix":["ed32d8e4e6f80a018e7092cc35f204dcef1e87ec"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        SolrConfigHandler configHandler = ((SolrConfigHandler)core.getRequestHandler(\"/config\"));\n        if (configHandler.getReloadLock().tryLock()){\n          \n          try {\n            cc.reload(coreName);\n          } catch (SolrCoreState.CoreIsClosedException e) {\n            /*no problem this core is already closed*/\n          } finally {\n            configHandler.getReloadLock().unlock();\n          }\n        \n        } else {\n          log.info(\"Another reload is in progress. Not doing anything.\");\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        try {\n          cc.reload(coreName);\n        } catch (SolrCoreState.CoreIsClosedException e) {\n          /*no problem this core is already closed*/\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed() || solrCore.getCoreContainer().isShutDown()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        SolrConfigHandler configHandler = ((SolrConfigHandler)core.getRequestHandler(\"/config\"));\n        if (configHandler.getReloadLock().tryLock()){\n          \n          try {\n            cc.reload(coreName);\n          } catch (SolrCoreState.CoreIsClosedException e) {\n            /*no problem this core is already closed*/\n          } finally {\n            configHandler.getReloadLock().unlock();\n          }\n        \n        } else {\n          log.info(\"Another reload is in progress. Not doing anything.\");\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed() || cc.isShutDown()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        SolrConfigHandler configHandler = ((SolrConfigHandler)core.getRequestHandler(\"/config\"));\n        if (configHandler.getReloadLock().tryLock()){\n          \n          try {\n            cc.reload(coreName);\n          } catch (SolrCoreState.CoreIsClosedException e) {\n            /*no problem this core is already closed*/\n          } finally {\n            configHandler.getReloadLock().unlock();\n          }\n        \n        } else {\n          log.info(\"Another reload is in progress. Not doing anything.\");\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","bugFix":["734d38d5abe4f98cce936b31450702d597f6fc69"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed() || solrCore.getCoreContainer().isShutDown()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        SolrConfigHandler configHandler = ((SolrConfigHandler) core.getRequestHandler(\"/config\"));\n        if (configHandler.getReloadLock().tryLock()) {\n\n          try {\n            cc.reload(coreName);\n          } catch (SolrCoreState.CoreIsClosedException e) {\n            /*no problem this core is already closed*/\n          } finally {\n            configHandler.getReloadLock().unlock();\n          }\n\n        } else {\n          log.info(\"Another reload is in progress. Not doing anything.\");\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed() || cc.isShutDown()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed() || solrCore.getCoreContainer().isShutDown()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        SolrConfigHandler configHandler = ((SolrConfigHandler)core.getRequestHandler(\"/config\"));\n        if (configHandler.getReloadLock().tryLock()){\n          \n          try {\n            cc.reload(coreName);\n          } catch (SolrCoreState.CoreIsClosedException e) {\n            /*no problem this core is already closed*/\n          } finally {\n            configHandler.getReloadLock().unlock();\n          }\n        \n        } else {\n          log.info(\"Another reload is in progress. Not doing anything.\");\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed() || cc.isShutDown()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e225693f479462798cae64c4d4350c1df6632f41","date":1598082835,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final UUID coreId = core.uniqueId;\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed() || solrCore.getCoreContainer().isShutDown()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        SolrConfigHandler configHandler = ((SolrConfigHandler) core.getRequestHandler(\"/config\"));\n        if (configHandler.getReloadLock().tryLock()) {\n\n          try {\n            cc.reload(coreName, coreId);\n          } catch (SolrCoreState.CoreIsClosedException e) {\n            /*no problem this core is already closed*/\n          } finally {\n            configHandler.getReloadLock().unlock();\n          }\n\n        } else {\n          log.info(\"Another reload is in progress. Not doing anything.\");\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed() || cc.isShutDown()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed() || solrCore.getCoreContainer().isShutDown()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        SolrConfigHandler configHandler = ((SolrConfigHandler) core.getRequestHandler(\"/config\"));\n        if (configHandler.getReloadLock().tryLock()) {\n\n          try {\n            cc.reload(coreName);\n          } catch (SolrCoreState.CoreIsClosedException e) {\n            /*no problem this core is already closed*/\n          } finally {\n            configHandler.getReloadLock().unlock();\n          }\n\n        } else {\n          log.info(\"Another reload is in progress. Not doing anything.\");\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed() || cc.isShutDown()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fc1087854af39c9b439f47d913fd3ac1d85ac5c","date":1599523122,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final UUID coreId = core.uniqueId;\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true, coreId)) {\n        if (solrCore == null || solrCore.isClosed() || solrCore.getCoreContainer().isShutDown()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        SolrConfigHandler configHandler = ((SolrConfigHandler) core.getRequestHandler(\"/config\"));\n        if (configHandler.getReloadLock().tryLock()) {\n\n          try {\n            cc.reload(coreName, coreId, false);\n          } catch (SolrCoreState.CoreIsClosedException e) {\n            /*no problem this core is already closed*/\n          } finally {\n            configHandler.getReloadLock().unlock();\n          }\n\n        } else {\n          log.info(\"Another reload is in progress. Not doing anything.\");\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true, coreId)) {\n        if (solrCore == null || solrCore.isClosed() || cc.isShutDown()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final UUID coreId = core.uniqueId;\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed() || solrCore.getCoreContainer().isShutDown()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        SolrConfigHandler configHandler = ((SolrConfigHandler) core.getRequestHandler(\"/config\"));\n        if (configHandler.getReloadLock().tryLock()) {\n\n          try {\n            cc.reload(coreName, coreId);\n          } catch (SolrCoreState.CoreIsClosedException e) {\n            /*no problem this core is already closed*/\n          } finally {\n            configHandler.getReloadLock().unlock();\n          }\n\n        } else {\n          log.info(\"Another reload is in progress. Not doing anything.\");\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed() || cc.isShutDown()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"938fe8fd4d30ae70161827366f67c2382985e446","date":1600050178,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final UUID coreId = core.uniqueId;\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed() || solrCore.getCoreContainer().isShutDown()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        SolrConfigHandler configHandler = ((SolrConfigHandler) core.getRequestHandler(\"/config\"));\n        if (configHandler.getReloadLock().tryLock()) {\n\n          try {\n            cc.reload(coreName, coreId);\n          } catch (SolrCoreState.CoreIsClosedException e) {\n            /*no problem this core is already closed*/\n          } finally {\n            configHandler.getReloadLock().unlock();\n          }\n\n        } else {\n          log.info(\"Another reload is in progress. Not doing anything.\");\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed() || cc.isShutDown()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final UUID coreId = core.uniqueId;\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true, coreId)) {\n        if (solrCore == null || solrCore.isClosed() || solrCore.getCoreContainer().isShutDown()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        SolrConfigHandler configHandler = ((SolrConfigHandler) core.getRequestHandler(\"/config\"));\n        if (configHandler.getReloadLock().tryLock()) {\n\n          try {\n            cc.reload(coreName, coreId, false);\n          } catch (SolrCoreState.CoreIsClosedException e) {\n            /*no problem this core is already closed*/\n          } finally {\n            configHandler.getReloadLock().unlock();\n          }\n\n        } else {\n          log.info(\"Another reload is in progress. Not doing anything.\");\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true, coreId)) {\n        if (solrCore == null || solrCore.isClosed() || cc.isShutDown()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e451e492cce54699988e2ce0aea55e3ff170cb0","date":1600305561,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final UUID coreId = core.uniqueId;\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true, coreId)) {\n        if (solrCore == null || solrCore.isClosed() || solrCore.getCoreContainer().isShutDown()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        SolrConfigHandler configHandler = ((SolrConfigHandler) core.getRequestHandler(\"/config\"));\n        if (configHandler.getReloadLock().tryLock()) {\n\n          try {\n            cc.reload(coreName, coreId, false);\n          } catch (SolrCoreState.CoreIsClosedException e) {\n            /*no problem this core is already closed*/\n          } finally {\n            configHandler.getReloadLock().unlock();\n          }\n\n        } else {\n          log.info(\"Another reload is in progress. Not doing anything.\");\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true, coreId)) {\n        if (solrCore == null || solrCore.isClosed() || cc.isShutDown()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final UUID coreId = core.uniqueId;\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed() || solrCore.getCoreContainer().isShutDown()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        SolrConfigHandler configHandler = ((SolrConfigHandler) core.getRequestHandler(\"/config\"));\n        if (configHandler.getReloadLock().tryLock()) {\n\n          try {\n            cc.reload(coreName, coreId);\n          } catch (SolrCoreState.CoreIsClosedException e) {\n            /*no problem this core is already closed*/\n          } finally {\n            configHandler.getReloadLock().unlock();\n          }\n\n        } else {\n          log.info(\"Another reload is in progress. Not doing anything.\");\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n        if (solrCore == null || solrCore.isClosed() || cc.isShutDown()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"818e98f73e60a2284311c913586399fdb0bd90e2","date":1601357867,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final UUID coreId = core.uniqueId;\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true, coreId)) {\n        if (solrCore == null || solrCore.isClosed() || solrCore.getCoreContainer().isShutDown()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        SolrConfigHandler configHandler = ((SolrConfigHandler) core.getRequestHandler(\"/config\"));\n        if (configHandler.getReloadLock().tryLock()) {\n\n          try {\n            cc.reload(coreName, coreId);\n          } catch (SolrCoreState.CoreIsClosedException e) {\n            /*no problem this core is already closed*/\n          } finally {\n            configHandler.getReloadLock().unlock();\n          }\n\n        } else {\n          log.info(\"Another reload is in progress. Not doing anything.\");\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true, coreId)) {\n        if (solrCore == null || solrCore.isClosed() || cc.isShutDown()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final UUID coreId = core.uniqueId;\n    final CoreContainer cc = core.getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return () -> {\n      log.info(\"config update listener called for core {}\", coreName);\n      SolrZkClient zkClient = cc.getZkController().getZkClient();\n      int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n      SolrConfig cfg = null;\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true, coreId)) {\n        if (solrCore == null || solrCore.isClosed() || solrCore.getCoreContainer().isShutDown()) return;\n        cfg = solrCore.getSolrConfig();\n        solrConfigversion = solrCore.getSolrConfig().getOverlay().getZnodeVersion();\n        overlayVersion = solrCore.getSolrConfig().getZnodeVersion();\n        if (managedSchmaResourcePath != null) {\n          managedSchemaVersion = ((ManagedIndexSchema) solrCore.getLatestSchema()).getSchemaZkVersion();\n        }\n\n      }\n      if (cfg != null) {\n        cfg.refreshRequestParams();\n      }\n      if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n          checkStale(zkClient, solrConfigPath, overlayVersion) ||\n          checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n        log.info(\"core reload {}\", coreName);\n        SolrConfigHandler configHandler = ((SolrConfigHandler) core.getRequestHandler(\"/config\"));\n        if (configHandler.getReloadLock().tryLock()) {\n\n          try {\n            cc.reload(coreName, coreId, false);\n          } catch (SolrCoreState.CoreIsClosedException e) {\n            /*no problem this core is already closed*/\n          } finally {\n            configHandler.getReloadLock().unlock();\n          }\n\n        } else {\n          log.info(\"Another reload is in progress. Not doing anything.\");\n        }\n        return;\n      }\n      //some files in conf directory may have  other than managedschema, overlay, params\n      try (SolrCore solrCore = cc.solrCores.getCoreFromAnyList(coreName, true, coreId)) {\n        if (solrCore == null || solrCore.isClosed() || cc.isShutDown()) return;\n        for (Runnable listener : solrCore.confListeners) {\n          try {\n            listener.run();\n          } catch (Exception e) {\n            log.error(\"Error in listener \", e);\n          }\n        }\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"389d072b64597cdcf75c2d536aaec3e8afe3393f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["734d38d5abe4f98cce936b31450702d597f6fc69","5b25ee75ed6af3df45e6fa30072db01d921df493"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a2e033fd1aeb190ab4f80020ab3b057baf75856b"],"1fc1087854af39c9b439f47d913fd3ac1d85ac5c":["e225693f479462798cae64c4d4350c1df6632f41"],"818e98f73e60a2284311c913586399fdb0bd90e2":["0e451e492cce54699988e2ce0aea55e3ff170cb0"],"a2e033fd1aeb190ab4f80020ab3b057baf75856b":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"3a0c04b71951333291abc7f317109a6a5957bd28":["389d072b64597cdcf75c2d536aaec3e8afe3393f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ed32d8e4e6f80a018e7092cc35f204dcef1e87ec","734d38d5abe4f98cce936b31450702d597f6fc69"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a2e033fd1aeb190ab4f80020ab3b057baf75856b"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e225693f479462798cae64c4d4350c1df6632f41":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"938fe8fd4d30ae70161827366f67c2382985e446":["1fc1087854af39c9b439f47d913fd3ac1d85ac5c"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"734d38d5abe4f98cce936b31450702d597f6fc69":["ed32d8e4e6f80a018e7092cc35f204dcef1e87ec"],"5b25ee75ed6af3df45e6fa30072db01d921df493":["734d38d5abe4f98cce936b31450702d597f6fc69"],"fab172655716b96f7e42376116235017a922de3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","389d072b64597cdcf75c2d536aaec3e8afe3393f"],"0e451e492cce54699988e2ce0aea55e3ff170cb0":["938fe8fd4d30ae70161827366f67c2382985e446"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["818e98f73e60a2284311c913586399fdb0bd90e2"],"ed32d8e4e6f80a018e7092cc35f204dcef1e87ec":["3a0c04b71951333291abc7f317109a6a5957bd28"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"389d072b64597cdcf75c2d536aaec3e8afe3393f":["3a0c04b71951333291abc7f317109a6a5957bd28","fab172655716b96f7e42376116235017a922de3a"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","9856095f7afb5a607bf5e65077615ed91273508c"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"1fc1087854af39c9b439f47d913fd3ac1d85ac5c":["938fe8fd4d30ae70161827366f67c2382985e446"],"818e98f73e60a2284311c913586399fdb0bd90e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a2e033fd1aeb190ab4f80020ab3b057baf75856b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","e9017cf144952056066919f1ebc7897ff9bd71b1"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["a2e033fd1aeb190ab4f80020ab3b057baf75856b"],"3a0c04b71951333291abc7f317109a6a5957bd28":["ed32d8e4e6f80a018e7092cc35f204dcef1e87ec"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"2668c99990e4c94a78bac005aa682b7c5986d23a":["e225693f479462798cae64c4d4350c1df6632f41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["389d072b64597cdcf75c2d536aaec3e8afe3393f","fab172655716b96f7e42376116235017a922de3a"],"e225693f479462798cae64c4d4350c1df6632f41":["1fc1087854af39c9b439f47d913fd3ac1d85ac5c"],"938fe8fd4d30ae70161827366f67c2382985e446":["0e451e492cce54699988e2ce0aea55e3ff170cb0"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"734d38d5abe4f98cce936b31450702d597f6fc69":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5b25ee75ed6af3df45e6fa30072db01d921df493"],"5b25ee75ed6af3df45e6fa30072db01d921df493":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"fab172655716b96f7e42376116235017a922de3a":[],"0e451e492cce54699988e2ce0aea55e3ff170cb0":["818e98f73e60a2284311c913586399fdb0bd90e2"],"ed32d8e4e6f80a018e7092cc35f204dcef1e87ec":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","734d38d5abe4f98cce936b31450702d597f6fc69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","9856095f7afb5a607bf5e65077615ed91273508c","fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}