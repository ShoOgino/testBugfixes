{"path":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.getUniqueFieldCount());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).getUniqueTermCount());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.getUniqueFieldCount());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).getUniqueTermCount());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.getUniqueFieldCount());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).getUniqueTermCount());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.getUniqueFieldCount());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).getUniqueTermCount());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.getUniqueFieldCount());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).getUniqueTermCount());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.getUniqueFieldCount());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).getUniqueTermCount());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    InvertedFields v = reader.getTermVectors(0);\n    assertEquals(4, v.getUniqueFieldCount());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).getUniqueTermCount());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.getUniqueFieldCount());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).getUniqueTermCount());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.getUniqueFieldCount());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).getUniqueTermCount());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    InvertedFields v = reader.getTermVectors(0);\n    assertEquals(4, v.getUniqueFieldCount());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).getUniqueTermCount());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdb5e42b0cecd8dfb27767a02ada71899bf17917","date":1334100099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.size());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).size());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.getUniqueFieldCount());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).getUniqueTermCount());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.size());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).size());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.getUniqueFieldCount());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).getUniqueTermCount());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.size());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).size());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.size());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).size());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.size());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).size());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.size());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).size());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.size());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).size());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.size());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).size());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.size());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).size());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.size());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).size());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.size());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    Iterator<String> fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).size());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = v.terms(expectedFields[i]);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.size());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).size());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.size());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    Iterator<String> fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).size());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = v.terms(expectedFields[i]);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.size());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).size());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.size());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    Iterator<String> fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).size());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = v.terms(expectedFields[i]);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.size());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    FieldsEnum fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).size());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f21ce13f410ee015e1ba14687ab4b8518ac52a11","date":1359713213,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":null,"sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.size());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    Iterator<String> fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).size());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = v.terms(expectedFields[i]);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fa6955ed1b1007ded1349ab72cea4555640432f","date":1359721908,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":null,"sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    doc.add(newField(\"c\", \"some content here\", ft));\n    doc.add(newField(\"a\", \"some content here\", ft));\n    doc.add(newField(\"b\", \"some content here\", ft));\n    doc.add(newField(\"x\", \"some content here\", ft));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    Fields v = reader.getTermVectors(0);\n    assertEquals(4, v.size());\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    Iterator<String> fieldsEnum = v.iterator();\n    for(int i=0;i<expectedFields.length;i++) {\n      assertEquals(expectedFields[i], fieldsEnum.next());\n      assertEquals(3, v.terms(expectedFields[i]).size());\n\n      DocsAndPositionsEnum dpEnum = null;\n      Terms terms = v.terms(expectedFields[i]);\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      assertEquals(\"content\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[0], dpEnum.nextPosition());\n\n      assertEquals(\"here\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[1], dpEnum.nextPosition());\n\n      assertEquals(\"some\", termsEnum.next().utf8ToString());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(1, dpEnum.freq());\n      assertEquals(expectedPositions[2], dpEnum.nextPosition());\n\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"5a238fc456663f685a9db1ed8d680e348bb45171":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"0fa6955ed1b1007ded1349ab72cea4555640432f":["fb07ab105350b80ed9d63ca64b117084ed7391bc","f21ce13f410ee015e1ba14687ab4b8518ac52a11"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"f21ce13f410ee015e1ba14687ab4b8518ac52a11":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["d6f074e73200c07d54f242d3880a8da5a35ff97b","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f21ce13f410ee015e1ba14687ab4b8518ac52a11"]},"commit2Childs":{"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["5a238fc456663f685a9db1ed8d680e348bb45171","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["0fa6955ed1b1007ded1349ab72cea4555640432f","c7869f64c874ebf7f317d22c00baf2b6857797a6","f21ce13f410ee015e1ba14687ab4b8518ac52a11","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"0fa6955ed1b1007ded1349ab72cea4555640432f":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","5a238fc456663f685a9db1ed8d680e348bb45171"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"f21ce13f410ee015e1ba14687ab4b8518ac52a11":["0fa6955ed1b1007ded1349ab72cea4555640432f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["fb07ab105350b80ed9d63ca64b117084ed7391bc","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a238fc456663f685a9db1ed8d680e348bb45171","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0fa6955ed1b1007ded1349ab72cea4555640432f","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}