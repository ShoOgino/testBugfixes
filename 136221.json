{"path":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanRead(String).mjava","commits":[{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanRead(String).mjava","pathOld":"/dev/null","sourceNew":"  protected void ensureCanRead(String name) throws IOException {\n    deletePendingFiles();\n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is pending delete and cannot be overwritten\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9","date":1454454426,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanRead(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanRead(String).mjava","sourceNew":"  protected void ensureCanRead(String name) throws IOException {\n    deletePendingFiles();\n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is pending delete and cannot be opened for read\");\n    }\n  }\n\n","sourceOld":"  protected void ensureCanRead(String name) throws IOException {\n    deletePendingFiles();\n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is pending delete and cannot be overwritten\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"240cd0f67652ccfb87d7c5f8b2486d0f42012daa","date":1454536570,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanRead(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanRead(String).mjava","sourceNew":"  protected void ensureCanRead(String name) throws IOException {\n    maybeDeletePendingFiles();\n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is pending delete and cannot be opened for read\");\n    }\n  }\n\n","sourceOld":"  protected void ensureCanRead(String name) throws IOException {\n    deletePendingFiles();\n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is pending delete and cannot be opened for read\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd1f5a977dc3b97799ed300423294e2c457774f","date":1454537003,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanRead(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanRead(String).mjava","sourceNew":"  protected void ensureCanRead(String name) throws IOException {\n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is pending delete and cannot be opened for read\");\n    }\n  }\n\n","sourceOld":"  protected void ensureCanRead(String name) throws IOException {\n    maybeDeletePendingFiles();\n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is pending delete and cannot be opened for read\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanRead(String).mjava","pathOld":"/dev/null","sourceNew":"  protected void ensureCanRead(String name) throws IOException {\n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is pending delete and cannot be opened for read\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanRead(String).mjava","pathOld":"/dev/null","sourceNew":"  protected void ensureCanRead(String name) throws IOException {\n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is pending delete and cannot be opened for read\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":0,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanRead(String).mjava","pathOld":"/dev/null","sourceNew":"  protected void ensureCanRead(String name) throws IOException {\n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is pending delete and cannot be opened for read\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"240cd0f67652ccfb87d7c5f8b2486d0f42012daa":["fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9"],"acd1f5a977dc3b97799ed300423294e2c457774f":["240cd0f67652ccfb87d7c5f8b2486d0f42012daa","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","acd1f5a977dc3b97799ed300423294e2c457774f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b470f36a9372c97283360b1304eacbde22df6c0d"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9":["240cd0f67652ccfb87d7c5f8b2486d0f42012daa"],"240cd0f67652ccfb87d7c5f8b2486d0f42012daa":["acd1f5a977dc3b97799ed300423294e2c457774f"],"acd1f5a977dc3b97799ed300423294e2c457774f":["b470f36a9372c97283360b1304eacbde22df6c0d"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["acd1f5a977dc3b97799ed300423294e2c457774f","5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}