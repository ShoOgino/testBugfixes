{"path":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testRetryNode().mjava","commits":[{"id":"0491dc45f6b12f57e9c33751e9317a01995556c6","date":1385418725,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testRetryNode().mjava","pathOld":"/dev/null","sourceNew":"  private void testRetryNode() throws SolrServerException, IOException {\n    // Test RetryNode\n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    final HttpSolrServer solrclient = (HttpSolrServer) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    ArrayList<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, \"[ff01::114]:33332\" + context, ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        ZkNodeProps leaderProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n            ZkStateReader.CORE_NAME_PROP, \"\");\n        this.nodeProps = new ZkCoreNodeProps(leaderProps);\n\n        return true;\n      }\n    };\n    \n\n    nodes.add(retryNode);\n    \n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    \n    long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // we will get java.net.SocketException: Network is unreachable and then retry\n    assertEquals(numFoundBefore + 1, numFoundAfter);\n    \n    assertEquals(0, cmdDistrib.getErrors().size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d0939a3d7e30b8aaa693d32eb2342732b9fce14","date":1385423980,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testRetryNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testRetryNode().mjava","sourceNew":"  private void testRetryNode() throws SolrServerException, IOException {\n    // Test RetryNode\n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    final HttpSolrServer solrclient = (HttpSolrServer) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    ArrayList<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, \"[ff01::114]:33332\" + context, ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        ZkNodeProps leaderProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n            ZkStateReader.CORE_NAME_PROP, \"\");\n        this.nodeProps = new ZkCoreNodeProps(leaderProps);\n\n        return true;\n      }\n    };\n    \n\n    nodes.add(retryNode);\n    \n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    \n    long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // we will get java.net.SocketException: Network is unreachable and not retry\n    assertEquals(numFoundBefore, numFoundAfter);\n    \n    assertEquals(1, cmdDistrib.getErrors().size());\n  }\n\n","sourceOld":"  private void testRetryNode() throws SolrServerException, IOException {\n    // Test RetryNode\n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    final HttpSolrServer solrclient = (HttpSolrServer) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    ArrayList<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, \"[ff01::114]:33332\" + context, ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        ZkNodeProps leaderProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n            ZkStateReader.CORE_NAME_PROP, \"\");\n        this.nodeProps = new ZkCoreNodeProps(leaderProps);\n\n        return true;\n      }\n    };\n    \n\n    nodes.add(retryNode);\n    \n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    \n    long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // we will get java.net.SocketException: Network is unreachable and then retry\n    assertEquals(numFoundBefore + 1, numFoundAfter);\n    \n    assertEquals(0, cmdDistrib.getErrors().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28b49bc3bf9043888cb4243e659f6898fe2a95a9","date":1385594113,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testRetryNodeAgainstBadAddress().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testRetryNode().mjava","sourceNew":"  private void testRetryNodeAgainstBadAddress() throws SolrServerException, IOException {\n    // Test RetryNode\n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    final HttpSolrServer solrclient = (HttpSolrServer) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    ArrayList<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, \"[ff01::114]:33332\" + context, ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        ZkNodeProps leaderProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n            ZkStateReader.CORE_NAME_PROP, \"\");\n        this.nodeProps = new ZkCoreNodeProps(leaderProps);\n\n        return true;\n      }\n    };\n    \n\n    nodes.add(retryNode);\n    \n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    \n    long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // different OS's will throw different exceptions for the bad address above\n    if (numFoundBefore != numFoundAfter) {\n      assertEquals(0, cmdDistrib.getErrors().size());\n      assertEquals(numFoundBefore + 1, numFoundAfter);\n    } else {\n      // we will get java.net.SocketException: Network is unreachable and not retry\n      assertEquals(numFoundBefore, numFoundAfter);\n      \n      assertEquals(1, cmdDistrib.getErrors().size());\n    }\n    \n  }\n\n","sourceOld":"  private void testRetryNode() throws SolrServerException, IOException {\n    // Test RetryNode\n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    final HttpSolrServer solrclient = (HttpSolrServer) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    ArrayList<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, \"[ff01::114]:33332\" + context, ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        ZkNodeProps leaderProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n            ZkStateReader.CORE_NAME_PROP, \"\");\n        this.nodeProps = new ZkCoreNodeProps(leaderProps);\n\n        return true;\n      }\n    };\n    \n\n    nodes.add(retryNode);\n    \n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    \n    long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // we will get java.net.SocketException: Network is unreachable and not retry\n    assertEquals(numFoundBefore, numFoundAfter);\n    \n    assertEquals(1, cmdDistrib.getErrors().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28b49bc3bf9043888cb4243e659f6898fe2a95a9","date":1385594113,"type":6,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testRetryNodeWontRetrySocketError().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testRetryNode().mjava","sourceNew":"  private void testRetryNodeWontRetrySocketError() throws Exception {\n    final HttpSolrServer solrclient = (HttpSolrServer) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    final MockStreamingSolrServers ss = new MockStreamingSolrServers(updateShardHandler);\n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(ss, 5, 0);\n    ss.setExp(Exp.SOCKET_EXCEPTION);\n    ArrayList<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n\n    final AtomicInteger retries = new AtomicInteger();\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        retries.incrementAndGet();\n        return true;\n      }\n    };\n    \n\n    nodes.add(retryNode);\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    ss.setExp(null);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    \n    // it will checkRetry, but not actually do it...\n    assertEquals(1, retries.get());\n    \n    \n    long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // we will get java.net.SocketException: Network is unreachable, which we don't retry on\n    assertEquals(numFoundBefore, numFoundAfter);\n    assertEquals(1, cmdDistrib.getErrors().size());\n  }\n\n","sourceOld":"  private void testRetryNode() throws SolrServerException, IOException {\n    // Test RetryNode\n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    final HttpSolrServer solrclient = (HttpSolrServer) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    ArrayList<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, \"[ff01::114]:33332\" + context, ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        ZkNodeProps leaderProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n            ZkStateReader.CORE_NAME_PROP, \"\");\n        this.nodeProps = new ZkCoreNodeProps(leaderProps);\n\n        return true;\n      }\n    };\n    \n\n    nodes.add(retryNode);\n    \n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    \n    long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // we will get java.net.SocketException: Network is unreachable and not retry\n    assertEquals(numFoundBefore, numFoundAfter);\n    \n    assertEquals(1, cmdDistrib.getErrors().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28b49bc3bf9043888cb4243e659f6898fe2a95a9":["6d0939a3d7e30b8aaa693d32eb2342732b9fce14"],"6d0939a3d7e30b8aaa693d32eb2342732b9fce14":["0491dc45f6b12f57e9c33751e9317a01995556c6"],"0491dc45f6b12f57e9c33751e9317a01995556c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28b49bc3bf9043888cb4243e659f6898fe2a95a9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0491dc45f6b12f57e9c33751e9317a01995556c6"],"28b49bc3bf9043888cb4243e659f6898fe2a95a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d0939a3d7e30b8aaa693d32eb2342732b9fce14":["28b49bc3bf9043888cb4243e659f6898fe2a95a9"],"0491dc45f6b12f57e9c33751e9317a01995556c6":["6d0939a3d7e30b8aaa693d32eb2342732b9fce14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}