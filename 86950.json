{"path":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","commits":[{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               int flags) throws IOException {\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              flags);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, flags);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               boolean needsOffsets) throws IOException {\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              needsOffsets);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, needsOffsets);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               int flags) throws IOException {\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              flags);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, flags);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               int flags) throws IOException {\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              flags);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, flags);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               int flags) throws IOException {\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              flags);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, flags);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               int flags) throws IOException {\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              flags);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, flags);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}