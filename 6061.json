{"path":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","sourceNew":"\t/**\r\n\t * Obtains stop words for a field from the associated\r\n\t * {@link StopFilterFactory}, if any.\r\n\t */\r\n\tprivate Collection<CharArraySet> getSolrStopWordsForField(String fieldName) {\r\n\t\t// No need to synchronize here, Carrot2 ensures that instances\r\n\t\t// of this class are not used by multiple threads at a time.\r\n\t\tif (!solrStopWords.containsKey(fieldName)) {\r\n\t\t\tfinal Analyzer fieldAnalyzer = schema.getFieldType(fieldName)\r\n\t\t\t\t\t.getAnalyzer();\r\n\t\t\tif (fieldAnalyzer instanceof TokenizerChain) {\r\n\t\t\t\tfinal TokenFilterFactory[] filterFactories = ((TokenizerChain) fieldAnalyzer)\r\n\t\t\t\t\t\t.getTokenFilterFactories();\r\n\t\t\t\tfor (TokenFilterFactory factory : filterFactories) {\r\n\t\t\t\t\tif (factory instanceof StopFilterFactory) {\r\n\t\t\t\t\t\t// StopFilterFactory holds the stop words in a CharArraySet, but\r\n\t\t\t\t\t\t// the getStopWords() method returns a Set<?>, so we need to cast.\r\n\t\t\t\t\t\tsolrStopWords.put(fieldName,\r\n\t\t\t\t\t\t\t\t(CharArraySet) ((StopFilterFactory) factory).getStopWords());\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (factory instanceof CommonGramsFilterFactory) {\r\n\t\t\t\t\t\tsolrStopWords.put(fieldName,\r\n\t\t\t\t\t\t\t\t(CharArraySet) ((CommonGramsFilterFactory) factory)\r\n\t\t\t\t\t\t\t\t\t\t.getCommonWords());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn solrStopWords.get(fieldName);\r\n\t}\r\n\n","sourceOld":"\t/**\r\n\t * Obtains stop words for a field from the associated\r\n\t * {@link StopFilterFactory}, if any.\r\n\t */\r\n\tprivate Collection<CharArraySet> getSolrStopWordsForField(String fieldName) {\r\n\t\t// No need to synchronize here, Carrot2 ensures that instances\r\n\t\t// of this class are not used by multiple threads at a time.\r\n\t\tif (!solrStopWords.containsKey(fieldName)) {\r\n\t\t\tfinal Analyzer fieldAnalyzer = schema.getFieldType(fieldName)\r\n\t\t\t\t\t.getAnalyzer();\r\n\t\t\tif (fieldAnalyzer instanceof TokenizerChain) {\r\n\t\t\t\tfinal TokenFilterFactory[] filterFactories = ((TokenizerChain) fieldAnalyzer)\r\n\t\t\t\t\t\t.getTokenFilterFactories();\r\n\t\t\t\tfor (TokenFilterFactory factory : filterFactories) {\r\n\t\t\t\t\tif (factory instanceof StopFilterFactory) {\r\n\t\t\t\t\t\t// StopFilterFactory holds the stop words in a CharArraySet, but\r\n\t\t\t\t\t\t// the getStopWords() method returns a Set<?>, so we need to cast.\r\n\t\t\t\t\t\tsolrStopWords.put(fieldName,\r\n\t\t\t\t\t\t\t\t(CharArraySet) ((StopFilterFactory) factory).getStopWords());\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (factory instanceof CommonGramsFilterFactory) {\r\n\t\t\t\t\t\tsolrStopWords.put(fieldName,\r\n\t\t\t\t\t\t\t\t(CharArraySet) ((CommonGramsFilterFactory) factory)\r\n\t\t\t\t\t\t\t\t\t\t.getCommonWords());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn solrStopWords.get(fieldName);\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","sourceNew":"\t/**\r\n\t * Obtains stop words for a field from the associated\r\n\t * {@link StopFilterFactory}, if any.\r\n\t */\r\n\tprivate Collection<CharArraySet> getSolrStopWordsForField(String fieldName) {\r\n\t\t// No need to synchronize here, Carrot2 ensures that instances\r\n\t\t// of this class are not used by multiple threads at a time.\r\n\t\tif (!solrStopWords.containsKey(fieldName)) {\r\n\t\t\tfinal Analyzer fieldAnalyzer = schema.getFieldType(fieldName)\r\n\t\t\t\t\t.getAnalyzer();\r\n\t\t\tif (fieldAnalyzer instanceof TokenizerChain) {\r\n\t\t\t\tfinal TokenFilterFactory[] filterFactories = ((TokenizerChain) fieldAnalyzer)\r\n\t\t\t\t\t\t.getTokenFilterFactories();\r\n\t\t\t\tfor (TokenFilterFactory factory : filterFactories) {\r\n\t\t\t\t\tif (factory instanceof StopFilterFactory) {\r\n\t\t\t\t\t\t// StopFilterFactory holds the stop words in a CharArraySet, but\r\n\t\t\t\t\t\t// the getStopWords() method returns a Set<?>, so we need to cast.\r\n\t\t\t\t\t\tsolrStopWords.put(fieldName,\r\n\t\t\t\t\t\t\t\t(CharArraySet) ((StopFilterFactory) factory).getStopWords());\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (factory instanceof CommonGramsFilterFactory) {\r\n\t\t\t\t\t\tsolrStopWords.put(fieldName,\r\n\t\t\t\t\t\t\t\t(CharArraySet) ((CommonGramsFilterFactory) factory)\r\n\t\t\t\t\t\t\t\t\t\t.getCommonWords());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn solrStopWords.get(fieldName);\r\n\t}\r\n\n","sourceOld":"\t/**\r\n\t * Obtains stop words for a field from the associated\r\n\t * {@link StopFilterFactory}, if any.\r\n\t */\r\n\tprivate Collection<CharArraySet> getSolrStopWordsForField(String fieldName) {\r\n\t\t// No need to synchronize here, Carrot2 ensures that instances\r\n\t\t// of this class are not used by multiple threads at a time.\r\n\t\tif (!solrStopWords.containsKey(fieldName)) {\r\n\t\t\tfinal Analyzer fieldAnalyzer = schema.getFieldType(fieldName)\r\n\t\t\t\t\t.getAnalyzer();\r\n\t\t\tif (fieldAnalyzer instanceof TokenizerChain) {\r\n\t\t\t\tfinal TokenFilterFactory[] filterFactories = ((TokenizerChain) fieldAnalyzer)\r\n\t\t\t\t\t\t.getTokenFilterFactories();\r\n\t\t\t\tfor (TokenFilterFactory factory : filterFactories) {\r\n\t\t\t\t\tif (factory instanceof StopFilterFactory) {\r\n\t\t\t\t\t\t// StopFilterFactory holds the stop words in a CharArraySet, but\r\n\t\t\t\t\t\t// the getStopWords() method returns a Set<?>, so we need to cast.\r\n\t\t\t\t\t\tsolrStopWords.put(fieldName,\r\n\t\t\t\t\t\t\t\t(CharArraySet) ((StopFilterFactory) factory).getStopWords());\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (factory instanceof CommonGramsFilterFactory) {\r\n\t\t\t\t\t\tsolrStopWords.put(fieldName,\r\n\t\t\t\t\t\t\t\t(CharArraySet) ((CommonGramsFilterFactory) factory)\r\n\t\t\t\t\t\t\t\t\t\t.getCommonWords());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn solrStopWords.get(fieldName);\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef9e7ba08c124ce913ef60415c21ae1ca833d211","date":1323446079,"type":3,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","sourceNew":"  /**\r\n   * Obtains stop words for a field from the associated\r\n   * {@link StopFilterFactory}, if any.\r\n   */\r\n  private Collection<CharArraySet> getSolrStopWordsForField(String fieldName) {\r\n    // No need to synchronize here, Carrot2 ensures that instances\r\n    // of this class are not used by multiple threads at a time.\r\n    if (!solrStopWords.containsKey(fieldName)) {\r\n      final Analyzer fieldAnalyzer = schema.getFieldType(fieldName)\r\n          .getAnalyzer();\r\n      if (fieldAnalyzer instanceof TokenizerChain) {\r\n        final TokenFilterFactory[] filterFactories = ((TokenizerChain) fieldAnalyzer)\r\n            .getTokenFilterFactories();\r\n        for (TokenFilterFactory factory : filterFactories) {\r\n          if (factory instanceof StopFilterFactory) {\r\n            // StopFilterFactory holds the stop words in a CharArraySet, but\r\n            // the getStopWords() method returns a Set<?>, so we need to cast.\r\n            solrStopWords.put(fieldName,\r\n                (CharArraySet) ((StopFilterFactory) factory).getStopWords());\r\n          }\r\n\r\n          if (factory instanceof CommonGramsFilterFactory) {\r\n            solrStopWords.put(fieldName,\r\n                (CharArraySet) ((CommonGramsFilterFactory) factory)\r\n                    .getCommonWords());\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return solrStopWords.get(fieldName);\r\n  }\r\n\n","sourceOld":"\t/**\r\n\t * Obtains stop words for a field from the associated\r\n\t * {@link StopFilterFactory}, if any.\r\n\t */\r\n\tprivate Collection<CharArraySet> getSolrStopWordsForField(String fieldName) {\r\n\t\t// No need to synchronize here, Carrot2 ensures that instances\r\n\t\t// of this class are not used by multiple threads at a time.\r\n\t\tif (!solrStopWords.containsKey(fieldName)) {\r\n\t\t\tfinal Analyzer fieldAnalyzer = schema.getFieldType(fieldName)\r\n\t\t\t\t\t.getAnalyzer();\r\n\t\t\tif (fieldAnalyzer instanceof TokenizerChain) {\r\n\t\t\t\tfinal TokenFilterFactory[] filterFactories = ((TokenizerChain) fieldAnalyzer)\r\n\t\t\t\t\t\t.getTokenFilterFactories();\r\n\t\t\t\tfor (TokenFilterFactory factory : filterFactories) {\r\n\t\t\t\t\tif (factory instanceof StopFilterFactory) {\r\n\t\t\t\t\t\t// StopFilterFactory holds the stop words in a CharArraySet, but\r\n\t\t\t\t\t\t// the getStopWords() method returns a Set<?>, so we need to cast.\r\n\t\t\t\t\t\tsolrStopWords.put(fieldName,\r\n\t\t\t\t\t\t\t\t(CharArraySet) ((StopFilterFactory) factory).getStopWords());\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (factory instanceof CommonGramsFilterFactory) {\r\n\t\t\t\t\t\tsolrStopWords.put(fieldName,\r\n\t\t\t\t\t\t\t\t(CharArraySet) ((CommonGramsFilterFactory) factory)\r\n\t\t\t\t\t\t\t\t\t\t.getCommonWords());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn solrStopWords.get(fieldName);\r\n\t}\r\n\n","bugFix":null,"bugIntro":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","sourceNew":"  /**\r\n   * Obtains stop words for a field from the associated\r\n   * {@link StopFilterFactory}, if any.\r\n   */\r\n  private Collection<CharArraySet> getSolrStopWordsForField(String fieldName) {\r\n    // No need to synchronize here, Carrot2 ensures that instances\r\n    // of this class are not used by multiple threads at a time.\r\n    if (!solrStopWords.containsKey(fieldName)) {\r\n      final Analyzer fieldAnalyzer = schema.getFieldType(fieldName)\r\n          .getAnalyzer();\r\n      if (fieldAnalyzer instanceof TokenizerChain) {\r\n        final TokenFilterFactory[] filterFactories = ((TokenizerChain) fieldAnalyzer)\r\n            .getTokenFilterFactories();\r\n        for (TokenFilterFactory factory : filterFactories) {\r\n          if (factory instanceof StopFilterFactory) {\r\n            // StopFilterFactory holds the stop words in a CharArraySet, but\r\n            // the getStopWords() method returns a Set<?>, so we need to cast.\r\n            solrStopWords.put(fieldName,\r\n                (CharArraySet) ((StopFilterFactory) factory).getStopWords());\r\n          }\r\n\r\n          if (factory instanceof CommonGramsFilterFactory) {\r\n            solrStopWords.put(fieldName,\r\n                (CharArraySet) ((CommonGramsFilterFactory) factory)\r\n                    .getCommonWords());\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return solrStopWords.get(fieldName);\r\n  }\r\n\n","sourceOld":"\t/**\r\n\t * Obtains stop words for a field from the associated\r\n\t * {@link StopFilterFactory}, if any.\r\n\t */\r\n\tprivate Collection<CharArraySet> getSolrStopWordsForField(String fieldName) {\r\n\t\t// No need to synchronize here, Carrot2 ensures that instances\r\n\t\t// of this class are not used by multiple threads at a time.\r\n\t\tif (!solrStopWords.containsKey(fieldName)) {\r\n\t\t\tfinal Analyzer fieldAnalyzer = schema.getFieldType(fieldName)\r\n\t\t\t\t\t.getAnalyzer();\r\n\t\t\tif (fieldAnalyzer instanceof TokenizerChain) {\r\n\t\t\t\tfinal TokenFilterFactory[] filterFactories = ((TokenizerChain) fieldAnalyzer)\r\n\t\t\t\t\t\t.getTokenFilterFactories();\r\n\t\t\t\tfor (TokenFilterFactory factory : filterFactories) {\r\n\t\t\t\t\tif (factory instanceof StopFilterFactory) {\r\n\t\t\t\t\t\t// StopFilterFactory holds the stop words in a CharArraySet, but\r\n\t\t\t\t\t\t// the getStopWords() method returns a Set<?>, so we need to cast.\r\n\t\t\t\t\t\tsolrStopWords.put(fieldName,\r\n\t\t\t\t\t\t\t\t(CharArraySet) ((StopFilterFactory) factory).getStopWords());\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (factory instanceof CommonGramsFilterFactory) {\r\n\t\t\t\t\t\tsolrStopWords.put(fieldName,\r\n\t\t\t\t\t\t\t\t(CharArraySet) ((CommonGramsFilterFactory) factory)\r\n\t\t\t\t\t\t\t\t\t\t.getCommonWords());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn solrStopWords.get(fieldName);\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e","date":1328817590,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","sourceNew":"  /**\r\n   * Obtains stop words for a field from the associated\r\n   * {@link StopFilterFactory}, if any.\r\n   */\r\n  private Collection<CharArraySet> getSolrStopWordsForField(String fieldName) {\r\n    // No need to synchronize here, Carrot2 ensures that instances\r\n    // of this class are not used by multiple threads at a time.\r\n    if (!solrStopWords.containsKey(fieldName)) {\r\n      final Analyzer fieldAnalyzer = schema.getFieldType(fieldName)\r\n          .getAnalyzer();\r\n      if (fieldAnalyzer instanceof TokenizerChain) {\r\n        final TokenFilterFactory[] filterFactories = ((TokenizerChain) fieldAnalyzer)\r\n            .getTokenFilterFactories();\r\n        for (TokenFilterFactory factory : filterFactories) {\r\n          if (factory instanceof StopFilterFactory) {\r\n            // StopFilterFactory holds the stop words in a CharArraySet\r\n            solrStopWords.put(fieldName,\r\n                ((StopFilterFactory) factory).getStopWords());\r\n          }\r\n\r\n          if (factory instanceof CommonGramsFilterFactory) {\r\n            solrStopWords.put(fieldName,\r\n                ((CommonGramsFilterFactory) factory)\r\n                    .getCommonWords());\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return solrStopWords.get(fieldName);\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Obtains stop words for a field from the associated\r\n   * {@link StopFilterFactory}, if any.\r\n   */\r\n  private Collection<CharArraySet> getSolrStopWordsForField(String fieldName) {\r\n    // No need to synchronize here, Carrot2 ensures that instances\r\n    // of this class are not used by multiple threads at a time.\r\n    if (!solrStopWords.containsKey(fieldName)) {\r\n      final Analyzer fieldAnalyzer = schema.getFieldType(fieldName)\r\n          .getAnalyzer();\r\n      if (fieldAnalyzer instanceof TokenizerChain) {\r\n        final TokenFilterFactory[] filterFactories = ((TokenizerChain) fieldAnalyzer)\r\n            .getTokenFilterFactories();\r\n        for (TokenFilterFactory factory : filterFactories) {\r\n          if (factory instanceof StopFilterFactory) {\r\n            // StopFilterFactory holds the stop words in a CharArraySet, but\r\n            // the getStopWords() method returns a Set<?>, so we need to cast.\r\n            solrStopWords.put(fieldName,\r\n                (CharArraySet) ((StopFilterFactory) factory).getStopWords());\r\n          }\r\n\r\n          if (factory instanceof CommonGramsFilterFactory) {\r\n            solrStopWords.put(fieldName,\r\n                (CharArraySet) ((CommonGramsFilterFactory) factory)\r\n                    .getCommonWords());\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return solrStopWords.get(fieldName);\r\n  }\r\n\n","bugFix":["ef9e7ba08c124ce913ef60415c21ae1ca833d211"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","date":1332766738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","sourceNew":"  /**\n   * Obtains stop words for a field from the associated\n   * {@link StopFilterFactory}, if any.\n   */\n  private Collection<CharArraySet> getSolrStopWordsForField(String fieldName) {\n    // No need to synchronize here, Carrot2 ensures that instances\n    // of this class are not used by multiple threads at a time.\n    if (!solrStopWords.containsKey(fieldName)) {\n      final Analyzer fieldAnalyzer = schema.getFieldType(fieldName)\n          .getAnalyzer();\n      if (fieldAnalyzer instanceof TokenizerChain) {\n        final TokenFilterFactory[] filterFactories = ((TokenizerChain) fieldAnalyzer)\n            .getTokenFilterFactories();\n        for (TokenFilterFactory factory : filterFactories) {\n          if (factory instanceof StopFilterFactory) {\n            // StopFilterFactory holds the stop words in a CharArraySet\n            solrStopWords.put(fieldName,\n                ((StopFilterFactory) factory).getStopWords());\n          }\n\n          if (factory instanceof CommonGramsFilterFactory) {\n            solrStopWords.put(fieldName,\n                ((CommonGramsFilterFactory) factory)\n                    .getCommonWords());\n          }\n        }\n      }\n    }\n    return solrStopWords.get(fieldName);\n  }\n\n","sourceOld":"  /**\r\n   * Obtains stop words for a field from the associated\r\n   * {@link StopFilterFactory}, if any.\r\n   */\r\n  private Collection<CharArraySet> getSolrStopWordsForField(String fieldName) {\r\n    // No need to synchronize here, Carrot2 ensures that instances\r\n    // of this class are not used by multiple threads at a time.\r\n    if (!solrStopWords.containsKey(fieldName)) {\r\n      final Analyzer fieldAnalyzer = schema.getFieldType(fieldName)\r\n          .getAnalyzer();\r\n      if (fieldAnalyzer instanceof TokenizerChain) {\r\n        final TokenFilterFactory[] filterFactories = ((TokenizerChain) fieldAnalyzer)\r\n            .getTokenFilterFactories();\r\n        for (TokenFilterFactory factory : filterFactories) {\r\n          if (factory instanceof StopFilterFactory) {\r\n            // StopFilterFactory holds the stop words in a CharArraySet\r\n            solrStopWords.put(fieldName,\r\n                ((StopFilterFactory) factory).getStopWords());\r\n          }\r\n\r\n          if (factory instanceof CommonGramsFilterFactory) {\r\n            solrStopWords.put(fieldName,\r\n                ((CommonGramsFilterFactory) factory)\r\n                    .getCommonWords());\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return solrStopWords.get(fieldName);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","sourceNew":"  /**\n   * Obtains stop words for a field from the associated\n   * {@link StopFilterFactory}, if any.\n   */\n  private Collection<CharArraySet> getSolrStopWordsForField(String fieldName) {\n    // No need to synchronize here, Carrot2 ensures that instances\n    // of this class are not used by multiple threads at a time.\n    if (!solrStopWords.containsKey(fieldName)) {\n      final Analyzer fieldAnalyzer = core.getLatestSchema().getFieldType(fieldName)\n          .getAnalyzer();\n      if (fieldAnalyzer instanceof TokenizerChain) {\n        final TokenFilterFactory[] filterFactories = ((TokenizerChain) fieldAnalyzer)\n            .getTokenFilterFactories();\n        for (TokenFilterFactory factory : filterFactories) {\n          if (factory instanceof StopFilterFactory) {\n            // StopFilterFactory holds the stop words in a CharArraySet\n            solrStopWords.put(fieldName,\n                ((StopFilterFactory) factory).getStopWords());\n          }\n\n          if (factory instanceof CommonGramsFilterFactory) {\n            solrStopWords.put(fieldName,\n                ((CommonGramsFilterFactory) factory)\n                    .getCommonWords());\n          }\n        }\n      }\n    }\n    return solrStopWords.get(fieldName);\n  }\n\n","sourceOld":"  /**\n   * Obtains stop words for a field from the associated\n   * {@link StopFilterFactory}, if any.\n   */\n  private Collection<CharArraySet> getSolrStopWordsForField(String fieldName) {\n    // No need to synchronize here, Carrot2 ensures that instances\n    // of this class are not used by multiple threads at a time.\n    if (!solrStopWords.containsKey(fieldName)) {\n      final Analyzer fieldAnalyzer = schema.getFieldType(fieldName)\n          .getAnalyzer();\n      if (fieldAnalyzer instanceof TokenizerChain) {\n        final TokenFilterFactory[] filterFactories = ((TokenizerChain) fieldAnalyzer)\n            .getTokenFilterFactories();\n        for (TokenFilterFactory factory : filterFactories) {\n          if (factory instanceof StopFilterFactory) {\n            // StopFilterFactory holds the stop words in a CharArraySet\n            solrStopWords.put(fieldName,\n                ((StopFilterFactory) factory).getStopWords());\n          }\n\n          if (factory instanceof CommonGramsFilterFactory) {\n            solrStopWords.put(fieldName,\n                ((CommonGramsFilterFactory) factory)\n                    .getCommonWords());\n          }\n        }\n      }\n    }\n    return solrStopWords.get(fieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"123698fbe83b595f9e084f0019cd35ab4a01d7f7","date":1399070065,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","sourceNew":"  /**\n   * Obtains stop words for a field from the associated\n   * {@link StopFilterFactory}, if any.\n   */\n  private Collection<CharArraySet> getSolrStopWordsForField(String fieldName) {\n    // No need to synchronize here, Carrot2 ensures that instances\n    // of this class are not used by multiple threads at a time.\n    if (!solrStopWords.containsKey(fieldName)) {\n      final Analyzer fieldAnalyzer = core.getLatestSchema().getFieldType(fieldName)\n          .getIndexAnalyzer();\n      if (fieldAnalyzer instanceof TokenizerChain) {\n        final TokenFilterFactory[] filterFactories = ((TokenizerChain) fieldAnalyzer)\n            .getTokenFilterFactories();\n        for (TokenFilterFactory factory : filterFactories) {\n          if (factory instanceof StopFilterFactory) {\n            // StopFilterFactory holds the stop words in a CharArraySet\n            solrStopWords.put(fieldName,\n                ((StopFilterFactory) factory).getStopWords());\n          }\n\n          if (factory instanceof CommonGramsFilterFactory) {\n            solrStopWords.put(fieldName,\n                ((CommonGramsFilterFactory) factory)\n                    .getCommonWords());\n          }\n        }\n      }\n    }\n    return solrStopWords.get(fieldName);\n  }\n\n","sourceOld":"  /**\n   * Obtains stop words for a field from the associated\n   * {@link StopFilterFactory}, if any.\n   */\n  private Collection<CharArraySet> getSolrStopWordsForField(String fieldName) {\n    // No need to synchronize here, Carrot2 ensures that instances\n    // of this class are not used by multiple threads at a time.\n    if (!solrStopWords.containsKey(fieldName)) {\n      final Analyzer fieldAnalyzer = core.getLatestSchema().getFieldType(fieldName)\n          .getAnalyzer();\n      if (fieldAnalyzer instanceof TokenizerChain) {\n        final TokenFilterFactory[] filterFactories = ((TokenizerChain) fieldAnalyzer)\n            .getTokenFilterFactories();\n        for (TokenFilterFactory factory : filterFactories) {\n          if (factory instanceof StopFilterFactory) {\n            // StopFilterFactory holds the stop words in a CharArraySet\n            solrStopWords.put(fieldName,\n                ((StopFilterFactory) factory).getStopWords());\n          }\n\n          if (factory instanceof CommonGramsFilterFactory) {\n            solrStopWords.put(fieldName,\n                ((CommonGramsFilterFactory) factory)\n                    .getCommonWords());\n          }\n        }\n      }\n    }\n    return solrStopWords.get(fieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f","date":1478271720,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","sourceNew":"  /**\n   * Obtains stop words for a field from the associated\n   * {@link StopFilterFactory}, if any.\n   */\n  private List<CharArraySet> getSolrStopWordsForField(String fieldName) {\n    // No need to synchronize here, Carrot2 ensures that instances\n    // of this class are not used by multiple threads at a time.\n    synchronized (solrStopWords) {\n      if (!solrStopWords.containsKey(fieldName)) {\n        solrStopWords.put(fieldName, new ArrayList<>());\n\n        IndexSchema schema = core.getLatestSchema();\n        final Analyzer fieldAnalyzer = schema.getFieldType(fieldName).getIndexAnalyzer();\n        if (fieldAnalyzer instanceof TokenizerChain) {\n          final TokenFilterFactory[] filterFactories = \n              ((TokenizerChain) fieldAnalyzer).getTokenFilterFactories();\n          for (TokenFilterFactory factory : filterFactories) {\n            if (factory instanceof StopFilterFactory) {\n              // StopFilterFactory holds the stop words in a CharArraySet\n              CharArraySet stopWords = ((StopFilterFactory) factory).getStopWords();\n              solrStopWords.get(fieldName).add(stopWords);\n            }\n\n            if (factory instanceof CommonGramsFilterFactory) {\n              CharArraySet commonWords = ((CommonGramsFilterFactory) factory).getCommonWords();\n              solrStopWords.get(fieldName).add(commonWords);\n            }\n          }\n        }\n      }\n      return solrStopWords.get(fieldName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Obtains stop words for a field from the associated\n   * {@link StopFilterFactory}, if any.\n   */\n  private Collection<CharArraySet> getSolrStopWordsForField(String fieldName) {\n    // No need to synchronize here, Carrot2 ensures that instances\n    // of this class are not used by multiple threads at a time.\n    if (!solrStopWords.containsKey(fieldName)) {\n      final Analyzer fieldAnalyzer = core.getLatestSchema().getFieldType(fieldName)\n          .getIndexAnalyzer();\n      if (fieldAnalyzer instanceof TokenizerChain) {\n        final TokenFilterFactory[] filterFactories = ((TokenizerChain) fieldAnalyzer)\n            .getTokenFilterFactories();\n        for (TokenFilterFactory factory : filterFactories) {\n          if (factory instanceof StopFilterFactory) {\n            // StopFilterFactory holds the stop words in a CharArraySet\n            solrStopWords.put(fieldName,\n                ((StopFilterFactory) factory).getStopWords());\n          }\n\n          if (factory instanceof CommonGramsFilterFactory) {\n            solrStopWords.put(fieldName,\n                ((CommonGramsFilterFactory) factory)\n                    .getCommonWords());\n          }\n        }\n      }\n    }\n    return solrStopWords.get(fieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getSolrStopWordsForField(String).mjava","sourceNew":"  /**\n   * Obtains stop words for a field from the associated\n   * {@link StopFilterFactory}, if any.\n   */\n  private List<CharArraySet> getSolrStopWordsForField(String fieldName) {\n    // No need to synchronize here, Carrot2 ensures that instances\n    // of this class are not used by multiple threads at a time.\n    synchronized (solrStopWords) {\n      if (!solrStopWords.containsKey(fieldName)) {\n        solrStopWords.put(fieldName, new ArrayList<>());\n\n        IndexSchema schema = core.getLatestSchema();\n        final Analyzer fieldAnalyzer = schema.getFieldType(fieldName).getIndexAnalyzer();\n        if (fieldAnalyzer instanceof TokenizerChain) {\n          final TokenFilterFactory[] filterFactories = \n              ((TokenizerChain) fieldAnalyzer).getTokenFilterFactories();\n          for (TokenFilterFactory factory : filterFactories) {\n            if (factory instanceof StopFilterFactory) {\n              // StopFilterFactory holds the stop words in a CharArraySet\n              CharArraySet stopWords = ((StopFilterFactory) factory).getStopWords();\n              solrStopWords.get(fieldName).add(stopWords);\n            }\n\n            if (factory instanceof CommonGramsFilterFactory) {\n              CharArraySet commonWords = ((CommonGramsFilterFactory) factory).getCommonWords();\n              solrStopWords.get(fieldName).add(commonWords);\n            }\n          }\n        }\n      }\n      return solrStopWords.get(fieldName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Obtains stop words for a field from the associated\n   * {@link StopFilterFactory}, if any.\n   */\n  private Collection<CharArraySet> getSolrStopWordsForField(String fieldName) {\n    // No need to synchronize here, Carrot2 ensures that instances\n    // of this class are not used by multiple threads at a time.\n    if (!solrStopWords.containsKey(fieldName)) {\n      final Analyzer fieldAnalyzer = core.getLatestSchema().getFieldType(fieldName)\n          .getIndexAnalyzer();\n      if (fieldAnalyzer instanceof TokenizerChain) {\n        final TokenFilterFactory[] filterFactories = ((TokenizerChain) fieldAnalyzer)\n            .getTokenFilterFactories();\n        for (TokenFilterFactory factory : filterFactories) {\n          if (factory instanceof StopFilterFactory) {\n            // StopFilterFactory holds the stop words in a CharArraySet\n            solrStopWords.put(fieldName,\n                ((StopFilterFactory) factory).getStopWords());\n          }\n\n          if (factory instanceof CommonGramsFilterFactory) {\n            solrStopWords.put(fieldName,\n                ((CommonGramsFilterFactory) factory)\n                    .getCommonWords());\n          }\n        }\n      }\n    }\n    return solrStopWords.get(fieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e":["ef9e7ba08c124ce913ef60415c21ae1ca833d211"],"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["123698fbe83b595f9e084f0019cd35ab4a01d7f7","7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["c26f00b574427b55127e869b935845554afde1fa","ef9e7ba08c124ce913ef60415c21ae1ca833d211"],"ef9e7ba08c124ce913ef60415c21ae1ca833d211":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f"],"08970e5b8411182a29412c177eff67ec1110095b":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23"]},"commit2Childs":{"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23"],"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23":["08970e5b8411182a29412c177eff67ec1110095b"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","ef9e7ba08c124ce913ef60415c21ae1ca833d211"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":[],"ef9e7ba08c124ce913ef60415c21ae1ca833d211":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"08970e5b8411182a29412c177eff67ec1110095b":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}