{"path":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","sourceNew":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n             \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","sourceOld":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n             \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","sourceNew":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n             \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","sourceOld":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n             \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","sourceNew":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n             \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","sourceOld":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n             \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","sourceNew":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n             \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","sourceOld":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n             \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","sourceNew":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n             \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","sourceOld":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n             \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","sourceNew":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n             \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","sourceOld":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n             \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943562acd5eb31fa2fb7384927091158a85ce9fe","date":1428934087,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","sourceNew":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n         sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n         \"//lst[@name='highlighting']/lst[@name='1']\",\n         \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n         \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n     );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n         \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","sourceOld":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n             \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","sourceNew":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n         sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n         \"//lst[@name='highlighting']/lst[@name='1']\",\n         \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n         \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n     );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n         \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","sourceOld":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n         sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n         \"//lst[@name='highlighting']/lst[@name='1']\",\n         \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n         \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n     );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n         \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","sourceNew":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n         sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n         \"//lst[@name='highlighting']/lst[@name='1']\",\n         \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n         \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n     );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n         \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","sourceOld":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n         sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n         \"//lst[@name='highlighting']/lst[@name='1']\",\n         \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n         \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n     );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n         \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","sourceNew":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n         sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n         \"//lst[@name='highlighting']/lst[@name='1']\",\n         \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n         \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n     );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n         \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","sourceOld":"  @Test\n  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n         sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n         \"//lst[@name='highlighting']/lst[@name='1']\",\n         \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n         \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n     );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n         \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"943562acd5eb31fa2fb7384927091158a85ce9fe":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["943562acd5eb31fa2fb7384927091158a85ce9fe","28288370235ed02234a64753cdbf0c6ec096304a"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["943562acd5eb31fa2fb7384927091158a85ce9fe","5ff704ef91e9ae30ca59babb23ece85720701b60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["943562acd5eb31fa2fb7384927091158a85ce9fe"]},"commit2Childs":{"943562acd5eb31fa2fb7384927091158a85ce9fe":["30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a","5ff704ef91e9ae30ca59babb23ece85720701b60"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["943562acd5eb31fa2fb7384927091158a85ce9fe"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"30c8e5574b55d57947e989443dfde611646530ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","30c8e5574b55d57947e989443dfde611646530ee","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}