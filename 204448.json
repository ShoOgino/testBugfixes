{"path":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory dir = newDirectory(random);\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory dir = newDirectory(random);\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", Similarity.getDefault().encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", Similarity.getDefault().encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", Similarity.getDefault().encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", Similarity.getDefault().encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newInOrderLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newInOrderLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    ir.deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newInOrderLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newInOrderLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    ir.deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newInOrderLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    ir.deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    ir.deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newInOrderLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    ir.deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    ir.deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newInOrderLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    ir.deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1bb50752d43a65ef1b623eabdb8e865983d3cd6","date":1304257984,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", is.doc(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", is.doc(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    is.getIndexReader().setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    ir.deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", is.doc(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", is.doc(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    is.getIndexReader().setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newInOrderLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    ir.deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", is.doc(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", is.doc(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    is.getIndexReader().setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newInOrderLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    ir.deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112629f1dfd1451722c6047bcf593e6efc96f5f4","date":1309910887,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", is.doc(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", is.doc(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    is.getIndexReader().setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", is.doc(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", is.doc(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    is.getIndexReader().setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", is.doc(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", is.doc(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    is.getIndexReader().setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", is.doc(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", is.doc(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    is.getIndexReader().setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", is.doc(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", is.doc(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    is.getIndexReader().setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", is.doc(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", is.doc(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    is.getIndexReader().setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", is.doc(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", is.doc(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    is.getIndexReader().setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", is.doc(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", is.doc(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    is.getIndexReader().setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", is.doc(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", is.doc(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    is.getIndexReader().setNorm(0, \"key\", is.getSimilarityProvider().get(\"key\").encodeNormValue(400f));\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", is.doc(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    /* nocommit: fix this test to delete a document with IW\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    */\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    /* nocommit: fix this test to delete a document with IW\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    */\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    /* nocommit: fix this test to delete a document with IW\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    */\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cc5d33c4ecf450c71edad489df69de68a73a11","date":1323189401,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    IndexReader ir = IndexReader.open(iw, true);\n\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    iw.deleteDocuments(new Term(\"key\", \"one\"));\n    is.close();\n    ir.close();\n    ir = IndexReader.open(iw, true);\n    is = newSearcher(ir);\n    \n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    iw.close();\n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    /* nocommit: fix this test to delete a document with IW\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    */\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    IndexReader ir = IndexReader.open(iw, true);\n\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    iw.deleteDocuments(new Term(\"key\", \"one\"));\n    is.close();\n    ir.close();\n    ir = IndexReader.open(iw, true);\n    is = newSearcher(ir);\n    \n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    iw.close();\n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    IndexReader ir = IndexReader.open(iw, true);\n\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    iw.deleteDocuments(new Term(\"key\", \"one\"));\n    is.close();\n    ir.close();\n    ir = IndexReader.open(iw, true);\n    is = newSearcher(ir);\n    \n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    iw.close();\n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    IndexReader ir = IndexReader.open(iw, true);\n\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    iw.deleteDocuments(new Term(\"key\", \"one\"));\n    ir.close();\n    ir = IndexReader.open(iw, true);\n    is = newSearcher(ir);\n    \n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    iw.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    IndexReader ir = IndexReader.open(iw, true);\n\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    iw.deleteDocuments(new Term(\"key\", \"one\"));\n    is.close();\n    ir.close();\n    ir = IndexReader.open(iw, true);\n    is = newSearcher(ir);\n    \n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    iw.close();\n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    IndexReader ir = IndexReader.open(iw, true);\n\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    iw.deleteDocuments(new Term(\"key\", \"one\"));\n    ir.close();\n    ir = IndexReader.open(iw, true);\n    is = newSearcher(ir);\n    \n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    iw.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    IndexReader ir = IndexReader.open(iw, true);\n\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    iw.deleteDocuments(new Term(\"key\", \"one\"));\n    is.close();\n    ir.close();\n    ir = IndexReader.open(iw, true);\n    is = newSearcher(ir);\n    \n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    iw.close();\n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    IndexReader ir = IndexReader.open(iw, true);\n\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    iw.deleteDocuments(new Term(\"key\", \"one\"));\n    ir.close();\n    ir = IndexReader.open(iw, true);\n    is = newSearcher(ir);\n    \n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    iw.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(\n                                                               TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    IndexReader ir = IndexReader.open(iw, true);\n\n    IndexSearcher is = newSearcher(ir);\n    ScoreDoc[] hits;\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", is.doc(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", is.doc(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", is.doc(hits[2].doc).get(\"key\"));\n\n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    iw.deleteDocuments(new Term(\"key\", \"one\"));\n    ir.close();\n    ir = IndexReader.open(iw, true);\n    is = newSearcher(ir);\n    \n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    iw.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["0f3cee3d20b0c786e6fca20539454262e29edcab","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","1f653cfcf159baeaafe5d01682a911e95bba4012"],"c19f985e36a65cc969e8e564fe337a0d41512075":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["868da859b43505d9d2a023bfeae6dd0c795f5295","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"77cc5d33c4ecf450c71edad489df69de68a73a11":["1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["817d8435e9135b756f08ce6710ab0baac51bdf88","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1f653cfcf159baeaafe5d01682a911e95bba4012","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["112629f1dfd1451722c6047bcf593e6efc96f5f4"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","c1bb50752d43a65ef1b623eabdb8e865983d3cd6"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["c1bb50752d43a65ef1b623eabdb8e865983d3cd6","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"c1bb50752d43a65ef1b623eabdb8e865983d3cd6":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["c19f985e36a65cc969e8e564fe337a0d41512075"],"1291e4568eb7d9463d751627596ef14baf4c1603":["d083e83f225b11e5fdd900e83d26ddb385b6955c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","c1bb50752d43a65ef1b623eabdb8e865983d3cd6"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["0f3cee3d20b0c786e6fca20539454262e29edcab","77cc5d33c4ecf450c71edad489df69de68a73a11"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["c1bb50752d43a65ef1b623eabdb8e865983d3cd6"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["77cc5d33c4ecf450c71edad489df69de68a73a11"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"c19f985e36a65cc969e8e564fe337a0d41512075":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["c1bb50752d43a65ef1b623eabdb8e865983d3cd6","45669a651c970812a680841b97a77cce06af559f"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["c19f985e36a65cc969e8e564fe337a0d41512075","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"77cc5d33c4ecf450c71edad489df69de68a73a11":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","868da859b43505d9d2a023bfeae6dd0c795f5295"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f0b9507caf22f292ac0e5e59f62db4275adf4511","1291e4568eb7d9463d751627596ef14baf4c1603","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1291e4568eb7d9463d751627596ef14baf4c1603"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"c1bb50752d43a65ef1b623eabdb8e865983d3cd6":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["01e5948db9a07144112d2f08f28ca2e3cd880348","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["0f3cee3d20b0c786e6fca20539454262e29edcab","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","f0b9507caf22f292ac0e5e59f62db4275adf4511","135621f3a0670a9394eb563224a3b76cc4dddc0f","1291e4568eb7d9463d751627596ef14baf4c1603","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}