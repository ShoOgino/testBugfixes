{"path":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testRetrievePayloads().mjava","commits":[{"id":"a8e07078a2a2938dbc85aab616aa8b0c651a219c","date":1509045642,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testRetrievePayloads().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRetrievePayloads() throws Exception {\n    clearIndex();\n    int numDocs = 100 + random().nextInt(100);\n    int numLocations = 1000 + random().nextInt(2000);\n    for (int docNum = 0 ; docNum < numDocs ; ++docNum) {\n      StringBuilder amountsBuilder = new StringBuilder();\n      for (int location = 1 ; location <= numLocations ; ++location) {\n        String amount = \"\" + location + '.' + random().nextInt(100);\n        amountsBuilder.append(location).append('|').append(amount).append(' ');\n      }\n      assertU(adoc(\"id\",\"\" + docNum,\n                   \"default_amount_f\", \"\" + (10000 + random().nextInt(10000)) + \".0\",\n                   \"amounts_dpf\", amountsBuilder.toString()));\n    }\n    assertU(commit());\n    assertJQ(req(\"q\",\"*:*\",\n        \"fl\",\"id,location:$locationId,amount:$amount\",\n        \"sort\",\"$amount asc\",\n        \"amount\",\"payload(amounts_dpf,$locationId,default_amount_f)\",\n        \"locationId\",\"\"+(1+random().nextInt(numLocations)),\n        \"wt\",\"json\"),\n        \"/response/numFound==\" + numDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0141f86b1794b911ab8e3eac773bf583e5cf784","date":1509377191,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testRetrievePayloads().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testRetrievePayloads().mjava","sourceNew":"  @Test\n  public void testRetrievePayloads() throws Exception {\n    clearIndex();\n\n    int numDocs = 100 + random().nextInt(100);\n    int numLocations = 1000 + random().nextInt(2000);\n    for (int docNum = 0 ; docNum < numDocs ; ++docNum) {\n      StringBuilder amountsBuilder = new StringBuilder();\n      for (int location = 1 ; location <= numLocations ; ++location) {\n        String amount = \"\" + location + '.' + random().nextInt(100);\n        amountsBuilder.append(location).append('|').append(amount).append(' ');\n      }\n      assertU(adoc(\"id\",\"\" + docNum,\n                   \"default_amount_f\", \"\" + (10000 + random().nextInt(10000)) + \".0\",\n                   \"amounts_dpf\", amountsBuilder.toString()));\n    }\n    assertU(commit());\n    assertJQ(req(\"q\",\"*:*\",\n        \"fl\",\"id,location:$locationId,amount:$amount\",\n        \"sort\",\"$amount asc\",\n        \"amount\",\"payload(amounts_dpf,$locationId,default_amount_f)\",\n        \"locationId\",\"\"+(1+random().nextInt(numLocations)),\n        \"wt\",\"json\"),\n        \"/response/numFound==\" + numDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testRetrievePayloads() throws Exception {\n    clearIndex();\n    int numDocs = 100 + random().nextInt(100);\n    int numLocations = 1000 + random().nextInt(2000);\n    for (int docNum = 0 ; docNum < numDocs ; ++docNum) {\n      StringBuilder amountsBuilder = new StringBuilder();\n      for (int location = 1 ; location <= numLocations ; ++location) {\n        String amount = \"\" + location + '.' + random().nextInt(100);\n        amountsBuilder.append(location).append('|').append(amount).append(' ');\n      }\n      assertU(adoc(\"id\",\"\" + docNum,\n                   \"default_amount_f\", \"\" + (10000 + random().nextInt(10000)) + \".0\",\n                   \"amounts_dpf\", amountsBuilder.toString()));\n    }\n    assertU(commit());\n    assertJQ(req(\"q\",\"*:*\",\n        \"fl\",\"id,location:$locationId,amount:$amount\",\n        \"sort\",\"$amount asc\",\n        \"amount\",\"payload(amounts_dpf,$locationId,default_amount_f)\",\n        \"locationId\",\"\"+(1+random().nextInt(numLocations)),\n        \"wt\",\"json\"),\n        \"/response/numFound==\" + numDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0141f86b1794b911ab8e3eac773bf583e5cf784":["a8e07078a2a2938dbc85aab616aa8b0c651a219c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a8e07078a2a2938dbc85aab616aa8b0c651a219c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0141f86b1794b911ab8e3eac773bf583e5cf784"]},"commit2Childs":{"f0141f86b1794b911ab8e3eac773bf583e5cf784":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a8e07078a2a2938dbc85aab616aa8b0c651a219c"],"a8e07078a2a2938dbc85aab616aa8b0c651a219c":["f0141f86b1794b911ab8e3eac773bf583e5cf784"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}