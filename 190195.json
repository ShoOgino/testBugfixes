{"path":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","commits":[{"id":"e39d67277135d0b3f9c4c54e634bcbf725646a82","date":1456771467,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        client.uploadConfig(config.path, config.name);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        client.uploadConfig(config.path, config.name);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"609b19bb8de96c4e5e338d1d4a0349957522b601","date":1474892114,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","sourceNew":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        client.uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, String> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        client.uploadConfig(config.path, config.name);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","sourceNew":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        client.uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, String> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        client.uploadConfig(config.path, config.name);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","sourceNew":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        client.uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, String> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        client.uploadConfig(config.path, config.name);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4663b9e22a09eac4becf443aa5d3bd244c2efbed","date":1480145012,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","sourceNew":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, String> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        client.uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, String> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","sourceNew":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, String> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        client.uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, String> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29887daf839649150d96855b142b76f5c45d60d2","date":1482160504,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","sourceNew":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig, null, securityJson);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, String> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, String> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","sourceNew":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig, null, securityJson);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, String> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, String> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4086d3fe3881c89311c4b4ef8dc0aaa29ea4b53c","date":1523390946,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","sourceNew":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = build();\n    }\n\n","sourceOld":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig, null, securityJson);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, String> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82a6d970d2393ba4fa3666034b2ec311b774554","date":1523429643,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","sourceNew":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = build();\n    }\n\n","sourceOld":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig, null, securityJson);\n      CloudSolrClient client = cluster.getSolrClient();\n      for (Config config : configs) {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);\n      }\n\n      if (clusterProperties.size() > 0) {\n        ClusterProperties props = new ClusterProperties(cluster.getSolrClient().getZkStateReader().getZkClient());\n        for (Map.Entry<String, String> entry : clusterProperties.entrySet()) {\n          props.setClusterProperty(entry.getKey(), entry.getValue());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","sourceNew":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster configure() throws Exception {\n      return cluster = build();\n    }\n\n","sourceOld":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = build();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1edcb08221b33c52c3b24183d470c163dc8df4c","date":1566966875,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","sourceNew":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     *\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster configure() throws Exception {\n      return cluster = build();\n    }\n\n","sourceOld":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster configure() throws Exception {\n      return cluster = build();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","sourceNew":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     *\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = build();\n    }\n\n","sourceOld":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     *\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster configure() throws Exception {\n      return cluster = build();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.Builder#configure().mjava","sourceNew":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     *\n     * @throws Exception if an error occurs on startup\n     */\n    public MiniSolrCloudCluster configure() throws Exception {\n      return cluster = build();\n    }\n\n","sourceOld":"    /**\n     * Configure and run the {@link MiniSolrCloudCluster}\n     *\n     * @throws Exception if an error occurs on startup\n     */\n    public void configure() throws Exception {\n      cluster = build();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e39d67277135d0b3f9c4c54e634bcbf725646a82"],"e1edcb08221b33c52c3b24183d470c163dc8df4c":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"29887daf839649150d96855b142b76f5c45d60d2":["4663b9e22a09eac4becf443aa5d3bd244c2efbed"],"e82a6d970d2393ba4fa3666034b2ec311b774554":["29887daf839649150d96855b142b76f5c45d60d2","4086d3fe3881c89311c4b4ef8dc0aaa29ea4b53c"],"8476949555f799dff381770c01cfad051a264487":["c44cc06c26e456fe9c215072b79fce30babe3975"],"c44cc06c26e456fe9c215072b79fce30babe3975":["e1edcb08221b33c52c3b24183d470c163dc8df4c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e39d67277135d0b3f9c4c54e634bcbf725646a82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4086d3fe3881c89311c4b4ef8dc0aaa29ea4b53c":["29887daf839649150d96855b142b76f5c45d60d2"],"4663b9e22a09eac4becf443aa5d3bd244c2efbed":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","4663b9e22a09eac4becf443aa5d3bd244c2efbed"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["e82a6d970d2393ba4fa3666034b2ec311b774554"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["727bb765ff2542275f6d31f67be18d7104bae148","29887daf839649150d96855b142b76f5c45d60d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["af2638813028b254a88b418ebeafb541afb49653","609b19bb8de96c4e5e338d1d4a0349957522b601"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8476949555f799dff381770c01cfad051a264487"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","609b19bb8de96c4e5e338d1d4a0349957522b601"],"e1edcb08221b33c52c3b24183d470c163dc8df4c":["c44cc06c26e456fe9c215072b79fce30babe3975"],"29887daf839649150d96855b142b76f5c45d60d2":["e82a6d970d2393ba4fa3666034b2ec311b774554","4086d3fe3881c89311c4b4ef8dc0aaa29ea4b53c","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"e82a6d970d2393ba4fa3666034b2ec311b774554":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"8476949555f799dff381770c01cfad051a264487":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c44cc06c26e456fe9c215072b79fce30babe3975":["8476949555f799dff381770c01cfad051a264487"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"e39d67277135d0b3f9c4c54e634bcbf725646a82":["af2638813028b254a88b418ebeafb541afb49653"],"4086d3fe3881c89311c4b4ef8dc0aaa29ea4b53c":["e82a6d970d2393ba4fa3666034b2ec311b774554"],"4663b9e22a09eac4becf443aa5d3bd244c2efbed":["29887daf839649150d96855b142b76f5c45d60d2","727bb765ff2542275f6d31f67be18d7104bae148"],"727bb765ff2542275f6d31f67be18d7104bae148":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["e1edcb08221b33c52c3b24183d470c163dc8df4c"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","e39d67277135d0b3f9c4c54e634bcbf725646a82"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","4663b9e22a09eac4becf443aa5d3bd244c2efbed"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}