{"path":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final List<SegmentInfo> infosSorted = new ArrayList<SegmentInfo>(infos.asList());\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfo> candidate = new ArrayList<SegmentInfo>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final List<SegmentInfo> infosSorted = new ArrayList<SegmentInfo>(infos.asList());\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfo> candidate = new ArrayList<SegmentInfo>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfoPerCommit> toBeMerged = new HashSet<SegmentInfoPerCommit>();\n\n    final List<SegmentInfoPerCommit> infosSorted = new ArrayList<SegmentInfoPerCommit>(infos.asList());\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfoPerCommit> eligible = new ArrayList<SegmentInfoPerCommit>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfoPerCommit info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfoPerCommit> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfoPerCommit> candidate = new ArrayList<SegmentInfoPerCommit>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfoPerCommit info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfoPerCommit info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final List<SegmentInfo> infosSorted = new ArrayList<SegmentInfo>(infos.asList());\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfo> candidate = new ArrayList<SegmentInfo>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfoPerCommit> toBeMerged = new HashSet<SegmentInfoPerCommit>();\n\n    final List<SegmentInfoPerCommit> infosSorted = new ArrayList<SegmentInfoPerCommit>(infos.asList());\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfoPerCommit> eligible = new ArrayList<SegmentInfoPerCommit>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfoPerCommit info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfoPerCommit> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfoPerCommit> candidate = new ArrayList<SegmentInfoPerCommit>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfoPerCommit info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfoPerCommit info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final List<SegmentInfo> infosSorted = new ArrayList<SegmentInfo>(infos.asList());\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfo> candidate = new ArrayList<SegmentInfo>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1","date":1338332414,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfoPerCommit> toBeMerged = new HashSet<SegmentInfoPerCommit>();\n\n    final List<SegmentInfoPerCommit> infosSorted = new ArrayList<SegmentInfoPerCommit>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending());\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfoPerCommit> eligible = new ArrayList<SegmentInfoPerCommit>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfoPerCommit info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfoPerCommit> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfoPerCommit> candidate = new ArrayList<SegmentInfoPerCommit>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfoPerCommit info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfoPerCommit info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfoPerCommit> toBeMerged = new HashSet<SegmentInfoPerCommit>();\n\n    final List<SegmentInfoPerCommit> infosSorted = new ArrayList<SegmentInfoPerCommit>(infos.asList());\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfoPerCommit> eligible = new ArrayList<SegmentInfoPerCommit>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfoPerCommit info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfoPerCommit> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfoPerCommit> candidate = new ArrayList<SegmentInfoPerCommit>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfoPerCommit info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfoPerCommit info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","date":1341673943,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfoPerCommit> toBeMerged = new HashSet<SegmentInfoPerCommit>();\n\n    final List<SegmentInfoPerCommit> infosSorted = new ArrayList<SegmentInfoPerCommit>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending());\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfoPerCommit> eligible = new ArrayList<SegmentInfoPerCommit>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfoPerCommit info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfoPerCommit> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfoPerCommit> candidate = new ArrayList<SegmentInfoPerCommit>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfoPerCommit info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfoPerCommit info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfoPerCommit> toBeMerged = new HashSet<SegmentInfoPerCommit>();\n\n    final List<SegmentInfoPerCommit> infosSorted = new ArrayList<SegmentInfoPerCommit>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending());\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfoPerCommit> eligible = new ArrayList<SegmentInfoPerCommit>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfoPerCommit info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfoPerCommit> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfoPerCommit> candidate = new ArrayList<SegmentInfoPerCommit>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfoPerCommit info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfoPerCommit info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfoPerCommit> toBeMerged = new HashSet<SegmentInfoPerCommit>();\n\n    final List<SegmentInfoPerCommit> infosSorted = new ArrayList<SegmentInfoPerCommit>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending());\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfoPerCommit> eligible = new ArrayList<SegmentInfoPerCommit>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfoPerCommit info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfoPerCommit> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfoPerCommit> candidate = new ArrayList<SegmentInfoPerCommit>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfoPerCommit info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfoPerCommit info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfoPerCommit> toBeMerged = new HashSet<SegmentInfoPerCommit>();\n\n    final List<SegmentInfoPerCommit> infosSorted = new ArrayList<SegmentInfoPerCommit>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending());\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfoPerCommit> eligible = new ArrayList<SegmentInfoPerCommit>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfoPerCommit info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfoPerCommit> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfoPerCommit> candidate = new ArrayList<SegmentInfoPerCommit>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfoPerCommit info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfoPerCommit info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfoPerCommit> toBeMerged = new HashSet<SegmentInfoPerCommit>();\n\n    final List<SegmentInfoPerCommit> infosSorted = new ArrayList<SegmentInfoPerCommit>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending());\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfoPerCommit> eligible = new ArrayList<SegmentInfoPerCommit>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfoPerCommit info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfoPerCommit> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfoPerCommit> candidate = new ArrayList<SegmentInfoPerCommit>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfoPerCommit info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfoPerCommit info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfoPerCommit> toBeMerged = new HashSet<SegmentInfoPerCommit>();\n\n    final List<SegmentInfoPerCommit> infosSorted = new ArrayList<SegmentInfoPerCommit>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending());\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfoPerCommit> eligible = new ArrayList<SegmentInfoPerCommit>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfoPerCommit info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfoPerCommit> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfoPerCommit> candidate = new ArrayList<SegmentInfoPerCommit>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfoPerCommit info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfoPerCommit info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfoPerCommit> toBeMerged = new HashSet<SegmentInfoPerCommit>();\n\n    final List<SegmentInfoPerCommit> infosSorted = new ArrayList<SegmentInfoPerCommit>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending());\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfoPerCommit> eligible = new ArrayList<SegmentInfoPerCommit>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfoPerCommit info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfoPerCommit> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfoPerCommit> candidate = new ArrayList<SegmentInfoPerCommit>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfoPerCommit info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfoPerCommit info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfoPerCommit> toBeMerged = new HashSet<SegmentInfoPerCommit>();\n\n    final List<SegmentInfoPerCommit> infosSorted = new ArrayList<SegmentInfoPerCommit>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending());\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfoPerCommit> eligible = new ArrayList<SegmentInfoPerCommit>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfoPerCommit info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfoPerCommit> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfoPerCommit> candidate = new ArrayList<SegmentInfoPerCommit>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfoPerCommit info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfoPerCommit info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"181b1aa5a99534972fbfd5595cdbb38bba5f39ee","date":1350576187,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfoPerCommit> toBeMerged = new HashSet<SegmentInfoPerCommit>();\n\n    final List<SegmentInfoPerCommit> infosSorted = new ArrayList<SegmentInfoPerCommit>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending());\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfoPerCommit> eligible = new ArrayList<SegmentInfoPerCommit>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfoPerCommit info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfoPerCommit> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfoPerCommit> candidate = new ArrayList<SegmentInfoPerCommit>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfoPerCommit info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfoPerCommit info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfoPerCommit> toBeMerged = new HashSet<SegmentInfoPerCommit>();\n\n    final List<SegmentInfoPerCommit> infosSorted = new ArrayList<SegmentInfoPerCommit>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending());\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfoPerCommit> eligible = new ArrayList<SegmentInfoPerCommit>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfoPerCommit info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfoPerCommit> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfoPerCommit> candidate = new ArrayList<SegmentInfoPerCommit>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfoPerCommit info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfoPerCommit info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfoPerCommit> toBeMerged = new HashSet<SegmentInfoPerCommit>();\n\n    final List<SegmentInfoPerCommit> infosSorted = new ArrayList<SegmentInfoPerCommit>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending());\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfoPerCommit> eligible = new ArrayList<SegmentInfoPerCommit>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfoPerCommit info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfoPerCommit> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfoPerCommit> candidate = new ArrayList<SegmentInfoPerCommit>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfoPerCommit info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfoPerCommit info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfoPerCommit> toBeMerged = new HashSet<SegmentInfoPerCommit>();\n\n    final List<SegmentInfoPerCommit> infosSorted = new ArrayList<SegmentInfoPerCommit>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending());\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfoPerCommit> eligible = new ArrayList<SegmentInfoPerCommit>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfoPerCommit info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfoPerCommit> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfoPerCommit> candidate = new ArrayList<SegmentInfoPerCommit>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfoPerCommit info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfoPerCommit info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9d153abcf92dc5329d98571a8c3035df9bd80648"],"62e52115b56781006682fd92c6938efaf174304d":["2acf500f78aa12b92e371fd89c719291986b6b90","181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["2acf500f78aa12b92e371fd89c719291986b6b90"],"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"2acf500f78aa12b92e371fd89c719291986b6b90":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1","b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"46d8ada1fff8d18cb197c38c7983225162599948":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"62e52115b56781006682fd92c6938efaf174304d":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1":["b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"2acf500f78aa12b92e371fd89c719291986b6b90":["62e52115b56781006682fd92c6938efaf174304d","fe33227f6805edab2036cbb80645cc4e2d1fa424","181b1aa5a99534972fbfd5595cdbb38bba5f39ee","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}