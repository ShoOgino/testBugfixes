{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#balanceProperty().mjava","commits":[{"id":"64707d25b6352cf02909d3916038a3b3cec7f0a8","date":1412782122,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#balanceProperty().mjava","pathOld":"/dev/null","sourceNew":"    private boolean balanceProperty() {\n      if (collectCurrentPropStats() == false) {\n        return false;\n      }\n\n      // we have two lists based on nodeName\n      // 1> all the nodes that _could_ host a property for the slice\n      // 2> all the nodes that _currently_ host a property for the slice.\n\n      // So, remove a replica from the nodes that have too many\n      removeOverallocatedReplicas();\n\n      // prune replicas belonging to a slice that have the property currently assigned from the list of replicas\n      // that could host the property.\n      for (Map.Entry<String, List<SliceReplica>> entProp : nodesHostingProp.entrySet()) {\n        for (SliceReplica srHosting : entProp.getValue()) {\n          removeSliceAlreadyHostedFromPossibles(srHosting.slice.getName());\n        }\n      }\n\n      // Assemble the list of slices that do not have any replica hosting the property:\n      for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingReplicas.entrySet()) {\n        ListIterator<SliceReplica> iter = ent.getValue().listIterator();\n        while (iter.hasNext()) {\n          SliceReplica sr = iter.next();\n          shardsNeedingHosts.add(sr.slice.getName());\n        }\n      }\n\n      // At this point, nodesHostingProp should contain _only_ lists of replicas that belong to slices that do _not_\n      // have any replica hosting the property. So let's assign them.\n\n      balanceUnassignedReplicas();\n      for (Slice newSlice : changedSlices.values()) {\n        clusterState = updater.updateSlice(clusterState, collectionName, newSlice);\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#balanceProperty().mjava","pathOld":"/dev/null","sourceNew":"    private boolean balanceProperty() {\n      if (collectCurrentPropStats() == false) {\n        return false;\n      }\n\n      // we have two lists based on nodeName\n      // 1> all the nodes that _could_ host a property for the slice\n      // 2> all the nodes that _currently_ host a property for the slice.\n\n      // So, remove a replica from the nodes that have too many\n      removeOverallocatedReplicas();\n\n      // prune replicas belonging to a slice that have the property currently assigned from the list of replicas\n      // that could host the property.\n      for (Map.Entry<String, List<SliceReplica>> entProp : nodesHostingProp.entrySet()) {\n        for (SliceReplica srHosting : entProp.getValue()) {\n          removeSliceAlreadyHostedFromPossibles(srHosting.slice.getName());\n        }\n      }\n\n      // Assemble the list of slices that do not have any replica hosting the property:\n      for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingReplicas.entrySet()) {\n        ListIterator<SliceReplica> iter = ent.getValue().listIterator();\n        while (iter.hasNext()) {\n          SliceReplica sr = iter.next();\n          shardsNeedingHosts.add(sr.slice.getName());\n        }\n      }\n\n      // At this point, nodesHostingProp should contain _only_ lists of replicas that belong to slices that do _not_\n      // have any replica hosting the property. So let's assign them.\n\n      balanceUnassignedReplicas();\n      for (Slice newSlice : changedSlices.values()) {\n        clusterState = updater.updateSlice(clusterState, collectionName, newSlice);\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"584c1ee8712b5af28075d98028ccab111d6eeda2","date":1417444624,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#balanceProperty().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#balanceProperty().mjava","sourceNew":"    private boolean balanceProperty() {\n      if (collectCurrentPropStats() == false) {\n        return false;\n      }\n\n      // we have two lists based on nodeName\n      // 1> all the nodes that _could_ host a property for the slice\n      // 2> all the nodes that _currently_ host a property for the slice.\n\n      // So, remove a replica from the nodes that have too many\n      removeOverallocatedReplicas();\n\n      // prune replicas belonging to a slice that have the property currently assigned from the list of replicas\n      // that could host the property.\n      for (Map.Entry<String, List<SliceReplica>> entProp : nodesHostingProp.entrySet()) {\n        for (SliceReplica srHosting : entProp.getValue()) {\n          removeSliceAlreadyHostedFromPossibles(srHosting.slice.getName());\n        }\n      }\n\n      // Assemble the list of slices that do not have any replica hosting the property:\n      for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingReplicas.entrySet()) {\n        ListIterator<SliceReplica> iter = ent.getValue().listIterator();\n        while (iter.hasNext()) {\n          SliceReplica sr = iter.next();\n          shardsNeedingHosts.add(sr.slice.getName());\n        }\n      }\n\n      // At this point, nodesHostingProp should contain _only_ lists of replicas that belong to slices that do _not_\n      // have any replica hosting the property. So let's assign them.\n\n      balanceUnassignedReplicas();\n      for (Slice newSlice : changedSlices.values()) {\n        DocCollection docCollection = CollectionMutator.updateSlice(collectionName, clusterState.getCollection(collectionName), newSlice);\n        clusterState = ClusterStateMutator.newState(clusterState, collectionName, docCollection);\n      }\n      return true;\n    }\n\n","sourceOld":"    private boolean balanceProperty() {\n      if (collectCurrentPropStats() == false) {\n        return false;\n      }\n\n      // we have two lists based on nodeName\n      // 1> all the nodes that _could_ host a property for the slice\n      // 2> all the nodes that _currently_ host a property for the slice.\n\n      // So, remove a replica from the nodes that have too many\n      removeOverallocatedReplicas();\n\n      // prune replicas belonging to a slice that have the property currently assigned from the list of replicas\n      // that could host the property.\n      for (Map.Entry<String, List<SliceReplica>> entProp : nodesHostingProp.entrySet()) {\n        for (SliceReplica srHosting : entProp.getValue()) {\n          removeSliceAlreadyHostedFromPossibles(srHosting.slice.getName());\n        }\n      }\n\n      // Assemble the list of slices that do not have any replica hosting the property:\n      for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingReplicas.entrySet()) {\n        ListIterator<SliceReplica> iter = ent.getValue().listIterator();\n        while (iter.hasNext()) {\n          SliceReplica sr = iter.next();\n          shardsNeedingHosts.add(sr.slice.getName());\n        }\n      }\n\n      // At this point, nodesHostingProp should contain _only_ lists of replicas that belong to slices that do _not_\n      // have any replica hosting the property. So let's assign them.\n\n      balanceUnassignedReplicas();\n      for (Slice newSlice : changedSlices.values()) {\n        clusterState = updater.updateSlice(clusterState, collectionName, newSlice);\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5886c3d78997b0c3f9151247c967e32a8529c59e","date":1473837274,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#balanceProperty().mjava","sourceNew":null,"sourceOld":"    private boolean balanceProperty() {\n      if (collectCurrentPropStats() == false) {\n        return false;\n      }\n\n      // we have two lists based on nodeName\n      // 1> all the nodes that _could_ host a property for the slice\n      // 2> all the nodes that _currently_ host a property for the slice.\n\n      // So, remove a replica from the nodes that have too many\n      removeOverallocatedReplicas();\n\n      // prune replicas belonging to a slice that have the property currently assigned from the list of replicas\n      // that could host the property.\n      for (Map.Entry<String, List<SliceReplica>> entProp : nodesHostingProp.entrySet()) {\n        for (SliceReplica srHosting : entProp.getValue()) {\n          removeSliceAlreadyHostedFromPossibles(srHosting.slice.getName());\n        }\n      }\n\n      // Assemble the list of slices that do not have any replica hosting the property:\n      for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingReplicas.entrySet()) {\n        ListIterator<SliceReplica> iter = ent.getValue().listIterator();\n        while (iter.hasNext()) {\n          SliceReplica sr = iter.next();\n          shardsNeedingHosts.add(sr.slice.getName());\n        }\n      }\n\n      // At this point, nodesHostingProp should contain _only_ lists of replicas that belong to slices that do _not_\n      // have any replica hosting the property. So let's assign them.\n\n      balanceUnassignedReplicas();\n      for (Slice newSlice : changedSlices.values()) {\n        DocCollection docCollection = CollectionMutator.updateSlice(collectionName, clusterState.getCollection(collectionName), newSlice);\n        clusterState = ClusterStateMutator.newState(clusterState, collectionName, docCollection);\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#balanceProperty().mjava","sourceNew":null,"sourceOld":"    private boolean balanceProperty() {\n      if (collectCurrentPropStats() == false) {\n        return false;\n      }\n\n      // we have two lists based on nodeName\n      // 1> all the nodes that _could_ host a property for the slice\n      // 2> all the nodes that _currently_ host a property for the slice.\n\n      // So, remove a replica from the nodes that have too many\n      removeOverallocatedReplicas();\n\n      // prune replicas belonging to a slice that have the property currently assigned from the list of replicas\n      // that could host the property.\n      for (Map.Entry<String, List<SliceReplica>> entProp : nodesHostingProp.entrySet()) {\n        for (SliceReplica srHosting : entProp.getValue()) {\n          removeSliceAlreadyHostedFromPossibles(srHosting.slice.getName());\n        }\n      }\n\n      // Assemble the list of slices that do not have any replica hosting the property:\n      for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingReplicas.entrySet()) {\n        ListIterator<SliceReplica> iter = ent.getValue().listIterator();\n        while (iter.hasNext()) {\n          SliceReplica sr = iter.next();\n          shardsNeedingHosts.add(sr.slice.getName());\n        }\n      }\n\n      // At this point, nodesHostingProp should contain _only_ lists of replicas that belong to slices that do _not_\n      // have any replica hosting the property. So let's assign them.\n\n      balanceUnassignedReplicas();\n      for (Slice newSlice : changedSlices.values()) {\n        DocCollection docCollection = CollectionMutator.updateSlice(collectionName, clusterState.getCollection(collectionName), newSlice);\n        clusterState = ClusterStateMutator.newState(clusterState, collectionName, docCollection);\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#balanceProperty().mjava","sourceNew":null,"sourceOld":"    private boolean balanceProperty() {\n      if (collectCurrentPropStats() == false) {\n        return false;\n      }\n\n      // we have two lists based on nodeName\n      // 1> all the nodes that _could_ host a property for the slice\n      // 2> all the nodes that _currently_ host a property for the slice.\n\n      // So, remove a replica from the nodes that have too many\n      removeOverallocatedReplicas();\n\n      // prune replicas belonging to a slice that have the property currently assigned from the list of replicas\n      // that could host the property.\n      for (Map.Entry<String, List<SliceReplica>> entProp : nodesHostingProp.entrySet()) {\n        for (SliceReplica srHosting : entProp.getValue()) {\n          removeSliceAlreadyHostedFromPossibles(srHosting.slice.getName());\n        }\n      }\n\n      // Assemble the list of slices that do not have any replica hosting the property:\n      for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingReplicas.entrySet()) {\n        ListIterator<SliceReplica> iter = ent.getValue().listIterator();\n        while (iter.hasNext()) {\n          SliceReplica sr = iter.next();\n          shardsNeedingHosts.add(sr.slice.getName());\n        }\n      }\n\n      // At this point, nodesHostingProp should contain _only_ lists of replicas that belong to slices that do _not_\n      // have any replica hosting the property. So let's assign them.\n\n      balanceUnassignedReplicas();\n      for (Slice newSlice : changedSlices.values()) {\n        DocCollection docCollection = CollectionMutator.updateSlice(collectionName, clusterState.getCollection(collectionName), newSlice);\n        clusterState = ClusterStateMutator.newState(clusterState, collectionName, docCollection);\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5886c3d78997b0c3f9151247c967e32a8529c59e":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"584c1ee8712b5af28075d98028ccab111d6eeda2":["64707d25b6352cf02909d3916038a3b3cec7f0a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["584c1ee8712b5af28075d98028ccab111d6eeda2","5886c3d78997b0c3f9151247c967e32a8529c59e"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["584c1ee8712b5af28075d98028ccab111d6eeda2","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"5886c3d78997b0c3f9151247c967e32a8529c59e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"55980207f1977bd1463465de1659b821347e2fa8":[],"584c1ee8712b5af28075d98028ccab111d6eeda2":["5886c3d78997b0c3f9151247c967e32a8529c59e","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["55980207f1977bd1463465de1659b821347e2fa8","584c1ee8712b5af28075d98028ccab111d6eeda2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}