{"path":"solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest#testBasicAuth().mjava","commits":[{"id":"170ef9c82c0d27d4151feff316ba63fbedd91bbf","date":1477436680,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest#testBasicAuth().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n\n    HttpClient cl = null;\n    HttpSolrClient httpSolrClient = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = buildUrl(jetty.getLocalPort(), \"/solr\"); \n      httpSolrClient = getHttpSolrClient(baseUrl);\n      \n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n\n      // Write security.json locally. Should cause security to be initialized\n      securityConfHandler.persistConf(new SecurityConfHandler.SecurityConfig()\n          .setData(Utils.fromJSONString(STD_CONF.replaceAll(\"'\", \"\\\"\"))));\n      securityConfHandler.securityConfEdited();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient finalHttpSolrClient = httpSolrClient;\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        finalHttpSolrClient.request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n\n      // Read file from SOLR_HOME and verify that it contains our new user\n      assertTrue(new String(Utils.toJSON(securityConfHandler.getSecurityConfig(false).getData()), \n          Charset.forName(\"UTF-8\")).contains(\"harry\"));\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n        httpSolrClient.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9095feae302a6e075ef3af4bd81b4cea22c5c71c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b363b110592b02d7f488aff0dbe40a53d3ce81df","date":1477469211,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest#testBasicAuth().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n\n    HttpClient cl = null;\n    HttpSolrClient httpSolrClient = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = buildUrl(jetty.getLocalPort(), \"/solr\"); \n      httpSolrClient = getHttpSolrClient(baseUrl);\n      \n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n\n      // Write security.json locally. Should cause security to be initialized\n      securityConfHandler.persistConf(new SecurityConfHandler.SecurityConfig()\n          .setData(Utils.fromJSONString(STD_CONF.replaceAll(\"'\", \"\\\"\"))));\n      securityConfHandler.securityConfEdited();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient finalHttpSolrClient = httpSolrClient;\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        finalHttpSolrClient.request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n\n      // Read file from SOLR_HOME and verify that it contains our new user\n      assertTrue(new String(Utils.toJSON(securityConfHandler.getSecurityConfig(false).getData()), \n          Charset.forName(\"UTF-8\")).contains(\"harry\"));\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n        httpSolrClient.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest#testBasicAuth().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n\n    HttpClient cl = null;\n    HttpSolrClient httpSolrClient = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = buildUrl(jetty.getLocalPort(), \"/solr\"); \n      httpSolrClient = getHttpSolrClient(baseUrl);\n      \n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n\n      // Write security.json locally. Should cause security to be initialized\n      securityConfHandler.persistConf(new SecurityConfHandler.SecurityConfig()\n          .setData(Utils.fromJSONString(STD_CONF.replaceAll(\"'\", \"\\\"\"))));\n      securityConfHandler.securityConfEdited();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient finalHttpSolrClient = httpSolrClient;\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        finalHttpSolrClient.request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n\n      // Read file from SOLR_HOME and verify that it contains our new user\n      assertTrue(new String(Utils.toJSON(securityConfHandler.getSecurityConfig(false).getData()), \n          Charset.forName(\"UTF-8\")).contains(\"harry\"));\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n        httpSolrClient.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffe6147428175244c52b6d10271c1c33ea8dd895","date":1477871854,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest#testBasicAuth().mjava","sourceNew":"  @Test\n  @LogLevel(\"org.apache.solr=DEBUG\")\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n\n    HttpClient cl = null;\n    HttpSolrClient httpSolrClient = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = buildUrl(jetty.getLocalPort(), \"/solr\"); \n      httpSolrClient = getHttpSolrClient(baseUrl);\n      \n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n\n      // Write security.json locally. Should cause security to be initialized\n      securityConfHandler.persistConf(new SecurityConfHandler.SecurityConfig()\n          .setData(Utils.fromJSONString(STD_CONF.replaceAll(\"'\", \"\\\"\"))));\n      securityConfHandler.securityConfEdited();\n      log.debug(\"Newly written security.json is \" + securityConfHandler.getSecurityConfig(false) +\n        \" and baseUrl is \" + baseUrl);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient finalHttpSolrClient = httpSolrClient;\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        finalHttpSolrClient.request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n\n      // Read file from SOLR_HOME and verify that it contains our new user\n      assertTrue(new String(Utils.toJSON(securityConfHandler.getSecurityConfig(false).getData()), \n          Charset.forName(\"UTF-8\")).contains(\"harry\"));\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n        httpSolrClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n\n    HttpClient cl = null;\n    HttpSolrClient httpSolrClient = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = buildUrl(jetty.getLocalPort(), \"/solr\"); \n      httpSolrClient = getHttpSolrClient(baseUrl);\n      \n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n\n      // Write security.json locally. Should cause security to be initialized\n      securityConfHandler.persistConf(new SecurityConfHandler.SecurityConfig()\n          .setData(Utils.fromJSONString(STD_CONF.replaceAll(\"'\", \"\\\"\"))));\n      securityConfHandler.securityConfEdited();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient finalHttpSolrClient = httpSolrClient;\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        finalHttpSolrClient.request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n\n      // Read file from SOLR_HOME and verify that it contains our new user\n      assertTrue(new String(Utils.toJSON(securityConfHandler.getSecurityConfig(false).getData()), \n          Charset.forName(\"UTF-8\")).contains(\"harry\"));\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n        httpSolrClient.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest#testBasicAuth().mjava","sourceNew":"  @Test\n  @LogLevel(\"org.apache.solr=DEBUG\")\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n\n    HttpClient cl = null;\n    HttpSolrClient httpSolrClient = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = buildUrl(jetty.getLocalPort(), \"/solr\"); \n      httpSolrClient = getHttpSolrClient(baseUrl);\n      \n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n\n      // Write security.json locally. Should cause security to be initialized\n      securityConfHandler.persistConf(new SecurityConfHandler.SecurityConfig()\n          .setData(Utils.fromJSONString(STD_CONF.replaceAll(\"'\", \"\\\"\"))));\n      securityConfHandler.securityConfEdited();\n      log.debug(\"Newly written security.json is \" + securityConfHandler.getSecurityConfig(false) +\n        \" and baseUrl is \" + baseUrl);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient finalHttpSolrClient = httpSolrClient;\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        finalHttpSolrClient.request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n\n      // Read file from SOLR_HOME and verify that it contains our new user\n      assertTrue(new String(Utils.toJSON(securityConfHandler.getSecurityConfig(false).getData()), \n          Charset.forName(\"UTF-8\")).contains(\"harry\"));\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n        httpSolrClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n\n    HttpClient cl = null;\n    HttpSolrClient httpSolrClient = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = buildUrl(jetty.getLocalPort(), \"/solr\"); \n      httpSolrClient = getHttpSolrClient(baseUrl);\n      \n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n\n      // Write security.json locally. Should cause security to be initialized\n      securityConfHandler.persistConf(new SecurityConfHandler.SecurityConfig()\n          .setData(Utils.fromJSONString(STD_CONF.replaceAll(\"'\", \"\\\"\"))));\n      securityConfHandler.securityConfEdited();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient finalHttpSolrClient = httpSolrClient;\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        finalHttpSolrClient.request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n\n      // Read file from SOLR_HOME and verify that it contains our new user\n      assertTrue(new String(Utils.toJSON(securityConfHandler.getSecurityConfig(false).getData()), \n          Charset.forName(\"UTF-8\")).contains(\"harry\"));\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n        httpSolrClient.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"691f3fd725e13e6708491507e361eaecf91b59f6","date":1478011101,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest#testBasicAuth().mjava","sourceNew":"  @Test\n  @LogLevel(\"org.apache.solr=DEBUG\")\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n\n    HttpClient cl = null;\n    HttpSolrClient httpSolrClient = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = buildUrl(jetty.getLocalPort(), \"/solr\"); \n      httpSolrClient = getHttpSolrClient(baseUrl);\n      \n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n\n      // Write security.json locally. Should cause security to be initialized\n      securityConfHandler.persistConf(new SecurityConfHandler.SecurityConfig()\n          .setData(Utils.fromJSONString(STD_CONF.replaceAll(\"'\", \"\\\"\"))));\n      securityConfHandler.securityConfEdited();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient finalHttpSolrClient = httpSolrClient;\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        finalHttpSolrClient.request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n\n      // Read file from SOLR_HOME and verify that it contains our new user\n      assertTrue(new String(Utils.toJSON(securityConfHandler.getSecurityConfig(false).getData()), \n          Charset.forName(\"UTF-8\")).contains(\"harry\"));\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n        httpSolrClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @LogLevel(\"org.apache.solr=DEBUG\")\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n\n    HttpClient cl = null;\n    HttpSolrClient httpSolrClient = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = buildUrl(jetty.getLocalPort(), \"/solr\"); \n      httpSolrClient = getHttpSolrClient(baseUrl);\n      \n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n\n      // Write security.json locally. Should cause security to be initialized\n      securityConfHandler.persistConf(new SecurityConfHandler.SecurityConfig()\n          .setData(Utils.fromJSONString(STD_CONF.replaceAll(\"'\", \"\\\"\"))));\n      securityConfHandler.securityConfEdited();\n      log.debug(\"Newly written security.json is \" + securityConfHandler.getSecurityConfig(false) +\n        \" and baseUrl is \" + baseUrl);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient finalHttpSolrClient = httpSolrClient;\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        finalHttpSolrClient.request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n\n      // Read file from SOLR_HOME and verify that it contains our new user\n      assertTrue(new String(Utils.toJSON(securityConfHandler.getSecurityConfig(false).getData()), \n          Charset.forName(\"UTF-8\")).contains(\"harry\"));\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n        httpSolrClient.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5809ad14f6ea649a54ac2b8b8826ec0106bd2c3f","date":1478015910,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest#testBasicAuth().mjava","sourceNew":"  @Test\n  @LogLevel(\"org.apache.solr=DEBUG\")\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n\n    HttpClient cl = null;\n    HttpSolrClient httpSolrClient = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = buildUrl(jetty.getLocalPort(), \"/solr\"); \n      httpSolrClient = getHttpSolrClient(baseUrl);\n      \n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n\n      // Write security.json locally. Should cause security to be initialized\n      securityConfHandler.persistConf(new SecurityConfHandler.SecurityConfig()\n          .setData(Utils.fromJSONString(STD_CONF.replaceAll(\"'\", \"\\\"\"))));\n      securityConfHandler.securityConfEdited();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient finalHttpSolrClient = httpSolrClient;\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        finalHttpSolrClient.request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n\n      // Read file from SOLR_HOME and verify that it contains our new user\n      assertTrue(new String(Utils.toJSON(securityConfHandler.getSecurityConfig(false).getData()), \n          Charset.forName(\"UTF-8\")).contains(\"harry\"));\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n        httpSolrClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @LogLevel(\"org.apache.solr=DEBUG\")\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n\n    HttpClient cl = null;\n    HttpSolrClient httpSolrClient = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = buildUrl(jetty.getLocalPort(), \"/solr\"); \n      httpSolrClient = getHttpSolrClient(baseUrl);\n      \n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n\n      // Write security.json locally. Should cause security to be initialized\n      securityConfHandler.persistConf(new SecurityConfHandler.SecurityConfig()\n          .setData(Utils.fromJSONString(STD_CONF.replaceAll(\"'\", \"\\\"\"))));\n      securityConfHandler.securityConfEdited();\n      log.debug(\"Newly written security.json is \" + securityConfHandler.getSecurityConfig(false) +\n        \" and baseUrl is \" + baseUrl);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient finalHttpSolrClient = httpSolrClient;\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        finalHttpSolrClient.request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n\n      // Read file from SOLR_HOME and verify that it contains our new user\n      assertTrue(new String(Utils.toJSON(securityConfHandler.getSecurityConfig(false).getData()), \n          Charset.forName(\"UTF-8\")).contains(\"harry\"));\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n        httpSolrClient.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1294c21b1991388ed74f71be7130aeb17d48acbc","date":1510680317,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest#testBasicAuth().mjava","sourceNew":"  @Test\n  @LogLevel(\"org.apache.solr=DEBUG\")\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n\n    HttpClient cl = null;\n    HttpSolrClient httpSolrClient = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = buildUrl(jetty.getLocalPort(), \"/solr\"); \n      httpSolrClient = getHttpSolrClient(baseUrl);\n      \n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n\n      // Write security.json locally. Should cause security to be initialized\n      securityConfHandler.persistConf(new SecurityConfHandler.SecurityConfig()\n          .setData(Utils.fromJSONString(STD_CONF.replaceAll(\"'\", \"\\\"\"))));\n      securityConfHandler.securityConfEdited();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n\n      HttpSolrClient finalHttpSolrClient = httpSolrClient;\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        finalHttpSolrClient.request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n\n      // Read file from SOLR_HOME and verify that it contains our new user\n      assertTrue(new String(Utils.toJSON(securityConfHandler.getSecurityConfig(false).getData()), \n          Charset.forName(\"UTF-8\")).contains(\"harry\"));\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n        httpSolrClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @LogLevel(\"org.apache.solr=DEBUG\")\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n\n    HttpClient cl = null;\n    HttpSolrClient httpSolrClient = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = buildUrl(jetty.getLocalPort(), \"/solr\"); \n      httpSolrClient = getHttpSolrClient(baseUrl);\n      \n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n\n      // Write security.json locally. Should cause security to be initialized\n      securityConfHandler.persistConf(new SecurityConfHandler.SecurityConfig()\n          .setData(Utils.fromJSONString(STD_CONF.replaceAll(\"'\", \"\\\"\"))));\n      securityConfHandler.securityConfEdited();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient finalHttpSolrClient = httpSolrClient;\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        finalHttpSolrClient.request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n\n      // Read file from SOLR_HOME and verify that it contains our new user\n      assertTrue(new String(Utils.toJSON(securityConfHandler.getSecurityConfig(false).getData()), \n          Charset.forName(\"UTF-8\")).contains(\"harry\"));\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n        httpSolrClient.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["9095feae302a6e075ef3af4bd81b4cea22c5c71c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85397dd93927c17347c6bf89800cd0fc566c2d03","date":1544610812,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest#testBasicAuth().mjava","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n\n    HttpClient cl = null;\n    HttpSolrClient httpSolrClient = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = buildUrl(jetty.getLocalPort(), \"/solr\"); \n      httpSolrClient = getHttpSolrClient(baseUrl);\n      \n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n\n      // Write security.json locally. Should cause security to be initialized\n      securityConfHandler.persistConf(new SecurityConfHandler.SecurityConfig()\n          .setData(Utils.fromJSONString(STD_CONF.replaceAll(\"'\", \"\\\"\"))));\n      securityConfHandler.securityConfEdited();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n\n      HttpSolrClient finalHttpSolrClient = httpSolrClient;\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        finalHttpSolrClient.request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n\n      // Read file from SOLR_HOME and verify that it contains our new user\n      assertTrue(new String(Utils.toJSON(securityConfHandler.getSecurityConfig(false).getData()), \n          Charset.forName(\"UTF-8\")).contains(\"harry\"));\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n        httpSolrClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @LogLevel(\"org.apache.solr=DEBUG\")\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n\n    HttpClient cl = null;\n    HttpSolrClient httpSolrClient = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = buildUrl(jetty.getLocalPort(), \"/solr\"); \n      httpSolrClient = getHttpSolrClient(baseUrl);\n      \n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n\n      // Write security.json locally. Should cause security to be initialized\n      securityConfHandler.persistConf(new SecurityConfHandler.SecurityConfig()\n          .setData(Utils.fromJSONString(STD_CONF.replaceAll(\"'\", \"\\\"\"))));\n      securityConfHandler.securityConfEdited();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n\n      HttpSolrClient finalHttpSolrClient = httpSolrClient;\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        finalHttpSolrClient.request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n\n      // Read file from SOLR_HOME and verify that it contains our new user\n      assertTrue(new String(Utils.toJSON(securityConfHandler.getSecurityConfig(false).getData()), \n          Charset.forName(\"UTF-8\")).contains(\"harry\"));\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n        httpSolrClient.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9095feae302a6e075ef3af4bd81b4cea22c5c71c","date":1555355370,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest#testBasicAuth().mjava","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    HttpClient cl = null;\n    HttpSolrClient httpSolrClient = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = buildUrl(jetty.getLocalPort(), \"/solr\"); \n      httpSolrClient = getHttpSolrClient(baseUrl);\n      \n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n\n      // Write security.json locally. Should cause security to be initialized\n      securityConfHandler.persistConf(new SecurityConfHandler.SecurityConfig()\n          .setData(Utils.fromJSONString(STD_CONF.replaceAll(\"'\", \"\\\"\"))));\n      securityConfHandler.securityConfEdited();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      doHttpPost(cl, baseUrl + authcPrefix, command, null, null, 401);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n\n      doHttpPost(cl, baseUrl + authcPrefix, command, \"solr\", \"SolrRocks\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n\n      // Read file from SOLR_HOME and verify that it contains our new user\n      assertTrue(new String(Utils.toJSON(securityConfHandler.getSecurityConfig(false).getData()), \n          Charset.forName(\"UTF-8\")).contains(\"harry\"));\n\n      // Edit authorization\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/role\", null, 20);\n      doHttpPost(cl, baseUrl + authzPrefix, \"{'set-permission': {'name': 'update', 'role':'updaterole'}}\", \"solr\", \"SolrRocks\");\n      command = \"{\\n\" +\n          \"'set-permission': {'name': 'read', 'role':'solr'}\\n\" +\n          \"}\";\n      doHttpPost(cl, baseUrl + authzPrefix, command, \"solr\", \"SolrRocks\");\n      try {\n        httpSolrClient.query(\"collection1\", new MapSolrParams(Collections.singletonMap(\"q\", \"foo\")));\n        fail(\"Should return a 401 response\");\n      } catch (Exception e) {\n        // Test that the second doPost request to /security/authorization went through\n        verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/role\", \"solr\", 20);\n      }\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n        httpSolrClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n\n    HttpClient cl = null;\n    HttpSolrClient httpSolrClient = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = buildUrl(jetty.getLocalPort(), \"/solr\"); \n      httpSolrClient = getHttpSolrClient(baseUrl);\n      \n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n\n      // Write security.json locally. Should cause security to be initialized\n      securityConfHandler.persistConf(new SecurityConfHandler.SecurityConfig()\n          .setData(Utils.fromJSONString(STD_CONF.replaceAll(\"'\", \"\\\"\"))));\n      securityConfHandler.securityConfEdited();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n\n      HttpSolrClient finalHttpSolrClient = httpSolrClient;\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        finalHttpSolrClient.request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n\n      // Read file from SOLR_HOME and verify that it contains our new user\n      assertTrue(new String(Utils.toJSON(securityConfHandler.getSecurityConfig(false).getData()), \n          Charset.forName(\"UTF-8\")).contains(\"harry\"));\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n        httpSolrClient.close();\n      }\n    }\n  }\n\n","bugFix":["170ef9c82c0d27d4151feff316ba63fbedd91bbf","1294c21b1991388ed74f71be7130aeb17d48acbc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"85397dd93927c17347c6bf89800cd0fc566c2d03":["1294c21b1991388ed74f71be7130aeb17d48acbc"],"ffe6147428175244c52b6d10271c1c33ea8dd895":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"170ef9c82c0d27d4151feff316ba63fbedd91bbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"1294c21b1991388ed74f71be7130aeb17d48acbc":["691f3fd725e13e6708491507e361eaecf91b59f6"],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","170ef9c82c0d27d4151feff316ba63fbedd91bbf"],"691f3fd725e13e6708491507e361eaecf91b59f6":["ffe6147428175244c52b6d10271c1c33ea8dd895"],"320888923ec13b91f53082558f01f4c9960dd226":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","ffe6147428175244c52b6d10271c1c33ea8dd895"],"9095feae302a6e075ef3af4bd81b4cea22c5c71c":["85397dd93927c17347c6bf89800cd0fc566c2d03"],"5809ad14f6ea649a54ac2b8b8826ec0106bd2c3f":["320888923ec13b91f53082558f01f4c9960dd226","691f3fd725e13e6708491507e361eaecf91b59f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9095feae302a6e075ef3af4bd81b4cea22c5c71c"]},"commit2Childs":{"85397dd93927c17347c6bf89800cd0fc566c2d03":["9095feae302a6e075ef3af4bd81b4cea22c5c71c"],"ffe6147428175244c52b6d10271c1c33ea8dd895":["691f3fd725e13e6708491507e361eaecf91b59f6","320888923ec13b91f53082558f01f4c9960dd226"],"170ef9c82c0d27d4151feff316ba63fbedd91bbf":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["170ef9c82c0d27d4151feff316ba63fbedd91bbf","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["320888923ec13b91f53082558f01f4c9960dd226"],"1294c21b1991388ed74f71be7130aeb17d48acbc":["85397dd93927c17347c6bf89800cd0fc566c2d03"],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["ffe6147428175244c52b6d10271c1c33ea8dd895","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"691f3fd725e13e6708491507e361eaecf91b59f6":["1294c21b1991388ed74f71be7130aeb17d48acbc","5809ad14f6ea649a54ac2b8b8826ec0106bd2c3f"],"320888923ec13b91f53082558f01f4c9960dd226":["5809ad14f6ea649a54ac2b8b8826ec0106bd2c3f"],"9095feae302a6e075ef3af4bd81b4cea22c5c71c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5809ad14f6ea649a54ac2b8b8826ec0106bd2c3f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5809ad14f6ea649a54ac2b8b8826ec0106bd2c3f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}