{"path":"solr/core/src/java/org/apache/solr/update/processor/RoutedAliasUpdateProcessor#processAdd(AddUpdateCommand).mjava","commits":[{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":1,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RoutedAliasUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    routedAlias.validateRouteValue(cmd);\n\n    // to avoid potential for race conditions, this next method should not get called again unless\n    // we have created a collection synchronously\n    routedAlias.updateParsedCollectionAliases(this.zkController);\n\n    String targetCollection = routedAlias.createCollectionsIfRequired(cmd);\n\n    if (thisCollection.equals(targetCollection)) {\n      // pass on through; we've reached the right collection\n      super.processAdd(cmd);\n    } else {\n      // send to the right collection\n      SolrCmdDistributor.Node targetLeaderNode = routeDocToSlice(targetCollection, cmd.getSolrInputDocument());\n      cmdDistrib.distribAdd(cmd, Collections.singletonList(targetLeaderNode), new ModifiableSolrParams(outParamsToLeader));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    final Instant docTimestamp =\n        parseRouteKey(cmd.getSolrInputDocument().getFieldValue(timeRoutedAlias.getRouteField()));\n\n    // TODO: maybe in some cases the user would want to ignore/warn instead?\n    if (docTimestamp.isAfter(Instant.now().plusMillis(timeRoutedAlias.getMaxFutureMs()))) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"The document's time routed key of \" + docTimestamp + \" is too far in the future given \" +\n              TimeRoutedAlias.ROUTER_MAX_FUTURE + \"=\" + timeRoutedAlias.getMaxFutureMs());\n    }\n\n    // to avoid potential for race conditions, this next method should not get called again unless\n    // we have created a collection synchronously\n    updateParsedCollectionAliases();\n\n    String targetCollection = createCollectionsIfRequired(docTimestamp, cmd);\n\n    if (thisCollection.equals(targetCollection)) {\n      // pass on through; we've reached the right collection\n      super.processAdd(cmd);\n    } else {\n      // send to the right collection\n      SolrCmdDistributor.Node targetLeaderNode = routeDocToSlice(targetCollection, cmd.getSolrInputDocument());\n      cmdDistrib.distribAdd(cmd, Collections.singletonList(targetLeaderNode), new ModifiableSolrParams(outParamsToLeader));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RoutedAliasUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/RoutedAliasUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    routedAlias.validateRouteValue(cmd);\n\n    // to avoid potential for race conditions, this next method should not get called again unless\n    // we have created a collection synchronously\n    routedAlias.updateParsedCollectionAliases(this.zkController.zkStateReader, false);\n\n    String targetCollection = routedAlias.createCollectionsIfRequired(cmd);\n\n    if (thisCollection.equals(targetCollection)) {\n      // pass on through; we've reached the right collection\n      super.processAdd(cmd);\n    } else {\n      // send to the right collection\n      SolrCmdDistributor.Node targetLeaderNode = routeDocToSlice(targetCollection, cmd.getSolrInputDocument());\n      cmdDistrib.distribAdd(cmd, Collections.singletonList(targetLeaderNode), new ModifiableSolrParams(outParamsToLeader));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    routedAlias.validateRouteValue(cmd);\n\n    // to avoid potential for race conditions, this next method should not get called again unless\n    // we have created a collection synchronously\n    routedAlias.updateParsedCollectionAliases(this.zkController);\n\n    String targetCollection = routedAlias.createCollectionsIfRequired(cmd);\n\n    if (thisCollection.equals(targetCollection)) {\n      // pass on through; we've reached the right collection\n      super.processAdd(cmd);\n    } else {\n      // send to the right collection\n      SolrCmdDistributor.Node targetLeaderNode = routeDocToSlice(targetCollection, cmd.getSolrInputDocument());\n      cmdDistrib.distribAdd(cmd, Collections.singletonList(targetLeaderNode), new ModifiableSolrParams(outParamsToLeader));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["b627755385655c7cd3fb296f17593658805cf4d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b627755385655c7cd3fb296f17593658805cf4d5"],"b627755385655c7cd3fb296f17593658805cf4d5":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}