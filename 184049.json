{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testOneClauseRewriteOptimization().mjava","commits":[{"id":"638ca976da1f83c83253e0f69878daa8ee7fb209","date":1400008267,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testOneClauseRewriteOptimization().mjava","pathOld":"/dev/null","sourceNew":"  public void testOneClauseRewriteOptimization() throws Exception {\n    final float BOOST = 3.5F;\n    final String FIELD = \"content\";\n    final String VALUE = \"foo\";\n      \n    Directory dir = newDirectory();\n    (new RandomIndexWriter(random(), dir)).shutdown();\n    IndexReader r = DirectoryReader.open(dir);\n\n    TermQuery expected = new TermQuery(new Term(FIELD, VALUE));\n    expected.setBoost(BOOST);\n\n    final int numLayers = atLeast(3);\n    boolean needBoost = true;\n    Query actual = new TermQuery(new Term(FIELD, VALUE));\n\n    for (int i = 0; i < numLayers; i++) {\n      if (needBoost && 0 == TestUtil.nextInt(random(),0,numLayers)) {\n        needBoost = false;\n        actual.setBoost(BOOST);\n      }\n\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(actual, random().nextBoolean() \n             ? BooleanClause.Occur.SHOULD : BooleanClause.Occur.MUST);\n      actual = bq;\n    }\n    if (needBoost) {\n      actual.setBoost(BOOST);\n    }\n\n    assertEquals(numLayers + \": \" + actual.toString(),\n                 expected, actual.rewrite(r));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a957bf27202eab1c9ddabc5aa30c7a0db04bbf36","date":1400053604,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testOneClauseRewriteOptimization().mjava","pathOld":"/dev/null","sourceNew":"  public void testOneClauseRewriteOptimization() throws Exception {\n    final float BOOST = 3.5F;\n    final String FIELD = \"content\";\n    final String VALUE = \"foo\";\n      \n    Directory dir = newDirectory();\n    (new RandomIndexWriter(random(), dir)).shutdown();\n    IndexReader r = DirectoryReader.open(dir);\n\n    TermQuery expected = new TermQuery(new Term(FIELD, VALUE));\n    expected.setBoost(BOOST);\n\n    final int numLayers = atLeast(3);\n    boolean needBoost = true;\n    Query actual = new TermQuery(new Term(FIELD, VALUE));\n\n    for (int i = 0; i < numLayers; i++) {\n      if (needBoost && 0 == TestUtil.nextInt(random(),0,numLayers)) {\n        needBoost = false;\n        actual.setBoost(BOOST);\n      }\n\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(actual, random().nextBoolean() \n             ? BooleanClause.Occur.SHOULD : BooleanClause.Occur.MUST);\n      actual = bq;\n    }\n    if (needBoost) {\n      actual.setBoost(BOOST);\n    }\n\n    assertEquals(numLayers + \": \" + actual.toString(),\n                 expected, actual.rewrite(r));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testOneClauseRewriteOptimization().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testOneClauseRewriteOptimization().mjava","sourceNew":"  public void testOneClauseRewriteOptimization() throws Exception {\n    final float BOOST = 3.5F;\n    final String FIELD = \"content\";\n    final String VALUE = \"foo\";\n      \n    Directory dir = newDirectory();\n    (new RandomIndexWriter(random(), dir)).close();\n    IndexReader r = DirectoryReader.open(dir);\n\n    TermQuery expected = new TermQuery(new Term(FIELD, VALUE));\n    expected.setBoost(BOOST);\n\n    final int numLayers = atLeast(3);\n    boolean needBoost = true;\n    Query actual = new TermQuery(new Term(FIELD, VALUE));\n\n    for (int i = 0; i < numLayers; i++) {\n      if (needBoost && 0 == TestUtil.nextInt(random(),0,numLayers)) {\n        needBoost = false;\n        actual.setBoost(BOOST);\n      }\n\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(actual, random().nextBoolean() \n             ? BooleanClause.Occur.SHOULD : BooleanClause.Occur.MUST);\n      actual = bq;\n    }\n    if (needBoost) {\n      actual.setBoost(BOOST);\n    }\n\n    assertEquals(numLayers + \": \" + actual.toString(),\n                 expected, actual.rewrite(r));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOneClauseRewriteOptimization() throws Exception {\n    final float BOOST = 3.5F;\n    final String FIELD = \"content\";\n    final String VALUE = \"foo\";\n      \n    Directory dir = newDirectory();\n    (new RandomIndexWriter(random(), dir)).shutdown();\n    IndexReader r = DirectoryReader.open(dir);\n\n    TermQuery expected = new TermQuery(new Term(FIELD, VALUE));\n    expected.setBoost(BOOST);\n\n    final int numLayers = atLeast(3);\n    boolean needBoost = true;\n    Query actual = new TermQuery(new Term(FIELD, VALUE));\n\n    for (int i = 0; i < numLayers; i++) {\n      if (needBoost && 0 == TestUtil.nextInt(random(),0,numLayers)) {\n        needBoost = false;\n        actual.setBoost(BOOST);\n      }\n\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(actual, random().nextBoolean() \n             ? BooleanClause.Occur.SHOULD : BooleanClause.Occur.MUST);\n      actual = bq;\n    }\n    if (needBoost) {\n      actual.setBoost(BOOST);\n    }\n\n    assertEquals(numLayers + \": \" + actual.toString(),\n                 expected, actual.rewrite(r));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25f698887111a682424e759ba36083180899a1fd","date":1423588899,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testOneClauseRewriteOptimization().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testOneClauseRewriteOptimization().mjava","sourceNew":"  public void testOneClauseRewriteOptimization() throws Exception {\n    final float BOOST = 3.5F;\n    final String FIELD = \"content\";\n    final String VALUE = \"foo\";\n\n    Directory dir = newDirectory();\n    (new RandomIndexWriter(random(), dir)).close();\n    IndexReader r = DirectoryReader.open(dir);\n\n    TermQuery expected = new TermQuery(new Term(FIELD, VALUE));\n    expected.setBoost(BOOST);\n\n    final int numLayers = atLeast(3);\n    boolean needBoost = true;\n    Query actual = new TermQuery(new Term(FIELD, VALUE));\n\n    for (int i = 0; i < numLayers; i++) {\n      if (needBoost && 0 == TestUtil.nextInt(random(),0,numLayers)) {\n        needBoost = false;\n        actual.setBoost(BOOST);\n      }\n\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(actual, random().nextBoolean()\n             ? BooleanClause.Occur.SHOULD : BooleanClause.Occur.MUST);\n      actual = bq;\n    }\n    if (needBoost) {\n      actual.setBoost(BOOST);\n    }\n\n    assertEquals(numLayers + \": \" + actual.toString(),\n                 expected, actual.rewrite(r));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOneClauseRewriteOptimization() throws Exception {\n    final float BOOST = 3.5F;\n    final String FIELD = \"content\";\n    final String VALUE = \"foo\";\n      \n    Directory dir = newDirectory();\n    (new RandomIndexWriter(random(), dir)).close();\n    IndexReader r = DirectoryReader.open(dir);\n\n    TermQuery expected = new TermQuery(new Term(FIELD, VALUE));\n    expected.setBoost(BOOST);\n\n    final int numLayers = atLeast(3);\n    boolean needBoost = true;\n    Query actual = new TermQuery(new Term(FIELD, VALUE));\n\n    for (int i = 0; i < numLayers; i++) {\n      if (needBoost && 0 == TestUtil.nextInt(random(),0,numLayers)) {\n        needBoost = false;\n        actual.setBoost(BOOST);\n      }\n\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(actual, random().nextBoolean() \n             ? BooleanClause.Occur.SHOULD : BooleanClause.Occur.MUST);\n      actual = bq;\n    }\n    if (needBoost) {\n      actual.setBoost(BOOST);\n    }\n\n    assertEquals(numLayers + \": \" + actual.toString(),\n                 expected, actual.rewrite(r));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testOneClauseRewriteOptimization().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testOneClauseRewriteOptimization().mjava","sourceNew":"  public void testOneClauseRewriteOptimization() throws Exception {\n    final float BOOST = 3.5F;\n    final String FIELD = \"content\";\n    final String VALUE = \"foo\";\n\n    Directory dir = newDirectory();\n    (new RandomIndexWriter(random(), dir)).close();\n    IndexReader r = DirectoryReader.open(dir);\n\n    TermQuery expected = new TermQuery(new Term(FIELD, VALUE));\n    expected.setBoost(BOOST);\n\n    final int numLayers = atLeast(3);\n    boolean needBoost = true;\n    Query actual = new TermQuery(new Term(FIELD, VALUE));\n\n    for (int i = 0; i < numLayers; i++) {\n      if (needBoost && 0 == TestUtil.nextInt(random(),0,numLayers)) {\n        needBoost = false;\n        actual.setBoost(BOOST);\n      }\n\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(actual, random().nextBoolean()\n             ? BooleanClause.Occur.SHOULD : BooleanClause.Occur.MUST);\n      actual = bq.build();\n    }\n    if (needBoost) {\n      actual.setBoost(BOOST);\n    }\n\n    assertEquals(numLayers + \": \" + actual.toString(),\n                 expected, actual.rewrite(r));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOneClauseRewriteOptimization() throws Exception {\n    final float BOOST = 3.5F;\n    final String FIELD = \"content\";\n    final String VALUE = \"foo\";\n\n    Directory dir = newDirectory();\n    (new RandomIndexWriter(random(), dir)).close();\n    IndexReader r = DirectoryReader.open(dir);\n\n    TermQuery expected = new TermQuery(new Term(FIELD, VALUE));\n    expected.setBoost(BOOST);\n\n    final int numLayers = atLeast(3);\n    boolean needBoost = true;\n    Query actual = new TermQuery(new Term(FIELD, VALUE));\n\n    for (int i = 0; i < numLayers; i++) {\n      if (needBoost && 0 == TestUtil.nextInt(random(),0,numLayers)) {\n        needBoost = false;\n        actual.setBoost(BOOST);\n      }\n\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(actual, random().nextBoolean()\n             ? BooleanClause.Occur.SHOULD : BooleanClause.Occur.MUST);\n      actual = bq;\n    }\n    if (needBoost) {\n      actual.setBoost(BOOST);\n    }\n\n    assertEquals(numLayers + \": \" + actual.toString(),\n                 expected, actual.rewrite(r));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testOneClauseRewriteOptimization().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testOneClauseRewriteOptimization().mjava","sourceNew":"  public void testOneClauseRewriteOptimization() throws Exception {\n    final String FIELD = \"content\";\n    final String VALUE = \"foo\";\n\n    Directory dir = newDirectory();\n    (new RandomIndexWriter(random(), dir)).close();\n    IndexReader r = DirectoryReader.open(dir);\n\n    TermQuery expected = new TermQuery(new Term(FIELD, VALUE));\n\n    final int numLayers = atLeast(3);\n    Query actual = new TermQuery(new Term(FIELD, VALUE));\n\n    for (int i = 0; i < numLayers; i++) {\n\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(actual, random().nextBoolean()\n             ? BooleanClause.Occur.SHOULD : BooleanClause.Occur.MUST);\n      actual = bq.build();\n    }\n\n    assertEquals(numLayers + \": \" + actual.toString(),\n                 expected, new IndexSearcher(r).rewrite(actual));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOneClauseRewriteOptimization() throws Exception {\n    final float BOOST = 3.5F;\n    final String FIELD = \"content\";\n    final String VALUE = \"foo\";\n\n    Directory dir = newDirectory();\n    (new RandomIndexWriter(random(), dir)).close();\n    IndexReader r = DirectoryReader.open(dir);\n\n    TermQuery expected = new TermQuery(new Term(FIELD, VALUE));\n    expected.setBoost(BOOST);\n\n    final int numLayers = atLeast(3);\n    boolean needBoost = true;\n    Query actual = new TermQuery(new Term(FIELD, VALUE));\n\n    for (int i = 0; i < numLayers; i++) {\n      if (needBoost && 0 == TestUtil.nextInt(random(),0,numLayers)) {\n        needBoost = false;\n        actual.setBoost(BOOST);\n      }\n\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(actual, random().nextBoolean()\n             ? BooleanClause.Occur.SHOULD : BooleanClause.Occur.MUST);\n      actual = bq.build();\n    }\n    if (needBoost) {\n      actual.setBoost(BOOST);\n    }\n\n    assertEquals(numLayers + \": \" + actual.toString(),\n                 expected, actual.rewrite(r));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632","date":1449148233,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testOneClauseRewriteOptimization().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testOneClauseRewriteOptimization().mjava","sourceNew":"  public void testOneClauseRewriteOptimization() throws Exception {\n    final String FIELD = \"content\";\n    final String VALUE = \"foo\";\n\n    Directory dir = newDirectory();\n    (new RandomIndexWriter(random(), dir)).close();\n    IndexReader r = DirectoryReader.open(dir);\n\n    TermQuery expected = new TermQuery(new Term(FIELD, VALUE));\n\n    final int numLayers = atLeast(3);\n    Query actual = new TermQuery(new Term(FIELD, VALUE));\n\n    for (int i = 0; i < numLayers; i++) {\n\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(actual, random().nextBoolean()\n             ? BooleanClause.Occur.SHOULD : BooleanClause.Occur.MUST);\n      actual = bq.build();\n    }\n\n    assertEquals(numLayers + \": \" + actual.toString(),\n                 expected, new IndexSearcher(r).rewrite(actual));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOneClauseRewriteOptimization() throws Exception {\n    final String FIELD = \"content\";\n    final String VALUE = \"foo\";\n\n    Directory dir = newDirectory();\n    (new RandomIndexWriter(random(), dir)).close();\n    IndexReader r = DirectoryReader.open(dir);\n\n    TermQuery expected = new TermQuery(new Term(FIELD, VALUE));\n\n    final int numLayers = atLeast(3);\n    Query actual = new TermQuery(new Term(FIELD, VALUE));\n\n    for (int i = 0; i < numLayers; i++) {\n\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(actual, random().nextBoolean()\n             ? BooleanClause.Occur.SHOULD : BooleanClause.Occur.MUST);\n      actual = bq.build();\n    }\n\n    assertEquals(numLayers + \": \" + actual.toString(),\n                 expected, new IndexSearcher(r).rewrite(actual));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["25f698887111a682424e759ba36083180899a1fd"],"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["638ca976da1f83c83253e0f69878daa8ee7fb209"],"638ca976da1f83c83253e0f69878daa8ee7fb209":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a957bf27202eab1c9ddabc5aa30c7a0db04bbf36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","638ca976da1f83c83253e0f69878daa8ee7fb209"],"25f698887111a682424e759ba36083180899a1fd":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["638ca976da1f83c83253e0f69878daa8ee7fb209","a957bf27202eab1c9ddabc5aa30c7a0db04bbf36"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["25f698887111a682424e759ba36083180899a1fd"],"638ca976da1f83c83253e0f69878daa8ee7fb209":["d0ef034a4f10871667ae75181537775ddcf8ade4","a957bf27202eab1c9ddabc5aa30c7a0db04bbf36"],"a957bf27202eab1c9ddabc5aa30c7a0db04bbf36":[],"25f698887111a682424e759ba36083180899a1fd":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a957bf27202eab1c9ddabc5aa30c7a0db04bbf36","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}