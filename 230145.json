{"path":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","commits":[{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestPropInject#testMergePolicyDefaults().mjava","sourceNew":"  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB());\n    uh.close();\n  }\n\n","sourceOld":"  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB());\n    uh.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b18a3a18e5b2ba91f969bc7c6c1198602de6def","date":1287504756,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","sourceNew":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB());\n    uh.close();\n  }\n\n","sourceOld":"  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB());\n    uh.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","sourceNew":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB());\n    uh.close();\n  }\n\n","sourceOld":"  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB());\n    uh.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","sourceNew":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB());\n    uh.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB());\n    uh.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","sourceNew":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB());\n    uh.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB());\n    uh.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB());\n    uh.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ee857a409368c4693aaff6b8aafb539ba07a1b3","date":1293240111,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","sourceNew":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB(), 0);\n    uh.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB());\n    uh.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","sourceNew":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB(), 0);\n    uh.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB());\n    uh.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","sourceNew":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB(), 0);\n    uh.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB());\n    uh.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","sourceNew":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    IndexWriter writer = ((DirectUpdateHandler2)h.getCore().getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB(), 0);\n  }\n\n","sourceOld":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB(), 0);\n    uh.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","sourceNew":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    IndexWriter writer = ((DirectUpdateHandler2)h.getCore().getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB(), 0);\n  }\n\n","sourceOld":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB(), 0);\n    uh.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","sourceNew":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    IndexWriter writer = ((DirectUpdateHandler2)h.getCore().getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB(), 0);\n  }\n\n","sourceOld":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    ExposeWriterHandler uh = new ExposeWriterHandler();\n    IndexWriter writer = uh.getWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB(), 0);\n    uh.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","sourceNew":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    IndexWriter writer = ((DirectUpdateHandler2)h.getCore().getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB(), 0);\n  }\n\n","sourceOld":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    IndexWriter writer = ((DirectUpdateHandler2)h.getCore().getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","sourceNew":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    IndexWriter writer = ((DirectUpdateHandler2)h.getCore().getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB(), 0);\n  }\n\n","sourceOld":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    IndexWriter writer = ((DirectUpdateHandler2)h.getCore().getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestPropInjectDefaults#testMergePolicyDefaults().mjava","sourceNew":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    IndexWriter writer = ((DirectUpdateHandler2)h.getCore().getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB(), 0);\n  }\n\n","sourceOld":"  @Test\n  public void testMergePolicyDefaults() throws Exception {\n    IndexWriter writer = ((DirectUpdateHandler2)h.getCore().getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    LogByteSizeMergePolicy mp = (LogByteSizeMergePolicy)writer.getConfig().getMergePolicy();\n    assertEquals(32.0, mp.getMaxMergeMB(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ee857a409368c4693aaff6b8aafb539ba07a1b3":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"70ad682703b8585f5d0a637efec044d57ec05efb":["3bb13258feba31ab676502787ab2e1779f129b7a","3ee857a409368c4693aaff6b8aafb539ba07a1b3"],"c26f00b574427b55127e869b935845554afde1fa":["7a71a0b2d4be2299a163f60626729852d81a8e02","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"6b18a3a18e5b2ba91f969bc7c6c1198602de6def":["43b04c27924fe393e38e9f0986e32c634f261859"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["3ee857a409368c4693aaff6b8aafb539ba07a1b3","7a71a0b2d4be2299a163f60626729852d81a8e02"],"43b04c27924fe393e38e9f0986e32c634f261859":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["3ee857a409368c4693aaff6b8aafb539ba07a1b3","7a71a0b2d4be2299a163f60626729852d81a8e02"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["3ee857a409368c4693aaff6b8aafb539ba07a1b3"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3ee857a409368c4693aaff6b8aafb539ba07a1b3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["43b04c27924fe393e38e9f0986e32c634f261859","6b18a3a18e5b2ba91f969bc7c6c1198602de6def"],"3bb13258feba31ab676502787ab2e1779f129b7a":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["6b18a3a18e5b2ba91f969bc7c6c1198602de6def"]},"commit2Childs":{"3ee857a409368c4693aaff6b8aafb539ba07a1b3":["70ad682703b8585f5d0a637efec044d57ec05efb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","7a71a0b2d4be2299a163f60626729852d81a8e02","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6b18a3a18e5b2ba91f969bc7c6c1198602de6def":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"43b04c27924fe393e38e9f0986e32c634f261859":["6b18a3a18e5b2ba91f969bc7c6c1198602de6def","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","43b04c27924fe393e38e9f0986e32c634f261859"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["70ad682703b8585f5d0a637efec044d57ec05efb"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["3ee857a409368c4693aaff6b8aafb539ba07a1b3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","d083e83f225b11e5fdd900e83d26ddb385b6955c","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}