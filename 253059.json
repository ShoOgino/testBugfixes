{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.EverythingEnum#skipPositions().mjava","commits":[{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.EverythingEnum#skipPositions().mjava","pathOld":"/dev/null","sourceNew":"    // TODO: in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointer ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      // if (DEBUG) {\n      //   System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      // }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        int end = posBufferUpto + toSkip;\n        while(posBufferUpto < end) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        // if (DEBUG) {\n        //   System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        // }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          // if (DEBUG) {\n          //   System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          // }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n\n          if (indexHasPayloads) {\n            // Skip payloadLength block:\n            forUtil.skipBlock(payIn);\n\n            // Skip payloadBytes block:\n            int numBytes = payIn.readVInt();\n            payIn.seek(payIn.getFilePointer() + numBytes);\n          }\n\n          if (indexHasOffsets) {\n            forUtil.skipBlock(payIn);\n            forUtil.skipBlock(payIn);\n          }\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        payloadByteUpto = 0;\n        posBufferUpto = 0;\n        while(posBufferUpto < toSkip) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        // if (DEBUG) {\n        //   System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        // }\n      }\n\n      position = 0;\n      lastStartOffset = 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.EverythingEnum#skipPositions().mjava","sourceNew":null,"sourceOld":"    // TODO: in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointer ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      // if (DEBUG) {\n      //   System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      // }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        int end = posBufferUpto + toSkip;\n        while(posBufferUpto < end) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        // if (DEBUG) {\n        //   System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        // }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          // if (DEBUG) {\n          //   System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          // }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n\n          if (indexHasPayloads) {\n            // Skip payloadLength block:\n            forUtil.skipBlock(payIn);\n\n            // Skip payloadBytes block:\n            int numBytes = payIn.readVInt();\n            payIn.seek(payIn.getFilePointer() + numBytes);\n          }\n\n          if (indexHasOffsets) {\n            forUtil.skipBlock(payIn);\n            forUtil.skipBlock(payIn);\n          }\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        payloadByteUpto = 0;\n        posBufferUpto = 0;\n        while(posBufferUpto < toSkip) {\n          if (indexHasPayloads) {\n            payloadByteUpto += payloadLengthBuffer[posBufferUpto];\n          }\n          posBufferUpto++;\n        }\n        // if (DEBUG) {\n        //   System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        // }\n      }\n\n      position = 0;\n      lastStartOffset = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a570bec4aec8585a4eea44849bfb2bc264208c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}