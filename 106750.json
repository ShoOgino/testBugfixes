{"path":"solr/test-framework/src/java/org/apache/solr/util/RestTestHarness#post(String,String).mjava","commits":[{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RestTestHarness#post(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Processes a POST request using a URL path (with no context path) + optional query params,\n   * e.g. \"/schema/fields/newfield\", PUTs the given content, and returns the response content.\n   *\n   * @param request The URL path and optional query params\n   * @param content The content to include with the POST request\n   * @return The response to the PUT request\n   */\n  public String post(String request, String content) throws IOException {\n    URL url = new URL(getBaseURL() + request);\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setDoOutput(true);\n    connection.setRequestMethod(\"POST\");\n    connection.setRequestProperty(\"Content-Type\", \"application/json; charset=utf-8\");\n\n    OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream(), \"UTF-8\");\n    out.write(content);\n    out.close();\n    InputStream inputStream = null;\n    StringWriter stringWriter;\n    try {\n      try {\n        inputStream = connection.getInputStream();\n      } catch (IOException e) {\n        inputStream = connection.getErrorStream();\n      }\n      stringWriter = new StringWriter();\n      IOUtils.copy(new InputStreamReader(inputStream, \"UTF-8\"), stringWriter);\n    } finally {\n      IOUtils.closeQuietly(inputStream);\n    }\n    return stringWriter.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RestTestHarness#post(String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/RestTestHarness#post(String,String).mjava","sourceNew":"  /**\n   * Processes a POST request using a URL path (with no context path) + optional query params,\n   * e.g. \"/schema/fields/newfield\", PUTs the given content, and returns the response content.\n   *\n   * @param request The URL path and optional query params\n   * @param content The content to include with the POST request\n   * @return The response to the PUT request\n   */\n  public String post(String request, String content) throws IOException {\n    HttpPost httpPost = new HttpPost(getBaseURL() + request);\n    httpPost.setEntity(new StringEntity(content, ContentType.create(\n        \"application/json\", \"utf-8\")));\n    \n    return getResponse(httpPost);\n  }\n\n","sourceOld":"  /**\n   * Processes a POST request using a URL path (with no context path) + optional query params,\n   * e.g. \"/schema/fields/newfield\", PUTs the given content, and returns the response content.\n   *\n   * @param request The URL path and optional query params\n   * @param content The content to include with the POST request\n   * @return The response to the PUT request\n   */\n  public String post(String request, String content) throws IOException {\n    URL url = new URL(getBaseURL() + request);\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setDoOutput(true);\n    connection.setRequestMethod(\"POST\");\n    connection.setRequestProperty(\"Content-Type\", \"application/json; charset=utf-8\");\n\n    OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream(), \"UTF-8\");\n    out.write(content);\n    out.close();\n    InputStream inputStream = null;\n    StringWriter stringWriter;\n    try {\n      try {\n        inputStream = connection.getInputStream();\n      } catch (IOException e) {\n        inputStream = connection.getErrorStream();\n      }\n      stringWriter = new StringWriter();\n      IOUtils.copy(new InputStreamReader(inputStream, \"UTF-8\"), stringWriter);\n    } finally {\n      IOUtils.closeQuietly(inputStream);\n    }\n    return stringWriter.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RestTestHarness#post(String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/RestTestHarness#post(String,String).mjava","sourceNew":"  /**\n   * Processes a POST request using a URL path (with no context path) + optional query params,\n   * e.g. \"/schema/fields/newfield\", PUTs the given content, and returns the response content.\n   *\n   * @param request The URL path and optional query params\n   * @param content The content to include with the POST request\n   * @return The response to the PUT request\n   */\n  public String post(String request, String content) throws IOException {\n    HttpPost httpPost = new HttpPost(getBaseURL() + request);\n    httpPost.setEntity(new StringEntity(content, ContentType.create(\n        \"application/json\", StandardCharsets.UTF_8)));\n    \n    return getResponse(httpPost);\n  }\n\n","sourceOld":"  /**\n   * Processes a POST request using a URL path (with no context path) + optional query params,\n   * e.g. \"/schema/fields/newfield\", PUTs the given content, and returns the response content.\n   *\n   * @param request The URL path and optional query params\n   * @param content The content to include with the POST request\n   * @return The response to the PUT request\n   */\n  public String post(String request, String content) throws IOException {\n    HttpPost httpPost = new HttpPost(getBaseURL() + request);\n    httpPost.setEntity(new StringEntity(content, ContentType.create(\n        \"application/json\", \"utf-8\")));\n    \n    return getResponse(httpPost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RestTestHarness#post(String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/RestTestHarness#post(String,String).mjava","sourceNew":"  /**\n   * Processes a POST request using a URL path (with no context path) + optional query params,\n   * e.g. \"/schema/fields/newfield\", PUTs the given content, and returns the response content.\n   *\n   * @param request The URL path and optional query params\n   * @param content The content to include with the POST request\n   * @return The response to the PUT request\n   */\n  public String post(String request, String content) throws IOException {\n    HttpPost httpPost = new HttpPost(getBaseURL() + request);\n    httpPost.setEntity(new StringEntity(content, ContentType.create(\n        \"application/json\", StandardCharsets.UTF_8)));\n    \n    return getResponse(httpPost);\n  }\n\n","sourceOld":"  /**\n   * Processes a POST request using a URL path (with no context path) + optional query params,\n   * e.g. \"/schema/fields/newfield\", PUTs the given content, and returns the response content.\n   *\n   * @param request The URL path and optional query params\n   * @param content The content to include with the POST request\n   * @return The response to the PUT request\n   */\n  public String post(String request, String content) throws IOException {\n    HttpPost httpPost = new HttpPost(getBaseURL() + request);\n    httpPost.setEntity(new StringEntity(content, ContentType.create(\n        \"application/json\", \"utf-8\")));\n    \n    return getResponse(httpPost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf5f0a722ca79f92ea9e7ab1a7d803909655f0f8","date":1411625045,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RestTestHarness#post(String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/RestTestHarness#post(String,String).mjava","sourceNew":"  /**\n   * Processes a POST request using a URL path (with no context path) + optional query params,\n   * e.g. \"/schema/fields/newfield\", PUTs the given content, and returns the response content.\n   *\n   * @param request The URL path and optional query params\n   * @param content The content to include with the POST request\n   * @return The response to the POST request\n   */\n  public String post(String request, String content) throws IOException {\n    HttpPost httpPost = new HttpPost(getBaseURL() + request);\n    httpPost.setEntity(new StringEntity(content, ContentType.create(\n        \"application/json\", StandardCharsets.UTF_8)));\n    \n    return getResponse(httpPost);\n  }\n\n","sourceOld":"  /**\n   * Processes a POST request using a URL path (with no context path) + optional query params,\n   * e.g. \"/schema/fields/newfield\", PUTs the given content, and returns the response content.\n   *\n   * @param request The URL path and optional query params\n   * @param content The content to include with the POST request\n   * @return The response to the PUT request\n   */\n  public String post(String request, String content) throws IOException {\n    HttpPost httpPost = new HttpPost(getBaseURL() + request);\n    httpPost.setEntity(new StringEntity(content, ContentType.create(\n        \"application/json\", StandardCharsets.UTF_8)));\n    \n    return getResponse(httpPost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","9d3d365762604952e436b51980101dfc84cc1b3e"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["08970e5b8411182a29412c177eff67ec1110095b"],"cf5f0a722ca79f92ea9e7ab1a7d803909655f0f8":["9d3d365762604952e436b51980101dfc84cc1b3e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf5f0a722ca79f92ea9e7ab1a7d803909655f0f8"],"08970e5b8411182a29412c177eff67ec1110095b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","cf5f0a722ca79f92ea9e7ab1a7d803909655f0f8"],"cf5f0a722ca79f92ea9e7ab1a7d803909655f0f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}