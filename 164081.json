{"path":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        String id = \"\";\n        SchemaField sf = schema.getUniqueKeyField();\n        if( sf != null ) {\n          id = \"[\"+doc.getFieldValue( sf.getName() )+\"] \";\n        }\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+id+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      for( Object v : field ) {\n        if( v == null ) {\n          continue;\n        }\n        String val = null;\n        hasField = true;\n        boolean isBinaryField = false;\n        if (sfield != null && sfield.getType() instanceof BinaryField) {\n          isBinaryField = true;\n          BinaryField binaryField = (BinaryField) sfield.getType();\n          Field f = binaryField.createField(sfield,v,boost);\n          if(f != null){\n            out.add(f);\n          }\n          used = true;\n        } else {\n          // TODO!!! HACK -- date conversion\n          if (sfield != null && v instanceof Date && sfield.getType() instanceof DateField) {\n            DateField df = (DateField) sfield.getType();\n            val = df.toInternal((Date) v) + 'Z';\n          } else if (v != null) {\n            val = v.toString();\n          }\n\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, val, boost);\n          }\n        }\n\n        // Check if we should copy this field to any other fields.\n        // This could happen whether it is explicit or not.\n        List<CopyField> copyFields = schema.getCopyFieldsList(name);\n        for (CopyField cf : copyFields) {\n          SchemaField destinationField = cf.getDestination();\n          // check if the copy field is a multivalued or not\n          if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"ERROR: multiple values encountered for non multiValued copy field \" +\n                            destinationField.getName() + \": \" + val);\n          }\n\n          used = true;\n          //Don't worry about poly fields here\n          Fieldable [] fields = null;\n          if (isBinaryField) {\n            if (destinationField.getType() instanceof BinaryField) {\n              BinaryField binaryField = (BinaryField) destinationField.getType();\n              //TODO: safe to assume that binary fields only create one?\n              fields = new Field[]{binaryField.createField(destinationField, v, boost)};\n            }\n          } else {\n            fields = destinationField.createFields(cf.getLimitedValue(val), boost);\n          }\n          if (fields != null) { // null fields are not added\n            for (Fieldable f : fields) {\n              out.add(f);\n            }\n          }\n        }\n        \n        // In lucene, the boost for a given field is the product of the \n        // document boost and *all* boosts on values of that field. \n        // For multi-valued fields, we only want to set the boost on the\n        // first field.\n        boost = 1.0f; \n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" +\n                name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String id = schema.printableUniqueKey( out );\n          String msg = \"Document [\"+id+\"] missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","sourceNew":null,"sourceOld":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        String id = \"\";\n        SchemaField sf = schema.getUniqueKeyField();\n        if( sf != null ) {\n          id = \"[\"+doc.getFieldValue( sf.getName() )+\"] \";\n        }\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+id+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      for( Object v : field ) {\n        if( v == null ) {\n          continue;\n        }\n        String val = null;\n        hasField = true;\n        boolean isBinaryField = false;\n        if (sfield != null && sfield.getType() instanceof BinaryField) {\n          isBinaryField = true;\n          BinaryField binaryField = (BinaryField) sfield.getType();\n          Field f = binaryField.createField(sfield,v,boost);\n          if(f != null){\n            out.add(f);\n          }\n          used = true;\n        } else {\n          // TODO!!! HACK -- date conversion\n          if (sfield != null && v instanceof Date && sfield.getType() instanceof DateField) {\n            DateField df = (DateField) sfield.getType();\n            val = df.toInternal((Date) v) + 'Z';\n          } else if (v != null) {\n            val = v.toString();\n          }\n\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, val, boost);\n          }\n        }\n\n        // Check if we should copy this field to any other fields.\n        // This could happen whether it is explicit or not.\n        List<CopyField> copyFields = schema.getCopyFieldsList(name);\n        for (CopyField cf : copyFields) {\n          SchemaField destinationField = cf.getDestination();\n          // check if the copy field is a multivalued or not\n          if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"ERROR: multiple values encountered for non multiValued copy field \" +\n                            destinationField.getName() + \": \" + val);\n          }\n\n          used = true;\n          //Don't worry about poly fields here\n          Fieldable [] fields = null;\n          if (isBinaryField) {\n            if (destinationField.getType() instanceof BinaryField) {\n              BinaryField binaryField = (BinaryField) destinationField.getType();\n              //TODO: safe to assume that binary fields only create one?\n              fields = new Field[]{binaryField.createField(destinationField, v, boost)};\n            }\n          } else {\n            fields = destinationField.createFields(cf.getLimitedValue(val), boost);\n          }\n          if (fields != null) { // null fields are not added\n            for (Fieldable f : fields) {\n              out.add(f);\n            }\n          }\n        }\n        \n        // In lucene, the boost for a given field is the product of the \n        // document boost and *all* boosts on values of that field. \n        // For multi-valued fields, we only want to set the boost on the\n        // first field.\n        boost = 1.0f; \n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" +\n                name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String id = schema.printableUniqueKey( out );\n          String msg = \"Document [\"+id+\"] missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        String id = \"\";\n        SchemaField sf = schema.getUniqueKeyField();\n        if( sf != null ) {\n          id = \"[\"+doc.getFieldValue( sf.getName() )+\"] \";\n        }\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+id+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      for( Object v : field ) {\n        if( v == null ) {\n          continue;\n        }\n        String val = null;\n        hasField = true;\n        boolean isBinaryField = false;\n        if (sfield != null && sfield.getType() instanceof BinaryField) {\n          isBinaryField = true;\n          BinaryField binaryField = (BinaryField) sfield.getType();\n          Field f = binaryField.createField(sfield,v,boost);\n          if(f != null){\n            out.add(f);\n          }\n          used = true;\n        } else {\n          // TODO!!! HACK -- date conversion\n          if (sfield != null && v instanceof Date && sfield.getType() instanceof DateField) {\n            DateField df = (DateField) sfield.getType();\n            val = df.toInternal((Date) v) + 'Z';\n          } else if (v != null) {\n            val = v.toString();\n          }\n\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, val, boost);\n          }\n        }\n\n        // Check if we should copy this field to any other fields.\n        // This could happen whether it is explicit or not.\n        List<CopyField> copyFields = schema.getCopyFieldsList(name);\n        for (CopyField cf : copyFields) {\n          SchemaField destinationField = cf.getDestination();\n          // check if the copy field is a multivalued or not\n          if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"ERROR: multiple values encountered for non multiValued copy field \" +\n                            destinationField.getName() + \": \" + val);\n          }\n\n          used = true;\n          //Don't worry about poly fields here\n          Fieldable [] fields = null;\n          if (isBinaryField) {\n            if (destinationField.getType() instanceof BinaryField) {\n              BinaryField binaryField = (BinaryField) destinationField.getType();\n              //TODO: safe to assume that binary fields only create one?\n              fields = new Field[]{binaryField.createField(destinationField, v, boost)};\n            }\n          } else {\n            fields = destinationField.createFields(cf.getLimitedValue(val), boost);\n          }\n          if (fields != null) { // null fields are not added\n            for (Fieldable f : fields) {\n              out.add(f);\n            }\n          }\n        }\n        \n        // In lucene, the boost for a given field is the product of the \n        // document boost and *all* boosts on values of that field. \n        // For multi-valued fields, we only want to set the boost on the\n        // first field.\n        boost = 1.0f; \n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" +\n                name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String id = schema.printableUniqueKey( out );\n          String msg = \"Document [\"+id+\"] missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        String id = \"\";\n        SchemaField sf = schema.getUniqueKeyField();\n        if( sf != null ) {\n          id = \"[\"+doc.getFieldValue( sf.getName() )+\"] \";\n        }\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+id+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      for( Object v : field ) {\n        if( v == null ) {\n          continue;\n        }\n        String val = null;\n        hasField = true;\n        boolean isBinaryField = false;\n        if (sfield != null && sfield.getType() instanceof BinaryField) {\n          isBinaryField = true;\n          BinaryField binaryField = (BinaryField) sfield.getType();\n          Field f = binaryField.createField(sfield,v,boost);\n          if(f != null){\n            out.add(f);\n          }\n          used = true;\n        } else {\n          // TODO!!! HACK -- date conversion\n          if (sfield != null && v instanceof Date && sfield.getType() instanceof DateField) {\n            DateField df = (DateField) sfield.getType();\n            val = df.toInternal((Date) v) + 'Z';\n          } else if (v != null) {\n            val = v.toString();\n          }\n\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, val, boost);\n          }\n        }\n\n        // Check if we should copy this field to any other fields.\n        // This could happen whether it is explicit or not.\n        List<CopyField> copyFields = schema.getCopyFieldsList(name);\n        for (CopyField cf : copyFields) {\n          SchemaField destinationField = cf.getDestination();\n          // check if the copy field is a multivalued or not\n          if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"ERROR: multiple values encountered for non multiValued copy field \" +\n                            destinationField.getName() + \": \" + val);\n          }\n\n          used = true;\n          //Don't worry about poly fields here\n          Fieldable [] fields = null;\n          if (isBinaryField) {\n            if (destinationField.getType() instanceof BinaryField) {\n              BinaryField binaryField = (BinaryField) destinationField.getType();\n              //TODO: safe to assume that binary fields only create one?\n              fields = new Field[]{binaryField.createField(destinationField, v, boost)};\n            }\n          } else {\n            fields = destinationField.createFields(cf.getLimitedValue(val), boost);\n          }\n          if (fields != null) { // null fields are not added\n            for (Fieldable f : fields) {\n              out.add(f);\n            }\n          }\n        }\n        \n        // In lucene, the boost for a given field is the product of the \n        // document boost and *all* boosts on values of that field. \n        // For multi-valued fields, we only want to set the boost on the\n        // first field.\n        boost = 1.0f; \n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" +\n                name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String id = schema.printableUniqueKey( out );\n          String msg = \"Document [\"+id+\"] missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        String id = \"\";\n        SchemaField sf = schema.getUniqueKeyField();\n        if( sf != null ) {\n          id = \"[\"+doc.getFieldValue( sf.getName() )+\"] \";\n        }\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+id+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      for( Object v : field ) {\n        if( v == null ) {\n          continue;\n        }\n        String val = null;\n        hasField = true;\n        boolean isBinaryField = false;\n        if (sfield != null && sfield.getType() instanceof BinaryField) {\n          isBinaryField = true;\n          BinaryField binaryField = (BinaryField) sfield.getType();\n          Field f = binaryField.createField(sfield,v,boost);\n          if(f != null){\n            out.add(f);\n          }\n          used = true;\n        } else {\n          // TODO!!! HACK -- date conversion\n          if (sfield != null && v instanceof Date && sfield.getType() instanceof DateField) {\n            DateField df = (DateField) sfield.getType();\n            val = df.toInternal((Date) v) + 'Z';\n          } else if (v != null) {\n            val = v.toString();\n          }\n\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, val, boost);\n          }\n        }\n\n        // Check if we should copy this field to any other fields.\n        // This could happen whether it is explicit or not.\n        List<CopyField> copyFields = schema.getCopyFieldsList(name);\n        for (CopyField cf : copyFields) {\n          SchemaField destinationField = cf.getDestination();\n          // check if the copy field is a multivalued or not\n          if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"ERROR: multiple values encountered for non multiValued copy field \" +\n                            destinationField.getName() + \": \" + val);\n          }\n\n          used = true;\n          //Don't worry about poly fields here\n          Fieldable [] fields = null;\n          if (isBinaryField) {\n            if (destinationField.getType() instanceof BinaryField) {\n              BinaryField binaryField = (BinaryField) destinationField.getType();\n              //TODO: safe to assume that binary fields only create one?\n              fields = new Field[]{binaryField.createField(destinationField, v, boost)};\n            }\n          } else {\n            fields = destinationField.createFields(cf.getLimitedValue(val), boost);\n          }\n          if (fields != null) { // null fields are not added\n            for (Fieldable f : fields) {\n              out.add(f);\n            }\n          }\n        }\n        \n        // In lucene, the boost for a given field is the product of the \n        // document boost and *all* boosts on values of that field. \n        // For multi-valued fields, we only want to set the boost on the\n        // first field.\n        boost = 1.0f; \n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" +\n                name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String id = schema.printableUniqueKey( out );\n          String msg = \"Document [\"+id+\"] missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f7fc4867635710200641d0dbf119bf48ddce222","date":1294092619,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        String id = \"\";\n        SchemaField sf = schema.getUniqueKeyField();\n        if( sf != null ) {\n          id = \"[\"+doc.getFieldValue( sf.getName() )+\"] \";\n        }\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+id+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      for( Object v : field ) {\n        if( v == null ) {\n          continue;\n        }\n        String val = null;\n        hasField = true;\n        boolean isBinaryField = false;\n        if (sfield != null && sfield.getType() instanceof BinaryField) {\n          isBinaryField = true;\n          BinaryField binaryField = (BinaryField) sfield.getType();\n          Fieldable f = binaryField.createField(sfield,v,boost);\n          if(f != null){\n            out.add(f);\n          }\n          used = true;\n        } else {\n          // TODO!!! HACK -- date conversion\n          if (sfield != null && v instanceof Date && sfield.getType() instanceof DateField) {\n            DateField df = (DateField) sfield.getType();\n            val = df.toInternal((Date) v) + 'Z';\n          } else if (v != null) {\n            val = v.toString();\n          }\n\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, val, boost);\n          }\n        }\n\n        // Check if we should copy this field to any other fields.\n        // This could happen whether it is explicit or not.\n        List<CopyField> copyFields = schema.getCopyFieldsList(name);\n        for (CopyField cf : copyFields) {\n          SchemaField destinationField = cf.getDestination();\n          // check if the copy field is a multivalued or not\n          if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"ERROR: multiple values encountered for non multiValued copy field \" +\n                            destinationField.getName() + \": \" + val);\n          }\n\n          used = true;\n          //Don't worry about poly fields here\n          Fieldable [] fields = null;\n          if (isBinaryField) {\n            if (destinationField.getType() instanceof BinaryField) {\n              BinaryField binaryField = (BinaryField) destinationField.getType();\n              //TODO: safe to assume that binary fields only create one?\n              fields = new Fieldable[]{binaryField.createField(destinationField, v, boost)};\n            }\n          } else {\n            fields = destinationField.createFields(cf.getLimitedValue(val), boost);\n          }\n          if (fields != null) { // null fields are not added\n            for (Fieldable f : fields) {\n              out.add(f);\n            }\n          }\n        }\n        \n        // In lucene, the boost for a given field is the product of the \n        // document boost and *all* boosts on values of that field. \n        // For multi-valued fields, we only want to set the boost on the\n        // first field.\n        boost = 1.0f; \n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" +\n                name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String id = schema.printableUniqueKey( out );\n          String msg = \"Document [\"+id+\"] missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        String id = \"\";\n        SchemaField sf = schema.getUniqueKeyField();\n        if( sf != null ) {\n          id = \"[\"+doc.getFieldValue( sf.getName() )+\"] \";\n        }\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+id+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      for( Object v : field ) {\n        if( v == null ) {\n          continue;\n        }\n        String val = null;\n        hasField = true;\n        boolean isBinaryField = false;\n        if (sfield != null && sfield.getType() instanceof BinaryField) {\n          isBinaryField = true;\n          BinaryField binaryField = (BinaryField) sfield.getType();\n          Field f = binaryField.createField(sfield,v,boost);\n          if(f != null){\n            out.add(f);\n          }\n          used = true;\n        } else {\n          // TODO!!! HACK -- date conversion\n          if (sfield != null && v instanceof Date && sfield.getType() instanceof DateField) {\n            DateField df = (DateField) sfield.getType();\n            val = df.toInternal((Date) v) + 'Z';\n          } else if (v != null) {\n            val = v.toString();\n          }\n\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, val, boost);\n          }\n        }\n\n        // Check if we should copy this field to any other fields.\n        // This could happen whether it is explicit or not.\n        List<CopyField> copyFields = schema.getCopyFieldsList(name);\n        for (CopyField cf : copyFields) {\n          SchemaField destinationField = cf.getDestination();\n          // check if the copy field is a multivalued or not\n          if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"ERROR: multiple values encountered for non multiValued copy field \" +\n                            destinationField.getName() + \": \" + val);\n          }\n\n          used = true;\n          //Don't worry about poly fields here\n          Fieldable [] fields = null;\n          if (isBinaryField) {\n            if (destinationField.getType() instanceof BinaryField) {\n              BinaryField binaryField = (BinaryField) destinationField.getType();\n              //TODO: safe to assume that binary fields only create one?\n              fields = new Field[]{binaryField.createField(destinationField, v, boost)};\n            }\n          } else {\n            fields = destinationField.createFields(cf.getLimitedValue(val), boost);\n          }\n          if (fields != null) { // null fields are not added\n            for (Fieldable f : fields) {\n              out.add(f);\n            }\n          }\n        }\n        \n        // In lucene, the boost for a given field is the product of the \n        // document boost and *all* boosts on values of that field. \n        // For multi-valued fields, we only want to set the boost on the\n        // first field.\n        boost = 1.0f; \n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" +\n                name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String id = schema.printableUniqueKey( out );\n          String msg = \"Document [\"+id+\"] missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        String id = \"\";\n        SchemaField sf = schema.getUniqueKeyField();\n        if( sf != null ) {\n          id = \"[\"+doc.getFieldValue( sf.getName() )+\"] \";\n        }\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+id+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      for( Object v : field ) {\n        if( v == null ) {\n          continue;\n        }\n        String val = null;\n        hasField = true;\n        boolean isBinaryField = false;\n        if (sfield != null && sfield.getType() instanceof BinaryField) {\n          isBinaryField = true;\n          BinaryField binaryField = (BinaryField) sfield.getType();\n          Fieldable f = binaryField.createField(sfield,v,boost);\n          if(f != null){\n            out.add(f);\n          }\n          used = true;\n        } else {\n          // TODO!!! HACK -- date conversion\n          if (sfield != null && v instanceof Date && sfield.getType() instanceof DateField) {\n            DateField df = (DateField) sfield.getType();\n            val = df.toInternal((Date) v) + 'Z';\n          } else if (v != null) {\n            val = v.toString();\n          }\n\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, val, boost);\n          }\n        }\n\n        // Check if we should copy this field to any other fields.\n        // This could happen whether it is explicit or not.\n        List<CopyField> copyFields = schema.getCopyFieldsList(name);\n        for (CopyField cf : copyFields) {\n          SchemaField destinationField = cf.getDestination();\n          // check if the copy field is a multivalued or not\n          if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"ERROR: multiple values encountered for non multiValued copy field \" +\n                            destinationField.getName() + \": \" + val);\n          }\n\n          used = true;\n          //Don't worry about poly fields here\n          Fieldable [] fields = null;\n          if (isBinaryField) {\n            if (destinationField.getType() instanceof BinaryField) {\n              BinaryField binaryField = (BinaryField) destinationField.getType();\n              //TODO: safe to assume that binary fields only create one?\n              fields = new Fieldable[]{binaryField.createField(destinationField, v, boost)};\n            }\n          } else {\n            fields = destinationField.createFields(cf.getLimitedValue(val), boost);\n          }\n          if (fields != null) { // null fields are not added\n            for (Fieldable f : fields) {\n              out.add(f);\n            }\n          }\n        }\n        \n        // In lucene, the boost for a given field is the product of the \n        // document boost and *all* boosts on values of that field. \n        // For multi-valued fields, we only want to set the boost on the\n        // first field.\n        boost = 1.0f; \n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" +\n                name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String id = schema.printableUniqueKey( out );\n          String msg = \"Document [\"+id+\"] missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        String id = \"\";\n        SchemaField sf = schema.getUniqueKeyField();\n        if( sf != null ) {\n          id = \"[\"+doc.getFieldValue( sf.getName() )+\"] \";\n        }\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+id+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      for( Object v : field ) {\n        if( v == null ) {\n          continue;\n        }\n        String val = null;\n        hasField = true;\n        boolean isBinaryField = false;\n        if (sfield != null && sfield.getType() instanceof BinaryField) {\n          isBinaryField = true;\n          BinaryField binaryField = (BinaryField) sfield.getType();\n          Field f = binaryField.createField(sfield,v,boost);\n          if(f != null){\n            out.add(f);\n          }\n          used = true;\n        } else {\n          // TODO!!! HACK -- date conversion\n          if (sfield != null && v instanceof Date && sfield.getType() instanceof DateField) {\n            DateField df = (DateField) sfield.getType();\n            val = df.toInternal((Date) v) + 'Z';\n          } else if (v != null) {\n            val = v.toString();\n          }\n\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, val, boost);\n          }\n        }\n\n        // Check if we should copy this field to any other fields.\n        // This could happen whether it is explicit or not.\n        List<CopyField> copyFields = schema.getCopyFieldsList(name);\n        for (CopyField cf : copyFields) {\n          SchemaField destinationField = cf.getDestination();\n          // check if the copy field is a multivalued or not\n          if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"ERROR: multiple values encountered for non multiValued copy field \" +\n                            destinationField.getName() + \": \" + val);\n          }\n\n          used = true;\n          //Don't worry about poly fields here\n          Fieldable [] fields = null;\n          if (isBinaryField) {\n            if (destinationField.getType() instanceof BinaryField) {\n              BinaryField binaryField = (BinaryField) destinationField.getType();\n              //TODO: safe to assume that binary fields only create one?\n              fields = new Field[]{binaryField.createField(destinationField, v, boost)};\n            }\n          } else {\n            fields = destinationField.createFields(cf.getLimitedValue(val), boost);\n          }\n          if (fields != null) { // null fields are not added\n            for (Fieldable f : fields) {\n              out.add(f);\n            }\n          }\n        }\n        \n        // In lucene, the boost for a given field is the product of the \n        // document boost and *all* boosts on values of that field. \n        // For multi-valued fields, we only want to set the boost on the\n        // first field.\n        boost = 1.0f; \n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" +\n                name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String id = schema.printableUniqueKey( out );\n          String msg = \"Document [\"+id+\"] missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        String id = \"\";\n        SchemaField sf = schema.getUniqueKeyField();\n        if( sf != null ) {\n          id = \"[\"+doc.getFieldValue( sf.getName() )+\"] \";\n        }\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+id+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      for( Object v : field ) {\n        if( v == null ) {\n          continue;\n        }\n        String val = null;\n        hasField = true;\n        boolean isBinaryField = false;\n        if (sfield != null && sfield.getType() instanceof BinaryField) {\n          isBinaryField = true;\n          BinaryField binaryField = (BinaryField) sfield.getType();\n          Fieldable f = binaryField.createField(sfield,v,boost);\n          if(f != null){\n            out.add(f);\n          }\n          used = true;\n        } else {\n          // TODO!!! HACK -- date conversion\n          if (sfield != null && v instanceof Date && sfield.getType() instanceof DateField) {\n            DateField df = (DateField) sfield.getType();\n            val = df.toInternal((Date) v) + 'Z';\n          } else if (v != null) {\n            val = v.toString();\n          }\n\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, val, boost);\n          }\n        }\n\n        // Check if we should copy this field to any other fields.\n        // This could happen whether it is explicit or not.\n        List<CopyField> copyFields = schema.getCopyFieldsList(name);\n        for (CopyField cf : copyFields) {\n          SchemaField destinationField = cf.getDestination();\n          // check if the copy field is a multivalued or not\n          if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"ERROR: multiple values encountered for non multiValued copy field \" +\n                            destinationField.getName() + \": \" + val);\n          }\n\n          used = true;\n          //Don't worry about poly fields here\n          Fieldable [] fields = null;\n          if (isBinaryField) {\n            if (destinationField.getType() instanceof BinaryField) {\n              BinaryField binaryField = (BinaryField) destinationField.getType();\n              //TODO: safe to assume that binary fields only create one?\n              fields = new Fieldable[]{binaryField.createField(destinationField, v, boost)};\n            }\n          } else {\n            fields = destinationField.createFields(cf.getLimitedValue(val), boost);\n          }\n          if (fields != null) { // null fields are not added\n            for (Fieldable f : fields) {\n              out.add(f);\n            }\n          }\n        }\n        \n        // In lucene, the boost for a given field is the product of the \n        // document boost and *all* boosts on values of that field. \n        // For multi-valued fields, we only want to set the boost on the\n        // first field.\n        boost = 1.0f; \n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" +\n                name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String id = schema.printableUniqueKey( out );\n          String msg = \"Document [\"+id+\"] missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        String id = \"\";\n        SchemaField sf = schema.getUniqueKeyField();\n        if( sf != null ) {\n          id = \"[\"+doc.getFieldValue( sf.getName() )+\"] \";\n        }\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+id+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      for( Object v : field ) {\n        if( v == null ) {\n          continue;\n        }\n        String val = null;\n        hasField = true;\n        boolean isBinaryField = false;\n        if (sfield != null && sfield.getType() instanceof BinaryField) {\n          isBinaryField = true;\n          BinaryField binaryField = (BinaryField) sfield.getType();\n          Field f = binaryField.createField(sfield,v,boost);\n          if(f != null){\n            out.add(f);\n          }\n          used = true;\n        } else {\n          // TODO!!! HACK -- date conversion\n          if (sfield != null && v instanceof Date && sfield.getType() instanceof DateField) {\n            DateField df = (DateField) sfield.getType();\n            val = df.toInternal((Date) v) + 'Z';\n          } else if (v != null) {\n            val = v.toString();\n          }\n\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, val, boost);\n          }\n        }\n\n        // Check if we should copy this field to any other fields.\n        // This could happen whether it is explicit or not.\n        List<CopyField> copyFields = schema.getCopyFieldsList(name);\n        for (CopyField cf : copyFields) {\n          SchemaField destinationField = cf.getDestination();\n          // check if the copy field is a multivalued or not\n          if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"ERROR: multiple values encountered for non multiValued copy field \" +\n                            destinationField.getName() + \": \" + val);\n          }\n\n          used = true;\n          //Don't worry about poly fields here\n          Fieldable [] fields = null;\n          if (isBinaryField) {\n            if (destinationField.getType() instanceof BinaryField) {\n              BinaryField binaryField = (BinaryField) destinationField.getType();\n              //TODO: safe to assume that binary fields only create one?\n              fields = new Field[]{binaryField.createField(destinationField, v, boost)};\n            }\n          } else {\n            fields = destinationField.createFields(cf.getLimitedValue(val), boost);\n          }\n          if (fields != null) { // null fields are not added\n            for (Fieldable f : fields) {\n              out.add(f);\n            }\n          }\n        }\n        \n        // In lucene, the boost for a given field is the product of the \n        // document boost and *all* boosts on values of that field. \n        // For multi-valued fields, we only want to set the boost on the\n        // first field.\n        boost = 1.0f; \n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" +\n                name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String id = schema.printableUniqueKey( out );\n          String msg = \"Document [\"+id+\"] missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7b4eb250c17a81777008099426ffc71d5ec542b","date":1299530043,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          String val = null;\n          hasField = true;\n          boolean isBinaryField = false;\n          if (sfield != null && sfield.getType() instanceof BinaryField) {\n            isBinaryField = true;\n            BinaryField binaryField = (BinaryField) sfield.getType();\n            Fieldable f = binaryField.createField(sfield,v,boost);\n            if(f != null){\n              out.add(f);\n            }\n            used = true;\n          } else {\n            // TODO!!! HACK -- date conversion\n            if (sfield != null && v instanceof Date && sfield.getType() instanceof DateField) {\n              DateField df = (DateField) sfield.getType();\n              val = df.toInternal((Date) v) + 'Z';\n            } else if (v != null) {\n              val = v.toString();\n            }\n  \n            if (sfield != null) {\n              used = true;\n              addField(out, sfield, val, boost);\n            }\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + val);\n            }\n  \n            used = true;\n            //Don't worry about poly fields here\n            Fieldable [] fields = null;\n            if (isBinaryField) {\n              if (destinationField.getType() instanceof BinaryField) {\n                BinaryField binaryField = (BinaryField) destinationField.getType();\n                //TODO: safe to assume that binary fields only create one?\n                fields = new Fieldable[]{binaryField.createField(destinationField, v, boost)};\n              }\n            } else {\n              fields = destinationField.createFields(cf.getLimitedValue(val), boost);\n            }\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        String id = \"\";\n        SchemaField sf = schema.getUniqueKeyField();\n        if( sf != null ) {\n          id = \"[\"+doc.getFieldValue( sf.getName() )+\"] \";\n        }\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+id+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      for( Object v : field ) {\n        if( v == null ) {\n          continue;\n        }\n        String val = null;\n        hasField = true;\n        boolean isBinaryField = false;\n        if (sfield != null && sfield.getType() instanceof BinaryField) {\n          isBinaryField = true;\n          BinaryField binaryField = (BinaryField) sfield.getType();\n          Fieldable f = binaryField.createField(sfield,v,boost);\n          if(f != null){\n            out.add(f);\n          }\n          used = true;\n        } else {\n          // TODO!!! HACK -- date conversion\n          if (sfield != null && v instanceof Date && sfield.getType() instanceof DateField) {\n            DateField df = (DateField) sfield.getType();\n            val = df.toInternal((Date) v) + 'Z';\n          } else if (v != null) {\n            val = v.toString();\n          }\n\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, val, boost);\n          }\n        }\n\n        // Check if we should copy this field to any other fields.\n        // This could happen whether it is explicit or not.\n        List<CopyField> copyFields = schema.getCopyFieldsList(name);\n        for (CopyField cf : copyFields) {\n          SchemaField destinationField = cf.getDestination();\n          // check if the copy field is a multivalued or not\n          if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"ERROR: multiple values encountered for non multiValued copy field \" +\n                            destinationField.getName() + \": \" + val);\n          }\n\n          used = true;\n          //Don't worry about poly fields here\n          Fieldable [] fields = null;\n          if (isBinaryField) {\n            if (destinationField.getType() instanceof BinaryField) {\n              BinaryField binaryField = (BinaryField) destinationField.getType();\n              //TODO: safe to assume that binary fields only create one?\n              fields = new Fieldable[]{binaryField.createField(destinationField, v, boost)};\n            }\n          } else {\n            fields = destinationField.createFields(cf.getLimitedValue(val), boost);\n          }\n          if (fields != null) { // null fields are not added\n            for (Fieldable f : fields) {\n              out.add(f);\n            }\n          }\n        }\n        \n        // In lucene, the boost for a given field is the product of the \n        // document boost and *all* boosts on values of that field. \n        // For multi-valued fields, we only want to set the boost on the\n        // first field.\n        boost = 1.0f; \n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" +\n                name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String id = schema.printableUniqueKey( out );\n          String msg = \"Document [\"+id+\"] missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":["d4148af0b1a0b6991d37fc16a075d88fc63068f9","d4148af0b1a0b6991d37fc16a075d88fc63068f9","d4148af0b1a0b6991d37fc16a075d88fc63068f9","6d8777a0e10e1e79c0a4aca9faf92867422dd411","6d8777a0e10e1e79c0a4aca9faf92867422dd411","6d8777a0e10e1e79c0a4aca9faf92867422dd411","fd6ef1120d3887d6a8783b5506c8fea3ddf707f0","fd6ef1120d3887d6a8783b5506c8fea3ddf707f0","fd6ef1120d3887d6a8783b5506c8fea3ddf707f0","8c8a38c5f82c9db108fb5da0ae290461de3f6ed7","8c8a38c5f82c9db108fb5da0ae290461de3f6ed7","8c8a38c5f82c9db108fb5da0ae290461de3f6ed7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"292ece8c0acfbfc6126153b17f0c3ca809add4f0","date":1300388028,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          hasField = true;\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, v, boost);\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + v);\n            }\n  \n            used = true;\n            \n            // Perhaps trim the length of a copy field\n            Object val = v;\n            if( val instanceof String && cf.getMaxChars() > 0 ) {\n              val = cf.getLimitedValue((String)val);\n            }\n            \n            Fieldable [] fields = destinationField.createFields(val, boost);\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          String val = null;\n          hasField = true;\n          boolean isBinaryField = false;\n          if (sfield != null && sfield.getType() instanceof BinaryField) {\n            isBinaryField = true;\n            BinaryField binaryField = (BinaryField) sfield.getType();\n            Fieldable f = binaryField.createField(sfield,v,boost);\n            if(f != null){\n              out.add(f);\n            }\n            used = true;\n          } else {\n            // TODO!!! HACK -- date conversion\n            if (sfield != null && v instanceof Date && sfield.getType() instanceof DateField) {\n              DateField df = (DateField) sfield.getType();\n              val = df.toInternal((Date) v) + 'Z';\n            } else if (v != null) {\n              val = v.toString();\n            }\n  \n            if (sfield != null) {\n              used = true;\n              addField(out, sfield, val, boost);\n            }\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + val);\n            }\n  \n            used = true;\n            //Don't worry about poly fields here\n            Fieldable [] fields = null;\n            if (isBinaryField) {\n              if (destinationField.getType() instanceof BinaryField) {\n                BinaryField binaryField = (BinaryField) destinationField.getType();\n                //TODO: safe to assume that binary fields only create one?\n                fields = new Fieldable[]{binaryField.createField(destinationField, v, boost)};\n              }\n            } else {\n              fields = destinationField.createFields(cf.getLimitedValue(val), boost);\n            }\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":["fd6ef1120d3887d6a8783b5506c8fea3ddf707f0","fd6ef1120d3887d6a8783b5506c8fea3ddf707f0","fd6ef1120d3887d6a8783b5506c8fea3ddf707f0","8c8a38c5f82c9db108fb5da0ae290461de3f6ed7","8c8a38c5f82c9db108fb5da0ae290461de3f6ed7","8c8a38c5f82c9db108fb5da0ae290461de3f6ed7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e40da396805cafa1346f00177a602baa3fff84cb","date":1300723415,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          hasField = true;\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, v, boost);\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.getFieldable(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + v);\n            }\n  \n            used = true;\n            \n            // Perhaps trim the length of a copy field\n            Object val = v;\n            if( val instanceof String && cf.getMaxChars() > 0 ) {\n              val = cf.getLimitedValue((String)val);\n            }\n            \n            Fieldable [] fields = destinationField.createFields(val, boost);\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          hasField = true;\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, v, boost);\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + v);\n            }\n  \n            used = true;\n            \n            // Perhaps trim the length of a copy field\n            Object val = v;\n            if( val instanceof String && cf.getMaxChars() > 0 ) {\n              val = cf.getLimitedValue((String)val);\n            }\n            \n            Fieldable [] fields = destinationField.createFields(val, boost);\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f6ac07612daf67b134b954f2152921766bcddd0d","date":1300739019,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          hasField = true;\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, v, boost);\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.getFieldable(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + v);\n            }\n  \n            used = true;\n            \n            // Perhaps trim the length of a copy field\n            Object val = v;\n            if( val instanceof String && cf.getMaxChars() > 0 ) {\n              val = cf.getLimitedValue((String)val);\n            }\n            \n            Fieldable [] fields = destinationField.createFields(val, boost);\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                if(f != null) out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          hasField = true;\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, v, boost);\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.getFieldable(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + v);\n            }\n  \n            used = true;\n            \n            // Perhaps trim the length of a copy field\n            Object val = v;\n            if( val instanceof String && cf.getMaxChars() > 0 ) {\n              val = cf.getLimitedValue((String)val);\n            }\n            \n            Fieldable [] fields = destinationField.createFields(val, boost);\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":["fd6ef1120d3887d6a8783b5506c8fea3ddf707f0","fd6ef1120d3887d6a8783b5506c8fea3ddf707f0","fd6ef1120d3887d6a8783b5506c8fea3ddf707f0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          hasField = true;\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, v, boost);\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.getFieldable(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + v);\n            }\n  \n            used = true;\n            \n            // Perhaps trim the length of a copy field\n            Object val = v;\n            if( val instanceof String && cf.getMaxChars() > 0 ) {\n              val = cf.getLimitedValue((String)val);\n            }\n            \n            Fieldable [] fields = destinationField.createFields(val, boost);\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                if(f != null) out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        String id = \"\";\n        SchemaField sf = schema.getUniqueKeyField();\n        if( sf != null ) {\n          id = \"[\"+doc.getFieldValue( sf.getName() )+\"] \";\n        }\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+id+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      for( Object v : field ) {\n        if( v == null ) {\n          continue;\n        }\n        String val = null;\n        hasField = true;\n        boolean isBinaryField = false;\n        if (sfield != null && sfield.getType() instanceof BinaryField) {\n          isBinaryField = true;\n          BinaryField binaryField = (BinaryField) sfield.getType();\n          Fieldable f = binaryField.createField(sfield,v,boost);\n          if(f != null){\n            out.add(f);\n          }\n          used = true;\n        } else {\n          // TODO!!! HACK -- date conversion\n          if (sfield != null && v instanceof Date && sfield.getType() instanceof DateField) {\n            DateField df = (DateField) sfield.getType();\n            val = df.toInternal((Date) v) + 'Z';\n          } else if (v != null) {\n            val = v.toString();\n          }\n\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, val, boost);\n          }\n        }\n\n        // Check if we should copy this field to any other fields.\n        // This could happen whether it is explicit or not.\n        List<CopyField> copyFields = schema.getCopyFieldsList(name);\n        for (CopyField cf : copyFields) {\n          SchemaField destinationField = cf.getDestination();\n          // check if the copy field is a multivalued or not\n          if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"ERROR: multiple values encountered for non multiValued copy field \" +\n                            destinationField.getName() + \": \" + val);\n          }\n\n          used = true;\n          //Don't worry about poly fields here\n          Fieldable [] fields = null;\n          if (isBinaryField) {\n            if (destinationField.getType() instanceof BinaryField) {\n              BinaryField binaryField = (BinaryField) destinationField.getType();\n              //TODO: safe to assume that binary fields only create one?\n              fields = new Fieldable[]{binaryField.createField(destinationField, v, boost)};\n            }\n          } else {\n            fields = destinationField.createFields(cf.getLimitedValue(val), boost);\n          }\n          if (fields != null) { // null fields are not added\n            for (Fieldable f : fields) {\n              out.add(f);\n            }\n          }\n        }\n        \n        // In lucene, the boost for a given field is the product of the \n        // document boost and *all* boosts on values of that field. \n        // For multi-valued fields, we only want to set the boost on the\n        // first field.\n        boost = 1.0f; \n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" +\n                name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String id = schema.printableUniqueKey( out );\n          String msg = \"Document [\"+id+\"] missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          hasField = true;\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, v, boost);\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.getFieldable(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + v);\n            }\n  \n            used = true;\n            \n            // Perhaps trim the length of a copy field\n            Object val = v;\n            if( val instanceof String && cf.getMaxChars() > 0 ) {\n              val = cf.getLimitedValue((String)val);\n            }\n            \n            Fieldable [] fields = destinationField.createFields(val, boost);\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                if(f != null) out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        String id = \"\";\n        SchemaField sf = schema.getUniqueKeyField();\n        if( sf != null ) {\n          id = \"[\"+doc.getFieldValue( sf.getName() )+\"] \";\n        }\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+id+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      for( Object v : field ) {\n        if( v == null ) {\n          continue;\n        }\n        String val = null;\n        hasField = true;\n        boolean isBinaryField = false;\n        if (sfield != null && sfield.getType() instanceof BinaryField) {\n          isBinaryField = true;\n          BinaryField binaryField = (BinaryField) sfield.getType();\n          Fieldable f = binaryField.createField(sfield,v,boost);\n          if(f != null){\n            out.add(f);\n          }\n          used = true;\n        } else {\n          // TODO!!! HACK -- date conversion\n          if (sfield != null && v instanceof Date && sfield.getType() instanceof DateField) {\n            DateField df = (DateField) sfield.getType();\n            val = df.toInternal((Date) v) + 'Z';\n          } else if (v != null) {\n            val = v.toString();\n          }\n\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, val, boost);\n          }\n        }\n\n        // Check if we should copy this field to any other fields.\n        // This could happen whether it is explicit or not.\n        List<CopyField> copyFields = schema.getCopyFieldsList(name);\n        for (CopyField cf : copyFields) {\n          SchemaField destinationField = cf.getDestination();\n          // check if the copy field is a multivalued or not\n          if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"ERROR: multiple values encountered for non multiValued copy field \" +\n                            destinationField.getName() + \": \" + val);\n          }\n\n          used = true;\n          //Don't worry about poly fields here\n          Fieldable [] fields = null;\n          if (isBinaryField) {\n            if (destinationField.getType() instanceof BinaryField) {\n              BinaryField binaryField = (BinaryField) destinationField.getType();\n              //TODO: safe to assume that binary fields only create one?\n              fields = new Fieldable[]{binaryField.createField(destinationField, v, boost)};\n            }\n          } else {\n            fields = destinationField.createFields(cf.getLimitedValue(val), boost);\n          }\n          if (fields != null) { // null fields are not added\n            for (Fieldable f : fields) {\n              out.add(f);\n            }\n          }\n        }\n        \n        // In lucene, the boost for a given field is the product of the \n        // document boost and *all* boosts on values of that field. \n        // For multi-valued fields, we only want to set the boost on the\n        // first field.\n        boost = 1.0f; \n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" +\n                name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String id = schema.printableUniqueKey( out );\n          String msg = \"Document [\"+id+\"] missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab0e9f7ce724e6aea1fea746dded19e76d231cf8","date":1304774078,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          hasField = true;\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, v, boost);\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.getFieldable(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + v);\n            }\n  \n            used = true;\n            \n            // Perhaps trim the length of a copy field\n            Object val = v;\n            if( val instanceof String && cf.getMaxChars() > 0 ) {\n              val = cf.getLimitedValue((String)val);\n            }\n            \n            Fieldable [] fields = destinationField.createFields(val, boost);\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                if(f != null) out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getFieldable(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          hasField = true;\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, v, boost);\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.getFieldable(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + v);\n            }\n  \n            used = true;\n            \n            // Perhaps trim the length of a copy field\n            Object val = v;\n            if( val instanceof String && cf.getMaxChars() > 0 ) {\n              val = cf.getLimitedValue((String)val);\n            }\n            \n            Fieldable [] fields = destinationField.createFields(val, boost);\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                if(f != null) out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          hasField = true;\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, v, boost);\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.getFieldable(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + v);\n            }\n  \n            used = true;\n            \n            // Perhaps trim the length of a copy field\n            Object val = v;\n            if( val instanceof String && cf.getMaxChars() > 0 ) {\n              val = cf.getLimitedValue((String)val);\n            }\n            \n            Fieldable [] fields = destinationField.createFields(val, boost);\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                if(f != null) out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getFieldable(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          hasField = true;\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, v, boost);\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.getFieldable(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + v);\n            }\n  \n            used = true;\n            \n            // Perhaps trim the length of a copy field\n            Object val = v;\n            if( val instanceof String && cf.getMaxChars() > 0 ) {\n              val = cf.getLimitedValue((String)val);\n            }\n            \n            Fieldable [] fields = destinationField.createFields(val, boost);\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                if(f != null) out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          hasField = true;\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, v, boost);\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.getFieldable(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + v);\n            }\n  \n            used = true;\n            \n            // Perhaps trim the length of a copy field\n            Object val = v;\n            if( val instanceof String && cf.getMaxChars() > 0 ) {\n              val = cf.getLimitedValue((String)val);\n            }\n            \n            Fieldable [] fields = destinationField.createFields(val, boost);\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                if(f != null) out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getFieldable(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          hasField = true;\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, v, boost);\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.getFieldable(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + v);\n            }\n  \n            used = true;\n            \n            // Perhaps trim the length of a copy field\n            Object val = v;\n            if( val instanceof String && cf.getMaxChars() > 0 ) {\n              val = cf.getLimitedValue((String)val);\n            }\n            \n            Fieldable [] fields = destinationField.createFields(val, boost);\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                if(f != null) out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          hasField = true;\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, v, boost);\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.getFieldable(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + v);\n            }\n  \n            used = true;\n            \n            // Perhaps trim the length of a copy field\n            Object val = v;\n            if( val instanceof String && cf.getMaxChars() > 0 ) {\n              val = cf.getLimitedValue((String)val);\n            }\n            \n            Fieldable [] fields = destinationField.createFields(val, boost);\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                if(f != null) out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getFieldable(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          hasField = true;\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, v, boost);\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.getFieldable(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + v);\n            }\n  \n            used = true;\n            \n            // Perhaps trim the length of a copy field\n            Object val = v;\n            if( val instanceof String && cf.getMaxChars() > 0 ) {\n              val = cf.getLimitedValue((String)val);\n            }\n            \n            Fieldable [] fields = destinationField.createFields(val, boost);\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                if(f != null) out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getFieldable(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          hasField = true;\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, v, boost);\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.getFieldable(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + v);\n            }\n  \n            used = true;\n            \n            // Perhaps trim the length of a copy field\n            Object val = v;\n            if( val instanceof String && cf.getMaxChars() > 0 ) {\n              val = cf.getLimitedValue((String)val);\n            }\n            \n            Fieldable [] fields = destinationField.createFields(val, boost);\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                if(f != null) out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getFieldable(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          hasField = true;\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, v, boost);\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.getFieldable(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + v);\n            }\n  \n            used = true;\n            \n            // Perhaps trim the length of a copy field\n            Object val = v;\n            if( val instanceof String && cf.getMaxChars() > 0 ) {\n              val = cf.getLimitedValue((String)val);\n            }\n            \n            Fieldable [] fields = destinationField.createFields(val, boost);\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                if(f != null) out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getFieldable(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#toDocument(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          hasField = true;\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, v, boost);\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.getFieldable(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + v);\n            }\n  \n            used = true;\n            \n            // Perhaps trim the length of a copy field\n            Object val = v;\n            if( val instanceof String && cf.getMaxChars() > 0 ) {\n              val = cf.getLimitedValue((String)val);\n            }\n            \n            Fieldable [] fields = destinationField.createFields(val, boost);\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                if(f != null) out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getFieldable(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Convert a SolrInputDocument to a lucene Document.\n   * \n   * This function should go elsewhere.  This builds the Document without an\n   * extra Map<> checking for multiple values.  For more discussion, see:\n   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html\n   * \n   * TODO: /!\\ NOTE /!\\ This semantics of this function are still in flux.  \n   * Something somewhere needs to be able to fill up a SolrDocument from\n   * a lucene document - this is one place that may happen.  It may also be\n   * moved to an independent function\n   * \n   * @since solr 1.3\n   */\n  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )\n  { \n    Document out = new Document();\n    out.setBoost( doc.getDocumentBoost() );\n    \n    // Load fields from SolrDocument to Document\n    for( SolrInputField field : doc ) {\n      String name = field.getName();\n      SchemaField sfield = schema.getFieldOrNull(name);\n      boolean used = false;\n      float boost = field.getBoost();\n      \n      // Make sure it has the correct number\n      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued field \" + \n              sfield.getName() + \": \" +field.getValue() );\n      }\n      \n\n      // load each field value\n      boolean hasField = false;\n      try {\n        for( Object v : field ) {\n          if( v == null ) {\n            continue;\n          }\n          hasField = true;\n          if (sfield != null) {\n            used = true;\n            addField(out, sfield, v, boost);\n          }\n  \n          // Check if we should copy this field to any other fields.\n          // This could happen whether it is explicit or not.\n          List<CopyField> copyFields = schema.getCopyFieldsList(name);\n          for (CopyField cf : copyFields) {\n            SchemaField destinationField = cf.getDestination();\n            // check if the copy field is a multivalued or not\n            if (!destinationField.multiValued() && out.getFieldable(destinationField.getName()) != null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                      \"ERROR: \"+getID(doc, schema)+\"multiple values encountered for non multiValued copy field \" +\n                              destinationField.getName() + \": \" + v);\n            }\n  \n            used = true;\n            \n            // Perhaps trim the length of a copy field\n            Object val = v;\n            if( val instanceof String && cf.getMaxChars() > 0 ) {\n              val = cf.getLimitedValue((String)val);\n            }\n            \n            Fieldable [] fields = destinationField.createFields(val, boost);\n            if (fields != null) { // null fields are not added\n              for (Fieldable f : fields) {\n                if(f != null) out.add(f);\n              }\n            }\n          }\n          \n          // In lucene, the boost for a given field is the product of the \n          // document boost and *all* boosts on values of that field. \n          // For multi-valued fields, we only want to set the boost on the\n          // first field.\n          boost = 1.0f; \n        }\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"Error adding field '\" + \n              field.getName() + \"'='\" +field.getValue()+\"'\", ex );\n      }\n      \n      // make sure the field was used somehow...\n      if( !used && hasField ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n            \"ERROR: \"+getID(doc, schema)+\"unknown field '\" +name + \"'\");\n      }\n    }\n    \n        \n    // Now validate required fields or add default values\n    // fields with default values are defacto 'required'\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (out.getFieldable(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(out, field, field.getDefaultValue(), 1.0f);\n        } \n        else {\n          String msg = getID(doc, schema) + \"missing required field: \" + field.getName();\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );\n        }\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e40da396805cafa1346f00177a602baa3fff84cb":["292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"b7b4eb250c17a81777008099426ffc71d5ec542b":["6f7fc4867635710200641d0dbf119bf48ddce222"],"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","6f7fc4867635710200641d0dbf119bf48ddce222"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["f6ac07612daf67b134b954f2152921766bcddd0d"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"6f7fc4867635710200641d0dbf119bf48ddce222":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"f6ac07612daf67b134b954f2152921766bcddd0d":["e40da396805cafa1346f00177a602baa3fff84cb"],"292ece8c0acfbfc6126153b17f0c3ca809add4f0":["b7b4eb250c17a81777008099426ffc71d5ec542b"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["868da859b43505d9d2a023bfeae6dd0c795f5295","f6ac07612daf67b134b954f2152921766bcddd0d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","f6ac07612daf67b134b954f2152921766bcddd0d"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f6ac07612daf67b134b954f2152921766bcddd0d","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["d619839baa8ce5503e496b94a9e42ad6f079293f","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1da8d55113b689b06716246649de6f62430f15c0","6f7fc4867635710200641d0dbf119bf48ddce222"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"e40da396805cafa1346f00177a602baa3fff84cb":["f6ac07612daf67b134b954f2152921766bcddd0d"],"b7b4eb250c17a81777008099426ffc71d5ec542b":["292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["c26f00b574427b55127e869b935845554afde1fa","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"6f7fc4867635710200641d0dbf119bf48ddce222":["b7b4eb250c17a81777008099426ffc71d5ec542b","70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"292ece8c0acfbfc6126153b17f0c3ca809add4f0":["e40da396805cafa1346f00177a602baa3fff84cb"],"f6ac07612daf67b134b954f2152921766bcddd0d":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","6f7fc4867635710200641d0dbf119bf48ddce222","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}