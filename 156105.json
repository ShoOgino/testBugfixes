{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","pathOld":"/dev/null","sourceNew":"  public ZkNodeProps getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (cloudState != null) {\n        final CloudState currentState = cloudState;      \n        final ZkNodeProps nodeProps = currentState.getLeader(collection, shard);\n        if (nodeProps != null) {\n          return nodeProps;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new RuntimeException(\"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","pathOld":"/dev/null","sourceNew":"  public ZkNodeProps getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (cloudState != null) {\n        final CloudState currentState = cloudState;      \n        final ZkNodeProps nodeProps = currentState.getLeader(collection, shard);\n        if (nodeProps != null) {\n          return nodeProps;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new RuntimeException(\"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","pathOld":"/dev/null","sourceNew":"  public ZkNodeProps getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (cloudState != null) {\n        final CloudState currentState = cloudState;      \n        final ZkNodeProps nodeProps = currentState.getLeader(collection, shard);\n        if (nodeProps != null) {\n          return nodeProps;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new RuntimeException(\"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c824b5854f7ad30cd53f0634fc7cb533df74590b","date":1344024196,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","sourceNew":"  public ZkNodeProps getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (cloudState != null) {    \n        final ZkNodeProps nodeProps = cloudState.getLeader(collection, shard);\n        if (nodeProps != null) {\n          return nodeProps;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new RuntimeException(\"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","sourceOld":"  public ZkNodeProps getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (cloudState != null) {\n        final CloudState currentState = cloudState;      \n        final ZkNodeProps nodeProps = currentState.getLeader(collection, shard);\n        if (nodeProps != null) {\n          return nodeProps;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new RuntimeException(\"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","sourceNew":"  public ZkNodeProps getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        final ZkNodeProps nodeProps = clusterState.getLeader(collection, shard);\n        if (nodeProps != null) {\n          return nodeProps;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new RuntimeException(\"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","sourceOld":"  public ZkNodeProps getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (cloudState != null) {    \n        final ZkNodeProps nodeProps = cloudState.getLeader(collection, shard);\n        if (nodeProps != null) {\n          return nodeProps;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new RuntimeException(\"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","bugFix":null,"bugIntro":["82f063229e39b59c960866c1bc49285b95676491"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","sourceNew":"  public ZkNodeProps getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        final ZkNodeProps nodeProps = clusterState.getLeader(collection, shard);\n        if (nodeProps != null) {\n          return nodeProps;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new RuntimeException(\"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","sourceOld":"  public ZkNodeProps getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (cloudState != null) {\n        final CloudState currentState = cloudState;      \n        final ZkNodeProps nodeProps = currentState.getLeader(collection, shard);\n        if (nodeProps != null) {\n          return nodeProps;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new RuntimeException(\"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","sourceNew":"  public ZkNodeProps getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        final ZkNodeProps nodeProps = clusterState.getLeader(collection, shard);\n        if (nodeProps != null) {\n          return nodeProps;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new RuntimeException(\"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","sourceOld":"  public ZkNodeProps getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (cloudState != null) {\n        final CloudState currentState = cloudState;      \n        final ZkNodeProps nodeProps = currentState.getLeader(collection, shard);\n        if (nodeProps != null) {\n          return nodeProps;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new RuntimeException(\"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","sourceNew":"  public ZkNodeProps getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        final ZkNodeProps nodeProps = clusterState.getLeader(collection, shard);\n        if (nodeProps != null) {\n          return nodeProps;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","sourceOld":"  public ZkNodeProps getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        final ZkNodeProps nodeProps = clusterState.getLeader(collection, shard);\n        if (nodeProps != null) {\n          return nodeProps;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new RuntimeException(\"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":["204509ef590c8dfddd322f12e0f9fb6a0060be69"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4fd9ffefcfab6cd0e3e0fb85dbf34c4cff0b8b3c","date":1352731032,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","sourceNew":"  public ZkNodeProps getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        final ZkNodeProps nodeProps = clusterState.getLeader(collection, shard);\n        if (nodeProps != null && getClusterState().liveNodesContain((String) nodeProps.get(ZkStateReader.NODE_NAME_PROP))) {\n          return nodeProps;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","sourceOld":"  public ZkNodeProps getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        final ZkNodeProps nodeProps = clusterState.getLeader(collection, shard);\n        if (nodeProps != null) {\n          return nodeProps;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"82f063229e39b59c960866c1bc49285b95676491","date":1352733047,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","sourceNew":"  public ZkNodeProps getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        final ZkNodeProps nodeProps = clusterState.getLeader(collection, shard);     \n        if (nodeProps != null && getClusterState().liveNodesContain((String) nodeProps.get(ZkStateReader.NODE_NAME_PROP))) {\n          return nodeProps;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","sourceOld":"  public ZkNodeProps getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        final ZkNodeProps nodeProps = clusterState.getLeader(collection, shard);\n        if (nodeProps != null && getClusterState().liveNodesContain((String) nodeProps.get(ZkStateReader.NODE_NAME_PROP))) {\n          return nodeProps;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","bugFix":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"89f828d954597b98a28942874636f35c719b8a5d","date":1354471211,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","sourceNew":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        Replica replica = clusterState.getLeader(collection, shard);\n        if (replica != null && getClusterState().liveNodesContain(replica.getNodeName())) {\n          return replica;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","sourceOld":"  public ZkNodeProps getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        final ZkNodeProps nodeProps = clusterState.getLeader(collection, shard);     \n        if (nodeProps != null && getClusterState().liveNodesContain((String) nodeProps.get(ZkStateReader.NODE_NAME_PROP))) {\n          return nodeProps;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","sourceNew":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        Replica replica = clusterState.getLeader(collection, shard);\n        if (replica != null && getClusterState().liveNodesContain(replica.getNodeName())) {\n          return replica;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","sourceOld":"  public ZkNodeProps getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        final ZkNodeProps nodeProps = clusterState.getLeader(collection, shard);\n        if (nodeProps != null) {\n          return nodeProps;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56a558aa5aadd60ae850d1ab090098bc63bdfaf9","date":1355245333,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","sourceNew":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        Replica replica = clusterState.getLeader(collection, shard);\n        if (replica != null && getClusterState().liveNodesContain(replica.getNodeName())) {\n          return replica;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","sourceOld":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        Replica replica = clusterState.getLeader(collection, shard);\n        if (replica != null && getClusterState().liveNodesContain(replica.getNodeName())) {\n          return replica;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        Replica replica = clusterState.getLeader(collection, shard);\n        if (replica != null && getClusterState().liveNodesContain(replica.getNodeName())) {\n          return replica;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"89f828d954597b98a28942874636f35c719b8a5d":["82f063229e39b59c960866c1bc49285b95676491"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a6378064655e76cd7b908b1cab4ce425b384b508","89f828d954597b98a28942874636f35c719b8a5d"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","3f767f8c99eaedb984df754fe61f21c5de260f94"],"4fd9ffefcfab6cd0e3e0fb85dbf34c4cff0b8b3c":["a6378064655e76cd7b908b1cab4ce425b384b508"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["c824b5854f7ad30cd53f0634fc7cb533df74590b"],"c824b5854f7ad30cd53f0634fc7cb533df74590b":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a6378064655e76cd7b908b1cab4ce425b384b508":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","3f767f8c99eaedb984df754fe61f21c5de260f94"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"82f063229e39b59c960866c1bc49285b95676491":["4fd9ffefcfab6cd0e3e0fb85dbf34c4cff0b8b3c"],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["89f828d954597b98a28942874636f35c719b8a5d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56a558aa5aadd60ae850d1ab090098bc63bdfaf9"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"89f828d954597b98a28942874636f35c719b8a5d":["407687e67faf6e1f02a211ca078d8e3eed631027","56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"4fd9ffefcfab6cd0e3e0fb85dbf34c4cff0b8b3c":["82f063229e39b59c960866c1bc49285b95676491"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","a6378064655e76cd7b908b1cab4ce425b384b508","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c824b5854f7ad30cd53f0634fc7cb533df74590b":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a6378064655e76cd7b908b1cab4ce425b384b508":["407687e67faf6e1f02a211ca078d8e3eed631027","4fd9ffefcfab6cd0e3e0fb85dbf34c4cff0b8b3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab","c824b5854f7ad30cd53f0634fc7cb533df74590b","0d22ac6a4146774c1bc8400160fc0b6150294e92","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"82f063229e39b59c960866c1bc49285b95676491":["89f828d954597b98a28942874636f35c719b8a5d"],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab","0d22ac6a4146774c1bc8400160fc0b6150294e92","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}