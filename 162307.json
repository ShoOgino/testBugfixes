{"path":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#isFinite(State,BitSet,BitSet).mjava","commits":[{"id":"f89574d69843793efb77e8611441f8aee3aad1e8","date":1300294286,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#isFinite(State,BitSet,BitSet).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks whether there is a loop containing s. (This is sufficient since\n   * there are never transitions to dead states.)\n   */\n  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack\n  private static boolean isFinite(State s, BitSet path, BitSet visited) {\n    path.set(s.number);\n    for (Transition t : s.getTransitions())\n      if (path.get(t.to.number) || (!visited.get(t.to.number) && !isFinite(t.to, path, visited))) return false;\n    path.clear(s.number);\n    visited.set(s.number);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#isFinite(State,BitSet,BitSet).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks whether there is a loop containing s. (This is sufficient since\n   * there are never transitions to dead states.)\n   */\n  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack\n  private static boolean isFinite(State s, BitSet path, BitSet visited) {\n    path.set(s.number);\n    for (Transition t : s.getTransitions())\n      if (path.get(t.to.number) || (!visited.get(t.to.number) && !isFinite(t.to, path, visited))) return false;\n    path.clear(s.number);\n    visited.set(s.number);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#isFinite(State,BitSet,BitSet).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks whether there is a loop containing s. (This is sufficient since\n   * there are never transitions to dead states.)\n   */\n  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack\n  private static boolean isFinite(State s, BitSet path, BitSet visited) {\n    path.set(s.number);\n    for (Transition t : s.getTransitions())\n      if (path.get(t.to.number) || (!visited.get(t.to.number) && !isFinite(t.to, path, visited))) return false;\n    path.clear(s.number);\n    visited.set(s.number);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#isFinite(State,BitSet,BitSet).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#isFinite(State,BitSet,BitSet).mjava","sourceNew":"  /**\n   * Checks whether there is a loop containing s. (This is sufficient since\n   * there are never transitions to dead states.)\n   */\n  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack\n  private static boolean isFinite(State s, BitSet path, BitSet visited) {\n    path.set(s.number);\n    for (Transition t : s.getTransitions())\n      if (path.get(t.to.number) || (!visited.get(t.to.number) && !isFinite(t.to, path, visited))) return false;\n    path.clear(s.number);\n    visited.set(s.number);\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Checks whether there is a loop containing s. (This is sufficient since\n   * there are never transitions to dead states.)\n   */\n  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack\n  private static boolean isFinite(State s, BitSet path, BitSet visited) {\n    path.set(s.number);\n    for (Transition t : s.getTransitions())\n      if (path.get(t.to.number) || (!visited.get(t.to.number) && !isFinite(t.to, path, visited))) return false;\n    path.clear(s.number);\n    visited.set(s.number);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f89574d69843793efb77e8611441f8aee3aad1e8"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f89574d69843793efb77e8611441f8aee3aad1e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f89574d69843793efb77e8611441f8aee3aad1e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f89574d69843793efb77e8611441f8aee3aad1e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","f89574d69843793efb77e8611441f8aee3aad1e8"],"f89574d69843793efb77e8611441f8aee3aad1e8":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}