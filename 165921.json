{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/PointRangeQueryNode#PointRangeQueryNode(PointQueryNode,PointQueryNode,boolean,boolean,PointsConfig).mjava","commits":[{"id":"683242c67a3f6086bae8b1354748fcaa38edfbd5","date":1457575601,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/PointRangeQueryNode#PointRangeQueryNode(PointQueryNode,PointQueryNode,boolean,boolean,PointsConfig).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericRangeQueryNode#NumericRangeQueryNode(NumericQueryNode,NumericQueryNode,boolean,boolean,NumericConfig).mjava","sourceNew":"  /**\n   * Constructs a {@link PointRangeQueryNode} object using the given\n   * {@link PointQueryNode} as its bounds and {@link PointsConfig}.\n   * \n   * @param lower the lower bound\n   * @param upper the upper bound\n   * @param lowerInclusive <code>true</code> if the lower bound is inclusive, otherwise, <code>false</code>\n   * @param upperInclusive <code>true</code> if the upper bound is inclusive, otherwise, <code>false</code>\n   * @param numericConfig the {@link PointsConfig} that represents associated with the upper and lower bounds\n   * \n   * @see #setBounds(PointQueryNode, PointQueryNode, boolean, boolean, PointsConfig)\n   */\n  public PointRangeQueryNode(PointQueryNode lower, PointQueryNode upper,\n      boolean lowerInclusive, boolean upperInclusive, PointsConfig numericConfig) throws QueryNodeException {\n    setBounds(lower, upper, lowerInclusive, upperInclusive, numericConfig);\n  }\n\n","sourceOld":"  /**\n   * Constructs a {@link NumericRangeQueryNode} object using the given\n   * {@link NumericQueryNode} as its bounds and {@link NumericConfig}.\n   * \n   * @param lower the lower bound\n   * @param upper the upper bound\n   * @param lowerInclusive <code>true</code> if the lower bound is inclusive, otherwise, <code>false</code>\n   * @param upperInclusive <code>true</code> if the upper bound is inclusive, otherwise, <code>false</code>\n   * @param numericConfig the {@link NumericConfig} that represents associated with the upper and lower bounds\n   * \n   * @see #setBounds(NumericQueryNode, NumericQueryNode, boolean, boolean, NumericConfig)\n   */\n  public NumericRangeQueryNode(NumericQueryNode lower, NumericQueryNode upper,\n      boolean lowerInclusive, boolean upperInclusive, NumericConfig numericConfig) throws QueryNodeException {\n    setBounds(lower, upper, lowerInclusive, upperInclusive, numericConfig);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["683242c67a3f6086bae8b1354748fcaa38edfbd5"]},"commit2Childs":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["683242c67a3f6086bae8b1354748fcaa38edfbd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}