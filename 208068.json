{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder#getBuilder(QueryNode).mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder#getBuilder(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/builders/QueryTreeBuilder#getBuilder(QueryNode).mjava","sourceNew":"  private QueryBuilder getBuilder(QueryNode node) {\n    QueryBuilder builder = null;\n\n    if (this.fieldNameBuilders != null && node instanceof FieldableNode) {\n      CharSequence field = ((FieldableNode) node).getField();\n\n      if (field != null) {\n        field = field.toString();\n      }\n\n      builder = this.fieldNameBuilders.get(field);\n\n    }\n\n    if (builder == null && this.queryNodeBuilders != null) {\n\n      Class<?> clazz = node.getClass();\n\n      do {\n        builder = getQueryBuilder(clazz);\n\n        if (builder == null) {\n          Class<?>[] classes = node.getClass().getInterfaces();\n\n          for (Class<?> actualClass : classes) {\n            builder = getQueryBuilder(actualClass);\n\n            if (builder != null) {\n              break;\n            }\n\n          }\n\n        }\n\n      } while (builder == null && (clazz = clazz.getSuperclass()) != null);\n\n    }\n\n    return builder;\n\n  }\n\n","sourceOld":"  private QueryBuilder getBuilder(QueryNode node) {\n    QueryBuilder builder = null;\n\n    if (this.fieldNameBuilders != null && node instanceof FieldableNode) {\n      CharSequence field = ((FieldableNode) node).getField();\n\n      if (field != null) {\n        field = field.toString();\n      }\n\n      builder = this.fieldNameBuilders.get(field);\n\n    }\n\n    if (builder == null && this.queryNodeBuilders != null) {\n\n      Class<?> clazz = node.getClass();\n\n      do {\n        builder = getQueryBuilder(clazz);\n\n        if (builder == null) {\n          Class<?>[] classes = node.getClass().getInterfaces();\n\n          for (Class<?> actualClass : classes) {\n            builder = getQueryBuilder(actualClass);\n\n            if (builder != null) {\n              break;\n            }\n\n          }\n\n        }\n\n      } while (builder == null && (clazz = clazz.getSuperclass()) != null);\n\n    }\n\n    return builder;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder#getBuilder(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder#getBuilder(QueryNode).mjava","sourceNew":"  private QueryBuilder getBuilder(QueryNode node) {\n    QueryBuilder builder = null;\n\n    if (this.fieldNameBuilders != null && node instanceof FieldableNode) {\n      CharSequence field = ((FieldableNode) node).getField();\n\n      if (field != null) {\n        field = field.toString();\n      }\n\n      builder = this.fieldNameBuilders.get(field);\n\n    }\n\n    if (builder == null && this.queryNodeBuilders != null) {\n\n      Class<?> clazz = node.getClass();\n\n      do {\n        builder = getQueryBuilder(clazz);\n\n        if (builder == null) {\n          Class<?>[] classes = node.getClass().getInterfaces();\n\n          for (Class<?> actualClass : classes) {\n            builder = getQueryBuilder(actualClass);\n\n            if (builder != null) {\n              break;\n            }\n\n          }\n\n        }\n\n      } while (builder == null && (clazz = clazz.getSuperclass()) != null);\n\n    }\n\n    return builder;\n\n  }\n\n","sourceOld":"  private QueryBuilder getBuilder(QueryNode node) {\n    QueryBuilder builder = null;\n\n    if (this.fieldNameBuilders != null && node instanceof FieldableNode) {\n      CharSequence field = ((FieldableNode) node).getField();\n\n      if (field != null) {\n        field = field.toString();\n      }\n\n      builder = this.fieldNameBuilders.get(field);\n\n    }\n\n    if (builder == null && this.queryNodeBuilders != null) {\n\n      Class<?> clazz = node.getClass();\n\n      do {\n        builder = getQueryBuilder(clazz);\n\n        if (builder == null) {\n          Class<?>[] classes = node.getClass().getInterfaces();\n\n          for (Class<?> actualClass : classes) {\n            builder = getQueryBuilder(actualClass);\n\n            if (builder != null) {\n              break;\n            }\n\n          }\n\n        }\n\n      } while (builder == null && (clazz = clazz.getSuperclass()) != null);\n\n    }\n\n    return builder;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}