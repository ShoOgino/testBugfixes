{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","sourceNew":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    Payload pay = new Payload((\"pos: \" + 0).getBytes());\n    Payload pay2 = new Payload((\"pos: \" + 1).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 3).getBytes());\n    Payload pay4 = new Payload((\"pos: \" + 4).getBytes());\n    payloads.add(pay.getData());\n    payloads.add(pay2.getData());\n    payloads.add(pay3.getData());\n    payloads.add(pay4.getData());\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","sourceOld":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    Payload pay = new Payload((\"pos: \" + 0).getBytes());\n    Payload pay2 = new Payload((\"pos: \" + 1).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 3).getBytes());\n    Payload pay4 = new Payload((\"pos: \" + 4).getBytes());\n    payloads.add(pay.getData());\n    payloads.add(pay2.getData());\n    payloads.add(pay3.getData());\n    payloads.add(pay4.getData());\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","sourceNew":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes());\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes());\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes());\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes());\n    payloads.add(pay.bytes);\n    payloads.add(pay2.bytes);\n    payloads.add(pay3.bytes);\n    payloads.add(pay4.bytes);\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","sourceOld":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    Payload pay = new Payload((\"pos: \" + 0).getBytes());\n    Payload pay2 = new Payload((\"pos: \" + 1).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 3).getBytes());\n    Payload pay4 = new Payload((\"pos: \" + 4).getBytes());\n    payloads.add(pay.getData());\n    payloads.add(pay2.getData());\n    payloads.add(pay3.getData());\n    payloads.add(pay4.getData());\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d673420224c5154fd8d6f55d8230c36ac23783fd","date":1341692649,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","sourceNew":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes(\"UTF-8\"));\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes(\"UTF-8\"));\n    payloads.add(pay.bytes);\n    payloads.add(pay2.bytes);\n    payloads.add(pay3.bytes);\n    payloads.add(pay4.bytes);\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","sourceOld":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes());\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes());\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes());\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes());\n    payloads.add(pay.bytes);\n    payloads.add(pay2.bytes);\n    payloads.add(pay3.bytes);\n    payloads.add(pay4.bytes);\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","sourceNew":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes(\"UTF-8\"));\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes(\"UTF-8\"));\n    payloads.add(pay.bytes);\n    payloads.add(pay2.bytes);\n    payloads.add(pay3.bytes);\n    payloads.add(pay4.bytes);\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","sourceOld":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes());\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes());\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes());\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes());\n    payloads.add(pay.bytes);\n    payloads.add(pay2.bytes);\n    payloads.add(pay3.bytes);\n    payloads.add(pay4.bytes);\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","sourceNew":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes(\"UTF-8\"));\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes(\"UTF-8\"));\n    payloads.add(pay.bytes);\n    payloads.add(pay2.bytes);\n    payloads.add(pay3.bytes);\n    payloads.add(pay4.bytes);\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","sourceOld":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes());\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes());\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes());\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes());\n    payloads.add(pay.bytes);\n    payloads.add(pay2.bytes);\n    payloads.add(pay3.bytes);\n    payloads.add(pay4.bytes);\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","sourceNew":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes(\"UTF-8\"));\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes(\"UTF-8\"));\n    payloads.add(pay.bytes);\n    payloads.add(pay2.bytes);\n    payloads.add(pay3.bytes);\n    payloads.add(pay4.bytes);\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","sourceOld":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes());\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes());\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes());\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes());\n    payloads.add(pay.bytes);\n    payloads.add(pay2.bytes);\n    payloads.add(pay3.bytes);\n    payloads.add(pay4.bytes);\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","sourceNew":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes(\"UTF-8\"));\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes(\"UTF-8\"));\n    payloads.add(pay.bytes);\n    payloads.add(pay2.bytes);\n    payloads.add(pay3.bytes);\n    payloads.add(pay4.bytes);\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","sourceOld":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes(\"UTF-8\"));\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes(\"UTF-8\"));\n    payloads.add(pay.bytes);\n    payloads.add(pay2.bytes);\n    payloads.add(pay3.bytes);\n    payloads.add(pay4.bytes);\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","sourceNew":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes(StandardCharsets.UTF_8));\n    payloads.add(pay.bytes);\n    payloads.add(pay2.bytes);\n    payloads.add(pay3.bytes);\n    payloads.add(pay4.bytes);\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","sourceOld":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes(\"UTF-8\"));\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes(\"UTF-8\"));\n    payloads.add(pay.bytes);\n    payloads.add(pay2.bytes);\n    payloads.add(pay3.bytes);\n    payloads.add(pay4.bytes);\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","sourceNew":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes(StandardCharsets.UTF_8));\n    payloads.add(pay.bytes);\n    payloads.add(pay2.bytes);\n    payloads.add(pay3.bytes);\n    payloads.add(pay4.bytes);\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","sourceOld":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes(\"UTF-8\"));\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes(\"UTF-8\"));\n    payloads.add(pay.bytes);\n    payloads.add(pay2.bytes);\n    payloads.add(pay3.bytes);\n    payloads.add(pay4.bytes);\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadBasics#testComplexSpanChecks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","sourceNew":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes(StandardCharsets.UTF_8));\n    payloads.add(pay.bytes);\n    payloads.add(pay2.bytes);\n    payloads.add(pay3.bytes);\n    payloads.add(pay4.bytes);\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","sourceOld":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes(StandardCharsets.UTF_8));\n    payloads.add(pay.bytes);\n    payloads.add(pay2.bytes);\n    payloads.add(pay3.bytes);\n    payloads.add(pay4.bytes);\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d673420224c5154fd8d6f55d8230c36ac23783fd":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7d89d7e4e5101347833eea558851bf4209218619"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2acf500f78aa12b92e371fd89c719291986b6b90"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["7d89d7e4e5101347833eea558851bf4209218619"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["76fa9933adb0556e752e8af9734c4d0ae14622ff","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2acf500f78aa12b92e371fd89c719291986b6b90":["76fa9933adb0556e752e8af9734c4d0ae14622ff","d673420224c5154fd8d6f55d8230c36ac23783fd"],"7d89d7e4e5101347833eea558851bf4209218619":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"46d8ada1fff8d18cb197c38c7983225162599948":["76fa9933adb0556e752e8af9734c4d0ae14622ff","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"d673420224c5154fd8d6f55d8230c36ac23783fd":["2acf500f78aa12b92e371fd89c719291986b6b90"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["d673420224c5154fd8d6f55d8230c36ac23783fd","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"2acf500f78aa12b92e371fd89c719291986b6b90":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","fe33227f6805edab2036cbb80645cc4e2d1fa424","46d8ada1fff8d18cb197c38c7983225162599948"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}