{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#oldToNew(AtomicReader).mjava","commits":[{"id":"cb767289784b682dea51f9e6d7222add811edb77","date":1362902138,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#oldToNew(AtomicReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #compute(int[], List)} to compute the old-to-new permutation\n   * given an array of documents and their corresponding values.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be dropped when the index is actually sorted.\n   */\n  public abstract int[] oldToNew(AtomicReader reader) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec","date":1363331426,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#sort(AtomicReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#oldToNew(AtomicReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be dropped when the index is actually sorted.\n   */\n  public abstract DocMap sort(AtomicReader reader) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #compute(int[], List)} to compute the old-to-new permutation\n   * given an array of documents and their corresponding values.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be dropped when the index is actually sorted.\n   */\n  public abstract int[] oldToNew(AtomicReader reader) throws IOException;\n\n","bugFix":null,"bugIntro":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb767289784b682dea51f9e6d7222add811edb77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["cb767289784b682dea51f9e6d7222add811edb77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb767289784b682dea51f9e6d7222add811edb77"],"cb767289784b682dea51f9e6d7222add811edb77":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}