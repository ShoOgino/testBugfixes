{"path":"src/java/org/apache/solr/util/OpenBitSet#flip(long,long).mjava","commits":[{"id":"21400778a0bf704d187a4848279049f5d90276c8","date":1149955512,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/OpenBitSet#flip(long,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int oldlen = wlen;\n    ensureCapacity(endIndex);\n    int startWord = (int)(startIndex>>6);\n    int endWord   = (int)(endIndex>>6);\n\n    /*** Grrr, java shifting wraps around so -1L>>64 == -1\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = (endIndex&0x3c)==0 ? 0 : -1L >>> (64-endIndex);\n\n    if (this.wlen <= endWord) {\n      this.wlen = endWord;\n      if (endmask!=0) this.wlen++;\n    }\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    int middle = Math.min(oldlen,endWord);\n    for (int i=startWord+1; i<middle; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    if (endWord>middle) {\n      Arrays.fill(bits,middle,endWord,-1L);\n    }\n\n    if (endmask!=0) {\n      bits[endWord] ^= endmask;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"061a055b54e8b04fbdaf2aa9458fb7268ca02ada","date":1155523163,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/OpenBitSet#flip(long,long).mjava","pathOld":"src/java/org/apache/solr/util/OpenBitSet#flip(long,long).mjava","sourceNew":"  /** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int oldlen = wlen;\n    ensureCapacity(endIndex);\n    int startWord = (int)(startIndex>>6);\n    int endWord   = (int)(endIndex>>6);\n\n    /*** Grrr, java shifting wraps around so -1L>>64 == -1\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = (endIndex&0x3f)==0 ? 0 : -1L >>> (64-endIndex);\n\n    if (this.wlen <= endWord) {\n      this.wlen = endWord;\n      if (endmask!=0) this.wlen++;\n    }\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    int middle = Math.min(oldlen,endWord);\n    for (int i=startWord+1; i<middle; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    if (endWord>middle) {\n      Arrays.fill(bits,middle,endWord,-1L);\n    }\n\n    if (endmask!=0) {\n      bits[endWord] ^= endmask;\n    }\n  }\n\n","sourceOld":"  /** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int oldlen = wlen;\n    ensureCapacity(endIndex);\n    int startWord = (int)(startIndex>>6);\n    int endWord   = (int)(endIndex>>6);\n\n    /*** Grrr, java shifting wraps around so -1L>>64 == -1\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = (endIndex&0x3c)==0 ? 0 : -1L >>> (64-endIndex);\n\n    if (this.wlen <= endWord) {\n      this.wlen = endWord;\n      if (endmask!=0) this.wlen++;\n    }\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    int middle = Math.min(oldlen,endWord);\n    for (int i=startWord+1; i<middle; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    if (endWord>middle) {\n      Arrays.fill(bits,middle,endWord,-1L);\n    }\n\n    if (endmask!=0) {\n      bits[endWord] ^= endmask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5457c786a7fcff3391851b0aeecba1f7ddff6c3b","date":1182535200,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/OpenBitSet#flip(long,long).mjava","pathOld":"src/java/org/apache/solr/util/OpenBitSet#flip(long,long).mjava","sourceNew":"  /** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int oldlen = wlen;\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = expandingWordNum(endIndex-1);\n\n    /*** Grrr, java shifting wraps around so -1L>>>64 == -1\n     * for that reason, make sure not to use endmask if the bits to flip will\n     * be zero in the last word (redefine endWord to be the last changed...)\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-endIndex is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    int middle = Math.min(oldlen, endWord);\n    for (int i=startWord+1; i<middle; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    if (endWord>middle) {\n      Arrays.fill(bits,middle,endWord,-1L);\n    }\n\n    bits[endWord] ^= endmask;\n  }\n\n","sourceOld":"  /** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int oldlen = wlen;\n    ensureCapacity(endIndex);\n    int startWord = (int)(startIndex>>6);\n    int endWord   = (int)(endIndex>>6);\n\n    /*** Grrr, java shifting wraps around so -1L>>64 == -1\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = (endIndex&0x3f)==0 ? 0 : -1L >>> (64-endIndex);\n\n    if (this.wlen <= endWord) {\n      this.wlen = endWord;\n      if (endmask!=0) this.wlen++;\n    }\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    int middle = Math.min(oldlen,endWord);\n    for (int i=startWord+1; i<middle; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    if (endWord>middle) {\n      Arrays.fill(bits,middle,endWord,-1L);\n    }\n\n    if (endmask!=0) {\n      bits[endWord] ^= endmask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2b8911f378d79494dd9d132f71af61b8eb59e4d","date":1182544048,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/OpenBitSet#flip(long,long).mjava","pathOld":"src/java/org/apache/solr/util/OpenBitSet#flip(long,long).mjava","sourceNew":"  /** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n    int oldlen = wlen;\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = expandingWordNum(endIndex-1);\n\n    /*** Grrr, java shifting wraps around so -1L>>>64 == -1\n     * for that reason, make sure not to use endmask if the bits to flip will\n     * be zero in the last word (redefine endWord to be the last changed...)\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    for (int i=startWord+1; i<endWord; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    bits[endWord] ^= endmask;\n  }\n\n","sourceOld":"  /** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int oldlen = wlen;\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = expandingWordNum(endIndex-1);\n\n    /*** Grrr, java shifting wraps around so -1L>>>64 == -1\n     * for that reason, make sure not to use endmask if the bits to flip will\n     * be zero in the last word (redefine endWord to be the last changed...)\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-endIndex is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    int middle = Math.min(oldlen, endWord);\n    for (int i=startWord+1; i<middle; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    if (endWord>middle) {\n      Arrays.fill(bits,middle,endWord,-1L);\n    }\n\n    bits[endWord] ^= endmask;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5108097d840f85a1779a41d0e412efb8130546e6","date":1228575321,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/util/OpenBitSet#flip(long,long).mjava","sourceNew":null,"sourceOld":"  /** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n    int oldlen = wlen;\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = expandingWordNum(endIndex-1);\n\n    /*** Grrr, java shifting wraps around so -1L>>>64 == -1\n     * for that reason, make sure not to use endmask if the bits to flip will\n     * be zero in the last word (redefine endWord to be the last changed...)\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    for (int i=startWord+1; i<endWord; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    bits[endWord] ^= endmask;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21400778a0bf704d187a4848279049f5d90276c8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"061a055b54e8b04fbdaf2aa9458fb7268ca02ada":["21400778a0bf704d187a4848279049f5d90276c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5108097d840f85a1779a41d0e412efb8130546e6":["f2b8911f378d79494dd9d132f71af61b8eb59e4d"],"f2b8911f378d79494dd9d132f71af61b8eb59e4d":["5457c786a7fcff3391851b0aeecba1f7ddff6c3b"],"5457c786a7fcff3391851b0aeecba1f7ddff6c3b":["061a055b54e8b04fbdaf2aa9458fb7268ca02ada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"21400778a0bf704d187a4848279049f5d90276c8":["061a055b54e8b04fbdaf2aa9458fb7268ca02ada"],"061a055b54e8b04fbdaf2aa9458fb7268ca02ada":["5457c786a7fcff3391851b0aeecba1f7ddff6c3b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["21400778a0bf704d187a4848279049f5d90276c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5108097d840f85a1779a41d0e412efb8130546e6":[],"f2b8911f378d79494dd9d132f71af61b8eb59e4d":["5108097d840f85a1779a41d0e412efb8130546e6"],"5457c786a7fcff3391851b0aeecba1f7ddff6c3b":["f2b8911f378d79494dd9d132f71af61b8eb59e4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5108097d840f85a1779a41d0e412efb8130546e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}