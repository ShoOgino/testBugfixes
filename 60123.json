{"path":"src/java/org/apache/lucene/search/function/OrdFieldSource#getValues(IndexReader).mjava","commits":[{"id":"3f74570911bfdb9f7b01948745dcd67c69676c0e","date":1181060975,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/function/OrdFieldSource#getValues(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */\n  public DocValues getValues(IndexReader reader) throws IOException {\n    final int[] arr = FieldCache.DEFAULT.getStringIndex(reader, field).order;\n    return new DocValues(arr.length) {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */\n      public String strVal(int doc) {\n        // the string value of the ordinal, not the string itself\n        return Integer.toString(arr[doc]);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */\n      Object getInnerArray() {\n        return arr;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e385df0c8e079b3d13c7ccb0b221b5145d48cfd2","date":1197497193,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/function/OrdFieldSource#getValues(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/function/OrdFieldSource#getValues(IndexReader).mjava","sourceNew":"  /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */\n  public DocValues getValues(IndexReader reader) throws IOException {\n    final int[] arr = FieldCache.DEFAULT.getStringIndex(reader, field).order;\n    return new DocValues() {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */\n      public String strVal(int doc) {\n        // the string value of the ordinal, not the string itself\n        return Integer.toString(arr[doc]);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */\n      Object getInnerArray() {\n        return arr;\n      }\n    };\n  }\n\n","sourceOld":"  /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */\n  public DocValues getValues(IndexReader reader) throws IOException {\n    final int[] arr = FieldCache.DEFAULT.getStringIndex(reader, field).order;\n    return new DocValues(arr.length) {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */\n      public String strVal(int doc) {\n        // the string value of the ordinal, not the string itself\n        return Integer.toString(arr[doc]);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */\n      Object getInnerArray() {\n        return arr;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/function/OrdFieldSource#getValues(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/function/OrdFieldSource#getValues(IndexReader).mjava","sourceNew":"  /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */\n  @Override\n  public DocValues getValues(IndexReader reader) throws IOException {\n    final int[] arr = FieldCache.DEFAULT.getStringIndex(reader, field).order;\n    return new DocValues() {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */\n      @Override\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */\n      @Override\n      public String strVal(int doc) {\n        // the string value of the ordinal, not the string itself\n        return Integer.toString(arr[doc]);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */\n      @Override\n      Object getInnerArray() {\n        return arr;\n      }\n    };\n  }\n\n","sourceOld":"  /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */\n  public DocValues getValues(IndexReader reader) throws IOException {\n    final int[] arr = FieldCache.DEFAULT.getStringIndex(reader, field).order;\n    return new DocValues() {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */\n      public String strVal(int doc) {\n        // the string value of the ordinal, not the string itself\n        return Integer.toString(arr[doc]);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */\n      Object getInnerArray() {\n        return arr;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/function/OrdFieldSource#getValues(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/function/OrdFieldSource#getValues(IndexReader).mjava","sourceNew":"  /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */\n  @Override\n  public DocValues getValues(IndexReader reader) throws IOException {\n    final int[] arr = FieldCache.DEFAULT.getStringIndex(reader, field).order;\n    return new DocValues() {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */\n      @Override\n      public float floatVal(int doc) {\n        return arr[doc];\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */\n      @Override\n      public String strVal(int doc) {\n        // the string value of the ordinal, not the string itself\n        return Integer.toString(arr[doc]);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */\n      @Override\n      Object getInnerArray() {\n        return arr;\n      }\n    };\n  }\n\n","sourceOld":"  /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */\n  @Override\n  public DocValues getValues(IndexReader reader) throws IOException {\n    final int[] arr = FieldCache.DEFAULT.getStringIndex(reader, field).order;\n    return new DocValues() {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */\n      @Override\n      public float floatVal(int doc) {\n        return (float)arr[doc];\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */\n      @Override\n      public String strVal(int doc) {\n        // the string value of the ordinal, not the string itself\n        return Integer.toString(arr[doc]);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */\n      @Override\n      Object getInnerArray() {\n        return arr;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/function/OrdFieldSource#getValues(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/function/OrdFieldSource#getValues(IndexReader).mjava","sourceNew":"  /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */\n  @Override\n  public DocValues getValues(IndexReader reader) throws IOException {\n    final int[] arr = FieldCache.DEFAULT.getStringIndex(reader, field).order;\n    return new DocValues() {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */\n      @Override\n      public float floatVal(int doc) {\n        return arr[doc];\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */\n      @Override\n      public String strVal(int doc) {\n        // the string value of the ordinal, not the string itself\n        return Integer.toString(arr[doc]);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */\n      @Override\n      Object getInnerArray() {\n        return arr;\n      }\n    };\n  }\n\n","sourceOld":"  /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */\n  @Override\n  public DocValues getValues(IndexReader reader) throws IOException {\n    final int[] arr = FieldCache.DEFAULT.getStringIndex(reader, field).order;\n    return new DocValues() {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */\n      @Override\n      public float floatVal(int doc) {\n        return arr[doc];\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */\n      @Override\n      public String strVal(int doc) {\n        // the string value of the ordinal, not the string itself\n        return Integer.toString(arr[doc]);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */\n      @Override\n      Object getInnerArray() {\n        return arr;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a9e385641d717e641408d8fbbc62be8fc766357":["e385df0c8e079b3d13c7ccb0b221b5145d48cfd2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e385df0c8e079b3d13c7ccb0b221b5145d48cfd2":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"8a9e385641d717e641408d8fbbc62be8fc766357":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"e385df0c8e079b3d13c7ccb0b221b5145d48cfd2":["8a9e385641d717e641408d8fbbc62be8fc766357"],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["e385df0c8e079b3d13c7ccb0b221b5145d48cfd2"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}