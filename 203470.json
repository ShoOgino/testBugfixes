{"path":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","commits":[{"id":"c16787e95e3c32c394cf5195e223e39ff5cbda3a","date":1092422102,"type":1,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testDefaultFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"));   \n    Hits hits = searcher.search(query);\n    assertEquals(3, hits.length());\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"));  \t\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"));   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"));   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"));   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"));   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testDefaultFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"));   \n    Hits hits = searcher.search(query);\n    assertEquals(3, hits.length());\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"));  \t\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"));   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"));   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"));   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"));   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2b17f10a0d622e1a8082a94957764dad150530","date":1097079592,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    Hits hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query);\n    assertEquals(2, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query);\n    assertEquals(2, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"));   \n    Hits hits = searcher.search(query);\n    assertEquals(3, hits.length());\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"));  \t\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"));   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"));   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"));   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"));   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    Hits hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query);\n    assertEquals(2, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query);\n    assertEquals(2, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    Hits hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query);\n    assertEquals(2, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query);\n    assertEquals(2, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    Hits hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query);\n    assertEquals(2, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    assertEquals(hits.doc(2).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query);\n    assertEquals(2, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaa\"));\n    assertEquals(hits.doc(1).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3732bab262f4cd83c8ea793dcd66b8b6da3321","date":1257538523,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test BooleanQuery.maxClauseCount\n    int savedClauseCount = BooleanQuery.getMaxClauseCount();\n    try {\n      BooleanQuery.setMaxClauseCount(2);\n      // This query would normally return 3 documents, because 3 terms match:\n      query = new FuzzyQuery(new Term(\"field\", \"aaaab\"), FuzzyQuery.defaultMinSimilarity, 3);   \n      hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(\"only 2 documents should match\", 2, hits.length);\n      Set<String> possibleTerms = new HashSet<String>(Arrays.asList(\"aaaaa\",\"aaaab\"));\n      for (int i = 0; i < hits.length; i++) {\n        final String term = searcher.doc(hits[i].doc).get(\"field\");\n        assertTrue(\"term '\" + term + \"' should not appear in results\", possibleTerms.contains(term));\n      }\n    } finally {\n      BooleanQuery.setMaxClauseCount(savedClauseCount);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["cf38b33c7ff45f89ab6ce97e6c0ba8752948bf5f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf38b33c7ff45f89ab6ce97e6c0ba8752948bf5f","date":1260539714,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test BooleanQuery.maxClauseCount\n    int savedClauseCount = BooleanQuery.getMaxClauseCount();\n    try {\n      BooleanQuery.setMaxClauseCount(2);\n      // This query would normally return 3 documents, because 3 terms match (see above):\n      query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n      hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(\"only 2 documents should match\", 2, hits.length);\n      order = Arrays.asList(\"bbbbb\",\"abbbb\");\n      for (int i = 0; i < hits.length; i++) {\n        final String term = searcher.doc(hits[i].doc).get(\"field\");\n        //System.out.println(hits[i].score);\n        assertEquals(order.get(i), term);\n      }\n    } finally {\n      BooleanQuery.setMaxClauseCount(savedClauseCount);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test BooleanQuery.maxClauseCount\n    int savedClauseCount = BooleanQuery.getMaxClauseCount();\n    try {\n      BooleanQuery.setMaxClauseCount(2);\n      // This query would normally return 3 documents, because 3 terms match:\n      query = new FuzzyQuery(new Term(\"field\", \"aaaab\"), FuzzyQuery.defaultMinSimilarity, 3);   \n      hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(\"only 2 documents should match\", 2, hits.length);\n      Set<String> possibleTerms = new HashSet<String>(Arrays.asList(\"aaaaa\",\"aaaab\"));\n      for (int i = 0; i < hits.length; i++) {\n        final String term = searcher.doc(hits[i].doc).get(\"field\");\n        assertTrue(\"term '\" + term + \"' should not appear in results\", possibleTerms.contains(term));\n      }\n    } finally {\n      BooleanQuery.setMaxClauseCount(savedClauseCount);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":["fe3732bab262f4cd83c8ea793dcd66b8b6da3321"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test BooleanQuery.maxClauseCount\n    int savedClauseCount = BooleanQuery.getMaxClauseCount();\n    try {\n      BooleanQuery.setMaxClauseCount(2);\n      // This query would normally return 3 documents, because 3 terms match (see above):\n      query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n      hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(\"only 2 documents should match\", 2, hits.length);\n      order = Arrays.asList(\"bbbbb\",\"abbbb\");\n      for (int i = 0; i < hits.length; i++) {\n        final String term = searcher.doc(hits[i].doc).get(\"field\");\n        //System.out.println(hits[i].score);\n        assertEquals(order.get(i), term);\n      }\n    } finally {\n      BooleanQuery.setMaxClauseCount(savedClauseCount);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test BooleanQuery.maxClauseCount\n    int savedClauseCount = BooleanQuery.getMaxClauseCount();\n    try {\n      BooleanQuery.setMaxClauseCount(2);\n      // This query would normally return 3 documents, because 3 terms match (see above):\n      query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n      hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(\"only 2 documents should match\", 2, hits.length);\n      order = Arrays.asList(\"bbbbb\",\"abbbb\");\n      for (int i = 0; i < hits.length; i++) {\n        final String term = searcher.doc(hits[i].doc).get(\"field\");\n        //System.out.println(hits[i].score);\n        assertEquals(order.get(i), term);\n      }\n    } finally {\n      BooleanQuery.setMaxClauseCount(savedClauseCount);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test BooleanQuery.maxClauseCount\n    int savedClauseCount = BooleanQuery.getMaxClauseCount();\n    try {\n      BooleanQuery.setMaxClauseCount(2);\n      // This query would normally return 3 documents, because 3 terms match (see above):\n      query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n      hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(\"only 2 documents should match\", 2, hits.length);\n      order = Arrays.asList(\"bbbbb\",\"abbbb\");\n      for (int i = 0; i < hits.length; i++) {\n        final String term = searcher.doc(hits[i].doc).get(\"field\");\n        //System.out.println(hits[i].score);\n        assertEquals(order.get(i), term);\n      }\n    } finally {\n      BooleanQuery.setMaxClauseCount(savedClauseCount);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test BooleanQuery.maxClauseCount\n    int savedClauseCount = BooleanQuery.getMaxClauseCount();\n    try {\n      BooleanQuery.setMaxClauseCount(2);\n      // This query would normally return 3 documents, because 3 terms match (see above):\n      query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n      hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(\"only 2 documents should match\", 2, hits.length);\n      order = Arrays.asList(\"bbbbb\",\"abbbb\");\n      for (int i = 0; i < hits.length; i++) {\n        final String term = searcher.doc(hits[i].doc).get(\"field\");\n        //System.out.println(hits[i].score);\n        assertEquals(order.get(i), term);\n      }\n    } finally {\n      BooleanQuery.setMaxClauseCount(savedClauseCount);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33098c76721840ff65df95e81a98a5d4a49a777f","date":1266737266,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test BooleanQuery.maxClauseCount\n    int savedClauseCount = BooleanQuery.getMaxClauseCount();\n    try {\n      BooleanQuery.setMaxClauseCount(2);\n      // This query would normally return 3 documents, because 3 terms match (see above):\n      query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n      hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(\"only 2 documents should match\", 2, hits.length);\n      order = Arrays.asList(\"bbbbb\",\"abbbb\");\n      for (int i = 0; i < hits.length; i++) {\n        final String term = searcher.doc(hits[i].doc).get(\"field\");\n        //System.out.println(hits[i].score);\n        assertEquals(order.get(i), term);\n      }\n    } finally {\n      BooleanQuery.setMaxClauseCount(savedClauseCount);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d2b17f10a0d622e1a8082a94957764dad150530":["c16787e95e3c32c394cf5195e223e39ff5cbda3a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["5af07783dbc171e26a694c4f7d735e30c2769faa","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["33098c76721840ff65df95e81a98a5d4a49a777f"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["6d2b17f10a0d622e1a8082a94957764dad150530"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"33098c76721840ff65df95e81a98a5d4a49a777f":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["cf38b33c7ff45f89ab6ce97e6c0ba8752948bf5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe3732bab262f4cd83c8ea793dcd66b8b6da3321":["0a046c0c310bc77931fc8441bd920053b607dd14"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"c16787e95e3c32c394cf5195e223e39ff5cbda3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf38b33c7ff45f89ab6ce97e6c0ba8752948bf5f":["fe3732bab262f4cd83c8ea793dcd66b8b6da3321"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"6d2b17f10a0d622e1a8082a94957764dad150530":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["33098c76721840ff65df95e81a98a5d4a49a777f"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe3732bab262f4cd83c8ea793dcd66b8b6da3321"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"33098c76721840ff65df95e81a98a5d4a49a777f":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c16787e95e3c32c394cf5195e223e39ff5cbda3a"],"c16787e95e3c32c394cf5195e223e39ff5cbda3a":["6d2b17f10a0d622e1a8082a94957764dad150530"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"fe3732bab262f4cd83c8ea793dcd66b8b6da3321":["cf38b33c7ff45f89ab6ce97e6c0ba8752948bf5f"],"cf38b33c7ff45f89ab6ce97e6c0ba8752948bf5f":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}