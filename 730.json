{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/sinks/TeeSinkTokenFilter#addSinkTokenStream(SinkTokenStream).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/sinks/TeeSinkTokenFilter#addSinkTokenStream(SinkTokenStream).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/sinks/TeeSinkTokenFilter#addSinkTokenStream(SinkTokenStream).mjava","sourceNew":"  /**\n   * Adds a {@link SinkTokenStream} created by another <code>TeeSinkTokenFilter</code>\n   * to this one. The supplied stream will also receive all consumed tokens.\n   * This method can be used to pass tokens from two different tees to one sink.\n   */\n  public void addSinkTokenStream(final SinkTokenStream sink) {\n    // check that sink has correct factory\n    if (!this.getAttributeFactory().equals(sink.getAttributeFactory())) {\n      throw new IllegalArgumentException(\"The supplied sink is not compatible to this tee\");\n    }\n    // add eventually missing attribute impls to the existing sink\n    for (Iterator<AttributeImpl> it = this.cloneAttributes().getAttributeImplsIterator(); it.hasNext(); ) {\n      sink.addAttributeImpl(it.next());\n    }\n    this.sinks.add(new WeakReference<SinkTokenStream>(sink));\n  }\n\n","sourceOld":"  /**\n   * Adds a {@link SinkTokenStream} created by another <code>TeeSinkTokenFilter</code>\n   * to this one. The supplied stream will also receive all consumed tokens.\n   * This method can be used to pass tokens from two different tees to one sink.\n   */\n  public void addSinkTokenStream(final SinkTokenStream sink) {\n    // check that sink has correct factory\n    if (!this.getAttributeFactory().equals(sink.getAttributeFactory())) {\n      throw new IllegalArgumentException(\"The supplied sink is not compatible to this tee\");\n    }\n    // add eventually missing attribute impls to the existing sink\n    for (Iterator<AttributeImpl> it = this.cloneAttributes().getAttributeImplsIterator(); it.hasNext(); ) {\n      sink.addAttributeImpl(it.next());\n    }\n    this.sinks.add(new WeakReference<SinkTokenStream>(sink));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/sinks/TeeSinkTokenFilter#addSinkTokenStream(SinkTokenStream).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/sinks/TeeSinkTokenFilter#addSinkTokenStream(SinkTokenStream).mjava","sourceNew":"  /**\n   * Adds a {@link SinkTokenStream} created by another <code>TeeSinkTokenFilter</code>\n   * to this one. The supplied stream will also receive all consumed tokens.\n   * This method can be used to pass tokens from two different tees to one sink.\n   */\n  public void addSinkTokenStream(final SinkTokenStream sink) {\n    // check that sink has correct factory\n    if (!this.getAttributeFactory().equals(sink.getAttributeFactory())) {\n      throw new IllegalArgumentException(\"The supplied sink is not compatible to this tee\");\n    }\n    // add eventually missing attribute impls to the existing sink\n    for (Iterator<AttributeImpl> it = this.cloneAttributes().getAttributeImplsIterator(); it.hasNext(); ) {\n      sink.addAttributeImpl(it.next());\n    }\n    this.sinks.add(new WeakReference<>(sink));\n  }\n\n","sourceOld":"  /**\n   * Adds a {@link SinkTokenStream} created by another <code>TeeSinkTokenFilter</code>\n   * to this one. The supplied stream will also receive all consumed tokens.\n   * This method can be used to pass tokens from two different tees to one sink.\n   */\n  public void addSinkTokenStream(final SinkTokenStream sink) {\n    // check that sink has correct factory\n    if (!this.getAttributeFactory().equals(sink.getAttributeFactory())) {\n      throw new IllegalArgumentException(\"The supplied sink is not compatible to this tee\");\n    }\n    // add eventually missing attribute impls to the existing sink\n    for (Iterator<AttributeImpl> it = this.cloneAttributes().getAttributeImplsIterator(); it.hasNext(); ) {\n      sink.addAttributeImpl(it.next());\n    }\n    this.sinks.add(new WeakReference<SinkTokenStream>(sink));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eac7b217fb57548b6fc21f0117e74698afde766","date":1452862547,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/sinks/TeeSinkTokenFilter#addSinkTokenStream(SinkTokenStream).mjava","sourceNew":null,"sourceOld":"  /**\n   * Adds a {@link SinkTokenStream} created by another <code>TeeSinkTokenFilter</code>\n   * to this one. The supplied stream will also receive all consumed tokens.\n   * This method can be used to pass tokens from two different tees to one sink.\n   */\n  public void addSinkTokenStream(final SinkTokenStream sink) {\n    // check that sink has correct factory\n    if (!this.getAttributeFactory().equals(sink.getAttributeFactory())) {\n      throw new IllegalArgumentException(\"The supplied sink is not compatible to this tee\");\n    }\n    // add eventually missing attribute impls to the existing sink\n    for (Iterator<AttributeImpl> it = this.cloneAttributes().getAttributeImplsIterator(); it.hasNext(); ) {\n      sink.addAttributeImpl(it.next());\n    }\n    this.sinks.add(new WeakReference<>(sink));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3eac7b217fb57548b6fc21f0117e74698afde766"],"3eac7b217fb57548b6fc21f0117e74698afde766":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3eac7b217fb57548b6fc21f0117e74698afde766"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3eac7b217fb57548b6fc21f0117e74698afde766":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}