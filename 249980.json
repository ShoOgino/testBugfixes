{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache#getCloudSolrClient(String).mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache#getCloudSolrClient(String).mjava","pathOld":"/dev/null","sourceNew":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client = null;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      client = new CloudSolrClient(zkHost);\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache#getCloudSolrClient(String).mjava","pathOld":"/dev/null","sourceNew":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client = null;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      client = new CloudSolrClient(zkHost);\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b28b82b1214a85c0ebf5455e17f96a096eb6c6c","date":1454808351,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache#getCloudSolrClient(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache#getCloudSolrClient(String).mjava","sourceNew":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      client = new CloudSolrClient(zkHost);\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n\n","sourceOld":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client = null;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      client = new CloudSolrClient(zkHost);\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd75f58072bba84066e89d61bd7028de1bd5b632","date":1454871793,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache#getCloudSolrClient(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache#getCloudSolrClient(String).mjava","sourceNew":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      client = new CloudSolrClient(zkHost);\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n\n","sourceOld":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client = null;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      client = new CloudSolrClient(zkHost);\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache#getCloudSolrClient(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache#getCloudSolrClient(String).mjava","sourceNew":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      client = new CloudSolrClient.Builder()\n          .withZkHost(zkHost)\n          .build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n\n","sourceOld":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      client = new CloudSolrClient(zkHost);\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache#getCloudSolrClient(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache#getCloudSolrClient(String).mjava","sourceNew":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      client = new CloudSolrClient.Builder()\n          .withZkHost(zkHost)\n          .build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n\n","sourceOld":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      client = new CloudSolrClient(zkHost);\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache#getCloudSolrClient(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache#getCloudSolrClient(String).mjava","sourceNew":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder()\n          .withZkHost(zkHost);\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n\n","sourceOld":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      client = new CloudSolrClient.Builder()\n          .withZkHost(zkHost)\n          .build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n\n","bugFix":null,"bugIntro":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache#getCloudSolrClient(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache#getCloudSolrClient(String).mjava","sourceNew":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<String>();\n      hosts.add(zkHost);\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder(hosts, Optional.empty());\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n\n","sourceOld":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder()\n          .withZkHost(zkHost);\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n\n","bugFix":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache#getCloudSolrClient(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache#getCloudSolrClient(String).mjava","sourceNew":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<String>();\n      hosts.add(zkHost);\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000);\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n\n","sourceOld":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<String>();\n      hosts.add(zkHost);\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder(hosts, Optional.empty());\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n\n","bugFix":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91814ce09be68efd0626969632e79ae47d8876d4"],"dd75f58072bba84066e89d61bd7028de1bd5b632":["91814ce09be68efd0626969632e79ae47d8876d4","0b28b82b1214a85c0ebf5455e17f96a096eb6c6c"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["0b28b82b1214a85c0ebf5455e17f96a096eb6c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["0b28b82b1214a85c0ebf5455e17f96a096eb6c6c","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"0b28b82b1214a85c0ebf5455e17f96a096eb6c6c":["91814ce09be68efd0626969632e79ae47d8876d4"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"dd75f58072bba84066e89d61bd7028de1bd5b632":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","91814ce09be68efd0626969632e79ae47d8876d4"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"91814ce09be68efd0626969632e79ae47d8876d4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","dd75f58072bba84066e89d61bd7028de1bd5b632","0b28b82b1214a85c0ebf5455e17f96a096eb6c6c"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"0b28b82b1214a85c0ebf5455e17f96a096eb6c6c":["dd75f58072bba84066e89d61bd7028de1bd5b632","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","dd75f58072bba84066e89d61bd7028de1bd5b632","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}