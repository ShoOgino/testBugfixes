{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator#assignComparator().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator#assignComparator().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * What're we doing here messing around with lambdas for the comparator logic?\n   * We want the compare(...) function to run as fast as possible because it will be called many many\n   * times over the lifetime of this object. For that reason we want to limit the number of comparisons\n   * taking place in the compare(...) function. Because this class supports both ascending and\n   * descending comparisons and the logic for each is slightly different, we want to do the \n   *   if(ascending){ compare like this } else { compare like this }\n   * check only once - we can do that in the constructor of this class, create a lambda, and then execute \n   * that lambda in the compare function. A little bit of branch prediction savings right here.\n   */\n  private void assignComparator(){\n    if(ComparatorOrder.DESCENDING == order){\n      // What black magic is this type intersection??\n      // Because this class is serializable we need to make sure the lambda is also serializable.\n      // This can be done by providing this type intersection on the definition of the lambda.\n      // Why not do it in the lambda interface? Functional Interfaces don't allow extends clauses\n      comparator = (ComparatorLambda & Serializable)(leftTuple, rightTuple) -> {\n        Comparable leftComp = (Comparable)leftTuple.get(leftField);\n        Comparable rightComp = (Comparable)rightTuple.get(rightField);\n        return rightComp.compareTo(leftComp);\n      };\n    }\n    else{\n      // See above for black magic reasoning.\n      comparator = (ComparatorLambda & Serializable)(leftTuple, rightTuple) -> {\n        Comparable leftComp = (Comparable)leftTuple.get(leftField);\n        Comparable rightComp = (Comparable)rightTuple.get(rightField);\n        return leftComp.compareTo(rightComp);\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a90bd309349f7cddd43c742429b0adcd888baf3","date":1431612634,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator#assignComparator().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator#assignComparator().mjava","sourceNew":"  /*\n   * What're we doing here messing around with lambdas for the comparator logic?\n   * We want the compare(...) function to run as fast as possible because it will be called many many\n   * times over the lifetime of this object. For that reason we want to limit the number of comparisons\n   * taking place in the compare(...) function. Because this class supports both ascending and\n   * descending comparisons and the logic for each is slightly different, we want to do the \n   *   if(ascending){ compare like this } else { compare like this }\n   * check only once - we can do that in the constructor of this class, create a lambda, and then execute \n   * that lambda in the compare function. A little bit of branch prediction savings right here.\n   */\n  private void assignComparator(){\n    if(ComparatorOrder.DESCENDING == order){\n      comparator = new ComparatorLambda() {\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftField);\n          Comparable rightComp = (Comparable)rightTuple.get(rightField);\n          return rightComp.compareTo(leftComp);\n        }\n      };\n    }\n    else{\n      comparator = new ComparatorLambda() {\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftField);\n          Comparable rightComp = (Comparable)rightTuple.get(rightField);\n          return leftComp.compareTo(rightComp);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /*\n   * What're we doing here messing around with lambdas for the comparator logic?\n   * We want the compare(...) function to run as fast as possible because it will be called many many\n   * times over the lifetime of this object. For that reason we want to limit the number of comparisons\n   * taking place in the compare(...) function. Because this class supports both ascending and\n   * descending comparisons and the logic for each is slightly different, we want to do the \n   *   if(ascending){ compare like this } else { compare like this }\n   * check only once - we can do that in the constructor of this class, create a lambda, and then execute \n   * that lambda in the compare function. A little bit of branch prediction savings right here.\n   */\n  private void assignComparator(){\n    if(ComparatorOrder.DESCENDING == order){\n      // What black magic is this type intersection??\n      // Because this class is serializable we need to make sure the lambda is also serializable.\n      // This can be done by providing this type intersection on the definition of the lambda.\n      // Why not do it in the lambda interface? Functional Interfaces don't allow extends clauses\n      comparator = (ComparatorLambda & Serializable)(leftTuple, rightTuple) -> {\n        Comparable leftComp = (Comparable)leftTuple.get(leftField);\n        Comparable rightComp = (Comparable)rightTuple.get(rightField);\n        return rightComp.compareTo(leftComp);\n      };\n    }\n    else{\n      // See above for black magic reasoning.\n      comparator = (ComparatorLambda & Serializable)(leftTuple, rightTuple) -> {\n        Comparable leftComp = (Comparable)leftTuple.get(leftField);\n        Comparable rightComp = (Comparable)rightTuple.get(rightField);\n        return leftComp.compareTo(rightComp);\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e431b0806b8db369da896b66a74e304a49953c7b","date":1434740037,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/StreamComparator#assignComparator().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator#assignComparator().mjava","sourceNew":"  /*\n   * What're we doing here messing around with lambdas for the comparator logic?\n   * We want the compare(...) function to run as fast as possible because it will be called many many\n   * times over the lifetime of this object. For that reason we want to limit the number of comparisons\n   * taking place in the compare(...) function. Because this class supports both ascending and\n   * descending comparisons and the logic for each is slightly different, we want to do the \n   *   if(ascending){ compare like this } else { compare like this }\n   * check only once - we can do that in the constructor of this class, create a lambda, and then execute \n   * that lambda in the compare function. A little bit of branch prediction savings right here.\n   */\n  private void assignComparator(){\n    if(ComparatorOrder.DESCENDING == order){\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftField);\n          Comparable rightComp = (Comparable)rightTuple.get(rightField);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return 1; }\n          if(null == rightComp){ return -1; }\n          \n          return rightComp.compareTo(leftComp);\n        }\n      };\n    }\n    else{\n      // See above for black magic reasoning.\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftField);\n          Comparable rightComp = (Comparable)rightTuple.get(rightField);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return -1; }\n          if(null == rightComp){ return 1; }\n          \n          return leftComp.compareTo(rightComp);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /*\n   * What're we doing here messing around with lambdas for the comparator logic?\n   * We want the compare(...) function to run as fast as possible because it will be called many many\n   * times over the lifetime of this object. For that reason we want to limit the number of comparisons\n   * taking place in the compare(...) function. Because this class supports both ascending and\n   * descending comparisons and the logic for each is slightly different, we want to do the \n   *   if(ascending){ compare like this } else { compare like this }\n   * check only once - we can do that in the constructor of this class, create a lambda, and then execute \n   * that lambda in the compare function. A little bit of branch prediction savings right here.\n   */\n  private void assignComparator(){\n    if(ComparatorOrder.DESCENDING == order){\n      comparator = new ComparatorLambda() {\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftField);\n          Comparable rightComp = (Comparable)rightTuple.get(rightField);\n          return rightComp.compareTo(leftComp);\n        }\n      };\n    }\n    else{\n      comparator = new ComparatorLambda() {\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftField);\n          Comparable rightComp = (Comparable)rightTuple.get(rightField);\n          return leftComp.compareTo(rightComp);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator#assignComparator().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/StreamComparator#assignComparator().mjava","sourceNew":"  /*\n   * What're we doing here messing around with lambdas for the comparator logic?\n   * We want the compare(...) function to run as fast as possible because it will be called many many\n   * times over the lifetime of this object. For that reason we want to limit the number of comparisons\n   * taking place in the compare(...) function. Because this class supports both ascending and\n   * descending comparisons and the logic for each is slightly different, we want to do the \n   *   if(ascending){ compare like this } else { compare like this }\n   * check only once - we can do that in the constructor of this class, create a lambda, and then execute \n   * that lambda in the compare function. A little bit of branch prediction savings right here.\n   */\n  private void assignComparator(){\n    if(ComparatorOrder.DESCENDING == order){\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(fieldName);\n          Comparable rightComp = (Comparable)rightTuple.get(fieldName);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return 1; }\n          if(null == rightComp){ return -1; }\n          \n          return rightComp.compareTo(leftComp);\n        }\n      };\n    }\n    else{\n      // See above for black magic reasoning.\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(fieldName);\n          Comparable rightComp = (Comparable)rightTuple.get(fieldName);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return -1; }\n          if(null == rightComp){ return 1; }\n          \n          return leftComp.compareTo(rightComp);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /*\n   * What're we doing here messing around with lambdas for the comparator logic?\n   * We want the compare(...) function to run as fast as possible because it will be called many many\n   * times over the lifetime of this object. For that reason we want to limit the number of comparisons\n   * taking place in the compare(...) function. Because this class supports both ascending and\n   * descending comparisons and the logic for each is slightly different, we want to do the \n   *   if(ascending){ compare like this } else { compare like this }\n   * check only once - we can do that in the constructor of this class, create a lambda, and then execute \n   * that lambda in the compare function. A little bit of branch prediction savings right here.\n   */\n  private void assignComparator(){\n    if(ComparatorOrder.DESCENDING == order){\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftField);\n          Comparable rightComp = (Comparable)rightTuple.get(rightField);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return 1; }\n          if(null == rightComp){ return -1; }\n          \n          return rightComp.compareTo(leftComp);\n        }\n      };\n    }\n    else{\n      // See above for black magic reasoning.\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftField);\n          Comparable rightComp = (Comparable)rightTuple.get(rightField);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return -1; }\n          if(null == rightComp){ return 1; }\n          \n          return leftComp.compareTo(rightComp);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"333d804f5abfaf34c57493306a4cb2e01e55662d","date":1447206304,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator#assignComparator().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator#assignComparator().mjava","sourceNew":"  /*\n   * What're we doing here messing around with lambdas for the comparator logic?\n   * We want the compare(...) function to run as fast as possible because it will be called many many\n   * times over the lifetime of this object. For that reason we want to limit the number of comparisons\n   * taking place in the compare(...) function. Because this class supports both ascending and\n   * descending comparisons and the logic for each is slightly different, we want to do the \n   *   if(ascending){ compare like this } else { compare like this }\n   * check only once - we can do that in the constructor of this class, create a lambda, and then execute \n   * that lambda in the compare function. A little bit of branch prediction savings right here.\n   */\n  private void assignComparator(){\n    if(ComparatorOrder.DESCENDING == order){\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftFieldName);\n          Comparable rightComp = (Comparable)rightTuple.get(rightFieldName);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return 1; }\n          if(null == rightComp){ return -1; }\n          \n          return rightComp.compareTo(leftComp);\n        }\n      };\n    }\n    else{\n      // See above for black magic reasoning.\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftFieldName);\n          Comparable rightComp = (Comparable)rightTuple.get(rightFieldName);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return -1; }\n          if(null == rightComp){ return 1; }\n          \n          return leftComp.compareTo(rightComp);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /*\n   * What're we doing here messing around with lambdas for the comparator logic?\n   * We want the compare(...) function to run as fast as possible because it will be called many many\n   * times over the lifetime of this object. For that reason we want to limit the number of comparisons\n   * taking place in the compare(...) function. Because this class supports both ascending and\n   * descending comparisons and the logic for each is slightly different, we want to do the \n   *   if(ascending){ compare like this } else { compare like this }\n   * check only once - we can do that in the constructor of this class, create a lambda, and then execute \n   * that lambda in the compare function. A little bit of branch prediction savings right here.\n   */\n  private void assignComparator(){\n    if(ComparatorOrder.DESCENDING == order){\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(fieldName);\n          Comparable rightComp = (Comparable)rightTuple.get(fieldName);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return 1; }\n          if(null == rightComp){ return -1; }\n          \n          return rightComp.compareTo(leftComp);\n        }\n      };\n    }\n    else{\n      // See above for black magic reasoning.\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(fieldName);\n          Comparable rightComp = (Comparable)rightTuple.get(fieldName);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return -1; }\n          if(null == rightComp){ return 1; }\n          \n          return leftComp.compareTo(rightComp);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043df2e9a841864922c32756a44c939ed768cb89","date":1459876536,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator#assignComparator().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator#assignComparator().mjava","sourceNew":"  /*\n   * What're we doing here messing around with lambdas for the comparator logic?\n   * We want the compare(...) function to run as fast as possible because it will be called many many\n   * times over the lifetime of this object. For that reason we want to limit the number of comparisons\n   * taking place in the compare(...) function. Because this class supports both ascending and\n   * descending comparisons and the logic for each is slightly different, we want to do the \n   *   if(ascending){ compare like this } else { compare like this }\n   * check only once - we can do that in the constructor of this class, create a lambda, and then execute \n   * that lambda in the compare function. A little bit of branch prediction savings right here.\n   */\n  private void assignComparator(){\n    if(ComparatorOrder.DESCENDING == order){\n      comparator = (leftTuple, rightTuple) -> {\n        Comparable leftComp = (Comparable)leftTuple.get(leftFieldName);\n        Comparable rightComp = (Comparable)rightTuple.get(rightFieldName);\n\n        if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n        if(null == leftComp){ return 1; }\n        if(null == rightComp){ return -1; }\n\n        return rightComp.compareTo(leftComp);\n      };\n    }\n    else{\n      // See above for black magic reasoning.\n      comparator = (leftTuple, rightTuple) -> {\n        Comparable leftComp = (Comparable)leftTuple.get(leftFieldName);\n        Comparable rightComp = (Comparable)rightTuple.get(rightFieldName);\n\n        if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n        if(null == leftComp){ return -1; }\n        if(null == rightComp){ return 1; }\n\n        return leftComp.compareTo(rightComp);\n      };\n    }\n  }\n\n","sourceOld":"  /*\n   * What're we doing here messing around with lambdas for the comparator logic?\n   * We want the compare(...) function to run as fast as possible because it will be called many many\n   * times over the lifetime of this object. For that reason we want to limit the number of comparisons\n   * taking place in the compare(...) function. Because this class supports both ascending and\n   * descending comparisons and the logic for each is slightly different, we want to do the \n   *   if(ascending){ compare like this } else { compare like this }\n   * check only once - we can do that in the constructor of this class, create a lambda, and then execute \n   * that lambda in the compare function. A little bit of branch prediction savings right here.\n   */\n  private void assignComparator(){\n    if(ComparatorOrder.DESCENDING == order){\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftFieldName);\n          Comparable rightComp = (Comparable)rightTuple.get(rightFieldName);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return 1; }\n          if(null == rightComp){ return -1; }\n          \n          return rightComp.compareTo(leftComp);\n        }\n      };\n    }\n    else{\n      // See above for black magic reasoning.\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftFieldName);\n          Comparable rightComp = (Comparable)rightTuple.get(rightFieldName);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return -1; }\n          if(null == rightComp){ return 1; }\n          \n          return leftComp.compareTo(rightComp);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator#assignComparator().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator#assignComparator().mjava","sourceNew":"  /*\n   * What're we doing here messing around with lambdas for the comparator logic?\n   * We want the compare(...) function to run as fast as possible because it will be called many many\n   * times over the lifetime of this object. For that reason we want to limit the number of comparisons\n   * taking place in the compare(...) function. Because this class supports both ascending and\n   * descending comparisons and the logic for each is slightly different, we want to do the \n   *   if(ascending){ compare like this } else { compare like this }\n   * check only once - we can do that in the constructor of this class, create a lambda, and then execute \n   * that lambda in the compare function. A little bit of branch prediction savings right here.\n   */\n  private void assignComparator(){\n    if(ComparatorOrder.DESCENDING == order){\n      comparator = (leftTuple, rightTuple) -> {\n        Comparable leftComp = (Comparable)leftTuple.get(leftFieldName);\n        Comparable rightComp = (Comparable)rightTuple.get(rightFieldName);\n\n        if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n        if(null == leftComp){ return 1; }\n        if(null == rightComp){ return -1; }\n\n        return rightComp.compareTo(leftComp);\n      };\n    }\n    else{\n      // See above for black magic reasoning.\n      comparator = (leftTuple, rightTuple) -> {\n        Comparable leftComp = (Comparable)leftTuple.get(leftFieldName);\n        Comparable rightComp = (Comparable)rightTuple.get(rightFieldName);\n\n        if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n        if(null == leftComp){ return -1; }\n        if(null == rightComp){ return 1; }\n\n        return leftComp.compareTo(rightComp);\n      };\n    }\n  }\n\n","sourceOld":"  /*\n   * What're we doing here messing around with lambdas for the comparator logic?\n   * We want the compare(...) function to run as fast as possible because it will be called many many\n   * times over the lifetime of this object. For that reason we want to limit the number of comparisons\n   * taking place in the compare(...) function. Because this class supports both ascending and\n   * descending comparisons and the logic for each is slightly different, we want to do the \n   *   if(ascending){ compare like this } else { compare like this }\n   * check only once - we can do that in the constructor of this class, create a lambda, and then execute \n   * that lambda in the compare function. A little bit of branch prediction savings right here.\n   */\n  private void assignComparator(){\n    if(ComparatorOrder.DESCENDING == order){\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftFieldName);\n          Comparable rightComp = (Comparable)rightTuple.get(rightFieldName);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return 1; }\n          if(null == rightComp){ return -1; }\n          \n          return rightComp.compareTo(leftComp);\n        }\n      };\n    }\n    else{\n      // See above for black magic reasoning.\n      comparator = new ComparatorLambda() {\n        @Override\n        public int compare(Tuple leftTuple, Tuple rightTuple) {\n          Comparable leftComp = (Comparable)leftTuple.get(leftFieldName);\n          Comparable rightComp = (Comparable)rightTuple.get(rightFieldName);\n          \n          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n          if(null == leftComp){ return -1; }\n          if(null == rightComp){ return 1; }\n          \n          return leftComp.compareTo(rightComp);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator#assignComparator().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator#assignComparator().mjava","sourceNew":"  /*\n   * What're we doing here messing around with lambdas for the comparator logic?\n   * We want the compare(...) function to run as fast as possible because it will be called many many\n   * times over the lifetime of this object. For that reason we want to limit the number of comparisons\n   * taking place in the compare(...) function. Because this class supports both ascending and\n   * descending comparisons and the logic for each is slightly different, we want to do the \n   *   if(ascending){ compare like this } else { compare like this }\n   * check only once - we can do that in the constructor of this class, create a lambda, and then execute \n   * that lambda in the compare function. A little bit of branch prediction savings right here.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  private void assignComparator(){\n    if(ComparatorOrder.DESCENDING == order){\n      comparator = (leftTuple, rightTuple) -> {\n        @SuppressWarnings({\"rawtypes\"})\n        Comparable leftComp = (Comparable)leftTuple.get(leftFieldName);\n        @SuppressWarnings({\"rawtypes\"})\n        Comparable rightComp = (Comparable)rightTuple.get(rightFieldName);\n\n        if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n        if(null == leftComp){ return 1; }\n        if(null == rightComp){ return -1; }\n\n        return rightComp.compareTo(leftComp);\n      };\n    }\n    else{\n      // See above for black magic reasoning.\n      comparator = (leftTuple, rightTuple) -> {\n        @SuppressWarnings({\"rawtypes\"})\n        Comparable leftComp = (Comparable)leftTuple.get(leftFieldName);\n        @SuppressWarnings({\"rawtypes\"})\n        Comparable rightComp = (Comparable)rightTuple.get(rightFieldName);\n\n        if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n        if(null == leftComp){ return -1; }\n        if(null == rightComp){ return 1; }\n\n        return leftComp.compareTo(rightComp);\n      };\n    }\n  }\n\n","sourceOld":"  /*\n   * What're we doing here messing around with lambdas for the comparator logic?\n   * We want the compare(...) function to run as fast as possible because it will be called many many\n   * times over the lifetime of this object. For that reason we want to limit the number of comparisons\n   * taking place in the compare(...) function. Because this class supports both ascending and\n   * descending comparisons and the logic for each is slightly different, we want to do the \n   *   if(ascending){ compare like this } else { compare like this }\n   * check only once - we can do that in the constructor of this class, create a lambda, and then execute \n   * that lambda in the compare function. A little bit of branch prediction savings right here.\n   */\n  private void assignComparator(){\n    if(ComparatorOrder.DESCENDING == order){\n      comparator = (leftTuple, rightTuple) -> {\n        Comparable leftComp = (Comparable)leftTuple.get(leftFieldName);\n        Comparable rightComp = (Comparable)rightTuple.get(rightFieldName);\n\n        if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n        if(null == leftComp){ return 1; }\n        if(null == rightComp){ return -1; }\n\n        return rightComp.compareTo(leftComp);\n      };\n    }\n    else{\n      // See above for black magic reasoning.\n      comparator = (leftTuple, rightTuple) -> {\n        Comparable leftComp = (Comparable)leftTuple.get(leftFieldName);\n        Comparable rightComp = (Comparable)rightTuple.get(rightFieldName);\n\n        if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal\n        if(null == leftComp){ return -1; }\n        if(null == rightComp){ return 1; }\n\n        return leftComp.compareTo(rightComp);\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"043df2e9a841864922c32756a44c939ed768cb89":["333d804f5abfaf34c57493306a4cb2e01e55662d"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["e431b0806b8db369da896b66a74e304a49953c7b"],"8a90bd309349f7cddd43c742429b0adcd888baf3":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"b6284684320a9808c41a5e43de958b2da22f89bd":["333d804f5abfaf34c57493306a4cb2e01e55662d","043df2e9a841864922c32756a44c939ed768cb89"],"333d804f5abfaf34c57493306a4cb2e01e55662d":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["b6284684320a9808c41a5e43de958b2da22f89bd"],"e431b0806b8db369da896b66a74e304a49953c7b":["8a90bd309349f7cddd43c742429b0adcd888baf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["8a90bd309349f7cddd43c742429b0adcd888baf3"],"043df2e9a841864922c32756a44c939ed768cb89":["b6284684320a9808c41a5e43de958b2da22f89bd"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["333d804f5abfaf34c57493306a4cb2e01e55662d"],"8a90bd309349f7cddd43c742429b0adcd888baf3":["e431b0806b8db369da896b66a74e304a49953c7b"],"b6284684320a9808c41a5e43de958b2da22f89bd":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"333d804f5abfaf34c57493306a4cb2e01e55662d":["043df2e9a841864922c32756a44c939ed768cb89","b6284684320a9808c41a5e43de958b2da22f89bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e431b0806b8db369da896b66a74e304a49953c7b":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}