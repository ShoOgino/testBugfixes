{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createReplica(ClusterState,ZkNodeProps).mjava","commits":[{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createReplica(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"    private ClusterState createReplica(ClusterState clusterState, ZkNodeProps message) {\n      log.info(\"createReplica() {} \", message);\n      String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice sl = clusterState.getSlice(coll, slice);\n      if(sl == null){\n        log.error(\"Invalid Collection/Slice {}/{} \",coll,slice);\n        return clusterState;\n      }\n\n      String coreNodeName = Assign.assignNode(coll, clusterState);\n      Replica replica = new Replica(coreNodeName,\n          makeMap(\n          ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.BASE_URL_PROP,message.getStr(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.STATE_PROP,message.getStr(ZkStateReader.STATE_PROP),\n          ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName));\n      sl.getReplicasMap().put(coreNodeName, replica);\n      return clusterState;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"840fc95f31a25d020cd825e880018bcfa0bacc71","date":1393483822,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState createReplica(ClusterState clusterState, ZkNodeProps message) {\n      log.info(\"createReplica() {} \", message);\n      String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice sl = clusterState.getSlice(coll, slice);\n      if(sl == null){\n        log.error(\"Invalid Collection/Slice {}/{} \",coll,slice);\n        return clusterState;\n      }\n\n      String coreNodeName = Assign.assignNode(coll, clusterState);\n      Replica replica = new Replica(coreNodeName,\n          makeMap(\n          ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.BASE_URL_PROP,message.getStr(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.STATE_PROP,message.getStr(ZkStateReader.STATE_PROP)));\n      sl.getReplicasMap().put(coreNodeName, replica);\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState createReplica(ClusterState clusterState, ZkNodeProps message) {\n      log.info(\"createReplica() {} \", message);\n      String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice sl = clusterState.getSlice(coll, slice);\n      if(sl == null){\n        log.error(\"Invalid Collection/Slice {}/{} \",coll,slice);\n        return clusterState;\n      }\n\n      String coreNodeName = Assign.assignNode(coll, clusterState);\n      Replica replica = new Replica(coreNodeName,\n          makeMap(\n          ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.BASE_URL_PROP,message.getStr(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.STATE_PROP,message.getStr(ZkStateReader.STATE_PROP),\n          ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName));\n      sl.getReplicasMap().put(coreNodeName, replica);\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createReplica(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"    private ClusterState createReplica(ClusterState clusterState, ZkNodeProps message) {\n      log.info(\"createReplica() {} \", message);\n      String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice sl = clusterState.getSlice(coll, slice);\n      if(sl == null){\n        log.error(\"Invalid Collection/Slice {}/{} \",coll,slice);\n        return clusterState;\n      }\n\n      String coreNodeName = Assign.assignNode(coll, clusterState);\n      Replica replica = new Replica(coreNodeName,\n          makeMap(\n          ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.BASE_URL_PROP,message.getStr(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.STATE_PROP,message.getStr(ZkStateReader.STATE_PROP)));\n      sl.getReplicasMap().put(coreNodeName, replica);\n      return clusterState;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f5eaf296600e1665151e7929d42a3cbe22e481","date":1393983215,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState createReplica(ClusterState clusterState, ZkNodeProps message) {\n      log.info(\"createReplica() {} \", message);\n      String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n      checkCollection(message, coll);\n      String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice sl = clusterState.getSlice(coll, slice);\n      if(sl == null){\n        log.error(\"Invalid Collection/Slice {}/{} \",coll,slice);\n        return clusterState;\n      }\n\n      String coreNodeName = Assign.assignNode(coll, clusterState);\n      Replica replica = new Replica(coreNodeName,\n          makeMap(\n          ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.BASE_URL_PROP,message.getStr(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.STATE_PROP,message.getStr(ZkStateReader.STATE_PROP)));\n      sl.getReplicasMap().put(coreNodeName, replica);\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState createReplica(ClusterState clusterState, ZkNodeProps message) {\n      log.info(\"createReplica() {} \", message);\n      String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice sl = clusterState.getSlice(coll, slice);\n      if(sl == null){\n        log.error(\"Invalid Collection/Slice {}/{} \",coll,slice);\n        return clusterState;\n      }\n\n      String coreNodeName = Assign.assignNode(coll, clusterState);\n      Replica replica = new Replica(coreNodeName,\n          makeMap(\n          ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.BASE_URL_PROP,message.getStr(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.STATE_PROP,message.getStr(ZkStateReader.STATE_PROP)));\n      sl.getReplicasMap().put(coreNodeName, replica);\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6df412542f3e2161f4bc2b13357b4a973195bfb7","date":1394040511,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState createReplica(ClusterState clusterState, ZkNodeProps message) {\n      log.info(\"createReplica() {} \", message);\n      String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice sl = clusterState.getSlice(coll, slice);\n      if(sl == null){\n        log.error(\"Invalid Collection/Slice {}/{} \",coll,slice);\n        return clusterState;\n      }\n\n      String coreNodeName = Assign.assignNode(coll, clusterState);\n      Replica replica = new Replica(coreNodeName,\n          makeMap(\n          ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.BASE_URL_PROP,message.getStr(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.STATE_PROP,message.getStr(ZkStateReader.STATE_PROP)));\n      sl.getReplicasMap().put(coreNodeName, replica);\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState createReplica(ClusterState clusterState, ZkNodeProps message) {\n      log.info(\"createReplica() {} \", message);\n      String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n      checkCollection(message, coll);\n      String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice sl = clusterState.getSlice(coll, slice);\n      if(sl == null){\n        log.error(\"Invalid Collection/Slice {}/{} \",coll,slice);\n        return clusterState;\n      }\n\n      String coreNodeName = Assign.assignNode(coll, clusterState);\n      Replica replica = new Replica(coreNodeName,\n          makeMap(\n          ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.BASE_URL_PROP,message.getStr(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.STATE_PROP,message.getStr(ZkStateReader.STATE_PROP)));\n      sl.getReplicasMap().put(coreNodeName, replica);\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState createReplica(ClusterState clusterState, ZkNodeProps message) {\n      log.info(\"createReplica() {} \", message);\n      String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice sl = clusterState.getSlice(coll, slice);\n      if(sl == null){\n        log.error(\"Invalid Collection/Slice {}/{} \",coll,slice);\n        return clusterState;\n      }\n\n      String coreNodeName = Assign.assignNode(coll, clusterState);\n      Replica replica = new Replica(coreNodeName,\n          makeMap(\n          ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.BASE_URL_PROP,message.getStr(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.STATE_PROP,message.getStr(ZkStateReader.STATE_PROP)));\n      sl.getReplicasMap().put(coreNodeName, replica);\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState createReplica(ClusterState clusterState, ZkNodeProps message) {\n      log.info(\"createReplica() {} \", message);\n      String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice sl = clusterState.getSlice(coll, slice);\n      if(sl == null){\n        log.error(\"Invalid Collection/Slice {}/{} \",coll,slice);\n        return clusterState;\n      }\n\n      String coreNodeName = Assign.assignNode(coll, clusterState);\n      Replica replica = new Replica(coreNodeName,\n          makeMap(\n          ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.BASE_URL_PROP,message.getStr(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.STATE_PROP,message.getStr(ZkStateReader.STATE_PROP)));\n      sl.getReplicasMap().put(coreNodeName, replica);\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState createReplica(ClusterState clusterState, ZkNodeProps message) {\n      log.info(\"createReplica() {} \", message);\n      String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      DocCollection collection = clusterState.getCollection(coll);\n      Slice sl = collection.getSlice(slice);\n      if(sl == null){\n        log.error(\"Invalid Collection/Slice {}/{} \",coll,slice);\n        return clusterState;\n      }\n\n      String coreNodeName = Assign.assignNode(coll, clusterState);\n      Replica replica = new Replica(coreNodeName,\n          makeMap(\n          ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.BASE_URL_PROP,message.getStr(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.STATE_PROP,message.getStr(ZkStateReader.STATE_PROP)));\n      sl.getReplicasMap().put(coreNodeName, replica);\n      return newState(clusterState, singletonMap(coll, collection));\n    }\n\n","sourceOld":"    private ClusterState createReplica(ClusterState clusterState, ZkNodeProps message) {\n      log.info(\"createReplica() {} \", message);\n      String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice sl = clusterState.getSlice(coll, slice);\n      if(sl == null){\n        log.error(\"Invalid Collection/Slice {}/{} \",coll,slice);\n        return clusterState;\n      }\n\n      String coreNodeName = Assign.assignNode(coll, clusterState);\n      Replica replica = new Replica(coreNodeName,\n          makeMap(\n          ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.BASE_URL_PROP,message.getStr(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.STATE_PROP,message.getStr(ZkStateReader.STATE_PROP)));\n      sl.getReplicasMap().put(coreNodeName, replica);\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfb6f3c8c119796b6a4ca83753599e3064b65305","date":1416760830,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState createReplica(ClusterState clusterState, ZkNodeProps message) {\n      String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      DocCollection collection = clusterState.getCollection(coll);\n      Slice sl = collection.getSlice(slice);\n      if(sl == null){\n        log.error(\"Invalid Collection/Slice {}/{} \",coll,slice);\n        return clusterState;\n      }\n\n      String coreNodeName = Assign.assignNode(coll, clusterState);\n      Replica replica = new Replica(coreNodeName,\n          makeMap(\n          ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.BASE_URL_PROP,message.getStr(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.STATE_PROP,message.getStr(ZkStateReader.STATE_PROP)));\n      sl.getReplicasMap().put(coreNodeName, replica);\n      return newState(clusterState, singletonMap(coll, collection));\n    }\n\n","sourceOld":"    private ClusterState createReplica(ClusterState clusterState, ZkNodeProps message) {\n      log.info(\"createReplica() {} \", message);\n      String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      DocCollection collection = clusterState.getCollection(coll);\n      Slice sl = collection.getSlice(slice);\n      if(sl == null){\n        log.error(\"Invalid Collection/Slice {}/{} \",coll,slice);\n        return clusterState;\n      }\n\n      String coreNodeName = Assign.assignNode(coll, clusterState);\n      Replica replica = new Replica(coreNodeName,\n          makeMap(\n          ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.BASE_URL_PROP,message.getStr(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.STATE_PROP,message.getStr(ZkStateReader.STATE_PROP)));\n      sl.getReplicasMap().put(coreNodeName, replica);\n      return newState(clusterState, singletonMap(coll, collection));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createReplica(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createReplica(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ZkWriteCommand createReplica(ClusterState clusterState, ZkNodeProps message) {\n      return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n    }\n\n","sourceOld":"    private ClusterState createReplica(ClusterState clusterState, ZkNodeProps message) {\n      String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      DocCollection collection = clusterState.getCollection(coll);\n      Slice sl = collection.getSlice(slice);\n      if(sl == null){\n        log.error(\"Invalid Collection/Slice {}/{} \",coll,slice);\n        return clusterState;\n      }\n\n      String coreNodeName = Assign.assignNode(coll, clusterState);\n      Replica replica = new Replica(coreNodeName,\n          makeMap(\n          ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.BASE_URL_PROP,message.getStr(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.STATE_PROP,message.getStr(ZkStateReader.STATE_PROP)));\n      sl.getReplicasMap().put(coreNodeName, replica);\n      return newState(clusterState, singletonMap(coll, collection));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03f6fef27e0d27edc875c720e6ce5db17480a562","date":1417277285,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createReplica(ClusterState,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"    private ZkWriteCommand createReplica(ClusterState clusterState, ZkNodeProps message) {\n      return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29f5eaf296600e1665151e7929d42a3cbe22e481":["840fc95f31a25d020cd825e880018bcfa0bacc71"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["bfb6f3c8c119796b6a4ca83753599e3064b65305"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["840fc95f31a25d020cd825e880018bcfa0bacc71","6df412542f3e2161f4bc2b13357b4a973195bfb7"],"840fc95f31a25d020cd825e880018bcfa0bacc71":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"03f6fef27e0d27edc875c720e6ce5db17480a562":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"bfb6f3c8c119796b6a4ca83753599e3064b65305":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6df412542f3e2161f4bc2b13357b4a973195bfb7":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["6df412542f3e2161f4bc2b13357b4a973195bfb7"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","840fc95f31a25d020cd825e880018bcfa0bacc71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03f6fef27e0d27edc875c720e6ce5db17480a562"]},"commit2Childs":{"29f5eaf296600e1665151e7929d42a3cbe22e481":["6df412542f3e2161f4bc2b13357b4a973195bfb7"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["03f6fef27e0d27edc875c720e6ce5db17480a562"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"840fc95f31a25d020cd825e880018bcfa0bacc71":["29f5eaf296600e1665151e7929d42a3cbe22e481","96ea64d994d340044e0d57aeb6a5871539d10ca5","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"bfb6f3c8c119796b6a4ca83753599e3064b65305":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"03f6fef27e0d27edc875c720e6ce5db17480a562":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8497bb4f9de61b5520423bd9af88ea11a6e109e7","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"6df412542f3e2161f4bc2b13357b4a973195bfb7":["96ea64d994d340044e0d57aeb6a5871539d10ca5","0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["840fc95f31a25d020cd825e880018bcfa0bacc71"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["bfb6f3c8c119796b6a4ca83753599e3064b65305"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}