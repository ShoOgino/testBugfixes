{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","sourceNew":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\n        QueryNode first, c;\n        Vector<QueryNode> clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\n     if (clauses == null) {\n         clauses = new Vector<QueryNode>();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\n    if (clauses != null) {\n            {if (true) return new AndQueryNode(clauses);}\n    } else {\n        {if (true) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\n        QueryNode first, c;\n        Vector<QueryNode> clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\n     if (clauses == null) {\n         clauses = new Vector<QueryNode>();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\n    if (clauses != null) {\n            {if (true) return new AndQueryNode(clauses);}\n    } else {\n        {if (true) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","sourceNew":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\n  QueryNode first, c;\n  Vector<QueryNode> clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\n     if (clauses == null) {\n         clauses = new Vector<QueryNode>();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\n    if (clauses != null) {\n      {if (true) return new AndQueryNode(clauses);}\n    } else {\n        {if (true) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\n        QueryNode first, c;\n        Vector<QueryNode> clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\n     if (clauses == null) {\n         clauses = new Vector<QueryNode>();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\n    if (clauses != null) {\n            {if (true) return new AndQueryNode(clauses);}\n    } else {\n        {if (true) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","sourceNew":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\n  QueryNode first, c;\n  Vector<QueryNode> clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\n     if (clauses == null) {\n         clauses = new Vector<>();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\n    if (clauses != null) {\n      {if (true) return new AndQueryNode(clauses);}\n    } else {\n        {if (true) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\n  QueryNode first, c;\n  Vector<QueryNode> clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\n     if (clauses == null) {\n         clauses = new Vector<QueryNode>();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\n    if (clauses != null) {\n      {if (true) return new AndQueryNode(clauses);}\n    } else {\n        {if (true) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":["383e6510a01a27ea3d860472f33049ed2c766e15"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"383e6510a01a27ea3d860472f33049ed2c766e15","date":1424161215,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","sourceNew":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\n  QueryNode first, c;\n  Vector<QueryNode> clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\n     if (clauses == null) {\n         clauses = new Vector<QueryNode>();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\n    if (clauses != null) {\n      {if (true) return new AndQueryNode(clauses);}\n    } else {\n        {if (true) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\n  QueryNode first, c;\n  Vector<QueryNode> clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\n     if (clauses == null) {\n         clauses = new Vector<>();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\n    if (clauses != null) {\n      {if (true) return new AndQueryNode(clauses);}\n    } else {\n        {if (true) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4bf8c857cdf9b9be903cae84ef15985ad090a05","date":1600342158,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","sourceNew":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {QueryNode first, c;\n  Vector<QueryNode> clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case AND:{\n        ;\n        break;\n        }\n      default:\n        jj_la1[4] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\nif (clauses == null) {\n         clauses = new Vector<QueryNode>();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\nif (clauses != null) {\n      {if (\"\" != null) return new AndQueryNode(clauses);}\n    } else {\n        {if (\"\" != null) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n}\n\n","sourceOld":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\n  QueryNode first, c;\n  Vector<QueryNode> clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\n     if (clauses == null) {\n         clauses = new Vector<QueryNode>();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\n    if (clauses != null) {\n      {if (true) return new AndQueryNode(clauses);}\n    } else {\n        {if (true) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9","date":1600414700,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","sourceNew":"  final private QueryNode ConjQuery(CharSequence field) throws ParseException {ArrayList<QueryNode> clauses = new ArrayList<>();\n  QueryNode node;\n    node = ModClause(field);\nclauses.add(node);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case AND:{\n        ;\n        break;\n        }\n      default:\n        jj_la1[2] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      node = ModClause(field);\nclauses.add(node);\n    }\n{if (\"\" != null) return clauses.size() == 1 ? clauses.get(0) : new AndQueryNode(clauses);}\n    throw new Error(\"Missing return statement in function\");\n}\n\n","sourceOld":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {QueryNode first, c;\n  Vector<QueryNode> clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case AND:{\n        ;\n        break;\n        }\n      default:\n        jj_la1[4] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\nif (clauses == null) {\n         clauses = new Vector<QueryNode>();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\nif (clauses != null) {\n      {if (\"\" != null) return new AndQueryNode(clauses);}\n    } else {\n        {if (\"\" != null) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["383e6510a01a27ea3d860472f33049ed2c766e15"],"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9":["c4bf8c857cdf9b9be903cae84ef15985ad090a05"],"383e6510a01a27ea3d860472f33049ed2c766e15":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["383e6510a01a27ea3d860472f33049ed2c766e15"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9"],"383e6510a01a27ea3d860472f33049ed2c766e15":["c4bf8c857cdf9b9be903cae84ef15985ad090a05"],"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}