{"path":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query,Filter).mjava","commits":[{"id":"ee59cbb90ed1ef1b1c538ff2cc438b3e0956c3d6","date":1379216208,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query,Filter).mjava","pathOld":"/dev/null","sourceNew":"  void assertQuery(Query query, Filter filter) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      boolean reversed = random().nextBoolean();\n      SortField fields[] = new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, reversed),\n          new SortField(\"long\", SortField.Type.LONG, reversed),\n          new SortField(\"float\", SortField.Type.FLOAT, reversed),\n          new SortField(\"double\", SortField.Type.DOUBLE, reversed),\n          new SortField(\"intdocvalues\", SortField.Type.INT, reversed),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, reversed),\n          new SortField(\"score\", SortField.Type.SCORE)\n      };\n      Collections.shuffle(Arrays.asList(fields), random());\n      int numSorts = _TestUtil.nextInt(random(), 1, fields.length);\n      assertQuery(query, filter, new Sort(Arrays.copyOfRange(fields, 0, numSorts)));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query,Filter).mjava","pathOld":"/dev/null","sourceNew":"  void assertQuery(Query query, Filter filter) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      boolean reversed = random().nextBoolean();\n      SortField fields[] = new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, reversed),\n          new SortField(\"long\", SortField.Type.LONG, reversed),\n          new SortField(\"float\", SortField.Type.FLOAT, reversed),\n          new SortField(\"double\", SortField.Type.DOUBLE, reversed),\n          new SortField(\"intdocvalues\", SortField.Type.INT, reversed),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, reversed),\n          new SortField(\"score\", SortField.Type.SCORE)\n      };\n      Collections.shuffle(Arrays.asList(fields), random());\n      int numSorts = _TestUtil.nextInt(random(), 1, fields.length);\n      assertQuery(query, filter, new Sort(Arrays.copyOfRange(fields, 0, numSorts)));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query,Filter).mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query,Filter).mjava","sourceNew":"  void assertQuery(Query query, Filter filter) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      boolean reversed = random().nextBoolean();\n      SortField fields[] = new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, reversed),\n          new SortField(\"long\", SortField.Type.LONG, reversed),\n          new SortField(\"float\", SortField.Type.FLOAT, reversed),\n          new SortField(\"double\", SortField.Type.DOUBLE, reversed),\n          new SortField(\"intdocvalues\", SortField.Type.INT, reversed),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, reversed),\n          new SortField(\"score\", SortField.Type.SCORE)\n      };\n      Collections.shuffle(Arrays.asList(fields), random());\n      int numSorts = TestUtil.nextInt(random(), 1, fields.length);\n      assertQuery(query, filter, new Sort(Arrays.copyOfRange(fields, 0, numSorts)));\n    }\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      boolean reversed = random().nextBoolean();\n      SortField fields[] = new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, reversed),\n          new SortField(\"long\", SortField.Type.LONG, reversed),\n          new SortField(\"float\", SortField.Type.FLOAT, reversed),\n          new SortField(\"double\", SortField.Type.DOUBLE, reversed),\n          new SortField(\"intdocvalues\", SortField.Type.INT, reversed),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, reversed),\n          new SortField(\"score\", SortField.Type.SCORE)\n      };\n      Collections.shuffle(Arrays.asList(fields), random());\n      int numSorts = _TestUtil.nextInt(random(), 1, fields.length);\n      assertQuery(query, filter, new Sort(Arrays.copyOfRange(fields, 0, numSorts)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c","date":1416362965,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query,Filter).mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query,Filter).mjava","sourceNew":"  void assertQuery(Query query, Filter filter) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      boolean reversed = random().nextBoolean();\n      SortField fields[] = new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, reversed),\n          new SortField(\"long\", SortField.Type.LONG, reversed),\n          new SortField(\"float\", SortField.Type.FLOAT, reversed),\n          new SortField(\"double\", SortField.Type.DOUBLE, reversed),\n          new SortField(\"score\", SortField.Type.SCORE)\n      };\n      Collections.shuffle(Arrays.asList(fields), random());\n      int numSorts = TestUtil.nextInt(random(), 1, fields.length);\n      assertQuery(query, filter, new Sort(Arrays.copyOfRange(fields, 0, numSorts)));\n    }\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      boolean reversed = random().nextBoolean();\n      SortField fields[] = new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, reversed),\n          new SortField(\"long\", SortField.Type.LONG, reversed),\n          new SortField(\"float\", SortField.Type.FLOAT, reversed),\n          new SortField(\"double\", SortField.Type.DOUBLE, reversed),\n          new SortField(\"intdocvalues\", SortField.Type.INT, reversed),\n          new SortField(\"floatdocvalues\", SortField.Type.FLOAT, reversed),\n          new SortField(\"score\", SortField.Type.SCORE)\n      };\n      Collections.shuffle(Arrays.asList(fields), random());\n      int numSorts = TestUtil.nextInt(random(), 1, fields.length);\n      assertQuery(query, filter, new Sort(Arrays.copyOfRange(fields, 0, numSorts)));\n    }\n  }\n\n","bugFix":["ee59cbb90ed1ef1b1c538ff2cc438b3e0956c3d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query).mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query,Filter).mjava","sourceNew":"  void assertQuery(Query query) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      boolean reversed = random().nextBoolean();\n      SortField fields[] = new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, reversed),\n          new SortField(\"long\", SortField.Type.LONG, reversed),\n          new SortField(\"float\", SortField.Type.FLOAT, reversed),\n          new SortField(\"double\", SortField.Type.DOUBLE, reversed),\n          new SortField(\"score\", SortField.Type.SCORE)\n      };\n      Collections.shuffle(Arrays.asList(fields), random());\n      int numSorts = TestUtil.nextInt(random(), 1, fields.length);\n      assertQuery(query, new Sort(Arrays.copyOfRange(fields, 0, numSorts)));\n    }\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      boolean reversed = random().nextBoolean();\n      SortField fields[] = new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, reversed),\n          new SortField(\"long\", SortField.Type.LONG, reversed),\n          new SortField(\"float\", SortField.Type.FLOAT, reversed),\n          new SortField(\"double\", SortField.Type.DOUBLE, reversed),\n          new SortField(\"score\", SortField.Type.SCORE)\n      };\n      Collections.shuffle(Arrays.asList(fields), random());\n      int numSorts = TestUtil.nextInt(random(), 1, fields.length);\n      assertQuery(query, filter, new Sort(Arrays.copyOfRange(fields, 0, numSorts)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee59cbb90ed1ef1b1c538ff2cc438b3e0956c3d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee59cbb90ed1ef1b1c538ff2cc438b3e0956c3d6"]},"commit2Childs":{"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"6613659748fe4411a7dcf85266e55db1f95f7315":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee59cbb90ed1ef1b1c538ff2cc438b3e0956c3d6","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"ee59cbb90ed1ef1b1c538ff2cc438b3e0956c3d6":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}