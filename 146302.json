{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#verifyUsesDefaultCodec(Directory,String).mjava","commits":[{"id":"1169b01224241198a3eb11c9dcc42dc921b02235","date":1411505234,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#verifyUsesDefaultCodec(Directory,String).mjava","pathOld":"/dev/null","sourceNew":"  public void verifyUsesDefaultCodec(Directory dir, String name) throws Exception {\n    DirectoryReader r = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : r.leaves()) {\n      SegmentReader air = (SegmentReader) context.reader();\n      Codec codec = air.getSegmentInfo().info.getCodec();\n      assertTrue(\"codec used in \" + name + \" (\" + codec.getName() + \") is not a default codec (does not begin with Lucene)\",\n                 codec.getName().startsWith(\"Lucene\"));\n    }\n      r.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#verifyUsesDefaultCodec(Directory,String).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#verifyUsesDefaultCodec(Directory,String).mjava","sourceNew":"  public void verifyUsesDefaultCodec(Directory dir, String name) throws Exception {\n    DirectoryReader r = DirectoryReader.open(dir);\n    for (LeafReaderContext context : r.leaves()) {\n      SegmentReader air = (SegmentReader) context.reader();\n      Codec codec = air.getSegmentInfo().info.getCodec();\n      assertTrue(\"codec used in \" + name + \" (\" + codec.getName() + \") is not a default codec (does not begin with Lucene)\",\n                 codec.getName().startsWith(\"Lucene\"));\n    }\n      r.close();\n  }\n\n","sourceOld":"  public void verifyUsesDefaultCodec(Directory dir, String name) throws Exception {\n    DirectoryReader r = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : r.leaves()) {\n      SegmentReader air = (SegmentReader) context.reader();\n      Codec codec = air.getSegmentInfo().info.getCodec();\n      assertTrue(\"codec used in \" + name + \" (\" + codec.getName() + \") is not a default codec (does not begin with Lucene)\",\n                 codec.getName().startsWith(\"Lucene\"));\n    }\n      r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6cf7a26213e0e54139f38430ecef1c4059036ce2","date":1412325423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#verifyUsesDefaultCodec(Directory,String).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#verifyUsesDefaultCodec(Directory,String).mjava","sourceNew":"  public void verifyUsesDefaultCodec(Directory dir, String name) throws Exception {\n    DirectoryReader r = DirectoryReader.open(dir);\n    for (LeafReaderContext context : r.leaves()) {\n      SegmentReader air = (SegmentReader) context.reader();\n      Codec codec = air.getSegmentInfo().info.getCodec();\n      assertTrue(\"codec used in \" + name + \" (\" + codec.getName() + \") is not a default codec (does not begin with Lucene)\",\n                 codec.getName().startsWith(\"Lucene\"));\n    }\n    r.close();\n  }\n\n","sourceOld":"  public void verifyUsesDefaultCodec(Directory dir, String name) throws Exception {\n    DirectoryReader r = DirectoryReader.open(dir);\n    for (LeafReaderContext context : r.leaves()) {\n      SegmentReader air = (SegmentReader) context.reader();\n      Codec codec = air.getSegmentInfo().info.getCodec();\n      assertTrue(\"codec used in \" + name + \" (\" + codec.getName() + \") is not a default codec (does not begin with Lucene)\",\n                 codec.getName().startsWith(\"Lucene\"));\n    }\n      r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#verifyUsesDefaultCodec(Directory,String).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#verifyUsesDefaultCodec(Directory,String).mjava","sourceNew":"  public void verifyUsesDefaultCodec(Directory dir, String name) throws Exception {\n    DirectoryReader r = DirectoryReader.open(dir);\n    for (LeafReaderContext context : r.leaves()) {\n      SegmentReader air = (SegmentReader) context.reader();\n      Codec codec = air.getSegmentInfo().info.getCodec();\n      assertTrue(\"codec used in \" + name + \" (\" + codec.getName() + \") is not a default codec (does not begin with Lucene)\",\n                 codec.getName().startsWith(\"Lucene\"));\n    }\n    r.close();\n  }\n\n","sourceOld":"  public void verifyUsesDefaultCodec(Directory dir, String name) throws Exception {\n    DirectoryReader r = DirectoryReader.open(dir);\n    for (LeafReaderContext context : r.leaves()) {\n      SegmentReader air = (SegmentReader) context.reader();\n      Codec codec = air.getSegmentInfo().info.getCodec();\n      assertTrue(\"codec used in \" + name + \" (\" + codec.getName() + \") is not a default codec (does not begin with Lucene)\",\n                 codec.getName().startsWith(\"Lucene\"));\n    }\n      r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6cf7a26213e0e54139f38430ecef1c4059036ce2":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["c9fb5f46e264daf5ba3860defe623a89d202dd87","6cf7a26213e0e54139f38430ecef1c4059036ce2"],"1169b01224241198a3eb11c9dcc42dc921b02235":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["1169b01224241198a3eb11c9dcc42dc921b02235"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6cf7a26213e0e54139f38430ecef1c4059036ce2"]},"commit2Childs":{"6cf7a26213e0e54139f38430ecef1c4059036ce2":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1169b01224241198a3eb11c9dcc42dc921b02235"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"1169b01224241198a3eb11c9dcc42dc921b02235":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["6cf7a26213e0e54139f38430ecef1c4059036ce2","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}