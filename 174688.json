{"path":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#buildOptimize().mjava","commits":[{"id":"2d76fc51e1f6bf807458c684a30c03be70be5c5f","date":1407826855,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#buildOptimize().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Walk the Node tree propagating any wildDescentant information to\n     * child nodes.\n     */\n    private void buildOptimize() {\n      if(parent != null && parent.recursiveWildCardChild !=null && this.recursiveWildCardChild ==null){\n        this.recursiveWildCardChild = parent.recursiveWildCardChild;\n      }\n      for (Node n : childNodes.values()) n.buildOptimize();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2330174b38007b9942205a2679db9ddffe35af89","date":1423653924,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#buildOptimize().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#buildOptimize().mjava","sourceNew":"    /**\n     * Walk the Node tree propagating any wildDescentant information to\n     * child nodes.\n     */\n    private void buildOptimize() {\n      if (parent != null && parent.recursiveWildCardChild != null && this.recursiveWildCardChild == null) {\n        this.recursiveWildCardChild = parent.recursiveWildCardChild;\n      }\n      for (Node n : childNodes.values()) n.buildOptimize();\n    }\n\n","sourceOld":"    /**\n     * Walk the Node tree propagating any wildDescentant information to\n     * child nodes.\n     */\n    private void buildOptimize() {\n      if(parent != null && parent.recursiveWildCardChild !=null && this.recursiveWildCardChild ==null){\n        this.recursiveWildCardChild = parent.recursiveWildCardChild;\n      }\n      for (Node n : childNodes.values()) n.buildOptimize();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fd61945b522c69b4bdd1a107f06659c8fee30c3","date":1464716529,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#buildOptimize().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#buildOptimize().mjava","sourceNew":"    /**\n     * Walk the Node tree propagating any wild Descendant information to\n     * child nodes.\n     */\n    private void buildOptimize() {\n      if (parent != null && parent.recursiveWildCardChild != null && this.recursiveWildCardChild == null) {\n        this.recursiveWildCardChild = parent.recursiveWildCardChild;\n      }\n      for (Node n : childNodes.values()) n.buildOptimize();\n    }\n\n","sourceOld":"    /**\n     * Walk the Node tree propagating any wildDescentant information to\n     * child nodes.\n     */\n    private void buildOptimize() {\n      if (parent != null && parent.recursiveWildCardChild != null && this.recursiveWildCardChild == null) {\n        this.recursiveWildCardChild = parent.recursiveWildCardChild;\n      }\n      for (Node n : childNodes.values()) n.buildOptimize();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#buildOptimize().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#buildOptimize().mjava","sourceNew":"    /**\n     * Walk the Node tree propagating any wild Descendant information to\n     * child nodes.\n     */\n    private void buildOptimize() {\n      if (parent != null && parent.recursiveWildCardChild != null && this.recursiveWildCardChild == null) {\n        this.recursiveWildCardChild = parent.recursiveWildCardChild;\n      }\n      for (Node n : childNodes.values()) n.buildOptimize();\n    }\n\n","sourceOld":"    /**\n     * Walk the Node tree propagating any wildDescentant information to\n     * child nodes.\n     */\n    private void buildOptimize() {\n      if (parent != null && parent.recursiveWildCardChild != null && this.recursiveWildCardChild == null) {\n        this.recursiveWildCardChild = parent.recursiveWildCardChild;\n      }\n      for (Node n : childNodes.values()) n.buildOptimize();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#buildOptimize().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#buildOptimize().mjava","sourceNew":"    /**\n     * Walk the Node tree propagating any wild Descendant information to\n     * child nodes.\n     */\n    private void buildOptimize() {\n      if (parent != null && parent.recursiveWildCardChild != null && this.recursiveWildCardChild == null) {\n        this.recursiveWildCardChild = parent.recursiveWildCardChild;\n      }\n      for (Node n : childNodes.values()) n.buildOptimize();\n    }\n\n","sourceOld":"    /**\n     * Walk the Node tree propagating any wildDescentant information to\n     * child nodes.\n     */\n    private void buildOptimize() {\n      if (parent != null && parent.recursiveWildCardChild != null && this.recursiveWildCardChild == null) {\n        this.recursiveWildCardChild = parent.recursiveWildCardChild;\n      }\n      for (Node n : childNodes.values()) n.buildOptimize();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#buildOptimize().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#buildOptimize().mjava","sourceNew":"    /**\n     * Walk the Node tree propagating any wild Descendant information to\n     * child nodes.\n     */\n    private void buildOptimize() {\n      if (parent != null && parent.recursiveWildCardChild != null && this.recursiveWildCardChild == null) {\n        this.recursiveWildCardChild = parent.recursiveWildCardChild;\n      }\n      for (Node n : childNodes.values()) n.buildOptimize();\n    }\n\n","sourceOld":"    /**\n     * Walk the Node tree propagating any wildDescentant information to\n     * child nodes.\n     */\n    private void buildOptimize() {\n      if (parent != null && parent.recursiveWildCardChild != null && this.recursiveWildCardChild == null) {\n        this.recursiveWildCardChild = parent.recursiveWildCardChild;\n      }\n      for (Node n : childNodes.values()) n.buildOptimize();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fd61945b522c69b4bdd1a107f06659c8fee30c3":["2330174b38007b9942205a2679db9ddffe35af89"],"2330174b38007b9942205a2679db9ddffe35af89":["2d76fc51e1f6bf807458c684a30c03be70be5c5f"],"2d76fc51e1f6bf807458c684a30c03be70be5c5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["2330174b38007b9942205a2679db9ddffe35af89","9fd61945b522c69b4bdd1a107f06659c8fee30c3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2330174b38007b9942205a2679db9ddffe35af89","9fd61945b522c69b4bdd1a107f06659c8fee30c3"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["2330174b38007b9942205a2679db9ddffe35af89","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fd61945b522c69b4bdd1a107f06659c8fee30c3"]},"commit2Childs":{"9fd61945b522c69b4bdd1a107f06659c8fee30c3":["5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2330174b38007b9942205a2679db9ddffe35af89":["9fd61945b522c69b4bdd1a107f06659c8fee30c3","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"2d76fc51e1f6bf807458c684a30c03be70be5c5f":["2330174b38007b9942205a2679db9ddffe35af89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d76fc51e1f6bf807458c684a30c03be70be5c5f"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}