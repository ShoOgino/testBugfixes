{"path":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","commits":[{"id":"b77550c47735d804ddb8767848f5af9b02b88c84","date":1162245631,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","pathOld":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,Directory).mjava","sourceNew":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n    }\n\n    IndexWriter iw = new IndexWriter(dir,new WhitespaceAnalyzer(), true);\n    iw.setMaxBufferedDocs(123);\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(freq[j]) == 0) {\n          d.add(new Field(\"f\", Character.toString((char)j), Field.Store.NO, Field.Index.UN_TOKENIZED));\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  public void createRandomTerms(int nDocs, int nTerms, Directory dir) throws Exception {\n    IndexWriter iw = new IndexWriter(dir,new WhitespaceAnalyzer(), true);\n    iw.setMaxBufferedDocs(123);\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(nTerms) <= j) {\n          d.add(new Field(\"f\", Character.toString((char)j), Field.Store.NO, Field.Index.UN_TOKENIZED));\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a251547210ad8523f10c15c461496a2ad4bb3df4","date":1195837134,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","pathOld":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","sourceNew":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir,new WhitespaceAnalyzer(), true);\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(freq[j]) == 0) {\n          d.add(new Field(\"f\", terms[j].text(), Field.Store.NO, Field.Index.UN_TOKENIZED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.optimize();\n    iw.close();\n  }\n\n","sourceOld":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n    }\n\n    IndexWriter iw = new IndexWriter(dir,new WhitespaceAnalyzer(), true);\n    iw.setMaxBufferedDocs(123);\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(freq[j]) == 0) {\n          d.add(new Field(\"f\", Character.toString((char)j), Field.Store.NO, Field.Index.UN_TOKENIZED));\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":["b77550c47735d804ddb8767848f5af9b02b88c84"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","pathOld":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","sourceNew":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir,new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(freq[j]) == 0) {\n          d.add(new Field(\"f\", terms[j].text(), Field.Store.NO, Field.Index.UN_TOKENIZED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.optimize();\n    iw.close();\n  }\n\n","sourceOld":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir,new WhitespaceAnalyzer(), true);\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(freq[j]) == 0) {\n          d.add(new Field(\"f\", terms[j].text(), Field.Store.NO, Field.Index.UN_TOKENIZED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.optimize();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","pathOld":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","sourceNew":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir,new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(freq[j]) == 0) {\n          d.add(new Field(\"f\", terms[j].text(), Field.Store.NO, Field.Index.NOT_ANALYZED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.optimize();\n    iw.close();\n  }\n\n","sourceOld":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir,new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(freq[j]) == 0) {\n          d.add(new Field(\"f\", terms[j].text(), Field.Store.NO, Field.Index.UN_TOKENIZED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.optimize();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","pathOld":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","sourceNew":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir,new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(freq[j]) == 0) {\n          d.add(new Field(\"f\", terms[j].text(), Field.Store.NO, Field.Index.NOT_ANALYZED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.optimize();\n    iw.close();\n  }\n\n","sourceOld":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir,new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(freq[j]) == 0) {\n          d.add(new Field(\"f\", terms[j].text(), Field.Store.NO, Field.Index.NOT_ANALYZED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.optimize();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","pathOld":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","sourceNew":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir,new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(freq[j]) == 0) {\n          d.add(new Field(\"f\", terms[j].text(), Field.Store.NO, Field.Index.NOT_ANALYZED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.optimize();\n    iw.close();\n  }\n\n","sourceOld":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir,new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(freq[j]) == 0) {\n          d.add(new Field(\"f\", terms[j].text(), Field.Store.NO, Field.Index.NOT_ANALYZED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.optimize();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","pathOld":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","sourceNew":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(freq[j]) == 0) {\n          d.add(new Field(\"f\", terms[j].text(), Field.Store.NO, Field.Index.NOT_ANALYZED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.optimize();\n    iw.close();\n  }\n\n","sourceOld":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir,new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(freq[j]) == 0) {\n          d.add(new Field(\"f\", terms[j].text(), Field.Store.NO, Field.Index.NOT_ANALYZED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.optimize();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","pathOld":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","sourceNew":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir,new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(freq[j]) == 0) {\n          d.add(new Field(\"f\", terms[j].text(), Field.Store.NO, Field.Index.NOT_ANALYZED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.optimize();\n    iw.close();\n  }\n\n","sourceOld":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(freq[j]) == 0) {\n          d.add(new Field(\"f\", terms[j].text(), Field.Store.NO, Field.Index.NOT_ANALYZED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.optimize();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","pathOld":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","sourceNew":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(freq[j]) == 0) {\n          d.add(new Field(\"f\", terms[j].text(), Field.Store.NO, Field.Index.NOT_ANALYZED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.optimize();\n    iw.close();\n  }\n\n","sourceOld":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir,new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(freq[j]) == 0) {\n          d.add(new Field(\"f\", terms[j].text(), Field.Store.NO, Field.Index.NOT_ANALYZED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.optimize();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","pathOld":"src/test/org/apache/lucene/search/TestScorerPerf#createRandomTerms(int,int,double,Directory).mjava","sourceNew":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(freq[j]) == 0) {\n          d.add(new Field(\"f\", terms[j].text(), Field.Store.NO, Field.Index.NOT_ANALYZED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.optimize();\n    iw.close();\n  }\n\n","sourceOld":"  public void createRandomTerms(int nDocs, int nTerms, double power, Directory dir) throws Exception {\n    int[] freq = new int[nTerms];\n    terms = new Term[nTerms];\n    for (int i=0; i<nTerms; i++) {\n      int f = (nTerms+1)-i;  // make first terms less frequent\n      freq[i] = (int)Math.ceil(Math.pow(f,power));\n      terms[i] = new Term(\"f\",Character.toString((char)('A'+i)));\n    }\n\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    for (int i=0; i<nDocs; i++) {\n      Document d = new Document();\n      for (int j=0; j<nTerms; j++) {\n        if (r.nextInt(freq[j]) == 0) {\n          d.add(new Field(\"f\", terms[j].text(), Field.Store.NO, Field.Index.NOT_ANALYZED));\n          //System.out.println(d);\n        }\n      }\n      iw.addDocument(d);\n    }\n    iw.optimize();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a251547210ad8523f10c15c461496a2ad4bb3df4":["b77550c47735d804ddb8767848f5af9b02b88c84"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"b77550c47735d804ddb8767848f5af9b02b88c84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a251547210ad8523f10c15c461496a2ad4bb3df4":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b77550c47735d804ddb8767848f5af9b02b88c84"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"b77550c47735d804ddb8767848f5af9b02b88c84":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}