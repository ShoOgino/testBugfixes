{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,IndexReader[],int[],ExecutorService).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,IndexReader[],int[],ExecutorService).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: directly specify the reader, subReaders and\n   *  their docID starts, and an ExecutorService.  In this\n   *  case, each segment will be separately searched using the\n   *  ExecutorService.  IndexSearcher will not\n   *  shutdown/awaitTermination this ExecutorService on\n   *  close; you must do so, eventually, on your own.  NOTE:\n   *  if you are using {@link NIOFSDirectory}, do not use\n   *  the shutdownNow method of ExecutorService as this uses\n   *  Thread.interrupt under-the-hood which can silently\n   *  close file descriptors (see <a\n   *  href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @lucene.experimental */\n  public IndexSearcher(IndexReader reader, IndexReader[] subReaders, int[] docStarts, ExecutorService executor) {\n    this.reader = reader;\n    this.subReaders = subReaders;\n    this.docStarts = docStarts;\n    subSearchers = new IndexSearcher[subReaders.length];\n    for(int i=0;i<subReaders.length;i++) {\n      subSearchers[i] = new IndexSearcher(subReaders[i]);\n    }\n    closeReader = false;\n    this.executor = executor;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,IndexReader[],int[],ExecutorService).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: directly specify the reader, subReaders and\n   *  their docID starts, and an ExecutorService.  In this\n   *  case, each segment will be separately searched using the\n   *  ExecutorService.  IndexSearcher will not\n   *  shutdown/awaitTermination this ExecutorService on\n   *  close; you must do so, eventually, on your own.  NOTE:\n   *  if you are using {@link NIOFSDirectory}, do not use\n   *  the shutdownNow method of ExecutorService as this uses\n   *  Thread.interrupt under-the-hood which can silently\n   *  close file descriptors (see <a\n   *  href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @lucene.experimental */\n  public IndexSearcher(IndexReader reader, IndexReader[] subReaders, int[] docStarts, ExecutorService executor) {\n    this.reader = reader;\n    this.subReaders = subReaders;\n    this.docStarts = docStarts;\n    subSearchers = new IndexSearcher[subReaders.length];\n    for(int i=0;i<subReaders.length;i++) {\n      subSearchers[i] = new IndexSearcher(subReaders[i]);\n    }\n    closeReader = false;\n    this.executor = executor;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,IndexReader[],int[],ExecutorService).mjava","sourceNew":null,"sourceOld":"  /** Expert: directly specify the reader, subReaders and\n   *  their docID starts, and an ExecutorService.  In this\n   *  case, each segment will be separately searched using the\n   *  ExecutorService.  IndexSearcher will not\n   *  shutdown/awaitTermination this ExecutorService on\n   *  close; you must do so, eventually, on your own.  NOTE:\n   *  if you are using {@link NIOFSDirectory}, do not use\n   *  the shutdownNow method of ExecutorService as this uses\n   *  Thread.interrupt under-the-hood which can silently\n   *  close file descriptors (see <a\n   *  href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @lucene.experimental */\n  public IndexSearcher(IndexReader reader, IndexReader[] subReaders, int[] docStarts, ExecutorService executor) {\n    this.reader = reader;\n    this.subReaders = subReaders;\n    this.docStarts = docStarts;\n    subSearchers = new IndexSearcher[subReaders.length];\n    for(int i=0;i<subReaders.length;i++) {\n      subSearchers[i] = new IndexSearcher(subReaders[i]);\n    }\n    closeReader = false;\n    this.executor = executor;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,IndexReader[],int[],ExecutorService).mjava","sourceNew":null,"sourceOld":"  /** Expert: directly specify the reader, subReaders and\n   *  their docID starts, and an ExecutorService.  In this\n   *  case, each segment will be separately searched using the\n   *  ExecutorService.  IndexSearcher will not\n   *  shutdown/awaitTermination this ExecutorService on\n   *  close; you must do so, eventually, on your own.  NOTE:\n   *  if you are using {@link NIOFSDirectory}, do not use\n   *  the shutdownNow method of ExecutorService as this uses\n   *  Thread.interrupt under-the-hood which can silently\n   *  close file descriptors (see <a\n   *  href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @lucene.experimental */\n  public IndexSearcher(IndexReader reader, IndexReader[] subReaders, int[] docStarts, ExecutorService executor) {\n    this.reader = reader;\n    this.subReaders = subReaders;\n    this.docStarts = docStarts;\n    subSearchers = new IndexSearcher[subReaders.length];\n    for(int i=0;i<subReaders.length;i++) {\n      subSearchers[i] = new IndexSearcher(subReaders[i]);\n    }\n    closeReader = false;\n    this.executor = executor;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}