{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#init(String,String,TupleStream,String,String,int).mjava","commits":[{"id":"5f21dc022708e502f89f154bdcf6dc53b9409aec","date":1476123629,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#init(String,String,TupleStream,String,String,int).mjava","pathOld":"/dev/null","sourceNew":"  private void init(String zkHost, String collection, TupleStream tupleStream, String on, String fieldList, int batchSize) throws IOException{\n    this.zkHost = zkHost;\n    this.collection = collection;\n    this.stream = tupleStream;\n    this.batchSize = batchSize;\n    this.fields = fieldList.split(\",\");\n    this.fieldList = fieldList;\n\n    if(on.indexOf(\"=\") > -1) {\n      String[] leftright = on.split(\"=\");\n      leftKey = leftright[0].trim();\n      rightKey = leftright[1].trim();\n    } else {\n      leftKey = rightKey = on;\n    }\n\n    for(int i=0; i<fields.length; i++) {\n      fields[i] = fields[i].trim();\n      if(fields[i].equals(\"_version_\")) {\n        appendVersion = false;\n      }\n\n      if(fields[i].equals(rightKey)) {\n        appendKey = false;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#init(String,String,TupleStream,String,String,int).mjava","pathOld":"/dev/null","sourceNew":"  private void init(String zkHost, String collection, TupleStream tupleStream, String on, String fieldList, int batchSize) throws IOException{\n    this.zkHost = zkHost;\n    this.collection = collection;\n    this.stream = tupleStream;\n    this.batchSize = batchSize;\n    this.fields = fieldList.split(\",\");\n    this.fieldList = fieldList;\n\n    if(on.indexOf(\"=\") > -1) {\n      String[] leftright = on.split(\"=\");\n      leftKey = leftright[0].trim();\n      rightKey = leftright[1].trim();\n    } else {\n      leftKey = rightKey = on;\n    }\n\n    for(int i=0; i<fields.length; i++) {\n      fields[i] = fields[i].trim();\n      if(fields[i].equals(\"_version_\")) {\n        appendVersion = false;\n      }\n\n      if(fields[i].equals(rightKey)) {\n        appendKey = false;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#init(String,String,TupleStream,String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#init(String,String,TupleStream,String,String,int).mjava","sourceNew":"  private void init(String zkHost, String collection, TupleStream tupleStream, String on, String fieldList, int batchSize) throws IOException{\n    this.zkHost = zkHost;\n    this.collection = collection;\n    this.stream = tupleStream;\n    this.batchSize = batchSize;\n    this.fields = fieldList.split(\",\");\n    this.fieldList = fieldList;\n\n    if(on.indexOf(\"=\") > -1) {\n      String[] leftright = on.split(\"=\");\n      leftKey = leftright[0].trim();\n      rightKey = leftright[1].trim();\n    } else {\n      leftKey = rightKey = on;\n    }\n\n    for(int i=0; i<fields.length; i++) {\n      fields[i] = fields[i].trim();\n      if(fields[i].equals(VERSION_FIELD)) {\n        appendVersion = false;\n      }\n\n      if(fields[i].equals(rightKey)) {\n        appendKey = false;\n      }\n    }\n  }\n\n","sourceOld":"  private void init(String zkHost, String collection, TupleStream tupleStream, String on, String fieldList, int batchSize) throws IOException{\n    this.zkHost = zkHost;\n    this.collection = collection;\n    this.stream = tupleStream;\n    this.batchSize = batchSize;\n    this.fields = fieldList.split(\",\");\n    this.fieldList = fieldList;\n\n    if(on.indexOf(\"=\") > -1) {\n      String[] leftright = on.split(\"=\");\n      leftKey = leftright[0].trim();\n      rightKey = leftright[1].trim();\n    } else {\n      leftKey = rightKey = on;\n    }\n\n    for(int i=0; i<fields.length; i++) {\n      fields[i] = fields[i].trim();\n      if(fields[i].equals(\"_version_\")) {\n        appendVersion = false;\n      }\n\n      if(fields[i].equals(rightKey)) {\n        appendKey = false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#init(String,String,TupleStream,String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#init(String,String,TupleStream,String,String,int).mjava","sourceNew":"  private void init(String zkHost, String collection, TupleStream tupleStream, String on, String fieldList, int batchSize) throws IOException{\n    this.zkHost = zkHost;\n    this.collection = collection;\n    this.stream = tupleStream;\n    this.batchSize = batchSize;\n    this.fields = fieldList.split(\",\");\n    this.fieldList = fieldList;\n\n    if(on.indexOf(\"=\") > -1) {\n      String[] leftright = on.split(\"=\");\n      leftKey = leftright[0].trim();\n      rightKey = leftright[1].trim();\n    } else {\n      leftKey = rightKey = on;\n    }\n\n    for(int i=0; i<fields.length; i++) {\n      fields[i] = fields[i].trim();\n      if(fields[i].equals(VERSION_FIELD)) {\n        appendVersion = false;\n      }\n\n      if(fields[i].equals(rightKey)) {\n        appendKey = false;\n      }\n    }\n  }\n\n","sourceOld":"  private void init(String zkHost, String collection, TupleStream tupleStream, String on, String fieldList, int batchSize) throws IOException{\n    this.zkHost = zkHost;\n    this.collection = collection;\n    this.stream = tupleStream;\n    this.batchSize = batchSize;\n    this.fields = fieldList.split(\",\");\n    this.fieldList = fieldList;\n\n    if(on.indexOf(\"=\") > -1) {\n      String[] leftright = on.split(\"=\");\n      leftKey = leftright[0].trim();\n      rightKey = leftright[1].trim();\n    } else {\n      leftKey = rightKey = on;\n    }\n\n    for(int i=0; i<fields.length; i++) {\n      fields[i] = fields[i].trim();\n      if(fields[i].equals(\"_version_\")) {\n        appendVersion = false;\n      }\n\n      if(fields[i].equals(rightKey)) {\n        appendKey = false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["5f21dc022708e502f89f154bdcf6dc53b9409aec"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["5f21dc022708e502f89f154bdcf6dc53b9409aec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f21dc022708e502f89f154bdcf6dc53b9409aec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f21dc022708e502f89f154bdcf6dc53b9409aec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6d2dadc1f5ca8703d8659f4964961f9967935d75"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f21dc022708e502f89f154bdcf6dc53b9409aec","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5f21dc022708e502f89f154bdcf6dc53b9409aec":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}