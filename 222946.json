{"path":"src/java/org/apache/solr/core/SolrCore#initValueSourceParsers().mjava","commits":[{"id":"1833c624d42634c14299628650e0a70626349a71","date":1204207883,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initValueSourceParsers().mjava","pathOld":"/dev/null","sourceNew":"  /** Configure the ValueSource (function) plugins */\n  private void initValueSourceParsers() {\n    String xpath = \"valueSourceParser\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n    NamedListPluginLoader<ValueSourceParser> loader =\n      new NamedListPluginLoader<ValueSourceParser>( \"[solrconfig.xml] \"+xpath, valueSourceParsers);\n\n    loader.load( solrConfig.getResourceLoader(), nodes );\n\n    // default value source parsers\n    for (Map.Entry<String, ValueSourceParser> entry : ValueSourceParser.standardValueSourceParsers.entrySet()) {\n      try {\n        String name = entry.getKey();\n        ValueSourceParser valueSourceParser = entry.getValue();\n        valueSourceParsers.put(name, valueSourceParser);\n        valueSourceParser.init(null);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9539806685e2ba386282310178c96551b9359753"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9539806685e2ba386282310178c96551b9359753","date":1220465000,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initValueSourceParsers().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initValueSourceParsers().mjava","sourceNew":"  /** Configure the ValueSource (function) plugins */\n  private void initValueSourceParsers() {\n    String xpath = \"valueSourceParser\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n    NamedListPluginLoader<ValueSourceParser> loader =\n      new NamedListPluginLoader<ValueSourceParser>( \"[solrconfig.xml] \"+xpath, valueSourceParsers);\n\n    loader.load( solrConfig.getResourceLoader(), nodes );\n\n    // default value source parsers\n    for (Map.Entry<String, ValueSourceParser> entry : ValueSourceParser.standardValueSourceParsers.entrySet()) {\n      try {\n        String name = entry.getKey();\n        if (null == valueSourceParsers.get(name)) {\n          ValueSourceParser valueSourceParser = entry.getValue();\n          valueSourceParsers.put(name, valueSourceParser);\n          valueSourceParser.init(null);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  /** Configure the ValueSource (function) plugins */\n  private void initValueSourceParsers() {\n    String xpath = \"valueSourceParser\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n    NamedListPluginLoader<ValueSourceParser> loader =\n      new NamedListPluginLoader<ValueSourceParser>( \"[solrconfig.xml] \"+xpath, valueSourceParsers);\n\n    loader.load( solrConfig.getResourceLoader(), nodes );\n\n    // default value source parsers\n    for (Map.Entry<String, ValueSourceParser> entry : ValueSourceParser.standardValueSourceParsers.entrySet()) {\n      try {\n        String name = entry.getKey();\n        ValueSourceParser valueSourceParser = entry.getValue();\n        valueSourceParsers.put(name, valueSourceParser);\n        valueSourceParser.init(null);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":["1833c624d42634c14299628650e0a70626349a71"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b338a77d735377ad6a2b02379ce3000377ff8631","date":1244447757,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initValueSourceParsers().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initValueSourceParsers().mjava","sourceNew":"  /** Configure the ValueSource (function) plugins */\n  private void initValueSourceParsers() {\n    initPlugins(solrConfig.getValueSourceParserInfo(),valueSourceParsers,ValueSourceParser.class);\n    // default value source parsers\n    for (Map.Entry<String, ValueSourceParser> entry : ValueSourceParser.standardValueSourceParsers.entrySet()) {\n      try {\n        String name = entry.getKey();\n        if (null == valueSourceParsers.get(name)) {\n          ValueSourceParser valueSourceParser = entry.getValue();\n          valueSourceParsers.put(name, valueSourceParser);\n          valueSourceParser.init(null);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  /** Configure the ValueSource (function) plugins */\n  private void initValueSourceParsers() {\n    String xpath = \"valueSourceParser\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n    NamedListPluginLoader<ValueSourceParser> loader =\n      new NamedListPluginLoader<ValueSourceParser>( \"[solrconfig.xml] \"+xpath, valueSourceParsers);\n\n    loader.load( solrConfig.getResourceLoader(), nodes );\n\n    // default value source parsers\n    for (Map.Entry<String, ValueSourceParser> entry : ValueSourceParser.standardValueSourceParsers.entrySet()) {\n      try {\n        String name = entry.getKey();\n        if (null == valueSourceParsers.get(name)) {\n          ValueSourceParser valueSourceParser = entry.getValue();\n          valueSourceParsers.put(name, valueSourceParser);\n          valueSourceParser.init(null);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28a016ae2abf4934515e45810192aa4350e3092b","date":1252309557,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initValueSourceParsers().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initValueSourceParsers().mjava","sourceNew":"  /** Configure the ValueSource (function) plugins */\n  private void initValueSourceParsers() {\n    initPlugins(valueSourceParsers,ValueSourceParser.class);\n    // default value source parsers\n    for (Map.Entry<String, ValueSourceParser> entry : ValueSourceParser.standardValueSourceParsers.entrySet()) {\n      try {\n        String name = entry.getKey();\n        if (null == valueSourceParsers.get(name)) {\n          ValueSourceParser valueSourceParser = entry.getValue();\n          valueSourceParsers.put(name, valueSourceParser);\n          valueSourceParser.init(null);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  /** Configure the ValueSource (function) plugins */\n  private void initValueSourceParsers() {\n    initPlugins(solrConfig.getValueSourceParserInfo(),valueSourceParsers,ValueSourceParser.class);\n    // default value source parsers\n    for (Map.Entry<String, ValueSourceParser> entry : ValueSourceParser.standardValueSourceParsers.entrySet()) {\n      try {\n        String name = entry.getKey();\n        if (null == valueSourceParsers.get(name)) {\n          ValueSourceParser valueSourceParser = entry.getValue();\n          valueSourceParsers.put(name, valueSourceParser);\n          valueSourceParser.init(null);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#initValueSourceParsers().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initValueSourceParsers().mjava","sourceNew":"  /** Configure the ValueSource (function) plugins */\n  private void initValueSourceParsers() {\n    initPlugins(valueSourceParsers,ValueSourceParser.class);\n    // default value source parsers\n    for (Map.Entry<String, ValueSourceParser> entry : ValueSourceParser.standardValueSourceParsers.entrySet()) {\n      try {\n        String name = entry.getKey();\n        if (null == valueSourceParsers.get(name)) {\n          ValueSourceParser valueSourceParser = entry.getValue();\n          valueSourceParsers.put(name, valueSourceParser);\n          valueSourceParser.init(null);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  /** Configure the ValueSource (function) plugins */\n  private void initValueSourceParsers() {\n    initPlugins(valueSourceParsers,ValueSourceParser.class);\n    // default value source parsers\n    for (Map.Entry<String, ValueSourceParser> entry : ValueSourceParser.standardValueSourceParsers.entrySet()) {\n      try {\n        String name = entry.getKey();\n        if (null == valueSourceParsers.get(name)) {\n          ValueSourceParser valueSourceParser = entry.getValue();\n          valueSourceParsers.put(name, valueSourceParser);\n          valueSourceParser.init(null);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9539806685e2ba386282310178c96551b9359753":["1833c624d42634c14299628650e0a70626349a71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["28a016ae2abf4934515e45810192aa4350e3092b"],"1833c624d42634c14299628650e0a70626349a71":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"28a016ae2abf4934515e45810192aa4350e3092b":["b338a77d735377ad6a2b02379ce3000377ff8631"],"b338a77d735377ad6a2b02379ce3000377ff8631":["9539806685e2ba386282310178c96551b9359753"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9539806685e2ba386282310178c96551b9359753":["b338a77d735377ad6a2b02379ce3000377ff8631"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["1833c624d42634c14299628650e0a70626349a71"],"1833c624d42634c14299628650e0a70626349a71":["9539806685e2ba386282310178c96551b9359753"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"28a016ae2abf4934515e45810192aa4350e3092b":["ad94625fb8d088209f46650c8097196fec67f00c"],"b338a77d735377ad6a2b02379ce3000377ff8631":["28a016ae2abf4934515e45810192aa4350e3092b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}