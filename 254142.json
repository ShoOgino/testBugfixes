{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTriangularDistribution().mjava","commits":[{"id":"c843f65abea63c05a03e40d712d391fe65183b2b","date":1509493927,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTriangularDistribution().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTriangularDistribution() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n        \"a=describe(sample(triangularDistribution(10, 15, 30),10000)), \" +\n        \"b=describe(sample(triangularDistribution(10, 25, 30),10000)), \" +\n        \")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map a = (Map)tuples.get(0).get(\"a\");\n    Map b = (Map)tuples.get(0).get(\"b\");\n\n    Number sa = (Number)a.get(\"skewness\");\n    Number sb = (Number)b.get(\"skewness\");\n\n    Number mina = (Number)a.get(\"min\");\n    Number maxa = (Number)a.get(\"max\");\n\n    assertTrue(sa.doubleValue() > 0);\n    assertTrue(sb.doubleValue() < 0);\n    assertEquals(mina.doubleValue(), 10, .5);\n    assertEquals(maxa.doubleValue(), 30, .5);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testTriangularDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTriangularDistribution().mjava","sourceNew":"  @Test\n  public void testTriangularDistribution() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n        \"a=describe(sample(triangularDistribution(10, 15, 30),10000)), \" +\n        \"b=describe(sample(triangularDistribution(10, 25, 30),10000)), \" +\n        \")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map a = (Map)tuples.get(0).get(\"a\");\n    Map b = (Map)tuples.get(0).get(\"b\");\n\n    Number sa = (Number)a.get(\"skewness\");\n    Number sb = (Number)b.get(\"skewness\");\n\n    Number mina = (Number)a.get(\"min\");\n    Number maxa = (Number)a.get(\"max\");\n\n    assertTrue(sa.doubleValue() > 0);\n    assertTrue(sb.doubleValue() < 0);\n    assertEquals(mina.doubleValue(), 10, .5);\n    assertEquals(maxa.doubleValue(), 30, .5);\n  }\n\n","sourceOld":"  @Test\n  public void testTriangularDistribution() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n        \"a=describe(sample(triangularDistribution(10, 15, 30),10000)), \" +\n        \"b=describe(sample(triangularDistribution(10, 25, 30),10000)), \" +\n        \")\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map a = (Map)tuples.get(0).get(\"a\");\n    Map b = (Map)tuples.get(0).get(\"b\");\n\n    Number sa = (Number)a.get(\"skewness\");\n    Number sb = (Number)b.get(\"skewness\");\n\n    Number mina = (Number)a.get(\"min\");\n    Number maxa = (Number)a.get(\"max\");\n\n    assertTrue(sa.doubleValue() > 0);\n    assertTrue(sb.doubleValue() < 0);\n    assertEquals(mina.doubleValue(), 10, .5);\n    assertEquals(maxa.doubleValue(), 30, .5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c843f65abea63c05a03e40d712d391fe65183b2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["c843f65abea63c05a03e40d712d391fe65183b2b"]},"commit2Childs":{"c843f65abea63c05a03e40d712d391fe65183b2b":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c843f65abea63c05a03e40d712d391fe65183b2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}