{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testObjectFormatter().mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testObjectFormatter().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-4906\n  public void testObjectFormatter() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test. Just a test highlighting from postings. Feel free to ignore.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new PassageFormatter() {\n          PassageFormatter defaultFormatter = new DefaultPassageFormatter();\n\n          @Override\n          public String[] format(Passage passages[], String content) {\n            // Just turns the String snippet into a length 2\n            // array of String\n            return new String[]{\"blah blah\", defaultFormatter.format(passages, content).toString()};\n          }\n        };\n      }\n    };\n\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    int[] docIDs = new int[1];\n    docIDs[0] = topDocs.scoreDocs[0].doc;\n    Map<String, Object[]> snippets = highlighter.highlightFieldsAsObjects(new String[]{\"body\"}, query, docIDs, new int[]{1});\n    Object[] bodySnippets = snippets.get(\"body\");\n    assertEquals(1, bodySnippets.length);\n    assertTrue(Arrays.equals(new String[]{\"blah blah\", \"Just a test <b>highlighting</b> from postings. \"}, (String[]) bodySnippets[0]));\n\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testObjectFormatter().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-4906\n  public void testObjectFormatter() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test. Just a test highlighting from postings. Feel free to ignore.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new PassageFormatter() {\n          PassageFormatter defaultFormatter = new DefaultPassageFormatter();\n\n          @Override\n          public String[] format(Passage passages[], String content) {\n            // Just turns the String snippet into a length 2\n            // array of String\n            return new String[]{\"blah blah\", defaultFormatter.format(passages, content).toString()};\n          }\n        };\n      }\n    };\n\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    int[] docIDs = new int[1];\n    docIDs[0] = topDocs.scoreDocs[0].doc;\n    Map<String, Object[]> snippets = highlighter.highlightFieldsAsObjects(new String[]{\"body\"}, query, docIDs, new int[]{1});\n    Object[] bodySnippets = snippets.get(\"body\");\n    assertEquals(1, bodySnippets.length);\n    assertTrue(Arrays.equals(new String[]{\"blah blah\", \"Just a test <b>highlighting</b> from postings. \"}, (String[]) bodySnippets[0]));\n\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testObjectFormatter().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testObjectFormatter().mjava","sourceNew":"  // LUCENE-4906\n  public void testObjectFormatter() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test. Just a test highlighting from postings. Feel free to ignore.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new PassageFormatter() {\n          PassageFormatter defaultFormatter = new DefaultPassageFormatter();\n\n          @Override\n          public String[] format(Passage passages[], String content) {\n            // Just turns the String snippet into a length 2\n            // array of String\n            return new String[]{\"blah blah\", defaultFormatter.format(passages, content).toString()};\n          }\n        };\n      }\n    };\n\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits.value);\n    int[] docIDs = new int[1];\n    docIDs[0] = topDocs.scoreDocs[0].doc;\n    Map<String, Object[]> snippets = highlighter.highlightFieldsAsObjects(new String[]{\"body\"}, query, docIDs, new int[]{1});\n    Object[] bodySnippets = snippets.get(\"body\");\n    assertEquals(1, bodySnippets.length);\n    assertTrue(Arrays.equals(new String[]{\"blah blah\", \"Just a test <b>highlighting</b> from postings. \"}, (String[]) bodySnippets[0]));\n\n    ir.close();\n  }\n\n","sourceOld":"  // LUCENE-4906\n  public void testObjectFormatter() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test. Just a test highlighting from postings. Feel free to ignore.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new PassageFormatter() {\n          PassageFormatter defaultFormatter = new DefaultPassageFormatter();\n\n          @Override\n          public String[] format(Passage passages[], String content) {\n            // Just turns the String snippet into a length 2\n            // array of String\n            return new String[]{\"blah blah\", defaultFormatter.format(passages, content).toString()};\n          }\n        };\n      }\n    };\n\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    int[] docIDs = new int[1];\n    docIDs[0] = topDocs.scoreDocs[0].doc;\n    Map<String, Object[]> snippets = highlighter.highlightFieldsAsObjects(new String[]{\"body\"}, query, docIDs, new int[]{1});\n    Object[] bodySnippets = snippets.get(\"body\");\n    assertEquals(1, bodySnippets.length);\n    assertTrue(Arrays.equals(new String[]{\"blah blah\", \"Just a test <b>highlighting</b> from postings. \"}, (String[]) bodySnippets[0]));\n\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["83788ad129a5154d5c6562c4e8ce3db48793aada","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}