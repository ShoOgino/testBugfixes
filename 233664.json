{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","sourceNew":"     /** Parses a query string, returning a {@link org.apache.lucene.queryParser.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new StringReader(query.toString()));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","sourceOld":"     /** Parses a query string, returning a {@link org.apache.lucene.queryParser.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new StringReader(query.toString()));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f03d60547476e008d3d993cd26872c1157f19cf","date":1270899773,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","sourceNew":"     /** Parses a query string, returning a {@link org.apache.lucene.queryParser.core.nodes.QueryNode}.\r\n     *  @param query  the query string to be parsed.\r\n     *  @throws ParseException if the parsing fails\r\n     */\r\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\r\n      ReInit(new StringReader(query.toString()));\r\n      try {\r\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\r\n        QueryNode querynode = TopLevelQuery(field);\r\n        return querynode;\r\n      }\r\n      catch (ParseException tme) {\r\n            tme.setQuery(query);\r\n            throw tme;\r\n      }\r\n      catch (Error tme) {\r\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\r\n          QueryNodeParseException e = new QueryNodeParseException(tme);\r\n            e.setQuery(query);\r\n            e.setNonLocalizedMessage(message);\r\n            throw e;\r\n      }\r\n    }\r\n\n","sourceOld":"     /** Parses a query string, returning a {@link org.apache.lucene.queryParser.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new StringReader(query.toString()));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b","date":1270900166,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","sourceNew":"     /** Parses a query string, returning a {@link org.apache.lucene.queryParser.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new StringReader(query.toString()));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","sourceOld":"     /** Parses a query string, returning a {@link org.apache.lucene.queryParser.core.nodes.QueryNode}.\r\n     *  @param query  the query string to be parsed.\r\n     *  @throws ParseException if the parsing fails\r\n     */\r\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\r\n      ReInit(new StringReader(query.toString()));\r\n      try {\r\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\r\n        QueryNode querynode = TopLevelQuery(field);\r\n        return querynode;\r\n      }\r\n      catch (ParseException tme) {\r\n            tme.setQuery(query);\r\n            throw tme;\r\n      }\r\n      catch (Error tme) {\r\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\r\n          QueryNodeParseException e = new QueryNodeParseException(tme);\r\n            e.setQuery(query);\r\n            e.setNonLocalizedMessage(message);\r\n            throw e;\r\n      }\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","sourceNew":"     /** Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new StringReader(query.toString()));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","sourceOld":"     /** Parses a query string, returning a {@link org.apache.lucene.queryParser.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new StringReader(query.toString()));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["1f03d60547476e008d3d993cd26872c1157f19cf"],"1f03d60547476e008d3d993cd26872c1157f19cf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"1f03d60547476e008d3d993cd26872c1157f19cf":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f03d60547476e008d3d993cd26872c1157f19cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}