{"path":"solr/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs, \n      SolrIndexSearcher searcher, \n      Set<String> fields, \n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs, \n      SolrIndexSearcher searcher, \n      Set<String> fields, \n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs, \n      SolrIndexSearcher searcher, \n      Set<String> fields, \n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs, \n      SolrIndexSearcher searcher, \n      Set<String> fields, \n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs, \n      SolrIndexSearcher searcher, \n      Set<String> fields, \n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd00dd91853514614379b0e680d65bd19cac0f30","date":1283087816,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs, \n      SolrIndexSearcher searcher, \n      Set<String> fields, \n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs, \n      SolrIndexSearcher searcher, \n      Set<String> fields, \n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],Map[SolrDocument,Integer]).mjava","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields,\n      Map<SolrDocument, Integer> ids ) throws IOException\n  {\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["cd00dd91853514614379b0e680d65bd19cac0f30"],"c26f00b574427b55127e869b935845554afde1fa":["cd00dd91853514614379b0e680d65bd19cac0f30","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["cd00dd91853514614379b0e680d65bd19cac0f30"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","cd00dd91853514614379b0e680d65bd19cac0f30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"cd00dd91853514614379b0e680d65bd19cac0f30":["1da8d55113b689b06716246649de6f62430f15c0"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd00dd91853514614379b0e680d65bd19cac0f30"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd00dd91853514614379b0e680d65bd19cac0f30":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}