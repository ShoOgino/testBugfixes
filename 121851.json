{"path":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = params.get(ClusteringParams.ENGINE_NAME, ClusteringEngine.DEFAULT_ENGINE_NAME);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Object clusters = engine.cluster(rb.getQuery(), results.docList, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","sourceNew":null,"sourceOld":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = params.get(ClusteringParams.ENGINE_NAME, ClusteringEngine.DEFAULT_ENGINE_NAME);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Object clusters = engine.cluster(rb.getQuery(), results.docList, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","sourceNew":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = params.get(ClusteringParams.ENGINE_NAME, ClusteringEngine.DEFAULT_ENGINE_NAME);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Object clusters = engine.cluster(rb.getQuery(), results.docList, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = params.get(ClusteringParams.ENGINE_NAME, ClusteringEngine.DEFAULT_ENGINE_NAME);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Object clusters = engine.cluster(rb.getQuery(), results.docList, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = params.get(ClusteringParams.ENGINE_NAME, ClusteringEngine.DEFAULT_ENGINE_NAME);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Object clusters = engine.cluster(rb.getQuery(), results.docList, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5684446f7742dfb07c42296decc5e4d6515a0fe","date":1292978807,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(results.docList.size());\n        SolrDocumentList solrDocList = engine.getSolrDocumentList(results.docList, rb.req, docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = params.get(ClusteringParams.ENGINE_NAME, ClusteringEngine.DEFAULT_ENGINE_NAME);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Object clusters = engine.cluster(rb.getQuery(), results.docList, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc5ecd93bcd50b2199757091d526fc1bcbce0db1","date":1293154244,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(results.docList.size());\n        SolrDocumentList solrDocList = engine.getSolrDocumentList(results.docList, rb.req, docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = params.get(ClusteringParams.ENGINE_NAME, ClusteringEngine.DEFAULT_ENGINE_NAME);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Object clusters = engine.cluster(rb.getQuery(), results.docList, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(results.docList.size());\n        SolrDocumentList solrDocList = engine.getSolrDocumentList(results.docList, rb.req, docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = params.get(ClusteringParams.ENGINE_NAME, ClusteringEngine.DEFAULT_ENGINE_NAME);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Object clusters = engine.cluster(rb.getQuery(), results.docList, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(results.docList.size());\n        SolrDocumentList solrDocList = engine.getSolrDocumentList(results.docList, rb.req, docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(results.docList.size());\n        SolrDocumentList solrDocList = engine.getSolrDocumentList(results.docList, rb.req, docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(results.docList.size());\n        SolrDocumentList solrDocList = engine.getSolrDocumentList(results.docList, rb.req, docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(results.docList.size());\n        SolrDocumentList solrDocList = engine.getSolrDocumentList(results.docList, rb.req, docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","a5684446f7742dfb07c42296decc5e4d6515a0fe"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["1da8d55113b689b06716246649de6f62430f15c0","a5684446f7742dfb07c42296decc5e4d6515a0fe"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a5684446f7742dfb07c42296decc5e4d6515a0fe","a5684446f7742dfb07c42296decc5e4d6515a0fe"],"c26f00b574427b55127e869b935845554afde1fa":["a5684446f7742dfb07c42296decc5e4d6515a0fe","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a5684446f7742dfb07c42296decc5e4d6515a0fe":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","a5684446f7742dfb07c42296decc5e4d6515a0fe"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"a5684446f7742dfb07c42296decc5e4d6515a0fe":["70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}