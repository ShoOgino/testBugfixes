{"path":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PostingsHighlighter#PostingsHighlighter(int,BreakIterator,PassageScorer,PassageFormatter).mjava","commits":[{"id":"8bb94551de83b33535d086e8d4222fa6d0c4cfc0","date":1357181547,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PostingsHighlighter#PostingsHighlighter(int,BreakIterator,PassageScorer,PassageFormatter).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PostingsHighlighter#PostingsHighlighter(String,int,BreakIterator,PassageScorer,PassageFormatter).mjava","sourceNew":"  /**\n   * Creates a new highlighter with custom parameters.\n   * @param maxLength maximum content size to process.\n   * @param breakIterator used for finding passage boundaries.\n   * @param scorer used for ranking passages.\n   * @param formatter used for formatting passages into highlighted snippets.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength, BreakIterator breakIterator, PassageScorer scorer, PassageFormatter formatter) {\n    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n    this.scorer = scorer;\n    this.formatter = formatter;\n  }\n\n","sourceOld":"  public PostingsHighlighter(String field, int maxLength, BreakIterator breakIterator, PassageScorer scorer, PassageFormatter formatter) {\n    this.field = field;\n    if (maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n    this.scorer = scorer;\n    this.formatter = formatter;\n    floor = new Term(field, \"\");\n    ceiling = new Term(field, UnicodeUtil.BIG_TERM);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b4e7fee75084ba5e75244a313c9fe12bd23fdc9","date":1357184916,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PostingsHighlighter#PostingsHighlighter(int,BreakIterator,PassageScorer,PassageFormatter).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PostingsHighlighter#PostingsHighlighter(int,BreakIterator,PassageScorer,PassageFormatter).mjava","sourceNew":"  /**\n   * Creates a new highlighter with custom parameters.\n   * @param maxLength maximum content size to process.\n   * @param breakIterator used for finding passage boundaries.\n   * @param scorer used for ranking passages.\n   * @param formatter used for formatting passages into highlighted snippets.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength, BreakIterator breakIterator, PassageScorer scorer, PassageFormatter formatter) {\n    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    if (breakIterator == null || scorer == null || formatter == null) {\n      throw new NullPointerException();\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n    this.scorer = scorer;\n    this.formatter = formatter;\n  }\n\n","sourceOld":"  /**\n   * Creates a new highlighter with custom parameters.\n   * @param maxLength maximum content size to process.\n   * @param breakIterator used for finding passage boundaries.\n   * @param scorer used for ranking passages.\n   * @param formatter used for formatting passages into highlighted snippets.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength, BreakIterator breakIterator, PassageScorer scorer, PassageFormatter formatter) {\n    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n    this.scorer = scorer;\n    this.formatter = formatter;\n  }\n\n","bugFix":null,"bugIntro":["972114e06584faaa995de366083936dc77203773"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b3d16cba9355e2e97962eb1c441bbd0b6735c15","date":1357426290,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int,BreakIterator,PassageScorer,PassageFormatter).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PostingsHighlighter#PostingsHighlighter(int,BreakIterator,PassageScorer,PassageFormatter).mjava","sourceNew":"  /**\n   * Creates a new highlighter with custom parameters.\n   * @param maxLength maximum content size to process.\n   * @param breakIterator used for finding passage boundaries.\n   * @param scorer used for ranking passages.\n   * @param formatter used for formatting passages into highlighted snippets.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength, BreakIterator breakIterator, PassageScorer scorer, PassageFormatter formatter) {\n    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    if (breakIterator == null || scorer == null || formatter == null) {\n      throw new NullPointerException();\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n    this.scorer = scorer;\n    this.formatter = formatter;\n  }\n\n","sourceOld":"  /**\n   * Creates a new highlighter with custom parameters.\n   * @param maxLength maximum content size to process.\n   * @param breakIterator used for finding passage boundaries.\n   * @param scorer used for ranking passages.\n   * @param formatter used for formatting passages into highlighted snippets.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength, BreakIterator breakIterator, PassageScorer scorer, PassageFormatter formatter) {\n    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    if (breakIterator == null || scorer == null || formatter == null) {\n      throw new NullPointerException();\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n    this.scorer = scorer;\n    this.formatter = formatter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["2b4e7fee75084ba5e75244a313c9fe12bd23fdc9"],"2b4e7fee75084ba5e75244a313c9fe12bd23fdc9":["8bb94551de83b33535d086e8d4222fa6d0c4cfc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bb94551de83b33535d086e8d4222fa6d0c4cfc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b3d16cba9355e2e97962eb1c441bbd0b6735c15"]},"commit2Childs":{"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2b4e7fee75084ba5e75244a313c9fe12bd23fdc9":["4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8bb94551de83b33535d086e8d4222fa6d0c4cfc0"],"8bb94551de83b33535d086e8d4222fa6d0c4cfc0":["2b4e7fee75084ba5e75244a313c9fe12bd23fdc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}