{"path":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    Random random = newRandom();\n    MockRAMDirectory dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    Random random = newRandom();\n    MockRAMDirectory dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools() throws Exception {\n    IndexableField binaryFldCompressed = new BinaryField(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    IndexableField stringFldCompressed = new BinaryField(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools() throws Exception {\n    IndexableField binaryFldCompressed = new StoredField(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    IndexableField stringFldCompressed = new StoredField(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools() throws Exception {\n    IndexableField binaryFldCompressed = new BinaryField(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    IndexableField stringFldCompressed = new BinaryField(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools() throws Exception {\n    IndexableField binaryFldCompressed = new StoredField(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    IndexableField stringFldCompressed = new StoredField(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools() throws Exception {\n    IndexableField binaryFldCompressed = new StoredField(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    IndexableField stringFldCompressed = new StoredField(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"fa0f44f887719e97183771e977cfc4bfb485b766":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"d572389229127c297dd1fa5ce4758e1cec41e799":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"c084e47df29de3330311d69dabf515ceaa989512":["4b103252dee6afa1b6d7a622c773d178788eb85a","15bbd254c1506df5299c4df8c148262c7bd6301e","5f4e87790277826a2aea119328600dfb07761f32"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["fa0f44f887719e97183771e977cfc4bfb485b766"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}