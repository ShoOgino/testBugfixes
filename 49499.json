{"path":"solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest#testFindUnhealthyCores().mjava","commits":[{"id":"1949be020da305d0d64d348458ac933994b52e8d","date":1586255171,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest#testFindUnhealthyCores().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFindUnhealthyCores() throws Exception {\n    // Simulate two nodes, with two collections:\n    //  node1: collection1 -> shard1: [ replica1 (active), replica3 (down) ]\n    //         collection2 -> shard1: [ replica2 (recovering) ]\n    //  node2: collection1 -> shard1: [ replica2 (active), replica4 (down) ]\n    //         collection2 -> shard1: [ replica1 (active) ]\n    try (ZkStateReader reader = ClusterStateMockUtil.buildClusterState(\n        \"csrr2rDr2Dcsr2FrR\", 1, 1, \"node1\", \"node2\")) {\n      ClusterState clusterState = reader.getClusterState();\n\n      // Node 1\n      Collection<CloudDescriptor> node1Cores = Arrays.asList(\n          mockCD(\"collection1\", \"slice1_replica1\", \"slice1\", true, Replica.State.ACTIVE),\n          mockCD(\"collection1\", \"slice1_replica3\", \"slice1\", true, Replica.State.DOWN),\n          mockCD(\"collection2\", \"slice1_replica5\", \"slice1\", true, Replica.State.RECOVERING),\n          // A dangling core for a non-existant collection will not fail the check\n          mockCD(\"invalid\", \"invalid\", \"slice1\", false, Replica.State.RECOVERING),\n          // A core for a slice that is not an active slice will not fail the check\n          mockCD(\"collection1\", \"invalid_replica1\", \"invalid\", true, Replica.State.DOWN)\n      );\n      long unhealthy1 = HealthCheckHandler.findUnhealthyCores(node1Cores, clusterState);\n      assertEquals(2, unhealthy1);\n\n      // Node 2\n      Collection<CloudDescriptor> node2Cores = Arrays.asList(\n          mockCD(\"collection1\", \"slice1_replica2\", \"slice1\", true, Replica.State.ACTIVE),\n          mockCD(\"collection1\", \"slice1_replica4\", \"slice1\", true, Replica.State.DOWN),\n          mockCD(\"collection2\", \"slice1_replica1\", \"slice1\", true, Replica.State.RECOVERY_FAILED)\n      );\n      long unhealthy2 = HealthCheckHandler.findUnhealthyCores(node2Cores, clusterState);\n      assertEquals(1, unhealthy2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest#testFindUnhealthyCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest#testFindUnhealthyCores().mjava","sourceNew":"  @Test\n  public void testFindUnhealthyCores() throws Exception {\n    // Simulate two nodes, with two collections:\n    //  node1: collection1 -> shard1: [ replica1 (active), replica3 (down) ]\n    //         collection2 -> shard1: [ replica2 (recovering) ]\n    //  node2: collection1 -> shard1: [ replica2 (active), replica4 (down) ]\n    //         collection2 -> shard1: [ replica1 (active) ]\n    try (ZkStateReader reader = ClusterStateMockUtil.buildClusterState(\n        \"csrr2rDr2Dcsr2FrR\", 1, \"node1\", \"node2\")) {\n      ClusterState clusterState = reader.getClusterState();\n\n      // Node 1\n      Collection<CloudDescriptor> node1Cores = Arrays.asList(\n          mockCD(\"collection1\", \"slice1_replica1\", \"slice1\", true, Replica.State.ACTIVE),\n          mockCD(\"collection1\", \"slice1_replica3\", \"slice1\", true, Replica.State.DOWN),\n          mockCD(\"collection2\", \"slice1_replica5\", \"slice1\", true, Replica.State.RECOVERING),\n          // A dangling core for a non-existant collection will not fail the check\n          mockCD(\"invalid\", \"invalid\", \"slice1\", false, Replica.State.RECOVERING),\n          // A core for a slice that is not an active slice will not fail the check\n          mockCD(\"collection1\", \"invalid_replica1\", \"invalid\", true, Replica.State.DOWN)\n      );\n      long unhealthy1 = HealthCheckHandler.findUnhealthyCores(node1Cores, clusterState);\n      assertEquals(2, unhealthy1);\n\n      // Node 2\n      Collection<CloudDescriptor> node2Cores = Arrays.asList(\n          mockCD(\"collection1\", \"slice1_replica2\", \"slice1\", true, Replica.State.ACTIVE),\n          mockCD(\"collection1\", \"slice1_replica4\", \"slice1\", true, Replica.State.DOWN),\n          mockCD(\"collection2\", \"slice1_replica1\", \"slice1\", true, Replica.State.RECOVERY_FAILED)\n      );\n      long unhealthy2 = HealthCheckHandler.findUnhealthyCores(node2Cores, clusterState);\n      assertEquals(1, unhealthy2);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFindUnhealthyCores() throws Exception {\n    // Simulate two nodes, with two collections:\n    //  node1: collection1 -> shard1: [ replica1 (active), replica3 (down) ]\n    //         collection2 -> shard1: [ replica2 (recovering) ]\n    //  node2: collection1 -> shard1: [ replica2 (active), replica4 (down) ]\n    //         collection2 -> shard1: [ replica1 (active) ]\n    try (ZkStateReader reader = ClusterStateMockUtil.buildClusterState(\n        \"csrr2rDr2Dcsr2FrR\", 1, 1, \"node1\", \"node2\")) {\n      ClusterState clusterState = reader.getClusterState();\n\n      // Node 1\n      Collection<CloudDescriptor> node1Cores = Arrays.asList(\n          mockCD(\"collection1\", \"slice1_replica1\", \"slice1\", true, Replica.State.ACTIVE),\n          mockCD(\"collection1\", \"slice1_replica3\", \"slice1\", true, Replica.State.DOWN),\n          mockCD(\"collection2\", \"slice1_replica5\", \"slice1\", true, Replica.State.RECOVERING),\n          // A dangling core for a non-existant collection will not fail the check\n          mockCD(\"invalid\", \"invalid\", \"slice1\", false, Replica.State.RECOVERING),\n          // A core for a slice that is not an active slice will not fail the check\n          mockCD(\"collection1\", \"invalid_replica1\", \"invalid\", true, Replica.State.DOWN)\n      );\n      long unhealthy1 = HealthCheckHandler.findUnhealthyCores(node1Cores, clusterState);\n      assertEquals(2, unhealthy1);\n\n      // Node 2\n      Collection<CloudDescriptor> node2Cores = Arrays.asList(\n          mockCD(\"collection1\", \"slice1_replica2\", \"slice1\", true, Replica.State.ACTIVE),\n          mockCD(\"collection1\", \"slice1_replica4\", \"slice1\", true, Replica.State.DOWN),\n          mockCD(\"collection2\", \"slice1_replica1\", \"slice1\", true, Replica.State.RECOVERY_FAILED)\n      );\n      long unhealthy2 = HealthCheckHandler.findUnhealthyCores(node2Cores, clusterState);\n      assertEquals(1, unhealthy2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1949be020da305d0d64d348458ac933994b52e8d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["1949be020da305d0d64d348458ac933994b52e8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"1949be020da305d0d64d348458ac933994b52e8d":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1949be020da305d0d64d348458ac933994b52e8d"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}