{"path":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#findInTable(short,char[]).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#findInTable(short,char[]).mjava","pathOld":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#findInTable(short,char[]).mjava","sourceNew":"  /**\n   * Look up the text string corresponding with the word char array, \n   * and return the position of the word list.\n   * \n   * @param knownHashIndex already figure out position of the first word \n   *   symbol charArray[0] in hash table. If not calculated yet, can be \n   *   replaced with function int findInTable(char[] charArray).\n   * @param charArray look up the char array corresponding with the word.\n   * @return word location in word array.  If not found, then return -1.\n   */\n  private int findInTable(short knownHashIndex, char[] charArray) {\n    if (charArray == null || charArray.length == 0)\n      return -1;\n\n    char[][] items = wordItem_charArrayTable[wordIndexTable[knownHashIndex]];\n    int start = 0, end = items.length - 1;\n    int mid = (start + end) / 2, cmpResult;\n\n    // Binary search for the index of idArray\n    while (start <= end) {\n      cmpResult = Utility.compareArray(items[mid], 0, charArray, 1);\n\n      if (cmpResult == 0)\n        return mid;// find it\n      else if (cmpResult < 0)\n        start = mid + 1;\n      else if (cmpResult > 0)\n        end = mid - 1;\n\n      mid = (start + end) / 2;\n    }\n    return -1;\n  }\n\n","sourceOld":"  /**\n   * Look up the text string corresponding with the word char array, \n   * and return the position of the word list.\n   * \n   * @param knownHashIndex already figure out position of the first word \n   *   symbol charArray[0] in hash table. If not calculated yet, can be \n   *   replaced with function int findInTable(char[] charArray).\n   * @param charArray look up the char array corresponding with the word.\n   * @return word location in word array.  If not found, then return -1.\n   */\n  private int findInTable(short knownHashIndex, char[] charArray) {\n    if (charArray == null || charArray.length == 0)\n      return -1;\n\n    char[][] items = wordItem_charArrayTable[wordIndexTable[knownHashIndex]];\n    int start = 0, end = items.length - 1;\n    int mid = (start + end) / 2, cmpResult;\n\n    // Binary search for the index of idArray\n    while (start <= end) {\n      cmpResult = Utility.compareArray(items[mid], 0, charArray, 1);\n\n      if (cmpResult == 0)\n        return mid;// find it\n      else if (cmpResult < 0)\n        start = mid + 1;\n      else if (cmpResult > 0)\n        end = mid - 1;\n\n      mid = (start + end) / 2;\n    }\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#findInTable(short,char[]).mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#findInTable(short,char[]).mjava","sourceNew":"  /**\n   * Look up the text string corresponding with the word char array, \n   * and return the position of the word list.\n   * \n   * @param knownHashIndex already figure out position of the first word \n   *   symbol charArray[0] in hash table. If not calculated yet, can be \n   *   replaced with function int findInTable(char[] charArray).\n   * @param charArray look up the char array corresponding with the word.\n   * @return word location in word array.  If not found, then return -1.\n   */\n  private int findInTable(short knownHashIndex, char[] charArray) {\n    if (charArray == null || charArray.length == 0)\n      return -1;\n\n    char[][] items = wordItem_charArrayTable[wordIndexTable[knownHashIndex]];\n    int start = 0, end = items.length - 1;\n    int mid = (start + end) / 2, cmpResult;\n\n    // Binary search for the index of idArray\n    while (start <= end) {\n      cmpResult = Utility.compareArray(items[mid], 0, charArray, 1);\n\n      if (cmpResult == 0)\n        return mid;// find it\n      else if (cmpResult < 0)\n        start = mid + 1;\n      else if (cmpResult > 0)\n        end = mid - 1;\n\n      mid = (start + end) / 2;\n    }\n    return -1;\n  }\n\n","sourceOld":"  /**\n   * Look up the text string corresponding with the word char array, \n   * and return the position of the word list.\n   * \n   * @param knownHashIndex already figure out position of the first word \n   *   symbol charArray[0] in hash table. If not calculated yet, can be \n   *   replaced with function int findInTable(char[] charArray).\n   * @param charArray look up the char array corresponding with the word.\n   * @return word location in word array.  If not found, then return -1.\n   */\n  private int findInTable(short knownHashIndex, char[] charArray) {\n    if (charArray == null || charArray.length == 0)\n      return -1;\n\n    char[][] items = wordItem_charArrayTable[wordIndexTable[knownHashIndex]];\n    int start = 0, end = items.length - 1;\n    int mid = (start + end) / 2, cmpResult;\n\n    // Binary search for the index of idArray\n    while (start <= end) {\n      cmpResult = Utility.compareArray(items[mid], 0, charArray, 1);\n\n      if (cmpResult == 0)\n        return mid;// find it\n      else if (cmpResult < 0)\n        start = mid + 1;\n      else if (cmpResult > 0)\n        end = mid - 1;\n\n      mid = (start + end) / 2;\n    }\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}