{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/NodePreferenceRulesComparator#NodePreferenceRulesComparator(List[PreferenceRule],SolrParams,String,String,NodesSysPropsCacher,ReplicaListTransformerFactory,ReplicaListTransformerFactory).mjava","commits":[{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/NodePreferenceRulesComparator#NodePreferenceRulesComparator(List[PreferenceRule],SolrParams,String,String,NodesSysPropsCacher,ReplicaListTransformerFactory,ReplicaListTransformerFactory).mjava","pathOld":"/dev/null","sourceNew":"  public NodePreferenceRulesComparator(final List<PreferenceRule> preferenceRules, final SolrParams requestParams,\n      final String nodeName, final String localHostAddress, final NodesSysPropsCacher sysPropsCache,\n      final ReplicaListTransformerFactory defaultRltFactory, final ReplicaListTransformerFactory stableRltFactory) {\n    this.sysPropsCache = sysPropsCache;\n    this.preferenceRules = preferenceRules;\n    this.nodeName = nodeName;\n    this.localHostAddress = localHostAddress;\n    final int maxIdx = preferenceRules.size() - 1;\n    final PreferenceRule lastRule = preferenceRules.get(maxIdx);\n    if (!ShardParams.SHARDS_PREFERENCE_REPLICA_BASE.equals(lastRule.name)) {\n      this.sortRules = preferenceRules;\n      this.baseReplicaListTransformer = defaultRltFactory.getInstance(null, requestParams, RequestReplicaListTransformerGenerator.RANDOM_RLTF);\n    } else {\n      if (maxIdx == 0) {\n        this.sortRules = null;\n      } else {\n        this.sortRules = preferenceRules.subList(0, maxIdx);\n      }\n      String[] parts = lastRule.value.split(\":\", 2);\n      switch (parts[0]) {\n        case ShardParams.REPLICA_RANDOM:\n          this.baseReplicaListTransformer = RequestReplicaListTransformerGenerator.RANDOM_RLTF.getInstance(parts.length == 1 ? null : parts[1], requestParams, null);\n          break;\n        case ShardParams.REPLICA_STABLE:\n          this.baseReplicaListTransformer = stableRltFactory.getInstance(parts.length == 1 ? null : parts[1], requestParams, RequestReplicaListTransformerGenerator.RANDOM_RLTF);\n          break;\n        default:\n          throw new IllegalArgumentException(\"Invalid base replica order spec\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"833432c363468a5df50f87446a68015404b1fbcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["833432c363468a5df50f87446a68015404b1fbcf"]},"commit2Childs":{"833432c363468a5df50f87446a68015404b1fbcf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["833432c363468a5df50f87446a68015404b1fbcf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}