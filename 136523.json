{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#setAllowCompression(boolean).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#setAllowCompression(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#setAllowCompression(boolean).mjava","sourceNew":"  /**\n   * Allow server->client communication to be compressed. Currently gzip and\n   * deflate are supported. If the server supports compression the response will\n   * be compressed. This method is only allowed if the http client is of type\n   * DefatulHttpClient.\n   */\n  public void setAllowCompression(boolean allowCompression) {\n    if (httpClient instanceof DefaultHttpClient) {\n      HttpClientUtil.setAllowCompression((DefaultHttpClient) httpClient, allowCompression);\n    } else {\n      throw new UnsupportedOperationException(\n          \"HttpClient instance was not of type DefaultHttpClient\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Allow server->client communication to be compressed. Currently gzip and\n   * deflate are supported. If the server supports compression the response will\n   * be compressed. This method is only allowed if the http client is of type\n   * DefatulHttpClient.\n   */\n  public void setAllowCompression(boolean allowCompression) {\n    if (httpClient instanceof DefaultHttpClient) {\n      HttpClientUtil.setAllowCompression((DefaultHttpClient) httpClient, allowCompression);\n    } else {\n      throw new UnsupportedOperationException(\n          \"HttpClient instance was not of type DefaultHttpClient\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#setAllowCompression(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#setAllowCompression(boolean).mjava","sourceNew":"  /**\n   * Allow server-&gt;client communication to be compressed. Currently gzip and\n   * deflate are supported. If the server supports compression the response will\n   * be compressed. This method is only allowed if the http client is of type\n   * DefatulHttpClient.\n   */\n  public void setAllowCompression(boolean allowCompression) {\n    if (httpClient instanceof DefaultHttpClient) {\n      HttpClientUtil.setAllowCompression((DefaultHttpClient) httpClient, allowCompression);\n    } else {\n      throw new UnsupportedOperationException(\n          \"HttpClient instance was not of type DefaultHttpClient\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Allow server->client communication to be compressed. Currently gzip and\n   * deflate are supported. If the server supports compression the response will\n   * be compressed. This method is only allowed if the http client is of type\n   * DefatulHttpClient.\n   */\n  public void setAllowCompression(boolean allowCompression) {\n    if (httpClient instanceof DefaultHttpClient) {\n      HttpClientUtil.setAllowCompression((DefaultHttpClient) httpClient, allowCompression);\n    } else {\n      throw new UnsupportedOperationException(\n          \"HttpClient instance was not of type DefaultHttpClient\");\n    }\n  }\n\n","bugFix":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":4,"author":"markrmiller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#setAllowCompression(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Allow server-&gt;client communication to be compressed. Currently gzip and\n   * deflate are supported. If the server supports compression the response will\n   * be compressed. This method is only allowed if the http client is of type\n   * DefatulHttpClient.\n   */\n  public void setAllowCompression(boolean allowCompression) {\n    if (httpClient instanceof DefaultHttpClient) {\n      HttpClientUtil.setAllowCompression((DefaultHttpClient) httpClient, allowCompression);\n    } else {\n      throw new UnsupportedOperationException(\n          \"HttpClient instance was not of type DefaultHttpClient\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"859081acf00749f5dd462772c571d611d4a4d2db":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["859081acf00749f5dd462772c571d611d4a4d2db"]},"commit2Childs":{"859081acf00749f5dd462772c571d611d4a4d2db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["859081acf00749f5dd462772c571d611d4a4d2db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}