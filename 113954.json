{"path":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#simpleNormValues(String).mjava","commits":[{"id":"55eeb2534cd53d2a985669829df942468ebf5314","date":1354409119,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#simpleNormValues(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public NumericDocValues simpleNormValues(String field) {\n      // nocommit\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#simpleNormValues(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#simpleNormValues(String).mjava","sourceNew":"    @Override\n    public NumericDocValues simpleNormValues(String field) {\n      if (fieldInfos.get(field).omitsNorms())\n        return null;\n      NumericDocValues norms = cachedNormValues;\n      Similarity sim = getSimilarity();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(field, 0, numTokens, numOverlapTokens, 0, boost);\n        long value = sim.computeNorm(invertState);\n        norms = new MemoryIndexNormDocValues(value);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + value + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues simpleNormValues(String field) {\n      // nocommit\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getNormValues(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#simpleNormValues(String).mjava","sourceNew":"    @Override\n    public NumericDocValues getNormValues(String field) {\n      if (fieldInfos.get(field).omitsNorms())\n        return null;\n      NumericDocValues norms = cachedNormValues;\n      Similarity sim = getSimilarity();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(field, 0, numTokens, numOverlapTokens, 0, boost);\n        long value = sim.computeNorm(invertState);\n        norms = new MemoryIndexNormDocValues(value);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + value + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues simpleNormValues(String field) {\n      if (fieldInfos.get(field).omitsNorms())\n        return null;\n      NumericDocValues norms = cachedNormValues;\n      Similarity sim = getSimilarity();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(field, 0, numTokens, numOverlapTokens, 0, boost);\n        long value = sim.computeNorm(invertState);\n        norms = new MemoryIndexNormDocValues(value);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + value + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["55eeb2534cd53d2a985669829df942468ebf5314"],"55eeb2534cd53d2a985669829df942468ebf5314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55eeb2534cd53d2a985669829df942468ebf5314","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0837ab0472feecb3a54260729d845f839e1cbd72":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"55eeb2534cd53d2a985669829df942468ebf5314":["0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}