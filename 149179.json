{"path":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","commits":[{"id":"0883328ff2cc09b5c999d05c04e16530d819c627","date":1285860918,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        int start = sp.pos;\n\n        String field = sp.getId(null);\n        ValueSource vs = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n          // OK, now we have our query.\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n        }\n\n        // now we have our field or value source, so find the sort order\n        String order = sp.getId(\"Expected sort order asc/desc\");\n        boolean top;\n        if (\"desc\".equals(order) || \"top\".equals(order)) {\n          top = true;\n        } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n          top = false;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown sort order: \" + order);\n        }\n\n        if (vs == null) {\n          //we got the order, now deal with the sort\n          if (\"score\".equals(field)) {\n            if (top) {\n              lst.add(SortField.FIELD_SCORE);\n            } else {\n              lst.add(new SortField(null, SortField.SCORE, true));\n            }\n          } else if (DOCID.equals(field)) {\n            lst.add(new SortField(null, SortField.DOC, top));\n          } else {\n            //See if we have a Field first, then see if it is a function, then throw an exception\n            // getField could throw an exception if the name isn't found\n            SchemaField sf = req.getSchema().getField(field);\n\n            // TODO: remove this - it should be up to the FieldType\n            if (!sf.indexed()) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on unindexed field: \" + field);\n            }\n\n            lst.add(sf.getType().getSortField(sf, top));\n\n\n          }\n        } else {\n          lst.add(vs.getSortField(top));\n        }\n\n        sp.eatws();\n        if (sp.pos < sp.end) {\n          sp.expect(\",\");\n        }\n\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort((SortField[]) lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a66bd69cd26cbc71647b0971089f240b2ea82edc","a66bd69cd26cbc71647b0971089f240b2ea82edc","a66bd69cd26cbc71647b0971089f240b2ea82edc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","date":1286157263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        int start = sp.pos;\n\n        String field = sp.getId(null);\n        ValueSource vs = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n          // OK, now we have our query.\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n        }\n\n        // now we have our field or value source, so find the sort order\n        String order = sp.getId(\"Expected sort order asc/desc\");\n        boolean top;\n        if (\"desc\".equals(order) || \"top\".equals(order)) {\n          top = true;\n        } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n          top = false;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown sort order: \" + order);\n        }\n\n        if (vs == null) {\n          //we got the order, now deal with the sort\n          if (\"score\".equals(field)) {\n            if (top) {\n              lst.add(SortField.FIELD_SCORE);\n            } else {\n              lst.add(new SortField(null, SortField.SCORE, true));\n            }\n          } else if (DOCID.equals(field)) {\n            lst.add(new SortField(null, SortField.DOC, top));\n          } else {\n            //See if we have a Field first, then see if it is a function, then throw an exception\n            // getField could throw an exception if the name isn't found\n            SchemaField sf = req.getSchema().getField(field);\n\n            // TODO: remove this - it should be up to the FieldType\n            if (!sf.indexed()) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on unindexed field: \" + field);\n            }\n\n            lst.add(sf.getType().getSortField(sf, top));\n\n\n          }\n        } else {\n          lst.add(vs.getSortField(top));\n        }\n\n        sp.eatws();\n        if (sp.pos < sp.end) {\n          sp.expect(\",\");\n        }\n\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        int start = sp.pos;\n\n        String field = sp.getId(null);\n        ValueSource vs = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n          // OK, now we have our query.\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n        }\n\n        // now we have our field or value source, so find the sort order\n        String order = sp.getId(\"Expected sort order asc/desc\");\n        boolean top;\n        if (\"desc\".equals(order) || \"top\".equals(order)) {\n          top = true;\n        } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n          top = false;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown sort order: \" + order);\n        }\n\n        if (vs == null) {\n          //we got the order, now deal with the sort\n          if (\"score\".equals(field)) {\n            if (top) {\n              lst.add(SortField.FIELD_SCORE);\n            } else {\n              lst.add(new SortField(null, SortField.SCORE, true));\n            }\n          } else if (DOCID.equals(field)) {\n            lst.add(new SortField(null, SortField.DOC, top));\n          } else {\n            //See if we have a Field first, then see if it is a function, then throw an exception\n            // getField could throw an exception if the name isn't found\n            SchemaField sf = req.getSchema().getField(field);\n\n            // TODO: remove this - it should be up to the FieldType\n            if (!sf.indexed()) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on unindexed field: \" + field);\n            }\n\n            lst.add(sf.getType().getSortField(sf, top));\n\n\n          }\n        } else {\n          lst.add(vs.getSortField(top));\n        }\n\n        sp.eatws();\n        if (sp.pos < sp.end) {\n          sp.expect(\",\");\n        }\n\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort((SortField[]) lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"99a0a11f7c74df84d85cdc7a8e0a62f2813e179a","date":1292262017,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine Sort Order: \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param fiedl can't be found: \" + field);\n          }\n              \n          // TODO: remove this - it should be up to the FieldType\n          if (!sf.indexed()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"can not sort on unindexed field: \" \n                                    + field);\n          }\n          lst.add(sf.getType().getSortField(sf, top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        int start = sp.pos;\n\n        String field = sp.getId(null);\n        ValueSource vs = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n          // OK, now we have our query.\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n        }\n\n        // now we have our field or value source, so find the sort order\n        String order = sp.getId(\"Expected sort order asc/desc\");\n        boolean top;\n        if (\"desc\".equals(order) || \"top\".equals(order)) {\n          top = true;\n        } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n          top = false;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown sort order: \" + order);\n        }\n\n        if (vs == null) {\n          //we got the order, now deal with the sort\n          if (\"score\".equals(field)) {\n            if (top) {\n              lst.add(SortField.FIELD_SCORE);\n            } else {\n              lst.add(new SortField(null, SortField.SCORE, true));\n            }\n          } else if (DOCID.equals(field)) {\n            lst.add(new SortField(null, SortField.DOC, top));\n          } else {\n            //See if we have a Field first, then see if it is a function, then throw an exception\n            // getField could throw an exception if the name isn't found\n            SchemaField sf = req.getSchema().getField(field);\n\n            // TODO: remove this - it should be up to the FieldType\n            if (!sf.indexed()) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on unindexed field: \" + field);\n            }\n\n            lst.add(sf.getType().getSortField(sf, top));\n\n\n          }\n        } else {\n          lst.add(vs.getSortField(top));\n        }\n\n        sp.eatws();\n        if (sp.pos < sp.end) {\n          sp.expect(\",\");\n        }\n\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":["a66bd69cd26cbc71647b0971089f240b2ea82edc","a66bd69cd26cbc71647b0971089f240b2ea82edc","a66bd69cd26cbc71647b0971089f240b2ea82edc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine Sort Order: \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param fiedl can't be found: \" + field);\n          }\n              \n          // TODO: remove this - it should be up to the FieldType\n          if (!sf.indexed()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"can not sort on unindexed field: \" \n                                    + field);\n          }\n          lst.add(sf.getType().getSortField(sf, top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        int start = sp.pos;\n\n        String field = sp.getId(null);\n        ValueSource vs = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n          // OK, now we have our query.\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n        }\n\n        // now we have our field or value source, so find the sort order\n        String order = sp.getId(\"Expected sort order asc/desc\");\n        boolean top;\n        if (\"desc\".equals(order) || \"top\".equals(order)) {\n          top = true;\n        } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n          top = false;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown sort order: \" + order);\n        }\n\n        if (vs == null) {\n          //we got the order, now deal with the sort\n          if (\"score\".equals(field)) {\n            if (top) {\n              lst.add(SortField.FIELD_SCORE);\n            } else {\n              lst.add(new SortField(null, SortField.SCORE, true));\n            }\n          } else if (DOCID.equals(field)) {\n            lst.add(new SortField(null, SortField.DOC, top));\n          } else {\n            //See if we have a Field first, then see if it is a function, then throw an exception\n            // getField could throw an exception if the name isn't found\n            SchemaField sf = req.getSchema().getField(field);\n\n            // TODO: remove this - it should be up to the FieldType\n            if (!sf.indexed()) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"can not sort on unindexed field: \" + field);\n            }\n\n            lst.add(sf.getType().getSortField(sf, top));\n\n\n          }\n        } else {\n          lst.add(vs.getSortField(top));\n        }\n\n        sp.eatws();\n        if (sp.pos < sp.end) {\n          sp.expect(\",\");\n        }\n\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine Sort Order: \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param fiedl can't be found: \" + field);\n          }\n              \n          // TODO: remove this - it should be up to the FieldType\n          if (!sf.indexed()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"can not sort on unindexed field: \" \n                                    + field);\n          }\n          lst.add(sf.getType().getSortField(sf, top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9001fdb834e467ef899e41c747c42b27b4d45099","date":1296775304,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine Sort Order: \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine Sort Order: \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param fiedl can't be found: \" + field);\n          }\n              \n          // TODO: remove this - it should be up to the FieldType\n          if (!sf.indexed()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"can not sort on unindexed field: \" \n                                    + field);\n          }\n          lst.add(sf.getType().getSortField(sf, top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine Sort Order: \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine Sort Order: \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param fiedl can't be found: \" + field);\n          }\n              \n          // TODO: remove this - it should be up to the FieldType\n          if (!sf.indexed()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"can not sort on unindexed field: \" \n                                    + field);\n          }\n          lst.add(sf.getType().getSortField(sf, top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine Sort Order: \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine Sort Order: \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param fiedl can't be found: \" + field);\n          }\n              \n          // TODO: remove this - it should be up to the FieldType\n          if (!sf.indexed()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"can not sort on unindexed field: \" \n                                    + field);\n          }\n          lst.add(sf.getType().getSortField(sf, top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5585f105d144e4ca79ecf9dbc6b9ee045eaf743","date":1303495922,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine Sort Order: \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine Sort Order: \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine Sort Order: \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine Sort Order: \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseSort(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","sourceOld":"  /**\n   * Returns null if the sortSpec is the standard sort desc.\n   * <p/>\n   * <p>\n   * The form of the sort specification string currently parsed is:\n   * </p>\n   * <pre>>\n   * SortSpec ::= SingleSort [, SingleSort]*\n   * SingleSort ::= <fieldname> SortDirection\n   * SortDirection ::= top | desc | bottom | asc\n   * </pre>\n   * Examples:\n   * <pre>\n   *   score desc               #normal sort by score (will return null)\n   *   weight bottom            #sort by weight ascending\n   *   weight desc              #sort by weight descending\n   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties\n   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker\n   * </pre>\n   */\n  public static Sort parseSort(String sortSpec, SolrQueryRequest req) {\n    if (sortSpec == null || sortSpec.length() == 0) return null;\n    List<SortField> lst = new ArrayList<SortField>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        ParseException qParserException = null;\n\n        if (field == null || sp.ch() != ' ') {\n          // let's try it as a function instead\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                lst.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                lst.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              continue;\n            }\n          } catch (ParseException e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            lst.add(SortField.FIELD_SCORE);\n          } else {\n            lst.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n        } else if (DOCID.equals(field)) {\n          lst.add(new SortField(null, SortField.Type.DOC, top));\n        } else {\n          // try to find the field\n          SchemaField sf = req.getSchema().getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          lst.add(sf.getSortField(top));\n        }\n      }\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (lst.size()==1 && lst.get(0) == SortField.FIELD_SCORE) {\n      return null;\n    }\n\n    return new Sort(lst.toArray(new SortField[lst.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["0883328ff2cc09b5c999d05c04e16530d819c627"],"0883328ff2cc09b5c999d05c04e16530d819c627":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f5585f105d144e4ca79ecf9dbc6b9ee045eaf743":["9001fdb834e467ef899e41c747c42b27b4d45099"],"c26f00b574427b55127e869b935845554afde1fa":["090a0320e4de4a3674376aef96b9701f47564f86","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f5585f105d144e4ca79ecf9dbc6b9ee045eaf743"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","99a0a11f7c74df84d85cdc7a8e0a62f2813e179a"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","090a0320e4de4a3674376aef96b9701f47564f86"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99a0a11f7c74df84d85cdc7a8e0a62f2813e179a"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f5585f105d144e4ca79ecf9dbc6b9ee045eaf743"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f5585f105d144e4ca79ecf9dbc6b9ee045eaf743","090a0320e4de4a3674376aef96b9701f47564f86"],"090a0320e4de4a3674376aef96b9701f47564f86":["f5585f105d144e4ca79ecf9dbc6b9ee045eaf743"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"9001fdb834e467ef899e41c747c42b27b4d45099":["99a0a11f7c74df84d85cdc7a8e0a62f2813e179a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["9001fdb834e467ef899e41c747c42b27b4d45099","f5585f105d144e4ca79ecf9dbc6b9ee045eaf743"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","9001fdb834e467ef899e41c747c42b27b4d45099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["090a0320e4de4a3674376aef96b9701f47564f86"],"99a0a11f7c74df84d85cdc7a8e0a62f2813e179a":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","9001fdb834e467ef899e41c747c42b27b4d45099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","99a0a11f7c74df84d85cdc7a8e0a62f2813e179a"],"0883328ff2cc09b5c999d05c04e16530d819c627":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"f5585f105d144e4ca79ecf9dbc6b9ee045eaf743":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","d083e83f225b11e5fdd900e83d26ddb385b6955c","090a0320e4de4a3674376aef96b9701f47564f86","a3776dccca01c11e7046323cfad46a3b4a471233"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["c26f00b574427b55127e869b935845554afde1fa","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"9001fdb834e467ef899e41c747c42b27b4d45099":["f5585f105d144e4ca79ecf9dbc6b9ee045eaf743","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0883328ff2cc09b5c999d05c04e16530d819c627","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"99a0a11f7c74df84d85cdc7a8e0a62f2813e179a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","9001fdb834e467ef899e41c747c42b27b4d45099"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}