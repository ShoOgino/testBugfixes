{"path":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    for (String name : names)\n      maybeThrowDeterministicException();\n    if (crashed)\n      throw new IOException(\"cannot sync after crash\");\n    unSyncedFiles.removeAll(names);\n    delegate.sync(names);\n  }\n\n","sourceOld":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    for (String name : names)\n      maybeThrowDeterministicException();\n    if (crashed)\n      throw new IOException(\"cannot sync after crash\");\n    unSyncedFiles.removeAll(names);\n    delegate.sync(names);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed)\n      throw new IOException(\"cannot sync after crash\");\n    unSyncedFiles.removeAll(names);\n    delegate.sync(names);\n  }\n\n","sourceOld":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    for (String name : names)\n      maybeThrowDeterministicException();\n    if (crashed)\n      throw new IOException(\"cannot sync after crash\");\n    unSyncedFiles.removeAll(names);\n    delegate.sync(names);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed)\n      throw new IOException(\"cannot sync after crash\");\n    unSyncedFiles.removeAll(names);\n    if (LuceneTestCase.rarely(randomState) || delegate instanceof NRTCachingDirectory) {\n      // don't wear out our hardware so much in tests.\n      delegate.sync(names);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed)\n      throw new IOException(\"cannot sync after crash\");\n    unSyncedFiles.removeAll(names);\n    delegate.sync(names);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed)\n      throw new IOException(\"cannot sync after crash\");\n    unSyncedFiles.removeAll(names);\n    if (LuceneTestCase.rarely(randomState) || delegate instanceof NRTCachingDirectory) {\n      // don't wear out our hardware so much in tests.\n      delegate.sync(names);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed)\n      throw new IOException(\"cannot sync after crash\");\n    unSyncedFiles.removeAll(names);\n    if (LuceneTestCase.rarely(randomState) || delegate instanceof NRTCachingDirectory) {\n      // don't wear out our hardware so much in tests.\n      delegate.sync(names);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["7b91922b55d15444d554721b352861d028eb8278"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["3cc749c053615f5871f3b95715fe292f34e70a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"3cc749c053615f5871f3b95715fe292f34e70a53":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}