{"path":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8493985e6883b3fa8231d172694d2aa3a85cb182","date":1327920390,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader(), ReaderUtil.leaves(rCtx2)[0].reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader(), ReaderUtil.leaves(rCtx3)[0].reader());\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader(), ReaderUtil.leaves(rCtx3)[1].reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader().getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader(), rCtx4.reader());\n    assertEquals(baseRefCount+1, rCtx4.reader().getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader().getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader().equals(ReaderUtil.leaves(rCtx6)[0].reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader(), ReaderUtil.leaves(rCtx2)[0].reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader(), ReaderUtil.leaves(rCtx3)[0].reader());\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader(), ReaderUtil.leaves(rCtx3)[1].reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader().getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader(), rCtx4.reader());\n    assertEquals(baseRefCount+1, rCtx4.reader().getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader().getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader().equals(ReaderUtil.leaves(rCtx6)[0].reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8","date":1328775259,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(rCtx1.leaves()[0].reader(), rCtx2.leaves()[0].reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(rCtx2.leaves()[0].reader(), rCtx3.leaves()[0].reader());\n    assertEquals(rCtx2.leaves()[1].reader(), rCtx3.leaves()[1].reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader().getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader(), rCtx4.reader());\n    assertEquals(baseRefCount+1, rCtx4.reader().getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader().getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves()[0].reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves()[0].reader().equals(rCtx6.leaves()[0].reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader(), ReaderUtil.leaves(rCtx2)[0].reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader(), ReaderUtil.leaves(rCtx3)[0].reader());\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader(), ReaderUtil.leaves(rCtx3)[1].reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader().getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader(), rCtx4.reader());\n    assertEquals(baseRefCount+1, rCtx4.reader().getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader().getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader().equals(ReaderUtil.leaves(rCtx6)[0].reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(rCtx1.leaves().get(0).reader(), rCtx2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(rCtx2.leaves().get(0).reader(), rCtx3.leaves().get(0).reader());\n    assertEquals(rCtx2.leaves().get(1).reader(), rCtx3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader().getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader(), rCtx4.reader());\n    assertEquals(baseRefCount+1, rCtx4.reader().getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader().getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(rCtx1.leaves()[0].reader(), rCtx2.leaves()[0].reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(rCtx2.leaves()[0].reader(), rCtx3.leaves()[0].reader());\n    assertEquals(rCtx2.leaves()[1].reader(), rCtx3.leaves()[1].reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader().getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader(), rCtx4.reader());\n    assertEquals(baseRefCount+1, rCtx4.reader().getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader().getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves()[0].reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves()[0].reader().equals(rCtx6.leaves()[0].reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(rCtx1.leaves().get(0).reader(), rCtx2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(rCtx2.leaves().get(0).reader(), rCtx3.leaves().get(0).reader());\n    assertEquals(rCtx2.leaves().get(1).reader(), rCtx3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader().getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader(), rCtx4.reader());\n    assertEquals(baseRefCount+1, rCtx4.reader().getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader().getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(rCtx1.leaves().get(0).reader(), rCtx2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(rCtx2.leaves().get(0).reader(), rCtx3.leaves().get(0).reader());\n    assertEquals(rCtx2.leaves().get(1).reader(), rCtx3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader().getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader(), rCtx4.reader());\n    assertEquals(baseRefCount+1, rCtx4.reader().getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader().getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(rCtx1.leaves().get(0).reader(), rCtx2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(rCtx2.leaves().get(0).reader(), rCtx3.leaves().get(0).reader());\n    assertEquals(rCtx2.leaves().get(1).reader(), rCtx3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader().getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader(), rCtx4.reader());\n    assertEquals(baseRefCount+1, rCtx4.reader().getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader().getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(rCtx1.leaves().get(0).reader(), rCtx2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(rCtx2.leaves().get(0).reader(), rCtx3.leaves().get(0).reader());\n    assertEquals(rCtx2.leaves().get(1).reader(), rCtx3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader().getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader(), rCtx4.reader());\n    assertEquals(baseRefCount+1, rCtx4.reader().getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader().getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"beea4d4bbebcfb6689ed31936553c5e98bce2871","date":1393882670,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(rCtx1.leaves().get(0).reader(), rCtx2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(rCtx2.leaves().get(0).reader(), rCtx3.leaves().get(0).reader());\n    assertEquals(rCtx2.leaves().get(1).reader(), rCtx3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader().getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit()); // nothing has changed\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    assertSame(\"nothing changed, searcher should be the same\",\n               sr3.getSearcher(), sr4.getSearcher());\n    IndexReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change\n    assertSame(rCtx3.reader(), rCtx4.reader());\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader().getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(rCtx1.leaves().get(0).reader(), rCtx2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(rCtx2.leaves().get(0).reader(), rCtx3.leaves().get(0).reader());\n    assertEquals(rCtx2.leaves().get(1).reader(), rCtx3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader().getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader(), rCtx4.reader());\n    assertEquals(baseRefCount+1, rCtx4.reader().getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader().getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffbafffd25b93aa3ae294291ebc172a02333cdb6","date":1395763814,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(rCtx1.leaves().get(0).reader(), rCtx2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(rCtx2.leaves().get(0).reader(), rCtx3.leaves().get(0).reader());\n    assertEquals(rCtx2.leaves().get(1).reader(), rCtx3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader().getRefCount();\n    assertEquals(1, baseRefCount);\n\n    Object sr3SearcherRegAt = sr3.getSearcher().getStatistics().get(\"registeredAt\");\n    assertU(commit()); // nothing has changed\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    assertSame(\"nothing changed, searcher should be the same\",\n               sr3.getSearcher(), sr4.getSearcher());\n    assertEquals(\"nothing changed, searcher should not have been re-registered\",\n                 sr3SearcherRegAt, sr4.getSearcher().getStatistics().get(\"registeredAt\"));\n    IndexReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change\n    assertSame(rCtx3.reader(), rCtx4.reader());\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader().getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(rCtx1.leaves().get(0).reader(), rCtx2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(rCtx2.leaves().get(0).reader(), rCtx3.leaves().get(0).reader());\n    assertEquals(rCtx2.leaves().get(1).reader(), rCtx3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader().getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit()); // nothing has changed\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    assertSame(\"nothing changed, searcher should be the same\",\n               sr3.getSearcher(), sr4.getSearcher());\n    IndexReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change\n    assertSame(rCtx3.reader(), rCtx4.reader());\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader().getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5275a994b4fc707fafce0408625bd3456edc28a4","date":1400004510,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReader r1 = sr1.getSearcher().getRawReader();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReader r2 = sr2.getSearcher().getRawReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.leaves().get(0).reader(), r2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReader r3 = sr3.getSearcher().getRawReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.leaves().get(0).reader(), r3.leaves().get(0).reader());\n    assertEquals(r2.leaves().get(1).reader(), r3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    Object sr3SearcherRegAt = sr3.getSearcher().getStatistics().get(\"registeredAt\");\n    assertU(commit()); // nothing has changed\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    assertSame(\"nothing changed, searcher should be the same\",\n               sr3.getSearcher(), sr4.getSearcher());\n    assertEquals(\"nothing changed, searcher should not have been re-registered\",\n                 sr3SearcherRegAt, sr4.getSearcher().getStatistics().get(\"registeredAt\"));\n    IndexReader r4 = sr4.getSearcher().getRawReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change\n    assertSame(r3, r4);\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(rCtx1.leaves().get(0).reader(), rCtx2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(rCtx2.leaves().get(0).reader(), rCtx3.leaves().get(0).reader());\n    assertEquals(rCtx2.leaves().get(1).reader(), rCtx3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader().getRefCount();\n    assertEquals(1, baseRefCount);\n\n    Object sr3SearcherRegAt = sr3.getSearcher().getStatistics().get(\"registeredAt\");\n    assertU(commit()); // nothing has changed\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    assertSame(\"nothing changed, searcher should be the same\",\n               sr3.getSearcher(), sr4.getSearcher());\n    assertEquals(\"nothing changed, searcher should not have been re-registered\",\n                 sr3SearcherRegAt, sr4.getSearcher().getStatistics().get(\"registeredAt\"));\n    IndexReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change\n    assertSame(rCtx3.reader(), rCtx4.reader());\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader().getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReader r1 = sr1.getSearcher().getRawReader();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReader r2 = sr2.getSearcher().getRawReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.leaves().get(0).reader(), r2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReader r3 = sr3.getSearcher().getRawReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.leaves().get(0).reader(), r3.leaves().get(0).reader());\n    assertEquals(r2.leaves().get(1).reader(), r3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    Object sr3SearcherRegAt = sr3.getSearcher().getStatistics().get(\"registeredAt\");\n    assertU(commit()); // nothing has changed\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    assertSame(\"nothing changed, searcher should be the same\",\n               sr3.getSearcher(), sr4.getSearcher());\n    assertEquals(\"nothing changed, searcher should not have been re-registered\",\n                 sr3SearcherRegAt, sr4.getSearcher().getStatistics().get(\"registeredAt\"));\n    IndexReader r4 = sr4.getSearcher().getRawReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change\n    assertSame(r3, r4);\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(rCtx1.leaves().get(0).reader(), rCtx2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(rCtx2.leaves().get(0).reader(), rCtx3.leaves().get(0).reader());\n    assertEquals(rCtx2.leaves().get(1).reader(), rCtx3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader().getRefCount();\n    assertEquals(1, baseRefCount);\n\n    Object sr3SearcherRegAt = sr3.getSearcher().getStatistics().get(\"registeredAt\");\n    assertU(commit()); // nothing has changed\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    assertSame(\"nothing changed, searcher should be the same\",\n               sr3.getSearcher(), sr4.getSearcher());\n    assertEquals(\"nothing changed, searcher should not have been re-registered\",\n                 sr3SearcherRegAt, sr4.getSearcher().getStatistics().get(\"registeredAt\"));\n    IndexReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change\n    assertSame(rCtx3.reader(), rCtx4.reader());\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader().getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReader r1 = sr1.getSearcher().getRawReader();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReader r2 = sr2.getSearcher().getRawReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.leaves().get(0).reader(), r2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReader r3 = sr3.getSearcher().getRawReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.leaves().get(0).reader(), r3.leaves().get(0).reader());\n    assertEquals(r2.leaves().get(1).reader(), r3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    Object sr3SearcherRegAt = sr3.getSearcher().getStatistics().get(\"registeredAt\");\n    assertU(commit()); // nothing has changed\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    assertSame(\"nothing changed, searcher should be the same\",\n               sr3.getSearcher(), sr4.getSearcher());\n    assertEquals(\"nothing changed, searcher should not have been re-registered\",\n                 sr3SearcherRegAt, sr4.getSearcher().getStatistics().get(\"registeredAt\"));\n    IndexReader r4 = sr4.getSearcher().getRawReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change\n    assertSame(r3, r4);\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(rCtx1.leaves().get(0).reader(), rCtx2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(rCtx2.leaves().get(0).reader(), rCtx3.leaves().get(0).reader());\n    assertEquals(rCtx2.leaves().get(1).reader(), rCtx3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader().getRefCount();\n    assertEquals(1, baseRefCount);\n\n    Object sr3SearcherRegAt = sr3.getSearcher().getStatistics().get(\"registeredAt\");\n    assertU(commit()); // nothing has changed\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    assertSame(\"nothing changed, searcher should be the same\",\n               sr3.getSearcher(), sr4.getSearcher());\n    assertEquals(\"nothing changed, searcher should not have been re-registered\",\n                 sr3SearcherRegAt, sr4.getSearcher().getStatistics().get(\"registeredAt\"));\n    IndexReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change\n    assertSame(rCtx3.reader(), rCtx4.reader());\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader().getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader().getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReader r1 = sr1.getSearcher().getRawReader();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReader r2 = sr2.getSearcher().getRawReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.leaves().get(0).reader(), r2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReader r3 = sr3.getSearcher().getRawReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.leaves().get(0).reader(), r3.leaves().get(0).reader());\n    assertEquals(r2.leaves().get(1).reader(), r3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    Gauge<Date> g = (Gauge<Date>)metrics.get(\"SEARCHER.searcher.registeredAt\");\n    Date sr3SearcherRegAt = g.getValue();\n    assertU(commit()); // nothing has changed\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    assertSame(\"nothing changed, searcher should be the same\",\n               sr3.getSearcher(), sr4.getSearcher());\n    assertEquals(\"nothing changed, searcher should not have been re-registered\",\n                 sr3SearcherRegAt, g.getValue());\n    IndexReader r4 = sr4.getSearcher().getRawReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change\n    assertSame(r3, r4);\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReader r1 = sr1.getSearcher().getRawReader();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReader r2 = sr2.getSearcher().getRawReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.leaves().get(0).reader(), r2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReader r3 = sr3.getSearcher().getRawReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.leaves().get(0).reader(), r3.leaves().get(0).reader());\n    assertEquals(r2.leaves().get(1).reader(), r3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    Object sr3SearcherRegAt = sr3.getSearcher().getStatistics().get(\"registeredAt\");\n    assertU(commit()); // nothing has changed\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    assertSame(\"nothing changed, searcher should be the same\",\n               sr3.getSearcher(), sr4.getSearcher());\n    assertEquals(\"nothing changed, searcher should not have been re-registered\",\n                 sr3SearcherRegAt, sr4.getSearcher().getStatistics().get(\"registeredAt\"));\n    IndexReader r4 = sr4.getSearcher().getRawReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change\n    assertSame(r3, r4);\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReader r1 = sr1.getSearcher().getRawReader();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReader r2 = sr2.getSearcher().getRawReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.leaves().get(0).reader(), r2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReader r3 = sr3.getSearcher().getRawReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.leaves().get(0).reader(), r3.leaves().get(0).reader());\n    assertEquals(r2.leaves().get(1).reader(), r3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    Gauge<Date> g = (Gauge<Date>)metrics.get(\"SEARCHER.searcher.registeredAt\");\n    Date sr3SearcherRegAt = g.getValue();\n    assertU(commit()); // nothing has changed\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    assertSame(\"nothing changed, searcher should be the same\",\n               sr3.getSearcher(), sr4.getSearcher());\n    assertEquals(\"nothing changed, searcher should not have been re-registered\",\n                 sr3SearcherRegAt, g.getValue());\n    IndexReader r4 = sr4.getSearcher().getRawReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change\n    assertSame(r3, r4);\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReader r1 = sr1.getSearcher().getRawReader();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReader r2 = sr2.getSearcher().getRawReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.leaves().get(0).reader(), r2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReader r3 = sr3.getSearcher().getRawReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.leaves().get(0).reader(), r3.leaves().get(0).reader());\n    assertEquals(r2.leaves().get(1).reader(), r3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    Object sr3SearcherRegAt = sr3.getSearcher().getStatistics().get(\"registeredAt\");\n    assertU(commit()); // nothing has changed\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    assertSame(\"nothing changed, searcher should be the same\",\n               sr3.getSearcher(), sr4.getSearcher());\n    assertEquals(\"nothing changed, searcher should not have been re-registered\",\n                 sr3SearcherRegAt, sr4.getSearcher().getStatistics().get(\"registeredAt\"));\n    IndexReader r4 = sr4.getSearcher().getRawReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change\n    assertSame(r3, r4);\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReader r1 = sr1.getSearcher().getRawReader();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReader r2 = sr2.getSearcher().getRawReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.leaves().get(0).reader(), r2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReader r3 = sr3.getSearcher().getRawReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.leaves().get(0).reader(), r3.leaves().get(0).reader());\n    assertEquals(r2.leaves().get(1).reader(), r3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    @SuppressWarnings({\"unchecked\"})\n    Gauge<Date> g = (Gauge<Date>)metrics.get(\"SEARCHER.searcher.registeredAt\");\n    Date sr3SearcherRegAt = g.getValue();\n    assertU(commit()); // nothing has changed\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    assertSame(\"nothing changed, searcher should be the same\",\n               sr3.getSearcher(), sr4.getSearcher());\n    assertEquals(\"nothing changed, searcher should not have been re-registered\",\n                 sr3SearcherRegAt, g.getValue());\n    IndexReader r4 = sr4.getSearcher().getRawReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change\n    assertSame(r3, r4);\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReader r1 = sr1.getSearcher().getRawReader();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    IndexReader r2 = sr2.getSearcher().getRawReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.leaves().get(0).reader(), r2.leaves().get(0).reader());\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    IndexReader r3 = sr3.getSearcher().getRawReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.leaves().get(0).reader(), r3.leaves().get(0).reader());\n    assertEquals(r2.leaves().get(1).reader(), r3.leaves().get(1).reader());\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    Gauge<Date> g = (Gauge<Date>)metrics.get(\"SEARCHER.searcher.registeredAt\");\n    Date sr3SearcherRegAt = g.getValue();\n    assertU(commit()); // nothing has changed\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    assertSame(\"nothing changed, searcher should be the same\",\n               sr3.getSearcher(), sr4.getSearcher());\n    assertEquals(\"nothing changed, searcher should not have been re-registered\",\n                 sr3SearcherRegAt, g.getValue());\n    IndexReader r4 = sr4.getSearcher().getRawReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change\n    assertSame(r3, r4);\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    IndexReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, rCtx6.leaves().get(0).reader().numDocs()); // only a single doc left in the first segment\n    assertTrue( !rCtx5.leaves().get(0).reader().equals(rCtx6.leaves().get(0).reader()) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["c26f00b574427b55127e869b935845554afde1fa"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","19275ba31e621f6da1b83bf13af75233876fd3d4"],"beea4d4bbebcfb6689ed31936553c5e98bce2871":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"5275a994b4fc707fafce0408625bd3456edc28a4":["ffbafffd25b93aa3ae294291ebc172a02333cdb6"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["8493985e6883b3fa8231d172694d2aa3a85cb182"],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"56572ec06f1407c066d6b7399413178b33176cd8":["ffbafffd25b93aa3ae294291ebc172a02333cdb6","93dd449115a9247533e44bab47e8429e5dccbc6d"],"816521ebaad5add9cb96bb88c577394e2938c40b":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["c26f00b574427b55127e869b935845554afde1fa","96d207426bd26fa5c1014e26d21d87603aea68b7"],"e98520789adb1d5ad05afb4956eca0944a929688":["816521ebaad5add9cb96bb88c577394e2938c40b"],"ffbafffd25b93aa3ae294291ebc172a02333cdb6":["beea4d4bbebcfb6689ed31936553c5e98bce2871"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ffbafffd25b93aa3ae294291ebc172a02333cdb6","5275a994b4fc707fafce0408625bd3456edc28a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"]},"commit2Childs":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["96d207426bd26fa5c1014e26d21d87603aea68b7"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"beea4d4bbebcfb6689ed31936553c5e98bce2871":["ffbafffd25b93aa3ae294291ebc172a02333cdb6"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"5275a994b4fc707fafce0408625bd3456edc28a4":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"c26f00b574427b55127e869b935845554afde1fa":["8493985e6883b3fa8231d172694d2aa3a85cb182","5cab9a86bd67202d20b6adc463008c8e982b070a"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","beea4d4bbebcfb6689ed31936553c5e98bce2871"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"816521ebaad5add9cb96bb88c577394e2938c40b":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ffbafffd25b93aa3ae294291ebc172a02333cdb6":["5275a994b4fc707fafce0408625bd3456edc28a4","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","56572ec06f1407c066d6b7399413178b33176cd8","816521ebaad5add9cb96bb88c577394e2938c40b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","56572ec06f1407c066d6b7399413178b33176cd8","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}