{"path":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      double v2 = currentReaderValues[doc];\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n\n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      double v2 = currentReaderValues[doc];\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n\n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f45457a742a53533c348c4b990b1c579ff364467","date":1353197071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      double v2 = currentReaderValues.get(doc);\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n\n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      double v2 = currentReaderValues[doc];\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n\n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      double v2 = currentReaderValues.get(doc);\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n\n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      double v2 = currentReaderValues[doc];\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n\n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","bugFix":["382fe3a6ca9745891afebda9b9a57cc158305545"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47da30f6e362ae055711fad41cdcba60b9dee8c6","date":1363626629,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      double v2 = currentReaderValues.get(doc);\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n\n      return Double.compare(bottom, v2);\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      double v2 = currentReaderValues.get(doc);\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n\n      if (bottom > v2) {\n        return 1;\n      } else if (bottom < v2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      double v2 = Double.longBitsToDouble(currentReaderValues.get(doc));\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n\n      return Double.compare(bottom, v2);\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      double v2 = currentReaderValues.get(doc);\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n\n      return Double.compare(bottom, v2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      double v2 = Double.longBitsToDouble(currentReaderValues.get(doc));\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n\n      return Double.compare(bottom, v2);\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      double v2 = currentReaderValues.get(doc);\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n\n      return Double.compare(bottom, v2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      double v2 = Double.longBitsToDouble(currentReaderValues.get(doc));\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n\n      return Double.compare(bottom, v2);\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      double v2 = currentReaderValues.get(doc);\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n\n      return Double.compare(bottom, v2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) throws IOException {\n      return Double.compare(bottom, getValueForDoc(doc));\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      double v2 = Double.longBitsToDouble(currentReaderValues.get(doc));\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n\n      return Double.compare(bottom, v2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) throws IOException {\n      return Double.compare(bottom, getValueForDoc(doc));\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      double v2 = Double.longBitsToDouble(currentReaderValues.get(doc));\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n\n      return Double.compare(bottom, v2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) throws IOException {\n      return Double.compare(bottom, getValueForDoc(doc));\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      double v2 = Double.longBitsToDouble(currentReaderValues.get(doc));\n      // Test for v2 == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && v2 == 0 && !docsWithField.get(doc)) {\n        v2 = missingValue;\n      }\n\n      return Double.compare(bottom, v2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241","date":1599588987,"type":4,"author":"Mayya Sharipova","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareBottom(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int compareBottom(int doc) throws IOException {\n      return Double.compare(bottom, getValueForDoc(doc));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"47da30f6e362ae055711fad41cdcba60b9dee8c6":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["47da30f6e362ae055711fad41cdcba60b9dee8c6"],"56572ec06f1407c066d6b7399413178b33176cd8":["47da30f6e362ae055711fad41cdcba60b9dee8c6","93dd449115a9247533e44bab47e8429e5dccbc6d"],"f45457a742a53533c348c4b990b1c579ff364467":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["93dd449115a9247533e44bab47e8429e5dccbc6d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f45457a742a53533c348c4b990b1c579ff364467"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["47da30f6e362ae055711fad41cdcba60b9dee8c6","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["93dd449115a9247533e44bab47e8429e5dccbc6d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"]},"commit2Childs":{"47da30f6e362ae055711fad41cdcba60b9dee8c6":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f45457a742a53533c348c4b990b1c579ff364467","d4d69c535930b5cce125cff868d40f6373dc27d4"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"f45457a742a53533c348c4b990b1c579ff364467":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["47da30f6e362ae055711fad41cdcba60b9dee8c6"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}