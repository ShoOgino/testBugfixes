{"path":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#initDynamicDefaults(IndexWriter).mjava","commits":[{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#initDynamicDefaults(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#initMaxMergesAndThreads().mjava","sourceNew":"  private synchronized void initDynamicDefaults(IndexWriter writer) throws IOException {\n    if (maxThreadCount == AUTO_DETECT_MERGES_AND_THREADS) {\n      boolean spins = IOUtils.spins(writer.getDirectory());\n      setDefaultMaxMergesAndThreads(spins);\n      if (verbose()) {\n        message(\"initDynamicDefaults spins=\" + spins + \" maxThreadCount=\" + maxThreadCount + \" maxMergeCount=\" + maxMergeCount);\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void initMaxMergesAndThreads() throws IOException {\n    if (maxThreadCount == AUTO_DETECT_MERGES_AND_THREADS) {\n      assert writer != null;\n      boolean spins = IOUtils.spins(writer.getDirectory());\n      setDefaultMaxMergesAndThreads(spins);\n      if (verbose()) {\n        message(\"initMaxMergesAndThreads spins=\" + spins + \" maxThreadCount=\" + maxThreadCount + \" maxMergeCount=\" + maxMergeCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4059f594c3bf4917eba6d4a08f70976ffc32a010","date":1429374480,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#initDynamicDefaults(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#initDynamicDefaults(IndexWriter).mjava","sourceNew":"  private synchronized void initDynamicDefaults(IndexWriter writer) throws IOException {\n    if (maxThreadCount == AUTO_DETECT_MERGES_AND_THREADS) {\n      boolean spins = IOUtils.spins(writer.getDirectory());\n\n      // Let tests override this to help reproducing a failure on a machine that has a different\n      // core count than the one where the test originally failed:\n      try {\n        String value = System.getProperty(DEFAULT_SPINS_PROPERTY);\n        if (value != null) {\n          spins = Boolean.parseBoolean(value);\n        }\n      } catch (Throwable ignored) {\n      }\n      setDefaultMaxMergesAndThreads(spins);\n      if (verbose()) {\n        message(\"initDynamicDefaults spins=\" + spins + \" maxThreadCount=\" + maxThreadCount + \" maxMergeCount=\" + maxMergeCount);\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void initDynamicDefaults(IndexWriter writer) throws IOException {\n    if (maxThreadCount == AUTO_DETECT_MERGES_AND_THREADS) {\n      boolean spins = IOUtils.spins(writer.getDirectory());\n      setDefaultMaxMergesAndThreads(spins);\n      if (verbose()) {\n        message(\"initDynamicDefaults spins=\" + spins + \" maxThreadCount=\" + maxThreadCount + \" maxMergeCount=\" + maxMergeCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14d66d86a8b184a86bcaebcf6e15fcef486e0876","date":1521539412,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#initDynamicDefaults(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#initDynamicDefaults(IndexWriter).mjava","sourceNew":"  private synchronized void initDynamicDefaults(IndexWriter writer) throws IOException {\n    if (maxThreadCount == AUTO_DETECT_MERGES_AND_THREADS) {\n      boolean spins = IOUtils.spins(writer.getDirectory());\n\n      // Let tests override this to help reproducing a failure on a machine that has a different\n      // core count than the one where the test originally failed:\n      try {\n        String value = System.getProperty(DEFAULT_SPINS_PROPERTY);\n        if (value != null) {\n          spins = Boolean.parseBoolean(value);\n        }\n      } catch (Exception ignored) {\n        // that's fine we might hit a SecurityException etc. here just continue\n      }\n      setDefaultMaxMergesAndThreads(spins);\n      if (verbose()) {\n        message(\"initDynamicDefaults spins=\" + spins + \" maxThreadCount=\" + maxThreadCount + \" maxMergeCount=\" + maxMergeCount);\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void initDynamicDefaults(IndexWriter writer) throws IOException {\n    if (maxThreadCount == AUTO_DETECT_MERGES_AND_THREADS) {\n      boolean spins = IOUtils.spins(writer.getDirectory());\n\n      // Let tests override this to help reproducing a failure on a machine that has a different\n      // core count than the one where the test originally failed:\n      try {\n        String value = System.getProperty(DEFAULT_SPINS_PROPERTY);\n        if (value != null) {\n          spins = Boolean.parseBoolean(value);\n        }\n      } catch (Throwable ignored) {\n      }\n      setDefaultMaxMergesAndThreads(spins);\n      if (verbose()) {\n        message(\"initDynamicDefaults spins=\" + spins + \" maxThreadCount=\" + maxThreadCount + \" maxMergeCount=\" + maxMergeCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#initDynamicDefaults(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#initDynamicDefaults(IndexWriter).mjava","sourceNew":"  private synchronized void initDynamicDefaults(IndexWriter writer) throws IOException {\n    if (maxThreadCount == AUTO_DETECT_MERGES_AND_THREADS) {\n      boolean spins = IOUtils.spins(writer.getDirectory());\n\n      // Let tests override this to help reproducing a failure on a machine that has a different\n      // core count than the one where the test originally failed:\n      try {\n        String value = System.getProperty(DEFAULT_SPINS_PROPERTY);\n        if (value != null) {\n          spins = Boolean.parseBoolean(value);\n        }\n      } catch (Exception ignored) {\n        // that's fine we might hit a SecurityException etc. here just continue\n      }\n      setDefaultMaxMergesAndThreads(spins);\n      if (verbose()) {\n        message(\"initDynamicDefaults spins=\" + spins + \" maxThreadCount=\" + maxThreadCount + \" maxMergeCount=\" + maxMergeCount);\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void initDynamicDefaults(IndexWriter writer) throws IOException {\n    if (maxThreadCount == AUTO_DETECT_MERGES_AND_THREADS) {\n      boolean spins = IOUtils.spins(writer.getDirectory());\n\n      // Let tests override this to help reproducing a failure on a machine that has a different\n      // core count than the one where the test originally failed:\n      try {\n        String value = System.getProperty(DEFAULT_SPINS_PROPERTY);\n        if (value != null) {\n          spins = Boolean.parseBoolean(value);\n        }\n      } catch (Throwable ignored) {\n      }\n      setDefaultMaxMergesAndThreads(spins);\n      if (verbose()) {\n        message(\"initDynamicDefaults spins=\" + spins + \" maxThreadCount=\" + maxThreadCount + \" maxMergeCount=\" + maxMergeCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89697e7abc9807639c384eecf5a2a6eef1080426","date":1587733375,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#initDynamicDefaults(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#initDynamicDefaults(IndexWriter).mjava","sourceNew":"  private synchronized void initDynamicDefaults(Directory directory) throws IOException {\n    if (maxThreadCount == AUTO_DETECT_MERGES_AND_THREADS) {\n      boolean spins = IOUtils.spins(directory);\n\n      // Let tests override this to help reproducing a failure on a machine that has a different\n      // core count than the one where the test originally failed:\n      try {\n        String value = System.getProperty(DEFAULT_SPINS_PROPERTY);\n        if (value != null) {\n          spins = Boolean.parseBoolean(value);\n        }\n      } catch (Exception ignored) {\n        // that's fine we might hit a SecurityException etc. here just continue\n      }\n      setDefaultMaxMergesAndThreads(spins);\n      if (verbose()) {\n        message(\"initDynamicDefaults spins=\" + spins + \" maxThreadCount=\" + maxThreadCount + \" maxMergeCount=\" + maxMergeCount);\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void initDynamicDefaults(IndexWriter writer) throws IOException {\n    if (maxThreadCount == AUTO_DETECT_MERGES_AND_THREADS) {\n      boolean spins = IOUtils.spins(writer.getDirectory());\n\n      // Let tests override this to help reproducing a failure on a machine that has a different\n      // core count than the one where the test originally failed:\n      try {\n        String value = System.getProperty(DEFAULT_SPINS_PROPERTY);\n        if (value != null) {\n          spins = Boolean.parseBoolean(value);\n        }\n      } catch (Exception ignored) {\n        // that's fine we might hit a SecurityException etc. here just continue\n      }\n      setDefaultMaxMergesAndThreads(spins);\n      if (verbose()) {\n        message(\"initDynamicDefaults spins=\" + spins + \" maxThreadCount=\" + maxThreadCount + \" maxMergeCount=\" + maxMergeCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89697e7abc9807639c384eecf5a2a6eef1080426":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["4059f594c3bf4917eba6d4a08f70976ffc32a010","14d66d86a8b184a86bcaebcf6e15fcef486e0876"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5faf65b6692f15cca0f87bf8666c87899afc619f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4059f594c3bf4917eba6d4a08f70976ffc32a010":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89697e7abc9807639c384eecf5a2a6eef1080426"],"14d66d86a8b184a86bcaebcf6e15fcef486e0876":["4059f594c3bf4917eba6d4a08f70976ffc32a010"]},"commit2Childs":{"89697e7abc9807639c384eecf5a2a6eef1080426":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["89697e7abc9807639c384eecf5a2a6eef1080426"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["4059f594c3bf4917eba6d4a08f70976ffc32a010"],"4059f594c3bf4917eba6d4a08f70976ffc32a010":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","14d66d86a8b184a86bcaebcf6e15fcef486e0876"],"14d66d86a8b184a86bcaebcf6e15fcef486e0876":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}