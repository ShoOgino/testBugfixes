{"path":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#shallowSizeOf(Object).mjava","commits":[{"id":"dd6c9e9b1251473f465b0443b56046b2658402da","date":1332082750,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#shallowSizeOf(Object).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Estimates a \"shallow\" memory usage of the given object. For arrays, this will be the\n   * memory taken by array storage (no subreferences will be followed). For objects, this\n   * will be the memory taken by the fields.\n   * \n   * JVM object alignments are also applied.\n   */\n  public static long shallowSizeOf(Object obj) {\n    if (obj == null) return 0;\n    final Class<?> clz = obj.getClass();\n    if (clz.isArray()) {\n      return measureArraySize(obj, null);\n    } else {\n      return shallowSizeOfInstance(clz);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10cd47aac3c4e8c583740a750335f8aab14555b3","date":1332522358,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#shallowSizeOf(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#shallowSizeOf(Object).mjava","sourceNew":"  /** \n   * Estimates a \"shallow\" memory usage of the given object. For arrays, this will be the\n   * memory taken by array storage (no subreferences will be followed). For objects, this\n   * will be the memory taken by the fields.\n   * \n   * JVM object alignments are also applied.\n   */\n  public static long shallowSizeOf(Object obj) {\n    if (obj == null) return 0;\n    final Class<?> clz = obj.getClass();\n    if (clz.isArray()) {\n      return shallowSizeOfArray(obj);\n    } else {\n      return shallowSizeOfInstance(clz);\n    }\n  }\n\n","sourceOld":"  /** \n   * Estimates a \"shallow\" memory usage of the given object. For arrays, this will be the\n   * memory taken by array storage (no subreferences will be followed). For objects, this\n   * will be the memory taken by the fields.\n   * \n   * JVM object alignments are also applied.\n   */\n  public static long shallowSizeOf(Object obj) {\n    if (obj == null) return 0;\n    final Class<?> clz = obj.getClass();\n    if (clz.isArray()) {\n      return measureArraySize(obj, null);\n    } else {\n      return shallowSizeOfInstance(clz);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd6c9e9b1251473f465b0443b56046b2658402da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["dd6c9e9b1251473f465b0443b56046b2658402da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["10cd47aac3c4e8c583740a750335f8aab14555b3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd6c9e9b1251473f465b0443b56046b2658402da"],"dd6c9e9b1251473f465b0443b56046b2658402da":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}