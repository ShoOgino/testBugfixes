{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CommitStream#CommitStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"d4ddf965cea25006a6e621cc031c3bc69863ff4d","date":1474564021,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CommitStream#CommitStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public CommitStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \n    String collectionName = factory.getValueOperand(expression, 0);\n    String zkHost = findZkHost(factory, collectionName, expression);\n    int batchSize = factory.getIntOperand(expression, \"batchSize\", 0);\n    boolean waitFlush = factory.getBooleanOperand(expression, \"waitFlush\", false);\n    boolean waitSearcher = factory.getBooleanOperand(expression, \"waitSearcher\", false);\n    boolean softCommit = factory.getBooleanOperand(expression, \"softCommit\", false);\n\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    if(batchSize < 0){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - batchSize cannot be less than 0 but is '%d'\",expression,batchSize));\n    }\n\n    //Extract underlying TupleStream.\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    if (1 != streamExpressions.size()) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    StreamExpression sourceStreamExpression = streamExpressions.get(0);\n    \n    init(collectionName, factory.constructStream(sourceStreamExpression), zkHost, batchSize, waitFlush, waitSearcher, softCommit);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CommitStream#CommitStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public CommitStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \n    String collectionName = factory.getValueOperand(expression, 0);\n    String zkHost = findZkHost(factory, collectionName, expression);\n    int batchSize = factory.getIntOperand(expression, \"batchSize\", 0);\n    boolean waitFlush = factory.getBooleanOperand(expression, \"waitFlush\", false);\n    boolean waitSearcher = factory.getBooleanOperand(expression, \"waitSearcher\", false);\n    boolean softCommit = factory.getBooleanOperand(expression, \"softCommit\", false);\n\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    if(batchSize < 0){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - batchSize cannot be less than 0 but is '%d'\",expression,batchSize));\n    }\n\n    //Extract underlying TupleStream.\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    if (1 != streamExpressions.size()) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    StreamExpression sourceStreamExpression = streamExpressions.get(0);\n    \n    init(collectionName, factory.constructStream(sourceStreamExpression), zkHost, batchSize, waitFlush, waitSearcher, softCommit);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CommitStream#CommitStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public CommitStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \n    String collectionName = factory.getValueOperand(expression, 0);\n    String zkHost = findZkHost(factory, collectionName, expression);\n    int batchSize = factory.getIntOperand(expression, \"batchSize\", 0);\n    boolean waitFlush = factory.getBooleanOperand(expression, \"waitFlush\", false);\n    boolean waitSearcher = factory.getBooleanOperand(expression, \"waitSearcher\", false);\n    boolean softCommit = factory.getBooleanOperand(expression, \"softCommit\", false);\n\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    if(batchSize < 0){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - batchSize cannot be less than 0 but is '%d'\",expression,batchSize));\n    }\n\n    //Extract underlying TupleStream.\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    if (1 != streamExpressions.size()) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    StreamExpression sourceStreamExpression = streamExpressions.get(0);\n    \n    init(collectionName, factory.constructStream(sourceStreamExpression), zkHost, batchSize, waitFlush, waitSearcher, softCommit);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CommitStream#CommitStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public CommitStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \n    String collectionName = factory.getValueOperand(expression, 0);\n    String zkHost = findZkHost(factory, collectionName, expression);\n    int batchSize = factory.getIntOperand(expression, \"batchSize\", 0);\n    boolean waitFlush = factory.getBooleanOperand(expression, \"waitFlush\", false);\n    boolean waitSearcher = factory.getBooleanOperand(expression, \"waitSearcher\", false);\n    boolean softCommit = factory.getBooleanOperand(expression, \"softCommit\", false);\n\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    if(batchSize < 0){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - batchSize cannot be less than 0 but is '%d'\",expression,batchSize));\n    }\n\n    //Extract underlying TupleStream.\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    if (1 != streamExpressions.size()) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    StreamExpression sourceStreamExpression = streamExpressions.get(0);\n    \n    init(collectionName, factory.constructStream(sourceStreamExpression), zkHost, batchSize, waitFlush, waitSearcher, softCommit);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"126d6ad24eed13163ba0959435d5a80e5672837c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4ddf965cea25006a6e621cc031c3bc69863ff4d"],"d4ddf965cea25006a6e621cc031c3bc69863ff4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","126d6ad24eed13163ba0959435d5a80e5672837c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d4ddf965cea25006a6e621cc031c3bc69863ff4d":["126d6ad24eed13163ba0959435d5a80e5672837c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["126d6ad24eed13163ba0959435d5a80e5672837c","d4ddf965cea25006a6e621cc031c3bc69863ff4d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}