{"path":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#computePenalty(int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#computePenalty(int,int).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#computePenalty(int,int).mjava","sourceNew":"  private int computePenalty(int pos, int length) throws IOException {\n    if (length > SEARCH_MODE_KANJI_LENGTH) {\n      boolean allKanji = true;\n      // check if node consists of only kanji\n      final int endPos = pos + length;\n      for (int pos2 = pos; pos2 < endPos; pos2++) {\n        if (!characterDefinition.isKanji((char) buffer.get(pos2))) {\n          allKanji = false;\n          break;\n        }\t\t\t\t\n      }\n      if (allKanji) {\t// Process only Kanji keywords\n        return (length - SEARCH_MODE_KANJI_LENGTH) * SEARCH_MODE_KANJI_PENALTY;\n      } else if (length > SEARCH_MODE_OTHER_LENGTH) {\n        return (length - SEARCH_MODE_OTHER_LENGTH) * SEARCH_MODE_OTHER_PENALTY;\t\t\t\t\t\t\t\t\n      }\n    }\n    return 0;\n  }\n\n","sourceOld":"  private int computePenalty(int pos, int length) throws IOException {\n    if (length > SEARCH_MODE_KANJI_LENGTH) {\n      boolean allKanji = true;\n      // check if node consists of only kanji\n      final int endPos = pos + length;\n      for (int pos2 = pos; pos2 < endPos; pos2++) {\n        if (!characterDefinition.isKanji((char) buffer.get(pos2))) {\n          allKanji = false;\n          break;\n        }\t\t\t\t\n      }\n      if (allKanji) {\t// Process only Kanji keywords\n        return (length - SEARCH_MODE_KANJI_LENGTH) * SEARCH_MODE_KANJI_PENALTY;\n      } else if (length > SEARCH_MODE_OTHER_LENGTH) {\n        return (length - SEARCH_MODE_OTHER_LENGTH) * SEARCH_MODE_OTHER_PENALTY;\t\t\t\t\t\t\t\t\n      }\n    }\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#computePenalty(int,int).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#computePenalty(int,int).mjava","sourceNew":"  private int computePenalty(int pos, int length) throws IOException {\n    if (length > SEARCH_MODE_KANJI_LENGTH) {\n      boolean allKanji = true;\n      // check if node consists of only kanji\n      final int endPos = pos + length;\n      for (int pos2 = pos; pos2 < endPos; pos2++) {\n        if (!characterDefinition.isKanji((char) buffer.get(pos2))) {\n          allKanji = false;\n          break;\n        }\n      }\n      if (allKanji) {  // Process only Kanji keywords\n        return (length - SEARCH_MODE_KANJI_LENGTH) * SEARCH_MODE_KANJI_PENALTY;\n      } else if (length > SEARCH_MODE_OTHER_LENGTH) {\n        return (length - SEARCH_MODE_OTHER_LENGTH) * SEARCH_MODE_OTHER_PENALTY;\n      }\n    }\n    return 0;\n  }\n\n","sourceOld":"  private int computePenalty(int pos, int length) throws IOException {\n    if (length > SEARCH_MODE_KANJI_LENGTH) {\n      boolean allKanji = true;\n      // check if node consists of only kanji\n      final int endPos = pos + length;\n      for (int pos2 = pos; pos2 < endPos; pos2++) {\n        if (!characterDefinition.isKanji((char) buffer.get(pos2))) {\n          allKanji = false;\n          break;\n        }\t\t\t\t\n      }\n      if (allKanji) {\t// Process only Kanji keywords\n        return (length - SEARCH_MODE_KANJI_LENGTH) * SEARCH_MODE_KANJI_PENALTY;\n      } else if (length > SEARCH_MODE_OTHER_LENGTH) {\n        return (length - SEARCH_MODE_OTHER_LENGTH) * SEARCH_MODE_OTHER_PENALTY;\t\t\t\t\t\t\t\t\n      }\n    }\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}