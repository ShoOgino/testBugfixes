{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getParentArray().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getParentArray().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getParentArray().mjava","sourceNew":"  /**\n   * getParentArray() returns an int array of size getSize() listing the\n   * ordinal of the parent category of each category in the taxonomy.\n   * <P>\n   * The caller can hold on to the array it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the array it got as read-only\n   * and <B>not modify it</B>, because other callers might have gotten the\n   * same array too (and getParent() calls might be answered from the\n   * same array).\n   * <P>\n   * If you use getParentArray() instead of getParent(), remember that\n   * the array you got is (naturally) not modified after a refresh(),\n   * so you should always call getParentArray() again after a refresh().\n   * <P>\n   * This method's function is similar to allocating an array of size\n   * getSize() and filling it with getParent() calls, but implementations\n   * are encouraged to implement it much more efficiently, with O(1)\n   * complexity. This can be done, for example, by the implementation\n   * already keeping the parents in an array, and just returning this\n   * array (without any allocation or copying) when requested.\n   */\n  public int[] getParentArray() throws IOException;\n\n","sourceOld":"  /**\n   * getParentArray() returns an int array of size getSize() listing the\n   * ordinal of the parent category of each category in the taxonomy.\n   * <P>\n   * The caller can hold on to the array it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the array it got as read-only\n   * and <B>not modify it</B>, because other callers might have gotten the\n   * same array too (and getParent() calls might be answered from the\n   * same array).\n   * <P>\n   * If you use getParentArray() instead of getParent(), remember that\n   * the array you got is (naturally) not modified after a refresh(),\n   * so you should always call getParentArray() again after a refresh().\n   * <P>\n   * This method's function is similar to allocating an array of size\n   * getSize() and filling it with getParent() calls, but implementations\n   * are encouraged to implement it much more efficiently, with O(1)\n   * complexity. This can be done, for example, by the implementation\n   * already keeping the parents in an array, and just returning this\n   * array (without any allocation or copying) when requested.\n   */\n  public int[] getParentArray() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getParentArray().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getParentArray().mjava","sourceNew":"  /**\n   * Returns an {@code int[]} the size of the taxonomy listing the ordinal of\n   * the parent category of each category in the taxonomy.\n   * <p>\n   * The caller can hold on to the array it got indefinitely - it is guaranteed\n   * that no-one else will modify it. The other side of the same coin is that\n   * the caller must treat the array it got as read-only and <b>not modify\n   * it</b>, because other callers might have gotten the same array too (and\n   * getParent() calls might be answered from the same array).\n   */\n  public abstract int[] getParentArray() throws IOException;\n\n","sourceOld":"  /**\n   * getParentArray() returns an int array of size getSize() listing the\n   * ordinal of the parent category of each category in the taxonomy.\n   * <P>\n   * The caller can hold on to the array it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the array it got as read-only\n   * and <B>not modify it</B>, because other callers might have gotten the\n   * same array too (and getParent() calls might be answered from the\n   * same array).\n   * <P>\n   * If you use getParentArray() instead of getParent(), remember that\n   * the array you got is (naturally) not modified after a refresh(),\n   * so you should always call getParentArray() again after a refresh().\n   * <P>\n   * This method's function is similar to allocating an array of size\n   * getSize() and filling it with getParent() calls, but implementations\n   * are encouraged to implement it much more efficiently, with O(1)\n   * complexity. This can be done, for example, by the implementation\n   * already keeping the parents in an array, and just returning this\n   * array (without any allocation or copying) when requested.\n   */\n  public int[] getParentArray() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d58d08788c3fd51172ba34474cca42499d6391b","date":1354802133,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getParentArray().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns an {@code int[]} the size of the taxonomy listing the ordinal of\n   * the parent category of each category in the taxonomy.\n   * <p>\n   * The caller can hold on to the array it got indefinitely - it is guaranteed\n   * that no-one else will modify it. The other side of the same coin is that\n   * the caller must treat the array it got as read-only and <b>not modify\n   * it</b>, because other callers might have gotten the same array too (and\n   * getParent() calls might be answered from the same array).\n   */\n  public abstract int[] getParentArray() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getParentArray().mjava","sourceNew":null,"sourceOld":"  /**\n   * getParentArray() returns an int array of size getSize() listing the\n   * ordinal of the parent category of each category in the taxonomy.\n   * <P>\n   * The caller can hold on to the array it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the array it got as read-only\n   * and <B>not modify it</B>, because other callers might have gotten the\n   * same array too (and getParent() calls might be answered from the\n   * same array).\n   * <P>\n   * If you use getParentArray() instead of getParent(), remember that\n   * the array you got is (naturally) not modified after a refresh(),\n   * so you should always call getParentArray() again after a refresh().\n   * <P>\n   * This method's function is similar to allocating an array of size\n   * getSize() and filling it with getParent() calls, but implementations\n   * are encouraged to implement it much more efficiently, with O(1)\n   * complexity. This can be done, for example, by the implementation\n   * already keeping the parents in an array, and just returning this\n   * array (without any allocation or copying) when requested.\n   */\n  public int[] getParentArray() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","3d58d08788c3fd51172ba34474cca42499d6391b"],"3d58d08788c3fd51172ba34474cca42499d6391b":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3d58d08788c3fd51172ba34474cca42499d6391b"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3d58d08788c3fd51172ba34474cca42499d6391b":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["3d58d08788c3fd51172ba34474cca42499d6391b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}