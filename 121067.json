{"path":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribModifyRequest(ShardRequest,LinkedHashMap[String,HeatmapFacet]).mjava","commits":[{"id":"59d82b0be40ecfcc2c94c776b324e0903a62b844","date":1423535462,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribModifyRequest(ShardRequest,LinkedHashMap[String,HeatmapFacet]).mjava","pathOld":"/dev/null","sourceNew":"  /** Called by FacetComponent's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#modifyRequest(ResponseBuilder, SearchComponent, ShardRequest)}. */\n  public static void distribModifyRequest(ShardRequest sreq, LinkedHashMap<String, HeatmapFacet> heatmapFacets) {\n    // Set the format to PNG because it's compressed and it's the only format we have code to read at the moment.\n    //  Changing a param is sadly tricky because field-specific params can show up as local-params (highest precedence)\n    //  or as f.key.facet.heatmap.whatever. Ugh. So we re-write the facet.heatmap list with the local-params\n    //  moved out to the \"f.key.\" prefix, but we need to keep the key local-param because that's the only way to\n    //  set an output key. This approach means we only need to know about the parameter we're changing, not of\n    //  all possible heatmap params.\n\n    //Remove existing heatmap field param vals; we will rewrite\n    sreq.params.remove(FacetParams.FACET_HEATMAP);\n    for (Map.Entry<String, HeatmapFacet> entry : heatmapFacets.entrySet()) {\n      final String key = entry.getKey();\n      final HeatmapFacet facet = entry.getValue();\n      //add heatmap field param\n      if (!key.equals(facet.facetOn)) {\n        sreq.params.add(FacetParams.FACET_HEATMAP,\n            \"{!\" + CommonParams.OUTPUT_KEY + \"=\" + QueryParsing.encodeLocalParamVal(key) + \"}\" + facet.facetOn);\n      } else {\n        sreq.params.add(FacetParams.FACET_HEATMAP, facet.facetOn);\n      }\n      // Turn local-params into top-level f.key.param=value style params\n      if (facet.localParams != null) {\n        final Iterator<String> localNameIter = facet.localParams.getParameterNamesIterator();\n        while (localNameIter.hasNext()) {\n          String pname = localNameIter.next();\n          if (!pname.startsWith(FacetParams.FACET_HEATMAP)) {\n            continue; // could be 'key', or 'v' even\n          }\n          String pval = facet.localParams.get(pname);\n          sreq.params.set(\"f.\" + key + \".\" + pname, pval);\n        }\n      }\n      // Remove existing format specifier\n      sreq.params.remove(\"f.\" + key + \".\" + FacetParams.FACET_HEATMAP_FORMAT);\n    }\n    // Set format to PNG (applies to all heatmaps)\n    sreq.params.set(FacetParams.FACET_HEATMAP_FORMAT, FORMAT_PNG);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3866ebfeddc24055efb91f7c622adaec3f8650a3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8bc39137a3f360c6e1c6bdb956757e256a82dac9","date":1423966693,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribModifyRequest(ShardRequest,LinkedHashMap[String,HeatmapFacet]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribModifyRequest(ShardRequest,LinkedHashMap[String,HeatmapFacet]).mjava","sourceNew":"  /** Called by FacetComponent's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#modifyRequest(ResponseBuilder, SearchComponent, ShardRequest)}. */\n  public static void distribModifyRequest(ShardRequest sreq, LinkedHashMap<String, HeatmapFacet> heatmapFacets) {\n    // Set the format to PNG because it's compressed and it's the only format we have code to read at the moment.\n    //  Changing a param is sadly tricky because field-specific params can show up as local-params (highest precedence)\n    //  or as f.key.facet.heatmap.whatever. Ugh. So we re-write the facet.heatmap list with the local-params\n    //  moved out to the \"f.key.\" prefix, but we need to keep the key local-param because that's the only way to\n    //  set an output key. This approach means we only need to know about the parameter we're changing, not of\n    //  all possible heatmap params.\n\n    //Remove existing heatmap field param vals; we will rewrite\n    sreq.params.remove(FacetParams.FACET_HEATMAP);\n    for (Map.Entry<String, HeatmapFacet> entry : heatmapFacets.entrySet()) {\n      final String key = entry.getKey();\n      final HeatmapFacet facet = entry.getValue();\n      //add heatmap field param\n      if (!key.equals(facet.facetOn)) {\n        sreq.params.add(FacetParams.FACET_HEATMAP,\n            \"{!\" + CommonParams.OUTPUT_KEY + \"=\" + QueryParsing.encodeLocalParamVal(key) + \"}\" + facet.facetOn);\n      } else {\n        sreq.params.add(FacetParams.FACET_HEATMAP, facet.facetOn);\n      }\n      // Turn local-params into top-level f.key.param=value style params\n      if (facet.localParams != null) {\n        final Iterator<String> localNameIter = facet.localParams.getParameterNamesIterator();\n        while (localNameIter.hasNext()) {\n          String pname = localNameIter.next();\n          if (!pname.startsWith(FacetParams.FACET_HEATMAP)) {\n            continue; // could be 'key', or 'v' even\n          }\n          String pval = facet.localParams.get(pname);\n          sreq.params.set(\"f.\" + key + \".\" + pname, pval);\n        }\n      }\n      // Set format to PNG; it's the only one we parse\n      sreq.params.set(\"f.\" + key + \".\" + FacetParams.FACET_HEATMAP_FORMAT, FORMAT_PNG);\n    }\n  }\n\n","sourceOld":"  /** Called by FacetComponent's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#modifyRequest(ResponseBuilder, SearchComponent, ShardRequest)}. */\n  public static void distribModifyRequest(ShardRequest sreq, LinkedHashMap<String, HeatmapFacet> heatmapFacets) {\n    // Set the format to PNG because it's compressed and it's the only format we have code to read at the moment.\n    //  Changing a param is sadly tricky because field-specific params can show up as local-params (highest precedence)\n    //  or as f.key.facet.heatmap.whatever. Ugh. So we re-write the facet.heatmap list with the local-params\n    //  moved out to the \"f.key.\" prefix, but we need to keep the key local-param because that's the only way to\n    //  set an output key. This approach means we only need to know about the parameter we're changing, not of\n    //  all possible heatmap params.\n\n    //Remove existing heatmap field param vals; we will rewrite\n    sreq.params.remove(FacetParams.FACET_HEATMAP);\n    for (Map.Entry<String, HeatmapFacet> entry : heatmapFacets.entrySet()) {\n      final String key = entry.getKey();\n      final HeatmapFacet facet = entry.getValue();\n      //add heatmap field param\n      if (!key.equals(facet.facetOn)) {\n        sreq.params.add(FacetParams.FACET_HEATMAP,\n            \"{!\" + CommonParams.OUTPUT_KEY + \"=\" + QueryParsing.encodeLocalParamVal(key) + \"}\" + facet.facetOn);\n      } else {\n        sreq.params.add(FacetParams.FACET_HEATMAP, facet.facetOn);\n      }\n      // Turn local-params into top-level f.key.param=value style params\n      if (facet.localParams != null) {\n        final Iterator<String> localNameIter = facet.localParams.getParameterNamesIterator();\n        while (localNameIter.hasNext()) {\n          String pname = localNameIter.next();\n          if (!pname.startsWith(FacetParams.FACET_HEATMAP)) {\n            continue; // could be 'key', or 'v' even\n          }\n          String pval = facet.localParams.get(pname);\n          sreq.params.set(\"f.\" + key + \".\" + pname, pval);\n        }\n      }\n      // Remove existing format specifier\n      sreq.params.remove(\"f.\" + key + \".\" + FacetParams.FACET_HEATMAP_FORMAT);\n    }\n    // Set format to PNG (applies to all heatmaps)\n    sreq.params.set(FacetParams.FACET_HEATMAP_FORMAT, FORMAT_PNG);\n  }\n\n","bugFix":null,"bugIntro":["3866ebfeddc24055efb91f7c622adaec3f8650a3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13d45ae511f63e9686357f412e5b4d60b82df041","date":1493210332,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribModifyRequest(ShardRequest,LinkedHashMap[String,HeatmapFacet]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribModifyRequest(ShardRequest,LinkedHashMap[String,HeatmapFacet]).mjava","sourceNew":"  /** Called by FacetComponent's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#modifyRequest(ResponseBuilder, SearchComponent, ShardRequest)}. */\n  public static void distribModifyRequest(ShardRequest sreq, LinkedHashMap<String, HeatmapFacet> heatmapFacets) {\n    // Set the format to PNG because it's compressed and it's the only format we have code to read at the moment.\n    //  Changing a param is sadly tricky because field-specific params can show up as local-params (highest precedence)\n    //  or as f.key.facet.heatmap.whatever. Ugh. So we re-write the facet.heatmap list with the local-params\n    //  moved out to the \"f.key.\" prefix, but we need to keep the key local-param because that's the only way to\n    //  set an output key. This approach means we only need to know about the parameter we're changing, not of\n    //  all possible heatmap params.\n\n    //Remove existing heatmap field param vals; we will rewrite\n    sreq.params.remove(FacetParams.FACET_HEATMAP);\n    for (Map.Entry<String, HeatmapFacet> entry : heatmapFacets.entrySet()) {\n      final String key = entry.getKey();\n      final HeatmapFacet facet = entry.getValue();\n      //add heatmap field param\n      if (!key.equals(facet.facetOn)) {\n        sreq.params.add(FacetParams.FACET_HEATMAP,\n            \"{!\" + CommonParams.OUTPUT_KEY + \"=\" + ClientUtils.encodeLocalParamVal(key) + \"}\" + facet.facetOn);\n      } else {\n        sreq.params.add(FacetParams.FACET_HEATMAP, facet.facetOn);\n      }\n      // Turn local-params into top-level f.key.param=value style params\n      if (facet.localParams != null) {\n        final Iterator<String> localNameIter = facet.localParams.getParameterNamesIterator();\n        while (localNameIter.hasNext()) {\n          String pname = localNameIter.next();\n          if (!pname.startsWith(FacetParams.FACET_HEATMAP)) {\n            continue; // could be 'key', or 'v' even\n          }\n          String pval = facet.localParams.get(pname);\n          sreq.params.set(\"f.\" + key + \".\" + pname, pval);\n        }\n      }\n      // Set format to PNG; it's the only one we parse\n      sreq.params.set(\"f.\" + key + \".\" + FacetParams.FACET_HEATMAP_FORMAT, FORMAT_PNG);\n    }\n  }\n\n","sourceOld":"  /** Called by FacetComponent's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#modifyRequest(ResponseBuilder, SearchComponent, ShardRequest)}. */\n  public static void distribModifyRequest(ShardRequest sreq, LinkedHashMap<String, HeatmapFacet> heatmapFacets) {\n    // Set the format to PNG because it's compressed and it's the only format we have code to read at the moment.\n    //  Changing a param is sadly tricky because field-specific params can show up as local-params (highest precedence)\n    //  or as f.key.facet.heatmap.whatever. Ugh. So we re-write the facet.heatmap list with the local-params\n    //  moved out to the \"f.key.\" prefix, but we need to keep the key local-param because that's the only way to\n    //  set an output key. This approach means we only need to know about the parameter we're changing, not of\n    //  all possible heatmap params.\n\n    //Remove existing heatmap field param vals; we will rewrite\n    sreq.params.remove(FacetParams.FACET_HEATMAP);\n    for (Map.Entry<String, HeatmapFacet> entry : heatmapFacets.entrySet()) {\n      final String key = entry.getKey();\n      final HeatmapFacet facet = entry.getValue();\n      //add heatmap field param\n      if (!key.equals(facet.facetOn)) {\n        sreq.params.add(FacetParams.FACET_HEATMAP,\n            \"{!\" + CommonParams.OUTPUT_KEY + \"=\" + QueryParsing.encodeLocalParamVal(key) + \"}\" + facet.facetOn);\n      } else {\n        sreq.params.add(FacetParams.FACET_HEATMAP, facet.facetOn);\n      }\n      // Turn local-params into top-level f.key.param=value style params\n      if (facet.localParams != null) {\n        final Iterator<String> localNameIter = facet.localParams.getParameterNamesIterator();\n        while (localNameIter.hasNext()) {\n          String pname = localNameIter.next();\n          if (!pname.startsWith(FacetParams.FACET_HEATMAP)) {\n            continue; // could be 'key', or 'v' even\n          }\n          String pval = facet.localParams.get(pname);\n          sreq.params.set(\"f.\" + key + \".\" + pname, pval);\n        }\n      }\n      // Set format to PNG; it's the only one we parse\n      sreq.params.set(\"f.\" + key + \".\" + FacetParams.FACET_HEATMAP_FORMAT, FORMAT_PNG);\n    }\n  }\n\n","bugFix":null,"bugIntro":["3866ebfeddc24055efb91f7c622adaec3f8650a3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3866ebfeddc24055efb91f7c622adaec3f8650a3","date":1493229875,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribModifyRequest(ShardRequest,LinkedHashMap[String,HeatmapFacet]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribModifyRequest(ShardRequest,LinkedHashMap[String,HeatmapFacet]).mjava","sourceNew":"  /** Called by FacetComponent's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#modifyRequest(ResponseBuilder, SearchComponent, ShardRequest)}. */\n  public static void distribModifyRequest(ShardRequest sreq, LinkedHashMap<String, HeatmapFacet> heatmapFacets) {\n    // Set the format to PNG because it's compressed and it's the only format we have code to read at the moment.\n    // We re-write the facet.heatmap list with PNG format in local-params where it has highest precedence.\n\n    //Remove existing heatmap field param vals; we will rewrite\n    sreq.params.remove(FacetParams.FACET_HEATMAP);\n    for (HeatmapFacet facet : heatmapFacets.values()) {\n      //add heatmap field param\n      ModifiableSolrParams newLocalParams = new ModifiableSolrParams();\n      if (facet.localParams != null) {\n        newLocalParams.add(facet.localParams);\n      }\n      // Set format to PNG; it's the only one we parse\n      newLocalParams.set(FacetParams.FACET_HEATMAP_FORMAT, FORMAT_PNG);\n      sreq.params.add(FacetParams.FACET_HEATMAP,\n          newLocalParams.toLocalParamsString() + facet.facetOn);\n    }\n  }\n\n","sourceOld":"  /** Called by FacetComponent's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#modifyRequest(ResponseBuilder, SearchComponent, ShardRequest)}. */\n  public static void distribModifyRequest(ShardRequest sreq, LinkedHashMap<String, HeatmapFacet> heatmapFacets) {\n    // Set the format to PNG because it's compressed and it's the only format we have code to read at the moment.\n    //  Changing a param is sadly tricky because field-specific params can show up as local-params (highest precedence)\n    //  or as f.key.facet.heatmap.whatever. Ugh. So we re-write the facet.heatmap list with the local-params\n    //  moved out to the \"f.key.\" prefix, but we need to keep the key local-param because that's the only way to\n    //  set an output key. This approach means we only need to know about the parameter we're changing, not of\n    //  all possible heatmap params.\n\n    //Remove existing heatmap field param vals; we will rewrite\n    sreq.params.remove(FacetParams.FACET_HEATMAP);\n    for (Map.Entry<String, HeatmapFacet> entry : heatmapFacets.entrySet()) {\n      final String key = entry.getKey();\n      final HeatmapFacet facet = entry.getValue();\n      //add heatmap field param\n      if (!key.equals(facet.facetOn)) {\n        sreq.params.add(FacetParams.FACET_HEATMAP,\n            \"{!\" + CommonParams.OUTPUT_KEY + \"=\" + ClientUtils.encodeLocalParamVal(key) + \"}\" + facet.facetOn);\n      } else {\n        sreq.params.add(FacetParams.FACET_HEATMAP, facet.facetOn);\n      }\n      // Turn local-params into top-level f.key.param=value style params\n      if (facet.localParams != null) {\n        final Iterator<String> localNameIter = facet.localParams.getParameterNamesIterator();\n        while (localNameIter.hasNext()) {\n          String pname = localNameIter.next();\n          if (!pname.startsWith(FacetParams.FACET_HEATMAP)) {\n            continue; // could be 'key', or 'v' even\n          }\n          String pval = facet.localParams.get(pname);\n          sreq.params.set(\"f.\" + key + \".\" + pname, pval);\n        }\n      }\n      // Set format to PNG; it's the only one we parse\n      sreq.params.set(\"f.\" + key + \".\" + FacetParams.FACET_HEATMAP_FORMAT, FORMAT_PNG);\n    }\n  }\n\n","bugFix":["13d45ae511f63e9686357f412e5b4d60b82df041","59d82b0be40ecfcc2c94c776b324e0903a62b844","8bc39137a3f360c6e1c6bdb956757e256a82dac9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribModifyRequest(ShardRequest,LinkedHashMap[String,HeatmapFacet]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribModifyRequest(ShardRequest,LinkedHashMap[String,HeatmapFacet]).mjava","sourceNew":"  /** Called by FacetComponent's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#modifyRequest(ResponseBuilder, SearchComponent, ShardRequest)}. */\n  public static void distribModifyRequest(ShardRequest sreq, LinkedHashMap<String, HeatmapFacet> heatmapFacets) {\n    // Set the format to PNG because it's compressed and it's the only format we have code to read at the moment.\n    // We re-write the facet.heatmap list with PNG format in local-params where it has highest precedence.\n\n    //Remove existing heatmap field param vals; we will rewrite\n    sreq.params.remove(FacetParams.FACET_HEATMAP);\n    for (HeatmapFacet facet : heatmapFacets.values()) {\n      //add heatmap field param\n      ModifiableSolrParams newLocalParams = new ModifiableSolrParams();\n      if (facet.localParams != null) {\n        newLocalParams.add(facet.localParams);\n      }\n      // Set format to PNG; it's the only one we parse\n      newLocalParams.set(FacetParams.FACET_HEATMAP_FORMAT, FORMAT_PNG);\n      sreq.params.add(FacetParams.FACET_HEATMAP,\n          newLocalParams.toLocalParamsString() + facet.facetOn);\n    }\n  }\n\n","sourceOld":"  /** Called by FacetComponent's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#modifyRequest(ResponseBuilder, SearchComponent, ShardRequest)}. */\n  public static void distribModifyRequest(ShardRequest sreq, LinkedHashMap<String, HeatmapFacet> heatmapFacets) {\n    // Set the format to PNG because it's compressed and it's the only format we have code to read at the moment.\n    //  Changing a param is sadly tricky because field-specific params can show up as local-params (highest precedence)\n    //  or as f.key.facet.heatmap.whatever. Ugh. So we re-write the facet.heatmap list with the local-params\n    //  moved out to the \"f.key.\" prefix, but we need to keep the key local-param because that's the only way to\n    //  set an output key. This approach means we only need to know about the parameter we're changing, not of\n    //  all possible heatmap params.\n\n    //Remove existing heatmap field param vals; we will rewrite\n    sreq.params.remove(FacetParams.FACET_HEATMAP);\n    for (Map.Entry<String, HeatmapFacet> entry : heatmapFacets.entrySet()) {\n      final String key = entry.getKey();\n      final HeatmapFacet facet = entry.getValue();\n      //add heatmap field param\n      if (!key.equals(facet.facetOn)) {\n        sreq.params.add(FacetParams.FACET_HEATMAP,\n            \"{!\" + CommonParams.OUTPUT_KEY + \"=\" + QueryParsing.encodeLocalParamVal(key) + \"}\" + facet.facetOn);\n      } else {\n        sreq.params.add(FacetParams.FACET_HEATMAP, facet.facetOn);\n      }\n      // Turn local-params into top-level f.key.param=value style params\n      if (facet.localParams != null) {\n        final Iterator<String> localNameIter = facet.localParams.getParameterNamesIterator();\n        while (localNameIter.hasNext()) {\n          String pname = localNameIter.next();\n          if (!pname.startsWith(FacetParams.FACET_HEATMAP)) {\n            continue; // could be 'key', or 'v' even\n          }\n          String pval = facet.localParams.get(pname);\n          sreq.params.set(\"f.\" + key + \".\" + pname, pval);\n        }\n      }\n      // Set format to PNG; it's the only one we parse\n      sreq.params.set(\"f.\" + key + \".\" + FacetParams.FACET_HEATMAP_FORMAT, FORMAT_PNG);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ab027bdfe663227636ccbeda13ae82add302939","date":1529980633,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribModifyRequest(ShardRequest,LinkedHashMap[String,HeatmapFacet]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribModifyRequest(ShardRequest,LinkedHashMap[String,HeatmapFacet]).mjava","sourceNew":"  /** Called by FacetComponent's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#modifyRequest(ResponseBuilder, SearchComponent, ShardRequest)}. */\n  public static void distribModifyRequest(ShardRequest sreq, LinkedHashMap<String, HeatmapFacet> heatmapFacets) {\n    // Set the format to PNG because it's compressed and it's the only format we have code to read at the moment.\n    // We re-write the facet.heatmap list with PNG format in local-params where it has highest precedence.\n\n    //Remove existing heatmap field param vals; we will rewrite\n    sreq.params.remove(FacetParams.FACET_HEATMAP);\n    for (HeatmapFacet facet : heatmapFacets.values()) {\n      //add heatmap field param\n      ModifiableSolrParams newLocalParams = new ModifiableSolrParams();\n      if (facet.localParams != null) {\n        newLocalParams.add(facet.localParams);\n      }\n      // Set format to PNG; it's the only one we parse\n      newLocalParams.set(FacetParams.FACET_HEATMAP_FORMAT, FacetHeatmap.FORMAT_PNG);\n      sreq.params.add(FacetParams.FACET_HEATMAP,\n          newLocalParams.toLocalParamsString() + facet.facetOn);\n    }\n  }\n\n","sourceOld":"  /** Called by FacetComponent's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#modifyRequest(ResponseBuilder, SearchComponent, ShardRequest)}. */\n  public static void distribModifyRequest(ShardRequest sreq, LinkedHashMap<String, HeatmapFacet> heatmapFacets) {\n    // Set the format to PNG because it's compressed and it's the only format we have code to read at the moment.\n    // We re-write the facet.heatmap list with PNG format in local-params where it has highest precedence.\n\n    //Remove existing heatmap field param vals; we will rewrite\n    sreq.params.remove(FacetParams.FACET_HEATMAP);\n    for (HeatmapFacet facet : heatmapFacets.values()) {\n      //add heatmap field param\n      ModifiableSolrParams newLocalParams = new ModifiableSolrParams();\n      if (facet.localParams != null) {\n        newLocalParams.add(facet.localParams);\n      }\n      // Set format to PNG; it's the only one we parse\n      newLocalParams.set(FacetParams.FACET_HEATMAP_FORMAT, FORMAT_PNG);\n      sreq.params.add(FacetParams.FACET_HEATMAP,\n          newLocalParams.toLocalParamsString() + facet.facetOn);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribModifyRequest(ShardRequest,LinkedHashMap[String,HeatmapFacet]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribModifyRequest(ShardRequest,LinkedHashMap[String,HeatmapFacet]).mjava","sourceNew":"  /** Called by FacetComponent's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#modifyRequest(ResponseBuilder, SearchComponent, ShardRequest)}. */\n  public static void distribModifyRequest(ShardRequest sreq, LinkedHashMap<String, HeatmapFacet> heatmapFacets) {\n    // Set the format to PNG because it's compressed and it's the only format we have code to read at the moment.\n    // We re-write the facet.heatmap list with PNG format in local-params where it has highest precedence.\n\n    //Remove existing heatmap field param vals; we will rewrite\n    sreq.params.remove(FacetParams.FACET_HEATMAP);\n    for (HeatmapFacet facet : heatmapFacets.values()) {\n      //add heatmap field param\n      ModifiableSolrParams newLocalParams = new ModifiableSolrParams();\n      if (facet.localParams != null) {\n        newLocalParams.add(facet.localParams);\n      }\n      // Set format to PNG; it's the only one we parse\n      newLocalParams.set(FacetParams.FACET_HEATMAP_FORMAT, FacetHeatmap.FORMAT_PNG);\n      sreq.params.add(FacetParams.FACET_HEATMAP,\n          newLocalParams.toLocalParamsString() + facet.facetOn);\n    }\n  }\n\n","sourceOld":"  /** Called by FacetComponent's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#modifyRequest(ResponseBuilder, SearchComponent, ShardRequest)}. */\n  public static void distribModifyRequest(ShardRequest sreq, LinkedHashMap<String, HeatmapFacet> heatmapFacets) {\n    // Set the format to PNG because it's compressed and it's the only format we have code to read at the moment.\n    // We re-write the facet.heatmap list with PNG format in local-params where it has highest precedence.\n\n    //Remove existing heatmap field param vals; we will rewrite\n    sreq.params.remove(FacetParams.FACET_HEATMAP);\n    for (HeatmapFacet facet : heatmapFacets.values()) {\n      //add heatmap field param\n      ModifiableSolrParams newLocalParams = new ModifiableSolrParams();\n      if (facet.localParams != null) {\n        newLocalParams.add(facet.localParams);\n      }\n      // Set format to PNG; it's the only one we parse\n      newLocalParams.set(FacetParams.FACET_HEATMAP_FORMAT, FORMAT_PNG);\n      sreq.params.add(FacetParams.FACET_HEATMAP,\n          newLocalParams.toLocalParamsString() + facet.facetOn);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribModifyRequest(ShardRequest,LinkedHashMap[String,HeatmapFacet]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#distribModifyRequest(ShardRequest,LinkedHashMap[String,HeatmapFacet]).mjava","sourceNew":"  /** Called by FacetComponent's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#modifyRequest(ResponseBuilder, SearchComponent, ShardRequest)}. */\n  public static void distribModifyRequest(ShardRequest sreq, LinkedHashMap<String, HeatmapFacet> heatmapFacets) {\n    // Set the format to PNG because it's compressed and it's the only format we have code to read at the moment.\n    // We re-write the facet.heatmap list with PNG format in local-params where it has highest precedence.\n\n    //Remove existing heatmap field param vals; we will rewrite\n    sreq.params.remove(FacetParams.FACET_HEATMAP);\n    for (HeatmapFacet facet : heatmapFacets.values()) {\n      //add heatmap field param\n      ModifiableSolrParams newLocalParams = new ModifiableSolrParams();\n      if (facet.localParams != null) {\n        newLocalParams.add(facet.localParams);\n      }\n      // Set format to PNG; it's the only one we parse\n      newLocalParams.set(FacetParams.FACET_HEATMAP_FORMAT, FacetHeatmap.FORMAT_PNG);\n      sreq.params.add(FacetParams.FACET_HEATMAP,\n          newLocalParams.toLocalParamsString() + facet.facetOn);\n    }\n  }\n\n","sourceOld":"  /** Called by FacetComponent's impl of\n   * {@link org.apache.solr.handler.component.SearchComponent#modifyRequest(ResponseBuilder, SearchComponent, ShardRequest)}. */\n  public static void distribModifyRequest(ShardRequest sreq, LinkedHashMap<String, HeatmapFacet> heatmapFacets) {\n    // Set the format to PNG because it's compressed and it's the only format we have code to read at the moment.\n    // We re-write the facet.heatmap list with PNG format in local-params where it has highest precedence.\n\n    //Remove existing heatmap field param vals; we will rewrite\n    sreq.params.remove(FacetParams.FACET_HEATMAP);\n    for (HeatmapFacet facet : heatmapFacets.values()) {\n      //add heatmap field param\n      ModifiableSolrParams newLocalParams = new ModifiableSolrParams();\n      if (facet.localParams != null) {\n        newLocalParams.add(facet.localParams);\n      }\n      // Set format to PNG; it's the only one we parse\n      newLocalParams.set(FacetParams.FACET_HEATMAP_FORMAT, FORMAT_PNG);\n      sreq.params.add(FacetParams.FACET_HEATMAP,\n          newLocalParams.toLocalParamsString() + facet.facetOn);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ab027bdfe663227636ccbeda13ae82add302939":["3866ebfeddc24055efb91f7c622adaec3f8650a3"],"59d82b0be40ecfcc2c94c776b324e0903a62b844":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"13d45ae511f63e9686357f412e5b4d60b82df041":["8bc39137a3f360c6e1c6bdb956757e256a82dac9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["8bc39137a3f360c6e1c6bdb956757e256a82dac9","3866ebfeddc24055efb91f7c622adaec3f8650a3"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["3866ebfeddc24055efb91f7c622adaec3f8650a3","2ab027bdfe663227636ccbeda13ae82add302939"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3866ebfeddc24055efb91f7c622adaec3f8650a3":["13d45ae511f63e9686357f412e5b4d60b82df041"],"8bc39137a3f360c6e1c6bdb956757e256a82dac9":["59d82b0be40ecfcc2c94c776b324e0903a62b844"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ab027bdfe663227636ccbeda13ae82add302939"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["3866ebfeddc24055efb91f7c622adaec3f8650a3","2ab027bdfe663227636ccbeda13ae82add302939"]},"commit2Childs":{"2ab027bdfe663227636ccbeda13ae82add302939":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"59d82b0be40ecfcc2c94c776b324e0903a62b844":["8bc39137a3f360c6e1c6bdb956757e256a82dac9"],"13d45ae511f63e9686357f412e5b4d60b82df041":["3866ebfeddc24055efb91f7c622adaec3f8650a3"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59d82b0be40ecfcc2c94c776b324e0903a62b844"],"3866ebfeddc24055efb91f7c622adaec3f8650a3":["2ab027bdfe663227636ccbeda13ae82add302939","e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"8bc39137a3f360c6e1c6bdb956757e256a82dac9":["13d45ae511f63e9686357f412e5b4d60b82df041","e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}