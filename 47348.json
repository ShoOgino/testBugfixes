{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#populate().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#populate().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void populate() throws Exception {\n    cleanIndex();\n    \n    intTestStart = new ArrayList<>();\n    longTestStart = new ArrayList<>();\n    floatTestStart = new ArrayList<>();\n    doubleTestStart = new ArrayList<>();\n    dateTestStart = new ArrayList<>();\n    stringTestStart = new ArrayList<>();\n    \n    UpdateRequest req = new UpdateRequest();\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n      \n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n      \n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n      \n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n      \n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n      \n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n\n      req.add(fields.toArray(new String[0]));\n    }\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#populate().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#populate().mjava","sourceNew":"  @Before\n  public void populate() throws Exception {\n    intTestStart = new ArrayList<>();\n    longTestStart = new ArrayList<>();\n    floatTestStart = new ArrayList<>();\n    doubleTestStart = new ArrayList<>();\n    dateTestStart = new ArrayList<>();\n    stringTestStart = new ArrayList<>();\n    intMissing = 0;\n    longMissing = 0;\n    doubleMissing = 0;\n    floatMissing = 0;\n    dateMissing = 0;\n    stringMissing = 0;\n    \n    UpdateRequest req = new UpdateRequest();\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n      \n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n      \n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n      \n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n      \n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n      \n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n\n      req.add(fields.toArray(new String[0]));\n    }\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void populate() throws Exception {\n    cleanIndex();\n    \n    intTestStart = new ArrayList<>();\n    longTestStart = new ArrayList<>();\n    floatTestStart = new ArrayList<>();\n    doubleTestStart = new ArrayList<>();\n    dateTestStart = new ArrayList<>();\n    stringTestStart = new ArrayList<>();\n    \n    UpdateRequest req = new UpdateRequest();\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n      \n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n      \n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n      \n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n      \n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n      \n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n\n      req.add(fields.toArray(new String[0]));\n    }\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","bugFix":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#populate().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#populate().mjava","sourceNew":"  @Before\n  public void populate() throws Exception {\n    intTestStart = new ArrayList<>();\n    longTestStart = new ArrayList<>();\n    floatTestStart = new ArrayList<>();\n    doubleTestStart = new ArrayList<>();\n    dateTestStart = new ArrayList<>();\n    stringTestStart = new ArrayList<>();\n    intMissing = 0;\n    longMissing = 0;\n    doubleMissing = 0;\n    floatMissing = 0;\n    dateMissing = 0;\n    stringMissing = 0;\n\n    UpdateRequest req = new UpdateRequest();\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n\n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n\n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n\n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n\n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n\n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n\n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n\n      req.add(fields.toArray(new String[0]));\n    }\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","sourceOld":"  @Before\n  public void populate() throws Exception {\n    intTestStart = new ArrayList<>();\n    longTestStart = new ArrayList<>();\n    floatTestStart = new ArrayList<>();\n    doubleTestStart = new ArrayList<>();\n    dateTestStart = new ArrayList<>();\n    stringTestStart = new ArrayList<>();\n    intMissing = 0;\n    longMissing = 0;\n    doubleMissing = 0;\n    floatMissing = 0;\n    dateMissing = 0;\n    stringMissing = 0;\n    \n    UpdateRequest req = new UpdateRequest();\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n      \n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n      \n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n      \n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n      \n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n      \n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n\n      req.add(fields.toArray(new String[0]));\n    }\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#populate().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#populate().mjava","sourceNew":"  @Before\n  public void populate() throws Exception {\n    intTestStart = new ArrayList<>();\n    longTestStart = new ArrayList<>();\n    floatTestStart = new ArrayList<>();\n    doubleTestStart = new ArrayList<>();\n    dateTestStart = new ArrayList<>();\n    stringTestStart = new ArrayList<>();\n    intMissing = 0;\n    longMissing = 0;\n    doubleMissing = 0;\n    floatMissing = 0;\n    dateMissing = 0;\n    stringMissing = 0;\n\n    UpdateRequest req = new UpdateRequest();\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n\n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n\n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n\n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n\n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n\n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n\n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n\n      req.add(fields.toArray(new String[0]));\n    }\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","sourceOld":"  @Before\n  public void populate() throws Exception {\n    intTestStart = new ArrayList<>();\n    longTestStart = new ArrayList<>();\n    floatTestStart = new ArrayList<>();\n    doubleTestStart = new ArrayList<>();\n    dateTestStart = new ArrayList<>();\n    stringTestStart = new ArrayList<>();\n    intMissing = 0;\n    longMissing = 0;\n    doubleMissing = 0;\n    floatMissing = 0;\n    dateMissing = 0;\n    stringMissing = 0;\n    \n    UpdateRequest req = new UpdateRequest();\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n      \n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n      \n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n      \n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n      \n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n      \n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n\n      req.add(fields.toArray(new String[0]));\n    }\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab30b5737e6a5d4ee74fdc889750d18d2a624471","date":1576097297,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#populate().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#populate().mjava","sourceNew":"  @BeforeClass\n  public static void populate() throws Exception {\n    intTestStart = new ArrayList<>();\n    longTestStart = new ArrayList<>();\n    floatTestStart = new ArrayList<>();\n    doubleTestStart = new ArrayList<>();\n    dateTestStart = new ArrayList<>();\n    stringTestStart = new ArrayList<>();\n    intMissing = 0;\n    longMissing = 0;\n    doubleMissing = 0;\n    floatMissing = 0;\n    dateMissing = 0;\n    stringMissing = 0;\n\n    UpdateRequest req = new UpdateRequest();\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n\n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n\n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n\n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n\n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n\n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n\n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n\n      req.add(fields.toArray(new String[0]));\n    }\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","sourceOld":"  @Before\n  public void populate() throws Exception {\n    intTestStart = new ArrayList<>();\n    longTestStart = new ArrayList<>();\n    floatTestStart = new ArrayList<>();\n    doubleTestStart = new ArrayList<>();\n    dateTestStart = new ArrayList<>();\n    stringTestStart = new ArrayList<>();\n    intMissing = 0;\n    longMissing = 0;\n    doubleMissing = 0;\n    floatMissing = 0;\n    dateMissing = 0;\n    stringMissing = 0;\n\n    UpdateRequest req = new UpdateRequest();\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n\n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n\n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n\n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n\n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n\n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n\n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n\n      req.add(fields.toArray(new String[0]));\n    }\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#populate().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#populate().mjava","sourceNew":"  @BeforeClass\n  public static void populate() throws Exception {\n    intTestStart = new ArrayList<>();\n    longTestStart = new ArrayList<>();\n    floatTestStart = new ArrayList<>();\n    doubleTestStart = new ArrayList<>();\n    dateTestStart = new ArrayList<>();\n    stringTestStart = new ArrayList<>();\n    intMissing = 0;\n    longMissing = 0;\n    doubleMissing = 0;\n    floatMissing = 0;\n    dateMissing = 0;\n    stringMissing = 0;\n\n    UpdateRequest req = new UpdateRequest();\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n\n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n\n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n\n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n\n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n\n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n\n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n\n      req.add(fields.toArray(new String[0]));\n    }\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","sourceOld":"  @Before\n  public void populate() throws Exception {\n    intTestStart = new ArrayList<>();\n    longTestStart = new ArrayList<>();\n    floatTestStart = new ArrayList<>();\n    doubleTestStart = new ArrayList<>();\n    dateTestStart = new ArrayList<>();\n    stringTestStart = new ArrayList<>();\n    intMissing = 0;\n    longMissing = 0;\n    doubleMissing = 0;\n    floatMissing = 0;\n    dateMissing = 0;\n    stringMissing = 0;\n\n    UpdateRequest req = new UpdateRequest();\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n\n      if( i != 0 ){\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n        intTestStart.add(i);\n      } else intMissing++;\n\n      if( l != 0l ){\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        longTestStart.add(l);\n      } else longMissing++;\n\n      if( f != 0.0f ){\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n        floatTestStart.add(f);\n      } else floatMissing++;\n\n      if( d != 0.0d ){\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n        doubleTestStart.add(d);\n      } else doubleMissing++;\n\n      if( (j%DATE) != 0 ){\n        fields.add(\"date_dtd\"); fields.add(dt);\n        dateTestStart.add(dt);\n      } else dateMissing++;\n\n      if( (j%STRING) != 0 ){\n        fields.add(\"string_sd\"); fields.add(s);\n        stringTestStart.add(s);\n      } else stringMissing++;\n\n      req.add(fields.toArray(new String[0]));\n    }\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df724d84dab24a0cc54bec95a8680867adc7f171":["1e4e64b7199d2f2a17be7f3926c7532553910dce","ab30b5737e6a5d4ee74fdc889750d18d2a624471"],"1e4e64b7199d2f2a17be7f3926c7532553910dce":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"ab30b5737e6a5d4ee74fdc889750d18d2a624471":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ab30b5737e6a5d4ee74fdc889750d18d2a624471"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"df724d84dab24a0cc54bec95a8680867adc7f171":[],"1e4e64b7199d2f2a17be7f3926c7532553910dce":["df724d84dab24a0cc54bec95a8680867adc7f171","ab30b5737e6a5d4ee74fdc889750d18d2a624471","f8061ddd97f3352007d927dae445884a6f3d857b"],"ab30b5737e6a5d4ee74fdc889750d18d2a624471":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}