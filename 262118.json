{"path":"lucene/core/src/test/org/apache/lucene/index/TestNoMergeScheduler#testMethodsOverridden().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNoMergeScheduler#testMethodsOverridden().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNoMergeScheduler#testMethodsOverridden().mjava","sourceNew":"  @Test\n  public void testMethodsOverridden() throws Exception {\n    // Ensures that all methods of MergeScheduler are overridden. That's\n    // important to ensure that NoMergeScheduler overrides everything, so that\n    // no unexpected behavior/error occurs\n    for (Method m : NoMergeScheduler.class.getMethods()) {\n      // getDeclaredMethods() returns just those methods that are declared on\n      // NoMergeScheduler. getMethods() returns those that are visible in that\n      // context, including ones from Object. So just filter out Object. If in\n      // the future MergeScheduler will extend a different class than Object,\n      // this will need to change.\n      if (m.getDeclaringClass() != Object.class) {\n        assertTrue(m + \" is not overridden !\", m.getDeclaringClass() == NoMergeScheduler.class);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMethodsOverridden() throws Exception {\n    // Ensures that all methods of MergeScheduler are overridden. That's\n    // important to ensure that NoMergeScheduler overrides everything, so that\n    // no unexpected behavior/error occurs\n    for (Method m : NoMergeScheduler.class.getMethods()) {\n      // getDeclaredMethods() returns just those methods that are declared on\n      // NoMergeScheduler. getMethods() returns those that are visible in that\n      // context, including ones from Object. So just filter out Object. If in\n      // the future MergeScheduler will extend a different class than Object,\n      // this will need to change.\n      if (m.getDeclaringClass() != Object.class) {\n        assertTrue(m + \" is not overridden !\", m.getDeclaringClass() == NoMergeScheduler.class);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}