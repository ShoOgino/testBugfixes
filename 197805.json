{"path":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#useCache(SolrCache,int,int,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#useCache(SolrCache,int,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#useCache(SolrCache,int,int,int).mjava","sourceNew":"  /***\n      public void testPerf() {\n      doPerfTest(1000000, 100000, 200000); // big cache, warmup\n      doPerfTest(2000000, 100000, 200000); // big cache\n      doPerfTest(2000000, 100000, 120000);  // smaller key space increases distance between oldest, newest and makes the first passes less effective.\n      doPerfTest(6000000, 1000, 2000);    // small cache, smaller hit rate\n      doPerfTest(6000000, 1000, 1200);    // small cache, bigger hit rate\n      }\n  ***/\n\n  // returns number of puts\n  int useCache(SolrCache sc, int numGets, int maxKey, int seed) {\n    int ret = 0;\n    Random r = new Random(seed);\n\n    // use like a cache... gets and a put if not found\n    for (int i=0; i<numGets; i++) {\n      Integer k = r.nextInt(maxKey);\n      Integer v = (Integer)sc.get(k);\n      if (v == null) {\n        sc.put(k, k);\n        ret++;\n      }\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  /***\n      public void testPerf() {\n      doPerfTest(1000000, 100000, 200000); // big cache, warmup\n      doPerfTest(2000000, 100000, 200000); // big cache\n      doPerfTest(2000000, 100000, 120000);  // smaller key space increases distance between oldest, newest and makes the first passes less effective.\n      doPerfTest(6000000, 1000, 2000);    // small cache, smaller hit rate\n      doPerfTest(6000000, 1000, 1200);    // small cache, bigger hit rate\n      }\n  ***/\n\n  // returns number of puts\n  int useCache(SolrCache sc, int numGets, int maxKey, int seed) {\n    int ret = 0;\n    Random r = new Random(seed);\n\n    // use like a cache... gets and a put if not found\n    for (int i=0; i<numGets; i++) {\n      Integer k = r.nextInt(maxKey);\n      Integer v = (Integer)sc.get(k);\n      if (v == null) {\n        sc.put(k, k);\n        ret++;\n      }\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#useCache(SolrCache,int,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#useCache(SolrCache,int,int,int).mjava","sourceNew":"  /***\n      public void testPerf() {\n      doPerfTest(1000000, 100000, 200000); // big cache, warmup\n      doPerfTest(2000000, 100000, 200000); // big cache\n      doPerfTest(2000000, 100000, 120000);  // smaller key space increases distance between oldest, newest and makes the first passes less effective.\n      doPerfTest(6000000, 1000, 2000);    // small cache, smaller hit rate\n      doPerfTest(6000000, 1000, 1200);    // small cache, bigger hit rate\n      }\n  ***/\n\n  // returns number of puts\n  int useCache(SolrCache sc, int numGets, int maxKey, int seed) {\n    int ret = 0;\n    Random r = new Random(seed);\n\n    // use like a cache... gets and a put if not found\n    for (int i=0; i<numGets; i++) {\n      Integer k = r.nextInt(maxKey);\n      Integer v = (Integer)sc.get(k);\n      if (v == null) {\n        sc.put(k, k);\n        ret++;\n      }\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  /***\n      public void testPerf() {\n      doPerfTest(1000000, 100000, 200000); // big cache, warmup\n      doPerfTest(2000000, 100000, 200000); // big cache\n      doPerfTest(2000000, 100000, 120000);  // smaller key space increases distance between oldest, newest and makes the first passes less effective.\n      doPerfTest(6000000, 1000, 2000);    // small cache, smaller hit rate\n      doPerfTest(6000000, 1000, 1200);    // small cache, bigger hit rate\n      }\n  ***/\n\n  // returns number of puts\n  int useCache(SolrCache sc, int numGets, int maxKey, int seed) {\n    int ret = 0;\n    Random r = new Random(seed);\n\n    // use like a cache... gets and a put if not found\n    for (int i=0; i<numGets; i++) {\n      Integer k = r.nextInt(maxKey);\n      Integer v = (Integer)sc.get(k);\n      if (v == null) {\n        sc.put(k, k);\n        ret++;\n      }\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#useCache(SolrCache,int,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#useCache(SolrCache,int,int,int).mjava","sourceNew":"  /***\n      public void testPerf() {\n      doPerfTest(1000000, 100000, 200000); // big cache, warmup\n      doPerfTest(2000000, 100000, 200000); // big cache\n      doPerfTest(2000000, 100000, 120000);  // smaller key space increases distance between oldest, newest and makes the first passes less effective.\n      doPerfTest(6000000, 1000, 2000);    // small cache, smaller hit rate\n      doPerfTest(6000000, 1000, 1200);    // small cache, bigger hit rate\n      }\n  ***/\n\n  // returns number of puts\n  int useCache(SolrCache sc, int numGets, int maxKey, int seed) {\n    int ret = 0;\n    Random r = new Random(seed);\n\n    // use like a cache... gets and a put if not found\n    for (int i=0; i<numGets; i++) {\n      Integer k = r.nextInt(maxKey);\n      Integer v = (Integer)sc.get(k);\n      if (v == null) {\n        sc.put(k, k);\n        ret++;\n      }\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  /***\n      public void testPerf() {\n      doPerfTest(1000000, 100000, 200000); // big cache, warmup\n      doPerfTest(2000000, 100000, 200000); // big cache\n      doPerfTest(2000000, 100000, 120000);  // smaller key space increases distance between oldest, newest and makes the first passes less effective.\n      doPerfTest(6000000, 1000, 2000);    // small cache, smaller hit rate\n      doPerfTest(6000000, 1000, 1200);    // small cache, bigger hit rate\n      }\n  ***/\n\n  // returns number of puts\n  int useCache(SolrCache sc, int numGets, int maxKey, int seed) {\n    int ret = 0;\n    Random r = new Random(seed);\n\n    // use like a cache... gets and a put if not found\n    for (int i=0; i<numGets; i++) {\n      Integer k = r.nextInt(maxKey);\n      Integer v = (Integer)sc.get(k);\n      if (v == null) {\n        sc.put(k, k);\n        ret++;\n      }\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#useCache(SolrCache,int,int,int).mjava","sourceNew":null,"sourceOld":"  /***\n      public void testPerf() {\n      doPerfTest(1000000, 100000, 200000); // big cache, warmup\n      doPerfTest(2000000, 100000, 200000); // big cache\n      doPerfTest(2000000, 100000, 120000);  // smaller key space increases distance between oldest, newest and makes the first passes less effective.\n      doPerfTest(6000000, 1000, 2000);    // small cache, smaller hit rate\n      doPerfTest(6000000, 1000, 1200);    // small cache, bigger hit rate\n      }\n  ***/\n\n  // returns number of puts\n  int useCache(SolrCache sc, int numGets, int maxKey, int seed) {\n    int ret = 0;\n    Random r = new Random(seed);\n\n    // use like a cache... gets and a put if not found\n    for (int i=0; i<numGets; i++) {\n      Integer k = r.nextInt(maxKey);\n      Integer v = (Integer)sc.get(k);\n      if (v == null) {\n        sc.put(k, k);\n        ret++;\n      }\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"4d7d3943904804560937e6239effeebda0f920e4":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["4d7d3943904804560937e6239effeebda0f920e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}