{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestZKPropertiesWriter#localAssertQ(String,SolrQueryRequest,String...).mjava","commits":[{"id":"60ea5ab7e7b4b94aba6a057f59cee528a1028b3b","date":1592841746,"type":0,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestZKPropertiesWriter#localAssertQ(String,SolrQueryRequest,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Code copied from {@link org.apache.solr.SolrTestCaseJ4#assertQ(String, SolrQueryRequest, String...)} in order not to\n   * use the instance of the {@link org.apache.solr.util.TestHarness}.\n   */\n  private static void localAssertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \"; // TODO log 'm' !!!\n      //since the default (standard) response format is now JSON\n      //need to explicitly request XML since this class uses XPath\n      ModifiableSolrParams xmlWriterTypeParams = new ModifiableSolrParams(req.getParams());\n      xmlWriterTypeParams.set(CommonParams.WT,\"xml\");\n      //for tests, let's turn indention off so we don't have to handle extraneous spaces\n      xmlWriterTypeParams.set(\"indent\", xmlWriterTypeParams.get(\"indent\", \"off\"));\n      req.setParams(xmlWriterTypeParams);\n      String response = localQuery(req.getParams().get(CommonParams.QT), req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = BaseTestHarness.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestZKPropertiesWriter#localAssertQ(String,SolrQueryRequest,String...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Code copied from {@link org.apache.solr.SolrTestCaseJ4#assertQ(String, SolrQueryRequest, String...)} in order not to\n   * use the instance of the {@link org.apache.solr.util.TestHarness}.\n   */\n  private static void localAssertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \"; // TODO log 'm' !!!\n      //since the default (standard) response format is now JSON\n      //need to explicitly request XML since this class uses XPath\n      ModifiableSolrParams xmlWriterTypeParams = new ModifiableSolrParams(req.getParams());\n      xmlWriterTypeParams.set(CommonParams.WT,\"xml\");\n      //for tests, let's turn indention off so we don't have to handle extraneous spaces\n      xmlWriterTypeParams.set(\"indent\", xmlWriterTypeParams.get(\"indent\", \"off\"));\n      req.setParams(xmlWriterTypeParams);\n      String response = localQuery(req.getParams().get(CommonParams.QT), req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = BaseTestHarness.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["60ea5ab7e7b4b94aba6a057f59cee528a1028b3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60ea5ab7e7b4b94aba6a057f59cee528a1028b3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ea5ab7e7b4b94aba6a057f59cee528a1028b3b"],"60ea5ab7e7b4b94aba6a057f59cee528a1028b3b":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}