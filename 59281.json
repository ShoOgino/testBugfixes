{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.SegmentTermsEnum#printSeekState(PrintStream).mjava","commits":[{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.SegmentTermsEnum#printSeekState(PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.SegmentTermsEnum#printSeekState(PrintStream).mjava","sourceNew":"      @SuppressWarnings(\"unused\")\n      private void printSeekState(PrintStream out) throws IOException {\n        if (currentFrame == staticFrame) {\n          out.println(\"  no prior seek\");\n        } else {\n          out.println(\"  prior seek state:\");\n          int ord = 0;\n          boolean isSeekFrame = true;\n          while(true) {\n            Frame f = getFrame(ord);\n            assert f != null;\n            final BytesRef prefix = new BytesRef(term.bytes, 0, f.prefix);\n            if (f.nextEnt == -1) {\n              out.println(\"    frame \" + (isSeekFrame ? \"(seek)\" : \"(next)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + prefix + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<TempBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? TempBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? TempBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n            } else {\n              out.println(\"    frame \" + (isSeekFrame ? \"(seek, loaded)\" : \"(next, loaded)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + prefix + \" nextEnt=\" + f.nextEnt + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<TempBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? TempBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? TempBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" lastSubFP=\" + f.lastSubFP + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n            }\n            if (index != null) {\n              assert !isSeekFrame || f.arc != null: \"isSeekFrame=\" + isSeekFrame + \" f.arc=\" + f.arc;\n              if (f.prefix > 0 && isSeekFrame && f.arc.label != (term.bytes[f.prefix-1]&0xFF)) {\n                out.println(\"      broken seek state: arc.label=\" + (char) f.arc.label + \" vs term byte=\" + (char) (term.bytes[f.prefix-1]&0xFF));\n                throw new RuntimeException(\"seek state is broken\");\n              }\n              BytesRef output = Util.get(index, prefix);\n              if (output == null) {\n                out.println(\"      broken seek state: prefix is not final in index\");\n                throw new RuntimeException(\"seek state is broken\");\n              } else if (isSeekFrame && !f.isFloor) {\n                final ByteArrayDataInput reader = new ByteArrayDataInput(output.bytes, output.offset, output.length);\n                final long codeOrig = reader.readVLong();\n                final long code = (f.fp << TempBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) | (f.hasTerms ? TempBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) | (f.isFloor ? TempBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0);\n                if (codeOrig != code) {\n                  out.println(\"      broken seek state: output code=\" + codeOrig + \" doesn't match frame code=\" + code);\n                  throw new RuntimeException(\"seek state is broken\");\n                }\n              }\n            }\n            if (f == currentFrame) {\n              break;\n            }\n            if (f.prefix == validIndexPrefix) {\n              isSeekFrame = false;\n            }\n            ord++;\n          }\n        }\n      }\n\n","sourceOld":"      @SuppressWarnings(\"unused\")\n      private void printSeekState(PrintStream out) throws IOException {\n        if (currentFrame == staticFrame) {\n          out.println(\"  no prior seek\");\n        } else {\n          out.println(\"  prior seek state:\");\n          int ord = 0;\n          boolean isSeekFrame = true;\n          while(true) {\n            Frame f = getFrame(ord);\n            assert f != null;\n            final BytesRef prefix = new BytesRef(term.bytes, 0, f.prefix);\n            if (f.nextEnt == -1) {\n              out.println(\"    frame \" + (isSeekFrame ? \"(seek)\" : \"(next)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + prefix + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<TempBlockTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? TempBlockTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? TempBlockTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n            } else {\n              out.println(\"    frame \" + (isSeekFrame ? \"(seek, loaded)\" : \"(next, loaded)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + prefix + \" nextEnt=\" + f.nextEnt + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<TempBlockTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? TempBlockTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? TempBlockTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" lastSubFP=\" + f.lastSubFP + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n            }\n            if (index != null) {\n              assert !isSeekFrame || f.arc != null: \"isSeekFrame=\" + isSeekFrame + \" f.arc=\" + f.arc;\n              if (f.prefix > 0 && isSeekFrame && f.arc.label != (term.bytes[f.prefix-1]&0xFF)) {\n                out.println(\"      broken seek state: arc.label=\" + (char) f.arc.label + \" vs term byte=\" + (char) (term.bytes[f.prefix-1]&0xFF));\n                throw new RuntimeException(\"seek state is broken\");\n              }\n              BytesRef output = Util.get(index, prefix);\n              if (output == null) {\n                out.println(\"      broken seek state: prefix is not final in index\");\n                throw new RuntimeException(\"seek state is broken\");\n              } else if (isSeekFrame && !f.isFloor) {\n                final ByteArrayDataInput reader = new ByteArrayDataInput(output.bytes, output.offset, output.length);\n                final long codeOrig = reader.readVLong();\n                final long code = (f.fp << TempBlockTermsWriter.OUTPUT_FLAGS_NUM_BITS) | (f.hasTerms ? TempBlockTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) | (f.isFloor ? TempBlockTermsWriter.OUTPUT_FLAG_IS_FLOOR:0);\n                if (codeOrig != code) {\n                  out.println(\"      broken seek state: output code=\" + codeOrig + \" doesn't match frame code=\" + code);\n                  throw new RuntimeException(\"seek state is broken\");\n                }\n              }\n            }\n            if (f == currentFrame) {\n              break;\n            }\n            if (f.prefix == validIndexPrefix) {\n              isSeekFrame = false;\n            }\n            ord++;\n          }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.SegmentTermsEnum#printSeekState(PrintStream).mjava","sourceNew":null,"sourceOld":"      @SuppressWarnings(\"unused\")\n      private void printSeekState(PrintStream out) throws IOException {\n        if (currentFrame == staticFrame) {\n          out.println(\"  no prior seek\");\n        } else {\n          out.println(\"  prior seek state:\");\n          int ord = 0;\n          boolean isSeekFrame = true;\n          while(true) {\n            Frame f = getFrame(ord);\n            assert f != null;\n            final BytesRef prefix = new BytesRef(term.bytes, 0, f.prefix);\n            if (f.nextEnt == -1) {\n              out.println(\"    frame \" + (isSeekFrame ? \"(seek)\" : \"(next)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + prefix + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<TempBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? TempBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? TempBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n            } else {\n              out.println(\"    frame \" + (isSeekFrame ? \"(seek, loaded)\" : \"(next, loaded)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + prefix + \" nextEnt=\" + f.nextEnt + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<TempBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? TempBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? TempBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" lastSubFP=\" + f.lastSubFP + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n            }\n            if (index != null) {\n              assert !isSeekFrame || f.arc != null: \"isSeekFrame=\" + isSeekFrame + \" f.arc=\" + f.arc;\n              if (f.prefix > 0 && isSeekFrame && f.arc.label != (term.bytes[f.prefix-1]&0xFF)) {\n                out.println(\"      broken seek state: arc.label=\" + (char) f.arc.label + \" vs term byte=\" + (char) (term.bytes[f.prefix-1]&0xFF));\n                throw new RuntimeException(\"seek state is broken\");\n              }\n              BytesRef output = Util.get(index, prefix);\n              if (output == null) {\n                out.println(\"      broken seek state: prefix is not final in index\");\n                throw new RuntimeException(\"seek state is broken\");\n              } else if (isSeekFrame && !f.isFloor) {\n                final ByteArrayDataInput reader = new ByteArrayDataInput(output.bytes, output.offset, output.length);\n                final long codeOrig = reader.readVLong();\n                final long code = (f.fp << TempBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) | (f.hasTerms ? TempBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) | (f.isFloor ? TempBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0);\n                if (codeOrig != code) {\n                  out.println(\"      broken seek state: output code=\" + codeOrig + \" doesn't match frame code=\" + code);\n                  throw new RuntimeException(\"seek state is broken\");\n                }\n              }\n            }\n            if (f == currentFrame) {\n              break;\n            }\n            if (f.prefix == validIndexPrefix) {\n              isSeekFrame = false;\n            }\n            ord++;\n          }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}