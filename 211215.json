{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testCloudSolrStreamWithEscapedQuote().mjava","commits":[{"id":"3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0","date":1454550168,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testCloudSolrStreamWithEscapedQuote().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCloudSolrStreamWithEscapedQuote() throws Exception {\n\n    // The purpose of this test is to ensure that a parameter with a contained \" character is properly\n    // escaped when it is turned back into an expression. This is important when an expression is passed\n    // to a worker (parallel stream) or even for other reasons when an expression is string-ified.\n    \n    // Basic test\n    String originalExpressionString = \"search(collection1,fl=\\\"id,first\\\",sort=\\\"first asc\\\",q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\")\";\n    CloudSolrStream firstStream = new CloudSolrStream(StreamExpressionParser.parse(originalExpressionString), factory);\n    String firstExpressionString = firstStream.toExpression(factory).toString();\n    \n    CloudSolrStream secondStream = new CloudSolrStream(StreamExpressionParser.parse(firstExpressionString), factory);\n    String secondExpressionString = secondStream.toExpression(factory).toString();\n    \n    assertTrue(firstExpressionString.contains(\"q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\"\"));\n    assertTrue(secondExpressionString.contains(\"q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\"\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1704c078ec59838c9d95d5bf5738b393b537494","date":1454693901,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testCloudSolrStreamWithEscapedQuote().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCloudSolrStreamWithEscapedQuote() throws Exception {\n\n    // The purpose of this test is to ensure that a parameter with a contained \" character is properly\n    // escaped when it is turned back into an expression. This is important when an expression is passed\n    // to a worker (parallel stream) or even for other reasons when an expression is string-ified.\n    \n    // Basic test\n    String originalExpressionString = \"search(collection1,fl=\\\"id,first\\\",sort=\\\"first asc\\\",q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\")\";\n    CloudSolrStream firstStream = new CloudSolrStream(StreamExpressionParser.parse(originalExpressionString), factory);\n    String firstExpressionString = firstStream.toExpression(factory).toString();\n    \n    CloudSolrStream secondStream = new CloudSolrStream(StreamExpressionParser.parse(firstExpressionString), factory);\n    String secondExpressionString = secondStream.toExpression(factory).toString();\n    \n    assertTrue(firstExpressionString.contains(\"q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\"\"));\n    assertTrue(secondExpressionString.contains(\"q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\"\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testCloudSolrStreamWithEscapedQuote().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCloudSolrStreamWithEscapedQuote() throws Exception {\n\n    // The purpose of this test is to ensure that a parameter with a contained \" character is properly\n    // escaped when it is turned back into an expression. This is important when an expression is passed\n    // to a worker (parallel stream) or even for other reasons when an expression is string-ified.\n    \n    // Basic test\n    String originalExpressionString = \"search(collection1,fl=\\\"id,first\\\",sort=\\\"first asc\\\",q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\")\";\n    CloudSolrStream firstStream = new CloudSolrStream(StreamExpressionParser.parse(originalExpressionString), factory);\n    String firstExpressionString = firstStream.toExpression(factory).toString();\n    \n    CloudSolrStream secondStream = new CloudSolrStream(StreamExpressionParser.parse(firstExpressionString), factory);\n    String secondExpressionString = secondStream.toExpression(factory).toString();\n    \n    assertTrue(firstExpressionString.contains(\"q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\"\"));\n    assertTrue(secondExpressionString.contains(\"q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\"\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testCloudSolrStreamWithEscapedQuote().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testCloudSolrStreamWithEscapedQuote().mjava","sourceNew":"  @Test\n  public void testCloudSolrStreamWithEscapedQuote() throws Exception {\n\n    // The purpose of this test is to ensure that a parameter with a contained \" character is properly\n    // escaped when it is turned back into an expression. This is important when an expression is passed\n    // to a worker (parallel stream) or even for other reasons when an expression is string-ified.\n    \n    // Basic test\n    String originalExpressionString = \"search(collection1,fl=\\\"id,first\\\",sort=\\\"first asc\\\",q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\")\";\n    try (CloudSolrStream firstStream = new CloudSolrStream(StreamExpressionParser.parse(originalExpressionString), factory)) {\n      String firstExpressionString = firstStream.toExpression(factory).toString();\n\n      try (CloudSolrStream secondStream = new CloudSolrStream(StreamExpressionParser.parse(firstExpressionString), factory)) {\n        String secondExpressionString = secondStream.toExpression(factory).toString();\n\n        assertTrue(firstExpressionString.contains(\"q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\"\"));\n        assertTrue(secondExpressionString.contains(\"q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\"\"));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStreamWithEscapedQuote() throws Exception {\n\n    // The purpose of this test is to ensure that a parameter with a contained \" character is properly\n    // escaped when it is turned back into an expression. This is important when an expression is passed\n    // to a worker (parallel stream) or even for other reasons when an expression is string-ified.\n    \n    // Basic test\n    String originalExpressionString = \"search(collection1,fl=\\\"id,first\\\",sort=\\\"first asc\\\",q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\")\";\n    CloudSolrStream firstStream = new CloudSolrStream(StreamExpressionParser.parse(originalExpressionString), factory);\n    String firstExpressionString = firstStream.toExpression(factory).toString();\n    \n    CloudSolrStream secondStream = new CloudSolrStream(StreamExpressionParser.parse(firstExpressionString), factory);\n    String secondExpressionString = secondStream.toExpression(factory).toString();\n    \n    assertTrue(firstExpressionString.contains(\"q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\"\"));\n    assertTrue(secondExpressionString.contains(\"q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0"],"b1704c078ec59838c9d95d5bf5738b393b537494":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"]},"commit2Childs":{"3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","f15af35d55d70c34451f9df5edeaeff6b31f8cbe","b1704c078ec59838c9d95d5bf5738b393b537494"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b1704c078ec59838c9d95d5bf5738b393b537494":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}