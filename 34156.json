{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#recordBounds(PlanetModel,Plane,Bounds,Membership...).mjava","commits":[{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#recordBounds(PlanetModel,Plane,Bounds,Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#recordBounds(Plane,Bounds,Membership...).mjava","sourceNew":"  /**\n   * Accumulate bounds information for this plane, intersected with another plane\n   * and with the unit sphere.\n   * Updates both latitude and longitude information, using max/min points found\n   * within the specified bounds.\n   *\n   * @param planetModel is the planet model to use to determine bounding points\n   * @param q          is the plane to intersect with.\n   * @param boundsInfo is the info to update with additional bounding information.\n   * @param bounds     are the surfaces delineating what's inside the shape.\n   */\n  public void recordBounds(final PlanetModel planetModel, final Plane q, final Bounds boundsInfo, final Membership... bounds) {\n    final GeoPoint[] intersectionPoints = findIntersections(planetModel, q, bounds, NO_BOUNDS);\n    for (GeoPoint intersectionPoint : intersectionPoints) {\n      boundsInfo.addPoint(intersectionPoint);\n    }\n  }\n\n","sourceOld":"  /**\n   * Accumulate bounds information for this plane, intersected with another plane\n   * and with the unit sphere.\n   * Updates both latitude and longitude information, using max/min points found\n   * within the specified bounds.\n   *\n   * @param q          is the plane to intersect with.\n   * @param boundsInfo is the info to update with additional bounding information.\n   * @param bounds     are the surfaces delineating what's inside the shape.\n   */\n  public void recordBounds(final Plane q, final Bounds boundsInfo, final Membership... bounds) {\n    final GeoPoint[] intersectionPoints = findIntersections(q, bounds, NO_BOUNDS);\n    for (GeoPoint intersectionPoint : intersectionPoints) {\n      boundsInfo.addPoint(intersectionPoint);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":1,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#recordBounds(PlanetModel,Plane,Bounds,Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#recordBounds(Plane,Bounds,Membership...).mjava","sourceNew":"  /**\n   * Accumulate bounds information for this plane, intersected with another plane\n   * and with the unit sphere.\n   * Updates both latitude and longitude information, using max/min points found\n   * within the specified bounds.\n   *\n   * @param planetModel is the planet model to use to determine bounding points\n   * @param q          is the plane to intersect with.\n   * @param boundsInfo is the info to update with additional bounding information.\n   * @param bounds     are the surfaces delineating what's inside the shape.\n   */\n  public void recordBounds(final PlanetModel planetModel, final Plane q, final Bounds boundsInfo, final Membership... bounds) {\n    final GeoPoint[] intersectionPoints = findIntersections(planetModel, q, bounds, NO_BOUNDS);\n    for (GeoPoint intersectionPoint : intersectionPoints) {\n      boundsInfo.addPoint(intersectionPoint);\n    }\n  }\n\n","sourceOld":"  /**\n   * Accumulate bounds information for this plane, intersected with another plane\n   * and with the unit sphere.\n   * Updates both latitude and longitude information, using max/min points found\n   * within the specified bounds.\n   *\n   * @param q          is the plane to intersect with.\n   * @param boundsInfo is the info to update with additional bounding information.\n   * @param bounds     are the surfaces delineating what's inside the shape.\n   */\n  public void recordBounds(final Plane q, final Bounds boundsInfo, final Membership... bounds) {\n    final GeoPoint[] intersectionPoints = findIntersections(q, bounds, NO_BOUNDS);\n    for (GeoPoint intersectionPoint : intersectionPoints) {\n      boundsInfo.addPoint(intersectionPoint);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#recordBounds(PlanetModel,Plane,Bounds,Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#recordBounds(PlanetModel,Plane,Bounds,Membership...).mjava","sourceNew":"  /**\n   * Accumulate bounds information for this plane, intersected with another plane\n   * and with the unit sphere.\n   * Updates both latitude and longitude information, using max/min points found\n   * within the specified bounds.\n   *\n   * @param planetModel is the planet model to use to determine bounding points\n   * @param q          is the plane to intersect with.\n   * @param boundsInfo is the info to update with additional bounding information.\n   * @param bounds     are the surfaces delineating what's inside the shape.\n   */\n  public void recordBounds(final PlanetModel planetModel, final Plane q, final Bounds boundsInfo, final Membership... bounds) {\n    final GeoPoint[] intersectionPoints = findIntersections(planetModel, q, bounds, NO_BOUNDS);\n    for (GeoPoint intersectionPoint : intersectionPoints) {\n      boundsInfo.addPoint(intersectionPoint);\n    }\n  }\n\n","sourceOld":"  /**\n   * Accumulate bounds information for this plane, intersected with another plane\n   * and with the unit sphere.\n   * Updates both latitude and longitude information, using max/min points found\n   * within the specified bounds.\n   *\n   * @param planetModel is the planet model to use to determine bounding points\n   * @param q          is the plane to intersect with.\n   * @param boundsInfo is the info to update with additional bounding information.\n   * @param bounds     are the surfaces delineating what's inside the shape.\n   */\n  public void recordBounds(final PlanetModel planetModel, final Plane q, final Bounds boundsInfo, final Membership... bounds) {\n    final GeoPoint[] intersectionPoints = findIntersections(planetModel, q, bounds, NO_BOUNDS);\n    for (GeoPoint intersectionPoint : intersectionPoints) {\n      boundsInfo.addPoint(intersectionPoint);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["fec06d6753751ae302c7d35866763e6cb414112d"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"fec06d6753751ae302c7d35866763e6cb414112d":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}