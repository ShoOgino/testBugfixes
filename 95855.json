{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","commits":[{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private AutoScalingConfig handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                               AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getCommandData();\n\n    if (policyName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be empty\");\n    }\n    Map<String, List<Clause>> policies = currentConfig.getPolicy().getPolicies();\n    if (policies == null || !policies.containsKey(policyName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No policy exists with name: \" + policyName);\n    }\n    policies = new HashMap<>(policies);\n    policies.remove(policyName);\n    Policy p = currentConfig.getPolicy().withPolicies(policies);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":"  public void handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op)\n      throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getCommandData();\n\n    if (policyName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> policies = (Map<String, Object>) autoScalingConf.get(\"policies\");\n    if (policies == null || !policies.containsKey(policyName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No policy exists with name: \" + policyName);\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), policyName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b514c6ae79cf71bd7d613f4639007dd37dc3a192","date":1501725016,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                               AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getCommandData();\n\n    if (policyName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be empty\");\n    }\n    Map<String, List<Clause>> policies = currentConfig.getPolicy().getPolicies();\n    if (policies == null || !policies.containsKey(policyName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No policy exists with name: \" + policyName);\n    }\n    container.getZkController().getZkStateReader().getClusterState().forEachCollection(coll -> {\n      if (policyName.equals(coll.getPolicyName())) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          StrUtils.formatString(\"policy : {0} is being used by collection {1}\", policyName, coll.getName()));\n    });\n\n    policies = new HashMap<>(policies);\n    policies.remove(policyName);\n    Policy p = currentConfig.getPolicy().withPolicies(policies);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                               AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getCommandData();\n\n    if (policyName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be empty\");\n    }\n    Map<String, List<Clause>> policies = currentConfig.getPolicy().getPolicies();\n    if (policies == null || !policies.containsKey(policyName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No policy exists with name: \" + policyName);\n    }\n    policies = new HashMap<>(policies);\n    policies.remove(policyName);\n    Policy p = currentConfig.getPolicy().withPolicies(policies);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3590d254d013266ac3849fae45974e747f7f576","date":1501767095,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                               AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getVal(\"\");\n\n    if (op.hasError()) return currentConfig;\n\n    Map<String, List<Clause>> policies = currentConfig.getPolicy().getPolicies();\n    if (policies == null || !policies.containsKey(policyName)) {\n      op.addError(\"No policy exists with name: \" + policyName);\n      return currentConfig;\n    }\n\n    container.getZkController().getZkStateReader().getClusterState().forEachCollection(coll -> {\n      if (policyName.equals(coll.getPolicyName()))\n        op.addError(StrUtils.formatString(\"policy : {0} is being used by collection {1}\", policyName, coll.getName()));\n    });\n    if (op.hasError()) return currentConfig;\n    policies = new HashMap<>(policies);\n    policies.remove(policyName);\n    Policy p = currentConfig.getPolicy().withPolicies(policies);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                               AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getCommandData();\n\n    if (policyName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be empty\");\n    }\n    Map<String, List<Clause>> policies = currentConfig.getPolicy().getPolicies();\n    if (policies == null || !policies.containsKey(policyName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No policy exists with name: \" + policyName);\n    }\n    container.getZkController().getZkStateReader().getClusterState().forEachCollection(coll -> {\n      if (policyName.equals(coll.getPolicyName())) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          StrUtils.formatString(\"policy : {0} is being used by collection {1}\", policyName, coll.getName()));\n    });\n\n    policies = new HashMap<>(policies);\n    policies.remove(policyName);\n    Policy p = currentConfig.getPolicy().withPolicies(policies);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                               AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getVal(\"\");\n\n    if (op.hasError()) return currentConfig;\n\n    Map<String, List<Clause>> policies = currentConfig.getPolicy().getPolicies();\n    if (policies == null || !policies.containsKey(policyName)) {\n      op.addError(\"No policy exists with name: \" + policyName);\n      return currentConfig;\n    }\n\n    container.getZkController().getZkStateReader().getClusterState().forEachCollection(coll -> {\n      if (policyName.equals(coll.getPolicyName()))\n        op.addError(StrUtils.formatString(\"policy : {0} is being used by collection {1}\", policyName, coll.getName()));\n    });\n    if (op.hasError()) return currentConfig;\n    policies = new HashMap<>(policies);\n    policies.remove(policyName);\n    Policy p = currentConfig.getPolicy().withPolicies(policies);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                               AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getVal(\"\");\n\n    if (op.hasError()) return currentConfig;\n\n    Map<String, List<Clause>> policies = currentConfig.getPolicy().getPolicies();\n    if (policies == null || !policies.containsKey(policyName)) {\n      op.addError(\"No policy exists with name: \" + policyName);\n      return currentConfig;\n    }\n\n    container.getZkController().getZkStateReader().getClusterState().forEachCollection(coll -> {\n      if (policyName.equals(coll.getPolicyName()))\n        op.addError(StrUtils.formatString(\"policy : {0} is being used by collection {1}\", policyName, coll.getName()));\n    });\n    if (op.hasError()) return currentConfig;\n    policies = new HashMap<>(policies);\n    policies.remove(policyName);\n    Policy p = currentConfig.getPolicy().withPolicies(policies);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                               AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getVal(\"\");\n\n    if (op.hasError()) return currentConfig;\n\n    Map<String, List<Clause>> policies = currentConfig.getPolicy().getPolicies();\n    if (policies == null || !policies.containsKey(policyName)) {\n      op.addError(\"No policy exists with name: \" + policyName);\n      return currentConfig;\n    }\n\n    cloudManager.getClusterStateProvider().getClusterState().forEachCollection(coll -> {\n      if (policyName.equals(coll.getPolicyName()))\n        op.addError(StrUtils.formatString(\"policy : {0} is being used by collection {1}\", policyName, coll.getName()));\n    });\n    if (op.hasError()) return currentConfig;\n    policies = new HashMap<>(policies);\n    policies.remove(policyName);\n    Policy p = currentConfig.getPolicy().withPolicies(policies);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                               AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getVal(\"\");\n\n    if (op.hasError()) return currentConfig;\n\n    Map<String, List<Clause>> policies = currentConfig.getPolicy().getPolicies();\n    if (policies == null || !policies.containsKey(policyName)) {\n      op.addError(\"No policy exists with name: \" + policyName);\n      return currentConfig;\n    }\n\n    container.getZkController().getZkStateReader().getClusterState().forEachCollection(coll -> {\n      if (policyName.equals(coll.getPolicyName()))\n        op.addError(StrUtils.formatString(\"policy : {0} is being used by collection {1}\", policyName, coll.getName()));\n    });\n    if (op.hasError()) return currentConfig;\n    policies = new HashMap<>(policies);\n    policies.remove(policyName);\n    Policy p = currentConfig.getPolicy().withPolicies(policies);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":null,"sourceOld":"  private AutoScalingConfig handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                               AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getVal(\"\");\n\n    if (op.hasError()) return currentConfig;\n\n    Map<String, List<Clause>> policies = currentConfig.getPolicy().getPolicies();\n    if (policies == null || !policies.containsKey(policyName)) {\n      op.addError(\"No policy exists with name: \" + policyName);\n      return currentConfig;\n    }\n\n    cloudManager.getClusterStateProvider().getClusterState().forEachCollection(coll -> {\n      if (policyName.equals(coll.getPolicyName()))\n        op.addError(StrUtils.formatString(\"policy : {0} is being used by collection {1}\", policyName, coll.getName()));\n    });\n    if (op.hasError()) return currentConfig;\n    policies = new HashMap<>(policies);\n    policies.remove(policyName);\n    Policy p = currentConfig.getPolicy().withPolicies(policies);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3590d254d013266ac3849fae45974e747f7f576"],"3f504512a03d978990cbff30db0522b354e846db":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b514c6ae79cf71bd7d613f4639007dd37dc3a192":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3590d254d013266ac3849fae45974e747f7f576":["b514c6ae79cf71bd7d613f4639007dd37dc3a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"b514c6ae79cf71bd7d613f4639007dd37dc3a192":["e3590d254d013266ac3849fae45974e747f7f576"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["3f504512a03d978990cbff30db0522b354e846db"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["b514c6ae79cf71bd7d613f4639007dd37dc3a192"],"560c18d71dad43d675158783c3840f8c80d6d39c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"e3590d254d013266ac3849fae45974e747f7f576":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}