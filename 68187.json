{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testNumber().mjava","commits":[{"id":"b5629050969c1e696c5dc14e8639f3e733e8e33c","date":1313606044,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testNumber().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNumber().mjava","sourceNew":"  public void testNumber() throws Exception {\n// The numbers go away because SimpleAnalzyer ignores them\n    assertQueryEquals(\"3\", null, \"\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","sourceOld":"  public void testNumber() throws Exception {\n// The numbers go away because SimpleAnalzyer ignores them\n    assertQueryEquals(\"3\", null, \"\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testNumber().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testNumber().mjava","sourceNew":"  public void testNumber() throws Exception {\n// The numbers go away because SimpleAnalzyer ignores them\n    assertQueryEquals(\"3\", null, \"\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","sourceOld":"  public void testNumber() throws Exception {\n// The numbers go away because SimpleAnalzyer ignores them\n    assertQueryEquals(\"3\", null, \"\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testNumber().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testNumber().mjava","sourceNew":"  public void testNumber() throws Exception {\n// The numbers go away because SimpleAnalzyer ignores them\n    assertQueryEquals(\"3\", null, \"\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","sourceOld":"  public void testNumber() throws Exception {\n// The numbers go away because SimpleAnalzyer ignores them\n    assertQueryEquals(\"3\", null, \"\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b5629050969c1e696c5dc14e8639f3e733e8e33c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5629050969c1e696c5dc14e8639f3e733e8e33c"],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}