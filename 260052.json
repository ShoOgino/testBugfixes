{"path":"solr/core/src/test/org/apache/solr/handler/tagger/RandomizedTaggerTest#test().mjava","commits":[{"id":"e091f281a6e026f8bb17aaf194efd0bbd3a7f549","date":1528221895,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/tagger/RandomizedTaggerTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    final Random R = random();\n\n    Set<String> names = new HashSet<>();\n    //random list of single-word names\n    final int NUM_SINGLES = 4;//RandomInts.randomIntBetween(R, 1, 5);\n    for (int i = 0; i < NUM_SINGLES; i++) {\n      if (i == 0)//first is a big string (perhaps triggers bugs related to growing buffers)\n        names.add(randomStringOfLength(16, 32));\n      else\n        names.add(randomString());\n    }\n\n    //add random list of multi-word names, partially including existing names\n    final int NUM_MULTI = 10;\n    for (int i = 0; i < NUM_MULTI; i++) {\n      final int numWords = RandomNumbers.randomIntBetween(R, 2, 4);\n      StringBuilder buf = new StringBuilder();\n      for (int j = 0; j < numWords; j++) {\n        if (j != 0)\n          buf.append(' ');\n        if (R.nextBoolean()) {//new likely non-existent word\n          buf.append(randomString());\n        } else {//existing word (possible multi-word from prev iteration)\n          buf.append(RandomPicks.randomFrom(R, names));\n        }\n      }\n      names.add(buf.toString());\n    }\n\n    // BUILD NAMES\n    buildNames(names.toArray(new String[names.size()]));\n\n    // QUERY LOOP\n    for (int tTries = 0; tTries < 10 * RANDOM_MULTIPLIER; tTries++) {\n      // Build up random input, similar to multi-word random names above\n      StringBuilder input = new StringBuilder();\n      final int INPUT_WORD_LEN = 20;\n      input.append(' ');//must start with space based on assertBruteForce logic\n      for (int i = 0; i < INPUT_WORD_LEN; i++) {\n        if (R.nextBoolean()) {//new likely non-existent word\n          input.append(randomString());\n        } else {//existing word (possible multi-word from prev iteration)\n          input.append(RandomPicks.randomFrom(R, NAMES));\n        }\n        input.append(' ');//must end with a space\n      }\n\n      boolean madeIt = false;\n      try {\n        assertBruteForce(input.toString());\n        madeIt = true;\n      } finally {\n        if (!madeIt) {\n          System.out.println(\"Reproduce with:\");\n          System.out.print(\" buildNames(\");\n          for (int i = 0; i < NAMES.size(); i++) {\n            if (i != 0)\n              System.out.print(',');\n            System.out.print('\"');\n            System.out.print(NAMES.get(i));\n            System.out.print('\"');\n          }\n          System.out.println(\");\");\n          System.out.println(\" assertBruteForce(\\\"\" + input+\"\\\");\");\n        }\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/tagger/RandomizedTaggerTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    final Random R = random();\n\n    Set<String> names = new HashSet<>();\n    //random list of single-word names\n    final int NUM_SINGLES = 4;//RandomInts.randomIntBetween(R, 1, 5);\n    for (int i = 0; i < NUM_SINGLES; i++) {\n      if (i == 0)//first is a big string (perhaps triggers bugs related to growing buffers)\n        names.add(randomStringOfLength(16, 32));\n      else\n        names.add(randomString());\n    }\n\n    //add random list of multi-word names, partially including existing names\n    final int NUM_MULTI = 10;\n    for (int i = 0; i < NUM_MULTI; i++) {\n      final int numWords = RandomNumbers.randomIntBetween(R, 2, 4);\n      StringBuilder buf = new StringBuilder();\n      for (int j = 0; j < numWords; j++) {\n        if (j != 0)\n          buf.append(' ');\n        if (R.nextBoolean()) {//new likely non-existent word\n          buf.append(randomString());\n        } else {//existing word (possible multi-word from prev iteration)\n          buf.append(RandomPicks.randomFrom(R, names));\n        }\n      }\n      names.add(buf.toString());\n    }\n\n    // BUILD NAMES\n    buildNames(names.toArray(new String[names.size()]));\n\n    // QUERY LOOP\n    for (int tTries = 0; tTries < 10 * RANDOM_MULTIPLIER; tTries++) {\n      // Build up random input, similar to multi-word random names above\n      StringBuilder input = new StringBuilder();\n      final int INPUT_WORD_LEN = 20;\n      input.append(' ');//must start with space based on assertBruteForce logic\n      for (int i = 0; i < INPUT_WORD_LEN; i++) {\n        if (R.nextBoolean()) {//new likely non-existent word\n          input.append(randomString());\n        } else {//existing word (possible multi-word from prev iteration)\n          input.append(RandomPicks.randomFrom(R, NAMES));\n        }\n        input.append(' ');//must end with a space\n      }\n\n      boolean madeIt = false;\n      try {\n        assertBruteForce(input.toString());\n        madeIt = true;\n      } finally {\n        if (!madeIt) {\n          System.out.println(\"Reproduce with:\");\n          System.out.print(\" buildNames(\");\n          for (int i = 0; i < NAMES.size(); i++) {\n            if (i != 0)\n              System.out.print(',');\n            System.out.print('\"');\n            System.out.print(NAMES.get(i));\n            System.out.print('\"');\n          }\n          System.out.println(\");\");\n          System.out.println(\" assertBruteForce(\\\"\" + input+\"\\\");\");\n        }\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/tagger/RandomizedTaggerTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    final Random R = random();\n\n    Set<String> names = new HashSet<>();\n    //random list of single-word names\n    final int NUM_SINGLES = 4;//RandomInts.randomIntBetween(R, 1, 5);\n    for (int i = 0; i < NUM_SINGLES; i++) {\n      if (i == 0)//first is a big string (perhaps triggers bugs related to growing buffers)\n        names.add(randomStringOfLength(16, 32));\n      else\n        names.add(randomString());\n    }\n\n    //add random list of multi-word names, partially including existing names\n    final int NUM_MULTI = 10;\n    for (int i = 0; i < NUM_MULTI; i++) {\n      final int numWords = RandomNumbers.randomIntBetween(R, 2, 4);\n      StringBuilder buf = new StringBuilder();\n      for (int j = 0; j < numWords; j++) {\n        if (j != 0)\n          buf.append(' ');\n        if (R.nextBoolean()) {//new likely non-existent word\n          buf.append(randomString());\n        } else {//existing word (possible multi-word from prev iteration)\n          buf.append(RandomPicks.randomFrom(R, names));\n        }\n      }\n      names.add(buf.toString());\n    }\n\n    // BUILD NAMES\n    buildNames(names.toArray(new String[names.size()]));\n\n    // QUERY LOOP\n    for (int tTries = 0; tTries < 10 * RANDOM_MULTIPLIER; tTries++) {\n      // Build up random input, similar to multi-word random names above\n      StringBuilder input = new StringBuilder();\n      final int INPUT_WORD_LEN = 20;\n      input.append(' ');//must start with space based on assertBruteForce logic\n      for (int i = 0; i < INPUT_WORD_LEN; i++) {\n        if (R.nextBoolean()) {//new likely non-existent word\n          input.append(randomString());\n        } else {//existing word (possible multi-word from prev iteration)\n          input.append(RandomPicks.randomFrom(R, NAMES));\n        }\n        input.append(' ');//must end with a space\n      }\n\n      boolean madeIt = false;\n      try {\n        assertBruteForce(input.toString());\n        madeIt = true;\n      } finally {\n        if (!madeIt) {\n          System.out.println(\"Reproduce with:\");\n          System.out.print(\" buildNames(\");\n          for (int i = 0; i < NAMES.size(); i++) {\n            if (i != 0)\n              System.out.print(',');\n            System.out.print('\"');\n            System.out.print(NAMES.get(i));\n            System.out.print('\"');\n          }\n          System.out.println(\");\");\n          System.out.println(\" assertBruteForce(\\\"\" + input+\"\\\");\");\n        }\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e091f281a6e026f8bb17aaf194efd0bbd3a7f549"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f592209545c71895260367152601e9200399776d":[],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}