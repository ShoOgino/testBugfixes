{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManagerReopenThread#run().mjava","commits":[{"id":"39d69912999d6e0acfb6eb6be558fcc165eee0b2","date":1308066875,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManagerReopenThread#run().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n    public void run() {\n    // TODO: maybe use private thread ticktock timer, in\n    // case clock shift messes up nanoTime?\n    long lastReopenStartNS = System.nanoTime();\n\n    //System.out.println(\"reopen: start\");\n    try {\n      while (true) {\n\n        final boolean doApplyDeletes;\n\n        boolean hasWaiting = false;\n\n        synchronized(this) {\n          // TODO: try to guestimate how long reopen might\n          // take based on past data?\n\n          while (!finish) {\n            //System.out.println(\"reopen: cycle\");\n\n            // True if we have someone waiting for reopen'd searcher:\n            hasWaiting = waitingGen > manager.getCurrentSearchingGen(waitingNeedsDeletes);\n            final long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);\n\n            final long sleepNS = nextReopenStartNS - System.nanoTime();\n\n            if (sleepNS > 0) {\n              //System.out.println(\"reopen: sleep \" + (sleepNS/1000000.0) + \" ms (hasWaiting=\" + hasWaiting + \")\");\n              try {\n                wait(sleepNS/1000000, (int) (sleepNS%1000000));\n              } catch (InterruptedException ie) {\n                Thread.currentThread().interrupt();\n                //System.out.println(\"NRT: set finish on interrupt\");\n                finish = true;\n                break;\n              }\n            } else {\n              break;\n            }\n          }\n\n          if (finish) {\n            //System.out.println(\"reopen: finish\");\n            return;\n          }\n\n          doApplyDeletes = hasWaiting ? waitingNeedsDeletes : true;\n          waitingNeedsDeletes = false;\n          //System.out.println(\"reopen: start hasWaiting=\" + hasWaiting);\n        }\n\n        lastReopenStartNS = System.nanoTime();\n        try {\n          //final long t0 = System.nanoTime();\n          manager.reopen(doApplyDeletes);\n          //System.out.println(\"reopen took \" + ((System.nanoTime()-t0)/1000000.0) + \" msec\");\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": IOE\");\n          //ioe.printStackTrace();\n          throw new RuntimeException(ioe);\n        }\n      }\n    } catch (Throwable t) {\n      //System.out.println(\"REOPEN EXC\");\n      //t.printStackTrace(System.out);\n      throw new RuntimeException(t);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManagerReopenThread#run().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n    public void run() {\n    // TODO: maybe use private thread ticktock timer, in\n    // case clock shift messes up nanoTime?\n    long lastReopenStartNS = System.nanoTime();\n\n    //System.out.println(\"reopen: start\");\n    try {\n      while (true) {\n\n        final boolean doApplyDeletes;\n\n        boolean hasWaiting = false;\n\n        synchronized(this) {\n          // TODO: try to guestimate how long reopen might\n          // take based on past data?\n\n          while (!finish) {\n            //System.out.println(\"reopen: cycle\");\n\n            // True if we have someone waiting for reopen'd searcher:\n            hasWaiting = waitingGen > manager.getCurrentSearchingGen(waitingNeedsDeletes);\n            final long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);\n\n            final long sleepNS = nextReopenStartNS - System.nanoTime();\n\n            if (sleepNS > 0) {\n              //System.out.println(\"reopen: sleep \" + (sleepNS/1000000.0) + \" ms (hasWaiting=\" + hasWaiting + \")\");\n              try {\n                wait(sleepNS/1000000, (int) (sleepNS%1000000));\n              } catch (InterruptedException ie) {\n                Thread.currentThread().interrupt();\n                //System.out.println(\"NRT: set finish on interrupt\");\n                finish = true;\n                break;\n              }\n            } else {\n              break;\n            }\n          }\n\n          if (finish) {\n            //System.out.println(\"reopen: finish\");\n            return;\n          }\n\n          doApplyDeletes = hasWaiting ? waitingNeedsDeletes : true;\n          waitingNeedsDeletes = false;\n          //System.out.println(\"reopen: start hasWaiting=\" + hasWaiting);\n        }\n\n        lastReopenStartNS = System.nanoTime();\n        try {\n          //final long t0 = System.nanoTime();\n          manager.reopen(doApplyDeletes);\n          //System.out.println(\"reopen took \" + ((System.nanoTime()-t0)/1000000.0) + \" msec\");\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": IOE\");\n          //ioe.printStackTrace();\n          throw new RuntimeException(ioe);\n        }\n      }\n    } catch (Throwable t) {\n      //System.out.println(\"REOPEN EXC\");\n      //t.printStackTrace(System.out);\n      throw new RuntimeException(t);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"606baff722a317c76a92b111d183b54b6e6e5741","date":1317974711,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManagerReopenThread#run().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManagerReopenThread#run().mjava","sourceNew":"  @Override\n  public void run() {\n    // TODO: maybe use private thread ticktock timer, in\n    // case clock shift messes up nanoTime?\n    long lastReopenStartNS = System.nanoTime();\n\n    //System.out.println(\"reopen: start\");\n    try {\n      while (true) {\n\n        boolean hasWaiting = false;\n\n        synchronized(this) {\n          // TODO: try to guestimate how long reopen might\n          // take based on past data?\n\n          while (!finish) {\n            //System.out.println(\"reopen: cycle\");\n\n            // True if we have someone waiting for reopen'd searcher:\n            hasWaiting = waitingGen > manager.getCurrentSearchingGen(waitingNeedsDeletes);\n            final long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);\n\n            final long sleepNS = nextReopenStartNS - System.nanoTime();\n\n            if (sleepNS > 0) {\n              //System.out.println(\"reopen: sleep \" + (sleepNS/1000000.0) + \" ms (hasWaiting=\" + hasWaiting + \")\");\n              try {\n                wait(sleepNS/1000000, (int) (sleepNS%1000000));\n              } catch (InterruptedException ie) {\n                Thread.currentThread().interrupt();\n                //System.out.println(\"NRT: set finish on interrupt\");\n                finish = true;\n                break;\n              }\n            } else {\n              break;\n            }\n          }\n\n          if (finish) {\n            //System.out.println(\"reopen: finish\");\n            return;\n          }\n          //System.out.println(\"reopen: start hasWaiting=\" + hasWaiting);\n        }\n\n        lastReopenStartNS = System.nanoTime();\n        try {\n          //final long t0 = System.nanoTime();\n          manager.maybeReopen(waitingNeedsDeletes);\n          //System.out.println(\"reopen took \" + ((System.nanoTime()-t0)/1000000.0) + \" msec\");\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": IOE\");\n          //ioe.printStackTrace();\n          throw new RuntimeException(ioe);\n        }\n      }\n    } catch (Throwable t) {\n      //System.out.println(\"REOPEN EXC\");\n      //t.printStackTrace(System.out);\n      throw new RuntimeException(t);\n    }\n  }\n\n","sourceOld":"  @Override\n    public void run() {\n    // TODO: maybe use private thread ticktock timer, in\n    // case clock shift messes up nanoTime?\n    long lastReopenStartNS = System.nanoTime();\n\n    //System.out.println(\"reopen: start\");\n    try {\n      while (true) {\n\n        final boolean doApplyDeletes;\n\n        boolean hasWaiting = false;\n\n        synchronized(this) {\n          // TODO: try to guestimate how long reopen might\n          // take based on past data?\n\n          while (!finish) {\n            //System.out.println(\"reopen: cycle\");\n\n            // True if we have someone waiting for reopen'd searcher:\n            hasWaiting = waitingGen > manager.getCurrentSearchingGen(waitingNeedsDeletes);\n            final long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);\n\n            final long sleepNS = nextReopenStartNS - System.nanoTime();\n\n            if (sleepNS > 0) {\n              //System.out.println(\"reopen: sleep \" + (sleepNS/1000000.0) + \" ms (hasWaiting=\" + hasWaiting + \")\");\n              try {\n                wait(sleepNS/1000000, (int) (sleepNS%1000000));\n              } catch (InterruptedException ie) {\n                Thread.currentThread().interrupt();\n                //System.out.println(\"NRT: set finish on interrupt\");\n                finish = true;\n                break;\n              }\n            } else {\n              break;\n            }\n          }\n\n          if (finish) {\n            //System.out.println(\"reopen: finish\");\n            return;\n          }\n\n          doApplyDeletes = hasWaiting ? waitingNeedsDeletes : true;\n          waitingNeedsDeletes = false;\n          //System.out.println(\"reopen: start hasWaiting=\" + hasWaiting);\n        }\n\n        lastReopenStartNS = System.nanoTime();\n        try {\n          //final long t0 = System.nanoTime();\n          manager.reopen(doApplyDeletes);\n          //System.out.println(\"reopen took \" + ((System.nanoTime()-t0)/1000000.0) + \" msec\");\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": IOE\");\n          //ioe.printStackTrace();\n          throw new RuntimeException(ioe);\n        }\n      }\n    } catch (Throwable t) {\n      //System.out.println(\"REOPEN EXC\");\n      //t.printStackTrace(System.out);\n      throw new RuntimeException(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NRTManagerReopenThread#run().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManagerReopenThread#run().mjava","sourceNew":"  @Override\n  public void run() {\n    // TODO: maybe use private thread ticktock timer, in\n    // case clock shift messes up nanoTime?\n    long lastReopenStartNS = System.nanoTime();\n\n    //System.out.println(\"reopen: start\");\n    try {\n      while (true) {\n\n        boolean hasWaiting = false;\n\n        synchronized(this) {\n          // TODO: try to guestimate how long reopen might\n          // take based on past data?\n\n          while (!finish) {\n            //System.out.println(\"reopen: cycle\");\n\n            // True if we have someone waiting for reopen'd searcher:\n            hasWaiting = waitingGen > manager.getCurrentSearchingGen(waitingNeedsDeletes);\n            final long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);\n\n            final long sleepNS = nextReopenStartNS - System.nanoTime();\n\n            if (sleepNS > 0) {\n              //System.out.println(\"reopen: sleep \" + (sleepNS/1000000.0) + \" ms (hasWaiting=\" + hasWaiting + \")\");\n              try {\n                wait(sleepNS/1000000, (int) (sleepNS%1000000));\n              } catch (InterruptedException ie) {\n                Thread.currentThread().interrupt();\n                //System.out.println(\"NRT: set finish on interrupt\");\n                finish = true;\n                break;\n              }\n            } else {\n              break;\n            }\n          }\n\n          if (finish) {\n            //System.out.println(\"reopen: finish\");\n            return;\n          }\n          //System.out.println(\"reopen: start hasWaiting=\" + hasWaiting);\n        }\n\n        lastReopenStartNS = System.nanoTime();\n        try {\n          //final long t0 = System.nanoTime();\n          manager.maybeReopen(waitingNeedsDeletes);\n          //System.out.println(\"reopen took \" + ((System.nanoTime()-t0)/1000000.0) + \" msec\");\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": IOE\");\n          //ioe.printStackTrace();\n          throw new RuntimeException(ioe);\n        }\n      }\n    } catch (Throwable t) {\n      //System.out.println(\"REOPEN EXC\");\n      //t.printStackTrace(System.out);\n      throw new RuntimeException(t);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    // TODO: maybe use private thread ticktock timer, in\n    // case clock shift messes up nanoTime?\n    long lastReopenStartNS = System.nanoTime();\n\n    //System.out.println(\"reopen: start\");\n    try {\n      while (true) {\n\n        boolean hasWaiting = false;\n\n        synchronized(this) {\n          // TODO: try to guestimate how long reopen might\n          // take based on past data?\n\n          while (!finish) {\n            //System.out.println(\"reopen: cycle\");\n\n            // True if we have someone waiting for reopen'd searcher:\n            hasWaiting = waitingGen > manager.getCurrentSearchingGen(waitingNeedsDeletes);\n            final long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);\n\n            final long sleepNS = nextReopenStartNS - System.nanoTime();\n\n            if (sleepNS > 0) {\n              //System.out.println(\"reopen: sleep \" + (sleepNS/1000000.0) + \" ms (hasWaiting=\" + hasWaiting + \")\");\n              try {\n                wait(sleepNS/1000000, (int) (sleepNS%1000000));\n              } catch (InterruptedException ie) {\n                Thread.currentThread().interrupt();\n                //System.out.println(\"NRT: set finish on interrupt\");\n                finish = true;\n                break;\n              }\n            } else {\n              break;\n            }\n          }\n\n          if (finish) {\n            //System.out.println(\"reopen: finish\");\n            return;\n          }\n          //System.out.println(\"reopen: start hasWaiting=\" + hasWaiting);\n        }\n\n        lastReopenStartNS = System.nanoTime();\n        try {\n          //final long t0 = System.nanoTime();\n          manager.maybeReopen(waitingNeedsDeletes);\n          //System.out.println(\"reopen took \" + ((System.nanoTime()-t0)/1000000.0) + \" msec\");\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": IOE\");\n          //ioe.printStackTrace();\n          throw new RuntimeException(ioe);\n        }\n      }\n    } catch (Throwable t) {\n      //System.out.println(\"REOPEN EXC\");\n      //t.printStackTrace(System.out);\n      throw new RuntimeException(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["606baff722a317c76a92b111d183b54b6e6e5741"],"39d69912999d6e0acfb6eb6be558fcc165eee0b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"606baff722a317c76a92b111d183b54b6e6e5741":["39d69912999d6e0acfb6eb6be558fcc165eee0b2"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","39d69912999d6e0acfb6eb6be558fcc165eee0b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df16fc2e9b615e0138edac46655ae628f5d098ad"]},"commit2Childs":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"39d69912999d6e0acfb6eb6be558fcc165eee0b2":["606baff722a317c76a92b111d183b54b6e6e5741","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39d69912999d6e0acfb6eb6be558fcc165eee0b2","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"606baff722a317c76a92b111d183b54b6e6e5741":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ed208afa1e7aa98899ddb1dedfddedddf898253","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}