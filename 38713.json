{"path":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Object,Object).mjava","commits":[{"id":"cbf497fc92342be81ff184a144dfa7c96264116b","date":1275079529,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Object,Object).mjava","pathOld":"/dev/null","sourceNew":"    public synchronized T get(IndexReader reader, Object coreKey, Object delCoreKey) throws IOException {\n      T value;\n\n      if (cache == null) {\n        cache = new WeakHashMap<Object,T>();\n      }\n\n      if (deletesMode == DeletesMode.IGNORE) {\n        // key on core\n        value = cache.get(coreKey);\n      } else if (deletesMode == DeletesMode.RECACHE) {\n        // key on deletes, if any, else core\n        value = cache.get(delCoreKey);\n      } else {\n\n        assert deletesMode == DeletesMode.DYNAMIC;\n\n        // first try for exact match\n        value = cache.get(delCoreKey);\n\n        if (value == null) {\n          // now for core match, but dynamically AND NOT\n          // deletions\n          value = cache.get(coreKey);\n          if (value != null) {\n            final Bits delDocs = MultiFields.getDeletedDocs(reader);\n            if (delDocs != null) {\n              value = mergeDeletes(delDocs, value);\n            }\n          }\n        }\n      }\n\n      return value;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df3efec034da1483899681baabb1df029e8628c4","date":1294243646,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Object,Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Object,Object).mjava","sourceNew":"    public synchronized T get(IndexReader reader, Object coreKey, Object delCoreKey) throws IOException {\n      T value;\n\n      if (cache == null) {\n        cache = new WeakHashMap<Object,T>();\n      }\n\n      if (deletesMode == DeletesMode.IGNORE) {\n        // key on core\n        value = cache.get(coreKey);\n      } else if (deletesMode == DeletesMode.RECACHE) {\n        // key on deletes, if any, else core\n        value = cache.get(delCoreKey);\n      } else {\n\n        assert deletesMode == DeletesMode.DYNAMIC;\n\n        // first try for exact match\n        value = cache.get(delCoreKey);\n\n        if (value == null) {\n          // now for core match, but dynamically AND NOT\n          // deletions\n          value = cache.get(coreKey);\n          if (value != null) {\n            final Bits delDocs = reader.getDeletedDocs();\n            if (delDocs != null) {\n              value = mergeDeletes(delDocs, value);\n            }\n          }\n        }\n      }\n\n      return value;\n    }\n\n","sourceOld":"    public synchronized T get(IndexReader reader, Object coreKey, Object delCoreKey) throws IOException {\n      T value;\n\n      if (cache == null) {\n        cache = new WeakHashMap<Object,T>();\n      }\n\n      if (deletesMode == DeletesMode.IGNORE) {\n        // key on core\n        value = cache.get(coreKey);\n      } else if (deletesMode == DeletesMode.RECACHE) {\n        // key on deletes, if any, else core\n        value = cache.get(delCoreKey);\n      } else {\n\n        assert deletesMode == DeletesMode.DYNAMIC;\n\n        // first try for exact match\n        value = cache.get(delCoreKey);\n\n        if (value == null) {\n          // now for core match, but dynamically AND NOT\n          // deletions\n          value = cache.get(coreKey);\n          if (value != null) {\n            final Bits delDocs = MultiFields.getDeletedDocs(reader);\n            if (delDocs != null) {\n              value = mergeDeletes(delDocs, value);\n            }\n          }\n        }\n      }\n\n      return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Object,Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Object,Object).mjava","sourceNew":"    public synchronized T get(IndexReader reader, Object coreKey, Object delCoreKey) throws IOException {\n      T value;\n\n      if (cache == null) {\n        cache = new WeakHashMap<Object,T>();\n      }\n\n      if (deletesMode == DeletesMode.IGNORE) {\n        // key on core\n        value = cache.get(coreKey);\n      } else if (deletesMode == DeletesMode.RECACHE) {\n        // key on deletes, if any, else core\n        value = cache.get(delCoreKey);\n      } else {\n\n        assert deletesMode == DeletesMode.DYNAMIC;\n\n        // first try for exact match\n        value = cache.get(delCoreKey);\n\n        if (value == null) {\n          // now for core match, but dynamically AND NOT\n          // deletions\n          value = cache.get(coreKey);\n          if (value != null) {\n            final Bits delDocs = reader.getDeletedDocs();\n            if (delDocs != null) {\n              value = mergeDeletes(delDocs, value);\n            }\n          }\n        }\n      }\n\n      return value;\n    }\n\n","sourceOld":"    public synchronized T get(IndexReader reader, Object coreKey, Object delCoreKey) throws IOException {\n      T value;\n\n      if (cache == null) {\n        cache = new WeakHashMap<Object,T>();\n      }\n\n      if (deletesMode == DeletesMode.IGNORE) {\n        // key on core\n        value = cache.get(coreKey);\n      } else if (deletesMode == DeletesMode.RECACHE) {\n        // key on deletes, if any, else core\n        value = cache.get(delCoreKey);\n      } else {\n\n        assert deletesMode == DeletesMode.DYNAMIC;\n\n        // first try for exact match\n        value = cache.get(delCoreKey);\n\n        if (value == null) {\n          // now for core match, but dynamically AND NOT\n          // deletions\n          value = cache.get(coreKey);\n          if (value != null) {\n            final Bits delDocs = MultiFields.getDeletedDocs(reader);\n            if (delDocs != null) {\n              value = mergeDeletes(delDocs, value);\n            }\n          }\n        }\n      }\n\n      return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Object,Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Object,Object).mjava","sourceNew":"    public synchronized T get(IndexReader reader, Object coreKey, Object delCoreKey) throws IOException {\n      T value;\n\n      if (cache == null) {\n        cache = new WeakHashMap<Object,T>();\n      }\n\n      if (deletesMode == DeletesMode.IGNORE) {\n        // key on core\n        value = cache.get(coreKey);\n      } else if (deletesMode == DeletesMode.RECACHE) {\n        // key on deletes, if any, else core\n        value = cache.get(delCoreKey);\n      } else {\n\n        assert deletesMode == DeletesMode.DYNAMIC;\n\n        // first try for exact match\n        value = cache.get(delCoreKey);\n\n        if (value == null) {\n          // now for core match, but dynamically AND NOT\n          // deletions\n          value = cache.get(coreKey);\n          if (value != null) {\n            final Bits delDocs = reader.getDeletedDocs();\n            if (delDocs != null) {\n              value = mergeDeletes(delDocs, value);\n            }\n          }\n        }\n      }\n\n      return value;\n    }\n\n","sourceOld":"    public synchronized T get(IndexReader reader, Object coreKey, Object delCoreKey) throws IOException {\n      T value;\n\n      if (cache == null) {\n        cache = new WeakHashMap<Object,T>();\n      }\n\n      if (deletesMode == DeletesMode.IGNORE) {\n        // key on core\n        value = cache.get(coreKey);\n      } else if (deletesMode == DeletesMode.RECACHE) {\n        // key on deletes, if any, else core\n        value = cache.get(delCoreKey);\n      } else {\n\n        assert deletesMode == DeletesMode.DYNAMIC;\n\n        // first try for exact match\n        value = cache.get(delCoreKey);\n\n        if (value == null) {\n          // now for core match, but dynamically AND NOT\n          // deletions\n          value = cache.get(coreKey);\n          if (value != null) {\n            final Bits delDocs = MultiFields.getDeletedDocs(reader);\n            if (delDocs != null) {\n              value = mergeDeletes(delDocs, value);\n            }\n          }\n        }\n      }\n\n      return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Object,Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Object,Object).mjava","sourceNew":"    public synchronized T get(IndexReader reader, Object coreKey, Object delCoreKey) throws IOException {\n      T value;\n\n      if (cache == null) {\n        cache = new WeakHashMap<Object,T>();\n      }\n\n      if (deletesMode == DeletesMode.IGNORE) {\n        // key on core\n        value = cache.get(coreKey);\n      } else if (deletesMode == DeletesMode.RECACHE) {\n        // key on deletes, if any, else core\n        value = cache.get(delCoreKey);\n      } else {\n\n        assert deletesMode == DeletesMode.DYNAMIC;\n\n        // first try for exact match\n        value = cache.get(delCoreKey);\n\n        if (value == null) {\n          // now for core match, but dynamically AND\n          // live docs\n          value = cache.get(coreKey);\n          if (value != null) {\n            final Bits liveDocs = reader.getLiveDocs();\n            if (liveDocs != null) {\n              value = mergeLiveDocs(liveDocs, value);\n            }\n          }\n        }\n      }\n\n      return value;\n    }\n\n","sourceOld":"    public synchronized T get(IndexReader reader, Object coreKey, Object delCoreKey) throws IOException {\n      T value;\n\n      if (cache == null) {\n        cache = new WeakHashMap<Object,T>();\n      }\n\n      if (deletesMode == DeletesMode.IGNORE) {\n        // key on core\n        value = cache.get(coreKey);\n      } else if (deletesMode == DeletesMode.RECACHE) {\n        // key on deletes, if any, else core\n        value = cache.get(delCoreKey);\n      } else {\n\n        assert deletesMode == DeletesMode.DYNAMIC;\n\n        // first try for exact match\n        value = cache.get(delCoreKey);\n\n        if (value == null) {\n          // now for core match, but dynamically AND NOT\n          // deletions\n          value = cache.get(coreKey);\n          if (value != null) {\n            final Bits delDocs = reader.getDeletedDocs();\n            if (delDocs != null) {\n              value = mergeDeletes(delDocs, value);\n            }\n          }\n        }\n      }\n\n      return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Object,Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Object,Object).mjava","sourceNew":"    public synchronized T get(IndexReader reader, Object coreKey, Object delCoreKey) throws IOException {\n      T value;\n\n      if (cache == null) {\n        cache = new WeakHashMap<Object,T>();\n      }\n\n      if (deletesMode == DeletesMode.IGNORE) {\n        // key on core\n        value = cache.get(coreKey);\n      } else if (deletesMode == DeletesMode.RECACHE) {\n        // key on deletes, if any, else core\n        value = cache.get(delCoreKey);\n      } else {\n\n        assert deletesMode == DeletesMode.DYNAMIC;\n\n        // first try for exact match\n        value = cache.get(delCoreKey);\n\n        if (value == null) {\n          // now for core match, but dynamically AND\n          // live docs\n          value = cache.get(coreKey);\n          if (value != null) {\n            final Bits liveDocs = reader.getLiveDocs();\n            if (liveDocs != null) {\n              value = mergeLiveDocs(liveDocs, value);\n            }\n          }\n        }\n      }\n\n      return value;\n    }\n\n","sourceOld":"    public synchronized T get(IndexReader reader, Object coreKey, Object delCoreKey) throws IOException {\n      T value;\n\n      if (cache == null) {\n        cache = new WeakHashMap<Object,T>();\n      }\n\n      if (deletesMode == DeletesMode.IGNORE) {\n        // key on core\n        value = cache.get(coreKey);\n      } else if (deletesMode == DeletesMode.RECACHE) {\n        // key on deletes, if any, else core\n        value = cache.get(delCoreKey);\n      } else {\n\n        assert deletesMode == DeletesMode.DYNAMIC;\n\n        // first try for exact match\n        value = cache.get(delCoreKey);\n\n        if (value == null) {\n          // now for core match, but dynamically AND NOT\n          // deletions\n          value = cache.get(coreKey);\n          if (value != null) {\n            final Bits delDocs = reader.getDeletedDocs();\n            if (delDocs != null) {\n              value = mergeDeletes(delDocs, value);\n            }\n          }\n        }\n      }\n\n      return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Object,Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Object,Object).mjava","sourceNew":"    public synchronized T get(IndexReader reader, Object coreKey, Object delCoreKey) throws IOException {\n      T value;\n\n      if (cache == null) {\n        cache = new WeakHashMap<Object,T>();\n      }\n\n      if (deletesMode == DeletesMode.IGNORE) {\n        // key on core\n        value = cache.get(coreKey);\n      } else if (deletesMode == DeletesMode.RECACHE) {\n        // key on deletes, if any, else core\n        value = cache.get(delCoreKey);\n      } else {\n\n        assert deletesMode == DeletesMode.DYNAMIC;\n\n        // first try for exact match\n        value = cache.get(delCoreKey);\n\n        if (value == null) {\n          // now for core match, but dynamically AND\n          // live docs\n          value = cache.get(coreKey);\n          if (value != null) {\n            final Bits liveDocs = reader.getLiveDocs();\n            if (liveDocs != null) {\n              value = mergeLiveDocs(liveDocs, value);\n            }\n          }\n        }\n      }\n\n      return value;\n    }\n\n","sourceOld":"    public synchronized T get(IndexReader reader, Object coreKey, Object delCoreKey) throws IOException {\n      T value;\n\n      if (cache == null) {\n        cache = new WeakHashMap<Object,T>();\n      }\n\n      if (deletesMode == DeletesMode.IGNORE) {\n        // key on core\n        value = cache.get(coreKey);\n      } else if (deletesMode == DeletesMode.RECACHE) {\n        // key on deletes, if any, else core\n        value = cache.get(delCoreKey);\n      } else {\n\n        assert deletesMode == DeletesMode.DYNAMIC;\n\n        // first try for exact match\n        value = cache.get(delCoreKey);\n\n        if (value == null) {\n          // now for core match, but dynamically AND NOT\n          // deletions\n          value = cache.get(coreKey);\n          if (value != null) {\n            final Bits delDocs = reader.getDeletedDocs();\n            if (delDocs != null) {\n              value = mergeDeletes(delDocs, value);\n            }\n          }\n        }\n      }\n\n      return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Object,Object).mjava","sourceNew":null,"sourceOld":"    public synchronized T get(IndexReader reader, Object coreKey, Object delCoreKey) throws IOException {\n      T value;\n\n      if (cache == null) {\n        cache = new WeakHashMap<Object,T>();\n      }\n\n      if (deletesMode == DeletesMode.IGNORE) {\n        // key on core\n        value = cache.get(coreKey);\n      } else if (deletesMode == DeletesMode.RECACHE) {\n        // key on deletes, if any, else core\n        value = cache.get(delCoreKey);\n      } else {\n\n        assert deletesMode == DeletesMode.DYNAMIC;\n\n        // first try for exact match\n        value = cache.get(delCoreKey);\n\n        if (value == null) {\n          // now for core match, but dynamically AND\n          // live docs\n          value = cache.get(coreKey);\n          if (value != null) {\n            final Bits liveDocs = reader.getLiveDocs();\n            if (liveDocs != null) {\n              value = mergeLiveDocs(liveDocs, value);\n            }\n          }\n        }\n      }\n\n      return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc0528274cde759b2d3f75b55794edeae6093533","date":1323799309,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Object,Object).mjava","pathOld":"/dev/null","sourceNew":"    public synchronized T get(IndexReader reader, Object coreKey, Object coreSubKey) throws IOException {\n      Map<Object,T> innerCache = cache.get(coreKey);\n      if (innerCache == null) {\n        innerCache = new WeakHashMap<Object,T>();\n        cache.put(coreKey, innerCache);\n      }\n\n      return innerCache.get(coreSubKey);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceb6a6c707ada1df8bde804e25c98668e699a18","date":1323800602,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Object,Object).mjava","pathOld":"/dev/null","sourceNew":"    public synchronized T get(IndexReader reader, Object coreKey, Object coreSubKey) throws IOException {\n      Map<Object,T> innerCache = cache.get(coreKey);\n      if (innerCache == null) {\n        innerCache = new WeakHashMap<Object,T>();\n        cache.put(coreKey, innerCache);\n      }\n\n      return innerCache.get(coreSubKey);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd8a5ae76e8111ea49a39aef28be5fbd3dab382b","date":1323874359,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter.FilterCache#get(IndexReader,Object,Object).mjava","sourceNew":null,"sourceOld":"    public synchronized T get(IndexReader reader, Object coreKey, Object coreSubKey) throws IOException {\n      Map<Object,T> innerCache = cache.get(coreKey);\n      if (innerCache == null) {\n        innerCache = new WeakHashMap<Object,T>();\n        cache.put(coreKey, innerCache);\n      }\n\n      return innerCache.get(coreSubKey);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["cbf497fc92342be81ff184a144dfa7c96264116b","df3efec034da1483899681baabb1df029e8628c4"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":["6620df8541b174097b1133a4fc370adb2e570524","bc0528274cde759b2d3f75b55794edeae6093533"],"6620df8541b174097b1133a4fc370adb2e570524":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["df3efec034da1483899681baabb1df029e8628c4"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["df3efec034da1483899681baabb1df029e8628c4","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["df3efec034da1483899681baabb1df029e8628c4","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cbf497fc92342be81ff184a144dfa7c96264116b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"df3efec034da1483899681baabb1df029e8628c4":["cbf497fc92342be81ff184a144dfa7c96264116b"],"bc0528274cde759b2d3f75b55794edeae6093533":["6620df8541b174097b1133a4fc370adb2e570524"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd8a5ae76e8111ea49a39aef28be5fbd3dab382b":["bc0528274cde759b2d3f75b55794edeae6093533"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["cbf497fc92342be81ff184a144dfa7c96264116b","df3efec034da1483899681baabb1df029e8628c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd8a5ae76e8111ea49a39aef28be5fbd3dab382b"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"4ceb6a6c707ada1df8bde804e25c98668e699a18":[],"6620df8541b174097b1133a4fc370adb2e570524":["4ceb6a6c707ada1df8bde804e25c98668e699a18","bc0528274cde759b2d3f75b55794edeae6093533"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["6620df8541b174097b1133a4fc370adb2e570524","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cbf497fc92342be81ff184a144dfa7c96264116b":["70ad682703b8585f5d0a637efec044d57ec05efb","df3efec034da1483899681baabb1df029e8628c4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"df3efec034da1483899681baabb1df029e8628c4":["70ad682703b8585f5d0a637efec044d57ec05efb","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","868da859b43505d9d2a023bfeae6dd0c795f5295"],"bc0528274cde759b2d3f75b55794edeae6093533":["4ceb6a6c707ada1df8bde804e25c98668e699a18","cd8a5ae76e8111ea49a39aef28be5fbd3dab382b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cbf497fc92342be81ff184a144dfa7c96264116b"],"cd8a5ae76e8111ea49a39aef28be5fbd3dab382b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","4ceb6a6c707ada1df8bde804e25c98668e699a18","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}