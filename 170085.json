{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","commits":[{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager).mjava","sourceNew":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","sourceOld":"    Session(SolrCloudManager cloudManager) {\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","pathOld":"/dev/null","sourceNew":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","pathOld":"/dev/null","sourceNew":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","sourceNew":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Clause.Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Clause.Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","sourceOld":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb","date":1533364463,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","sourceNew":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","sourceOld":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Clause.Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Clause.Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","sourceNew":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","sourceOld":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        LOG.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        LOG.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","sourceNew":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","sourceOld":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","sourceNew":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","sourceOld":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa","date":1559549598,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","sourceNew":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","sourceOld":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","sourceOld":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","sourceNew":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e5028c6838e2e49cb9da1cf70269851c049f107a","date":1584984100,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Policy,Transaction).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager,Transaction).mjava","sourceNew":"    Session(SolrCloudManager cloudManager, Policy policy, Transaction transaction) {\n      this.transaction = transaction;\n      this.policy = policy;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = policy.getClusterPolicy().stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(policy, expandedClauses, stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, policy.getParams(), policy.getPerReplicaAttributes(), this));\n      applyRules();\n    }\n\n","sourceOld":"    Session(SolrCloudManager cloudManager, Transaction transaction) {\n      this.transaction = transaction;\n      ClusterState state = null;\n      this.nodeStateProvider = cloudManager.getNodeStateProvider();\n      try {\n        state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session created with cluster state: {}\", state);\n      } catch (Exception e) {\n        log.trace(\"-- session created, can't obtain cluster state\", e);\n      }\n      this.znodeVersion = state != null ? state.getZNodeVersion() : -1;\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, perReplicaAttributes, this));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["081849c2756a6c9b9883ab9e332f3f3fcf2f05fa"],"e5028c6838e2e49cb9da1cf70269851c049f107a":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9837f40c922407d857991971de6def18eda0857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["27639bb5e041490ce599065875dd2f6d8beef62a"],"9837f40c922407d857991971de6def18eda0857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"27639bb5e041490ce599065875dd2f6d8beef62a":["9837f40c922407d857991971de6def18eda0857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e5028c6838e2e49cb9da1cf70269851c049f107a"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9837f40c922407d857991971de6def18eda0857b"]},"commit2Childs":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"e5028c6838e2e49cb9da1cf70269851c049f107a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["e5028c6838e2e49cb9da1cf70269851c049f107a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["081849c2756a6c9b9883ab9e332f3f3fcf2f05fa","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"9837f40c922407d857991971de6def18eda0857b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","27639bb5e041490ce599065875dd2f6d8beef62a","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"27639bb5e041490ce599065875dd2f6d8beef62a":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}