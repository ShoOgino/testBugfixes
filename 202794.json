{"path":"contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","commits":[{"id":"db22d0edb2467b44638dfe7d72c29c2ef6fc84e5","date":1239654370,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","pathOld":"/dev/null","sourceNew":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0)\n                LOG.info(\"NO children : \");\n            }\n          }\n        }\n        while (!hasMessages);\n        return next;\n      } catch (MessagingException e) {\n        //throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n        //        \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2b69725d5832c3c9fa9df6b9081c7d4e46a281","date":1260515652,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","pathOld":"contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","sourceNew":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0)\n                LOG.info(\"NO children : \");\n            }\n          }\n        }\n        while (!hasMessages);\n        return next;\n      } catch (MessagingException e) {\n        //throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n        //        \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","sourceOld":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0)\n                LOG.info(\"NO children : \");\n            }\n          }\n        }\n        while (!hasMessages);\n        return next;\n      } catch (MessagingException e) {\n        //throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n        //        \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b7b8ee0df825b37bc7fb44a2bfd91aa08357492","date":1260863347,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","sourceNew":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0)\n                LOG.info(\"NO children : \");\n            }\n          }\n        }\n        while (!hasMessages);\n        return next;\n      } catch (MessagingException e) {\n        //throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n        //        \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","sourceOld":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0)\n                LOG.info(\"NO children : \");\n            }\n          }\n        }\n        while (!hasMessages);\n        return next;\n      } catch (MessagingException e) {\n        //throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n        //        \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","pathOld":"contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","sourceNew":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0)\n                LOG.info(\"NO children : \");\n            }\n          }\n        }\n        while (!hasMessages);\n        return next;\n      } catch (MessagingException e) {\n        //throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n        //        \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","sourceOld":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0)\n                LOG.info(\"NO children : \");\n            }\n          }\n        }\n        while (!hasMessages);\n        return next;\n      } catch (MessagingException e) {\n        //throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n        //        \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d2b69725d5832c3c9fa9df6b9081c7d4e46a281":["db22d0edb2467b44638dfe7d72c29c2ef6fc84e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"6b7b8ee0df825b37bc7fb44a2bfd91aa08357492":["0d2b69725d5832c3c9fa9df6b9081c7d4e46a281"],"ad94625fb8d088209f46650c8097196fec67f00c":["6b7b8ee0df825b37bc7fb44a2bfd91aa08357492"],"db22d0edb2467b44638dfe7d72c29c2ef6fc84e5":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0d2b69725d5832c3c9fa9df6b9081c7d4e46a281":["6b7b8ee0df825b37bc7fb44a2bfd91aa08357492"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["db22d0edb2467b44638dfe7d72c29c2ef6fc84e5"],"6b7b8ee0df825b37bc7fb44a2bfd91aa08357492":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"db22d0edb2467b44638dfe7d72c29c2ef6fc84e5":["0d2b69725d5832c3c9fa9df6b9081c7d4e46a281"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}