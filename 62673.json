{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronizationBig().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronizationBig().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronizationBig().mjava","sourceNew":"  /**\n   * Run many instances of {@link MultiCLSearcher} in parallel, results should\n   * be sane. Each instance has a random delay for reading bytes, to ensure\n   * that threads finish in different order than started.\n   */\n  @Test @Nightly\n  public void testGeneralSynchronizationBig() throws Exception {\n    int[] numThreads = new int[] { 2, 3, 5, 8 };\n    int[] sleepMillis = new int[] { -1, 1, 20, 33 };\n    int[] cacheSize = new int[] { 0,1,2,3,5 };\n    for (int size : cacheSize) {\n      for (int sleep : sleepMillis) {\n        for (int nThreads : numThreads) {\n          doTestGeneralSynchronization(nThreads, sleep, size);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Run many instances of {@link MultiCLSearcher} in parallel, results should\n   * be sane. Each instance has a random delay for reading bytes, to ensure\n   * that threads finish in different order than started.\n   */\n  @Test @Nightly\n  public void testGeneralSynchronizationBig() throws Exception {\n    int[] numThreads = new int[] { 2, 3, 5, 8 };\n    int[] sleepMillis = new int[] { -1, 1, 20, 33 };\n    int[] cacheSize = new int[] { 0,1,2,3,5 };\n    for (int size : cacheSize) {\n      for (int sleep : sleepMillis) {\n        for (int nThreads : numThreads) {\n          doTestGeneralSynchronization(nThreads, sleep, size);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","date":1359570667,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronizationBig().mjava","sourceNew":null,"sourceOld":"  /**\n   * Run many instances of {@link MultiCLSearcher} in parallel, results should\n   * be sane. Each instance has a random delay for reading bytes, to ensure\n   * that threads finish in different order than started.\n   */\n  @Test @Nightly\n  public void testGeneralSynchronizationBig() throws Exception {\n    int[] numThreads = new int[] { 2, 3, 5, 8 };\n    int[] sleepMillis = new int[] { -1, 1, 20, 33 };\n    int[] cacheSize = new int[] { 0,1,2,3,5 };\n    for (int size : cacheSize) {\n      for (int sleep : sleepMillis) {\n        for (int nThreads : numThreads) {\n          doTestGeneralSynchronization(nThreads, sleep, size);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronizationBig().mjava","sourceNew":null,"sourceOld":"  /**\n   * Run many instances of {@link MultiCLSearcher} in parallel, results should\n   * be sane. Each instance has a random delay for reading bytes, to ensure\n   * that threads finish in different order than started.\n   */\n  @Test @Nightly\n  public void testGeneralSynchronizationBig() throws Exception {\n    int[] numThreads = new int[] { 2, 3, 5, 8 };\n    int[] sleepMillis = new int[] { -1, 1, 20, 33 };\n    int[] cacheSize = new int[] { 0,1,2,3,5 };\n    for (int size : cacheSize) {\n      for (int sleep : sleepMillis) {\n        for (int nThreads : numThreads) {\n          doTestGeneralSynchronization(nThreads, sleep, size);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61d5f95d14e5b9b046998c51e16709a398c15226":["b89678825b68eccaf09e6ab71675fc0b0af1e099","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["61d5f95d14e5b9b046998c51e16709a398c15226","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}