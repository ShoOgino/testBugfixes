{"path":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#offer(byte[]).mjava","commits":[{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  @Override\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  @Override\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  @Override\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  @Override\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be96d8a30bc93529faa1e8ee22a48fbe6db12d11","date":1507229563,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  @Override\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          if (maxQueueSize > 0) {\n            if (offerPermits.get() <= 0 || offerPermits.getAndDecrement() <= 0) {\n              // If a max queue size is set, check it before creating a new queue item.\n              Stat stat = zookeeper.exists(dir, null, true);\n              if (stat == null) {\n                // jump to the code below, which tries to create dir if it doesn't exist\n                throw new KeeperException.NoNodeException();\n              }\n              int remainingCapacity = maxQueueSize - stat.getNumChildren();\n              if (remainingCapacity <= 0) {\n                throw new IllegalStateException(\"queue is full\");\n              }\n\n              // Allow this client to push up to 1% of the remaining queue capacity without rechecking.\n              offerPermits.set(maxQueueSize - stat.getNumChildren() / 100);\n            }\n          }\n\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  @Override\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"928a6848fba5d2beaeb2a03c40b0c5d5a627ea1c","date":1509661619,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  @Override\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          if (maxQueueSize > 0) {\n            if (offerPermits.get() <= 0 || offerPermits.getAndDecrement() <= 0) {\n              // If a max queue size is set, check it before creating a new queue item.\n              Stat stat = zookeeper.exists(dir, null, true);\n              if (stat == null) {\n                // jump to the code below, which tries to create dir if it doesn't exist\n                throw new KeeperException.NoNodeException();\n              }\n              int remainingCapacity = maxQueueSize - stat.getNumChildren();\n              if (remainingCapacity <= 0) {\n                throw new IllegalStateException(\"queue is full\");\n              }\n\n              // Allow this client to push up to 1% of the remaining queue capacity without rechecking.\n              offerPermits.set(remainingCapacity / 100);\n            }\n          }\n\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  @Override\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          if (maxQueueSize > 0) {\n            if (offerPermits.get() <= 0 || offerPermits.getAndDecrement() <= 0) {\n              // If a max queue size is set, check it before creating a new queue item.\n              Stat stat = zookeeper.exists(dir, null, true);\n              if (stat == null) {\n                // jump to the code below, which tries to create dir if it doesn't exist\n                throw new KeeperException.NoNodeException();\n              }\n              int remainingCapacity = maxQueueSize - stat.getNumChildren();\n              if (remainingCapacity <= 0) {\n                throw new IllegalStateException(\"queue is full\");\n              }\n\n              // Allow this client to push up to 1% of the remaining queue capacity without rechecking.\n              offerPermits.set(maxQueueSize - stat.getNumChildren() / 100);\n            }\n          }\n\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  @Override\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          if (maxQueueSize > 0) {\n            if (offerPermits.get() <= 0 || offerPermits.getAndDecrement() <= 0) {\n              // If a max queue size is set, check it before creating a new queue item.\n              Stat stat = zookeeper.exists(dir, null, true);\n              if (stat == null) {\n                // jump to the code below, which tries to create dir if it doesn't exist\n                throw new KeeperException.NoNodeException();\n              }\n              int remainingCapacity = maxQueueSize - stat.getNumChildren();\n              if (remainingCapacity <= 0) {\n                throw new IllegalStateException(\"queue is full\");\n              }\n\n              // Allow this client to push up to 1% of the remaining queue capacity without rechecking.\n              offerPermits.set(remainingCapacity / 100);\n            }\n          }\n\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  @Override\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          if (maxQueueSize > 0) {\n            if (offerPermits.get() <= 0 || offerPermits.getAndDecrement() <= 0) {\n              // If a max queue size is set, check it before creating a new queue item.\n              Stat stat = zookeeper.exists(dir, null, true);\n              if (stat == null) {\n                // jump to the code below, which tries to create dir if it doesn't exist\n                throw new KeeperException.NoNodeException();\n              }\n              int remainingCapacity = maxQueueSize - stat.getNumChildren();\n              if (remainingCapacity <= 0) {\n                throw new IllegalStateException(\"queue is full\");\n              }\n\n              // Allow this client to push up to 1% of the remaining queue capacity without rechecking.\n              offerPermits.set(maxQueueSize - stat.getNumChildren() / 100);\n            }\n          }\n\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"928a6848fba5d2beaeb2a03c40b0c5d5a627ea1c":["be96d8a30bc93529faa1e8ee22a48fbe6db12d11"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["be96d8a30bc93529faa1e8ee22a48fbe6db12d11","928a6848fba5d2beaeb2a03c40b0c5d5a627ea1c"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"be96d8a30bc93529faa1e8ee22a48fbe6db12d11":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"928a6848fba5d2beaeb2a03c40b0c5d5a627ea1c":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6240b74b884c5587f2a4062dd27d6c32bf228889","be96d8a30bc93529faa1e8ee22a48fbe6db12d11"],"be96d8a30bc93529faa1e8ee22a48fbe6db12d11":["928a6848fba5d2beaeb2a03c40b0c5d5a627ea1c","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}