{"path":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testByteReverse().mjava","commits":[{"id":"b4a811009dda62552371fb4b6c76035677d3e3ee","date":1360899022,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testByteReverse().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests sorting on type byte in reverse */\n  public void testByteReverse() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"value\", 23));\n    doc.add(newStringField(\"value\", \"23\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"value\", -1));\n    doc.add(newStringField(\"value\", \"-1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"value\", 4));\n    doc.add(newStringField(\"value\", \"4\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.BYTE, true));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // reverse numeric order\n    assertEquals(\"23\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"-1\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertNoFieldCaches();\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testByteReverse().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests sorting on type byte in reverse */\n  public void testByteReverse() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"value\", 23));\n    doc.add(newStringField(\"value\", \"23\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"value\", -1));\n    doc.add(newStringField(\"value\", \"-1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"value\", 4));\n    doc.add(newStringField(\"value\", \"4\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.BYTE, true));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // reverse numeric order\n    assertEquals(\"23\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"-1\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertNoFieldCaches();\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testByteReverse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testByteReverse().mjava","sourceNew":"  /** Tests sorting on type byte in reverse */\n  public void testByteReverse() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"value\", 23));\n    doc.add(newStringField(\"value\", \"23\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"value\", -1));\n    doc.add(newStringField(\"value\", \"-1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"value\", 4));\n    doc.add(newStringField(\"value\", \"4\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.BYTE, true));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // reverse numeric order\n    assertEquals(\"23\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"-1\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertNoFieldCaches();\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type byte in reverse */\n  public void testByteReverse() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"value\", 23));\n    doc.add(newStringField(\"value\", \"23\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"value\", -1));\n    doc.add(newStringField(\"value\", \"-1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"value\", 4));\n    doc.add(newStringField(\"value\", \"4\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.BYTE, true));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // reverse numeric order\n    assertEquals(\"23\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"-1\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertNoFieldCaches();\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testByteReverse().mjava","sourceNew":null,"sourceOld":"  /** Tests sorting on type byte in reverse */\n  public void testByteReverse() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"value\", 23));\n    doc.add(newStringField(\"value\", \"23\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"value\", -1));\n    doc.add(newStringField(\"value\", \"-1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"value\", 4));\n    doc.add(newStringField(\"value\", \"4\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.BYTE, true));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // reverse numeric order\n    assertEquals(\"23\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"-1\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertNoFieldCaches();\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testByteReverse().mjava","sourceNew":null,"sourceOld":"  /** Tests sorting on type byte in reverse */\n  public void testByteReverse() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"value\", 23));\n    doc.add(newStringField(\"value\", \"23\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"value\", -1));\n    doc.add(newStringField(\"value\", \"-1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"value\", 4));\n    doc.add(newStringField(\"value\", \"4\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.BYTE, true));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // reverse numeric order\n    assertEquals(\"23\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertEquals(\"-1\", searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n    assertNoFieldCaches();\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4a811009dda62552371fb4b6c76035677d3e3ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","59a0020b413d44dd79d85d7a66ed5004265fb453"],"3b41f996b22bd5518650f897d050088ff808ec03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b4a811009dda62552371fb4b6c76035677d3e3ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["b4a811009dda62552371fb4b6c76035677d3e3ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59a0020b413d44dd79d85d7a66ed5004265fb453"]},"commit2Childs":{"b4a811009dda62552371fb4b6c76035677d3e3ee":["3b41f996b22bd5518650f897d050088ff808ec03","3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"3b41f996b22bd5518650f897d050088ff808ec03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4a811009dda62552371fb4b6c76035677d3e3ee","3b41f996b22bd5518650f897d050088ff808ec03"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","3b41f996b22bd5518650f897d050088ff808ec03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}