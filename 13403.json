{"path":"lucene/src/java/org/apache/lucene/search/similarities/BM25Similarity#explainScore(int,Explanation,BM25Stats,byte[]).mjava","commits":[{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/BM25Similarity#explainScore(int,Explanation,BM25Stats,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  private Explanation explainScore(int doc, Explanation freq, BM25Stats stats, byte[] norms) {\n    Explanation result = new Explanation();\n    result.setDescription(\"score(doc=\"+doc+\",freq=\"+freq+\"), product of:\");\n    \n    Explanation boostExpl = new Explanation(stats.queryBoost, \"boost\");\n    if (stats.queryBoost != 1.0f)\n      result.addDetail(boostExpl);\n    \n    result.addDetail(stats.idf);\n\n    Explanation tfNormExpl = new Explanation();\n    tfNormExpl.setDescription(\"tfNorm, computed from:\");\n    tfNormExpl.addDetail(freq);\n    tfNormExpl.addDetail(new Explanation(k1, \"parameter k1\"));\n    if (norms == null) {\n      tfNormExpl.addDetail(new Explanation(0, \"parameter b (norms omitted for field)\"));\n      tfNormExpl.setValue((freq.getValue() * (k1 + 1)) / (freq.getValue() + k1));\n    } else {\n      float doclen = decodeNormValue(norms[doc]);\n      tfNormExpl.addDetail(new Explanation(b, \"parameter b\"));\n      tfNormExpl.addDetail(new Explanation(stats.avgdl, \"avgFieldLength\"));\n      tfNormExpl.addDetail(new Explanation(doclen, \"fieldLength\"));\n      tfNormExpl.setValue((freq.getValue() * (k1 + 1)) / (freq.getValue() + k1 * (1 - b + b * doclen/stats.avgdl)));\n    }\n    result.addDetail(tfNormExpl);\n    result.setValue(boostExpl.getValue() * stats.idf.getValue() * tfNormExpl.getValue());\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00a42d7c744d010c2ac4884ef643039bf46e7d65","date":1318164606,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/BM25Similarity#explainScore(int,Explanation,BM25Stats,byte[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/BM25Similarity#explainScore(int,Explanation,BM25Stats,byte[]).mjava","sourceNew":"  private Explanation explainScore(int doc, Explanation freq, BM25Stats stats, byte[] norms) {\n    Explanation result = new Explanation();\n    result.setDescription(\"score(doc=\"+doc+\",freq=\"+freq+\"), product of:\");\n    \n    Explanation boostExpl = new Explanation(stats.queryBoost * stats.topLevelBoost, \"boost\");\n    if (boostExpl.getValue() != 1.0f)\n      result.addDetail(boostExpl);\n    \n    result.addDetail(stats.idf);\n\n    Explanation tfNormExpl = new Explanation();\n    tfNormExpl.setDescription(\"tfNorm, computed from:\");\n    tfNormExpl.addDetail(freq);\n    tfNormExpl.addDetail(new Explanation(k1, \"parameter k1\"));\n    if (norms == null) {\n      tfNormExpl.addDetail(new Explanation(0, \"parameter b (norms omitted for field)\"));\n      tfNormExpl.setValue((freq.getValue() * (k1 + 1)) / (freq.getValue() + k1));\n    } else {\n      float doclen = decodeNormValue(norms[doc]);\n      tfNormExpl.addDetail(new Explanation(b, \"parameter b\"));\n      tfNormExpl.addDetail(new Explanation(stats.avgdl, \"avgFieldLength\"));\n      tfNormExpl.addDetail(new Explanation(doclen, \"fieldLength\"));\n      tfNormExpl.setValue((freq.getValue() * (k1 + 1)) / (freq.getValue() + k1 * (1 - b + b * doclen/stats.avgdl)));\n    }\n    result.addDetail(tfNormExpl);\n    result.setValue(boostExpl.getValue() * stats.idf.getValue() * tfNormExpl.getValue());\n    return result;\n  }\n\n","sourceOld":"  private Explanation explainScore(int doc, Explanation freq, BM25Stats stats, byte[] norms) {\n    Explanation result = new Explanation();\n    result.setDescription(\"score(doc=\"+doc+\",freq=\"+freq+\"), product of:\");\n    \n    Explanation boostExpl = new Explanation(stats.queryBoost, \"boost\");\n    if (stats.queryBoost != 1.0f)\n      result.addDetail(boostExpl);\n    \n    result.addDetail(stats.idf);\n\n    Explanation tfNormExpl = new Explanation();\n    tfNormExpl.setDescription(\"tfNorm, computed from:\");\n    tfNormExpl.addDetail(freq);\n    tfNormExpl.addDetail(new Explanation(k1, \"parameter k1\"));\n    if (norms == null) {\n      tfNormExpl.addDetail(new Explanation(0, \"parameter b (norms omitted for field)\"));\n      tfNormExpl.setValue((freq.getValue() * (k1 + 1)) / (freq.getValue() + k1));\n    } else {\n      float doclen = decodeNormValue(norms[doc]);\n      tfNormExpl.addDetail(new Explanation(b, \"parameter b\"));\n      tfNormExpl.addDetail(new Explanation(stats.avgdl, \"avgFieldLength\"));\n      tfNormExpl.addDetail(new Explanation(doclen, \"fieldLength\"));\n      tfNormExpl.setValue((freq.getValue() * (k1 + 1)) / (freq.getValue() + k1 * (1 - b + b * doclen/stats.avgdl)));\n    }\n    result.addDetail(tfNormExpl);\n    result.setValue(boostExpl.getValue() * stats.idf.getValue() * tfNormExpl.getValue());\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#explainScore(int,Explanation,BM25Stats,byte[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/BM25Similarity#explainScore(int,Explanation,BM25Stats,byte[]).mjava","sourceNew":"  private Explanation explainScore(int doc, Explanation freq, BM25Stats stats, byte[] norms) {\n    Explanation result = new Explanation();\n    result.setDescription(\"score(doc=\"+doc+\",freq=\"+freq+\"), product of:\");\n    \n    Explanation boostExpl = new Explanation(stats.queryBoost * stats.topLevelBoost, \"boost\");\n    if (boostExpl.getValue() != 1.0f)\n      result.addDetail(boostExpl);\n    \n    result.addDetail(stats.idf);\n\n    Explanation tfNormExpl = new Explanation();\n    tfNormExpl.setDescription(\"tfNorm, computed from:\");\n    tfNormExpl.addDetail(freq);\n    tfNormExpl.addDetail(new Explanation(k1, \"parameter k1\"));\n    if (norms == null) {\n      tfNormExpl.addDetail(new Explanation(0, \"parameter b (norms omitted for field)\"));\n      tfNormExpl.setValue((freq.getValue() * (k1 + 1)) / (freq.getValue() + k1));\n    } else {\n      float doclen = decodeNormValue(norms[doc]);\n      tfNormExpl.addDetail(new Explanation(b, \"parameter b\"));\n      tfNormExpl.addDetail(new Explanation(stats.avgdl, \"avgFieldLength\"));\n      tfNormExpl.addDetail(new Explanation(doclen, \"fieldLength\"));\n      tfNormExpl.setValue((freq.getValue() * (k1 + 1)) / (freq.getValue() + k1 * (1 - b + b * doclen/stats.avgdl)));\n    }\n    result.addDetail(tfNormExpl);\n    result.setValue(boostExpl.getValue() * stats.idf.getValue() * tfNormExpl.getValue());\n    return result;\n  }\n\n","sourceOld":"  private Explanation explainScore(int doc, Explanation freq, BM25Stats stats, byte[] norms) {\n    Explanation result = new Explanation();\n    result.setDescription(\"score(doc=\"+doc+\",freq=\"+freq+\"), product of:\");\n    \n    Explanation boostExpl = new Explanation(stats.queryBoost * stats.topLevelBoost, \"boost\");\n    if (boostExpl.getValue() != 1.0f)\n      result.addDetail(boostExpl);\n    \n    result.addDetail(stats.idf);\n\n    Explanation tfNormExpl = new Explanation();\n    tfNormExpl.setDescription(\"tfNorm, computed from:\");\n    tfNormExpl.addDetail(freq);\n    tfNormExpl.addDetail(new Explanation(k1, \"parameter k1\"));\n    if (norms == null) {\n      tfNormExpl.addDetail(new Explanation(0, \"parameter b (norms omitted for field)\"));\n      tfNormExpl.setValue((freq.getValue() * (k1 + 1)) / (freq.getValue() + k1));\n    } else {\n      float doclen = decodeNormValue(norms[doc]);\n      tfNormExpl.addDetail(new Explanation(b, \"parameter b\"));\n      tfNormExpl.addDetail(new Explanation(stats.avgdl, \"avgFieldLength\"));\n      tfNormExpl.addDetail(new Explanation(doclen, \"fieldLength\"));\n      tfNormExpl.setValue((freq.getValue() * (k1 + 1)) / (freq.getValue() + k1 * (1 - b + b * doclen/stats.avgdl)));\n    }\n    result.addDetail(tfNormExpl);\n    result.setValue(boostExpl.getValue() * stats.idf.getValue() * tfNormExpl.getValue());\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["00a42d7c744d010c2ac4884ef643039bf46e7d65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"00a42d7c744d010c2ac4884ef643039bf46e7d65":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"00a42d7c744d010c2ac4884ef643039bf46e7d65":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["00a42d7c744d010c2ac4884ef643039bf46e7d65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}