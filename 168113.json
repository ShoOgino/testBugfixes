{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValueCeil(int).mjava","commits":[{"id":"873caa2b3b10bf0e4724a950c3a11b841ebb0e4a","date":1460035668,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValueCeil(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns largest double that would encode to int x. */\n  // NOTE: keep this package private!!\n  static double decodeValueCeil(int x) {\n    assert x < Integer.MAX_VALUE;\n    return Math.nextDown((x+1) * DECODE);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5911e43da0a397d56198dce934a4091dc30a0c97"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5911e43da0a397d56198dce934a4091dc30a0c97","date":1460069327,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValueCeil(int).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValueCeil(int).mjava","sourceNew":"  /** Returns largest double that would encode to int x. */\n  // NOTE: keep this package private!!\n  static double decodeValueCeil(int x) {\n    if (x == Integer.MAX_VALUE) {\n      return MAX_VALUE;\n    } else {\n      return Math.nextDown((x+1) * DECODE);\n    }\n  }\n\n","sourceOld":"  /** Returns largest double that would encode to int x. */\n  // NOTE: keep this package private!!\n  static double decodeValueCeil(int x) {\n    assert x < Integer.MAX_VALUE;\n    return Math.nextDown((x+1) * DECODE);\n  }\n\n","bugFix":["873caa2b3b10bf0e4724a950c3a11b841ebb0e4a"],"bugIntro":["17ccf2dc08bf23a048cb9c7326eb957586a86cd5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValueCeil(int).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValueCeil(int).mjava","sourceNew":"  /** Returns largest double that would encode to int x. */\n  // NOTE: keep this package private!!\n  static double decodeValueCeil(int x) {\n    if (x == Integer.MAX_VALUE) {\n      return MAX_VALUE;\n    } else {\n      return Math.nextDown((x+1) * DECODE);\n    }\n  }\n\n","sourceOld":"  /** Returns largest double that would encode to int x. */\n  // NOTE: keep this package private!!\n  static double decodeValueCeil(int x) {\n    assert x < Integer.MAX_VALUE;\n    return Math.nextDown((x+1) * DECODE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17ccf2dc08bf23a048cb9c7326eb957586a86cd5","date":1465078564,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValueCeil(int).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValueCeil(int).mjava","sourceNew":"  /** Returns largest double that would encode to int x. */\n  // NOTE: keep this package private!!\n  static double decodeValueCeil(int x) {\n    assert x < Integer.MAX_VALUE;\n    return Math.nextDown((x+1) * DECODE);\n  }\n\n","sourceOld":"  /** Returns largest double that would encode to int x. */\n  // NOTE: keep this package private!!\n  static double decodeValueCeil(int x) {\n    if (x == Integer.MAX_VALUE) {\n      return MAX_VALUE;\n    } else {\n      return Math.nextDown((x+1) * DECODE);\n    }\n  }\n\n","bugFix":["5911e43da0a397d56198dce934a4091dc30a0c97"],"bugIntro":["689b5e5c42bc5f2285fe820cd123d03e85d9df8c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValueCeil(int).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValueCeil(int).mjava","sourceNew":"  /** Returns largest double that would encode to int x. */\n  // NOTE: keep this package private!!\n  static double decodeValueCeil(int x) {\n    assert x < Integer.MAX_VALUE;\n    return Math.nextDown((x+1) * DECODE);\n  }\n\n","sourceOld":"  /** Returns largest double that would encode to int x. */\n  // NOTE: keep this package private!!\n  static double decodeValueCeil(int x) {\n    if (x == Integer.MAX_VALUE) {\n      return MAX_VALUE;\n    } else {\n      return Math.nextDown((x+1) * DECODE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"689b5e5c42bc5f2285fe820cd123d03e85d9df8c","date":1541139553,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValueCeil(int).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValueCeil(int).mjava","sourceNew":"  /** Returns largest double that would encode to int x. */\n  // NOTE: keep this package private!!\n  static double decodeValueCeil(int x) {\n    assert x <= MAX_ENCODED_VALUE && x >= MIN_ENCODED_VALUE;\n    if (x == MAX_ENCODED_VALUE) {\n      return MAX_VALUE;\n    }\n    return Math.nextDown((x+1) * DECODE);\n  }\n\n","sourceOld":"  /** Returns largest double that would encode to int x. */\n  // NOTE: keep this package private!!\n  static double decodeValueCeil(int x) {\n    assert x < Integer.MAX_VALUE;\n    return Math.nextDown((x+1) * DECODE);\n  }\n\n","bugFix":["17ccf2dc08bf23a048cb9c7326eb957586a86cd5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":4,"author":"Nicholas Knize","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValueCeil(int).mjava","sourceNew":null,"sourceOld":"  /** Returns largest double that would encode to int x. */\n  // NOTE: keep this package private!!\n  static double decodeValueCeil(int x) {\n    assert x <= MAX_ENCODED_VALUE && x >= MIN_ENCODED_VALUE;\n    if (x == MAX_ENCODED_VALUE) {\n      return MAX_VALUE;\n    }\n    return Math.nextDown((x+1) * DECODE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17ccf2dc08bf23a048cb9c7326eb957586a86cd5":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"689b5e5c42bc5f2285fe820cd123d03e85d9df8c":["17ccf2dc08bf23a048cb9c7326eb957586a86cd5"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["873caa2b3b10bf0e4724a950c3a11b841ebb0e4a","5911e43da0a397d56198dce934a4091dc30a0c97"],"5911e43da0a397d56198dce934a4091dc30a0c97":["873caa2b3b10bf0e4724a950c3a11b841ebb0e4a"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["689b5e5c42bc5f2285fe820cd123d03e85d9df8c"],"873caa2b3b10bf0e4724a950c3a11b841ebb0e4a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","17ccf2dc08bf23a048cb9c7326eb957586a86cd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"]},"commit2Childs":{"17ccf2dc08bf23a048cb9c7326eb957586a86cd5":["689b5e5c42bc5f2285fe820cd123d03e85d9df8c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["873caa2b3b10bf0e4724a950c3a11b841ebb0e4a"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["17ccf2dc08bf23a048cb9c7326eb957586a86cd5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"689b5e5c42bc5f2285fe820cd123d03e85d9df8c":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"5911e43da0a397d56198dce934a4091dc30a0c97":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"873caa2b3b10bf0e4724a950c3a11b841ebb0e4a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","5911e43da0a397d56198dce934a4091dc30a0c97"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}