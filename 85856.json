{"path":"solr/core/src/java/org/apache/solr/cloud/Assign#incAndGetId(SolrZkClient,String,int).mjava","commits":[{"id":"651c3ddf5bc1266d9de0a972ec05e59d77099a4c","date":1500969855,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#incAndGetId(SolrZkClient,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#incAndGetId(SolrZkClient,String).mjava","sourceNew":"  public static int incAndGetId(SolrZkClient zkClient, String collection, int defaultValue) {\n    String path = \"/collections/\"+collection;\n    try {\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.makePath(path, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.create(path, NumberUtils.intToBytes(defaultValue), CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      Stat stat = new Stat();\n      try {\n        byte[] data = zkClient.getData(path, null, stat, true);\n        int currentId = NumberUtils.bytesToInt(data);\n        data = NumberUtils.intToBytes(++currentId);\n        zkClient.setData(path, data, stat.getVersion(), true);\n        return currentId;\n      } catch (KeeperException e) {\n        if (e.code() != KeeperException.Code.BADVERSION) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n        }\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  public static int incAndGetId(SolrZkClient zkClient, String collection) {\n    String path = \"/collections/\"+collection;\n    try {\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.makePath(path, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.create(path, NumberUtils.intToBytes(0), CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      Stat stat = new Stat();\n      try {\n        byte[] data = zkClient.getData(path, null, stat, true);\n        int currentId = NumberUtils.bytesToInt(data);\n        data = NumberUtils.intToBytes(++currentId);\n        zkClient.setData(path, data, stat.getVersion(), true);\n        return currentId;\n      } catch (KeeperException e) {\n        if (e.code() != KeeperException.Code.BADVERSION) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n        }\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#incAndGetId(SolrZkClient,String,int).mjava","pathOld":"/dev/null","sourceNew":"  public static int incAndGetId(SolrZkClient zkClient, String collection, int defaultValue) {\n    String path = \"/collections/\"+collection;\n    try {\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.makePath(path, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.create(path, NumberUtils.intToBytes(defaultValue), CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      Stat stat = new Stat();\n      try {\n        byte[] data = zkClient.getData(path, null, stat, true);\n        int currentId = NumberUtils.bytesToInt(data);\n        data = NumberUtils.intToBytes(++currentId);\n        zkClient.setData(path, data, stat.getVersion(), true);\n        return currentId;\n      } catch (KeeperException e) {\n        if (e.code() != KeeperException.Code.BADVERSION) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n        }\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#incAndGetId(SolrZkClient,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#incAndGetId(SolrZkClient,String).mjava","sourceNew":"  public static int incAndGetId(SolrZkClient zkClient, String collection, int defaultValue) {\n    String path = \"/collections/\"+collection;\n    try {\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.makePath(path, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.create(path, NumberUtils.intToBytes(defaultValue), CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      Stat stat = new Stat();\n      try {\n        byte[] data = zkClient.getData(path, null, stat, true);\n        int currentId = NumberUtils.bytesToInt(data);\n        data = NumberUtils.intToBytes(++currentId);\n        zkClient.setData(path, data, stat.getVersion(), true);\n        return currentId;\n      } catch (KeeperException e) {\n        if (e.code() != KeeperException.Code.BADVERSION) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n        }\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  public static int incAndGetId(SolrZkClient zkClient, String collection) {\n    String path = \"/collections/\"+collection;\n    try {\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.makePath(path, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.create(path, NumberUtils.intToBytes(0), CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      Stat stat = new Stat();\n      try {\n        byte[] data = zkClient.getData(path, null, stat, true);\n        int currentId = NumberUtils.bytesToInt(data);\n        data = NumberUtils.intToBytes(++currentId);\n        zkClient.setData(path, data, stat.getVersion(), true);\n        return currentId;\n      } catch (KeeperException e) {\n        if (e.code() != KeeperException.Code.BADVERSION) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n        }\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#incAndGetId(DistribStateManager,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#incAndGetId(SolrZkClient,String,int).mjava","sourceNew":"  public static int incAndGetId(DistribStateManager stateManager, String collection, int defaultValue) {\n    String path = \"/collections/\"+collection;\n    try {\n      if (!stateManager.hasData(path)) {\n        try {\n          stateManager.makePath(path);\n        } catch (AlreadyExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!stateManager.hasData(path)) {\n        try {\n          stateManager.createData(path, NumberUtils.intToBytes(defaultValue), CreateMode.PERSISTENT);\n        } catch (AlreadyExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (IOException | KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      try {\n        int version = 0;\n        int currentId = 0;\n        VersionedData data = stateManager.getData(path, null);\n        if (data != null) {\n          currentId = NumberUtils.bytesToInt(data.getData());\n          version = data.getVersion();\n        }\n        byte[] bytes = NumberUtils.intToBytes(++currentId);\n        stateManager.setData(path, bytes, version);\n        return currentId;\n      } catch (BadVersionException e) {\n        continue;\n      } catch (IOException | KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  public static int incAndGetId(SolrZkClient zkClient, String collection, int defaultValue) {\n    String path = \"/collections/\"+collection;\n    try {\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.makePath(path, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.create(path, NumberUtils.intToBytes(defaultValue), CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      Stat stat = new Stat();\n      try {\n        byte[] data = zkClient.getData(path, null, stat, true);\n        int currentId = NumberUtils.bytesToInt(data);\n        data = NumberUtils.intToBytes(++currentId);\n        zkClient.setData(path, data, stat.getVersion(), true);\n        return currentId;\n      } catch (KeeperException e) {\n        if (e.code() != KeeperException.Code.BADVERSION) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n        }\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["06263309947a9804c326e35ce627be8768e123a4","06263309947a9804c326e35ce627be8768e123a4","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a52341299179de5479672f7cf518bf4b173f34b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a52341299179de5479672f7cf518bf4b173f34b3"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"a52341299179de5479672f7cf518bf4b173f34b3":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["651c3ddf5bc1266d9de0a972ec05e59d77099a4c","a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}