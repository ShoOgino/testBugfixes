{"path":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        SpellingResult spellingResult = spellChecker.getSuggestions(tokens,\n            reader, count, onlyMorePopular, extendedResults);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(spellingResult, q,\n              extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        SpellingResult spellingResult = spellChecker.getSuggestions(tokens,\n            reader, count, onlyMorePopular, extendedResults);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(spellingResult, q,\n              extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        SpellingResult spellingResult = spellChecker.getSuggestions(tokens,\n            reader, count, onlyMorePopular, extendedResults);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(spellingResult, q,\n              extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        SpellingResult spellingResult = spellChecker.getSuggestions(tokens,\n            reader, count, onlyMorePopular, extendedResults);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(spellingResult, q,\n              extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        SpellingResult spellingResult = spellChecker.getSuggestions(tokens,\n            reader, count, onlyMorePopular, extendedResults);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(spellingResult, q,\n              extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d76ab9983349b199b0e6f65776c0087b0c08a10d","date":1282230089,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);\n\n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(spellingResult, q,\n              extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        SpellingResult spellingResult = spellChecker.getSuggestions(tokens,\n            reader, count, onlyMorePopular, extendedResults);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(spellingResult, q,\n              extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d6aab5206b894bf0ea232b059a45cf2de460726f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6aab5206b894bf0ea232b059a45cf2de460726f","date":1284150281,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);\n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(shardRequest, spellingResult, q,\n              extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);\n\n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(spellingResult, q,\n              extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","bugFix":["d76ab9983349b199b0e6f65776c0087b0c08a10d","bf85cf9d20b86c2466d0431fa85b9a12ab01233d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdcf766020b9b159d0b3a6ecae90ff1998ded019","date":1286818331,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);\n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(shardRequest, spellingResult, q,\n              extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        SpellingResult spellingResult = spellChecker.getSuggestions(tokens,\n            reader, count, onlyMorePopular, extendedResults);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(spellingResult, q,\n              extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47ac88233e9e3019faa24a5184425ad60c23d70f","date":1302779803,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb46686a27187e42311e77666a2c7026f461ebc","date":1302858020,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d6aab5206b894bf0ea232b059a45cf2de460726f":["d76ab9983349b199b0e6f65776c0087b0c08a10d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"cdcf766020b9b159d0b3a6ecae90ff1998ded019":["d6aab5206b894bf0ea232b059a45cf2de460726f"],"c26f00b574427b55127e869b935845554afde1fa":["47ac88233e9e3019faa24a5184425ad60c23d70f","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","47ac88233e9e3019faa24a5184425ad60c23d70f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"d76ab9983349b199b0e6f65776c0087b0c08a10d":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"47ac88233e9e3019faa24a5184425ad60c23d70f":["c220849f876de24a79f756f65b3eb045db59f63f"],"c220849f876de24a79f756f65b3eb045db59f63f":["cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"1eb46686a27187e42311e77666a2c7026f461ebc":["868da859b43505d9d2a023bfeae6dd0c795f5295","47ac88233e9e3019faa24a5184425ad60c23d70f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c220849f876de24a79f756f65b3eb045db59f63f","47ac88233e9e3019faa24a5184425ad60c23d70f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["cdcf766020b9b159d0b3a6ecae90ff1998ded019","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["47ac88233e9e3019faa24a5184425ad60c23d70f"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"d6aab5206b894bf0ea232b059a45cf2de460726f":["cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"cdcf766020b9b159d0b3a6ecae90ff1998ded019":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"d76ab9983349b199b0e6f65776c0087b0c08a10d":["d6aab5206b894bf0ea232b059a45cf2de460726f"],"1da8d55113b689b06716246649de6f62430f15c0":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d76ab9983349b199b0e6f65776c0087b0c08a10d"],"47ac88233e9e3019faa24a5184425ad60c23d70f":["c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c220849f876de24a79f756f65b3eb045db59f63f":["47ac88233e9e3019faa24a5184425ad60c23d70f","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"1eb46686a27187e42311e77666a2c7026f461ebc":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1eb46686a27187e42311e77666a2c7026f461ebc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","1eb46686a27187e42311e77666a2c7026f461ebc","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}