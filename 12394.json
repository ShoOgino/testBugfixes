{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#getRandomDoubles(int,boolean).mjava","commits":[{"id":"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa","date":1496877670,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#getRandomDoubles(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private List<Double> getRandomDoubles(int length, boolean missingVals) {\n    return getRandomList(length, missingVals, \n        () -> random().nextDouble() * Double.MAX_VALUE * (random().nextBoolean() ? 1.D : -1.D));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f344bb33ca91f48e99c061980115b46fa84fc8f5","date":1496903283,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#getRandomDoubles(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private List<Double> getRandomDoubles(int length, boolean missingVals) {\n    return getRandomList(length, missingVals, \n        () -> random().nextDouble() * Double.MAX_VALUE * (random().nextBoolean() ? 1.D : -1.D));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#getRandomDoubles(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private List<Double> getRandomDoubles(int length, boolean missingVals) {\n    return getRandomList(length, missingVals, \n        () -> random().nextDouble() * Double.MAX_VALUE * (random().nextBoolean() ? 1.D : -1.D));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#getRandomDoubles(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private List<Double> getRandomDoubles(int length, boolean missingVals) {\n    return getRandomList(length, missingVals, \n        () -> random().nextDouble() * Double.MAX_VALUE * (random().nextBoolean() ? 1.D : -1.D));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac5a6354a5800dd1ade225010d614eeb8acf9152","date":1499731103,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#getRandomDoubles(int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#getRandomDoubles(int,boolean).mjava","sourceNew":"  private List<Double> getRandomDoubles(int length, boolean missingVals) {\n    return getRandomList(length, missingVals, () -> {\n      Double d = Double.NaN; \n      while (d.isNaN()) {\n        d = Double.longBitsToDouble(random().nextLong());\n      }\n      return d; \n    });\n  }\n\n","sourceOld":"  private List<Double> getRandomDoubles(int length, boolean missingVals) {\n    return getRandomList(length, missingVals, \n        () -> random().nextDouble() * Double.MAX_VALUE * (random().nextBoolean() ? 1.D : -1.D));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#getRandomDoubles(int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#getRandomDoubles(int,boolean).mjava","sourceNew":"  private List<Double> getRandomDoubles(int length, boolean missingVals) {\n    return getRandomList(length, missingVals, () -> {\n      Double d = Double.NaN; \n      while (d.isNaN()) {\n        d = Double.longBitsToDouble(random().nextLong());\n      }\n      return d; \n    });\n  }\n\n","sourceOld":"  private List<Double> getRandomDoubles(int length, boolean missingVals) {\n    return getRandomList(length, missingVals, \n        () -> random().nextDouble() * Double.MAX_VALUE * (random().nextBoolean() ? 1.D : -1.D));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#getRandomDoubles(int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#getRandomDoubles(int,boolean).mjava","sourceNew":"  private List<Double> getRandomDoubles(int length, boolean missingVals) {\n    return getRandomList(length, missingVals, () -> {\n      Double d = Double.NaN; \n      while (d.isNaN()) {\n        d = Double.longBitsToDouble(random().nextLong());\n      }\n      return d; \n    });\n  }\n\n","sourceOld":"  private List<Double> getRandomDoubles(int length, boolean missingVals) {\n    return getRandomList(length, missingVals, \n        () -> random().nextDouble() * Double.MAX_VALUE * (random().nextBoolean() ? 1.D : -1.D));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","ac5a6354a5800dd1ade225010d614eeb8acf9152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac5a6354a5800dd1ade225010d614eeb8acf9152"]},"commit2Childs":{"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa","f344bb33ca91f48e99c061980115b46fa84fc8f5","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":[],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["f9a989a32a073c55e3aef6f807a3474184bbcf49","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"28288370235ed02234a64753cdbf0c6ec096304a":["ac5a6354a5800dd1ade225010d614eeb8acf9152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}