{"path":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery).mjava","commits":[{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery).mjava","pathOld":"/dev/null","sourceNew":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery) throws IOException {\n    LeafReader lr = SlowCompositeReaderWrapper.wrap(reader); // slow, but ok for testing\n    LeafReaderContext lrContext = lr.getContext();\n    Query rewrittenQuery = spanQuery.rewrite(lr); // get the term contexts so getSpans can be called directly\n    HashSet<Term> termSet = new HashSet<>();\n    rewrittenQuery.extractTerms(termSet);\n    Map<Term,TermContext> termContexts = new HashMap<>();\n    for (Term term: termSet) {\n      TermContext termContext = TermContext.build(lrContext, term);\n      termContexts.put(term, termContext);\n    }\n    Spans actSpans = spanQuery.getSpans(lrContext, new Bits.MatchAllBits(lr.numDocs()), termContexts);\n    return actSpans;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery).mjava","pathOld":"/dev/null","sourceNew":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery) throws IOException {\n    LeafReader lr = SlowCompositeReaderWrapper.wrap(reader); // slow, but ok for testing\n    LeafReaderContext lrContext = lr.getContext();\n    Query rewrittenQuery = spanQuery.rewrite(lr); // get the term contexts so getSpans can be called directly\n    HashSet<Term> termSet = new HashSet<>();\n    rewrittenQuery.extractTerms(termSet);\n    Map<Term,TermContext> termContexts = new HashMap<>();\n    for (Term term: termSet) {\n      TermContext termContext = TermContext.build(lrContext, term);\n      termContexts.put(term, termContext);\n    }\n    Spans actSpans = spanQuery.getSpans(lrContext, new Bits.MatchAllBits(lr.numDocs()), termContexts);\n    return actSpans;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05c52ac194342b760b830342ee8423fcf00e54d0","date":1429197275,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery).mjava","sourceNew":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery) throws IOException {\n    LeafReader lr = SlowCompositeReaderWrapper.wrap(reader); // slow, but ok for testing\n    LeafReaderContext lrContext = lr.getContext();\n    SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(lr); // get the term contexts so getSpans can be called directly\n    HashSet<Term> termSet = new HashSet<>();\n    rewrittenQuery.extractTerms(termSet);\n    Map<Term,TermContext> termContexts = new HashMap<>();\n    for (Term term: termSet) {\n      TermContext termContext = TermContext.build(lrContext, term);\n      termContexts.put(term, termContext);\n    }\n    Spans actSpans = spanQuery.getSpans(lrContext, new Bits.MatchAllBits(lr.numDocs()), termContexts);\n    return actSpans;\n  }\n\n","sourceOld":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery) throws IOException {\n    LeafReader lr = SlowCompositeReaderWrapper.wrap(reader); // slow, but ok for testing\n    LeafReaderContext lrContext = lr.getContext();\n    Query rewrittenQuery = spanQuery.rewrite(lr); // get the term contexts so getSpans can be called directly\n    HashSet<Term> termSet = new HashSet<>();\n    rewrittenQuery.extractTerms(termSet);\n    Map<Term,TermContext> termContexts = new HashMap<>();\n    for (Term term: termSet) {\n      TermContext termContext = TermContext.build(lrContext, term);\n      termContexts.put(term, termContext);\n    }\n    Spans actSpans = spanQuery.getSpans(lrContext, new Bits.MatchAllBits(lr.numDocs()), termContexts);\n    return actSpans;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery).mjava","sourceNew":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery) throws IOException {\n    return wrap(reader, spanQuery, SpanCollector.NO_OP);\n  }\n\n","sourceOld":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery) throws IOException {\n    LeafReader lr = SlowCompositeReaderWrapper.wrap(reader); // slow, but ok for testing\n    LeafReaderContext lrContext = lr.getContext();\n    SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(lr); // get the term contexts so getSpans can be called directly\n    HashSet<Term> termSet = new HashSet<>();\n    rewrittenQuery.extractTerms(termSet);\n    Map<Term,TermContext> termContexts = new HashMap<>();\n    for (Term term: termSet) {\n      TermContext termContext = TermContext.build(lrContext, term);\n      termContexts.put(term, termContext);\n    }\n    Spans actSpans = spanQuery.getSpans(lrContext, new Bits.MatchAllBits(lr.numDocs()), termContexts);\n    return actSpans;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery).mjava","sourceNew":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery) throws IOException {\n    return wrap(reader, spanQuery, SpanWeight.Postings.POSITIONS);\n  }\n\n","sourceOld":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery) throws IOException {\n    return wrap(reader, spanQuery, SpanCollector.NO_OP);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery).mjava","sourceNew":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery) throws IOException {\n    return wrap(reader, spanQuery, SpanWeight.Postings.POSITIONS);\n  }\n\n","sourceOld":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery) throws IOException {\n    return wrap(reader, spanQuery, SpanWeight.Postings.POSITIONS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["29aea3139c4326c0501d75d51059855463220279"],"29aea3139c4326c0501d75d51059855463220279":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["05c52ac194342b760b830342ee8423fcf00e54d0"],"05c52ac194342b760b830342ee8423fcf00e54d0":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fab172655716b96f7e42376116235017a922de3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29aea3139c4326c0501d75d51059855463220279":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["29aea3139c4326c0501d75d51059855463220279"],"05c52ac194342b760b830342ee8423fcf00e54d0":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["05c52ac194342b760b830342ee8423fcf00e54d0","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}