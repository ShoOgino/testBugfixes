{"path":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetFloat64Array().mjava","commits":[{"id":"93c59ad5034eecd863f267bd75e1df7b8a51e427","date":1309162882,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetFloat64Array().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetFloat64Array() throws IOException {\n    double[] sourceArray = new double[] {1,2,3};\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", 8, trackBytes);\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Floats.getValues(dir, \"test\", 3);\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    double[] loaded = ((double[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i], 0.0d);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetFloat64Array().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetFloat64Array() throws IOException {\n    double[] sourceArray = new double[] {1,2,3};\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", 8, trackBytes);\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Floats.getValues(dir, \"test\", 3);\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    double[] loaded = ((double[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i], 0.0d);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetFloat64Array().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetFloat64Array() throws IOException {\n    double[] sourceArray = new double[] {1,2,3};\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", 8, trackBytes, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Floats.getValues(dir, \"test\", 3, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    double[] loaded = ((double[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i], 0.0d);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetFloat64Array().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetFloat64Array().mjava","sourceNew":"  public void testGetFloat64Array() throws IOException {\n    double[] sourceArray = new double[] {1,2,3};\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", 8, trackBytes, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Floats.getValues(dir, \"test\", 3, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    double[] loaded = ((double[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i], 0.0d);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetFloat64Array() throws IOException {\n    double[] sourceArray = new double[] {1,2,3};\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", 8, trackBytes);\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Floats.getValues(dir, \"test\", 3);\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    double[] loaded = ((double[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i], 0.0d);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetFloat64Array().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetFloat64Array().mjava","sourceNew":"  public void testGetFloat64Array() throws IOException {\n    double[] sourceArray = new double[] {1,2,3};\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", 8, trackBytes, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Floats.getValues(dir, \"test\", 3, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    double[] loaded = ((double[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i], 0.0d);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetFloat64Array() throws IOException {\n    double[] sourceArray = new double[] {1,2,3};\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", 8, trackBytes);\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Floats.getValues(dir, \"test\", 3);\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    double[] loaded = ((double[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i], 0.0d);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17cc1e690c31c800f83860fbfd0423462962ef01","date":1314789725,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetFloat64Array().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetFloat64Array().mjava","sourceNew":"  public void testGetFloat64Array() throws IOException {\n    double[] sourceArray = new double[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", 8, trackBytes, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Floats.getValues(dir, \"test\", 3, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    double[] loaded = ((double[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i], 0.0d);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetFloat64Array() throws IOException {\n    double[] sourceArray = new double[] {1,2,3};\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", 8, trackBytes, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Floats.getValues(dir, \"test\", 3, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    double[] loaded = ((double[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i], 0.0d);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetFloat64Array().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetFloat64Array().mjava","sourceNew":"  public void testGetFloat64Array() throws IOException {\n    double[] sourceArray = new double[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), ValueType.FLOAT_64);\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Floats.getValues(dir, \"test\", 3, newIOContext(random), ValueType.FLOAT_64);\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    double[] loaded = ((double[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i], 0.0d);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetFloat64Array() throws IOException {\n    double[] sourceArray = new double[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", 8, trackBytes, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Floats.getValues(dir, \"test\", 3, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    double[] loaded = ((double[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i], 0.0d);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetFloat64Array().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetFloat64Array().mjava","sourceNew":"  public void testGetFloat64Array() throws IOException {\n    double[] sourceArray = new double[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), Type.FLOAT_64);\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    DocValues r = Floats.getValues(dir, \"test\", 3, newIOContext(random), Type.FLOAT_64);\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    double[] loaded = ((double[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i], 0.0d);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetFloat64Array() throws IOException {\n    double[] sourceArray = new double[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), ValueType.FLOAT_64);\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Floats.getValues(dir, \"test\", 3, newIOContext(random), ValueType.FLOAT_64);\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    double[] loaded = ((double[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i], 0.0d);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetFloat64Array().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetFloat64Array().mjava","sourceNew":"  public void testGetFloat64Array() throws IOException {\n    double[] sourceArray = new double[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), Type.FLOAT_64);\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    DocValues r = Floats.getValues(dir, \"test\", 3, newIOContext(random), Type.FLOAT_64);\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    double[] loaded = ((double[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i], 0.0d);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetFloat64Array() throws IOException {\n    double[] sourceArray = new double[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), ValueType.FLOAT_64);\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Floats.getValues(dir, \"test\", 3, newIOContext(random), ValueType.FLOAT_64);\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    double[] loaded = ((double[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i], 0.0d);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#testGetFloat64Array().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetFloat64Array().mjava","sourceNew":"  public void testGetFloat64Array() throws IOException {\n    double[] sourceArray = new double[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), Type.FLOAT_64);\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    DocValues r = Floats.getValues(dir, \"test\", 3, newIOContext(random), Type.FLOAT_64);\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    double[] loaded = ((double[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i], 0.0d);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetFloat64Array() throws IOException {\n    double[] sourceArray = new double[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), Type.FLOAT_64);\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    DocValues r = Floats.getValues(dir, \"test\", 3, newIOContext(random), Type.FLOAT_64);\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    double[] loaded = ((double[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i], 0.0d);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17cc1e690c31c800f83860fbfd0423462962ef01":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["e128967bca58657bc0039d4bfe631e63e81f1977"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["2553b00f699380c64959ccb27991289aae87be2e","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["93c59ad5034eecd863f267bd75e1df7b8a51e427","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"e128967bca58657bc0039d4bfe631e63e81f1977":["17cc1e690c31c800f83860fbfd0423462962ef01"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["e128967bca58657bc0039d4bfe631e63e81f1977","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"17cc1e690c31c800f83860fbfd0423462962ef01":["e128967bca58657bc0039d4bfe631e63e81f1977"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["ddc4c914be86e34b54f70023f45a60fa7f04e929","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93c59ad5034eecd863f267bd75e1df7b8a51e427","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["17cc1e690c31c800f83860fbfd0423462962ef01","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"2553b00f699380c64959ccb27991289aae87be2e":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"e128967bca58657bc0039d4bfe631e63e81f1977":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}