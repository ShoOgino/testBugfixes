{"path":"lucene/core/src/java/org/apache/lucene/document/FeatureField#newSaturationQuery(IndexSearcher,String,String).mjava","commits":[{"id":"966dd6f2a1942842f7efe2bdcc7537ea6597a290","date":1521543449,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FeatureField#newSaturationQuery(IndexSearcher,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Same as {@link #newSaturationQuery(String, String, float, float)} but\n   * uses {@code 1f} as a weight and tries to compute a sensible default value\n   * for {@code pivot} using\n   * {@link #computePivotFeatureValue(IndexSearcher, String, String)}. This\n   * isn't expected to give an optimal configuration of these parameters but\n   * should be a good start if you have no idea what the values of these\n   * parameters should be.\n   * @param searcher         the {@link IndexSearcher} that you will search against\n   * @param featureFieldName the field that stores features\n   * @param featureName      the name of the feature\n   */\n  public static Query newSaturationQuery(IndexSearcher searcher,\n      String featureFieldName, String featureName) throws IOException {\n    float weight = 1f;\n    float pivot = computePivotFeatureValue(searcher, featureFieldName, featureName);\n    return newSaturationQuery(featureFieldName, featureName, weight, pivot);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FeatureField#newSaturationQuery(IndexSearcher,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Same as {@link #newSaturationQuery(String, String, float, float)} but\n   * uses {@code 1f} as a weight and tries to compute a sensible default value\n   * for {@code pivot} using\n   * {@link #computePivotFeatureValue(IndexSearcher, String, String)}. This\n   * isn't expected to give an optimal configuration of these parameters but\n   * should be a good start if you have no idea what the values of these\n   * parameters should be.\n   * @param searcher         the {@link IndexSearcher} that you will search against\n   * @param featureFieldName the field that stores features\n   * @param featureName      the name of the feature\n   */\n  public static Query newSaturationQuery(IndexSearcher searcher,\n      String featureFieldName, String featureName) throws IOException {\n    float weight = 1f;\n    float pivot = computePivotFeatureValue(searcher, featureFieldName, featureName);\n    return newSaturationQuery(featureFieldName, featureName, weight, pivot);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"808f86d4b1e5fa52de29b80a5e44b1dcc79ea302","date":1526484586,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/document/FeatureField#newSaturationQuery(IndexSearcher,String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Same as {@link #newSaturationQuery(String, String, float, float)} but\n   * uses {@code 1f} as a weight and tries to compute a sensible default value\n   * for {@code pivot} using\n   * {@link #computePivotFeatureValue(IndexSearcher, String, String)}. This\n   * isn't expected to give an optimal configuration of these parameters but\n   * should be a good start if you have no idea what the values of these\n   * parameters should be.\n   * @param searcher         the {@link IndexSearcher} that you will search against\n   * @param featureFieldName the field that stores features\n   * @param featureName      the name of the feature\n   */\n  public static Query newSaturationQuery(IndexSearcher searcher,\n      String featureFieldName, String featureName) throws IOException {\n    float weight = 1f;\n    float pivot = computePivotFeatureValue(searcher, featureFieldName, featureName);\n    return newSaturationQuery(featureFieldName, featureName, weight, pivot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","966dd6f2a1942842f7efe2bdcc7537ea6597a290"],"966dd6f2a1942842f7efe2bdcc7537ea6597a290":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"808f86d4b1e5fa52de29b80a5e44b1dcc79ea302":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["808f86d4b1e5fa52de29b80a5e44b1dcc79ea302"]},"commit2Childs":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["808f86d4b1e5fa52de29b80a5e44b1dcc79ea302"],"966dd6f2a1942842f7efe2bdcc7537ea6597a290":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","966dd6f2a1942842f7efe2bdcc7537ea6597a290"],"808f86d4b1e5fa52de29b80a5e44b1dcc79ea302":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}