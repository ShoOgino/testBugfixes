{"path":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#highlights(OffsetsRetrievalStrategySupplier,IndexReader,Query).mjava","commits":[{"id":"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c","date":1597407672,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#highlights(OffsetsRetrievalStrategySupplier,IndexReader,Query).mjava","pathOld":"/dev/null","sourceNew":"  private List<String> highlights(OffsetsRetrievalStrategySupplier offsetsStrategySupplier,\n                                  IndexReader reader, Query query) throws IOException {\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int maxDocs = 1000;\n\n    Query rewrittenQuery = searcher.rewrite(query);\n    TopDocs topDocs = searcher.search(rewrittenQuery, maxDocs);\n\n    ArrayList<String> highlights = new ArrayList<>();\n\n    AsciiMatchRangeHighlighter formatter = new AsciiMatchRangeHighlighter(analyzer);\n\n    MatchRegionRetriever.MatchOffsetsConsumer highlightCollector =\n        (docId, leafReader, leafDocId, fieldHighlights) -> {\n          StringBuilder sb = new StringBuilder();\n\n          Document document = leafReader.document(leafDocId);\n          formatter\n              .apply(document, new TreeMap<>(fieldHighlights))\n              .forEach(\n                  (field, snippets) -> {\n                    sb.append(\n                        String.format(\n                            Locale.ROOT, \"(%s: '%s')\", field, String.join(\" | \", snippets)));\n                  });\n\n          if (sb.length() > 0) {\n            sb.insert(0, document.get(FLD_ID) + \": \");\n            highlights.add(sb.toString());\n          }\n        };\n\n    MatchRegionRetriever highlighter = new MatchRegionRetriever(searcher, rewrittenQuery, analyzer,\n        offsetsStrategySupplier);\n    highlighter.highlightDocuments(topDocs, highlightCollector);\n\n    return highlights;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0","date":1599736633,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#highlights(OffsetsRetrievalStrategySupplier,IndexReader,Query).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#highlights(OffsetsRetrievalStrategySupplier,IndexReader,Query).mjava","sourceNew":"  private List<String> highlights(OffsetsRetrievalStrategySupplier offsetsStrategySupplier,\n                                  IndexReader reader, Query query) throws IOException {\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int maxDocs = 1000;\n\n    Query rewrittenQuery = searcher.rewrite(query);\n    TopDocs topDocs = searcher.search(rewrittenQuery, maxDocs);\n\n    ArrayList<String> highlights = new ArrayList<>();\n\n    AsciiMatchRangeHighlighter formatter = new AsciiMatchRangeHighlighter(analyzer);\n\n    MatchRegionRetriever.MatchOffsetsConsumer highlightCollector =\n        (docId, leafReader, leafDocId, fieldHighlights) -> {\n          StringBuilder sb = new StringBuilder();\n\n          Document document = leafReader.document(leafDocId);\n          formatter\n              .apply(document, new TreeMap<>(fieldHighlights))\n              .forEach(\n                  (field, snippets) -> {\n                    sb.append(\n                        String.format(\n                            Locale.ROOT, \"(%s: '%s')\", field, String.join(\" | \", snippets)));\n                  });\n\n          if (sb.length() > 0) {\n            sb.insert(0, document.get(FLD_ID) + \": \");\n            highlights.add(sb.toString());\n          }\n        };\n\n    MatchRegionRetriever highlighter = new MatchRegionRetriever(searcher, rewrittenQuery, offsetsStrategySupplier);\n    highlighter.highlightDocuments(topDocs, highlightCollector);\n\n    return highlights;\n  }\n\n","sourceOld":"  private List<String> highlights(OffsetsRetrievalStrategySupplier offsetsStrategySupplier,\n                                  IndexReader reader, Query query) throws IOException {\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int maxDocs = 1000;\n\n    Query rewrittenQuery = searcher.rewrite(query);\n    TopDocs topDocs = searcher.search(rewrittenQuery, maxDocs);\n\n    ArrayList<String> highlights = new ArrayList<>();\n\n    AsciiMatchRangeHighlighter formatter = new AsciiMatchRangeHighlighter(analyzer);\n\n    MatchRegionRetriever.MatchOffsetsConsumer highlightCollector =\n        (docId, leafReader, leafDocId, fieldHighlights) -> {\n          StringBuilder sb = new StringBuilder();\n\n          Document document = leafReader.document(leafDocId);\n          formatter\n              .apply(document, new TreeMap<>(fieldHighlights))\n              .forEach(\n                  (field, snippets) -> {\n                    sb.append(\n                        String.format(\n                            Locale.ROOT, \"(%s: '%s')\", field, String.join(\" | \", snippets)));\n                  });\n\n          if (sb.length() > 0) {\n            sb.insert(0, document.get(FLD_ID) + \": \");\n            highlights.add(sb.toString());\n          }\n        };\n\n    MatchRegionRetriever highlighter = new MatchRegionRetriever(searcher, rewrittenQuery, analyzer,\n        offsetsStrategySupplier);\n    highlighter.highlightDocuments(topDocs, highlightCollector);\n\n    return highlights;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["930e5c340e08514a7f57a54cf65e2f8f1f90c8f0"]},"commit2Childs":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["930e5c340e08514a7f57a54cf65e2f8f1f90c8f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}