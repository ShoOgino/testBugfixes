{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","commits":[{"id":"1931d98b40b01d5075753b197c2461a5c2652689","date":1471971289,"type":1,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger[FacetModule]#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    int first = (int)freq.offset;\n    int end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    int last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    int first = (int)freq.offset;\n    int end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    int last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger[FacetModule]#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    int first = (int)freq.offset;\n    int end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    int last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    int first = (int)freq.offset;\n    int end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    int last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger[FacetModule]#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    int first = (int)freq.offset;\n    int end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    int last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    int first = (int)freq.offset;\n    int end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    int last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0981d4ba58f3187f57224acc8e4f15a4249f1fce","date":1477333392,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    long first = freq.offset;\n    long end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    long last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (int)(last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    int first = (int)freq.offset;\n    int end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    int last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60b61628d1912768f51eccaa8ead5a5a32ab34c6","date":1477427681,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    long first = freq.offset;\n    long end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    long last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (int)(last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    int first = (int)freq.offset;\n    int end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    int last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    long first = freq.offset;\n    long end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    long last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (int)(last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    int first = (int)freq.offset;\n    int end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    int last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65e1e1139651e98138d35a941b15107427618e3","date":1493072237,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue());\n    }\n\n    sortBuckets();\n\n    long first = freq.offset;\n    long end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    long last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (int)(last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    long first = freq.offset;\n    long end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    long last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (int)(last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","bugFix":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue());\n    }\n\n    sortBuckets();\n\n    long first = freq.offset;\n    long end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    long last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (int)(last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      int removed = 0;\n      if (freq.mincount > 1) {\n        for (FacetBucket bucket : buckets.values()) {\n          if (bucket.count < freq.mincount) removed++;\n        }\n      }\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue() - removed);\n\n      // TODO: we can further increase this estimate.\n      // If not sorting by count, use a simple ratio to scale\n      // If sorting by count desc, then add up the highest_possible_missing_count from each shard\n    }\n\n    sortBuckets();\n\n    long first = freq.offset;\n    long end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    long last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (int)(last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84a99d9041ffa5585158e5a283ea1736b6b8b473","date":1532019928,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue());\n    }\n\n    sortBuckets();\n\n    long first = freq.offset;\n    long end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    long last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (int)(last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    boolean refine = freq.refine != null && freq.refine != FacetRequest.RefineMethod.NONE;\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n      if (refine && !isBucketComplete(bucket,mcontext)) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue());\n    }\n\n    sortBuckets();\n\n    long first = freq.offset;\n    long end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    long last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (int)(last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ce69d020f939568b84a1dbbfbd11bfd9907b73","date":1543618146,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue());\n    }\n\n    sortBuckets(freq.sort);\n\n    long first = freq.offset;\n    long end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    long last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (int)(last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    boolean refine = freq.refine != null && freq.refine != FacetRequest.RefineMethod.NONE;\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n      if (refine && !isBucketComplete(bucket,mcontext)) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue());\n    }\n\n    sortBuckets();\n\n    long first = freq.offset;\n    long end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    long last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (int)(last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    boolean refine = freq.refine != null && freq.refine != FacetRequest.RefineMethod.NONE;\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n      if (refine && !isBucketComplete(bucket,mcontext)) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldMerger#getMergedResult().mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue());\n    }\n\n    sortBuckets(freq.sort);\n\n    long first = freq.offset;\n    long end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    long last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (int)(last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    boolean refine = freq.refine != null && freq.refine != FacetRequest.RefineMethod.NONE;\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n      if (refine && !isBucketComplete(bucket,mcontext)) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap();\n\n    if (numBuckets != null) {\n      result.add(\"numBuckets\", ((Number)numBuckets.getMergedResult()).longValue());\n    }\n\n    sortBuckets(freq.sort);\n\n    long first = freq.offset;\n    long end = freq.limit >=0 ? first + (int) freq.limit : Integer.MAX_VALUE;\n    long last = Math.min(sortedBuckets.size(), end);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(Math.max(0, (int)(last - first)));\n\n    /** this only works if there are no filters (like mincount)\n    for (int i=first; i<last; i++) {\n      FacetBucket bucket = sortedBuckets.get(i);\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n    ***/\n\n    // TODO: change effective offsets + limits at shards...\n\n    boolean refine = freq.refine != null && freq.refine != FacetRequest.RefineMethod.NONE;\n\n    int off = (int)freq.offset;\n    int lim = freq.limit >= 0 ? (int)freq.limit : Integer.MAX_VALUE;\n    for (FacetBucket bucket : sortedBuckets) {\n      if (bucket.getCount() < freq.mincount) {\n        continue;\n      }\n      if (refine && !isBucketComplete(bucket,mcontext)) {\n        continue;\n      }\n\n      if (off > 0) {\n        --off;\n        continue;\n      }\n\n      if (resultBuckets.size() >= lim) {\n        break;\n      }\n\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n\n    result.add(\"buckets\", resultBuckets);\n    if (missingBucket != null) {\n      result.add(\"missing\", missingBucket.getMergedBucket());\n    }\n    if (allBuckets != null) {\n      result.add(\"allBuckets\", allBuckets.getMergedBucket());\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b65e1e1139651e98138d35a941b15107427618e3":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"1931d98b40b01d5075753b197c2461a5c2652689":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["84a99d9041ffa5585158e5a283ea1736b6b8b473"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","0981d4ba58f3187f57224acc8e4f15a4249f1fce"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["60b61628d1912768f51eccaa8ead5a5a32ab34c6","b65e1e1139651e98138d35a941b15107427618e3"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"84a99d9041ffa5585158e5a283ea1736b6b8b473":["b65e1e1139651e98138d35a941b15107427618e3"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1931d98b40b01d5075753b197c2461a5c2652689"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"0981d4ba58f3187f57224acc8e4f15a4249f1fce":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"]},"commit2Childs":{"b65e1e1139651e98138d35a941b15107427618e3":["e9017cf144952056066919f1ebc7897ff9bd71b1","84a99d9041ffa5585158e5a283ea1736b6b8b473"],"1931d98b40b01d5075753b197c2461a5c2652689":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["b65e1e1139651e98138d35a941b15107427618e3","e9017cf144952056066919f1ebc7897ff9bd71b1","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1931d98b40b01d5075753b197c2461a5c2652689","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"84a99d9041ffa5585158e5a283ea1736b6b8b473":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","60b61628d1912768f51eccaa8ead5a5a32ab34c6","0981d4ba58f3187f57224acc8e4f15a4249f1fce"],"0981d4ba58f3187f57224acc8e4f15a4249f1fce":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}