{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","commits":[{"id":"c5c99ad021f3da085fcb66220598a8f91dc5e453","date":1462242046,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(\"location\", location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (replicationFactor != null) {\n        params.set(\"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c7a21395bae9e2f61aeb639f47aaca771c426ed","date":1462255690,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(\"location\", location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (replicationFactor != null) {\n        params.set(\"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(\"location\", location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (replicationFactor != null) {\n        params.set(\"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c623a7f72be34d6c45bee682028c50327d9e4b7","date":1467791293,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (replicationFactor != null) {\n        params.set(\"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(\"location\", location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (replicationFactor != null) {\n        params.set(\"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (replicationFactor != null) {\n        params.set(\"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(\"location\", location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (replicationFactor != null) {\n        params.set(\"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d18dd44acd824af8b51a5994c9475b32b094fb76","date":1494427167,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (replicationFactor != null) {\n        params.set(\"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n      if (createNodeSet.isPresent()) {\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet.get());\n      }\n      if (createNodeSetShuffle.isPresent()) {\n        params.set(CREATE_NODE_SET_SHUFFLE_PARAM, createNodeSetShuffle.get());\n      }\n\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (replicationFactor != null) {\n        params.set(\"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b31ebc7a867ddea79d438a8fca876a94e644d11a","date":1494496172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (replicationFactor != null) {\n        params.set(\"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n      if (createNodeSet.isPresent()) {\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet.get());\n      }\n      if (createNodeSetShuffle.isPresent()) {\n        params.set(CREATE_NODE_SET_SHUFFLE_PARAM, createNodeSetShuffle.get());\n      }\n\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (replicationFactor != null) {\n        params.set(\"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (replicationFactor != null) {\n        params.set(\"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n      if (createNodeSet.isPresent()) {\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet.get());\n      }\n      if (createNodeSetShuffle.isPresent()) {\n        params.set(CREATE_NODE_SET_SHUFFLE_PARAM, createNodeSetShuffle.get());\n      }\n\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (replicationFactor != null) {\n        params.set(\"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46ef1a2b9cf8410947a87a43aba2b400394e773","date":1517224576,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (replicationFactor != null) {\n        params.set(ZkStateReader.REPLICATION_FACTOR, replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n      if (createNodeSet.isPresent()) {\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet.get());\n      }\n      if (createNodeSetShuffle.isPresent()) {\n        params.set(CREATE_NODE_SET_SHUFFLE_PARAM, createNodeSetShuffle.get());\n      }\n\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (replicationFactor != null) {\n        params.set(\"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n      if (createNodeSet.isPresent()) {\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet.get());\n      }\n      if (createNodeSetShuffle.isPresent()) {\n        params.set(CREATE_NODE_SET_SHUFFLE_PARAM, createNodeSetShuffle.get());\n      }\n\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"742168028ecb4838c124d27f836df9637be2f769","date":1529417708,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (replicationFactor != null && nrtReplicas != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Cannot set both replicationFactor and nrtReplicas as they mean the same thing\");\n      }\n      if (replicationFactor != null) {\n        params.set(ZkStateReader.REPLICATION_FACTOR, replicationFactor);\n      }\n      if (nrtReplicas != null) {\n        params.set(ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n      if (createNodeSet.isPresent()) {\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet.get());\n      }\n      if (createNodeSetShuffle.isPresent()) {\n        params.set(CREATE_NODE_SET_SHUFFLE_PARAM, createNodeSetShuffle.get());\n      }\n\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (replicationFactor != null) {\n        params.set(ZkStateReader.REPLICATION_FACTOR, replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n      if (createNodeSet.isPresent()) {\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet.get());\n      }\n      if (createNodeSetShuffle.isPresent()) {\n        params.set(CREATE_NODE_SET_SHUFFLE_PARAM, createNodeSetShuffle.get());\n      }\n\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (replicationFactor != null && nrtReplicas != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Cannot set both replicationFactor and nrtReplicas as they mean the same thing\");\n      }\n      if (replicationFactor != null) {\n        params.set(ZkStateReader.REPLICATION_FACTOR, replicationFactor);\n      }\n      if (nrtReplicas != null) {\n        params.set(ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n      if (createNodeSet.isPresent()) {\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet.get());\n      }\n      if (createNodeSetShuffle.isPresent()) {\n        params.set(CREATE_NODE_SET_SHUFFLE_PARAM, createNodeSetShuffle.get());\n      }\n\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (replicationFactor != null) {\n        params.set(ZkStateReader.REPLICATION_FACTOR, replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n      if (createNodeSet.isPresent()) {\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet.get());\n      }\n      if (createNodeSetShuffle.isPresent()) {\n        params.set(CREATE_NODE_SET_SHUFFLE_PARAM, createNodeSetShuffle.get());\n      }\n\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (replicationFactor != null && nrtReplicas != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Cannot set both replicationFactor and nrtReplicas as they mean the same thing\");\n      }\n      if (replicationFactor != null) {\n        params.set(ZkStateReader.REPLICATION_FACTOR, replicationFactor);\n      }\n      if (nrtReplicas != null) {\n        params.set(ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n      if (createNodeSet.isPresent()) {\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet.get());\n      }\n      if (createNodeSetShuffle.isPresent()) {\n        params.set(CREATE_NODE_SET_SHUFFLE_PARAM, createNodeSetShuffle.get());\n      }\n\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (replicationFactor != null) {\n        params.set(ZkStateReader.REPLICATION_FACTOR, replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n      if (createNodeSet.isPresent()) {\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet.get());\n      }\n      if (createNodeSetShuffle.isPresent()) {\n        params.set(CREATE_NODE_SET_SHUFFLE_PARAM, createNodeSetShuffle.get());\n      }\n\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (replicationFactor != null && nrtReplicas != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Cannot set both replicationFactor and nrtReplicas as they mean the same thing\");\n      }\n      if (replicationFactor != null) {\n        params.set(ZkStateReader.REPLICATION_FACTOR, replicationFactor);\n      }\n      if (nrtReplicas != null) {\n        params.set(ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n      if (createNodeSet.isPresent()) {\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet.get());\n      }\n      if (createNodeSetShuffle.isPresent()) {\n        params.set(CREATE_NODE_SET_SHUFFLE_PARAM, createNodeSetShuffle.get());\n      }\n\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (replicationFactor != null && nrtReplicas != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Cannot set both replicationFactor and nrtReplicas as they mean the same thing\");\n      }\n      if (replicationFactor != null) {\n        params.set(ZkStateReader.REPLICATION_FACTOR, replicationFactor);\n      }\n      if (nrtReplicas != null) {\n        params.set(ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n      if (createNodeSet.isPresent()) {\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet.get());\n      }\n      if (createNodeSetShuffle.isPresent()) {\n        params.set(CREATE_NODE_SET_SHUFFLE_PARAM, createNodeSetShuffle.get());\n      }\n\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Restore#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (replicationFactor != null && nrtReplicas != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Cannot set both replicationFactor and nrtReplicas as they mean the same thing\");\n      }\n      if (replicationFactor != null) {\n        params.set(ZkStateReader.REPLICATION_FACTOR, replicationFactor);\n      }\n      if (nrtReplicas != null) {\n        params.set(ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n      if (createNodeSet.isPresent()) {\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet.get());\n      }\n      if (createNodeSetShuffle.isPresent()) {\n        params.set(CREATE_NODE_SET_SHUFFLE_PARAM, createNodeSetShuffle.get());\n      }\n\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.set(CoreAdminParams.COLLECTION, collection);\n      params.set(CoreAdminParams.NAME, backupName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, location); //note: optional\n      params.set(\"collection.configName\", configName); //note: optional\n      if (replicationFactor != null && nrtReplicas != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Cannot set both replicationFactor and nrtReplicas as they mean the same thing\");\n      }\n      if (replicationFactor != null) {\n        params.set(ZkStateReader.REPLICATION_FACTOR, replicationFactor);\n      }\n      if (nrtReplicas != null) {\n        params.set(ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (repositoryName.isPresent()) {\n        params.set(CoreAdminParams.BACKUP_REPOSITORY, repositoryName.get());\n      }\n      if (createNodeSet.isPresent()) {\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet.get());\n      }\n      if (createNodeSetShuffle.isPresent()) {\n        params.set(CREATE_NODE_SET_SHUFFLE_PARAM, createNodeSetShuffle.get());\n      }\n\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"c5c99ad021f3da085fcb66220598a8f91dc5e453":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46ef1a2b9cf8410947a87a43aba2b400394e773":["d18dd44acd824af8b51a5994c9475b32b094fb76"],"b31ebc7a867ddea79d438a8fca876a94e644d11a":["4c623a7f72be34d6c45bee682028c50327d9e4b7","d18dd44acd824af8b51a5994c9475b32b094fb76"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"742168028ecb4838c124d27f836df9637be2f769":["e46ef1a2b9cf8410947a87a43aba2b400394e773"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["742168028ecb4838c124d27f836df9637be2f769"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","4c623a7f72be34d6c45bee682028c50327d9e4b7"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"d18dd44acd824af8b51a5994c9475b32b094fb76":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["4c623a7f72be34d6c45bee682028c50327d9e4b7","d18dd44acd824af8b51a5994c9475b32b094fb76"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["e46ef1a2b9cf8410947a87a43aba2b400394e773","742168028ecb4838c124d27f836df9637be2f769"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5c99ad021f3da085fcb66220598a8f91dc5e453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["e46ef1a2b9cf8410947a87a43aba2b400394e773","742168028ecb4838c124d27f836df9637be2f769"]},"commit2Childs":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["b31ebc7a867ddea79d438a8fca876a94e644d11a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d18dd44acd824af8b51a5994c9475b32b094fb76","e9017cf144952056066919f1ebc7897ff9bd71b1"],"c5c99ad021f3da085fcb66220598a8f91dc5e453":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"e46ef1a2b9cf8410947a87a43aba2b400394e773":["742168028ecb4838c124d27f836df9637be2f769","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b31ebc7a867ddea79d438a8fca876a94e644d11a":[],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"742168028ecb4838c124d27f836df9637be2f769":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d18dd44acd824af8b51a5994c9475b32b094fb76":["e46ef1a2b9cf8410947a87a43aba2b400394e773","b31ebc7a867ddea79d438a8fca876a94e644d11a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["4c623a7f72be34d6c45bee682028c50327d9e4b7","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5c99ad021f3da085fcb66220598a8f91dc5e453","55b50463286869f584cf849d1587a0fcd54d1dfa","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b31ebc7a867ddea79d438a8fca876a94e644d11a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}