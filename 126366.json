{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreNodeName(String,String,String).mjava","commits":[{"id":"4ddb837927b3de29503b68a05fec256665edab50","date":1400760638,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreNodeName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreNodeName(DocCollection,String,String).mjava","sourceNew":"  private String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      Map<String,Slice> slicesMap = zkStateReader.getClusterState()\n          .getSlicesMap(collectionName);\n      if (slicesMap != null) {\n        \n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n            \n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            \n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","sourceOld":"  private String waitForCoreNodeName(DocCollection collection, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      Map<String,Slice> slicesMap = zkStateReader.getClusterState()\n          .getSlicesMap(collection.getName());\n      if (slicesMap != null) {\n        \n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n            \n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            \n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe","date":1430750405,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreNodeName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreNodeName(String,String,String).mjava","sourceNew":"  private String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      Map<String,Slice> slicesMap = zkStateReader.getClusterState()\n          .getSlicesMap(collectionName);\n      if (slicesMap != null) {\n\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","sourceOld":"  private String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      Map<String,Slice> slicesMap = zkStateReader.getClusterState()\n          .getSlicesMap(collectionName);\n      if (slicesMap != null) {\n        \n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n            \n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            \n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreNodeName(String,String,String).mjava","sourceNew":"  private String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      Map<String,Slice> slicesMap = zkStateReader.getClusterState()\n          .getSlicesMap(collectionName);\n      if (slicesMap != null) {\n\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","sourceOld":"  private String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      Map<String,Slice> slicesMap = zkStateReader.getClusterState()\n          .getSlicesMap(collectionName);\n      if (slicesMap != null) {\n\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"4ddb837927b3de29503b68a05fec256665edab50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["4ddb837927b3de29503b68a05fec256665edab50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ddb837927b3de29503b68a05fec256665edab50":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ddb837927b3de29503b68a05fec256665edab50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}