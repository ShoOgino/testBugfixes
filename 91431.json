{"path":"src/java/org/apache/solr/search/DisMaxQParser#addBoostQuery(BooleanQuery,SolrParams).mjava","commits":[{"id":"50de217601652b8d4bff9f8ac567455920c85891","date":1243497655,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/DisMaxQParser#addBoostQuery(BooleanQuery,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  protected void addBoostQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    boostParams = solrParams.getParams(DisMaxParams.BQ);\n    //List<Query> boostQueries = SolrPluginUtils.parseQueryStrings(req, boostParams);\n    boostQueries = null;\n    if (boostParams != null && boostParams.length > 0) {\n      boostQueries = new ArrayList<Query>();\n      for (String qs : boostParams) {\n        if (qs.trim().length() == 0) continue;\n        Query q = subQuery(qs, null).parse();\n        boostQueries.add(q);\n      }\n    }\n    if (null != boostQueries) {\n      if (1 == boostQueries.size() && 1 == boostParams.length) {\n        /* legacy logic */\n        Query f = boostQueries.get(0);\n        if (1.0f == f.getBoost() && f instanceof BooleanQuery) {\n          /* if the default boost was used, and we've got a BooleanQuery\n           * extract the subqueries out and use them directly\n           */\n          for (Object c : ((BooleanQuery) f).clauses()) {\n            query.add((BooleanClause) c);\n          }\n        } else {\n          query.add(f, BooleanClause.Occur.SHOULD);\n        }\n      } else {\n        for (Query f : boostQueries) {\n          query.add(f, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/DisMaxQParser#addBoostQuery(BooleanQuery,SolrParams).mjava","pathOld":"src/java/org/apache/solr/search/DisMaxQParser#addBoostQuery(BooleanQuery,SolrParams).mjava","sourceNew":"  protected void addBoostQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    boostParams = solrParams.getParams(DisMaxParams.BQ);\n    //List<Query> boostQueries = SolrPluginUtils.parseQueryStrings(req, boostParams);\n    boostQueries = null;\n    if (boostParams != null && boostParams.length > 0) {\n      boostQueries = new ArrayList<Query>();\n      for (String qs : boostParams) {\n        if (qs.trim().length() == 0) continue;\n        Query q = subQuery(qs, null).parse();\n        boostQueries.add(q);\n      }\n    }\n    if (null != boostQueries) {\n      if (1 == boostQueries.size() && 1 == boostParams.length) {\n        /* legacy logic */\n        Query f = boostQueries.get(0);\n        if (1.0f == f.getBoost() && f instanceof BooleanQuery) {\n          /* if the default boost was used, and we've got a BooleanQuery\n           * extract the subqueries out and use them directly\n           */\n          for (Object c : ((BooleanQuery) f).clauses()) {\n            query.add((BooleanClause) c);\n          }\n        } else {\n          query.add(f, BooleanClause.Occur.SHOULD);\n        }\n      } else {\n        for (Query f : boostQueries) {\n          query.add(f, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void addBoostQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    boostParams = solrParams.getParams(DisMaxParams.BQ);\n    //List<Query> boostQueries = SolrPluginUtils.parseQueryStrings(req, boostParams);\n    boostQueries = null;\n    if (boostParams != null && boostParams.length > 0) {\n      boostQueries = new ArrayList<Query>();\n      for (String qs : boostParams) {\n        if (qs.trim().length() == 0) continue;\n        Query q = subQuery(qs, null).parse();\n        boostQueries.add(q);\n      }\n    }\n    if (null != boostQueries) {\n      if (1 == boostQueries.size() && 1 == boostParams.length) {\n        /* legacy logic */\n        Query f = boostQueries.get(0);\n        if (1.0f == f.getBoost() && f instanceof BooleanQuery) {\n          /* if the default boost was used, and we've got a BooleanQuery\n           * extract the subqueries out and use them directly\n           */\n          for (Object c : ((BooleanQuery) f).clauses()) {\n            query.add((BooleanClause) c);\n          }\n        } else {\n          query.add(f, BooleanClause.Occur.SHOULD);\n        }\n      } else {\n        for (Query f : boostQueries) {\n          query.add(f, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["50de217601652b8d4bff9f8ac567455920c85891"],"50de217601652b8d4bff9f8ac567455920c85891":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["50de217601652b8d4bff9f8ac567455920c85891"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"50de217601652b8d4bff9f8ac567455920c85891":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}