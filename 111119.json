{"path":"lucene/src/java/org/apache/lucene/index/CompositeIndexReader#getSequentialSubReaders().mjava","commits":[{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompositeIndexReader#getSequentialSubReaders().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public abstract IndexReader[] getSequentialSubReaders();\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public IndexReader[] getSequentialSubReaders() {\n    ensureOpen();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72eb67b05aa3b9d64968e9a9086135c2e969e681","date":1327844263,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompositeIndexReader#getSequentialSubReaders().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompositeIndexReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. It contrast to previous\n   *  Lucene versions may not return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public abstract IndexReader[] getSequentialSubReaders();\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public abstract IndexReader[] getSequentialSubReaders();\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompositeIndexReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. It contrast to previous\n   *  Lucene versions may not return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public abstract IndexReader[] getSequentialSubReaders();\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. It contrast to previous\n   *  Lucene versions may not return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public abstract IndexReader[] getSequentialSubReaders();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["72eb67b05aa3b9d64968e9a9086135c2e969e681"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"72eb67b05aa3b9d64968e9a9086135c2e969e681":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"72eb67b05aa3b9d64968e9a9086135c2e969e681":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["72eb67b05aa3b9d64968e9a9086135c2e969e681"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da6d5ac19a80d65b1e864251f155d30960353b7e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}