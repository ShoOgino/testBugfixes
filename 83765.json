{"path":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","sourceNew":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","sourceOld":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"371bbd52cb908c7640086aa3aec5880542b81060","date":1277991686,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","sourceNew":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    assertTrue(\"calling stringValue() twice should give same reference\", field.stringValue() == field.stringValue());\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    assertTrue(\"calling binaryValue() twice should give same reference\", field.getBinaryValue() == field.getBinaryValue());\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","sourceOld":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","sourceNew":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    assertTrue(\"calling stringValue() twice should give same reference\", field.stringValue() == field.stringValue());\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    assertTrue(\"calling binaryValue() twice should give same reference\", field.getBinaryValue() == field.getBinaryValue());\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","sourceOld":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","sourceNew":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    assertTrue(\"calling stringValue() twice should give same reference\", field.stringValue() == field.stringValue());\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    assertTrue(\"calling binaryValue() twice should give same reference\", field.getBinaryValue() == field.getBinaryValue());\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    assertTrue(\"calling stringValue() twice should give same reference\", field.stringValue() == field.stringValue());\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    assertTrue(\"calling binaryValue() twice should give same reference\", field.getBinaryValue() == field.getBinaryValue());\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","sourceNew":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    assertTrue(\"calling stringValue() twice should give same reference\", field.stringValue() == field.stringValue());\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    assertTrue(\"calling binaryValue() twice should give same reference\", field.getBinaryValue() == field.getBinaryValue());\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    assertTrue(\"calling stringValue() twice should give same reference\", field.stringValue() == field.stringValue());\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    assertTrue(\"calling binaryValue() twice should give same reference\", field.getBinaryValue() == field.getBinaryValue());\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestContribFieldsReader#testLazyFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","sourceNew":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = IndexReader.open(dir);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = getDocument(reader, 0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    IndexableField field = doc.getField(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.getClass().getSimpleName().equals(\"LazyField\"));\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    assertTrue(\"calling stringValue() twice should give same reference\", field.stringValue() == field.stringValue());\n\n    field = doc.getField(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertFalse(\"Field is lazy and it should not be\", field.getClass().getSimpleName().equals(\"LazyField\"));\n    field = doc.getField(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertFalse(\"Field is lazy and it should not be\", field.getClass().getSimpleName().equals(\"LazyField\"));\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.getClass().getSimpleName().equals(\"LazyField\"));\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getField(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.binaryValue().bytes;\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    assertTrue(\"calling binaryValue() twice should give same reference\", field.binaryValue().bytes == field.binaryValue().bytes);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    assertTrue(\"calling stringValue() twice should give same reference\", field.stringValue() == field.stringValue());\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    assertTrue(\"calling binaryValue() twice should give same reference\", field.getBinaryValue() == field.getBinaryValue());\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["371bbd52cb908c7640086aa3aec5880542b81060"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"371bbd52cb908c7640086aa3aec5880542b81060":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","371bbd52cb908c7640086aa3aec5880542b81060"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1509f151d7692d84fae414b2b799ac06ba60fcb4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"371bbd52cb908c7640086aa3aec5880542b81060":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["371bbd52cb908c7640086aa3aec5880542b81060","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}