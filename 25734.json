{"path":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","commits":[{"id":"31ba6411a5c9d154ee6ccb3cecdc8ad6acfceac5","date":1401991635,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","pathOld":"/dev/null","sourceNew":"    public BinaryDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final int pointer = (int) docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"791cb1fd9df7bb7ce1378876d369a3e31c0095f5","date":1452283583,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","sourceNew":"    public BinaryDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","sourceOld":"    public BinaryDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final int pointer = (int) docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","sourceNew":"    public BinaryDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","sourceOld":"    public BinaryDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","sourceNew":"    public BinaryDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","sourceOld":"    public BinaryDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","sourceNew":"    public BinaryDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","sourceOld":"    public BinaryDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","sourceNew":null,"sourceOld":"    public BinaryDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["791cb1fd9df7bb7ce1378876d369a3e31c0095f5"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["791cb1fd9df7bb7ce1378876d369a3e31c0095f5","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["791cb1fd9df7bb7ce1378876d369a3e31c0095f5","0e121d43b5a10f2df530f406f935102656e9c4e8"],"791cb1fd9df7bb7ce1378876d369a3e31c0095f5":["31ba6411a5c9d154ee6ccb3cecdc8ad6acfceac5"],"31ba6411a5c9d154ee6ccb3cecdc8ad6acfceac5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["791cb1fd9df7bb7ce1378876d369a3e31c0095f5","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31ba6411a5c9d154ee6ccb3cecdc8ad6acfceac5"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"791cb1fd9df7bb7ce1378876d369a3e31c0095f5":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"31ba6411a5c9d154ee6ccb3cecdc8ad6acfceac5":["791cb1fd9df7bb7ce1378876d369a3e31c0095f5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}