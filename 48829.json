{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler).mjava","commits":[{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,String,Slice,ShardHandler).mjava","sourceNew":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                        Slice slice, ShardHandler shardHandler) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) \n          && (stateMatcher == null || Replica.State.getState(node.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE, node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","sourceOld":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, String stateMatcher,\n                        Slice slice, ShardHandler shardHandler) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE,\n            node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler).mjava","sourceNew":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                        Slice slice, ShardHandler shardHandler) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) \n          && (stateMatcher == null || Replica.State.getState(node.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE, node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","sourceOld":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                        Slice slice, ShardHandler shardHandler) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) \n          && (stateMatcher == null || Replica.State.getState(node.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE, node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}