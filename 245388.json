{"path":"src/test/org/apache/lucene/analysis/TestToken#testCopyTo().mjava","commits":[{"id":"881f3cbef4fe1d74529367acf824c7394e2dd11c","date":1248894847,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestToken#testCopyTo().mjava","pathOld":"/dev/null","sourceNew":"  public void testCopyTo() throws Exception {\n    Token t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.setTermBuffer(content, 0, 5);\n    char[] buf = t.termBuffer();\n    Token copy = (Token) TestSimpleAttributeImpls.assertCopyIsEqual(t);\n    assertEquals(t.term(), copy.term());\n    assertNotSame(buf, copy.termBuffer());\n\n    Payload pl = new Payload(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = (Token) TestSimpleAttributeImpls.assertCopyIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc","date":1251117853,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestToken#testCopyTo().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestToken#testCopyTo().mjava","sourceNew":"  public void testCopyTo() throws Exception {\n    Token t = new Token();\n    Token copy = (Token) TestSimpleAttributeImpls.assertCopyIsEqual(t);\n    assertEquals(\"\", t.term());\n    assertEquals(\"\", copy.term());\n\n    t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.setTermBuffer(content, 0, 5);\n    char[] buf = t.termBuffer();\n    copy = (Token) TestSimpleAttributeImpls.assertCopyIsEqual(t);\n    assertEquals(t.term(), copy.term());\n    assertNotSame(buf, copy.termBuffer());\n\n    Payload pl = new Payload(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = (Token) TestSimpleAttributeImpls.assertCopyIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","sourceOld":"  public void testCopyTo() throws Exception {\n    Token t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.setTermBuffer(content, 0, 5);\n    char[] buf = t.termBuffer();\n    Token copy = (Token) TestSimpleAttributeImpls.assertCopyIsEqual(t);\n    assertEquals(t.term(), copy.term());\n    assertNotSame(buf, copy.termBuffer());\n\n    Payload pl = new Payload(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = (Token) TestSimpleAttributeImpls.assertCopyIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/TestToken#testCopyTo().mjava","sourceNew":null,"sourceOld":"  public void testCopyTo() throws Exception {\n    Token t = new Token();\n    Token copy = (Token) TestSimpleAttributeImpls.assertCopyIsEqual(t);\n    assertEquals(\"\", t.term());\n    assertEquals(\"\", copy.term());\n\n    t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.setTermBuffer(content, 0, 5);\n    char[] buf = t.termBuffer();\n    copy = (Token) TestSimpleAttributeImpls.assertCopyIsEqual(t);\n    assertEquals(t.term(), copy.term());\n    assertNotSame(buf, copy.termBuffer());\n\n    Payload pl = new Payload(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = (Token) TestSimpleAttributeImpls.assertCopyIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"881f3cbef4fe1d74529367acf824c7394e2dd11c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["881f3cbef4fe1d74529367acf824c7394e2dd11c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"]},"commit2Childs":{"881f3cbef4fe1d74529367acf824c7394e2dd11c":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["881f3cbef4fe1d74529367acf824c7394e2dd11c"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}