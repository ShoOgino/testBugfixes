{"path":"src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","commits":[{"id":"103e2ec175f1aa5629df5bcd34eb1c53055caeb1","date":1268243753,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public IndexWriterConfig setTermIndexInterval(int interval) {\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public IndexWriterConfig setTermIndexInterval(int interval) {\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public IndexWriterConfig setTermIndexInterval(int interval) {\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public IndexWriterConfig setTermIndexInterval(int interval) {\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public IndexWriterConfig setTermIndexInterval(int interval) {\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"103e2ec175f1aa5629df5bcd34eb1c53055caeb1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e52fea2c4081a1e552b98506691990be59503168":["103e2ec175f1aa5629df5bcd34eb1c53055caeb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"103e2ec175f1aa5629df5bcd34eb1c53055caeb1":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["103e2ec175f1aa5629df5bcd34eb1c53055caeb1"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}