{"path":"lucene/core/src/test/org/apache/lucene/document/TestFeatureField#testExplanations().mjava","commits":[{"id":"966dd6f2a1942842f7efe2bdcc7537ea6597a290","date":1521543449,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFeatureField#testExplanations().mjava","pathOld":"/dev/null","sourceNew":"  public void testExplanations() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig()\n        .setMergePolicy(newLogMergePolicy(random().nextBoolean())));\n    Document doc = new Document();\n    FeatureField pagerank = new FeatureField(\"features\", \"pagerank\", 1);\n    doc.add(pagerank);\n\n    pagerank.setFeatureValue(10);\n    writer.addDocument(doc);\n\n    pagerank.setFeatureValue(100);\n    writer.addDocument(doc);\n\n    writer.addDocument(new Document()); // gap\n\n    pagerank.setFeatureValue(1);\n    writer.addDocument(doc);\n\n    pagerank.setFeatureValue(42);\n    writer.addDocument(doc);\n\n    DirectoryReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    QueryUtils.check(random(), FeatureField.newLogQuery(\"features\", \"pagerank\", 1f, 4.5f), searcher);\n    QueryUtils.check(random(), FeatureField.newSaturationQuery(\"features\", \"pagerank\", 1f, 12f), searcher);\n    QueryUtils.check(random(), FeatureField.newSigmoidQuery(\"features\", \"pagerank\", 1f, 12f, 0.6f), searcher);\n\n    // Test boosts that are > 1\n    QueryUtils.check(random(), FeatureField.newLogQuery(\"features\", \"pagerank\", 3f, 4.5f), searcher);\n    QueryUtils.check(random(), FeatureField.newSaturationQuery(\"features\", \"pagerank\", 3f, 12f), searcher);\n    QueryUtils.check(random(), FeatureField.newSigmoidQuery(\"features\", \"pagerank\", 3f, 12f, 0.6f), searcher);\n\n    // Test boosts that are < 1\n    QueryUtils.check(random(), FeatureField.newLogQuery(\"features\", \"pagerank\", .2f, 4.5f), searcher);\n    QueryUtils.check(random(), FeatureField.newSaturationQuery(\"features\", \"pagerank\", .2f, 12f), searcher);\n    QueryUtils.check(random(), FeatureField.newSigmoidQuery(\"features\", \"pagerank\", .2f, 12f, 0.6f), searcher);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFeatureField#testExplanations().mjava","pathOld":"/dev/null","sourceNew":"  public void testExplanations() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig()\n        .setMergePolicy(newLogMergePolicy(random().nextBoolean())));\n    Document doc = new Document();\n    FeatureField pagerank = new FeatureField(\"features\", \"pagerank\", 1);\n    doc.add(pagerank);\n\n    pagerank.setFeatureValue(10);\n    writer.addDocument(doc);\n\n    pagerank.setFeatureValue(100);\n    writer.addDocument(doc);\n\n    writer.addDocument(new Document()); // gap\n\n    pagerank.setFeatureValue(1);\n    writer.addDocument(doc);\n\n    pagerank.setFeatureValue(42);\n    writer.addDocument(doc);\n\n    DirectoryReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    QueryUtils.check(random(), FeatureField.newLogQuery(\"features\", \"pagerank\", 1f, 4.5f), searcher);\n    QueryUtils.check(random(), FeatureField.newSaturationQuery(\"features\", \"pagerank\", 1f, 12f), searcher);\n    QueryUtils.check(random(), FeatureField.newSigmoidQuery(\"features\", \"pagerank\", 1f, 12f, 0.6f), searcher);\n\n    // Test boosts that are > 1\n    QueryUtils.check(random(), FeatureField.newLogQuery(\"features\", \"pagerank\", 3f, 4.5f), searcher);\n    QueryUtils.check(random(), FeatureField.newSaturationQuery(\"features\", \"pagerank\", 3f, 12f), searcher);\n    QueryUtils.check(random(), FeatureField.newSigmoidQuery(\"features\", \"pagerank\", 3f, 12f, 0.6f), searcher);\n\n    // Test boosts that are < 1\n    QueryUtils.check(random(), FeatureField.newLogQuery(\"features\", \"pagerank\", .2f, 4.5f), searcher);\n    QueryUtils.check(random(), FeatureField.newSaturationQuery(\"features\", \"pagerank\", .2f, 12f), searcher);\n    QueryUtils.check(random(), FeatureField.newSigmoidQuery(\"features\", \"pagerank\", .2f, 12f, 0.6f), searcher);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","966dd6f2a1942842f7efe2bdcc7537ea6597a290"],"966dd6f2a1942842f7efe2bdcc7537ea6597a290":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"]},"commit2Childs":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"966dd6f2a1942842f7efe2bdcc7537ea6597a290":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","966dd6f2a1942842f7efe2bdcc7537ea6597a290"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}