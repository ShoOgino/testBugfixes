{"path":"src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","commits":[{"id":"4d17492f26096e19670d947d1be5e9adc52b1d3d","date":1224931200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(DocumentsWriter.FlushState).mjava","sourceNew":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      assert state.docStoreSegmentName != null;\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      if (4+state.numDocsInStore*8 != state.directory.fileLength(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION) + \" length in bytes of \" + state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n    }\n  }\n\n","sourceOld":"  synchronized public void closeDocStore(DocumentsWriter.FlushState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      assert state.docStoreSegmentName != null;\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      if (4+state.numDocsInStore*8 != state.directory.fileLength(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION) + \" length in bytes of \" + state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e9e8b4258e08645a02d6b454cdb1689f6763d2","date":1232122713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","sourceNew":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      assert state.docStoreSegmentName != null;\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION) + \" length in bytes of \" + state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n    }\n  }\n\n","sourceOld":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      assert state.docStoreSegmentName != null;\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      if (4+state.numDocsInStore*8 != state.directory.fileLength(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION) + \" length in bytes of \" + state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n    }\n  }\n\n","bugFix":["5350389bf83287111f7760b9e3db3af8e3648474"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55ddd0022d1d26b52ed711e90ab77de2b36130c6","date":1251466592,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","sourceNew":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      assert state.docStoreSegmentName != null;\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      final String fileName = state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION;\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(fileName))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(fileName) + \" length in bytes of \" + fileName + \" file exists?=\" + state.directory.fileExists(fileName));\n    }\n  }\n\n","sourceOld":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      assert state.docStoreSegmentName != null;\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION) + \" length in bytes of \" + state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"775efee7f959e0dd3df7960b93767d9e00b78751","date":1267203159,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","sourceNew":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      assert state.docStoreSegmentName != null;\n      String fieldsName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      state.docWriter.removeOpenFile(fieldsName);\n      state.docWriter.removeOpenFile(fieldsIdxName);\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(fieldsIdxName))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n    }\n  }\n\n","sourceOld":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      assert state.docStoreSegmentName != null;\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.flushedFiles.add(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_EXTENSION);\n      state.docWriter.removeOpenFile(state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION);\n\n      final String fileName = state.docStoreSegmentName + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION;\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(fileName))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(fileName) + \" length in bytes of \" + fileName + \" file exists?=\" + state.directory.fileExists(fileName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","sourceNew":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      assert state.docStoreSegmentName != null;\n      String fieldsName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      state.docWriter.removeOpenFile(fieldsName);\n      state.docWriter.removeOpenFile(fieldsIdxName);\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(fieldsIdxName))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n    }\n  }\n\n","sourceOld":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      assert state.docStoreSegmentName != null;\n      String fieldsName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      state.docWriter.removeOpenFile(fieldsName);\n      state.docWriter.removeOpenFile(fieldsIdxName);\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(fieldsIdxName))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6e9e8b4258e08645a02d6b454cdb1689f6763d2":["4d17492f26096e19670d947d1be5e9adc52b1d3d"],"775efee7f959e0dd3df7960b93767d9e00b78751":["55ddd0022d1d26b52ed711e90ab77de2b36130c6"],"55ddd0022d1d26b52ed711e90ab77de2b36130c6":["c6e9e8b4258e08645a02d6b454cdb1689f6763d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["775efee7f959e0dd3df7960b93767d9e00b78751"]},"commit2Childs":{"c6e9e8b4258e08645a02d6b454cdb1689f6763d2":["55ddd0022d1d26b52ed711e90ab77de2b36130c6"],"775efee7f959e0dd3df7960b93767d9e00b78751":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"55ddd0022d1d26b52ed711e90ab77de2b36130c6":["775efee7f959e0dd3df7960b93767d9e00b78751"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d17492f26096e19670d947d1be5e9adc52b1d3d"],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["c6e9e8b4258e08645a02d6b454cdb1689f6763d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}