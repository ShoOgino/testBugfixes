{"path":"lucene/src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  @Override\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort) throws IOException {\n    if (sort == null) throw new NullPointerException();\n\n    final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n    final Lock lock = new ReentrantLock();\n    @SuppressWarnings(\"unchecked\") final Future<TopFieldDocs>[] searchThreads = new Future[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      searchThreads[i] = executor.submit(\n          new MultiSearcherCallableWithSort(lock, searchables[i], weight, filter, nDocs, hq, sort, i, starts));\n    }\n\n    final CountTotalHits<TopFieldDocs> func = new CountTotalHits<TopFieldDocs>();\n    foreach(func, Arrays.asList(searchThreads));\n\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = hq.pop();\n\n    return new TopFieldDocs(func.totalHits, scoreDocs, hq.getFields(), func.maxScore);\n  }\n\n","sourceOld":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  @Override\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort) throws IOException {\n    if (sort == null) throw new NullPointerException();\n\n    final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n    final Lock lock = new ReentrantLock();\n    @SuppressWarnings(\"unchecked\") final Future<TopFieldDocs>[] searchThreads = new Future[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      searchThreads[i] = executor.submit(\n          new MultiSearcherCallableWithSort(lock, searchables[i], weight, filter, nDocs, hq, sort, i, starts));\n    }\n\n    final CountTotalHits<TopFieldDocs> func = new CountTotalHits<TopFieldDocs>();\n    foreach(func, Arrays.asList(searchThreads));\n\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = hq.pop();\n\n    return new TopFieldDocs(func.totalHits, scoreDocs, hq.getFields(), func.maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d6aa47ee944540caf43af80e17bbd289b949ae4","date":1276190873,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  @Override\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort) throws IOException {\n    if (sort == null) throw new NullPointerException();\n\n    final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n    final Lock lock = new ReentrantLock();\n    final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      runner.submit(\n          new MultiSearcherCallableWithSort(lock, searchables[i], weight, filter, nDocs, hq, sort, i, starts));\n    }\n    int totalHits = 0;\n    float maxScore = Float.NEGATIVE_INFINITY;\n    for (final TopFieldDocs topFieldDocs : runner) {\n      totalHits += topFieldDocs.totalHits;\n      maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n    }\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = hq.pop();\n\n    return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","sourceOld":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  @Override\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort) throws IOException {\n    if (sort == null) throw new NullPointerException();\n\n    final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n    final Lock lock = new ReentrantLock();\n    @SuppressWarnings(\"unchecked\") final Future<TopFieldDocs>[] searchThreads = new Future[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      searchThreads[i] = executor.submit(\n          new MultiSearcherCallableWithSort(lock, searchables[i], weight, filter, nDocs, hq, sort, i, starts));\n    }\n\n    final CountTotalHits<TopFieldDocs> func = new CountTotalHits<TopFieldDocs>();\n    foreach(func, Arrays.asList(searchThreads));\n\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = hq.pop();\n\n    return new TopFieldDocs(func.totalHits, scoreDocs, hq.getFields(), func.maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":null,"sourceOld":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  @Override\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort) throws IOException {\n    if (sort == null) throw new NullPointerException();\n\n    final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n    final Lock lock = new ReentrantLock();\n    final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      runner.submit(\n          new MultiSearcherCallableWithSort(lock, searchables[i], weight, filter, nDocs, hq, sort, i, starts));\n    }\n    int totalHits = 0;\n    float maxScore = Float.NEGATIVE_INFINITY;\n    for (final TopFieldDocs topFieldDocs : runner) {\n      totalHits += topFieldDocs.totalHits;\n      maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n    }\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = hq.pop();\n\n    return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":null,"sourceOld":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  @Override\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort) throws IOException {\n    if (sort == null) throw new NullPointerException();\n\n    final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n    final Lock lock = new ReentrantLock();\n    final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      runner.submit(\n          new MultiSearcherCallableWithSort(lock, searchables[i], weight, filter, nDocs, hq, sort, i, starts));\n    }\n    int totalHits = 0;\n    float maxScore = Float.NEGATIVE_INFINITY;\n    for (final TopFieldDocs topFieldDocs : runner) {\n      totalHits += topFieldDocs.totalHits;\n      maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n    }\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = hq.pop();\n\n    return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":null,"sourceOld":"  /**\n   * A search implementation allowing sorting which spans a new thread for each\n   * Searchable, waits for each search to complete and merges\n   * the results back together.\n   */\n  @Override\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort) throws IOException {\n    if (sort == null) throw new NullPointerException();\n\n    final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n    final Lock lock = new ReentrantLock();\n    final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n    for (int i = 0; i < searchables.length; i++) { // search each searchable\n      runner.submit(\n          new MultiSearcherCallableWithSort(lock, searchables[i], weight, filter, nDocs, hq, sort, i, starts));\n    }\n    int totalHits = 0;\n    float maxScore = Float.NEGATIVE_INFINITY;\n    for (final TopFieldDocs topFieldDocs : runner) {\n      totalHits += topFieldDocs.totalHits;\n      maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n    }\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = hq.pop();\n\n    return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["0d6aa47ee944540caf43af80e17bbd289b949ae4","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["0d6aa47ee944540caf43af80e17bbd289b949ae4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d6aa47ee944540caf43af80e17bbd289b949ae4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["0d6aa47ee944540caf43af80e17bbd289b949ae4","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0d6aa47ee944540caf43af80e17bbd289b949ae4":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0d6aa47ee944540caf43af80e17bbd289b949ae4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}