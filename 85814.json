{"path":"solr/core/src/test/org/apache/solr/cloud/ConfigSetsAPITest#testConfigSetDeleteWhenInUse().mjava","commits":[{"id":"124b6ffc5800c27aedfa52108f1556d75a865cbd","date":1448387785,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConfigSetsAPITest#testConfigSetDeleteWhenInUse().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConfigSetDeleteWhenInUse() throws Exception {\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setConfigName(\"conf1\");\n    create.setCollectionName(\"test_configset_delete\");\n    create.setNumShards(1);\n    create.process(cloudClient);\n    waitForCollection(cloudClient.getZkStateReader(), \"test_configset_delete\", 1);\n\n    ConfigSetAdminRequest.Delete deleteConfigRequest = new ConfigSetAdminRequest.Delete();\n    deleteConfigRequest.setConfigSetName(\"conf1\");\n    try {\n      deleteConfigRequest.process(cloudClient);\n      fail(\"The config deletion should cause an exception as it's currently being used by a collection.\");\n    } catch (SolrException e) {\n      // Do nothing\n    }\n\n    // Clean up the collection\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"test_configset_delete\");\n    deleteCollectionRequest.process(cloudClient);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebf70dabe6279454c5ff460bdea3f0dc2814a86","date":1463672611,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConfigSetsAPITest#testConfigSetDeleteWhenInUse().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConfigSetsAPITest#testConfigSetDeleteWhenInUse().mjava","sourceNew":"  @Test\n  public void testConfigSetDeleteWhenInUse() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"test_configset_delete\", \"conf1\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    // TODO - check exception response!\n    ConfigSetAdminRequest.Delete deleteConfigRequest = new ConfigSetAdminRequest.Delete();\n    deleteConfigRequest.setConfigSetName(\"conf1\");\n    expectThrows(SolrException.class, () -> {\n      deleteConfigRequest.process(cluster.getSolrClient());\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void testConfigSetDeleteWhenInUse() throws Exception {\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setConfigName(\"conf1\");\n    create.setCollectionName(\"test_configset_delete\");\n    create.setNumShards(1);\n    create.process(cloudClient);\n    waitForCollection(cloudClient.getZkStateReader(), \"test_configset_delete\", 1);\n\n    ConfigSetAdminRequest.Delete deleteConfigRequest = new ConfigSetAdminRequest.Delete();\n    deleteConfigRequest.setConfigSetName(\"conf1\");\n    try {\n      deleteConfigRequest.process(cloudClient);\n      fail(\"The config deletion should cause an exception as it's currently being used by a collection.\");\n    } catch (SolrException e) {\n      // Do nothing\n    }\n\n    // Clean up the collection\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"test_configset_delete\");\n    deleteCollectionRequest.process(cloudClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConfigSetsAPITest#testConfigSetDeleteWhenInUse().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConfigSetsAPITest#testConfigSetDeleteWhenInUse().mjava","sourceNew":"  @Test\n  public void testConfigSetDeleteWhenInUse() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"test_configset_delete\", \"conf1\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    // TODO - check exception response!\n    ConfigSetAdminRequest.Delete deleteConfigRequest = new ConfigSetAdminRequest.Delete();\n    deleteConfigRequest.setConfigSetName(\"conf1\");\n    expectThrows(SolrException.class, () -> {\n      deleteConfigRequest.process(cluster.getSolrClient());\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void testConfigSetDeleteWhenInUse() throws Exception {\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setConfigName(\"conf1\");\n    create.setCollectionName(\"test_configset_delete\");\n    create.setNumShards(1);\n    create.process(cloudClient);\n    waitForCollection(cloudClient.getZkStateReader(), \"test_configset_delete\", 1);\n\n    ConfigSetAdminRequest.Delete deleteConfigRequest = new ConfigSetAdminRequest.Delete();\n    deleteConfigRequest.setConfigSetName(\"conf1\");\n    try {\n      deleteConfigRequest.process(cloudClient);\n      fail(\"The config deletion should cause an exception as it's currently being used by a collection.\");\n    } catch (SolrException e) {\n      // Do nothing\n    }\n\n    // Clean up the collection\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"test_configset_delete\");\n    deleteCollectionRequest.process(cloudClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConfigSetsAPITest#testConfigSetDeleteWhenInUse().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConfigSetsAPITest#testConfigSetDeleteWhenInUse().mjava","sourceNew":"  @Test\n  public void testConfigSetDeleteWhenInUse() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"test_configset_delete\", \"conf1\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    // TODO - check exception response!\n    ConfigSetAdminRequest.Delete deleteConfigRequest = new ConfigSetAdminRequest.Delete();\n    deleteConfigRequest.setConfigSetName(\"conf1\");\n    expectThrows(SolrException.class, () -> {\n      deleteConfigRequest.process(cluster.getSolrClient());\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void testConfigSetDeleteWhenInUse() throws Exception {\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setConfigName(\"conf1\");\n    create.setCollectionName(\"test_configset_delete\");\n    create.setNumShards(1);\n    create.process(cloudClient);\n    waitForCollection(cloudClient.getZkStateReader(), \"test_configset_delete\", 1);\n\n    ConfigSetAdminRequest.Delete deleteConfigRequest = new ConfigSetAdminRequest.Delete();\n    deleteConfigRequest.setConfigSetName(\"conf1\");\n    try {\n      deleteConfigRequest.process(cloudClient);\n      fail(\"The config deletion should cause an exception as it's currently being used by a collection.\");\n    } catch (SolrException e) {\n      // Do nothing\n    }\n\n    // Clean up the collection\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"test_configset_delete\");\n    deleteCollectionRequest.process(cloudClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4fb176991e13ab85dfe62dceeb287dde115745","date":1579630717,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConfigSetsAPITest#testConfigSetDeleteWhenInUse().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConfigSetsAPITest#testConfigSetDeleteWhenInUse().mjava","sourceNew":"  @Test\n  public void testConfigSetDeleteWhenInUse() throws Exception {\n    CollectionAdminRequest.createCollection(\"test_configset_delete\", \"conf1\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    // TODO - check exception response!\n    ConfigSetAdminRequest.Delete deleteConfigRequest = new ConfigSetAdminRequest.Delete();\n    deleteConfigRequest.setConfigSetName(\"conf1\");\n    expectThrows(SolrException.class, () -> {\n      deleteConfigRequest.process(cluster.getSolrClient());\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testConfigSetDeleteWhenInUse() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"test_configset_delete\", \"conf1\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    // TODO - check exception response!\n    ConfigSetAdminRequest.Delete deleteConfigRequest = new ConfigSetAdminRequest.Delete();\n    deleteConfigRequest.setConfigSetName(\"conf1\");\n    expectThrows(SolrException.class, () -> {\n      deleteConfigRequest.process(cluster.getSolrClient());\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"124b6ffc5800c27aedfa52108f1556d75a865cbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["124b6ffc5800c27aedfa52108f1556d75a865cbd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["124b6ffc5800c27aedfa52108f1556d75a865cbd","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["124b6ffc5800c27aedfa52108f1556d75a865cbd","5ebf70dabe6279454c5ff460bdea3f0dc2814a86"]},"commit2Childs":{"124b6ffc5800c27aedfa52108f1556d75a865cbd":["5ebf70dabe6279454c5ff460bdea3f0dc2814a86","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["124b6ffc5800c27aedfa52108f1556d75a865cbd"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["3e4fb176991e13ab85dfe62dceeb287dde115745","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}