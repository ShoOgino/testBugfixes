{"path":"solr/core/src/java/org/apache/solr/handler/export/MultiFieldWriter#write(SortDoc,LeafReader,MapWriter.EntryWriter,int).mjava","commits":[{"id":"a7eb5b8b79759ebbe90a0605a50c666ba0b83789","date":1535046490,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/MultiFieldWriter#write(SortDoc,LeafReader,MapWriter.EntryWriter,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/MultiFieldWriter#write(int,LeafReader,MapWriter.EntryWriter,int).mjava","sourceNew":"  public boolean write(SortDoc sortDoc, LeafReader reader, MapWriter.EntryWriter out, int fieldIndex) throws IOException {\n    if (this.fieldType.isPointField()) {\n      SortedNumericDocValues vals = DocValues.getSortedNumeric(reader, this.field);\n      if (!vals.advanceExact(sortDoc.docId)) return false;\n      out.put(this.field,\n          (IteratorWriter) w -> {\n            for (int i = 0; i < vals.docValueCount(); i++) {\n              w.add(bitsToValue.apply(vals.nextValue()));\n            }\n          });\n      return true;\n    } else {\n      SortedSetDocValues vals = DocValues.getSortedSet(reader, this.field);\n      if (vals.advance(sortDoc.docId) != sortDoc.docId) return false;\n      out.put(this.field,\n          (IteratorWriter) w -> {\n            long o;\n            while((o = vals.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              BytesRef ref = vals.lookupOrd(o);\n              fieldType.indexedToReadable(ref, cref);\n              IndexableField f = fieldType.createField(schemaField, cref.toString());\n              if (f == null) w.add(cref.toString());\n              else w.add(fieldType.toObject(f));\n            }\n          });\n      return true;\n    }\n\n  }\n\n","sourceOld":"  public boolean write(int docId, LeafReader reader, MapWriter.EntryWriter out, int fieldIndex) throws IOException {\n    if (this.fieldType.isPointField()) {\n      SortedNumericDocValues vals = DocValues.getSortedNumeric(reader, this.field);\n      if (!vals.advanceExact(docId)) return false;\n      out.put(this.field,\n          (IteratorWriter) w -> {\n            for (int i = 0; i < vals.docValueCount(); i++) {\n              w.add(bitsToValue.apply(vals.nextValue()));\n            }\n          });\n      return true;\n    } else {\n      SortedSetDocValues vals = DocValues.getSortedSet(reader, this.field);\n      if (vals.advance(docId) != docId) return false;\n      out.put(this.field,\n          (IteratorWriter) w -> {\n            long o;\n            while((o = vals.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              BytesRef ref = vals.lookupOrd(o);\n              fieldType.indexedToReadable(ref, cref);\n              IndexableField f = fieldType.createField(schemaField, cref.toString());\n              if (f == null) w.add(cref.toString());\n              else w.add(fieldType.toObject(f));\n            }\n          });\n      return true;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95904004e26fe5b84dcda2fa112ebf7cc9721a60","date":1560149781,"type":3,"author":"Tim Underwood","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/MultiFieldWriter#write(SortDoc,LeafReader,MapWriter.EntryWriter,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/MultiFieldWriter#write(SortDoc,LeafReader,MapWriter.EntryWriter,int).mjava","sourceNew":"  public boolean write(SortDoc sortDoc, LeafReader reader, MapWriter.EntryWriter out, int fieldIndex) throws IOException {\n    if (this.fieldType.isPointField()) {\n      SortedNumericDocValues vals = DocValues.getSortedNumeric(reader, this.field);\n      if (!vals.advanceExact(sortDoc.docId)) return false;\n      out.put(this.field,\n          (IteratorWriter) w -> {\n            for (int i = 0, count = vals.docValueCount(); i < count; i++) {\n              w.add(bitsToValue.apply(vals.nextValue()));\n            }\n          });\n      return true;\n    } else {\n      SortedSetDocValues vals = DocValues.getSortedSet(reader, this.field);\n      if (vals.advance(sortDoc.docId) != sortDoc.docId) return false;\n      out.put(this.field,\n          (IteratorWriter) w -> {\n            long o;\n            while((o = vals.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              BytesRef ref = vals.lookupOrd(o);\n              fieldType.indexedToReadable(ref, cref);\n              IndexableField f = fieldType.createField(schemaField, cref.toString());\n              if (f == null) w.add(cref.toString());\n              else w.add(fieldType.toObject(f));\n            }\n          });\n      return true;\n    }\n\n  }\n\n","sourceOld":"  public boolean write(SortDoc sortDoc, LeafReader reader, MapWriter.EntryWriter out, int fieldIndex) throws IOException {\n    if (this.fieldType.isPointField()) {\n      SortedNumericDocValues vals = DocValues.getSortedNumeric(reader, this.field);\n      if (!vals.advanceExact(sortDoc.docId)) return false;\n      out.put(this.field,\n          (IteratorWriter) w -> {\n            for (int i = 0; i < vals.docValueCount(); i++) {\n              w.add(bitsToValue.apply(vals.nextValue()));\n            }\n          });\n      return true;\n    } else {\n      SortedSetDocValues vals = DocValues.getSortedSet(reader, this.field);\n      if (vals.advance(sortDoc.docId) != sortDoc.docId) return false;\n      out.put(this.field,\n          (IteratorWriter) w -> {\n            long o;\n            while((o = vals.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              BytesRef ref = vals.lookupOrd(o);\n              fieldType.indexedToReadable(ref, cref);\n              IndexableField f = fieldType.createField(schemaField, cref.toString());\n              if (f == null) w.add(cref.toString());\n              else w.add(fieldType.toObject(f));\n            }\n          });\n      return true;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a7eb5b8b79759ebbe90a0605a50c666ba0b83789":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"95904004e26fe5b84dcda2fa112ebf7cc9721a60":["a7eb5b8b79759ebbe90a0605a50c666ba0b83789"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95904004e26fe5b84dcda2fa112ebf7cc9721a60"]},"commit2Childs":{"a7eb5b8b79759ebbe90a0605a50c666ba0b83789":["95904004e26fe5b84dcda2fa112ebf7cc9721a60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7eb5b8b79759ebbe90a0605a50c666ba0b83789"],"95904004e26fe5b84dcda2fa112ebf7cc9721a60":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}