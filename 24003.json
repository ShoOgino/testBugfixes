{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map boosts = new HashMap();\n    boosts.put(\"b\", new Float(5));\n    boosts.put(\"t\", new Float(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new StandardAnalyzer());\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map boosts = new HashMap();\n    boosts.put(\"b\", new Float(5));\n    boosts.put(\"t\", new Float(10));\n    String[] fields = { \"b\", \"t\" };\n    OriginalQueryParserHelper mfqp = new OriginalQueryParserHelper();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new StandardAnalyzer());\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map boosts = new HashMap();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new StandardAnalyzer());\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map boosts = new HashMap();\n    boosts.put(\"b\", new Float(5));\n    boosts.put(\"t\", new Float(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new StandardAnalyzer());\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map boosts = new HashMap();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map boosts = new HashMap();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new StandardAnalyzer());\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7848880b3c06f09f0f3ac50d0854b16efb0b815e","date":1260006234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map boosts = new HashMap();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":["75ada11c0f0dd875dcc4aa01726097b8a4561876"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["e8a848e758754282137f42bf85793c278e250390"],"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["6bcde5e3f23911110baa101ed062b544162825b5"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"e8a848e758754282137f42bf85793c278e250390":["6bcde5e3f23911110baa101ed062b544162825b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}