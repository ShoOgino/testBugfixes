{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, idx);\n      return result;\n    }\n\n","sourceOld":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, idx);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","date":1342645458,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer != null) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, idx);\n      return result;\n    }\n\n","sourceOld":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, idx);\n      return result;\n    }\n\n","bugFix":["0a9900b2c2df4909dc735d4042e21e453057db47"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer != null) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, idx);\n      return result;\n    }\n\n","sourceOld":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, idx);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer != null) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, idx);\n      return result;\n    }\n\n","sourceOld":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, idx);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56374313ec4613df1f728772dedcff8bb3cd419d","date":1382027245,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      List<Scorer> scorers = new ArrayList<Scorer>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      }\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers.toArray(new Scorer[scorers.size()]));\n      return result;\n    }\n\n","sourceOld":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer != null) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, idx);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":["a74e723ad6f1491f36039f9fe6af13a530f8135d","a74e723ad6f1491f36039f9fe6af13a530f8135d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      List<Scorer> scorers = new ArrayList<Scorer>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, acceptDocs);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      }\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers.toArray(new Scorer[scorers.size()]));\n      return result;\n    }\n\n","sourceOld":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      List<Scorer> scorers = new ArrayList<Scorer>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      }\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers.toArray(new Scorer[scorers.size()]));\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      List<Scorer> scorers = new ArrayList<Scorer>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, acceptDocs);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      }\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers.toArray(new Scorer[scorers.size()]));\n      return result;\n    }\n\n","sourceOld":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      List<Scorer> scorers = new ArrayList<Scorer>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      }\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers.toArray(new Scorer[scorers.size()]));\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["56374313ec4613df1f728772dedcff8bb3cd419d"],"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["56374313ec4613df1f728772dedcff8bb3cd419d","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"56374313ec4613df1f728772dedcff8bb3cd419d":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acf00221f44c5f08ccea014f2492b53af15ecd66"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","56374313ec4613df1f728772dedcff8bb3cd419d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["aba371508186796cc6151d8223a5b4e16d02e26e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56374313ec4613df1f728772dedcff8bb3cd419d":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}