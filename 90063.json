{"path":"lucene/core/src/test/org/apache/lucene/util/TestSparseFixedBitSet#copyOf(BitSet,int).mjava","commits":[{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSparseFixedBitSet#copyOf(BitSet,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SparseFixedBitSet copyOf(BitSet bs, int length) throws IOException {\n    final SparseFixedBitSet set = new SparseFixedBitSet(length);\n    // SparseFixedBitSet can be sensitive to the order of insertion so\n    // randomize insertion a bit\n    List<Integer> buffer = new ArrayList<>();\n    for (int doc = bs.nextSetBit(0); doc != -1; doc = bs.nextSetBit(doc + 1)) {\n      buffer.add(doc);\n      if (buffer.size() >= 100000) {\n        Collections.shuffle(buffer);\n        for (int i : buffer) {\n          set.set(i);\n        }\n        buffer.clear();\n      }\n    }\n    Collections.shuffle(buffer);\n    for (int i : buffer) {\n      set.set(i);\n    }\n    return set;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["103857ec20f79f31c7a00310a91ed001b9a6ef17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSparseFixedBitSet#copyOf(BitSet,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SparseFixedBitSet copyOf(BitSet bs, int length) throws IOException {\n    final SparseFixedBitSet set = new SparseFixedBitSet(length);\n    // SparseFixedBitSet can be sensitive to the order of insertion so\n    // randomize insertion a bit\n    List<Integer> buffer = new ArrayList<>();\n    for (int doc = bs.nextSetBit(0); doc != -1; doc = bs.nextSetBit(doc + 1)) {\n      buffer.add(doc);\n      if (buffer.size() >= 100000) {\n        Collections.shuffle(buffer);\n        for (int i : buffer) {\n          set.set(i);\n        }\n        buffer.clear();\n      }\n    }\n    Collections.shuffle(buffer);\n    for (int i : buffer) {\n      set.set(i);\n    }\n    return set;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"103857ec20f79f31c7a00310a91ed001b9a6ef17","date":1412698959,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSparseFixedBitSet#copyOf(BitSet,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestSparseFixedBitSet#copyOf(BitSet,int).mjava","sourceNew":"  @Override\n  public SparseFixedBitSet copyOf(BitSet bs, int length) throws IOException {\n    final SparseFixedBitSet set = new SparseFixedBitSet(length);\n    // SparseFixedBitSet can be sensitive to the order of insertion so\n    // randomize insertion a bit\n    List<Integer> buffer = new ArrayList<>();\n    for (int doc = bs.nextSetBit(0); doc != -1; doc = bs.nextSetBit(doc + 1)) {\n      buffer.add(doc);\n      if (buffer.size() >= 100000) {\n        Collections.shuffle(buffer, random());\n        for (int i : buffer) {\n          set.set(i);\n        }\n        buffer.clear();\n      }\n    }\n    Collections.shuffle(buffer, random());\n    for (int i : buffer) {\n      set.set(i);\n    }\n    return set;\n  }\n\n","sourceOld":"  @Override\n  public SparseFixedBitSet copyOf(BitSet bs, int length) throws IOException {\n    final SparseFixedBitSet set = new SparseFixedBitSet(length);\n    // SparseFixedBitSet can be sensitive to the order of insertion so\n    // randomize insertion a bit\n    List<Integer> buffer = new ArrayList<>();\n    for (int doc = bs.nextSetBit(0); doc != -1; doc = bs.nextSetBit(doc + 1)) {\n      buffer.add(doc);\n      if (buffer.size() >= 100000) {\n        Collections.shuffle(buffer);\n        for (int i : buffer) {\n          set.set(i);\n        }\n        buffer.clear();\n      }\n    }\n    Collections.shuffle(buffer);\n    for (int i : buffer) {\n      set.set(i);\n    }\n    return set;\n  }\n\n","bugFix":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSparseFixedBitSet#copyOf(BitSet,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestSparseFixedBitSet#copyOf(BitSet,int).mjava","sourceNew":"  @Override\n  public SparseFixedBitSet copyOf(BitSet bs, int length) throws IOException {\n    final SparseFixedBitSet set = new SparseFixedBitSet(length);\n    // SparseFixedBitSet can be sensitive to the order of insertion so\n    // randomize insertion a bit\n    List<Integer> buffer = new ArrayList<>();\n    for (int doc = bs.nextSetBit(0); doc != -1; doc = bs.nextSetBit(doc + 1)) {\n      buffer.add(doc);\n      if (buffer.size() >= 100000) {\n        Collections.shuffle(buffer, random());\n        for (int i : buffer) {\n          set.set(i);\n        }\n        buffer.clear();\n      }\n    }\n    Collections.shuffle(buffer, random());\n    for (int i : buffer) {\n      set.set(i);\n    }\n    return set;\n  }\n\n","sourceOld":"  @Override\n  public SparseFixedBitSet copyOf(BitSet bs, int length) throws IOException {\n    final SparseFixedBitSet set = new SparseFixedBitSet(length);\n    // SparseFixedBitSet can be sensitive to the order of insertion so\n    // randomize insertion a bit\n    List<Integer> buffer = new ArrayList<>();\n    for (int doc = bs.nextSetBit(0); doc != -1; doc = bs.nextSetBit(doc + 1)) {\n      buffer.add(doc);\n      if (buffer.size() >= 100000) {\n        Collections.shuffle(buffer);\n        for (int i : buffer) {\n          set.set(i);\n        }\n        buffer.clear();\n      }\n    }\n    Collections.shuffle(buffer);\n    for (int i : buffer) {\n      set.set(i);\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSparseFixedBitSet#copyOf(BitSet,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestSparseFixedBitSet#copyOf(BitSet,int).mjava","sourceNew":"  @Override\n  public SparseFixedBitDocIdSet copyOf(BitSet bs, int length) throws IOException {\n    final SparseFixedBitSet set = new SparseFixedBitSet(length);\n    // SparseFixedBitSet can be sensitive to the order of insertion so\n    // randomize insertion a bit\n    List<Integer> buffer = new ArrayList<>();\n    for (int doc = bs.nextSetBit(0); doc != -1; doc = bs.nextSetBit(doc + 1)) {\n      buffer.add(doc);\n      if (buffer.size() >= 100000) {\n        Collections.shuffle(buffer, random());\n        for (int i : buffer) {\n          set.set(i);\n        }\n        buffer.clear();\n      }\n    }\n    Collections.shuffle(buffer, random());\n    for (int i : buffer) {\n      set.set(i);\n    }\n    return new SparseFixedBitDocIdSet(set, set.approximateCardinality());\n  }\n\n","sourceOld":"  @Override\n  public SparseFixedBitSet copyOf(BitSet bs, int length) throws IOException {\n    final SparseFixedBitSet set = new SparseFixedBitSet(length);\n    // SparseFixedBitSet can be sensitive to the order of insertion so\n    // randomize insertion a bit\n    List<Integer> buffer = new ArrayList<>();\n    for (int doc = bs.nextSetBit(0); doc != -1; doc = bs.nextSetBit(doc + 1)) {\n      buffer.add(doc);\n      if (buffer.size() >= 100000) {\n        Collections.shuffle(buffer, random());\n        for (int i : buffer) {\n          set.set(i);\n        }\n        buffer.clear();\n      }\n    }\n    Collections.shuffle(buffer, random());\n    for (int i : buffer) {\n      set.set(i);\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSparseFixedBitSet#copyOf(BitSet,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestSparseFixedBitSet#copyOf(BitSet,int).mjava","sourceNew":"  @Override\n  public SparseFixedBitSet copyOf(BitSet bs, int length) throws IOException {\n    final SparseFixedBitSet set = new SparseFixedBitSet(length);\n    for (int doc = bs.nextSetBit(0); doc != DocIdSetIterator.NO_MORE_DOCS; doc = doc + 1 >= length ? DocIdSetIterator.NO_MORE_DOCS : bs.nextSetBit(doc + 1)) {\n      set.set(doc);\n    }\n    return set;\n  }\n\n","sourceOld":"  @Override\n  public SparseFixedBitDocIdSet copyOf(BitSet bs, int length) throws IOException {\n    final SparseFixedBitSet set = new SparseFixedBitSet(length);\n    // SparseFixedBitSet can be sensitive to the order of insertion so\n    // randomize insertion a bit\n    List<Integer> buffer = new ArrayList<>();\n    for (int doc = bs.nextSetBit(0); doc != -1; doc = bs.nextSetBit(doc + 1)) {\n      buffer.add(doc);\n      if (buffer.size() >= 100000) {\n        Collections.shuffle(buffer, random());\n        for (int i : buffer) {\n          set.set(i);\n        }\n        buffer.clear();\n      }\n    }\n    Collections.shuffle(buffer, random());\n    for (int i : buffer) {\n      set.set(i);\n    }\n    return new SparseFixedBitDocIdSet(set, set.approximateCardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["d9a47902d6207303f5ed3e7aaca62ca33433af66","103857ec20f79f31c7a00310a91ed001b9a6ef17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"103857ec20f79f31c7a00310a91ed001b9a6ef17":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"80c55596a764e2d397e982828e75fcac5ce430a0":["103857ec20f79f31c7a00310a91ed001b9a6ef17"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["55980207f1977bd1463465de1659b821347e2fa8"],"103857ec20f79f31c7a00310a91ed001b9a6ef17":["55980207f1977bd1463465de1659b821347e2fa8","80c55596a764e2d397e982828e75fcac5ce430a0"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["103857ec20f79f31c7a00310a91ed001b9a6ef17","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}