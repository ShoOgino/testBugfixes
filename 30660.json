{"path":"solr/core/src/test/org/apache/solr/core/TestSolrDiscoveryProperties#checkSolrProperties(CoreContainer,String...).mjava","commits":[{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrDiscoveryProperties#checkSolrProperties(CoreContainer,String...).mjava","pathOld":"/dev/null","sourceNew":"  // Insure that the solr.properties is as it should be after persisting _and_, in some cases, different than\n  // what's in memory\n  void checkSolrProperties(CoreContainer cc, String... checkMemPairs) throws Exception {\n    Properties orig = new Properties();\n    orig.load(new StringReader(SOLR_PROPERTIES));\n\n    Properties curr = cc.getContainerProperties();\n\n    Properties persisted = new Properties();\n    persisted.load(new FileInputStream(new File(solrHomeDirectory, SolrProperties.SOLR_PROPERTIES_FILE)));\n\n    assertEquals(\"Persisted and original should be the same size\", orig.size(), persisted.size());\n\n    for (String prop : orig.stringPropertyNames()) {\n      assertEquals(\"Values of original should match current\", orig.getProperty(prop), persisted.getProperty(prop));\n    }\n\n    Properties specialProps = new Properties();\n    for (String special : checkMemPairs) {\n      String[] pair = special.split(\"=\");\n      specialProps.put(pair[0], pair[1]);\n    }\n    // OK, current should match original except if the property is \"special\"\n    for (String prop : curr.stringPropertyNames()) {\n      String val = specialProps.getProperty(prop);\n      if (val != null) { // Compare curr and val\n        assertEquals(\"Modified property should be in current container properties\", val, curr.getProperty(prop));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f932f4f1026b6902f7a69ce428340678e26a6a0","date":1362349021,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrDiscoveryProperties#checkSolrProperties(CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrDiscoveryProperties#checkSolrProperties(CoreContainer,String...).mjava","sourceNew":"  // Insure that the solr.properties is as it should be after persisting _and_, in some cases, different than\n  // what's in memory\n  void checkSolrProperties(CoreContainer cc, String... checkMemPairs) throws Exception {\n    Properties orig = new Properties();\n    orig.load(new StringReader(SOLR_PROPERTIES));\n\n    Properties curr = cc.getContainerProperties();\n\n    Properties persisted = new Properties();\n    FileInputStream in = new FileInputStream(new File(solrHomeDirectory, SolrProperties.SOLR_PROPERTIES_FILE));\n    try {\n      persisted.load(in);\n    } finally {\n      in.close();\n    }\n\n    assertEquals(\"Persisted and original should be the same size\", orig.size(), persisted.size());\n\n    for (String prop : orig.stringPropertyNames()) {\n      assertEquals(\"Values of original should match current\", orig.getProperty(prop), persisted.getProperty(prop));\n    }\n\n    Properties specialProps = new Properties();\n    for (String special : checkMemPairs) {\n      String[] pair = special.split(\"=\");\n      specialProps.put(pair[0], pair[1]);\n    }\n    // OK, current should match original except if the property is \"special\"\n    for (String prop : curr.stringPropertyNames()) {\n      String val = specialProps.getProperty(prop);\n      if (val != null) { // Compare curr and val\n        assertEquals(\"Modified property should be in current container properties\", val, curr.getProperty(prop));\n      }\n    }\n  }\n\n","sourceOld":"  // Insure that the solr.properties is as it should be after persisting _and_, in some cases, different than\n  // what's in memory\n  void checkSolrProperties(CoreContainer cc, String... checkMemPairs) throws Exception {\n    Properties orig = new Properties();\n    orig.load(new StringReader(SOLR_PROPERTIES));\n\n    Properties curr = cc.getContainerProperties();\n\n    Properties persisted = new Properties();\n    persisted.load(new FileInputStream(new File(solrHomeDirectory, SolrProperties.SOLR_PROPERTIES_FILE)));\n\n    assertEquals(\"Persisted and original should be the same size\", orig.size(), persisted.size());\n\n    for (String prop : orig.stringPropertyNames()) {\n      assertEquals(\"Values of original should match current\", orig.getProperty(prop), persisted.getProperty(prop));\n    }\n\n    Properties specialProps = new Properties();\n    for (String special : checkMemPairs) {\n      String[] pair = special.split(\"=\");\n      specialProps.put(pair[0], pair[1]);\n    }\n    // OK, current should match original except if the property is \"special\"\n    for (String prop : curr.stringPropertyNames()) {\n      String val = specialProps.getProperty(prop);\n      if (val != null) { // Compare curr and val\n        assertEquals(\"Modified property should be in current container properties\", val, curr.getProperty(prop));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrDiscoveryProperties#checkSolrProperties(CoreContainer,String...).mjava","sourceNew":null,"sourceOld":"  // Insure that the solr.properties is as it should be after persisting _and_, in some cases, different than\n  // what's in memory\n  void checkSolrProperties(CoreContainer cc, String... checkMemPairs) throws Exception {\n    Properties orig = new Properties();\n    orig.load(new StringReader(SOLR_PROPERTIES));\n\n    Properties curr = cc.getContainerProperties();\n\n    Properties persisted = new Properties();\n    FileInputStream in = new FileInputStream(new File(solrHomeDirectory, SolrProperties.SOLR_PROPERTIES_FILE));\n    try {\n      persisted.load(in);\n    } finally {\n      in.close();\n    }\n\n    assertEquals(\"Persisted and original should be the same size\", orig.size(), persisted.size());\n\n    for (String prop : orig.stringPropertyNames()) {\n      assertEquals(\"Values of original should match current\", orig.getProperty(prop), persisted.getProperty(prop));\n    }\n\n    Properties specialProps = new Properties();\n    for (String special : checkMemPairs) {\n      String[] pair = special.split(\"=\");\n      specialProps.put(pair[0], pair[1]);\n    }\n    // OK, current should match original except if the property is \"special\"\n    for (String prop : curr.stringPropertyNames()) {\n      String val = specialProps.getProperty(prop);\n      if (val != null) { // Compare curr and val\n        assertEquals(\"Modified property should be in current container properties\", val, curr.getProperty(prop));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["4f932f4f1026b6902f7a69ce428340678e26a6a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f932f4f1026b6902f7a69ce428340678e26a6a0":["a837c064b67fa63a9394136e31218b908cdcf783"],"a837c064b67fa63a9394136e31218b908cdcf783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"]},"commit2Childs":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a837c064b67fa63a9394136e31218b908cdcf783"],"4f932f4f1026b6902f7a69ce428340678e26a6a0":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"a837c064b67fa63a9394136e31218b908cdcf783":["4f932f4f1026b6902f7a69ce428340678e26a6a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}