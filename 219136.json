{"path":"solr/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","pathOld":"/dev/null","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (index != null) sz += index.length * 4;\n    if (tnums!=null) {\n      for (byte[] arr : tnums)\n        if (arr != null) sz += arr.length;\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    sz += ti.memSize();\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":null,"sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (index != null) sz += index.length * 4;\n    if (tnums!=null) {\n      for (byte[] arr : tnums)\n        if (arr != null) sz += arr.length;\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    sz += ti.memSize();\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","pathOld":"src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (index != null) sz += index.length * 4;\n    if (tnums!=null) {\n      for (byte[] arr : tnums)\n        if (arr != null) sz += arr.length;\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    sz += ti.memSize();\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (index != null) sz += index.length * 4;\n    if (tnums!=null) {\n      for (byte[] arr : tnums)\n        if (arr != null) sz += arr.length;\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    sz += ti.memSize();\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","pathOld":"/dev/null","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (index != null) sz += index.length * 4;\n    if (tnums!=null) {\n      for (byte[] arr : tnums)\n        if (arr != null) sz += arr.length;\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    sz += ti.memSize();\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95ae76773bf2b95987d5f9c8f566ab3738953fb4","date":1301758351,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (index != null) sz += index.length * 4;\n    if (tnums!=null) {\n      for (byte[] arr : tnums)\n        if (arr != null) sz += arr.length;\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    sz += ti.memSize();\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (index != null) sz += index.length * 4;\n    if (tnums!=null) {\n      for (byte[] arr : tnums)\n        if (arr != null) sz += arr.length;\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    sz += ti.memSize();\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (index != null) sz += index.length * 4;\n    if (tnums!=null) {\n      for (byte[] arr : tnums)\n        if (arr != null) sz += arr.length;\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    sz += ti.memSize();\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (index != null) sz += index.length * 4;\n    if (tnums!=null) {\n      for (byte[] arr : tnums)\n        if (arr != null) sz += arr.length;\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    sz += ti.memSize();\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#memSize().mjava","sourceNew":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","sourceOld":"  public long memSize() {\n    // can cache the mem size since it shouldn't change\n    if (memsz!=0) return memsz;\n    long sz = super.ramUsedInBytes();\n    sz += 8*8 + 32; // local fields\n    sz += bigTerms.size() * 64;\n    for (TopTerm tt : bigTerms.values()) {\n      sz += tt.memSize();\n    }\n    if (maxTermCounts != null)\n      sz += maxTermCounts.length * 4;\n    if (indexedTermsArray != null) {\n      // assume 8 byte references?\n      sz += 8+8+8+8+(indexedTermsArray.length<<3)+sizeOfIndexedStrings;\n    }\n    memsz = sz;\n    return sz;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["95ae76773bf2b95987d5f9c8f566ab3738953fb4","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["1da8d55113b689b06716246649de6f62430f15c0","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1da8d55113b689b06716246649de6f62430f15c0","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["1da8d55113b689b06716246649de6f62430f15c0"],"45669a651c970812a680841b97a77cce06af559f":["1da8d55113b689b06716246649de6f62430f15c0","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"1da8d55113b689b06716246649de6f62430f15c0":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","95ae76773bf2b95987d5f9c8f566ab3738953fb4","45669a651c970812a680841b97a77cce06af559f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","a258fbb26824fd104ed795e5d9033d2d040049ee","45669a651c970812a680841b97a77cce06af559f"],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}