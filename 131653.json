{"path":"solr/src/java/org/apache/solr/search/QueryParsing#parseLocalParams(String,int,Map[String,String],SolrParams,String,char).mjava","commits":[{"id":"e098410a7e7c5f7e4db2c961cacad59fe4927a3e","date":1307550873,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseLocalParams(String,int,Map[String,String],SolrParams,String,char).mjava","pathOld":"/dev/null","sourceNew":"  public static int parseLocalParams(String txt, int start, Map<String, String> target, SolrParams params, String startString, char endChar) throws ParseException {\n    int off = start;\n    if (!txt.startsWith(startString, off)) return start;\n    StrParser p = new StrParser(txt, start, txt.length());\n    p.pos += startString.length(); // skip over \"{!\"\n\n    for (; ;) {\n      /*\n      if (p.pos>=txt.length()) {\n        throw new ParseException(\"Missing '}' parsing local params '\" + txt + '\"');\n      }\n      */\n      char ch = p.peek();\n      if (ch == endChar) {\n        return p.pos + 1;\n      }\n\n      String id = p.getId();\n      if (id.length() == 0) {\n        throw new ParseException(\"Expected ending character '\" + endChar + \"' parsing local params '\" + txt + '\"');\n\n      }\n      String val = null;\n\n      ch = p.peek();\n      if (ch != '=') {\n        // single word... treat {!func} as type=func for easy lookup\n        val = id;\n        id = TYPE;\n      } else {\n        // saw equals, so read value\n        p.pos++;\n        ch = p.peek();\n        boolean deref = false;\n        if (ch == '$') {\n          p.pos++;\n          ch = p.peek();\n          deref = true;  // dereference whatever value is read by treating it as a variable name\n        }\n\n        if (ch == '\\\"' || ch == '\\'') {\n          val = p.getQuotedString();\n        } else {\n          // read unquoted literal ended by whitespace or endChar (normally '}')\n          // there is no escaping.\n          int valStart = p.pos;\n          for (; ;) {\n            if (p.pos >= p.end) {\n              throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + txt + \"'\");\n            }\n            char c = p.val.charAt(p.pos);\n            if (c == endChar || Character.isWhitespace(c)) {\n              val = p.val.substring(valStart, p.pos);\n              break;\n            }\n            p.pos++;\n          }\n        }\n\n        if (deref) {  // dereference parameter\n          if (params != null) {\n            val = params.get(val);\n          }\n        }\n      }\n      if (target != null) target.put(id, val);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseLocalParams(String,int,Map[String,String],SolrParams,String,char).mjava","pathOld":"/dev/null","sourceNew":"  public static int parseLocalParams(String txt, int start, Map<String, String> target, SolrParams params, String startString, char endChar) throws ParseException {\n    int off = start;\n    if (!txt.startsWith(startString, off)) return start;\n    StrParser p = new StrParser(txt, start, txt.length());\n    p.pos += startString.length(); // skip over \"{!\"\n\n    for (; ;) {\n      /*\n      if (p.pos>=txt.length()) {\n        throw new ParseException(\"Missing '}' parsing local params '\" + txt + '\"');\n      }\n      */\n      char ch = p.peek();\n      if (ch == endChar) {\n        return p.pos + 1;\n      }\n\n      String id = p.getId();\n      if (id.length() == 0) {\n        throw new ParseException(\"Expected ending character '\" + endChar + \"' parsing local params '\" + txt + '\"');\n\n      }\n      String val = null;\n\n      ch = p.peek();\n      if (ch != '=') {\n        // single word... treat {!func} as type=func for easy lookup\n        val = id;\n        id = TYPE;\n      } else {\n        // saw equals, so read value\n        p.pos++;\n        ch = p.peek();\n        boolean deref = false;\n        if (ch == '$') {\n          p.pos++;\n          ch = p.peek();\n          deref = true;  // dereference whatever value is read by treating it as a variable name\n        }\n\n        if (ch == '\\\"' || ch == '\\'') {\n          val = p.getQuotedString();\n        } else {\n          // read unquoted literal ended by whitespace or endChar (normally '}')\n          // there is no escaping.\n          int valStart = p.pos;\n          for (; ;) {\n            if (p.pos >= p.end) {\n              throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + txt + \"'\");\n            }\n            char c = p.val.charAt(p.pos);\n            if (c == endChar || Character.isWhitespace(c)) {\n              val = p.val.substring(valStart, p.pos);\n              break;\n            }\n            p.pos++;\n          }\n        }\n\n        if (deref) {  // dereference parameter\n          if (params != null) {\n            val = params.get(val);\n          }\n        }\n      }\n      if (target != null) target.put(id, val);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseLocalParams(String,int,Map[String,String],SolrParams,String,char).mjava","pathOld":"/dev/null","sourceNew":"  public static int parseLocalParams(String txt, int start, Map<String, String> target, SolrParams params, String startString, char endChar) throws ParseException {\n    int off = start;\n    if (!txt.startsWith(startString, off)) return start;\n    StrParser p = new StrParser(txt, start, txt.length());\n    p.pos += startString.length(); // skip over \"{!\"\n\n    for (; ;) {\n      /*\n      if (p.pos>=txt.length()) {\n        throw new ParseException(\"Missing '}' parsing local params '\" + txt + '\"');\n      }\n      */\n      char ch = p.peek();\n      if (ch == endChar) {\n        return p.pos + 1;\n      }\n\n      String id = p.getId();\n      if (id.length() == 0) {\n        throw new ParseException(\"Expected ending character '\" + endChar + \"' parsing local params '\" + txt + '\"');\n\n      }\n      String val = null;\n\n      ch = p.peek();\n      if (ch != '=') {\n        // single word... treat {!func} as type=func for easy lookup\n        val = id;\n        id = TYPE;\n      } else {\n        // saw equals, so read value\n        p.pos++;\n        ch = p.peek();\n        boolean deref = false;\n        if (ch == '$') {\n          p.pos++;\n          ch = p.peek();\n          deref = true;  // dereference whatever value is read by treating it as a variable name\n        }\n\n        if (ch == '\\\"' || ch == '\\'') {\n          val = p.getQuotedString();\n        } else {\n          // read unquoted literal ended by whitespace or endChar (normally '}')\n          // there is no escaping.\n          int valStart = p.pos;\n          for (; ;) {\n            if (p.pos >= p.end) {\n              throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + txt + \"'\");\n            }\n            char c = p.val.charAt(p.pos);\n            if (c == endChar || Character.isWhitespace(c)) {\n              val = p.val.substring(valStart, p.pos);\n              break;\n            }\n            p.pos++;\n          }\n        }\n\n        if (deref) {  // dereference parameter\n          if (params != null) {\n            val = params.get(val);\n          }\n        }\n      }\n      if (target != null) target.put(id, val);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseLocalParams(String,int,Map[String,String],SolrParams,String,char).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseLocalParams(String,int,Map[String,String],SolrParams,String,char).mjava","sourceNew":"  public static int parseLocalParams(String txt, int start, Map<String, String> target, SolrParams params, String startString, char endChar) throws ParseException {\n    int off = start;\n    if (!txt.startsWith(startString, off)) return start;\n    StrParser p = new StrParser(txt, start, txt.length());\n    p.pos += startString.length(); // skip over \"{!\"\n\n    for (; ;) {\n      /*\n      if (p.pos>=txt.length()) {\n        throw new ParseException(\"Missing '}' parsing local params '\" + txt + '\"');\n      }\n      */\n      char ch = p.peek();\n      if (ch == endChar) {\n        return p.pos + 1;\n      }\n\n      String id = p.getId();\n      if (id.length() == 0) {\n        throw new ParseException(\"Expected ending character '\" + endChar + \"' parsing local params '\" + txt + '\"');\n\n      }\n      String val = null;\n\n      ch = p.peek();\n      if (ch != '=') {\n        // single word... treat {!func} as type=func for easy lookup\n        val = id;\n        id = TYPE;\n      } else {\n        // saw equals, so read value\n        p.pos++;\n        ch = p.peek();\n        boolean deref = false;\n        if (ch == '$') {\n          p.pos++;\n          ch = p.peek();\n          deref = true;  // dereference whatever value is read by treating it as a variable name\n        }\n\n        if (ch == '\\\"' || ch == '\\'') {\n          val = p.getQuotedString();\n        } else {\n          // read unquoted literal ended by whitespace or endChar (normally '}')\n          // there is no escaping.\n          int valStart = p.pos;\n          for (; ;) {\n            if (p.pos >= p.end) {\n              throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + txt + \"'\");\n            }\n            char c = p.val.charAt(p.pos);\n            if (c == endChar || Character.isWhitespace(c)) {\n              val = p.val.substring(valStart, p.pos);\n              break;\n            }\n            p.pos++;\n          }\n        }\n\n        if (deref) {  // dereference parameter\n          if (params != null) {\n            val = params.get(val);\n          }\n        }\n      }\n      if (target != null) target.put(id, val);\n    }\n  }\n\n","sourceOld":"  public static int parseLocalParams(String txt, int start, Map<String, String> target, SolrParams params, String startString, char endChar) throws ParseException {\n    int off = start;\n    if (!txt.startsWith(startString, off)) return start;\n    StrParser p = new StrParser(txt, start, txt.length());\n    p.pos += startString.length(); // skip over \"{!\"\n\n    for (; ;) {\n      /*\n      if (p.pos>=txt.length()) {\n        throw new ParseException(\"Missing '}' parsing local params '\" + txt + '\"');\n      }\n      */\n      char ch = p.peek();\n      if (ch == endChar) {\n        return p.pos + 1;\n      }\n\n      String id = p.getId();\n      if (id.length() == 0) {\n        throw new ParseException(\"Expected ending character '\" + endChar + \"' parsing local params '\" + txt + '\"');\n\n      }\n      String val = null;\n\n      ch = p.peek();\n      if (ch != '=') {\n        // single word... treat {!func} as type=func for easy lookup\n        val = id;\n        id = TYPE;\n      } else {\n        // saw equals, so read value\n        p.pos++;\n        ch = p.peek();\n        boolean deref = false;\n        if (ch == '$') {\n          p.pos++;\n          ch = p.peek();\n          deref = true;  // dereference whatever value is read by treating it as a variable name\n        }\n\n        if (ch == '\\\"' || ch == '\\'') {\n          val = p.getQuotedString();\n        } else {\n          // read unquoted literal ended by whitespace or endChar (normally '}')\n          // there is no escaping.\n          int valStart = p.pos;\n          for (; ;) {\n            if (p.pos >= p.end) {\n              throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + txt + \"'\");\n            }\n            char c = p.val.charAt(p.pos);\n            if (c == endChar || Character.isWhitespace(c)) {\n              val = p.val.substring(valStart, p.pos);\n              break;\n            }\n            p.pos++;\n          }\n        }\n\n        if (deref) {  // dereference parameter\n          if (params != null) {\n            val = params.get(val);\n          }\n        }\n      }\n      if (target != null) target.put(id, val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseLocalParams(String,int,Map[String,String],SolrParams,String,char).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseLocalParams(String,int,Map[String,String],SolrParams,String,char).mjava","sourceNew":"  public static int parseLocalParams(String txt, int start, Map<String, String> target, SolrParams params, String startString, char endChar) throws ParseException {\n    int off = start;\n    if (!txt.startsWith(startString, off)) return start;\n    StrParser p = new StrParser(txt, start, txt.length());\n    p.pos += startString.length(); // skip over \"{!\"\n\n    for (; ;) {\n      /*\n      if (p.pos>=txt.length()) {\n        throw new ParseException(\"Missing '}' parsing local params '\" + txt + '\"');\n      }\n      */\n      char ch = p.peek();\n      if (ch == endChar) {\n        return p.pos + 1;\n      }\n\n      String id = p.getId();\n      if (id.length() == 0) {\n        throw new ParseException(\"Expected ending character '\" + endChar + \"' parsing local params '\" + txt + '\"');\n\n      }\n      String val = null;\n\n      ch = p.peek();\n      if (ch != '=') {\n        // single word... treat {!func} as type=func for easy lookup\n        val = id;\n        id = TYPE;\n      } else {\n        // saw equals, so read value\n        p.pos++;\n        ch = p.peek();\n        boolean deref = false;\n        if (ch == '$') {\n          p.pos++;\n          ch = p.peek();\n          deref = true;  // dereference whatever value is read by treating it as a variable name\n        }\n\n        if (ch == '\\\"' || ch == '\\'') {\n          val = p.getQuotedString();\n        } else {\n          // read unquoted literal ended by whitespace or endChar (normally '}')\n          // there is no escaping.\n          int valStart = p.pos;\n          for (; ;) {\n            if (p.pos >= p.end) {\n              throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + txt + \"'\");\n            }\n            char c = p.val.charAt(p.pos);\n            if (c == endChar || Character.isWhitespace(c)) {\n              val = p.val.substring(valStart, p.pos);\n              break;\n            }\n            p.pos++;\n          }\n        }\n\n        if (deref) {  // dereference parameter\n          if (params != null) {\n            val = params.get(val);\n          }\n        }\n      }\n      if (target != null) target.put(id, val);\n    }\n  }\n\n","sourceOld":"  public static int parseLocalParams(String txt, int start, Map<String, String> target, SolrParams params, String startString, char endChar) throws ParseException {\n    int off = start;\n    if (!txt.startsWith(startString, off)) return start;\n    StrParser p = new StrParser(txt, start, txt.length());\n    p.pos += startString.length(); // skip over \"{!\"\n\n    for (; ;) {\n      /*\n      if (p.pos>=txt.length()) {\n        throw new ParseException(\"Missing '}' parsing local params '\" + txt + '\"');\n      }\n      */\n      char ch = p.peek();\n      if (ch == endChar) {\n        return p.pos + 1;\n      }\n\n      String id = p.getId();\n      if (id.length() == 0) {\n        throw new ParseException(\"Expected ending character '\" + endChar + \"' parsing local params '\" + txt + '\"');\n\n      }\n      String val = null;\n\n      ch = p.peek();\n      if (ch != '=') {\n        // single word... treat {!func} as type=func for easy lookup\n        val = id;\n        id = TYPE;\n      } else {\n        // saw equals, so read value\n        p.pos++;\n        ch = p.peek();\n        boolean deref = false;\n        if (ch == '$') {\n          p.pos++;\n          ch = p.peek();\n          deref = true;  // dereference whatever value is read by treating it as a variable name\n        }\n\n        if (ch == '\\\"' || ch == '\\'') {\n          val = p.getQuotedString();\n        } else {\n          // read unquoted literal ended by whitespace or endChar (normally '}')\n          // there is no escaping.\n          int valStart = p.pos;\n          for (; ;) {\n            if (p.pos >= p.end) {\n              throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + txt + \"'\");\n            }\n            char c = p.val.charAt(p.pos);\n            if (c == endChar || Character.isWhitespace(c)) {\n              val = p.val.substring(valStart, p.pos);\n              break;\n            }\n            p.pos++;\n          }\n        }\n\n        if (deref) {  // dereference parameter\n          if (params != null) {\n            val = params.get(val);\n          }\n        }\n      }\n      if (target != null) target.put(id, val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseLocalParams(String,int,Map[String,String],SolrParams,String,char).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#parseLocalParams(String,int,Map[String,String],SolrParams,String,char).mjava","sourceNew":"  public static int parseLocalParams(String txt, int start, Map<String, String> target, SolrParams params, String startString, char endChar) throws ParseException {\n    int off = start;\n    if (!txt.startsWith(startString, off)) return start;\n    StrParser p = new StrParser(txt, start, txt.length());\n    p.pos += startString.length(); // skip over \"{!\"\n\n    for (; ;) {\n      /*\n      if (p.pos>=txt.length()) {\n        throw new ParseException(\"Missing '}' parsing local params '\" + txt + '\"');\n      }\n      */\n      char ch = p.peek();\n      if (ch == endChar) {\n        return p.pos + 1;\n      }\n\n      String id = p.getId();\n      if (id.length() == 0) {\n        throw new ParseException(\"Expected ending character '\" + endChar + \"' parsing local params '\" + txt + '\"');\n\n      }\n      String val = null;\n\n      ch = p.peek();\n      if (ch != '=') {\n        // single word... treat {!func} as type=func for easy lookup\n        val = id;\n        id = TYPE;\n      } else {\n        // saw equals, so read value\n        p.pos++;\n        ch = p.peek();\n        boolean deref = false;\n        if (ch == '$') {\n          p.pos++;\n          ch = p.peek();\n          deref = true;  // dereference whatever value is read by treating it as a variable name\n        }\n\n        if (ch == '\\\"' || ch == '\\'') {\n          val = p.getQuotedString();\n        } else {\n          // read unquoted literal ended by whitespace or endChar (normally '}')\n          // there is no escaping.\n          int valStart = p.pos;\n          for (; ;) {\n            if (p.pos >= p.end) {\n              throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + txt + \"'\");\n            }\n            char c = p.val.charAt(p.pos);\n            if (c == endChar || Character.isWhitespace(c)) {\n              val = p.val.substring(valStart, p.pos);\n              break;\n            }\n            p.pos++;\n          }\n        }\n\n        if (deref) {  // dereference parameter\n          if (params != null) {\n            val = params.get(val);\n          }\n        }\n      }\n      if (target != null) target.put(id, val);\n    }\n  }\n\n","sourceOld":"  public static int parseLocalParams(String txt, int start, Map<String, String> target, SolrParams params, String startString, char endChar) throws ParseException {\n    int off = start;\n    if (!txt.startsWith(startString, off)) return start;\n    StrParser p = new StrParser(txt, start, txt.length());\n    p.pos += startString.length(); // skip over \"{!\"\n\n    for (; ;) {\n      /*\n      if (p.pos>=txt.length()) {\n        throw new ParseException(\"Missing '}' parsing local params '\" + txt + '\"');\n      }\n      */\n      char ch = p.peek();\n      if (ch == endChar) {\n        return p.pos + 1;\n      }\n\n      String id = p.getId();\n      if (id.length() == 0) {\n        throw new ParseException(\"Expected ending character '\" + endChar + \"' parsing local params '\" + txt + '\"');\n\n      }\n      String val = null;\n\n      ch = p.peek();\n      if (ch != '=') {\n        // single word... treat {!func} as type=func for easy lookup\n        val = id;\n        id = TYPE;\n      } else {\n        // saw equals, so read value\n        p.pos++;\n        ch = p.peek();\n        boolean deref = false;\n        if (ch == '$') {\n          p.pos++;\n          ch = p.peek();\n          deref = true;  // dereference whatever value is read by treating it as a variable name\n        }\n\n        if (ch == '\\\"' || ch == '\\'') {\n          val = p.getQuotedString();\n        } else {\n          // read unquoted literal ended by whitespace or endChar (normally '}')\n          // there is no escaping.\n          int valStart = p.pos;\n          for (; ;) {\n            if (p.pos >= p.end) {\n              throw new ParseException(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + txt + \"'\");\n            }\n            char c = p.val.charAt(p.pos);\n            if (c == endChar || Character.isWhitespace(c)) {\n              val = p.val.substring(valStart, p.pos);\n              break;\n            }\n            p.pos++;\n          }\n        }\n\n        if (deref) {  // dereference parameter\n          if (params != null) {\n            val = params.get(val);\n          }\n        }\n      }\n      if (target != null) target.put(id, val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e098410a7e7c5f7e4db2c961cacad59fe4927a3e"],"e098410a7e7c5f7e4db2c961cacad59fe4927a3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"c26f00b574427b55127e869b935845554afde1fa":["e098410a7e7c5f7e4db2c961cacad59fe4927a3e","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e098410a7e7c5f7e4db2c961cacad59fe4927a3e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["e098410a7e7c5f7e4db2c961cacad59fe4927a3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"e098410a7e7c5f7e4db2c961cacad59fe4927a3e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c26f00b574427b55127e869b935845554afde1fa","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","e098410a7e7c5f7e4db2c961cacad59fe4927a3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}