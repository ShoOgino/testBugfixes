{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","commits":[{"id":"492bacefe65f87b305a1988c63ff7bb5c8fcef75","date":1271907901,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = new MockRAMDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(sdp));\n    \n    // First commit\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot();\n    \n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release();\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    \n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = new MockRAMDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(sdp));\n    \n    // First commit\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot();\n    \n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release();\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = new MockRAMDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(sdp));\n    \n    // First commit\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot();\n    \n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release();\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3cefb552695b930cefe85eb7880cccdb914be6b","date":1275316631,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = new MockRAMDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(sdp));\n    \n    // First commit\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n    \n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = new MockRAMDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(sdp));\n    \n    // First commit\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot();\n    \n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release();\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = new MockRAMDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(sdp));\n    \n    // First commit\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n    \n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = new MockRAMDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(sdp));\n    \n    // First commit\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n    \n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory(random);\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(sdp));\n    \n    // First commit\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n    \n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = new MockRAMDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(sdp));\n    \n    // First commit\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n    \n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(sdp));\n    \n    // First commit\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n    \n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory(random);\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(sdp));\n    \n    // First commit\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n    \n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(sdp));\n    \n    // First commit\n    Document doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n    \n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(sdp));\n    \n    // First commit\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n    \n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(sdp));\n\n    // First commit\n    Document doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = new MockRAMDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(sdp));\n    \n    // First commit\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n    \n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(sdp));\n    \n    // First commit\n    Document doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n    \n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(sdp));\n    \n    // First commit\n    Document doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n    \n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(sdp));\n\n    // First commit\n    Document doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(sdp));\n\n    // First commit\n    Document doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(sdp));\n\n    // First commit\n    Document doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(sdp));\n    \n    // First commit\n    Document doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n    \n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(sdp));\n\n    // First commit\n    Document doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(sdp));\n    \n    // First commit\n    Document doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n    \n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(sdp));\n\n    // First commit\n    Document doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(sdp));\n    \n    // First commit\n    Document doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n    \n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(sdp));\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(sdp));\n\n    // First commit\n    Document doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e","date":1327848882,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(sdp));\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(sdp));\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(sdp));\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(sdp));\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, IndexReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, IndexReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(sdp));\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(sdp));\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"b3cefb552695b930cefe85eb7880cccdb914be6b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["132903c28af3aa6f67284b78de91c0f0a99488c2","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d572389229127c297dd1fa5ce4758e1cec41e799":["492bacefe65f87b305a1988c63ff7bb5c8fcef75"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f2c5f0cb44df114db4228c8f77861714b5cabaea","962d04139994fce5193143ef35615499a9a96d78"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3cefb552695b930cefe85eb7880cccdb914be6b","132903c28af3aa6f67284b78de91c0f0a99488c2"],"492bacefe65f87b305a1988c63ff7bb5c8fcef75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["1509f151d7692d84fae414b2b799ac06ba60fcb4","f9172d6bebb12f0bba2ebb1756779c2f8948ab7e"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["132903c28af3aa6f67284b78de91c0f0a99488c2","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["b3cefb552695b930cefe85eb7880cccdb914be6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"b3cefb552695b930cefe85eb7880cccdb914be6b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["b3cefb552695b930cefe85eb7880cccdb914be6b"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"962d04139994fce5193143ef35615499a9a96d78":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"492bacefe65f87b305a1988c63ff7bb5c8fcef75":["d572389229127c297dd1fa5ce4758e1cec41e799"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["492bacefe65f87b305a1988c63ff7bb5c8fcef75"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f9172d6bebb12f0bba2ebb1756779c2f8948ab7e","5cab9a86bd67202d20b6adc463008c8e982b070a"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}