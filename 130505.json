{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set[#],int,int,int,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set[#],int,int,int,boolean).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set[#],int,int,int,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.\n   *  \n   * @param input the {@link TokenStream} to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   * @param minWordSize only words longer than this get processed\n   * @param minSubwordSize only subwords longer than this get to the output\n   *        stream\n   * @param maxSubwordSize only subwords shorter than this get to the output\n   *        stream\n   * @param onlyLongestMatch Add only the longest matching subword to the stream\n   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set, int, int, int, boolean)} instead.\n   */\n  @Deprecated\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary, int minWordSize,\n      int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(Version.LUCENE_30, input, dictionary, minWordSize, minSubwordSize, maxSubwordSize,\n        onlyLongestMatch);\n\n    this.hyphenator = hyphenator;\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.\n   *  \n   * @param input the {@link TokenStream} to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   * @param minWordSize only words longer than this get processed\n   * @param minSubwordSize only subwords longer than this get to the output\n   *        stream\n   * @param maxSubwordSize only subwords shorter than this get to the output\n   *        stream\n   * @param onlyLongestMatch Add only the longest matching subword to the stream\n   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set, int, int, int, boolean)} instead.\n   */\n  @Deprecated\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary, int minWordSize,\n      int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(Version.LUCENE_30, input, dictionary, minWordSize, minSubwordSize, maxSubwordSize,\n        onlyLongestMatch);\n\n    this.hyphenator = hyphenator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set[#],int,int,int,boolean).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set[#],int,int,int,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.\n   *  \n   * @param input the {@link TokenStream} to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   * @param minWordSize only words longer than this get processed\n   * @param minSubwordSize only subwords longer than this get to the output\n   *        stream\n   * @param maxSubwordSize only subwords shorter than this get to the output\n   *        stream\n   * @param onlyLongestMatch Add only the longest matching subword to the stream\n   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set, int, int, int, boolean)} instead.\n   */\n  @Deprecated\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary, int minWordSize,\n      int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(Version.LUCENE_30, input, dictionary, minWordSize, minSubwordSize, maxSubwordSize,\n        onlyLongestMatch);\n\n    this.hyphenator = hyphenator;\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.\n   *  \n   * @param input the {@link TokenStream} to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   * @param minWordSize only words longer than this get processed\n   * @param minSubwordSize only subwords longer than this get to the output\n   *        stream\n   * @param maxSubwordSize only subwords shorter than this get to the output\n   *        stream\n   * @param onlyLongestMatch Add only the longest matching subword to the stream\n   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set, int, int, int, boolean)} instead.\n   */\n  @Deprecated\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary, int minWordSize,\n      int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(Version.LUCENE_30, input, dictionary, minWordSize, minSubwordSize, maxSubwordSize,\n        onlyLongestMatch);\n\n    this.hyphenator = hyphenator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}