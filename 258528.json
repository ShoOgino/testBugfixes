{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#asyncRequest(SolrRequest,String,AsyncListener[NamedList[Object]]).mjava","commits":[{"id":"1964c059f45ae1de1877f9f0fe3ca327ea4218e8","date":1594088246,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#asyncRequest(SolrRequest,String,AsyncListener[NamedList[Object]]).mjava","pathOld":"/dev/null","sourceNew":"  public Cancellable asyncRequest(@SuppressWarnings({\"rawtypes\"}) SolrRequest solrRequest, String collection, AsyncListener<NamedList<Object>> asyncListener) {\n    Request req;\n    try {\n      req = makeRequest(solrRequest, collection);\n    } catch (SolrServerException | IOException e) {\n      asyncListener.onFailure(e);\n      return FAILED_MAKING_REQUEST_CANCELLABLE;\n    }\n    final ResponseParser parser = solrRequest.getResponseParser() == null\n        ? this.parser: solrRequest.getResponseParser();\n    req.onRequestQueued(asyncTracker.queuedListener)\n        .onComplete(asyncTracker.completeListener)\n        .send(new InputStreamResponseListener() {\n          @Override\n          public void onHeaders(Response response) {\n            super.onHeaders(response);\n            InputStreamResponseListener listener = this;\n            executor.execute(() -> {\n              InputStream is = listener.getInputStream();\n              assert ObjectReleaseTracker.track(is);\n              try {\n                NamedList<Object> body = processErrorsAndResponse(solrRequest, parser, response, is);\n                asyncListener.onSuccess(body);\n              } catch (RemoteSolrException e) {\n                if (SolrException.getRootCause(e) != CANCELLED_EXCEPTION) {\n                  asyncListener.onFailure(e);\n                }\n              } catch (SolrServerException e) {\n                asyncListener.onFailure(e);\n              }\n            });\n          }\n\n          @Override\n          public void onFailure(Response response, Throwable failure) {\n            super.onFailure(response, failure);\n            if (failure != CANCELLED_EXCEPTION) {\n              asyncListener.onFailure(new SolrServerException(failure.getMessage(), failure));\n            }\n          }\n        });\n    return () -> req.abort(CANCELLED_EXCEPTION);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"]},"commit2Childs":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}