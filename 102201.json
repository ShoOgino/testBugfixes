{"path":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","commits":[{"id":"4e4962d33c7b8f7092842cb4760383123f35092b","date":1185928991,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"/dev/null","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir1();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer());\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.TOKENIZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer());\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.TOKENIZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer());\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer());\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["512366c273bec3211f7d36ef75e58e3d32a06e26"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir1();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.TOKENIZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.TOKENIZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir1();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer());\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.TOKENIZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer());\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.TOKENIZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer());\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer());\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir1();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir1();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.TOKENIZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.TOKENIZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"512366c273bec3211f7d36ef75e58e3d32a06e26","date":1232894323,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir1();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","bugFix":["4e4962d33c7b8f7092842cb4760383123f35092b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"0a046c0c310bc77931fc8441bd920053b607dd14":["512366c273bec3211f7d36ef75e58e3d32a06e26","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["4e4962d33c7b8f7092842cb4760383123f35092b"],"512366c273bec3211f7d36ef75e58e3d32a06e26":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["512366c273bec3211f7d36ef75e58e3d32a06e26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e4962d33c7b8f7092842cb4760383123f35092b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["512366c273bec3211f7d36ef75e58e3d32a06e26"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"512366c273bec3211f7d36ef75e58e3d32a06e26":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e4962d33c7b8f7092842cb4760383123f35092b"],"4e4962d33c7b8f7092842cb4760383123f35092b":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}