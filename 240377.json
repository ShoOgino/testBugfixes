{"path":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private NamedList getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList res = new NamedList();\n    Term t = new Term(field);\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(t.createTerm(internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","sourceNew":null,"sourceOld":"  private NamedList getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList res = new NamedList();\n    Term t = new Term(field);\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(t.createTerm(internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","sourceNew":"  private NamedList getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList res = new NamedList();\n    Term t = new Term(field);\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(t.createTerm(internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":"  private NamedList getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList res = new NamedList();\n    Term t = new Term(field);\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(t.createTerm(internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private NamedList getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList res = new NamedList();\n    Term t = new Term(field);\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(t.createTerm(internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"755f2f419306d7297c8feee10d1897addf4b2dd0","date":1294442354,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","sourceNew":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    Term t = new Term(field);\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(t.createTerm(internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":"  private NamedList getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList res = new NamedList();\n    Term t = new Term(field);\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(t.createTerm(internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","sourceNew":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    Term t = new Term(field);\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(t.createTerm(internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":"  private NamedList getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList res = new NamedList();\n    Term t = new Term(field);\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(t.createTerm(internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","sourceNew":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    Term t = new Term(field);\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(t.createTerm(internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":"  private NamedList getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList res = new NamedList();\n    Term t = new Term(field);\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(t.createTerm(internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","sourceNew":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    Term t = new Term(field);\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(t.createTerm(internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","sourceNew":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    Term t = new Term(field);\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(t.createTerm(internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","sourceNew":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    Term t = new Term(field);\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(t.createTerm(internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","sourceNew":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","sourceNew":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","sourceNew":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["755f2f419306d7297c8feee10d1897addf4b2dd0"],"c26f00b574427b55127e869b935845554afde1fa":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2553b00f699380c64959ccb27991289aae87be2e":["755f2f419306d7297c8feee10d1897addf4b2dd0","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["755f2f419306d7297c8feee10d1897addf4b2dd0","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"755f2f419306d7297c8feee10d1897addf4b2dd0":["1da8d55113b689b06716246649de6f62430f15c0"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","755f2f419306d7297c8feee10d1897addf4b2dd0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1da8d55113b689b06716246649de6f62430f15c0","755f2f419306d7297c8feee10d1897addf4b2dd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["c26f00b574427b55127e869b935845554afde1fa","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"1da8d55113b689b06716246649de6f62430f15c0":["755f2f419306d7297c8feee10d1897addf4b2dd0","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"755f2f419306d7297c8feee10d1897addf4b2dd0":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}