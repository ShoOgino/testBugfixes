{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","sourceNew":"  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = IndexReader.open(unsignedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(unsignedIndex.minR);\n    String maxRP = pad(unsignedIndex.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n  }\n\n","sourceOld":"  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = IndexReader.open(unsignedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(unsignedIndex.minR);\n    String maxRP = pad(unsignedIndex.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRandCollating().mjava","sourceNew":null,"sourceOld":"  public void testRangeQueryRandCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    // using the unsigned index because collation seems to ignore hyphens\n    IndexReader reader = IndexReader.open(unsignedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    String minRP = pad(unsignedIndex.minR);\n    String maxRP = pad(unsignedIndex.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}