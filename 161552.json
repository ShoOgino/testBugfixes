{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterProperties().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterProperties().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Saves cluster properties to clusterprops.json.\n   * @return current properties\n   */\n  private synchronized Map<String, Object> saveClusterProperties() throws Exception {\n    if (lastSavedProperties != null && lastSavedProperties.equals(clusterProperties)) {\n      return lastSavedProperties;\n    }\n    byte[] data = Utils.toJSON(clusterProperties);\n    VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_PROPS);\n    int version = oldData != null ? oldData.getVersion() : -1;\n    stateManager.setData(ZkStateReader.CLUSTER_PROPS, data, version);\n    lastSavedProperties = (Map)Utils.fromJSON(data);\n    return lastSavedProperties;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterProperties().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterProperties().mjava","sourceNew":"  /**\n   * Saves cluster properties to clusterprops.json.\n   * @return current properties\n   */\n  private synchronized Map<String, Object> saveClusterProperties() throws Exception {\n    if (lastSavedProperties != null && lastSavedProperties.equals(clusterProperties)) {\n      return lastSavedProperties;\n    }\n    byte[] data = Utils.toJSON(clusterProperties);\n    VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_PROPS);\n    int version = oldData != null ? oldData.getVersion() : -1;\n    stateManager.setData(ZkStateReader.CLUSTER_PROPS, data, version);\n    lastSavedProperties = new ConcurrentHashMap<>((Map)Utils.fromJSON(data));\n    return lastSavedProperties;\n  }\n\n","sourceOld":"  /**\n   * Saves cluster properties to clusterprops.json.\n   * @return current properties\n   */\n  private synchronized Map<String, Object> saveClusterProperties() throws Exception {\n    if (lastSavedProperties != null && lastSavedProperties.equals(clusterProperties)) {\n      return lastSavedProperties;\n    }\n    byte[] data = Utils.toJSON(clusterProperties);\n    VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_PROPS);\n    int version = oldData != null ? oldData.getVersion() : -1;\n    stateManager.setData(ZkStateReader.CLUSTER_PROPS, data, version);\n    lastSavedProperties = (Map)Utils.fromJSON(data);\n    return lastSavedProperties;\n  }\n\n","bugFix":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterProperties().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterProperties().mjava","sourceNew":"  /**\n   * Saves cluster properties to clusterprops.json.\n   * @return current properties\n   */\n  private synchronized Map<String, Object> saveClusterProperties() throws Exception {\n    if (lastSavedProperties != null && lastSavedProperties.equals(clusterProperties)) {\n      return lastSavedProperties;\n    }\n    byte[] data = Utils.toJSON(clusterProperties);\n    VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_PROPS);\n    int version = oldData != null ? oldData.getVersion() : -1;\n    stateManager.setData(ZkStateReader.CLUSTER_PROPS, data, version);\n    lastSavedProperties = new ConcurrentHashMap<>((Map)Utils.fromJSON(data));\n    return lastSavedProperties;\n  }\n\n","sourceOld":"  /**\n   * Saves cluster properties to clusterprops.json.\n   * @return current properties\n   */\n  private synchronized Map<String, Object> saveClusterProperties() throws Exception {\n    if (lastSavedProperties != null && lastSavedProperties.equals(clusterProperties)) {\n      return lastSavedProperties;\n    }\n    byte[] data = Utils.toJSON(clusterProperties);\n    VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_PROPS);\n    int version = oldData != null ? oldData.getVersion() : -1;\n    stateManager.setData(ZkStateReader.CLUSTER_PROPS, data, version);\n    lastSavedProperties = new ConcurrentHashMap<>((Map)Utils.fromJSON(data));\n    return lastSavedProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}