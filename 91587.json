{"path":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriter#push().mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriter#push().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#push().mjava","sourceNew":"  // Pushes pending positions to the wrapped codec\n  private void push() throws IOException {\n    if (DEBUG) System.out.println(\"PW now push @ \" + pendingCount + \" wrapped=\" + wrappedPostingsWriter);\n    assert pendingCount == pending.length;\n      \n    wrappedPostingsWriter.startTerm();\n      \n    // Flush all buffered docs\n    if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      Position doc = null;\n      for(Position pos : pending) {\n        if (doc == null) {\n          doc = pos;\n          if (DEBUG) System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        } else if (doc.docID != pos.docID) {\n          assert pos.docID > doc.docID;\n          if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n          wrappedPostingsWriter.finishDoc();\n          doc = pos;\n          if (DEBUG) System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        }\n        if (DEBUG) System.out.println(\"PW:   wrapped.addPos pos=\" + pos.pos);\n        wrappedPostingsWriter.addPosition(pos.pos, pos.payload);\n      }\n      //wrappedPostingsWriter.finishDoc();\n    } else {\n      for(Position doc : pending) {\n        wrappedPostingsWriter.startDoc(doc.docID, indexOptions == IndexOptions.DOCS_ONLY ? 0 : doc.termFreq);\n      }\n    }\n    pendingCount = -1;\n  }\n\n","sourceOld":"  // Pushes pending positions to the wrapped codec\n  private void push() throws IOException {\n    //System.out.println(\"PW now push @ \" + pendingCount + \" wrapped=\" + wrappedPostingsWriter);\n    assert pendingCount == pending.length;\n      \n    wrappedPostingsWriter.startTerm();\n      \n    // Flush all buffered docs\n    if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      Position doc = null;\n      for(Position pos : pending) {\n        if (doc == null) {\n          doc = pos;\n          //System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        } else if (doc.docID != pos.docID) {\n          assert pos.docID > doc.docID;\n          //System.out.println(\"PW: wrapped.finishDoc\");\n          wrappedPostingsWriter.finishDoc();\n          doc = pos;\n          //System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        }\n        //System.out.println(\"PW:   wrapped.addPos pos=\" + pos.pos);\n        wrappedPostingsWriter.addPosition(pos.pos, pos.payload);\n      }\n      //wrappedPostingsWriter.finishDoc();\n    } else {\n      for(Position doc : pending) {\n        wrappedPostingsWriter.startDoc(doc.docID, indexOptions == IndexOptions.DOCS_ONLY ? 0 : doc.termFreq);\n      }\n    }\n    pendingCount = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#push().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriter#push().mjava","sourceNew":"  // Pushes pending positions to the wrapped codec\n  private void push() throws IOException {\n    if (DEBUG) System.out.println(\"PW now push @ \" + pendingCount + \" wrapped=\" + wrappedPostingsWriter);\n    assert pendingCount == pending.length;\n      \n    wrappedPostingsWriter.startTerm();\n      \n    // Flush all buffered docs\n    if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      Position doc = null;\n      for(Position pos : pending) {\n        if (doc == null) {\n          doc = pos;\n          if (DEBUG) System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        } else if (doc.docID != pos.docID) {\n          assert pos.docID > doc.docID;\n          if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n          wrappedPostingsWriter.finishDoc();\n          doc = pos;\n          if (DEBUG) System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        }\n        if (DEBUG) System.out.println(\"PW:   wrapped.addPos pos=\" + pos.pos);\n        wrappedPostingsWriter.addPosition(pos.pos, pos.payload);\n      }\n      //wrappedPostingsWriter.finishDoc();\n    } else {\n      for(Position doc : pending) {\n        wrappedPostingsWriter.startDoc(doc.docID, indexOptions == IndexOptions.DOCS_ONLY ? 0 : doc.termFreq);\n      }\n    }\n    pendingCount = -1;\n  }\n\n","sourceOld":"  // Pushes pending positions to the wrapped codec\n  private void push() throws IOException {\n    if (DEBUG) System.out.println(\"PW now push @ \" + pendingCount + \" wrapped=\" + wrappedPostingsWriter);\n    assert pendingCount == pending.length;\n      \n    wrappedPostingsWriter.startTerm();\n      \n    // Flush all buffered docs\n    if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      Position doc = null;\n      for(Position pos : pending) {\n        if (doc == null) {\n          doc = pos;\n          if (DEBUG) System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        } else if (doc.docID != pos.docID) {\n          assert pos.docID > doc.docID;\n          if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n          wrappedPostingsWriter.finishDoc();\n          doc = pos;\n          if (DEBUG) System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        }\n        if (DEBUG) System.out.println(\"PW:   wrapped.addPos pos=\" + pos.pos);\n        wrappedPostingsWriter.addPosition(pos.pos, pos.payload);\n      }\n      //wrappedPostingsWriter.finishDoc();\n    } else {\n      for(Position doc : pending) {\n        wrappedPostingsWriter.startDoc(doc.docID, indexOptions == IndexOptions.DOCS_ONLY ? 0 : doc.termFreq);\n      }\n    }\n    pendingCount = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}