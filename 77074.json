{"path":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"/dev/null","sourceNew":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      mltquery = mlt.like(id);\n      setBoosts(mltquery);\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( mltquery, terms );\n      }\n\n      // exclude current document from results\n      BooleanQuery mltQuery = new BooleanQuery();\n      mltQuery.add(mltquery, BooleanClause.Occur.MUST);\n      mltQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(mltQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(mltQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":null,"sourceOld":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      mltquery = mlt.like(id);\n      setBoosts(mltquery);\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( mltquery, terms );\n      }\n\n      // exclude current document from results\n      BooleanQuery mltQuery = new BooleanQuery();\n      mltQuery.add(mltquery, BooleanClause.Occur.MUST);\n      mltQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(mltQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(mltQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      mltquery = mlt.like(id);\n      setBoosts(mltquery);\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( mltquery, terms );\n      }\n\n      // exclude current document from results\n      BooleanQuery mltQuery = new BooleanQuery();\n      mltQuery.add(mltquery, BooleanClause.Occur.MUST);\n      mltQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(mltQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(mltQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      mltquery = mlt.like(id);\n      setBoosts(mltquery);\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( mltquery, terms );\n      }\n\n      // exclude current document from results\n      BooleanQuery mltQuery = new BooleanQuery();\n      mltQuery.add(mltquery, BooleanClause.Occur.MUST);\n      mltQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(mltQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(mltQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"/dev/null","sourceNew":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      mltquery = mlt.like(id);\n      setBoosts(mltquery);\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( mltquery, terms );\n      }\n\n      // exclude current document from results\n      BooleanQuery mltQuery = new BooleanQuery();\n      mltQuery.add(mltquery, BooleanClause.Occur.MUST);\n      mltQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(mltQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(mltQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d701c455e4783533e275f01bf3e813737b7e593","date":1296229063,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      mltquery = mlt.like(id);\n      setBoosts(mltquery);\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( mltquery, terms );\n      }\n\n      // exclude current document from results\n      BooleanQuery mltQuery = new BooleanQuery();\n      mltQuery.add(mltquery, BooleanClause.Occur.MUST);\n      mltQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(mltQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(mltQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":["c464a33a41a74ada47869a7372815aafb469df1a","c464a33a41a74ada47869a7372815aafb469df1a","c464a33a41a74ada47869a7372815aafb469df1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      mltquery = mlt.like(id);\n      setBoosts(mltquery);\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( mltquery, terms );\n      }\n\n      // exclude current document from results\n      BooleanQuery mltQuery = new BooleanQuery();\n      mltQuery.add(mltquery, BooleanClause.Occur.MUST);\n      mltQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(mltQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(mltQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      mltquery = mlt.like(id);\n      setBoosts(mltquery);\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( mltquery, terms );\n      }\n\n      // exclude current document from results\n      BooleanQuery mltQuery = new BooleanQuery();\n      mltQuery.add(mltquery, BooleanClause.Occur.MUST);\n      mltQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(mltQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(mltQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["8d701c455e4783533e275f01bf3e813737b7e593","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["8d701c455e4783533e275f01bf3e813737b7e593"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","8d701c455e4783533e275f01bf3e813737b7e593"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d701c455e4783533e275f01bf3e813737b7e593":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["8d701c455e4783533e275f01bf3e813737b7e593"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1da8d55113b689b06716246649de6f62430f15c0","8d701c455e4783533e275f01bf3e813737b7e593"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["29ef99d61cda9641b6250bf9567329a6e65f901d","8d701c455e4783533e275f01bf3e813737b7e593","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"8d701c455e4783533e275f01bf3e813737b7e593":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}