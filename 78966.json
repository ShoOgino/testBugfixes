{"path":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n\n      final List<String> docWriterFiles;\n      if (docWriter != null) {\n        docWriterFiles = docWriter.openFiles();\n        if (docWriterFiles != null)\n          // We must incRef these files before decRef'ing\n          // last files to make sure we don't accidentally\n          // delete them:\n          incRef(docWriterFiles);\n      } else\n        docWriterFiles = null;\n\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef(lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n\n      if (docWriterFiles != null)\n        lastFiles.add(docWriterFiles);\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n\n      final List<String> docWriterFiles;\n      if (docWriter != null) {\n        docWriterFiles = docWriter.openFiles();\n        if (docWriterFiles != null)\n          // We must incRef these files before decRef'ing\n          // last files to make sure we don't accidentally\n          // delete them:\n          incRef(docWriterFiles);\n      } else\n        docWriterFiles = null;\n\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef(lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n\n      if (docWriterFiles != null)\n        lastFiles.add(docWriterFiles);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef(lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n\n      final List<String> docWriterFiles;\n      if (docWriter != null) {\n        docWriterFiles = docWriter.openFiles();\n        if (docWriterFiles != null)\n          // We must incRef these files before decRef'ing\n          // last files to make sure we don't accidentally\n          // delete them:\n          incRef(docWriterFiles);\n      } else\n        docWriterFiles = null;\n\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef(lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n\n      if (docWriterFiles != null)\n        lastFiles.add(docWriterFiles);\n    }\n  }\n\n","bugFix":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c","ef82ff03e4016c705811b2658e81471a645c0e49","5350389bf83287111f7760b9e3db3af8e3648474","8b6187898fc4413ccd18229711786550a280383c","e82780afe6097066eb5befb86e9432f077667e3d"],"bugIntro":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n\n      final List<String> docWriterFiles;\n      if (docWriter != null) {\n        docWriterFiles = docWriter.openFiles();\n        if (docWriterFiles != null)\n          // We must incRef these files before decRef'ing\n          // last files to make sure we don't accidentally\n          // delete them:\n          incRef(docWriterFiles);\n      } else\n        docWriterFiles = null;\n\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef(lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n\n      if (docWriterFiles != null)\n        lastFiles.add(docWriterFiles);\n    }\n  }\n\n","bugFix":null,"bugIntro":["cefe924a3b76c22b7df9a075329750871699af6b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n\n      final List<String> docWriterFiles;\n      if (docWriter != null) {\n        docWriterFiles = docWriter.openFiles();\n        if (docWriterFiles != null)\n          // We must incRef these files before decRef'ing\n          // last files to make sure we don't accidentally\n          // delete them:\n          incRef(docWriterFiles);\n      } else\n        docWriterFiles = null;\n\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef(lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n\n      if (docWriterFiles != null)\n        lastFiles.add(docWriterFiles);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   *\n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef(lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   *\n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   *\n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   *\n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00afe74a80796ed1f30a9509b150ff104746a1f","date":1312881735,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   *\n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.toString(directory) + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   *\n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","bugFix":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7719bda090a2ae5bab940a27ba7bb9054b29818","date":1315503197,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   *\n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n    assert locked();\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.toString(directory) + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   *\n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.toString(directory) + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   *\n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n    assert locked();\n\n    if (infoStream != null) {\n      infoStream.message(\"IFD\", \"now checkpoint \\\"\" + segmentInfos.toString(directory) + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   *\n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n    assert locked();\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.toString(directory) + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   *\n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n    assert locked();\n\n    if (infoStream.isEnabled(\"IFD\")) {\n      infoStream.message(\"IFD\", \"now checkpoint \\\"\" + segmentInfos.toString(directory) + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   *\n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n    assert locked();\n\n    if (infoStream != null) {\n      infoStream.message(\"IFD\", \"now checkpoint \\\"\" + segmentInfos.toString(directory) + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   *\n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n    assert locked();\n\n    assert Thread.holdsLock(writer);\n\n    if (infoStream.isEnabled(\"IFD\")) {\n      infoStream.message(\"IFD\", \"now checkpoint \\\"\" + writer.segString(segmentInfos) + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   *\n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n    assert locked();\n\n    if (infoStream.isEnabled(\"IFD\")) {\n      infoStream.message(\"IFD\", \"now checkpoint \\\"\" + segmentInfos.toString(directory) + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","bugFix":null,"bugIntro":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   *\n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n    assert locked();\n\n    assert Thread.holdsLock(writer);\n\n    if (infoStream.isEnabled(\"IFD\")) {\n      infoStream.message(\"IFD\", \"now checkpoint \\\"\" + writer.segString(segmentInfos) + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   *\n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n    assert locked();\n\n    assert Thread.holdsLock(writer);\n\n    if (infoStream.isEnabled(\"IFD\")) {\n      infoStream.message(\"IFD\", \"now checkpoint \\\"\" + writer.segString(segmentInfos) + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n      // DecRef old files from the last checkpoint, if any:\n      for (Collection<String> lastFile : lastFiles) {\n        decRef(lastFile);\n      }\n      lastFiles.clear();\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"06584e6e98d592b34e1329b384182f368d2025e8":["f7719bda090a2ae5bab940a27ba7bb9054b29818"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9454a6510e2db155fb01faa5c049b06ece95fab9","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"f7719bda090a2ae5bab940a27ba7bb9054b29818":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","c00afe74a80796ed1f30a9509b150ff104746a1f","a3776dccca01c11e7046323cfad46a3b4a471233"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["f7719bda090a2ae5bab940a27ba7bb9054b29818"],"f7719bda090a2ae5bab940a27ba7bb9054b29818":["06584e6e98d592b34e1329b384182f368d2025e8"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","5ef87af8c7bd0f8429622b83aa74202383f2e757","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}