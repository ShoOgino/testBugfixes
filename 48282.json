{"path":"src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccess().mjava","commits":[{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccess().mjava","pathOld":"/dev/null","sourceNew":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccess() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n        \n        // Open two files \n        InputStream e1 = dir.openFile(\"f11\");\n        InputStream e2 = dir.openFile(\"f3\");\n        \n        InputStream a1 = cr.openFile(\"f11\");        \n        InputStream a2 = dir.openFile(\"f3\");\n        \n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100); \n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n        \n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027); \n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n        \n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n        \n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n        \n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n        \n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move        \n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n        \n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1acbe60842541f8c38e2d60b03591478c9f91546","date":1066055498,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccess().mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccess().mjava","sourceNew":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccess() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // Open two files\n        InputStream e1 = dir.openFile(\"f11\");\n        InputStream e2 = dir.openFile(\"f3\");\n\n        InputStream a1 = cr.openFile(\"f11\");\n        InputStream a2 = dir.openFile(\"f3\");\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","sourceOld":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccess() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n        \n        // Open two files \n        InputStream e1 = dir.openFile(\"f11\");\n        InputStream e2 = dir.openFile(\"f3\");\n        \n        InputStream a1 = cr.openFile(\"f11\");        \n        InputStream a2 = dir.openFile(\"f3\");\n        \n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100); \n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n        \n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027); \n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n        \n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n        \n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n        \n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n        \n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move        \n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n        \n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccess().mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccess().mjava","sourceNew":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccess() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // Open two files\n        IndexInput e1 = dir.openInput(\"f11\");\n        IndexInput e2 = dir.openInput(\"f3\");\n\n        IndexInput a1 = cr.openInput(\"f11\");\n        IndexInput a2 = dir.openInput(\"f3\");\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","sourceOld":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccess() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // Open two files\n        InputStream e1 = dir.openFile(\"f11\");\n        InputStream e2 = dir.openFile(\"f3\");\n\n        InputStream a1 = cr.openFile(\"f11\");\n        InputStream a2 = dir.openFile(\"f3\");\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccess().mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccess().mjava","sourceNew":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccess() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // Open two files\n        IndexInput e1 = dir.openInput(\"f11\");\n        IndexInput e2 = dir.openInput(\"f3\");\n\n        IndexInput a1 = cr.openInput(\"f11\");\n        IndexInput a2 = dir.openInput(\"f3\");\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","sourceOld":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccess() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // Open two files\n        IndexInput e1 = dir.openInput(\"f11\");\n        IndexInput e2 = dir.openInput(\"f3\");\n\n        IndexInput a1 = cr.openInput(\"f11\");\n        IndexInput a2 = dir.openInput(\"f3\");\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e971ba25509e21a130fef61f0687be0446ca27a0":["1acbe60842541f8c38e2d60b03591478c9f91546"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1acbe60842541f8c38e2d60b03591478c9f91546":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e971ba25509e21a130fef61f0687be0446ca27a0"]},"commit2Childs":{"e971ba25509e21a130fef61f0687be0446ca27a0":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"1acbe60842541f8c38e2d60b03591478c9f91546":["e971ba25509e21a130fef61f0687be0446ca27a0"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["1acbe60842541f8c38e2d60b03591478c9f91546"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}