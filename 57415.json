{"path":"lucene/facet/src/java/org/apache/lucene/facet/util/FacetsPayloadMigrationReader.PayloadMigratingBinaryDocValues#get(int,BytesRef).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/FacetsPayloadMigrationReader.PayloadMigratingBinaryDocValues#get(int,BytesRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetsPayloadMigrationReader.PayloadMigratingBinaryDocValues#get(int,BytesRef).mjava","sourceNew":"    @Override\n    public void get(int docID, BytesRef result) {\n      try {\n        // If caller is moving backwards (eg, during merge,\n        // the consuming DV format is free to iterate over\n        // our values as many times as it wants), we must\n        // re-init the dpe:\n        if (docID <= lastRequestedDocID) {\n          dpe = getDPE();\n          if (dpe == null) {\n            curDocID = DocIdSetIterator.NO_MORE_DOCS;\n          } else{\n            curDocID = dpe.nextDoc();\n          }\n        }\n        lastRequestedDocID = docID;\n        if (curDocID > docID) {\n          // document does not exist\n          result.length = 0;\n          return;\n        }\n      \n        if (curDocID < docID) {\n          curDocID = dpe.advance(docID);\n          if (curDocID != docID) { // requested document does not have a payload\n            result.length = 0;\n            return;\n          }\n        }\n        \n        dpe.nextPosition();\n        result.copyBytes(dpe.getPayload());\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void get(int docID, BytesRef result) {\n      try {\n        // If caller is moving backwards (eg, during merge,\n        // the consuming DV format is free to iterate over\n        // our values as many times as it wants), we must\n        // re-init the dpe:\n        if (docID <= lastRequestedDocID) {\n          dpe = getDPE();\n          if (dpe == null) {\n            curDocID = DocIdSetIterator.NO_MORE_DOCS;\n          } else{\n            curDocID = dpe.nextDoc();\n          }\n        }\n        lastRequestedDocID = docID;\n        if (curDocID > docID) {\n          // document does not exist\n          result.length = 0;\n          return;\n        }\n      \n        if (curDocID < docID) {\n          curDocID = dpe.advance(docID);\n          if (curDocID != docID) { // requested document does not have a payload\n            result.length = 0;\n            return;\n          }\n        }\n        \n        dpe.nextPosition();\n        result.copyBytes(dpe.getPayload());\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/FacetsPayloadMigrationReader.PayloadMigratingBinaryDocValues#get(int,BytesRef).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void get(int docID, BytesRef result) {\n      try {\n        // If caller is moving backwards (eg, during merge,\n        // the consuming DV format is free to iterate over\n        // our values as many times as it wants), we must\n        // re-init the dpe:\n        if (docID <= lastRequestedDocID) {\n          dpe = getDPE();\n          if (dpe == null) {\n            curDocID = DocIdSetIterator.NO_MORE_DOCS;\n          } else{\n            curDocID = dpe.nextDoc();\n          }\n        }\n        lastRequestedDocID = docID;\n        if (curDocID > docID) {\n          // document does not exist\n          result.length = 0;\n          return;\n        }\n      \n        if (curDocID < docID) {\n          curDocID = dpe.advance(docID);\n          if (curDocID != docID) { // requested document does not have a payload\n            result.length = 0;\n            return;\n          }\n        }\n        \n        dpe.nextPosition();\n        result.copyBytes(dpe.getPayload());\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/FacetsPayloadMigrationReader.PayloadMigratingBinaryDocValues#get(int,BytesRef).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void get(int docID, BytesRef result) {\n      try {\n        // If caller is moving backwards (eg, during merge,\n        // the consuming DV format is free to iterate over\n        // our values as many times as it wants), we must\n        // re-init the dpe:\n        if (docID <= lastRequestedDocID) {\n          dpe = getDPE();\n          if (dpe == null) {\n            curDocID = DocIdSetIterator.NO_MORE_DOCS;\n          } else{\n            curDocID = dpe.nextDoc();\n          }\n        }\n        lastRequestedDocID = docID;\n        if (curDocID > docID) {\n          // document does not exist\n          result.length = 0;\n          return;\n        }\n      \n        if (curDocID < docID) {\n          curDocID = dpe.advance(docID);\n          if (curDocID != docID) { // requested document does not have a payload\n            result.length = 0;\n            return;\n          }\n        }\n        \n        dpe.nextPosition();\n        result.copyBytes(dpe.getPayload());\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}