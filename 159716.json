{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PivotEvaluator#doWork(Object...).mjava","commits":[{"id":"a1ecccbbb5df38d30672b757f22eeef2050098e9","date":1576767784,"type":1,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PivotEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PivotEvaluator#doWork(Object[]).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(values.length != 4) {\n      throw new IOException(\"The pivot function requires four parameters.\");\n    }\n\n    Object value1 = values[0];\n    Object value2 = values[1];\n    Object value3 = values[2];\n    Object value4 = values[3];\n\n    if(value1 instanceof List) {\n      List<Tuple> tuples = (List<Tuple>)value1;\n      String x = (String)value2;\n      x = x.replace(\"\\\"\", \"\");\n      String y = (String)value3;\n      y = y.replace(\"\\\"\", \"\");\n\n      String vlabel = (String)value4;\n      vlabel = vlabel.replace(\"\\\"\", \"\");\n\n      Set<String> xset = new TreeSet();\n      Set<String> yset = new TreeSet();\n\n      for(int i=0; i<tuples.size(); i++) {\n        Tuple tuple = tuples.get(i);\n        xset.add(tuple.getString(x));\n        yset.add(tuple.getString(y));\n      }\n\n      double[][] data = new double[xset.size()][yset.size()];\n\n      List<String> xlabels = new ArrayList(xset.size());\n      Map<String, Integer> xindexes = new HashMap();\n      int xindex = 0;\n      for (String xlabel :xset) {\n        xlabels.add(xlabel);\n        xindexes.put(xlabel, xindex);\n        ++xindex;\n      }\n\n      List<String> ylabels = new ArrayList(yset.size());\n      Map<String, Integer> yindexes = new HashMap();\n      int yindex = 0;\n      for (String ylabel : yset) {\n        ylabels.add(ylabel);\n        yindexes.put(ylabel, yindex);\n        ++yindex;\n      }\n\n      for(Tuple tuple : tuples) {\n        String xlabel = tuple.getString(x);\n        String ylabel = tuple.getString(y);\n        int xi = xindexes.get(xlabel);\n        int yi = yindexes.get(ylabel);\n        double val = tuple.getDouble(vlabel);\n        data[xi][yi] = val;\n      }\n\n      Matrix matrix = new Matrix(data);\n      matrix.setRowLabels(xlabels);\n      matrix.setColumnLabels(ylabels);\n      return matrix;\n    } else {\n      throw new IOException(\"The getValue function expects a list of tuples as the first parameter\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object[] values) throws IOException {\n    if(values.length != 4) {\n      throw new IOException(\"The pivot function requires four parameters.\");\n    }\n\n    Object value1 = values[0];\n    Object value2 = values[1];\n    Object value3 = values[2];\n    Object value4 = values[3];\n\n    if(value1 instanceof List) {\n      List<Tuple> tuples = (List<Tuple>)value1;\n      String x = (String)value2;\n      x = x.replace(\"\\\"\", \"\");\n      String y = (String)value3;\n      y = y.replace(\"\\\"\", \"\");\n\n      String vlabel = (String)value4;\n      vlabel = vlabel.replace(\"\\\"\", \"\");\n\n      Set<String> xset = new TreeSet();\n      Set<String> yset = new TreeSet();\n\n      for(int i=0; i<tuples.size(); i++) {\n        Tuple tuple = tuples.get(i);\n        xset.add(tuple.getString(x));\n        yset.add(tuple.getString(y));\n      }\n\n      double[][] data = new double[xset.size()][yset.size()];\n\n      List<String> xlabels = new ArrayList(xset.size());\n      Map<String, Integer> xindexes = new HashMap();\n      int xindex = 0;\n      for (String xlabel :xset) {\n        xlabels.add(xlabel);\n        xindexes.put(xlabel, xindex);\n        ++xindex;\n      }\n\n      List<String> ylabels = new ArrayList(yset.size());\n      Map<String, Integer> yindexes = new HashMap();\n      int yindex = 0;\n      for (String ylabel : yset) {\n        ylabels.add(ylabel);\n        yindexes.put(ylabel, yindex);\n        ++yindex;\n      }\n\n      for(Tuple tuple : tuples) {\n        String xlabel = tuple.getString(x);\n        String ylabel = tuple.getString(y);\n        int xi = xindexes.get(xlabel);\n        int yi = yindexes.get(ylabel);\n        double val = tuple.getDouble(vlabel);\n        data[xi][yi] = val;\n      }\n\n      Matrix matrix = new Matrix(data);\n      matrix.setRowLabels(xlabels);\n      matrix.setColumnLabels(ylabels);\n      return matrix;\n    } else {\n      throw new IOException(\"The getValue function expects a list of tuples as the first parameter\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c66470e527299cc148ad0b3441d08dfb7cb9e03","date":1576859740,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PivotEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PivotEvaluator#doWork(Object[]).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(values.length != 4) {\n      throw new IOException(\"The pivot function requires four parameters.\");\n    }\n\n    Object value1 = values[0];\n    Object value2 = values[1];\n    Object value3 = values[2];\n    Object value4 = values[3];\n\n    if(value1 instanceof List) {\n      List<Tuple> tuples = (List<Tuple>)value1;\n      String x = (String)value2;\n      x = x.replace(\"\\\"\", \"\");\n      String y = (String)value3;\n      y = y.replace(\"\\\"\", \"\");\n\n      String vlabel = (String)value4;\n      vlabel = vlabel.replace(\"\\\"\", \"\");\n\n      Set<String> xset = new TreeSet();\n      Set<String> yset = new TreeSet();\n\n      for(int i=0; i<tuples.size(); i++) {\n        Tuple tuple = tuples.get(i);\n        xset.add(tuple.getString(x));\n        yset.add(tuple.getString(y));\n      }\n\n      double[][] data = new double[xset.size()][yset.size()];\n\n      List<String> xlabels = new ArrayList(xset.size());\n      Map<String, Integer> xindexes = new HashMap();\n      int xindex = 0;\n      for (String xlabel :xset) {\n        xlabels.add(xlabel);\n        xindexes.put(xlabel, xindex);\n        ++xindex;\n      }\n\n      List<String> ylabels = new ArrayList(yset.size());\n      Map<String, Integer> yindexes = new HashMap();\n      int yindex = 0;\n      for (String ylabel : yset) {\n        ylabels.add(ylabel);\n        yindexes.put(ylabel, yindex);\n        ++yindex;\n      }\n\n      for(Tuple tuple : tuples) {\n        String xlabel = tuple.getString(x);\n        String ylabel = tuple.getString(y);\n        int xi = xindexes.get(xlabel);\n        int yi = yindexes.get(ylabel);\n        double val = tuple.getDouble(vlabel);\n        data[xi][yi] = val;\n      }\n\n      Matrix matrix = new Matrix(data);\n      matrix.setRowLabels(xlabels);\n      matrix.setColumnLabels(ylabels);\n      return matrix;\n    } else {\n      throw new IOException(\"The getValue function expects a list of tuples as the first parameter\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object[] values) throws IOException {\n    if(values.length != 4) {\n      throw new IOException(\"The pivot function requires four parameters.\");\n    }\n\n    Object value1 = values[0];\n    Object value2 = values[1];\n    Object value3 = values[2];\n    Object value4 = values[3];\n\n    if(value1 instanceof List) {\n      List<Tuple> tuples = (List<Tuple>)value1;\n      String x = (String)value2;\n      x = x.replace(\"\\\"\", \"\");\n      String y = (String)value3;\n      y = y.replace(\"\\\"\", \"\");\n\n      String vlabel = (String)value4;\n      vlabel = vlabel.replace(\"\\\"\", \"\");\n\n      Set<String> xset = new TreeSet();\n      Set<String> yset = new TreeSet();\n\n      for(int i=0; i<tuples.size(); i++) {\n        Tuple tuple = tuples.get(i);\n        xset.add(tuple.getString(x));\n        yset.add(tuple.getString(y));\n      }\n\n      double[][] data = new double[xset.size()][yset.size()];\n\n      List<String> xlabels = new ArrayList(xset.size());\n      Map<String, Integer> xindexes = new HashMap();\n      int xindex = 0;\n      for (String xlabel :xset) {\n        xlabels.add(xlabel);\n        xindexes.put(xlabel, xindex);\n        ++xindex;\n      }\n\n      List<String> ylabels = new ArrayList(yset.size());\n      Map<String, Integer> yindexes = new HashMap();\n      int yindex = 0;\n      for (String ylabel : yset) {\n        ylabels.add(ylabel);\n        yindexes.put(ylabel, yindex);\n        ++yindex;\n      }\n\n      for(Tuple tuple : tuples) {\n        String xlabel = tuple.getString(x);\n        String ylabel = tuple.getString(y);\n        int xi = xindexes.get(xlabel);\n        int yi = yindexes.get(ylabel);\n        double val = tuple.getDouble(vlabel);\n        data[xi][yi] = val;\n      }\n\n      Matrix matrix = new Matrix(data);\n      matrix.setRowLabels(xlabels);\n      matrix.setColumnLabels(ylabels);\n      return matrix;\n    } else {\n      throw new IOException(\"The getValue function expects a list of tuples as the first parameter\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PivotEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PivotEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(values.length != 4) {\n      throw new IOException(\"The pivot function requires four parameters.\");\n    }\n\n    Object value1 = values[0];\n    Object value2 = values[1];\n    Object value3 = values[2];\n    Object value4 = values[3];\n\n    if(value1 instanceof List) {\n      @SuppressWarnings({\"unchecked\"})\n      List<Tuple> tuples = (List<Tuple>)value1;\n      String x = (String)value2;\n      x = x.replace(\"\\\"\", \"\");\n      String y = (String)value3;\n      y = y.replace(\"\\\"\", \"\");\n\n      String vlabel = (String)value4;\n      vlabel = vlabel.replace(\"\\\"\", \"\");\n\n      Set<String> xset = new TreeSet<>();\n      Set<String> yset = new TreeSet<>();\n\n      for(int i=0; i<tuples.size(); i++) {\n        Tuple tuple = tuples.get(i);\n        xset.add(tuple.getString(x));\n        yset.add(tuple.getString(y));\n      }\n\n      double[][] data = new double[xset.size()][yset.size()];\n\n      List<String> xlabels = new ArrayList<>(xset.size());\n      Map<String, Integer> xindexes = new HashMap<>();\n      int xindex = 0;\n      for (String xlabel :xset) {\n        xlabels.add(xlabel);\n        xindexes.put(xlabel, xindex);\n        ++xindex;\n      }\n\n      List<String> ylabels = new ArrayList<>(yset.size());\n      Map<String, Integer> yindexes = new HashMap<>();\n      int yindex = 0;\n      for (String ylabel : yset) {\n        ylabels.add(ylabel);\n        yindexes.put(ylabel, yindex);\n        ++yindex;\n      }\n\n      for(Tuple tuple : tuples) {\n        String xlabel = tuple.getString(x);\n        String ylabel = tuple.getString(y);\n        int xi = xindexes.get(xlabel);\n        int yi = yindexes.get(ylabel);\n        double val = tuple.getDouble(vlabel);\n        data[xi][yi] = val;\n      }\n\n      Matrix matrix = new Matrix(data);\n      matrix.setRowLabels(xlabels);\n      matrix.setColumnLabels(ylabels);\n      return matrix;\n    } else {\n      throw new IOException(\"The getValue function expects a list of tuples as the first parameter\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(values.length != 4) {\n      throw new IOException(\"The pivot function requires four parameters.\");\n    }\n\n    Object value1 = values[0];\n    Object value2 = values[1];\n    Object value3 = values[2];\n    Object value4 = values[3];\n\n    if(value1 instanceof List) {\n      List<Tuple> tuples = (List<Tuple>)value1;\n      String x = (String)value2;\n      x = x.replace(\"\\\"\", \"\");\n      String y = (String)value3;\n      y = y.replace(\"\\\"\", \"\");\n\n      String vlabel = (String)value4;\n      vlabel = vlabel.replace(\"\\\"\", \"\");\n\n      Set<String> xset = new TreeSet();\n      Set<String> yset = new TreeSet();\n\n      for(int i=0; i<tuples.size(); i++) {\n        Tuple tuple = tuples.get(i);\n        xset.add(tuple.getString(x));\n        yset.add(tuple.getString(y));\n      }\n\n      double[][] data = new double[xset.size()][yset.size()];\n\n      List<String> xlabels = new ArrayList(xset.size());\n      Map<String, Integer> xindexes = new HashMap();\n      int xindex = 0;\n      for (String xlabel :xset) {\n        xlabels.add(xlabel);\n        xindexes.put(xlabel, xindex);\n        ++xindex;\n      }\n\n      List<String> ylabels = new ArrayList(yset.size());\n      Map<String, Integer> yindexes = new HashMap();\n      int yindex = 0;\n      for (String ylabel : yset) {\n        ylabels.add(ylabel);\n        yindexes.put(ylabel, yindex);\n        ++yindex;\n      }\n\n      for(Tuple tuple : tuples) {\n        String xlabel = tuple.getString(x);\n        String ylabel = tuple.getString(y);\n        int xi = xindexes.get(xlabel);\n        int yi = yindexes.get(ylabel);\n        double val = tuple.getDouble(vlabel);\n        data[xi][yi] = val;\n      }\n\n      Matrix matrix = new Matrix(data);\n      matrix.setRowLabels(xlabels);\n      matrix.setColumnLabels(ylabels);\n      return matrix;\n    } else {\n      throw new IOException(\"The getValue function expects a list of tuples as the first parameter\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["a1ecccbbb5df38d30672b757f22eeef2050098e9"],"a1ecccbbb5df38d30672b757f22eeef2050098e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a1ecccbbb5df38d30672b757f22eeef2050098e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a1ecccbbb5df38d30672b757f22eeef2050098e9":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","4c66470e527299cc148ad0b3441d08dfb7cb9e03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1ecccbbb5df38d30672b757f22eeef2050098e9","4c66470e527299cc148ad0b3441d08dfb7cb9e03"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}