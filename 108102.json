{"path":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#newTerm(int,int).mjava","commits":[{"id":"d3cc3fa1ecad75b99ec55169e44628808f9866ad","date":1592311545,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#newTerm(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#newTerm(int).mjava","sourceNew":"  @Override\n  void newTerm(final int termID, final int docID) {\n    // First time we're seeing this term since the last\n    // flush\n    final FreqProxPostingsArray postings = freqProxPostingsArray;\n\n    postings.lastDocIDs[termID] = docID;\n    if (!hasFreq) {\n      assert postings.termFreqs == null;\n      postings.lastDocCodes[termID] = docID;\n      fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n    } else {\n      postings.lastDocCodes[termID] = docID << 1;\n      postings.termFreqs[termID] = getTermFreq();\n      if (hasProx) {\n        writeProx(termID, fieldState.position);\n        if (hasOffsets) {\n          writeOffsets(termID, fieldState.offset);\n        }\n      } else {\n        assert !hasOffsets;\n      }\n      fieldState.maxTermFrequency = Math.max(postings.termFreqs[termID], fieldState.maxTermFrequency);\n    }\n    fieldState.uniqueTermCount++;\n  }\n\n","sourceOld":"  @Override\n  void newTerm(final int termID) {\n    // First time we're seeing this term since the last\n    // flush\n    final FreqProxPostingsArray postings = freqProxPostingsArray;\n\n    postings.lastDocIDs[termID] = docState.docID;\n    if (!hasFreq) {\n      assert postings.termFreqs == null;\n      postings.lastDocCodes[termID] = docState.docID;\n      fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n    } else {\n      postings.lastDocCodes[termID] = docState.docID << 1;\n      postings.termFreqs[termID] = getTermFreq();\n      if (hasProx) {\n        writeProx(termID, fieldState.position);\n        if (hasOffsets) {\n          writeOffsets(termID, fieldState.offset);\n        }\n      } else {\n        assert !hasOffsets;\n      }\n      fieldState.maxTermFrequency = Math.max(postings.termFreqs[termID], fieldState.maxTermFrequency);\n    }\n    fieldState.uniqueTermCount++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3cc3fa1ecad75b99ec55169e44628808f9866ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3cc3fa1ecad75b99ec55169e44628808f9866ad"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3cc3fa1ecad75b99ec55169e44628808f9866ad"],"d3cc3fa1ecad75b99ec55169e44628808f9866ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}