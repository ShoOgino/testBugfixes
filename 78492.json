{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testStreamingRequest().mjava","commits":[{"id":"98a20a1a0f02e19e5121d1b5d95f5af857d609ef","date":1382205865,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testStreamingRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    // Empty the database...\n    server.deleteByQuery(\"*:*\");// delete everything!\n    server.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i);\n      doc.addField(\"cat\", \"foocat\");\n      req.add(doc);\n    }\n    req.setAction(ACTION.COMMIT, true, true);\n    req.process(server);\n    \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.FL, \"id,score,_docid_\");\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n    \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger(0);\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n      \n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound);\n      }\n      \n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float) doc.get(\"score\");\n        assertEquals(\"should have score\", new Float(1.0), score);\n      }\n      \n    });\n    assertEquals(10, cnt.get());\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n   \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for( int i=0; i<10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i );\n      doc.addField(\"cat\", \"foocat\");\n      req.add( doc );\n    }\n    req.setAction(ACTION.COMMIT, true, true );\n    req.process( server );\n   \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set( CommonParams.FL, \"id,score,_docid_\" );\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n   \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger( 0 );\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound );\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float)doc.get( \"score\" );\n        assertEquals( \"should have score\", new Float(1.0), score );\n      }\n     \n    });\n    assertEquals(10, cnt.get() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testStreamingRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i);\n      doc.addField(\"cat\", \"foocat\");\n      req.add(doc);\n    }\n    req.setAction(ACTION.COMMIT, true, true);\n    req.process(client);\n    \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.FL, \"id,score,_docid_\");\n    QueryResponse response = client.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n    \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger(0);\n    client.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound);\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n\n        // Make sure the transformer works for streaming\n        Float score = (Float) doc.get(\"score\");\n        assertEquals(\"should have score\", new Float(1.0), score);\n      }\n\n    });\n    assertEquals(10, cnt.get());\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    // Empty the database...\n    server.deleteByQuery(\"*:*\");// delete everything!\n    server.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i);\n      doc.addField(\"cat\", \"foocat\");\n      req.add(doc);\n    }\n    req.setAction(ACTION.COMMIT, true, true);\n    req.process(server);\n    \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.FL, \"id,score,_docid_\");\n    QueryResponse response = server.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n    \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger(0);\n    server.queryAndStreamResponse(query, new StreamingResponseCallback() {\n      \n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound);\n      }\n      \n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n        \n        // Make sure the transformer works for streaming\n        Float score = (Float) doc.get(\"score\");\n        assertEquals(\"should have score\", new Float(1.0), score);\n      }\n      \n    });\n    assertEquals(10, cnt.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testStreamingRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i);\n      doc.addField(\"cat\", \"foocat\");\n      req.add(doc);\n    }\n    req.setAction(ACTION.COMMIT, true, true);\n    req.process(client);\n    \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.FL, \"id,score,_docid_\");\n    QueryResponse response = client.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n    \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger(0);\n    client.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound);\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n\n        // Make sure the transformer works for streaming\n        Float score = (Float) doc.get(\"score\");\n        assertEquals(\"should have score\", Float.valueOf(1.0f), score);\n      }\n\n    });\n    assertEquals(10, cnt.get());\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i);\n      doc.addField(\"cat\", \"foocat\");\n      req.add(doc);\n    }\n    req.setAction(ACTION.COMMIT, true, true);\n    req.process(client);\n    \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.FL, \"id,score,_docid_\");\n    QueryResponse response = client.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n    \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger(0);\n    client.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound);\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n\n        // Make sure the transformer works for streaming\n        Float score = (Float) doc.get(\"score\");\n        assertEquals(\"should have score\", new Float(1.0), score);\n      }\n\n    });\n    assertEquals(10, cnt.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testStreamingRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i);\n      doc.addField(\"cat\", \"foocat\");\n      req.add(doc);\n    }\n    req.setAction(ACTION.COMMIT, true, true);\n    req.process(client);\n    \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.FL, \"id,score,_docid_\");\n    QueryResponse response = client.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n    \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger(0);\n    client.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound);\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n\n        // Make sure the transformer works for streaming\n        Float score = (Float) doc.get(\"score\");\n        assertEquals(\"should have score\", Float.valueOf(1.0f), score);\n      }\n\n    });\n    assertEquals(10, cnt.get());\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i);\n      doc.addField(\"cat\", \"foocat\");\n      req.add(doc);\n    }\n    req.setAction(ACTION.COMMIT, true, true);\n    req.process(client);\n    \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.FL, \"id,score,_docid_\");\n    QueryResponse response = client.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n    \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger(0);\n    client.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound);\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n\n        // Make sure the transformer works for streaming\n        Float score = (Float) doc.get(\"score\");\n        assertEquals(\"should have score\", new Float(1.0), score);\n      }\n\n    });\n    assertEquals(10, cnt.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testStreamingRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testStreamingRequest().mjava","sourceNew":"  @Test\n  public void testStreamingRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i);\n      doc.addField(\"cat\", \"foocat\");\n      req.add(doc);\n    }\n    req.setAction(ACTION.COMMIT, true, true);\n    req.process(client);\n    \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.FL, \"id,score,_docid_\");\n    QueryResponse response = client.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n    \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger(0);\n    client.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound);\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n\n        // Make sure the transformer works for streaming\n        Float score = (Float) doc.get(\"score\");\n        assertEquals(\"should have score\", Float.valueOf(1.0f), score);\n      }\n\n    });\n    assertEquals(10, cnt.get());\n  }\n\n","sourceOld":"  @Test\n  public void testStreamingRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    \n    // Add some docs to the index\n    UpdateRequest req = new UpdateRequest();\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"\" + i);\n      doc.addField(\"cat\", \"foocat\");\n      req.add(doc);\n    }\n    req.setAction(ACTION.COMMIT, true, true);\n    req.process(client);\n    \n    // Make sure it ran OK\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.FL, \"id,score,_docid_\");\n    QueryResponse response = client.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(10, response.getResults().getNumFound());\n    \n    // Now make sure each document gets output\n    final AtomicInteger cnt = new AtomicInteger(0);\n    client.queryAndStreamResponse(query, new StreamingResponseCallback() {\n\n      @Override\n      public void streamDocListInfo(long numFound, long start, Float maxScore) {\n        assertEquals(10, numFound);\n      }\n\n      @Override\n      public void streamSolrDocument(SolrDocument doc) {\n        cnt.incrementAndGet();\n\n        // Make sure the transformer works for streaming\n        Float score = (Float) doc.get(\"score\");\n        assertEquals(\"should have score\", new Float(1.0), score);\n      }\n\n    });\n    assertEquals(10, cnt.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"98a20a1a0f02e19e5121d1b5d95f5af857d609ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["bafca15d8e408346a67f4282ad1143b88023893b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["bafca15d8e408346a67f4282ad1143b88023893b","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["98a20a1a0f02e19e5121d1b5d95f5af857d609ef"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["bafca15d8e408346a67f4282ad1143b88023893b","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"98a20a1a0f02e19e5121d1b5d95f5af857d609ef":["bafca15d8e408346a67f4282ad1143b88023893b"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98a20a1a0f02e19e5121d1b5d95f5af857d609ef"],"bafca15d8e408346a67f4282ad1143b88023893b":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}