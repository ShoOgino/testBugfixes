{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#read(DataInput).mjava","commits":[{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#read(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#read(DataInput).mjava","sourceNew":"  @Override\n  public TempMetaData read(DataInput in) throws IOException {\n    long[] longs = new long[longsSize];\n    byte[] bytes = null;\n    int docFreq = 0;\n    long totalTermFreq = -1;\n    int bits = in.readByte() & 0xff;\n    int bit0 = bits & 1;\n    int bit1 = bits & 2;\n    int bit2 = bits & 4;\n    int bytesSize = (bits >>> 3);\n    if (bit1 > 0 && bytesSize == 0) {  // determine extra length\n      bytesSize = in.readVInt();\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        longs[pos] = in.readVLong();\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      bytes = new byte[bytesSize];\n      in.readBytes(bytes, 0, bytesSize);\n    }\n    if (bit2 > 0) {  // stats exist\n      int code = in.readVInt();\n      if (hasPos) {\n        totalTermFreq = docFreq = code >>> 1;\n        if ((code & 1) == 0) {\n          totalTermFreq += in.readVLong();\n        }\n      } else {\n        docFreq = code;\n      }\n    }\n    return new TempMetaData(longs, bytes, docFreq, totalTermFreq);\n  }\n\n","sourceOld":"  @Override\n  public TempMetaData read(DataInput in) throws IOException {\n    long[] longs = new long[longsSize];\n    byte[] bytes = null;\n    int docFreq = 0;\n    long totalTermFreq = -1;\n    int bits = in.readByte() & 0xff;\n    int bit0 = bits & 1;\n    int bit1 = bits & 2;\n    int bit2 = bits & 4;\n    int bytesSize = (bits >>> 3);\n    if (bit1 > 0 && bytesSize == 0) {  // determine extra length\n      bytesSize = in.readVInt();\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        longs[pos] = in.readVLong();\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      bytes = new byte[bytesSize];\n      in.readBytes(bytes, 0, bytesSize);\n    }\n    if (bit2 > 0) {  // stats exist\n      int code = in.readVInt();\n      if (hasPos) {\n        totalTermFreq = docFreq = code >>> 1;\n        if ((code & 1) == 0) {\n          totalTermFreq += in.readVLong();\n        }\n      } else {\n        docFreq = code;\n      }\n    }\n    return new TempMetaData(longs, bytes, docFreq, totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f71b8f76a3876ede75eba21fb109342525c3d9c4","date":1378263923,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#read(DataInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#read(DataInput).mjava","sourceNew":"  @Override\n  public TempTermData read(DataInput in) throws IOException {\n    long[] longs = new long[longsSize];\n    byte[] bytes = null;\n    int docFreq = 0;\n    long totalTermFreq = -1;\n    int bits = in.readByte() & 0xff;\n    int bit0 = bits & 1;\n    int bit1 = bits & 2;\n    int bit2 = bits & 4;\n    int bytesSize = (bits >>> 3);\n    if (bit1 > 0 && bytesSize == 0) {  // determine extra length\n      bytesSize = in.readVInt();\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        longs[pos] = in.readVLong();\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      bytes = new byte[bytesSize];\n      in.readBytes(bytes, 0, bytesSize);\n    }\n    if (bit2 > 0) {  // stats exist\n      int code = in.readVInt();\n      if (hasPos) {\n        totalTermFreq = docFreq = code >>> 1;\n        if ((code & 1) == 0) {\n          totalTermFreq += in.readVLong();\n        }\n      } else {\n        docFreq = code;\n      }\n    }\n    return new TempTermData(longs, bytes, docFreq, totalTermFreq);\n  }\n\n","sourceOld":"  @Override\n  public TempMetaData read(DataInput in) throws IOException {\n    long[] longs = new long[longsSize];\n    byte[] bytes = null;\n    int docFreq = 0;\n    long totalTermFreq = -1;\n    int bits = in.readByte() & 0xff;\n    int bit0 = bits & 1;\n    int bit1 = bits & 2;\n    int bit2 = bits & 4;\n    int bytesSize = (bits >>> 3);\n    if (bit1 > 0 && bytesSize == 0) {  // determine extra length\n      bytesSize = in.readVInt();\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        longs[pos] = in.readVLong();\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      bytes = new byte[bytesSize];\n      in.readBytes(bytes, 0, bytesSize);\n    }\n    if (bit2 > 0) {  // stats exist\n      int code = in.readVInt();\n      if (hasPos) {\n        totalTermFreq = docFreq = code >>> 1;\n        if ((code & 1) == 0) {\n          totalTermFreq += in.readVLong();\n        }\n      } else {\n        docFreq = code;\n      }\n    }\n    return new TempMetaData(longs, bytes, docFreq, totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#read(DataInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#read(DataInput).mjava","sourceNew":"  @Override\n  public TermData read(DataInput in) throws IOException {\n    long[] longs = new long[longsSize];\n    byte[] bytes = null;\n    int docFreq = 0;\n    long totalTermFreq = -1;\n    int bits = in.readByte() & 0xff;\n    int bit0 = bits & 1;\n    int bit1 = bits & 2;\n    int bit2 = bits & 4;\n    int bytesSize = (bits >>> 3);\n    if (bit1 > 0 && bytesSize == 0) {  // determine extra length\n      bytesSize = in.readVInt();\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        longs[pos] = in.readVLong();\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      bytes = new byte[bytesSize];\n      in.readBytes(bytes, 0, bytesSize);\n    }\n    if (bit2 > 0) {  // stats exist\n      int code = in.readVInt();\n      if (hasPos) {\n        totalTermFreq = docFreq = code >>> 1;\n        if ((code & 1) == 0) {\n          totalTermFreq += in.readVLong();\n        }\n      } else {\n        docFreq = code;\n      }\n    }\n    return new TermData(longs, bytes, docFreq, totalTermFreq);\n  }\n\n","sourceOld":"  @Override\n  public TempTermData read(DataInput in) throws IOException {\n    long[] longs = new long[longsSize];\n    byte[] bytes = null;\n    int docFreq = 0;\n    long totalTermFreq = -1;\n    int bits = in.readByte() & 0xff;\n    int bit0 = bits & 1;\n    int bit1 = bits & 2;\n    int bit2 = bits & 4;\n    int bytesSize = (bits >>> 3);\n    if (bit1 > 0 && bytesSize == 0) {  // determine extra length\n      bytesSize = in.readVInt();\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        longs[pos] = in.readVLong();\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      bytes = new byte[bytesSize];\n      in.readBytes(bytes, 0, bytesSize);\n    }\n    if (bit2 > 0) {  // stats exist\n      int code = in.readVInt();\n      if (hasPos) {\n        totalTermFreq = docFreq = code >>> 1;\n        if ((code & 1) == 0) {\n          totalTermFreq += in.readVLong();\n        }\n      } else {\n        docFreq = code;\n      }\n    }\n    return new TempTermData(longs, bytes, docFreq, totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56df73d43b6fc340f5332322862382c7e30f4368":["f71b8f76a3876ede75eba21fb109342525c3d9c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f71b8f76a3876ede75eba21fb109342525c3d9c4":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"56df73d43b6fc340f5332322862382c7e30f4368":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["f71b8f76a3876ede75eba21fb109342525c3d9c4"],"f71b8f76a3876ede75eba21fb109342525c3d9c4":["56df73d43b6fc340f5332322862382c7e30f4368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56df73d43b6fc340f5332322862382c7e30f4368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}