{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeDocsWithValue(Iterable[Number],NormMap,int).mjava","commits":[{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeDocsWithValue(Iterable[Number],NormMap,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeDocsWithValue(Iterable[Number],NormMap,int).mjava","sourceNew":"  private void writeDocsWithValue(final Iterable<Number> values, NormMap uniqueValues, int minOrd) throws IOException {\n    data.writeLong(uniqueValues.values[minOrd]);\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      int ord = uniqueValues.ord(n.byteValue());\n      if (ord > minOrd) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  private void writeDocsWithValue(final Iterable<Number> values, NormMap uniqueValues, int minOrd) throws IOException {\n    data.writeLong(uniqueValues.values[minOrd]);\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      int ord = uniqueValues.ord(n.byteValue());\n      if (ord > minOrd) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7","date":1472142029,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeDocsWithValue(Iterable[Number],NormMap,int).mjava","sourceNew":null,"sourceOld":"  private void writeDocsWithValue(final Iterable<Number> values, NormMap uniqueValues, int minOrd) throws IOException {\n    data.writeLong(uniqueValues.values[minOrd]);\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      int ord = uniqueValues.ord(n.byteValue());\n      if (ord > minOrd) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeDocsWithValue(Iterable[Number],NormMap,int).mjava","sourceNew":null,"sourceOld":"  private void writeDocsWithValue(final Iterable<Number> values, NormMap uniqueValues, int minOrd) throws IOException {\n    data.writeLong(uniqueValues.values[minOrd]);\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      int ord = uniqueValues.ord(n.byteValue());\n      if (ord > minOrd) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeDocsWithValue(Iterable[Number],NormMap,int).mjava","sourceNew":null,"sourceOld":"  private void writeDocsWithValue(final Iterable<Number> values, NormMap uniqueValues, int minOrd) throws IOException {\n    data.writeLong(uniqueValues.values[minOrd]);\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      int ord = uniqueValues.ord(n.byteValue());\n      if (ord > minOrd) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"]},"commit2Childs":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}