{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.MutableImpl#set(int,long[],int,int).mjava","commits":[{"id":"747628bb19a950ac2141b16756bdce9a47e94cc2","date":1338661284,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.MutableImpl#set(int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    public int set(int index, long[] arr, int off, int len) {\n      assert len > 0;\n      assert index >= 0 && index < valueCount;\n      len = Math.min(len, valueCount - index);\n      assert off + len <= arr.length;\n\n      for (int i = index, o = off, end = index + len; i < end; ++i, ++o) {\n        set(i, arr[o]);\n      }\n      return len;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a58c4ede2fdd3238e2129fbb330df4ecf79f2dda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a58c4ede2fdd3238e2129fbb330df4ecf79f2dda","date":1340008138,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.MutableImpl#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.MutableImpl#set(int,long[],int,int).mjava","sourceNew":"    public int set(int index, long[] arr, int off, int len) {\n      assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n      assert index >= 0 && index < valueCount;\n      len = Math.min(len, valueCount - index);\n      assert off + len <= arr.length;\n\n      for (int i = index, o = off, end = index + len; i < end; ++i, ++o) {\n        set(i, arr[o]);\n      }\n      return len;\n    }\n\n","sourceOld":"    public int set(int index, long[] arr, int off, int len) {\n      assert len > 0;\n      assert index >= 0 && index < valueCount;\n      len = Math.min(len, valueCount - index);\n      assert off + len <= arr.length;\n\n      for (int i = index, o = off, end = index + len; i < end; ++i, ++o) {\n        set(i, arr[o]);\n      }\n      return len;\n    }\n\n","bugFix":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.MutableImpl#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.MutableImpl#set(int,long[],int,int).mjava","sourceNew":"    @Override\n    public int set(int index, long[] arr, int off, int len) {\n      assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n      assert index >= 0 && index < valueCount;\n      len = Math.min(len, valueCount - index);\n      assert off + len <= arr.length;\n\n      for (int i = index, o = off, end = index + len; i < end; ++i, ++o) {\n        set(i, arr[o]);\n      }\n      return len;\n    }\n\n","sourceOld":"    public int set(int index, long[] arr, int off, int len) {\n      assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n      assert index >= 0 && index < valueCount;\n      len = Math.min(len, valueCount - index);\n      assert off + len <= arr.length;\n\n      for (int i = index, o = off, end = index + len; i < end; ++i, ++o) {\n        set(i, arr[o]);\n      }\n      return len;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.MutableImpl#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.MutableImpl#set(int,long[],int,int).mjava","sourceNew":"    @Override\n    public int set(int index, long[] arr, int off, int len) {\n      assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n      assert index >= 0 && index < valueCount;\n      len = Math.min(len, valueCount - index);\n      assert off + len <= arr.length;\n\n      for (int i = index, o = off, end = index + len; i < end; ++i, ++o) {\n        set(i, arr[o]);\n      }\n      return len;\n    }\n\n","sourceOld":"    public int set(int index, long[] arr, int off, int len) {\n      assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n      assert index >= 0 && index < valueCount;\n      len = Math.min(len, valueCount - index);\n      assert off + len <= arr.length;\n\n      for (int i = index, o = off, end = index + len; i < end; ++i, ++o) {\n        set(i, arr[o]);\n      }\n      return len;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d50d971859a3c7841c17117b0aac14e733441ebf","date":1384264257,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.MutableImpl#set(int,long[],int,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int set(int index, long[] arr, int off, int len) {\n      assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n      assert index >= 0 && index < valueCount;\n      len = Math.min(len, valueCount - index);\n      assert off + len <= arr.length;\n\n      for (int i = index, o = off, end = index + len; i < end; ++i, ++o) {\n        set(i, arr[o]);\n      }\n      return len;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d50d971859a3c7841c17117b0aac14e733441ebf":["7530de27b87b961b51f01bd1299b7004d46e8823"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a58c4ede2fdd3238e2129fbb330df4ecf79f2dda","7530de27b87b961b51f01bd1299b7004d46e8823"],"a58c4ede2fdd3238e2129fbb330df4ecf79f2dda":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["a58c4ede2fdd3238e2129fbb330df4ecf79f2dda"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d50d971859a3c7841c17117b0aac14e733441ebf"]},"commit2Childs":{"d50d971859a3c7841c17117b0aac14e733441ebf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a58c4ede2fdd3238e2129fbb330df4ecf79f2dda":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d50d971859a3c7841c17117b0aac14e733441ebf","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["a58c4ede2fdd3238e2129fbb330df4ecf79f2dda"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}