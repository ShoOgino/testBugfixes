{"path":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSameScores(Query,Query,Query).mjava","commits":[{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSameScores(Query,Query,Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSameScores(Query,Query,Filter).mjava","sourceNew":"  protected void assertSameScores(Query q1, Query q2, Query filter) throws Exception {\n    // not efficient, but simple!\n    if (filter != null) {\n      q1 = new BooleanQuery.Builder()\n          .add(q1, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n      q2 = new BooleanQuery.Builder()\n          .add(q2, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n    }\n    TopDocs td1 = s1.search(q1, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, reader.maxDoc());\n    assertEquals(td1.totalHits, td2.totalHits);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      assertEquals(td1.scoreDocs[i].doc, td2.scoreDocs[i].doc);\n      assertEquals(td1.scoreDocs[i].score, td2.scoreDocs[i].score, 10e-5);\n    }\n  }\n\n","sourceOld":"  protected void assertSameScores(Query q1, Query q2, Filter filter) throws Exception {\n    // not efficient, but simple!\n    if (filter != null) {\n      q1 = new FilteredQuery(q1, filter);\n      q2 = new FilteredQuery(q2, filter);\n    }\n    TopDocs td1 = s1.search(q1, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, reader.maxDoc());\n    assertEquals(td1.totalHits, td2.totalHits);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      assertEquals(td1.scoreDocs[i].doc, td2.scoreDocs[i].doc);\n      assertEquals(td1.scoreDocs[i].score, td2.scoreDocs[i].score, 10e-5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSameScores(Query,Query,Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSameScores(Query,Query,Query).mjava","sourceNew":"  protected void assertSameScores(Query q1, Query q2, Query filter) throws Exception {\n    // not efficient, but simple!\n    if (filter != null) {\n      q1 = new BooleanQuery.Builder()\n          .add(q1, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n      q2 = new BooleanQuery.Builder()\n          .add(q2, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n    }\n    TopDocs td1 = s1.search(q1, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, reader.maxDoc());\n    assertEquals(td1.totalHits.value, td2.totalHits.value);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      assertEquals(td1.scoreDocs[i].doc, td2.scoreDocs[i].doc);\n      assertEquals(td1.scoreDocs[i].score, td2.scoreDocs[i].score, 10e-5);\n    }\n  }\n\n","sourceOld":"  protected void assertSameScores(Query q1, Query q2, Query filter) throws Exception {\n    // not efficient, but simple!\n    if (filter != null) {\n      q1 = new BooleanQuery.Builder()\n          .add(q1, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n      q2 = new BooleanQuery.Builder()\n          .add(q2, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n    }\n    TopDocs td1 = s1.search(q1, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, reader.maxDoc());\n    assertEquals(td1.totalHits, td2.totalHits);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      assertEquals(td1.scoreDocs[i].doc, td2.scoreDocs[i].doc);\n      assertEquals(td1.scoreDocs[i].score, td2.scoreDocs[i].score, 10e-5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1db68e96dd908fcd79ef809095822736aa601d08":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["1db68e96dd908fcd79ef809095822736aa601d08"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"1db68e96dd908fcd79ef809095822736aa601d08":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1db68e96dd908fcd79ef809095822736aa601d08"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}