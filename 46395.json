{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/LengthFilterTest[TestLengthFilter2]#test().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/LengthFilterTest[TestLengthFilter2]#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/LengthFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    LengthFilterFactory factory = new LengthFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    // default: args.put(\"enablePositionIncrements\", \"false\");\n    factory.init(args);\n    String test = \"foo foobar super-duper-trooper\";\n    TokenStream stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 1 });\n\n    factory = new LengthFilterFactory();\n    args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    args.put(\"enablePositionIncrements\", \"true\");\n    factory.init(args);\n    stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 2 });\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    LengthFilterFactory factory = new LengthFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    // default: args.put(\"enablePositionIncrements\", \"false\");\n    factory.init(args);\n    String test = \"foo foobar super-duper-trooper\";\n    TokenStream stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 1 });\n\n    factory = new LengthFilterFactory();\n    args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    args.put(\"enablePositionIncrements\", \"true\");\n    factory.init(args);\n    stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"280bf88d9ed3d9923e393961b594d9553970e4fd","date":1343099563,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLengthFilterFactory#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/LengthFilterTest[TestLengthFilter2]#test().mjava","sourceNew":"  public void test() throws IOException {\n    LengthFilterFactory factory = new LengthFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    // default: args.put(\"enablePositionIncrements\", \"false\");\n    factory.init(args);\n    String test = \"foo foobar super-duper-trooper\";\n    TokenStream stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 1 });\n\n    factory = new LengthFilterFactory();\n    args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    args.put(\"enablePositionIncrements\", \"true\");\n    factory.init(args);\n    stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 2 });\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    LengthFilterFactory factory = new LengthFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    // default: args.put(\"enablePositionIncrements\", \"false\");\n    factory.init(args);\n    String test = \"foo foobar super-duper-trooper\";\n    TokenStream stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 1 });\n\n    factory = new LengthFilterFactory();\n    args = new HashMap<String, String>();\n    args.put(LengthFilterFactory.MIN_KEY, String.valueOf(4));\n    args.put(LengthFilterFactory.MAX_KEY, String.valueOf(10));\n    args.put(\"enablePositionIncrements\", \"true\");\n    factory.init(args);\n    stream = factory.create(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, new String[] { \"foobar\" }, new int[] { 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"280bf88d9ed3d9923e393961b594d9553970e4fd":["3241e06e642196396b80bb293acd9c0814d079e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"280bf88d9ed3d9923e393961b594d9553970e4fd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3241e06e642196396b80bb293acd9c0814d079e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["280bf88d9ed3d9923e393961b594d9553970e4fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["280bf88d9ed3d9923e393961b594d9553970e4fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}