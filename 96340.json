{"path":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomLongs(int).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomLongs(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#doTestRandomLongs(int).mjava","sourceNew":"  private void doTestRandomLongs(int count) throws Exception {\n\n    int numValues = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numValues=\" + numValues);\n    }\n\n    long[] values = new long[numValues];\n    int[] ids = new int[numValues];\n\n    boolean singleValued = random().nextBoolean();\n\n    int sameValuePct = random().nextInt(100);\n\n    int id = 0;\n    for (int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        values[ord] = values[random().nextInt(ord)];\n      } else {\n        values[ord] = randomValue(false);\n      }\n\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyLongs(values, ids);\n  }\n\n","sourceOld":"  private void doTestRandomLongs(int count) throws Exception {\n\n    int numValues = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numValues=\" + numValues);\n    }\n\n    long[] values = new long[numValues];\n    int[] ids = new int[numValues];\n\n    boolean singleValued = random().nextBoolean();\n\n    int sameValuePct = random().nextInt(100);\n\n    int id = 0;\n    for (int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        values[ord] = values[random().nextInt(ord)];\n      } else {\n        values[ord] = randomValue(false);\n      }\n\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyLongs(values, ids);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomLongs(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomLongs(int).mjava","sourceNew":"  private void doTestRandomLongs(int count) throws Exception {\n\n    int numValues = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numValues=\" + numValues);\n    }\n\n    long[] values = new long[numValues];\n    int[] ids = new int[numValues];\n\n    boolean singleValued = random().nextBoolean();\n\n    int sameValuePct = random().nextInt(100);\n\n    int id = 0;\n    for (int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        values[ord] = values[random().nextInt(ord)];\n      } else {\n        values[ord] = randomValue();\n      }\n\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyLongs(values, ids);\n  }\n\n","sourceOld":"  private void doTestRandomLongs(int count) throws Exception {\n\n    int numValues = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numValues=\" + numValues);\n    }\n\n    long[] values = new long[numValues];\n    int[] ids = new int[numValues];\n\n    boolean singleValued = random().nextBoolean();\n\n    int sameValuePct = random().nextInt(100);\n\n    int id = 0;\n    for (int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        values[ord] = values[random().nextInt(ord)];\n      } else {\n        values[ord] = randomValue(false);\n      }\n\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyLongs(values, ids);\n  }\n\n","bugFix":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomLongs(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomLongs(int).mjava","sourceNew":"  private void doTestRandomLongs(int count) throws Exception {\n\n    int numValues = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numValues=\" + numValues);\n    }\n\n    long[] values = new long[numValues];\n    int[] ids = new int[numValues];\n\n    boolean singleValued = random().nextBoolean();\n\n    int sameValuePct = random().nextInt(100);\n\n    int id = 0;\n    for (int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        values[ord] = values[random().nextInt(ord)];\n      } else {\n        values[ord] = randomValue();\n      }\n\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyLongs(values, ids);\n  }\n\n","sourceOld":"  private void doTestRandomLongs(int count) throws Exception {\n\n    int numValues = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numValues=\" + numValues);\n    }\n\n    long[] values = new long[numValues];\n    int[] ids = new int[numValues];\n\n    boolean singleValued = random().nextBoolean();\n\n    int sameValuePct = random().nextInt(100);\n\n    int id = 0;\n    for (int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        values[ord] = values[random().nextInt(ord)];\n      } else {\n        values[ord] = randomValue(false);\n      }\n\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyLongs(values, ids);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomLongs(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomLongs(int).mjava","sourceNew":"  private void doTestRandomLongs(int count) throws Exception {\n\n    int numValues = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numValues=\" + numValues);\n    }\n\n    long[] values = new long[numValues];\n    int[] ids = new int[numValues];\n\n    boolean singleValued = random().nextBoolean();\n\n    int sameValuePct = random().nextInt(100);\n\n    int id = 0;\n    for (int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        values[ord] = values[random().nextInt(ord)];\n      } else {\n        values[ord] = randomValue();\n      }\n\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyLongs(values, ids);\n  }\n\n","sourceOld":"  private void doTestRandomLongs(int count) throws Exception {\n\n    int numValues = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numValues=\" + numValues);\n    }\n\n    long[] values = new long[numValues];\n    int[] ids = new int[numValues];\n\n    boolean singleValued = random().nextBoolean();\n\n    int sameValuePct = random().nextInt(100);\n\n    int id = 0;\n    for (int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        values[ord] = values[random().nextInt(ord)];\n      } else {\n        values[ord] = randomValue(false);\n      }\n\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyLongs(values, ids);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c393c95b59b6ccd8e69fe6add414116af64d1be","date":1457357918,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomLongs(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomLongs(int).mjava","sourceNew":"  private void doTestRandomLongs(int count) throws Exception {\n\n    int numValues = TestUtil.nextInt(random(), count, count*2);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numValues=\" + numValues);\n    }\n\n    long[] values = new long[numValues];\n    int[] ids = new int[numValues];\n\n    boolean singleValued = random().nextBoolean();\n\n    int sameValuePct = random().nextInt(100);\n\n    int id = 0;\n    for (int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        values[ord] = values[random().nextInt(ord)];\n      } else {\n        values[ord] = randomValue();\n      }\n\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyLongs(values, ids);\n  }\n\n","sourceOld":"  private void doTestRandomLongs(int count) throws Exception {\n\n    int numValues = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numValues=\" + numValues);\n    }\n\n    long[] values = new long[numValues];\n    int[] ids = new int[numValues];\n\n    boolean singleValued = random().nextBoolean();\n\n    int sameValuePct = random().nextInt(100);\n\n    int id = 0;\n    for (int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        values[ord] = values[random().nextInt(ord)];\n      } else {\n        values[ord] = randomValue();\n      }\n\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyLongs(values, ids);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","c422e924212367b334b4938f1fd3e44438e88c40"],"c422e924212367b334b4938f1fd3e44438e88c40":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c393c95b59b6ccd8e69fe6add414116af64d1be"],"9c393c95b59b6ccd8e69fe6add414116af64d1be":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["9c393c95b59b6ccd8e69fe6add414116af64d1be"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9c393c95b59b6ccd8e69fe6add414116af64d1be":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}