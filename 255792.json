{"path":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkRefinementAndOverrequesting().mjava","commits":[{"id":"5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba","date":1513104620,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkRefinementAndOverrequesting().mjava","pathOld":"/dev/null","sourceNew":"  private void checkRefinementAndOverrequesting() throws Exception {\n    // // distributed queries // //\n    \n    { // w/o refinement, the default overrequest isn't enough to find the long 'tail' *OR* the correct count for 'bbb0'...\n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:none, limit:6, field:foo_s } }\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      \n      // this will be short the \"+1\" fo the doc added to shard2...\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\")); // 'tail' is missed\n      assertEquals(bucket.toString(), 100L, bucket.get(\"count\")); // will not include the \"+1\" for the doc added to shard2\n    }\n    \n    // even if we enable refinement, we still won't find the long 'tail' ...\n    // regardless of wether we use either the default overrequest, or disable overrequesting...\n    for (String over : Arrays.asList( \"\", \"overrequest:0,\")) { \n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:simple, limit:6, \"+ over +\" field:foo_s, facet:{ \" + ALL_STATS_JSON + \n                              \"  bar: { type:terms, refine:simple, limit:6, \"+ over +\" field:bar_s, facet:{\"+ALL_STATS_JSON+\"}}}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      // ...but it should have correctly asked shard2 to refine bbb0\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\"));\n      assertEquals(bucket.toString(), 101L, bucket.get(\"count\"));\n      // ...and the status under bbb0 should be correct to include the refinement\n      assertEquals(ALL_STATS.size() + 3, bucket.size()); // val,count,facet\n      assertEquals(-2L, bucket.get(\"min\"));                                         // this min only exists on shard2\n      assertEquals(1L, bucket.get(\"max\"));\n      // assertEquals(101L, bucket.get(\"num_values\")); // TODO: SOLR-11695\n      // assertEquals(0L, bucket.get(\"missing\")); // TODO: SOLR-11695\n      assertEquals(48.0D, bucket.get(\"sum\"));\n      assertEquals(0.475247524752475D, (double) bucket.get(\"avg\"), 0.1E-7);\n      assertEquals(54.0D, (double) bucket.get(\"sumsq\"), 0.1E-7);\n      // assertEquals(0.55846323792D, bucket.getStddev(), 0.1E-7); // TODO: SOLR-11725\n      assertEquals(0.55569169111D, (double) bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    }\n\n\n    // with a limit==6, we have to \"overrequest >= 20\" in order to ensure that 'tail' is included in the top 6\n    // this is because of how the \"simple\" refinement process works: the \"top buckets\" are determined based\n    // on the info available in the first pass request.\n    //\n    // Even though 'tail' is returned in the top6 for shard2, the cummulative total for 'bbb0' from shard0 and shard1 is\n    // high enough that the simple facet refinement ignores 'tail' because it assumes 'bbb0's final total will be greater.\n    //\n    // Meanwhile, for the sub-facet on 'bar', a limit==6 means we should correctly find 'tailB' as the top sub-term of 'tail',\n    // regardless of how much overrequest is used (or even if we don't have any refinement) since it's always in the top6...\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n\n\n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:6, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n    \n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(6, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // if we lower the limit on the sub-bucket to '5', overrequesting of at least 1 should still ensure \n    // that we get the correct top5 including \"tailB\" -- even w/o refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:1,\",\n                                          \"refine:simple, overrequest:1,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 5; i++) { // ccc(0-3)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // however: with a lower sub-facet limit==5, and overrequesting disabled, \n    // we're going to miss out on tailB even if we have refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      for (int i = 0; i < 5; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e8b2f4669f58c62f64c1de0df0908bd214f1f729"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"927e6deec13723e5fd6fb8f1e0457e8597dae15e","date":1513167013,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkRefinementAndOverrequesting().mjava","pathOld":"/dev/null","sourceNew":"  private void checkRefinementAndOverrequesting() throws Exception {\n    // // distributed queries // //\n    \n    { // w/o refinement, the default overrequest isn't enough to find the long 'tail' *OR* the correct count for 'bbb0'...\n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:none, limit:6, field:foo_s } }\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      \n      // this will be short the \"+1\" fo the doc added to shard2...\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\")); // 'tail' is missed\n      assertEquals(bucket.toString(), 100L, bucket.get(\"count\")); // will not include the \"+1\" for the doc added to shard2\n    }\n    \n    // even if we enable refinement, we still won't find the long 'tail' ...\n    // regardless of wether we use either the default overrequest, or disable overrequesting...\n    for (String over : Arrays.asList( \"\", \"overrequest:0,\")) { \n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:simple, limit:6, \"+ over +\" field:foo_s, facet:{ \" + ALL_STATS_JSON + \n                              \"  bar: { type:terms, refine:simple, limit:6, \"+ over +\" field:bar_s, facet:{\"+ALL_STATS_JSON+\"}}}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      // ...but it should have correctly asked shard2 to refine bbb0\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\"));\n      assertEquals(bucket.toString(), 101L, bucket.get(\"count\"));\n      // ...and the status under bbb0 should be correct to include the refinement\n      assertEquals(ALL_STATS.size() + 3, bucket.size()); // val,count,facet\n      assertEquals(-2L, bucket.get(\"min\"));                                         // this min only exists on shard2\n      assertEquals(1L, bucket.get(\"max\"));\n      // assertEquals(101L, bucket.get(\"num_values\")); // TODO: SOLR-11695\n      // assertEquals(0L, bucket.get(\"missing\")); // TODO: SOLR-11695\n      assertEquals(48.0D, bucket.get(\"sum\"));\n      assertEquals(0.475247524752475D, (double) bucket.get(\"avg\"), 0.1E-7);\n      assertEquals(54.0D, (double) bucket.get(\"sumsq\"), 0.1E-7);\n      // assertEquals(0.55846323792D, bucket.getStddev(), 0.1E-7); // TODO: SOLR-11725\n      assertEquals(0.55569169111D, (double) bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    }\n\n\n    // with a limit==6, we have to \"overrequest >= 20\" in order to ensure that 'tail' is included in the top 6\n    // this is because of how the \"simple\" refinement process works: the \"top buckets\" are determined based\n    // on the info available in the first pass request.\n    //\n    // Even though 'tail' is returned in the top6 for shard2, the cummulative total for 'bbb0' from shard0 and shard1 is\n    // high enough that the simple facet refinement ignores 'tail' because it assumes 'bbb0's final total will be greater.\n    //\n    // Meanwhile, for the sub-facet on 'bar', a limit==6 means we should correctly find 'tailB' as the top sub-term of 'tail',\n    // regardless of how much overrequest is used (or even if we don't have any refinement) since it's always in the top6...\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n\n\n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:6, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n    \n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(6, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // if we lower the limit on the sub-bucket to '5', overrequesting of at least 1 should still ensure \n    // that we get the correct top5 including \"tailB\" -- even w/o refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:1,\",\n                                          \"refine:simple, overrequest:1,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 5; i++) { // ccc(0-3)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // however: with a lower sub-facet limit==5, and overrequesting disabled, \n    // we're going to miss out on tailB even if we have refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      for (int i = 0; i < 5; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8ab0d0e3eeff82234ea56bd0a3bf61cc196bf316","date":1573886531,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkRefinementAndOverrequesting().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkRefinementAndOverrequesting().mjava","sourceNew":"  private void checkRefinementAndOverrequesting() throws Exception {\n    // // distributed queries // //\n\n    { // w/o refinement, the default overrequest isn't enough to find the long 'tail' *OR* the correct count for 'bbb0'...\n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:none, limit:6, field:foo_s } }\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      // this will be short the \"+1\" fo the doc added to shard2...\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\")); // 'tail' is missed\n      assertEquals(bucket.toString(), 100L, bucket.get(\"count\")); // will not include the \"+1\" for the doc added to shard2\n    }\n\n    // even if we enable refinement, we still won't find the long 'tail' ...\n    // regardless of wether we use either the default overrequest, or disable overrequesting...\n    for (String over : Arrays.asList( \"\", \"overrequest:0,\")) { \n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:simple, limit:6, \"+ over +\" field:foo_s, facet:{ \" + ALL_STATS_JSON + \n                              \"  bar: { type:terms, refine:simple, limit:6, \"+ over +\" field:bar_s, facet:{\"+ALL_STATS_JSON+\"}}}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      // ...but it should have correctly asked shard2 to refine bbb0\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\"));\n      assertEquals(bucket.toString(), 101L, bucket.get(\"count\"));\n      // ...and the status under bbb0 should be correct to include the refinement\n      assertEquals(ALL_STATS.size() + 3, bucket.size()); // val,count,facet\n      assertEquals(-2L, bucket.get(\"min\"));                                         // this min only exists on shard2\n      assertEquals(1L, bucket.get(\"max\"));\n      // assertEquals(101L, bucket.get(\"num_values\")); // TODO: SOLR-11695\n      assertEquals(0L, bucket.get(\"missing\"));\n      assertEquals(48.0D, bucket.get(\"sum\"));\n      assertEquals(0.475247524752475D, (double) bucket.get(\"avg\"), 0.1E-7);\n      assertEquals(54.0D, (double) bucket.get(\"sumsq\"), 0.1E-7);\n      // assertEquals(0.55846323792D, bucket.getStddev(), 0.1E-7); // TODO: SOLR-11725\n      assertEquals(0.55569169111D, (double) bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    }\n\n\n    // with a limit==6, we have to \"overrequest >= 20\" in order to ensure that 'tail' is included in the top 6\n    // this is because of how the \"simple\" refinement process works: the \"top buckets\" are determined based\n    // on the info available in the first pass request.\n    //\n    // Even though 'tail' is returned in the top6 for shard2, the cumulative total for 'bbb0' from shard0 and shard1 is\n    // high enough that the simple facet refinement ignores 'tail' because it assumes 'bbb0's final total will be greater.\n    //\n    // Meanwhile, for the sub-facet on 'bar', a limit==6 means we should correctly find 'tailB' as the top sub-term of 'tail',\n    // regardless of how much overrequest is used (or even if we don't have any refinement) since it's always in the top6...\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n\n\n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:6, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(6, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // if we lower the limit on the sub-bucket to '5', overrequesting of at least 1 should still ensure \n    // that we get the correct top5 including \"tailB\" -- even w/o refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:1,\",\n                                          \"refine:simple, overrequest:1,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 5; i++) { // ccc(0-3)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n    // however: with a lower sub-facet limit==5, and overrequesting disabled,\n    // we're going to miss out on tailB even if we have refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      for (int i = 0; i < 5; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void checkRefinementAndOverrequesting() throws Exception {\n    // // distributed queries // //\n    \n    { // w/o refinement, the default overrequest isn't enough to find the long 'tail' *OR* the correct count for 'bbb0'...\n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:none, limit:6, field:foo_s } }\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      \n      // this will be short the \"+1\" fo the doc added to shard2...\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\")); // 'tail' is missed\n      assertEquals(bucket.toString(), 100L, bucket.get(\"count\")); // will not include the \"+1\" for the doc added to shard2\n    }\n    \n    // even if we enable refinement, we still won't find the long 'tail' ...\n    // regardless of wether we use either the default overrequest, or disable overrequesting...\n    for (String over : Arrays.asList( \"\", \"overrequest:0,\")) { \n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:simple, limit:6, \"+ over +\" field:foo_s, facet:{ \" + ALL_STATS_JSON + \n                              \"  bar: { type:terms, refine:simple, limit:6, \"+ over +\" field:bar_s, facet:{\"+ALL_STATS_JSON+\"}}}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      // ...but it should have correctly asked shard2 to refine bbb0\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\"));\n      assertEquals(bucket.toString(), 101L, bucket.get(\"count\"));\n      // ...and the status under bbb0 should be correct to include the refinement\n      assertEquals(ALL_STATS.size() + 3, bucket.size()); // val,count,facet\n      assertEquals(-2L, bucket.get(\"min\"));                                         // this min only exists on shard2\n      assertEquals(1L, bucket.get(\"max\"));\n      // assertEquals(101L, bucket.get(\"num_values\")); // TODO: SOLR-11695\n      // assertEquals(0L, bucket.get(\"missing\")); // TODO: SOLR-11695\n      assertEquals(48.0D, bucket.get(\"sum\"));\n      assertEquals(0.475247524752475D, (double) bucket.get(\"avg\"), 0.1E-7);\n      assertEquals(54.0D, (double) bucket.get(\"sumsq\"), 0.1E-7);\n      // assertEquals(0.55846323792D, bucket.getStddev(), 0.1E-7); // TODO: SOLR-11725\n      assertEquals(0.55569169111D, (double) bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    }\n\n\n    // with a limit==6, we have to \"overrequest >= 20\" in order to ensure that 'tail' is included in the top 6\n    // this is because of how the \"simple\" refinement process works: the \"top buckets\" are determined based\n    // on the info available in the first pass request.\n    //\n    // Even though 'tail' is returned in the top6 for shard2, the cummulative total for 'bbb0' from shard0 and shard1 is\n    // high enough that the simple facet refinement ignores 'tail' because it assumes 'bbb0's final total will be greater.\n    //\n    // Meanwhile, for the sub-facet on 'bar', a limit==6 means we should correctly find 'tailB' as the top sub-term of 'tail',\n    // regardless of how much overrequest is used (or even if we don't have any refinement) since it's always in the top6...\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n\n\n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:6, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n    \n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(6, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // if we lower the limit on the sub-bucket to '5', overrequesting of at least 1 should still ensure \n    // that we get the correct top5 including \"tailB\" -- even w/o refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:1,\",\n                                          \"refine:simple, overrequest:1,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 5; i++) { // ccc(0-3)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // however: with a lower sub-facet limit==5, and overrequesting disabled, \n    // we're going to miss out on tailB even if we have refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      for (int i = 0; i < 5; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"356bbab82e5e26b4d86a88681d48baaf6103c4fc","date":1574426780,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkRefinementAndOverrequesting().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkRefinementAndOverrequesting().mjava","sourceNew":"  private void checkRefinementAndOverrequesting() throws Exception {\n    // // distributed queries // //\n\n    { // w/o refinement, the default overrequest isn't enough to find the long 'tail' *OR* the correct count for 'bbb0'...\n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:none, limit:6, field:foo_s } }\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      // this will be short the \"+1\" fo the doc added to shard2...\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\")); // 'tail' is missed\n      assertEquals(bucket.toString(), 100L, bucket.get(\"count\")); // will not include the \"+1\" for the doc added to shard2\n    }\n\n    // even if we enable refinement, we still won't find the long 'tail' ...\n    // regardless of wether we use either the default overrequest, or disable overrequesting...\n    for (String over : Arrays.asList( \"\", \"overrequest:0,\")) { \n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:simple, limit:6, \"+ over +\" field:foo_s, facet:{ \" + ALL_STATS_JSON + \n                              \"  bar: { type:terms, refine:simple, limit:6, \"+ over +\" field:bar_s, facet:{\"+ALL_STATS_JSON+\"}}}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      // ...but it should have correctly asked shard2 to refine bbb0\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\"));\n      assertEquals(bucket.toString(), 101L, bucket.get(\"count\"));\n      // ...and the status under bbb0 should be correct to include the refinement\n      assertEquals(ALL_STATS.size() + 3, bucket.size()); // val,count,facet\n      assertEquals(-2L, bucket.get(\"min\"));                                         // this min only exists on shard2\n      assertEquals(1L, bucket.get(\"max\"));\n      assertEquals(101L, bucket.get(\"countvals\"));\n      assertEquals(0L, bucket.get(\"missing\"));\n      assertEquals(48.0D, bucket.get(\"sum\"));\n      assertEquals(0.475247524752475D, (double) bucket.get(\"avg\"), 0.1E-7);\n      assertEquals(54.0D, (double) bucket.get(\"sumsq\"), 0.1E-7);\n      // assertEquals(0.55846323792D, bucket.getStddev(), 0.1E-7); // TODO: SOLR-11725\n      assertEquals(0.55569169111D, (double) bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    }\n\n\n    // with a limit==6, we have to \"overrequest >= 20\" in order to ensure that 'tail' is included in the top 6\n    // this is because of how the \"simple\" refinement process works: the \"top buckets\" are determined based\n    // on the info available in the first pass request.\n    //\n    // Even though 'tail' is returned in the top6 for shard2, the cumulative total for 'bbb0' from shard0 and shard1 is\n    // high enough that the simple facet refinement ignores 'tail' because it assumes 'bbb0's final total will be greater.\n    //\n    // Meanwhile, for the sub-facet on 'bar', a limit==6 means we should correctly find 'tailB' as the top sub-term of 'tail',\n    // regardless of how much overrequest is used (or even if we don't have any refinement) since it's always in the top6...\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n\n\n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:6, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(6, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // if we lower the limit on the sub-bucket to '5', overrequesting of at least 1 should still ensure \n    // that we get the correct top5 including \"tailB\" -- even w/o refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:1,\",\n                                          \"refine:simple, overrequest:1,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 5; i++) { // ccc(0-3)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n    // however: with a lower sub-facet limit==5, and overrequesting disabled,\n    // we're going to miss out on tailB even if we have refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      for (int i = 0; i < 5; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void checkRefinementAndOverrequesting() throws Exception {\n    // // distributed queries // //\n\n    { // w/o refinement, the default overrequest isn't enough to find the long 'tail' *OR* the correct count for 'bbb0'...\n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:none, limit:6, field:foo_s } }\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      // this will be short the \"+1\" fo the doc added to shard2...\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\")); // 'tail' is missed\n      assertEquals(bucket.toString(), 100L, bucket.get(\"count\")); // will not include the \"+1\" for the doc added to shard2\n    }\n\n    // even if we enable refinement, we still won't find the long 'tail' ...\n    // regardless of wether we use either the default overrequest, or disable overrequesting...\n    for (String over : Arrays.asList( \"\", \"overrequest:0,\")) { \n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:simple, limit:6, \"+ over +\" field:foo_s, facet:{ \" + ALL_STATS_JSON + \n                              \"  bar: { type:terms, refine:simple, limit:6, \"+ over +\" field:bar_s, facet:{\"+ALL_STATS_JSON+\"}}}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      // ...but it should have correctly asked shard2 to refine bbb0\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\"));\n      assertEquals(bucket.toString(), 101L, bucket.get(\"count\"));\n      // ...and the status under bbb0 should be correct to include the refinement\n      assertEquals(ALL_STATS.size() + 3, bucket.size()); // val,count,facet\n      assertEquals(-2L, bucket.get(\"min\"));                                         // this min only exists on shard2\n      assertEquals(1L, bucket.get(\"max\"));\n      // assertEquals(101L, bucket.get(\"num_values\")); // TODO: SOLR-11695\n      assertEquals(0L, bucket.get(\"missing\"));\n      assertEquals(48.0D, bucket.get(\"sum\"));\n      assertEquals(0.475247524752475D, (double) bucket.get(\"avg\"), 0.1E-7);\n      assertEquals(54.0D, (double) bucket.get(\"sumsq\"), 0.1E-7);\n      // assertEquals(0.55846323792D, bucket.getStddev(), 0.1E-7); // TODO: SOLR-11725\n      assertEquals(0.55569169111D, (double) bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    }\n\n\n    // with a limit==6, we have to \"overrequest >= 20\" in order to ensure that 'tail' is included in the top 6\n    // this is because of how the \"simple\" refinement process works: the \"top buckets\" are determined based\n    // on the info available in the first pass request.\n    //\n    // Even though 'tail' is returned in the top6 for shard2, the cumulative total for 'bbb0' from shard0 and shard1 is\n    // high enough that the simple facet refinement ignores 'tail' because it assumes 'bbb0's final total will be greater.\n    //\n    // Meanwhile, for the sub-facet on 'bar', a limit==6 means we should correctly find 'tailB' as the top sub-term of 'tail',\n    // regardless of how much overrequest is used (or even if we don't have any refinement) since it's always in the top6...\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n\n\n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:6, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(6, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // if we lower the limit on the sub-bucket to '5', overrequesting of at least 1 should still ensure \n    // that we get the correct top5 including \"tailB\" -- even w/o refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:1,\",\n                                          \"refine:simple, overrequest:1,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 5; i++) { // ccc(0-3)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n    // however: with a lower sub-facet limit==5, and overrequesting disabled,\n    // we're going to miss out on tailB even if we have refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      for (int i = 0; i < 5; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2fa9270995767ab6c92b235a5a62267aa426f47d","date":1575523102,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkRefinementAndOverrequesting().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkRefinementAndOverrequesting().mjava","sourceNew":"  private void checkRefinementAndOverrequesting() throws Exception {\n    // // distributed queries // //\n\n    { // w/o refinement, the default overrequest isn't enough to find the long 'tail' *OR* the correct count for 'bbb0'...\n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:none, limit:6, field:foo_s } }\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      // this will be short the \"+1\" fo the doc added to shard2...\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\")); // 'tail' is missed\n      assertEquals(bucket.toString(), 100L, bucket.get(\"count\")); // will not include the \"+1\" for the doc added to shard2\n    }\n\n    // even if we enable refinement, we still won't find the long 'tail' ...\n    // regardless of wether we use either the default overrequest, or disable overrequesting...\n    for (String over : Arrays.asList( \"\", \"overrequest:0,\")) { \n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:simple, limit:6, \"+ over +\" field:foo_s, facet:{ \" + ALL_STATS_JSON + \n                              \"  bar: { type:terms, refine:simple, limit:6, \"+ over +\" field:bar_s, facet:{\"+ALL_STATS_JSON+\"}}}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      // ...but it should have correctly asked shard2 to refine bbb0\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\"));\n      assertEquals(bucket.toString(), 101L, bucket.get(\"count\"));\n      // ...and the status under bbb0 should be correct to include the refinement\n      assertEquals(ALL_STATS.size() + 3, bucket.size()); // val,count,facet\n      assertEquals(-2L, bucket.get(\"min\"));                                         // this min only exists on shard2\n      assertEquals(1L, bucket.get(\"max\"));\n      assertEquals(101L, bucket.get(\"countvals\"));\n      assertEquals(0L, bucket.get(\"missing\"));\n      assertEquals(48.0D, bucket.get(\"sum\"));\n      assertEquals(1.0D, bucket.get(\"percentile\"));\n      assertEquals(0.475247524752475D, (double) bucket.get(\"avg\"), 0.1E-7);\n      assertEquals(54.0D, (double) bucket.get(\"sumsq\"), 0.1E-7);\n      // assertEquals(0.55846323792D, bucket.getStddev(), 0.1E-7); // TODO: SOLR-11725\n      assertEquals(0.55569169111D, (double) bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    }\n\n\n    // with a limit==6, we have to \"overrequest >= 20\" in order to ensure that 'tail' is included in the top 6\n    // this is because of how the \"simple\" refinement process works: the \"top buckets\" are determined based\n    // on the info available in the first pass request.\n    //\n    // Even though 'tail' is returned in the top6 for shard2, the cumulative total for 'bbb0' from shard0 and shard1 is\n    // high enough that the simple facet refinement ignores 'tail' because it assumes 'bbb0's final total will be greater.\n    //\n    // Meanwhile, for the sub-facet on 'bar', a limit==6 means we should correctly find 'tailB' as the top sub-term of 'tail',\n    // regardless of how much overrequest is used (or even if we don't have any refinement) since it's always in the top6...\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n\n\n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:6, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(6, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // if we lower the limit on the sub-bucket to '5', overrequesting of at least 1 should still ensure \n    // that we get the correct top5 including \"tailB\" -- even w/o refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:1,\",\n                                          \"refine:simple, overrequest:1,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 5; i++) { // ccc(0-3)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n    // however: with a lower sub-facet limit==5, and overrequesting disabled,\n    // we're going to miss out on tailB even if we have refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      for (int i = 0; i < 5; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void checkRefinementAndOverrequesting() throws Exception {\n    // // distributed queries // //\n\n    { // w/o refinement, the default overrequest isn't enough to find the long 'tail' *OR* the correct count for 'bbb0'...\n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:none, limit:6, field:foo_s } }\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      // this will be short the \"+1\" fo the doc added to shard2...\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\")); // 'tail' is missed\n      assertEquals(bucket.toString(), 100L, bucket.get(\"count\")); // will not include the \"+1\" for the doc added to shard2\n    }\n\n    // even if we enable refinement, we still won't find the long 'tail' ...\n    // regardless of wether we use either the default overrequest, or disable overrequesting...\n    for (String over : Arrays.asList( \"\", \"overrequest:0,\")) { \n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:simple, limit:6, \"+ over +\" field:foo_s, facet:{ \" + ALL_STATS_JSON + \n                              \"  bar: { type:terms, refine:simple, limit:6, \"+ over +\" field:bar_s, facet:{\"+ALL_STATS_JSON+\"}}}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      // ...but it should have correctly asked shard2 to refine bbb0\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\"));\n      assertEquals(bucket.toString(), 101L, bucket.get(\"count\"));\n      // ...and the status under bbb0 should be correct to include the refinement\n      assertEquals(ALL_STATS.size() + 3, bucket.size()); // val,count,facet\n      assertEquals(-2L, bucket.get(\"min\"));                                         // this min only exists on shard2\n      assertEquals(1L, bucket.get(\"max\"));\n      assertEquals(101L, bucket.get(\"countvals\"));\n      assertEquals(0L, bucket.get(\"missing\"));\n      assertEquals(48.0D, bucket.get(\"sum\"));\n      assertEquals(0.475247524752475D, (double) bucket.get(\"avg\"), 0.1E-7);\n      assertEquals(54.0D, (double) bucket.get(\"sumsq\"), 0.1E-7);\n      // assertEquals(0.55846323792D, bucket.getStddev(), 0.1E-7); // TODO: SOLR-11725\n      assertEquals(0.55569169111D, (double) bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    }\n\n\n    // with a limit==6, we have to \"overrequest >= 20\" in order to ensure that 'tail' is included in the top 6\n    // this is because of how the \"simple\" refinement process works: the \"top buckets\" are determined based\n    // on the info available in the first pass request.\n    //\n    // Even though 'tail' is returned in the top6 for shard2, the cumulative total for 'bbb0' from shard0 and shard1 is\n    // high enough that the simple facet refinement ignores 'tail' because it assumes 'bbb0's final total will be greater.\n    //\n    // Meanwhile, for the sub-facet on 'bar', a limit==6 means we should correctly find 'tailB' as the top sub-term of 'tail',\n    // regardless of how much overrequest is used (or even if we don't have any refinement) since it's always in the top6...\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n\n\n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:6, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(6, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // if we lower the limit on the sub-bucket to '5', overrequesting of at least 1 should still ensure \n    // that we get the correct top5 including \"tailB\" -- even w/o refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:1,\",\n                                          \"refine:simple, overrequest:1,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 5; i++) { // ccc(0-3)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n    // however: with a lower sub-facet limit==5, and overrequesting disabled,\n    // we're going to miss out on tailB even if we have refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      for (int i = 0; i < 5; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a90f561fc609ec007ba18b10dea9191dbbd71831","date":1575541054,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkRefinementAndOverrequesting().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkRefinementAndOverrequesting().mjava","sourceNew":"  private void checkRefinementAndOverrequesting() throws Exception {\n    // // distributed queries // //\n\n    { // w/o refinement, the default overrequest isn't enough to find the long 'tail' *OR* the correct count for 'bbb0'...\n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:none, limit:6, field:foo_s } }\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      // this will be short the \"+1\" fo the doc added to shard2...\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\")); // 'tail' is missed\n      assertEquals(bucket.toString(), 100L, bucket.get(\"count\")); // will not include the \"+1\" for the doc added to shard2\n    }\n\n    // even if we enable refinement, we still won't find the long 'tail' ...\n    // regardless of wether we use either the default overrequest, or disable overrequesting...\n    for (String over : Arrays.asList( \"\", \"overrequest:0,\")) { \n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:simple, limit:6, \"+ over +\" field:foo_s, facet:{ \" + ALL_STATS_JSON + \n                              \"  bar: { type:terms, refine:simple, limit:6, \"+ over +\" field:bar_s, facet:{\"+ALL_STATS_JSON+\"}}}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      // ...but it should have correctly asked shard2 to refine bbb0\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\"));\n      assertEquals(bucket.toString(), 101L, bucket.get(\"count\"));\n      // ...and the status under bbb0 should be correct to include the refinement\n      assertEquals(ALL_STATS.size() + 3, bucket.size()); // val,count,facet\n      assertEquals(-2L, bucket.get(\"min\"));                                         // this min only exists on shard2\n      assertEquals(1L, bucket.get(\"max\"));\n      assertEquals(101L, bucket.get(\"countvals\"));\n      assertEquals(0L, bucket.get(\"missing\"));\n      assertEquals(48.0D, bucket.get(\"sum\"));\n      assertEquals(1.0D, bucket.get(\"percentile\"));\n      assertEquals(0.475247524752475D, (double) bucket.get(\"avg\"), 0.1E-7);\n      assertEquals(54.0D, (double) bucket.get(\"sumsq\"), 0.1E-7);\n      // assertEquals(0.55846323792D, bucket.getStddev(), 0.1E-7); // TODO: SOLR-11725\n      assertEquals(0.55569169111D, (double) bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    }\n\n\n    // with a limit==6, we have to \"overrequest >= 20\" in order to ensure that 'tail' is included in the top 6\n    // this is because of how the \"simple\" refinement process works: the \"top buckets\" are determined based\n    // on the info available in the first pass request.\n    //\n    // Even though 'tail' is returned in the top6 for shard2, the cumulative total for 'bbb0' from shard0 and shard1 is\n    // high enough that the simple facet refinement ignores 'tail' because it assumes 'bbb0's final total will be greater.\n    //\n    // Meanwhile, for the sub-facet on 'bar', a limit==6 means we should correctly find 'tailB' as the top sub-term of 'tail',\n    // regardless of how much overrequest is used (or even if we don't have any refinement) since it's always in the top6...\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n\n\n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:6, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(6, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // if we lower the limit on the sub-bucket to '5', overrequesting of at least 1 should still ensure \n    // that we get the correct top5 including \"tailB\" -- even w/o refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:1,\",\n                                          \"refine:simple, overrequest:1,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 5; i++) { // ccc(0-3)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n    // however: with a lower sub-facet limit==5, and overrequesting disabled,\n    // we're going to miss out on tailB even if we have refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      for (int i = 0; i < 5; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void checkRefinementAndOverrequesting() throws Exception {\n    // // distributed queries // //\n\n    { // w/o refinement, the default overrequest isn't enough to find the long 'tail' *OR* the correct count for 'bbb0'...\n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:none, limit:6, field:foo_s } }\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      // this will be short the \"+1\" fo the doc added to shard2...\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\")); // 'tail' is missed\n      assertEquals(bucket.toString(), 100L, bucket.get(\"count\")); // will not include the \"+1\" for the doc added to shard2\n    }\n\n    // even if we enable refinement, we still won't find the long 'tail' ...\n    // regardless of wether we use either the default overrequest, or disable overrequesting...\n    for (String over : Arrays.asList( \"\", \"overrequest:0,\")) { \n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:simple, limit:6, \"+ over +\" field:foo_s, facet:{ \" + ALL_STATS_JSON + \n                              \"  bar: { type:terms, refine:simple, limit:6, \"+ over +\" field:bar_s, facet:{\"+ALL_STATS_JSON+\"}}}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      // ...but it should have correctly asked shard2 to refine bbb0\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\"));\n      assertEquals(bucket.toString(), 101L, bucket.get(\"count\"));\n      // ...and the status under bbb0 should be correct to include the refinement\n      assertEquals(ALL_STATS.size() + 3, bucket.size()); // val,count,facet\n      assertEquals(-2L, bucket.get(\"min\"));                                         // this min only exists on shard2\n      assertEquals(1L, bucket.get(\"max\"));\n      assertEquals(101L, bucket.get(\"countvals\"));\n      assertEquals(0L, bucket.get(\"missing\"));\n      assertEquals(48.0D, bucket.get(\"sum\"));\n      assertEquals(0.475247524752475D, (double) bucket.get(\"avg\"), 0.1E-7);\n      assertEquals(54.0D, (double) bucket.get(\"sumsq\"), 0.1E-7);\n      // assertEquals(0.55846323792D, bucket.getStddev(), 0.1E-7); // TODO: SOLR-11725\n      assertEquals(0.55569169111D, (double) bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    }\n\n\n    // with a limit==6, we have to \"overrequest >= 20\" in order to ensure that 'tail' is included in the top 6\n    // this is because of how the \"simple\" refinement process works: the \"top buckets\" are determined based\n    // on the info available in the first pass request.\n    //\n    // Even though 'tail' is returned in the top6 for shard2, the cumulative total for 'bbb0' from shard0 and shard1 is\n    // high enough that the simple facet refinement ignores 'tail' because it assumes 'bbb0's final total will be greater.\n    //\n    // Meanwhile, for the sub-facet on 'bar', a limit==6 means we should correctly find 'tailB' as the top sub-term of 'tail',\n    // regardless of how much overrequest is used (or even if we don't have any refinement) since it's always in the top6...\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n\n\n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:6, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(6, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // if we lower the limit on the sub-bucket to '5', overrequesting of at least 1 should still ensure \n    // that we get the correct top5 including \"tailB\" -- even w/o refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:1,\",\n                                          \"refine:simple, overrequest:1,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 5; i++) { // ccc(0-3)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n    // however: with a lower sub-facet limit==5, and overrequesting disabled,\n    // we're going to miss out on tailB even if we have refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      for (int i = 0; i < 5; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8b2f4669f58c62f64c1de0df0908bd214f1f729","date":1575782377,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkRefinementAndOverrequesting().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkRefinementAndOverrequesting().mjava","sourceNew":"  private void checkRefinementAndOverrequesting() throws Exception {\n    // // distributed queries // //\n\n    { // w/o refinement, the default overrequest isn't enough to find the long 'tail' *OR* the correct count for 'bbb0'...\n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:none, limit:6, field:foo_s } }\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      // this will be short the \"+1\" fo the doc added to shard2...\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\")); // 'tail' is missed\n      assertEquals(bucket.toString(), 100L, bucket.get(\"count\")); // will not include the \"+1\" for the doc added to shard2\n    }\n\n    // even if we enable refinement, we still won't find the long 'tail' ...\n    // regardless of wether we use either the default overrequest, or disable overrequesting...\n    for (String over : Arrays.asList( \"\", \"overrequest:0,\")) { \n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:simple, limit:6, \"+ over +\" field:foo_s, facet:{ \" + ALL_STATS_JSON + \n                              \"  bar: { type:terms, refine:simple, limit:6, \"+ over +\" field:bar_s, facet:{\"+ALL_STATS_JSON+\"}}}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      // ...but it should have correctly asked shard2 to refine bbb0\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\"));\n      assertEquals(bucket.toString(), 101L, bucket.get(\"count\"));\n      // ...and the status under bbb0 should be correct to include the refinement\n      assertEquals(ALL_STATS.size() + 3, bucket.size()); // val,count,facet\n      assertEquals(-2L, bucket.get(\"min\"));                                         // this min only exists on shard2\n      assertEquals(1L, bucket.get(\"max\"));\n      assertEquals(101L, bucket.get(\"countvals\"));\n      assertEquals(0L, bucket.get(\"missing\"));\n      assertEquals(48.0D, bucket.get(\"sum\"));\n      assertEquals(1.0D, bucket.get(\"percentile\"));\n      assertEquals(0.475247524752475D, (double) bucket.get(\"avg\"), 0.1E-7);\n      assertEquals(54.0D, (double) bucket.get(\"sumsq\"), 0.1E-7);\n      // assertEquals(0.55846323792D, (double) bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n      // assertEquals(0.3118811881D, (double) bucket.get(\"variance\"), 0.1E-7); // TODO: SOLR-11725\n      assertEquals(0.55569169111D, (double) bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n      assertEquals(0.3087932556D, (double) bucket.get(\"variance\"), 0.1E-7); // json.facet is using the \"uncorrected variance\"\n      assertEquals(3L, bucket.get(\"unique\"));\n      assertEquals(3L, bucket.get(\"hll\"));\n    }\n\n\n    // with a limit==6, we have to \"overrequest >= 20\" in order to ensure that 'tail' is included in the top 6\n    // this is because of how the \"simple\" refinement process works: the \"top buckets\" are determined based\n    // on the info available in the first pass request.\n    //\n    // Even though 'tail' is returned in the top6 for shard2, the cumulative total for 'bbb0' from shard0 and shard1 is\n    // high enough that the simple facet refinement ignores 'tail' because it assumes 'bbb0's final total will be greater.\n    //\n    // Meanwhile, for the sub-facet on 'bar', a limit==6 means we should correctly find 'tailB' as the top sub-term of 'tail',\n    // regardless of how much overrequest is used (or even if we don't have any refinement) since it's always in the top6...\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n\n\n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:6, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(6, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // if we lower the limit on the sub-bucket to '5', overrequesting of at least 1 should still ensure \n    // that we get the correct top5 including \"tailB\" -- even w/o refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:1,\",\n                                          \"refine:simple, overrequest:1,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 5; i++) { // ccc(0-3)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n    // however: with a lower sub-facet limit==5, and overrequesting disabled,\n    // we're going to miss out on tailB even if we have refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      for (int i = 0; i < 5; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void checkRefinementAndOverrequesting() throws Exception {\n    // // distributed queries // //\n\n    { // w/o refinement, the default overrequest isn't enough to find the long 'tail' *OR* the correct count for 'bbb0'...\n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:none, limit:6, field:foo_s } }\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      // this will be short the \"+1\" fo the doc added to shard2...\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\")); // 'tail' is missed\n      assertEquals(bucket.toString(), 100L, bucket.get(\"count\")); // will not include the \"+1\" for the doc added to shard2\n    }\n\n    // even if we enable refinement, we still won't find the long 'tail' ...\n    // regardless of wether we use either the default overrequest, or disable overrequesting...\n    for (String over : Arrays.asList( \"\", \"overrequest:0,\")) { \n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:simple, limit:6, \"+ over +\" field:foo_s, facet:{ \" + ALL_STATS_JSON + \n                              \"  bar: { type:terms, refine:simple, limit:6, \"+ over +\" field:bar_s, facet:{\"+ALL_STATS_JSON+\"}}}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      // ...but it should have correctly asked shard2 to refine bbb0\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\"));\n      assertEquals(bucket.toString(), 101L, bucket.get(\"count\"));\n      // ...and the status under bbb0 should be correct to include the refinement\n      assertEquals(ALL_STATS.size() + 3, bucket.size()); // val,count,facet\n      assertEquals(-2L, bucket.get(\"min\"));                                         // this min only exists on shard2\n      assertEquals(1L, bucket.get(\"max\"));\n      assertEquals(101L, bucket.get(\"countvals\"));\n      assertEquals(0L, bucket.get(\"missing\"));\n      assertEquals(48.0D, bucket.get(\"sum\"));\n      assertEquals(1.0D, bucket.get(\"percentile\"));\n      assertEquals(0.475247524752475D, (double) bucket.get(\"avg\"), 0.1E-7);\n      assertEquals(54.0D, (double) bucket.get(\"sumsq\"), 0.1E-7);\n      // assertEquals(0.55846323792D, bucket.getStddev(), 0.1E-7); // TODO: SOLR-11725\n      assertEquals(0.55569169111D, (double) bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    }\n\n\n    // with a limit==6, we have to \"overrequest >= 20\" in order to ensure that 'tail' is included in the top 6\n    // this is because of how the \"simple\" refinement process works: the \"top buckets\" are determined based\n    // on the info available in the first pass request.\n    //\n    // Even though 'tail' is returned in the top6 for shard2, the cumulative total for 'bbb0' from shard0 and shard1 is\n    // high enough that the simple facet refinement ignores 'tail' because it assumes 'bbb0's final total will be greater.\n    //\n    // Meanwhile, for the sub-facet on 'bar', a limit==6 means we should correctly find 'tailB' as the top sub-term of 'tail',\n    // regardless of how much overrequest is used (or even if we don't have any refinement) since it's always in the top6...\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n\n\n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:6, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(6, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // if we lower the limit on the sub-bucket to '5', overrequesting of at least 1 should still ensure \n    // that we get the correct top5 including \"tailB\" -- even w/o refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:1,\",\n                                          \"refine:simple, overrequest:1,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 5; i++) { // ccc(0-3)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n    // however: with a lower sub-facet limit==5, and overrequesting disabled,\n    // we're going to miss out on tailB even if we have refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      for (int i = 0; i < 5; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n  }\n\n","bugFix":["5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebdcd7cba625039937ab5b668449544f9dd36927","date":1575885354,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkRefinementAndOverrequesting().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkRefinementAndOverrequesting().mjava","sourceNew":"  private void checkRefinementAndOverrequesting() throws Exception {\n    // // distributed queries // //\n\n    { // w/o refinement, the default overrequest isn't enough to find the long 'tail' *OR* the correct count for 'bbb0'...\n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:none, limit:6, field:foo_s } }\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      // this will be short the \"+1\" fo the doc added to shard2...\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\")); // 'tail' is missed\n      assertEquals(bucket.toString(), 100L, bucket.get(\"count\")); // will not include the \"+1\" for the doc added to shard2\n    }\n\n    // even if we enable refinement, we still won't find the long 'tail' ...\n    // regardless of wether we use either the default overrequest, or disable overrequesting...\n    for (String over : Arrays.asList( \"\", \"overrequest:0,\")) { \n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:simple, limit:6, \"+ over +\" field:foo_s, facet:{ \" + ALL_STATS_JSON + \n                              \"  bar: { type:terms, refine:simple, limit:6, \"+ over +\" field:bar_s, facet:{\"+ALL_STATS_JSON+\"}}}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      // ...but it should have correctly asked shard2 to refine bbb0\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\"));\n      assertEquals(bucket.toString(), 101L, bucket.get(\"count\"));\n      // ...and the status under bbb0 should be correct to include the refinement\n      assertEquals(ALL_STATS.size() + 3, bucket.size()); // val,count,facet\n      assertEquals(-2L, bucket.get(\"min\"));                                         // this min only exists on shard2\n      assertEquals(1L, bucket.get(\"max\"));\n      assertEquals(101L, bucket.get(\"countvals\"));\n      assertEquals(0L, bucket.get(\"missing\"));\n      assertEquals(48.0D, bucket.get(\"sum\"));\n      assertEquals(1.0D, bucket.get(\"percentile\"));\n      assertEquals(0.475247524752475D, (double) bucket.get(\"avg\"), 0.1E-7);\n      assertEquals(54.0D, (double) bucket.get(\"sumsq\"), 0.1E-7);\n      // assertEquals(0.55846323792D, (double) bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n      // assertEquals(0.3118811881D, (double) bucket.get(\"variance\"), 0.1E-7); // TODO: SOLR-11725\n      assertEquals(0.55569169111D, (double) bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n      assertEquals(0.3087932556D, (double) bucket.get(\"variance\"), 0.1E-7); // json.facet is using the \"uncorrected variance\"\n      assertEquals(3L, bucket.get(\"unique\"));\n      assertEquals(3L, bucket.get(\"hll\"));\n    }\n\n\n    // with a limit==6, we have to \"overrequest >= 20\" in order to ensure that 'tail' is included in the top 6\n    // this is because of how the \"simple\" refinement process works: the \"top buckets\" are determined based\n    // on the info available in the first pass request.\n    //\n    // Even though 'tail' is returned in the top6 for shard2, the cumulative total for 'bbb0' from shard0 and shard1 is\n    // high enough that the simple facet refinement ignores 'tail' because it assumes 'bbb0's final total will be greater.\n    //\n    // Meanwhile, for the sub-facet on 'bar', a limit==6 means we should correctly find 'tailB' as the top sub-term of 'tail',\n    // regardless of how much overrequest is used (or even if we don't have any refinement) since it's always in the top6...\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n\n\n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:6, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(6, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // if we lower the limit on the sub-bucket to '5', overrequesting of at least 1 should still ensure \n    // that we get the correct top5 including \"tailB\" -- even w/o refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:1,\",\n                                          \"refine:simple, overrequest:1,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 5; i++) { // ccc(0-3)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n    // however: with a lower sub-facet limit==5, and overrequesting disabled,\n    // we're going to miss out on tailB even if we have refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      for (int i = 0; i < 5; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void checkRefinementAndOverrequesting() throws Exception {\n    // // distributed queries // //\n\n    { // w/o refinement, the default overrequest isn't enough to find the long 'tail' *OR* the correct count for 'bbb0'...\n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:none, limit:6, field:foo_s } }\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      // this will be short the \"+1\" fo the doc added to shard2...\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\")); // 'tail' is missed\n      assertEquals(bucket.toString(), 100L, bucket.get(\"count\")); // will not include the \"+1\" for the doc added to shard2\n    }\n\n    // even if we enable refinement, we still won't find the long 'tail' ...\n    // regardless of wether we use either the default overrequest, or disable overrequesting...\n    for (String over : Arrays.asList( \"\", \"overrequest:0,\")) { \n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:simple, limit:6, \"+ over +\" field:foo_s, facet:{ \" + ALL_STATS_JSON + \n                              \"  bar: { type:terms, refine:simple, limit:6, \"+ over +\" field:bar_s, facet:{\"+ALL_STATS_JSON+\"}}}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      // ...but it should have correctly asked shard2 to refine bbb0\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\"));\n      assertEquals(bucket.toString(), 101L, bucket.get(\"count\"));\n      // ...and the status under bbb0 should be correct to include the refinement\n      assertEquals(ALL_STATS.size() + 3, bucket.size()); // val,count,facet\n      assertEquals(-2L, bucket.get(\"min\"));                                         // this min only exists on shard2\n      assertEquals(1L, bucket.get(\"max\"));\n      assertEquals(101L, bucket.get(\"countvals\"));\n      assertEquals(0L, bucket.get(\"missing\"));\n      assertEquals(48.0D, bucket.get(\"sum\"));\n      assertEquals(1.0D, bucket.get(\"percentile\"));\n      assertEquals(0.475247524752475D, (double) bucket.get(\"avg\"), 0.1E-7);\n      assertEquals(54.0D, (double) bucket.get(\"sumsq\"), 0.1E-7);\n      // assertEquals(0.55846323792D, bucket.getStddev(), 0.1E-7); // TODO: SOLR-11725\n      assertEquals(0.55569169111D, (double) bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    }\n\n\n    // with a limit==6, we have to \"overrequest >= 20\" in order to ensure that 'tail' is included in the top 6\n    // this is because of how the \"simple\" refinement process works: the \"top buckets\" are determined based\n    // on the info available in the first pass request.\n    //\n    // Even though 'tail' is returned in the top6 for shard2, the cumulative total for 'bbb0' from shard0 and shard1 is\n    // high enough that the simple facet refinement ignores 'tail' because it assumes 'bbb0's final total will be greater.\n    //\n    // Meanwhile, for the sub-facet on 'bar', a limit==6 means we should correctly find 'tailB' as the top sub-term of 'tail',\n    // regardless of how much overrequest is used (or even if we don't have any refinement) since it's always in the top6...\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n\n\n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:6, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(6, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // if we lower the limit on the sub-bucket to '5', overrequesting of at least 1 should still ensure \n    // that we get the correct top5 including \"tailB\" -- even w/o refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:1,\",\n                                          \"refine:simple, overrequest:1,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 5; i++) { // ccc(0-3)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n    // however: with a lower sub-facet limit==5, and overrequesting disabled,\n    // we're going to miss out on tailB even if we have refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      for (int i = 0; i < 5; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c323a47ee02cccb79b79272be52db023360d339d","date":1584625917,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkRefinementAndOverrequesting().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkRefinementAndOverrequesting().mjava","sourceNew":"  private void checkRefinementAndOverrequesting() throws Exception {\n    // // distributed queries // //\n\n    { // w/o refinement, the default overrequest isn't enough to find the long 'tail' *OR* the correct count for 'bbb0'...\n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:none, limit:6, field:foo_s } }\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      // this will be short the \"+1\" fo the doc added to shard2...\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\")); // 'tail' is missed\n      assertEquals(bucket.toString(), 100L, bucket.get(\"count\")); // will not include the \"+1\" for the doc added to shard2\n    }\n\n    // even if we enable refinement, we still won't find the long 'tail' ...\n    // regardless of wether we use either the default overrequest, or disable overrequesting...\n    for (String over : Arrays.asList( \"\", \"overrequest:0,\")) { \n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:simple, limit:6, \"+ over +\" field:foo_s, facet:{ \" + ALL_STATS_JSON + \n                              \"  bar: { type:terms, refine:simple, limit:6, \"+ over +\" field:bar_s, facet:{\"+ALL_STATS_JSON+\"}}}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      // ...but it should have correctly asked shard2 to refine bbb0\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\"));\n      assertEquals(bucket.toString(), 101L, bucket.get(\"count\"));\n      // ...and the status under bbb0 should be correct to include the refinement\n      assertEquals(ALL_STATS.size() + 3, bucket.size()); // val,count,facet\n      assertEquals(-2L, bucket.get(\"min\"));                                         // this min only exists on shard2\n      assertEquals(1L, bucket.get(\"max\"));\n      assertEquals(101L, bucket.get(\"countvals\"));\n      assertEquals(0L, bucket.get(\"missing\"));\n      assertEquals(48.0D, bucket.get(\"sum\"));\n      assertEquals(1.0D, bucket.get(\"percentile\"));\n      assertEquals(0.475247524752475D, (double) bucket.get(\"avg\"), 0.1E-7);\n      assertEquals(54.0D, (double) bucket.get(\"sumsq\"), 0.1E-7);\n      assertEquals(0.55846323792D, (double) bucket.get(\"stddev\"), 0.1E-7);\n      assertEquals(0.3118811881D, (double) bucket.get(\"variance\"), 0.1E-7);\n      assertEquals(3L, bucket.get(\"unique\"));\n      assertEquals(3L, bucket.get(\"hll\"));\n    }\n\n\n    // with a limit==6, we have to \"overrequest >= 20\" in order to ensure that 'tail' is included in the top 6\n    // this is because of how the \"simple\" refinement process works: the \"top buckets\" are determined based\n    // on the info available in the first pass request.\n    //\n    // Even though 'tail' is returned in the top6 for shard2, the cumulative total for 'bbb0' from shard0 and shard1 is\n    // high enough that the simple facet refinement ignores 'tail' because it assumes 'bbb0's final total will be greater.\n    //\n    // Meanwhile, for the sub-facet on 'bar', a limit==6 means we should correctly find 'tailB' as the top sub-term of 'tail',\n    // regardless of how much overrequest is used (or even if we don't have any refinement) since it's always in the top6...\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n\n\n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:6, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(6, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // if we lower the limit on the sub-bucket to '5', overrequesting of at least 1 should still ensure \n    // that we get the correct top5 including \"tailB\" -- even w/o refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:1,\",\n                                          \"refine:simple, overrequest:1,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 5; i++) { // ccc(0-3)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n    // however: with a lower sub-facet limit==5, and overrequesting disabled,\n    // we're going to miss out on tailB even if we have refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      for (int i = 0; i < 5; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void checkRefinementAndOverrequesting() throws Exception {\n    // // distributed queries // //\n\n    { // w/o refinement, the default overrequest isn't enough to find the long 'tail' *OR* the correct count for 'bbb0'...\n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:none, limit:6, field:foo_s } }\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      // this will be short the \"+1\" fo the doc added to shard2...\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\")); // 'tail' is missed\n      assertEquals(bucket.toString(), 100L, bucket.get(\"count\")); // will not include the \"+1\" for the doc added to shard2\n    }\n\n    // even if we enable refinement, we still won't find the long 'tail' ...\n    // regardless of wether we use either the default overrequest, or disable overrequesting...\n    for (String over : Arrays.asList( \"\", \"overrequest:0,\")) { \n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:simple, limit:6, \"+ over +\" field:foo_s, facet:{ \" + ALL_STATS_JSON + \n                              \"  bar: { type:terms, refine:simple, limit:6, \"+ over +\" field:bar_s, facet:{\"+ALL_STATS_JSON+\"}}}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      // ...but it should have correctly asked shard2 to refine bbb0\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\"));\n      assertEquals(bucket.toString(), 101L, bucket.get(\"count\"));\n      // ...and the status under bbb0 should be correct to include the refinement\n      assertEquals(ALL_STATS.size() + 3, bucket.size()); // val,count,facet\n      assertEquals(-2L, bucket.get(\"min\"));                                         // this min only exists on shard2\n      assertEquals(1L, bucket.get(\"max\"));\n      assertEquals(101L, bucket.get(\"countvals\"));\n      assertEquals(0L, bucket.get(\"missing\"));\n      assertEquals(48.0D, bucket.get(\"sum\"));\n      assertEquals(1.0D, bucket.get(\"percentile\"));\n      assertEquals(0.475247524752475D, (double) bucket.get(\"avg\"), 0.1E-7);\n      assertEquals(54.0D, (double) bucket.get(\"sumsq\"), 0.1E-7);\n      // assertEquals(0.55846323792D, (double) bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n      // assertEquals(0.3118811881D, (double) bucket.get(\"variance\"), 0.1E-7); // TODO: SOLR-11725\n      assertEquals(0.55569169111D, (double) bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n      assertEquals(0.3087932556D, (double) bucket.get(\"variance\"), 0.1E-7); // json.facet is using the \"uncorrected variance\"\n      assertEquals(3L, bucket.get(\"unique\"));\n      assertEquals(3L, bucket.get(\"hll\"));\n    }\n\n\n    // with a limit==6, we have to \"overrequest >= 20\" in order to ensure that 'tail' is included in the top 6\n    // this is because of how the \"simple\" refinement process works: the \"top buckets\" are determined based\n    // on the info available in the first pass request.\n    //\n    // Even though 'tail' is returned in the top6 for shard2, the cumulative total for 'bbb0' from shard0 and shard1 is\n    // high enough that the simple facet refinement ignores 'tail' because it assumes 'bbb0's final total will be greater.\n    //\n    // Meanwhile, for the sub-facet on 'bar', a limit==6 means we should correctly find 'tailB' as the top sub-term of 'tail',\n    // regardless of how much overrequest is used (or even if we don't have any refinement) since it's always in the top6...\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n\n\n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:6, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(6, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // if we lower the limit on the sub-bucket to '5', overrequesting of at least 1 should still ensure \n    // that we get the correct top5 including \"tailB\" -- even w/o refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:1,\",\n                                          \"refine:simple, overrequest:1,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 5; i++) { // ccc(0-3)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n    // however: with a lower sub-facet limit==5, and overrequesting disabled,\n    // we're going to miss out on tailB even if we have refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      for (int i = 0; i < 5; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkRefinementAndOverrequesting().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkRefinementAndOverrequesting().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void checkRefinementAndOverrequesting() throws Exception {\n    // // distributed queries // //\n\n    { // w/o refinement, the default overrequest isn't enough to find the long 'tail' *OR* the correct count for 'bbb0'...\n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:none, limit:6, field:foo_s } }\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      // this will be short the \"+1\" fo the doc added to shard2...\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\")); // 'tail' is missed\n      assertEquals(bucket.toString(), 100L, bucket.get(\"count\")); // will not include the \"+1\" for the doc added to shard2\n    }\n\n    // even if we enable refinement, we still won't find the long 'tail' ...\n    // regardless of wether we use either the default overrequest, or disable overrequesting...\n    for (String over : Arrays.asList( \"\", \"overrequest:0,\")) { \n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:simple, limit:6, \"+ over +\" field:foo_s, facet:{ \" + ALL_STATS_JSON + \n                              \"  bar: { type:terms, refine:simple, limit:6, \"+ over +\" field:bar_s, facet:{\"+ALL_STATS_JSON+\"}}}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      // ...but it should have correctly asked shard2 to refine bbb0\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\"));\n      assertEquals(bucket.toString(), 101L, bucket.get(\"count\"));\n      // ...and the status under bbb0 should be correct to include the refinement\n      assertEquals(ALL_STATS.size() + 3, bucket.size()); // val,count,facet\n      assertEquals(-2L, bucket.get(\"min\"));                                         // this min only exists on shard2\n      assertEquals(1L, bucket.get(\"max\"));\n      assertEquals(101L, bucket.get(\"countvals\"));\n      assertEquals(0L, bucket.get(\"missing\"));\n      assertEquals(48.0D, bucket.get(\"sum\"));\n      assertEquals(1.0D, bucket.get(\"percentile\"));\n      assertEquals(0.475247524752475D, (double) bucket.get(\"avg\"), 0.1E-7);\n      assertEquals(54.0D, (double) bucket.get(\"sumsq\"), 0.1E-7);\n      assertEquals(0.55846323792D, (double) bucket.get(\"stddev\"), 0.1E-7);\n      assertEquals(0.3118811881D, (double) bucket.get(\"variance\"), 0.1E-7);\n      assertEquals(3L, bucket.get(\"unique\"));\n      assertEquals(3L, bucket.get(\"hll\"));\n    }\n\n\n    // with a limit==6, we have to \"overrequest >= 20\" in order to ensure that 'tail' is included in the top 6\n    // this is because of how the \"simple\" refinement process works: the \"top buckets\" are determined based\n    // on the info available in the first pass request.\n    //\n    // Even though 'tail' is returned in the top6 for shard2, the cumulative total for 'bbb0' from shard0 and shard1 is\n    // high enough that the simple facet refinement ignores 'tail' because it assumes 'bbb0's final total will be greater.\n    //\n    // Meanwhile, for the sub-facet on 'bar', a limit==6 means we should correctly find 'tailB' as the top sub-term of 'tail',\n    // regardless of how much overrequest is used (or even if we don't have any refinement) since it's always in the top6...\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n\n\n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:6, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(6, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // if we lower the limit on the sub-bucket to '5', overrequesting of at least 1 should still ensure \n    // that we get the correct top5 including \"tailB\" -- even w/o refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:1,\",\n                                          \"refine:simple, overrequest:1,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 5; i++) { // ccc(0-3)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n    // however: with a lower sub-facet limit==5, and overrequesting disabled,\n    // we're going to miss out on tailB even if we have refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      for (int i = 0; i < 5; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void checkRefinementAndOverrequesting() throws Exception {\n    // // distributed queries // //\n\n    { // w/o refinement, the default overrequest isn't enough to find the long 'tail' *OR* the correct count for 'bbb0'...\n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:none, limit:6, field:foo_s } }\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      // this will be short the \"+1\" fo the doc added to shard2...\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\")); // 'tail' is missed\n      assertEquals(bucket.toString(), 100L, bucket.get(\"count\")); // will not include the \"+1\" for the doc added to shard2\n    }\n\n    // even if we enable refinement, we still won't find the long 'tail' ...\n    // regardless of wether we use either the default overrequest, or disable overrequesting...\n    for (String over : Arrays.asList( \"\", \"overrequest:0,\")) { \n      List<NamedList> foo_buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, refine:simple, limit:6, \"+ over +\" field:foo_s, facet:{ \" + ALL_STATS_JSON + \n                              \"  bar: { type:terms, refine:simple, limit:6, \"+ over +\" field:bar_s, facet:{\"+ALL_STATS_JSON+\"}}}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      assertEquals(6, foo_buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = foo_buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      // ...but it should have correctly asked shard2 to refine bbb0\n      NamedList bucket = foo_buckets.get(5);\n      assertTrue(bucket.toString(), bucket.get(\"val\").equals(\"bbb0\"));\n      assertEquals(bucket.toString(), 101L, bucket.get(\"count\"));\n      // ...and the status under bbb0 should be correct to include the refinement\n      assertEquals(ALL_STATS.size() + 3, bucket.size()); // val,count,facet\n      assertEquals(-2L, bucket.get(\"min\"));                                         // this min only exists on shard2\n      assertEquals(1L, bucket.get(\"max\"));\n      assertEquals(101L, bucket.get(\"countvals\"));\n      assertEquals(0L, bucket.get(\"missing\"));\n      assertEquals(48.0D, bucket.get(\"sum\"));\n      assertEquals(1.0D, bucket.get(\"percentile\"));\n      assertEquals(0.475247524752475D, (double) bucket.get(\"avg\"), 0.1E-7);\n      assertEquals(54.0D, (double) bucket.get(\"sumsq\"), 0.1E-7);\n      assertEquals(0.55846323792D, (double) bucket.get(\"stddev\"), 0.1E-7);\n      assertEquals(0.3118811881D, (double) bucket.get(\"variance\"), 0.1E-7);\n      assertEquals(3L, bucket.get(\"unique\"));\n      assertEquals(3L, bucket.get(\"hll\"));\n    }\n\n\n    // with a limit==6, we have to \"overrequest >= 20\" in order to ensure that 'tail' is included in the top 6\n    // this is because of how the \"simple\" refinement process works: the \"top buckets\" are determined based\n    // on the info available in the first pass request.\n    //\n    // Even though 'tail' is returned in the top6 for shard2, the cumulative total for 'bbb0' from shard0 and shard1 is\n    // high enough that the simple facet refinement ignores 'tail' because it assumes 'bbb0's final total will be greater.\n    //\n    // Meanwhile, for the sub-facet on 'bar', a limit==6 means we should correctly find 'tailB' as the top sub-term of 'tail',\n    // regardless of how much overrequest is used (or even if we don't have any refinement) since it's always in the top6...\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n\n\n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:6, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(6, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n    \n    // if we lower the limit on the sub-bucket to '5', overrequesting of at least 1 should still ensure \n    // that we get the correct top5 including \"tailB\" -- even w/o refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,\",\n                                          \"refine:simple,\",\n                                          \"refine:none,   overrequest:1,\",\n                                          \"refine:simple, overrequest:1,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n      \n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      bucket = buckets.get(0);\n      assertEquals(bucket.toString(), \"tailB\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 17L, bucket.get(\"count\"));\n      for (int i = 1; i < 5; i++) { // ccc(0-3)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n    // however: with a lower sub-facet limit==5, and overrequesting disabled,\n    // we're going to miss out on tailB even if we have refinement\n    for (String bar_opts : Arrays.asList( \"refine:none,   overrequest:0,\",\n                                          \"refine:simple, overrequest:0,\" )) {\n      \n      List<NamedList> buckets = (List<NamedList>)\n        ((NamedList<NamedList>)\n         queryServer( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"json.facet\",\n                              \"{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ \" +\n                              \"  bar: { type:terms, limit:5, \" + bar_opts + \" field:bar_s }}}}\"\n                              ) ).getResponse().get(\"facets\")).get(\"foo\").get(\"buckets\");\n\n      assertEquals(6, buckets.size());\n      for (int i = 0; i < 5; i++) {\n        NamedList bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"aaa\"));\n        assertEquals(bucket.toString(), 300L, bucket.get(\"count\"));\n      }\n      NamedList bucket = buckets.get(5);\n      assertEquals(bucket.toString(), \"tail\", bucket.get(\"val\"));\n      assertEquals(bucket.toString(), 135L, bucket.get(\"count\"));\n      // check the sub buckets\n      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get(\"bar\").get(\"buckets\");\n      assertEquals(5, buckets.size());\n      for (int i = 0; i < 5; i++) { // ccc(0-4)\n        bucket = buckets.get(i);\n        assertTrue(bucket.toString(), bucket.get(\"val\").toString().startsWith(\"ccc\"));\n        assertEquals(bucket.toString(), 14L, bucket.get(\"count\"));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fa9270995767ab6c92b235a5a62267aa426f47d":["356bbab82e5e26b4d86a88681d48baaf6103c4fc"],"8ab0d0e3eeff82234ea56bd0a3bf61cc196bf316":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c323a47ee02cccb79b79272be52db023360d339d":["e8b2f4669f58c62f64c1de0df0908bd214f1f729"],"a90f561fc609ec007ba18b10dea9191dbbd71831":["356bbab82e5e26b4d86a88681d48baaf6103c4fc","2fa9270995767ab6c92b235a5a62267aa426f47d"],"356bbab82e5e26b4d86a88681d48baaf6103c4fc":["8ab0d0e3eeff82234ea56bd0a3bf61cc196bf316"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ebdcd7cba625039937ab5b668449544f9dd36927":["a90f561fc609ec007ba18b10dea9191dbbd71831","e8b2f4669f58c62f64c1de0df0908bd214f1f729"],"e8b2f4669f58c62f64c1de0df0908bd214f1f729":["2fa9270995767ab6c92b235a5a62267aa426f47d"],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["c323a47ee02cccb79b79272be52db023360d339d"]},"commit2Childs":{"2fa9270995767ab6c92b235a5a62267aa426f47d":["a90f561fc609ec007ba18b10dea9191dbbd71831","e8b2f4669f58c62f64c1de0df0908bd214f1f729"],"8ab0d0e3eeff82234ea56bd0a3bf61cc196bf316":["356bbab82e5e26b4d86a88681d48baaf6103c4fc"],"5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"c323a47ee02cccb79b79272be52db023360d339d":["e98520789adb1d5ad05afb4956eca0944a929688"],"a90f561fc609ec007ba18b10dea9191dbbd71831":["ebdcd7cba625039937ab5b668449544f9dd36927"],"356bbab82e5e26b4d86a88681d48baaf6103c4fc":["2fa9270995767ab6c92b235a5a62267aa426f47d","a90f561fc609ec007ba18b10dea9191dbbd71831"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba","927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"ebdcd7cba625039937ab5b668449544f9dd36927":[],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["8ab0d0e3eeff82234ea56bd0a3bf61cc196bf316"],"e8b2f4669f58c62f64c1de0df0908bd214f1f729":["c323a47ee02cccb79b79272be52db023360d339d","ebdcd7cba625039937ab5b668449544f9dd36927"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["ebdcd7cba625039937ab5b668449544f9dd36927","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}