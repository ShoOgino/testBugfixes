{"path":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrClient) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrClient client = (HttpSolrClient) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrClient c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrClient c : clients) {\n      HttpSolrClient httpClient = (HttpSolrClient) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      try (SolrCore core = cores.getCore(\"collection1\")) {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {\n          }\n\n          @Override\n          public void postSoftCommit() {\n          }\n\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n                                  SolrIndexSearcher currentSearcher) {\n          }\n        });\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(getShardCount(), commits.get());\n    \n    for (SolrClient c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n    \n    testDistribOpenSearcher();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrClient) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrClient client = (HttpSolrClient) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrClient c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrClient c : clients) {\n      HttpSolrClient httpClient = (HttpSolrClient) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      try (SolrCore core = cores.getCore(\"collection1\")) {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {\n          }\n\n          @Override\n          public void postSoftCommit() {\n          }\n\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n                                  SolrIndexSearcher currentSearcher) {\n          }\n        });\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrClient c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n    \n    testDistribOpenSearcher();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1088b72b3b4cc45316b7595bd09023c859cd2327","date":1447150009,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrClient) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrClient client = (HttpSolrClient) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrClient c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrClient c : clients) {\n      HttpSolrClient httpClient = (HttpSolrClient) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = jetty.getCoreContainer();\n      try (SolrCore core = cores.getCore(\"collection1\")) {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {\n          }\n\n          @Override\n          public void postSoftCommit() {\n          }\n\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n                                  SolrIndexSearcher currentSearcher) {\n          }\n        });\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(getShardCount(), commits.get());\n    \n    for (SolrClient c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n    \n    testDistribOpenSearcher();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrClient) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrClient client = (HttpSolrClient) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrClient c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrClient c : clients) {\n      HttpSolrClient httpClient = (HttpSolrClient) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      try (SolrCore core = cores.getCore(\"collection1\")) {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {\n          }\n\n          @Override\n          public void postSoftCommit() {\n          }\n\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n                                  SolrIndexSearcher currentSearcher) {\n          }\n        });\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(getShardCount(), commits.get());\n    \n    for (SolrClient c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n    \n    testDistribOpenSearcher();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<>();\n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    List<Error> errors;\n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    long numFound;\n    HttpSolrClient client;\n    ZkNodeProps nodeProps;\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          ((HttpSolrClient) controlClient).getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      // add one doc to controlClient\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n\n      errors = cmdDistrib.getErrors();\n\n      assertEquals(errors.toString(), 0, errors.size());\n\n      numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n      assertEquals(1, numFound);\n\n      client = (HttpSolrClient) clients.get(0);\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    int id2;\n    // add another 2 docs to control and 3 to client\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      id2 = id.incrementAndGet();\n      AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n      cmd2.solrDoc = sdoc(\"id\", id2);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd2, nodes, params);\n\n      AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n      cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n      errors = cmdDistrib.getErrors();\n    }\n    assertEquals(errors.toString(), 0, errors.size());\n\n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n\n    // now delete doc 2 which is on both control and client1\n\n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribDelete(dcmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      errors = cmdDistrib.getErrors();\n    }\n\n    assertEquals(errors.toString(), 0, errors.size());\n\n\n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      int cnt = atLeast(303);\n      for (int i = 0; i < cnt; i++) {\n        nodes.clear();\n        for (SolrClient c : clients) {\n          if (random().nextBoolean()) {\n            continue;\n          }\n          HttpSolrClient httpClient = (HttpSolrClient) c;\n          nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n          nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n        }\n        AddUpdateCommand c = new AddUpdateCommand(null);\n        c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n        if (nodes.size() > 0) {\n          params = new ModifiableSolrParams();\n          cmdDistrib.distribAdd(c, nodes, params);\n        }\n      }\n\n      nodes.clear();\n\n      for (SolrClient c : clients) {\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n      }\n\n      final AtomicInteger commits = new AtomicInteger();\n      for (JettySolrRunner jetty : jettys) {\n        CoreContainer cores = jetty.getCoreContainer();\n        try (SolrCore core = cores.getCore(\"collection1\")) {\n          core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n            @Override\n            public void init(NamedList args) {\n            }\n\n            @Override\n            public void postSoftCommit() {\n            }\n\n            @Override\n            public void postCommit() {\n              commits.incrementAndGet();\n            }\n\n            @Override\n            public void newSearcher(SolrIndexSearcher newSearcher,\n                                    SolrIndexSearcher currentSearcher) {\n            }\n          });\n        }\n      }\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n\n      cmdDistrib.finish();\n\n      assertEquals(getShardCount(), commits.get());\n\n      for (SolrClient c : clients) {\n        NamedList<Object> resp = c.request(new LukeRequest());\n        assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n            ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n            ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n      }\n    }\n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n    \n    testDistribOpenSearcher();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrClient) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrClient client = (HttpSolrClient) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrClient c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrClient c : clients) {\n      HttpSolrClient httpClient = (HttpSolrClient) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = jetty.getCoreContainer();\n      try (SolrCore core = cores.getCore(\"collection1\")) {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {\n          }\n\n          @Override\n          public void postSoftCommit() {\n          }\n\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n                                  SolrIndexSearcher currentSearcher) {\n          }\n        });\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(getShardCount(), commits.get());\n    \n    for (SolrClient c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n    \n    testDistribOpenSearcher();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3","date":1533596209,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#test().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<>();\n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    List<Error> errors;\n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    long numFound;\n    HttpSolrClient client;\n    ZkNodeProps nodeProps;\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          ((HttpSolrClient) controlClient).getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      // add one doc to controlClient\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n\n      errors = cmdDistrib.getErrors();\n\n      assertEquals(errors.toString(), 0, errors.size());\n\n      numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n      assertEquals(1, numFound);\n\n      client = (HttpSolrClient) clients.get(0);\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    int id2;\n    // add another 2 docs to control and 3 to client\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      id2 = id.incrementAndGet();\n      AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n      cmd2.solrDoc = sdoc(\"id\", id2);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd2, nodes, params);\n\n      AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n      cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n      errors = cmdDistrib.getErrors();\n    }\n    assertEquals(errors.toString(), 0, errors.size());\n\n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n\n    // now delete doc 2 which is on both control and client1\n\n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribDelete(dcmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      errors = cmdDistrib.getErrors();\n    }\n\n    assertEquals(errors.toString(), 0, errors.size());\n\n\n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      int cnt = atLeast(303);\n      for (int i = 0; i < cnt; i++) {\n        nodes.clear();\n        for (SolrClient c : clients) {\n          if (random().nextBoolean()) {\n            continue;\n          }\n          HttpSolrClient httpClient = (HttpSolrClient) c;\n          nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n          nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n        }\n        AddUpdateCommand c = new AddUpdateCommand(null);\n        c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n        if (nodes.size() > 0) {\n          params = new ModifiableSolrParams();\n          cmdDistrib.distribAdd(c, nodes, params);\n        }\n      }\n\n      nodes.clear();\n\n      for (SolrClient c : clients) {\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n      }\n\n      final AtomicInteger commits = new AtomicInteger();\n      for (JettySolrRunner jetty : jettys) {\n        CoreContainer cores = jetty.getCoreContainer();\n        try (SolrCore core = cores.getCore(\"collection1\")) {\n          core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n            @Override\n            public void init(NamedList args) {\n            }\n\n            @Override\n            public void postSoftCommit() {\n            }\n\n            @Override\n            public void postCommit() {\n              commits.incrementAndGet();\n            }\n\n            @Override\n            public void newSearcher(SolrIndexSearcher newSearcher,\n                                    SolrIndexSearcher currentSearcher) {\n            }\n          });\n        }\n      }\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n\n      cmdDistrib.finish();\n\n      assertEquals(getShardCount(), commits.get());\n\n      for (SolrClient c : clients) {\n        NamedList<Object> resp = c.request(new LukeRequest());\n        assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n            ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n            ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n      }\n    }\n    \n    testMaxRetries(NodeType.FORWARD);\n    testMaxRetries(NodeType.STANDARD);\n    testOneRetry(NodeType.FORWARD);\n    testOneRetry(NodeType.STANDARD);\n    testRetryNodeAgainstBadAddress();\n    testStdNodeRetriesSocketError();\n    testForwardNodeWontRetrySocketError();\n    testNodeWontRetryBadRequest(NodeType.FORWARD);\n    testNodeWontRetryBadRequest(NodeType.STANDARD);\n    testMinRfOnRetries(NodeType.FORWARD);\n    testMinRfOnRetries(NodeType.STANDARD);\n    testDistribOpenSearcher();\n    testReqShouldRetryNoRetries();\n    testReqShouldRetryMaxRetries();\n    testReqShouldRetryBadRequest();\n    testReqShouldRetryNotFound();\n    testReqShouldRetryDBQ();\n    testDeletes(false, true);\n    testDeletes(false, false);\n    testDeletes(true, true);\n    testDeletes(true, false);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<>();\n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    List<Error> errors;\n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    long numFound;\n    HttpSolrClient client;\n    ZkNodeProps nodeProps;\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          ((HttpSolrClient) controlClient).getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      // add one doc to controlClient\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n\n      errors = cmdDistrib.getErrors();\n\n      assertEquals(errors.toString(), 0, errors.size());\n\n      numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n      assertEquals(1, numFound);\n\n      client = (HttpSolrClient) clients.get(0);\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    int id2;\n    // add another 2 docs to control and 3 to client\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      id2 = id.incrementAndGet();\n      AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n      cmd2.solrDoc = sdoc(\"id\", id2);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd2, nodes, params);\n\n      AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n      cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n      errors = cmdDistrib.getErrors();\n    }\n    assertEquals(errors.toString(), 0, errors.size());\n\n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n\n    // now delete doc 2 which is on both control and client1\n\n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribDelete(dcmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      errors = cmdDistrib.getErrors();\n    }\n\n    assertEquals(errors.toString(), 0, errors.size());\n\n\n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      int cnt = atLeast(303);\n      for (int i = 0; i < cnt; i++) {\n        nodes.clear();\n        for (SolrClient c : clients) {\n          if (random().nextBoolean()) {\n            continue;\n          }\n          HttpSolrClient httpClient = (HttpSolrClient) c;\n          nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n          nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n        }\n        AddUpdateCommand c = new AddUpdateCommand(null);\n        c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n        if (nodes.size() > 0) {\n          params = new ModifiableSolrParams();\n          cmdDistrib.distribAdd(c, nodes, params);\n        }\n      }\n\n      nodes.clear();\n\n      for (SolrClient c : clients) {\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n      }\n\n      final AtomicInteger commits = new AtomicInteger();\n      for (JettySolrRunner jetty : jettys) {\n        CoreContainer cores = jetty.getCoreContainer();\n        try (SolrCore core = cores.getCore(\"collection1\")) {\n          core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n            @Override\n            public void init(NamedList args) {\n            }\n\n            @Override\n            public void postSoftCommit() {\n            }\n\n            @Override\n            public void postCommit() {\n              commits.incrementAndGet();\n            }\n\n            @Override\n            public void newSearcher(SolrIndexSearcher newSearcher,\n                                    SolrIndexSearcher currentSearcher) {\n            }\n          });\n        }\n      }\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n\n      cmdDistrib.finish();\n\n      assertEquals(getShardCount(), commits.get());\n\n      for (SolrClient c : clients) {\n        NamedList<Object> resp = c.request(new LukeRequest());\n        assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n            ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n            ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n      }\n    }\n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n    \n    testDistribOpenSearcher();\n  }\n\n","bugFix":["de8b178432c3f622f49a56587c62efe7c95982ad","0491dc45f6b12f57e9c33751e9317a01995556c6","28b49bc3bf9043888cb4243e659f6898fe2a95a9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd332226a93e244bd33f35c03128eb09cbf3c88","date":1570651010,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#test().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<>();\n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    List<Error> errors;\n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    long numFound;\n    HttpSolrClient client;\n    ZkNodeProps nodeProps;\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          ((HttpSolrClient) controlClient).getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      // add one doc to controlClient\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n\n      errors = cmdDistrib.getErrors();\n\n      assertEquals(errors.toString(), 0, errors.size());\n\n      numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n      assertEquals(1, numFound);\n\n      client = (HttpSolrClient) clients.get(0);\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    int id2;\n    // add another 2 docs to control and 3 to client\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      id2 = id.incrementAndGet();\n      AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n      cmd2.solrDoc = sdoc(\"id\", id2);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd2, nodes, params);\n\n      AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n      cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n      errors = cmdDistrib.getErrors();\n    }\n    assertEquals(errors.toString(), 0, errors.size());\n\n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n\n    // now delete doc 2 which is on both control and client1\n\n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribDelete(dcmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      errors = cmdDistrib.getErrors();\n    }\n\n    assertEquals(errors.toString(), 0, errors.size());\n\n\n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      int cnt = atLeast(303);\n      for (int i = 0; i < cnt; i++) {\n        nodes.clear();\n        for (SolrClient c : clients) {\n          if (random().nextBoolean()) {\n            continue;\n          }\n          HttpSolrClient httpClient = (HttpSolrClient) c;\n          nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n          nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n        }\n        AddUpdateCommand c = new AddUpdateCommand(null);\n        c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n        if (nodes.size() > 0) {\n          params = new ModifiableSolrParams();\n          cmdDistrib.distribAdd(c, nodes, params);\n        }\n      }\n\n      nodes.clear();\n\n      for (SolrClient c : clients) {\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n      }\n\n      final AtomicInteger commits = new AtomicInteger();\n      for (JettySolrRunner jetty : jettys) {\n        CoreContainer cores = jetty.getCoreContainer();\n        try (SolrCore core = cores.getCore(\"collection1\")) {\n          core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n            @Override\n            public void init(NamedList args) {\n            }\n\n            @Override\n            public void postSoftCommit() {\n            }\n\n            @Override\n            public void postCommit() {\n              commits.incrementAndGet();\n            }\n\n            @Override\n            public void newSearcher(SolrIndexSearcher newSearcher,\n                                    SolrIndexSearcher currentSearcher) {\n            }\n          });\n        }\n      }\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n\n      cmdDistrib.finish();\n\n      assertEquals(getShardCount(), commits.get());\n\n      for (SolrClient c : clients) {\n        NamedList<Object> resp = c.request(new LukeRequest());\n        assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n            ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n            ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n      }\n    }\n    \n    testMaxRetries(NodeType.FORWARD);\n    testMaxRetries(NodeType.STANDARD);\n    testOneRetry(NodeType.FORWARD);\n    testOneRetry(NodeType.STANDARD);\n    testRetryNodeAgainstBadAddress();\n    testStdNodeRetriesSocketError();\n    testForwardNodeWontRetrySocketError();\n    testNodeWontRetryBadRequest(NodeType.FORWARD);\n    testNodeWontRetryBadRequest(NodeType.STANDARD);\n    testMinRfOnRetries(NodeType.FORWARD);\n    testMinRfOnRetries(NodeType.STANDARD);\n    testDistribOpenSearcher();\n    testReqShouldRetryNoRetries();\n    testReqShouldRetryMaxRetries();\n    testReqShouldRetryBadRequest();\n    testReqShouldRetryNotFound();\n    testReqShouldRetryDBQ();\n    testDeletes(false, true);\n    testDeletes(false, false);\n    testDeletes(true, true);\n    testDeletes(true, false);\n    getRfFromResponseShouldNotCloseTheInputStream();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<>();\n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    List<Error> errors;\n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    long numFound;\n    HttpSolrClient client;\n    ZkNodeProps nodeProps;\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          ((HttpSolrClient) controlClient).getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      // add one doc to controlClient\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n\n      errors = cmdDistrib.getErrors();\n\n      assertEquals(errors.toString(), 0, errors.size());\n\n      numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n      assertEquals(1, numFound);\n\n      client = (HttpSolrClient) clients.get(0);\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    int id2;\n    // add another 2 docs to control and 3 to client\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      id2 = id.incrementAndGet();\n      AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n      cmd2.solrDoc = sdoc(\"id\", id2);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd2, nodes, params);\n\n      AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n      cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n      errors = cmdDistrib.getErrors();\n    }\n    assertEquals(errors.toString(), 0, errors.size());\n\n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n\n    // now delete doc 2 which is on both control and client1\n\n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribDelete(dcmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      errors = cmdDistrib.getErrors();\n    }\n\n    assertEquals(errors.toString(), 0, errors.size());\n\n\n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      int cnt = atLeast(303);\n      for (int i = 0; i < cnt; i++) {\n        nodes.clear();\n        for (SolrClient c : clients) {\n          if (random().nextBoolean()) {\n            continue;\n          }\n          HttpSolrClient httpClient = (HttpSolrClient) c;\n          nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n          nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n        }\n        AddUpdateCommand c = new AddUpdateCommand(null);\n        c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n        if (nodes.size() > 0) {\n          params = new ModifiableSolrParams();\n          cmdDistrib.distribAdd(c, nodes, params);\n        }\n      }\n\n      nodes.clear();\n\n      for (SolrClient c : clients) {\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n      }\n\n      final AtomicInteger commits = new AtomicInteger();\n      for (JettySolrRunner jetty : jettys) {\n        CoreContainer cores = jetty.getCoreContainer();\n        try (SolrCore core = cores.getCore(\"collection1\")) {\n          core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n            @Override\n            public void init(NamedList args) {\n            }\n\n            @Override\n            public void postSoftCommit() {\n            }\n\n            @Override\n            public void postCommit() {\n              commits.incrementAndGet();\n            }\n\n            @Override\n            public void newSearcher(SolrIndexSearcher newSearcher,\n                                    SolrIndexSearcher currentSearcher) {\n            }\n          });\n        }\n      }\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n\n      cmdDistrib.finish();\n\n      assertEquals(getShardCount(), commits.get());\n\n      for (SolrClient c : clients) {\n        NamedList<Object> resp = c.request(new LukeRequest());\n        assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n            ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n            ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n      }\n    }\n    \n    testMaxRetries(NodeType.FORWARD);\n    testMaxRetries(NodeType.STANDARD);\n    testOneRetry(NodeType.FORWARD);\n    testOneRetry(NodeType.STANDARD);\n    testRetryNodeAgainstBadAddress();\n    testStdNodeRetriesSocketError();\n    testForwardNodeWontRetrySocketError();\n    testNodeWontRetryBadRequest(NodeType.FORWARD);\n    testNodeWontRetryBadRequest(NodeType.STANDARD);\n    testMinRfOnRetries(NodeType.FORWARD);\n    testMinRfOnRetries(NodeType.STANDARD);\n    testDistribOpenSearcher();\n    testReqShouldRetryNoRetries();\n    testReqShouldRetryMaxRetries();\n    testReqShouldRetryBadRequest();\n    testReqShouldRetryNotFound();\n    testReqShouldRetryDBQ();\n    testDeletes(false, true);\n    testDeletes(false, false);\n    testDeletes(true, true);\n    testDeletes(true, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#test().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<>();\n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    List<Error> errors;\n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    long numFound;\n    HttpSolrClient client;\n    ZkNodeProps nodeProps;\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          ((HttpSolrClient) controlClient).getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      // add one doc to controlClient\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n\n      errors = cmdDistrib.getErrors();\n\n      assertEquals(errors.toString(), 0, errors.size());\n\n      numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n      assertEquals(1, numFound);\n\n      client = (HttpSolrClient) clients.get(0);\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    int id2;\n    // add another 2 docs to control and 3 to client\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      id2 = id.incrementAndGet();\n      AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n      cmd2.solrDoc = sdoc(\"id\", id2);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd2, nodes, params);\n\n      AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n      cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n      errors = cmdDistrib.getErrors();\n    }\n    assertEquals(errors.toString(), 0, errors.size());\n\n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n\n    // now delete doc 2 which is on both control and client1\n\n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribDelete(dcmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      errors = cmdDistrib.getErrors();\n    }\n\n    assertEquals(errors.toString(), 0, errors.size());\n\n\n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      int cnt = atLeast(303);\n      for (int i = 0; i < cnt; i++) {\n        nodes.clear();\n        for (SolrClient c : clients) {\n          if (random().nextBoolean()) {\n            continue;\n          }\n          HttpSolrClient httpClient = (HttpSolrClient) c;\n          nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n          nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n        }\n        AddUpdateCommand c = new AddUpdateCommand(null);\n        c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n        if (nodes.size() > 0) {\n          params = new ModifiableSolrParams();\n          cmdDistrib.distribAdd(c, nodes, params);\n        }\n      }\n\n      nodes.clear();\n\n      for (SolrClient c : clients) {\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n      }\n\n      final AtomicInteger commits = new AtomicInteger();\n      for (JettySolrRunner jetty : jettys) {\n        CoreContainer cores = jetty.getCoreContainer();\n        try (SolrCore core = cores.getCore(\"collection1\")) {\n          core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n            @Override\n            public void init(NamedList args) {\n            }\n\n            @Override\n            public void postSoftCommit() {\n            }\n\n            @Override\n            public void postCommit() {\n              commits.incrementAndGet();\n            }\n\n            @Override\n            public void newSearcher(SolrIndexSearcher newSearcher,\n                                    SolrIndexSearcher currentSearcher) {\n            }\n          });\n        }\n      }\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n\n      cmdDistrib.finish();\n\n      assertEquals(getShardCount(), commits.get());\n\n      for (SolrClient c : clients) {\n        NamedList<Object> resp = c.request(new LukeRequest());\n        assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n            ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n            ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n      }\n    }\n    \n    testMaxRetries(NodeType.FORWARD);\n    testMaxRetries(NodeType.STANDARD);\n    testOneRetry(NodeType.FORWARD);\n    testOneRetry(NodeType.STANDARD);\n    testRetryNodeAgainstBadAddress();\n    testStdNodeRetriesSocketError();\n    testForwardNodeWontRetrySocketError();\n    testNodeWontRetryBadRequest(NodeType.FORWARD);\n    testNodeWontRetryBadRequest(NodeType.STANDARD);\n    testMinRfOnRetries(NodeType.FORWARD);\n    testMinRfOnRetries(NodeType.STANDARD);\n    testDistribOpenSearcher();\n    testReqShouldRetryNoRetries();\n    testReqShouldRetryMaxRetries();\n    testReqShouldRetryBadRequest();\n    testReqShouldRetryNotFound();\n    testReqShouldRetryDBQ();\n    testDeletes(false, true);\n    testDeletes(false, false);\n    testDeletes(true, true);\n    testDeletes(true, false);\n    getRfFromResponseShouldNotCloseTheInputStream();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<>();\n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    List<Error> errors;\n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    long numFound;\n    HttpSolrClient client;\n    ZkNodeProps nodeProps;\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          ((HttpSolrClient) controlClient).getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      // add one doc to controlClient\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n\n      errors = cmdDistrib.getErrors();\n\n      assertEquals(errors.toString(), 0, errors.size());\n\n      numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n      assertEquals(1, numFound);\n\n      client = (HttpSolrClient) clients.get(0);\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    int id2;\n    // add another 2 docs to control and 3 to client\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      id2 = id.incrementAndGet();\n      AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n      cmd2.solrDoc = sdoc(\"id\", id2);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd2, nodes, params);\n\n      AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n      cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n      errors = cmdDistrib.getErrors();\n    }\n    assertEquals(errors.toString(), 0, errors.size());\n\n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n\n    // now delete doc 2 which is on both control and client1\n\n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribDelete(dcmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      errors = cmdDistrib.getErrors();\n    }\n\n    assertEquals(errors.toString(), 0, errors.size());\n\n\n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      int cnt = atLeast(303);\n      for (int i = 0; i < cnt; i++) {\n        nodes.clear();\n        for (SolrClient c : clients) {\n          if (random().nextBoolean()) {\n            continue;\n          }\n          HttpSolrClient httpClient = (HttpSolrClient) c;\n          nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n          nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n        }\n        AddUpdateCommand c = new AddUpdateCommand(null);\n        c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n        if (nodes.size() > 0) {\n          params = new ModifiableSolrParams();\n          cmdDistrib.distribAdd(c, nodes, params);\n        }\n      }\n\n      nodes.clear();\n\n      for (SolrClient c : clients) {\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n      }\n\n      final AtomicInteger commits = new AtomicInteger();\n      for (JettySolrRunner jetty : jettys) {\n        CoreContainer cores = jetty.getCoreContainer();\n        try (SolrCore core = cores.getCore(\"collection1\")) {\n          core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n            @Override\n            public void init(NamedList args) {\n            }\n\n            @Override\n            public void postSoftCommit() {\n            }\n\n            @Override\n            public void postCommit() {\n              commits.incrementAndGet();\n            }\n\n            @Override\n            public void newSearcher(SolrIndexSearcher newSearcher,\n                                    SolrIndexSearcher currentSearcher) {\n            }\n          });\n        }\n      }\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n\n      cmdDistrib.finish();\n\n      assertEquals(getShardCount(), commits.get());\n\n      for (SolrClient c : clients) {\n        NamedList<Object> resp = c.request(new LukeRequest());\n        assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n            ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n            ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n      }\n    }\n    \n    testMaxRetries(NodeType.FORWARD);\n    testMaxRetries(NodeType.STANDARD);\n    testOneRetry(NodeType.FORWARD);\n    testOneRetry(NodeType.STANDARD);\n    testRetryNodeAgainstBadAddress();\n    testStdNodeRetriesSocketError();\n    testForwardNodeWontRetrySocketError();\n    testNodeWontRetryBadRequest(NodeType.FORWARD);\n    testNodeWontRetryBadRequest(NodeType.STANDARD);\n    testMinRfOnRetries(NodeType.FORWARD);\n    testMinRfOnRetries(NodeType.STANDARD);\n    testDistribOpenSearcher();\n    testReqShouldRetryNoRetries();\n    testReqShouldRetryMaxRetries();\n    testReqShouldRetryBadRequest();\n    testReqShouldRetryNotFound();\n    testReqShouldRetryDBQ();\n    testDeletes(false, true);\n    testDeletes(false, false);\n    testDeletes(true, true);\n    testDeletes(true, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"482ca6c86d7073e3c19096bdc74fe0e73da4554a","date":1576010743,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#test().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<>();\n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    List<Error> errors;\n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    long numFound;\n    HttpSolrClient client;\n    ZkNodeProps nodeProps;\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          ((HttpSolrClient) controlClient).getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      // add one doc to controlClient\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n\n      errors = cmdDistrib.getErrors();\n\n      assertEquals(errors.toString(), 0, errors.size());\n\n      numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n      assertEquals(1, numFound);\n\n      client = (HttpSolrClient) clients.get(0);\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    int id2;\n    // add another 2 docs to control and 3 to client\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      id2 = id.incrementAndGet();\n      AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n      cmd2.solrDoc = sdoc(\"id\", id2);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd2, nodes, params);\n\n      AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n      cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n      errors = cmdDistrib.getErrors();\n    }\n    assertEquals(errors.toString(), 0, errors.size());\n\n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n\n    // now delete doc 2 which is on both control and client1\n\n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribDelete(dcmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      errors = cmdDistrib.getErrors();\n    }\n\n    assertEquals(errors.toString(), 0, errors.size());\n\n\n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      int cnt = atLeast(303);\n      for (int i = 0; i < cnt; i++) {\n        nodes.clear();\n        for (SolrClient c : clients) {\n          if (random().nextBoolean()) {\n            continue;\n          }\n          HttpSolrClient httpClient = (HttpSolrClient) c;\n          nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n          nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n        }\n        AddUpdateCommand c = new AddUpdateCommand(null);\n        c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n        if (nodes.size() > 0) {\n          params = new ModifiableSolrParams();\n          cmdDistrib.distribAdd(c, nodes, params);\n        }\n      }\n\n      nodes.clear();\n\n      for (SolrClient c : clients) {\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n      }\n\n      final AtomicInteger commits = new AtomicInteger();\n      for (JettySolrRunner jetty : jettys) {\n        CoreContainer cores = jetty.getCoreContainer();\n        try (SolrCore core = cores.getCore(\"collection1\")) {\n          core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n            @Override\n            public void init(NamedList args) {\n            }\n\n            @Override\n            public void postSoftCommit() {\n            }\n\n            @Override\n            public void postCommit() {\n              commits.incrementAndGet();\n            }\n\n            @Override\n            public void newSearcher(SolrIndexSearcher newSearcher,\n                                    SolrIndexSearcher currentSearcher) {\n            }\n          });\n        }\n      }\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n\n      cmdDistrib.finish();\n\n      assertEquals(getShardCount(), commits.get());\n\n      for (SolrClient c : clients) {\n        NamedList<Object> resp = c.request(new LukeRequest());\n        assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n            ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n            ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n      }\n    }\n    \n    testMaxRetries(NodeType.FORWARD);\n    testMaxRetries(NodeType.STANDARD);\n    testOneRetry(NodeType.FORWARD);\n    testOneRetry(NodeType.STANDARD);\n    testRetryNodeAgainstBadAddress();\n    testStdNodeRetriesSocketError();\n    testForwardNodeWontRetrySocketError();\n    testNodeWontRetryBadRequest(NodeType.FORWARD);\n    testNodeWontRetryBadRequest(NodeType.STANDARD);\n    testMinRfOnRetries(NodeType.FORWARD);\n    testMinRfOnRetries(NodeType.STANDARD);\n    testDistribOpenSearcher();\n    testReqShouldRetryNoRetries();\n    testReqShouldRetryMaxRetries();\n    testReqShouldRetryBadRequest();\n    testReqShouldRetryNotFound();\n    testReqShouldRetryDBQ();\n    testDeletes(false, true);\n    testDeletes(false, false);\n    testDeletes(true, true);\n    testDeletes(true, false);\n    getRfFromResponseShouldNotCloseTheInputStream();\n    testStuckUpdates();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<>();\n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    List<Error> errors;\n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    long numFound;\n    HttpSolrClient client;\n    ZkNodeProps nodeProps;\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          ((HttpSolrClient) controlClient).getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      // add one doc to controlClient\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n\n      errors = cmdDistrib.getErrors();\n\n      assertEquals(errors.toString(), 0, errors.size());\n\n      numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n      assertEquals(1, numFound);\n\n      client = (HttpSolrClient) clients.get(0);\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    int id2;\n    // add another 2 docs to control and 3 to client\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      id2 = id.incrementAndGet();\n      AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n      cmd2.solrDoc = sdoc(\"id\", id2);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd2, nodes, params);\n\n      AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n      cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n      errors = cmdDistrib.getErrors();\n    }\n    assertEquals(errors.toString(), 0, errors.size());\n\n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n\n    // now delete doc 2 which is on both control and client1\n\n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribDelete(dcmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      errors = cmdDistrib.getErrors();\n    }\n\n    assertEquals(errors.toString(), 0, errors.size());\n\n\n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      int cnt = atLeast(303);\n      for (int i = 0; i < cnt; i++) {\n        nodes.clear();\n        for (SolrClient c : clients) {\n          if (random().nextBoolean()) {\n            continue;\n          }\n          HttpSolrClient httpClient = (HttpSolrClient) c;\n          nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n          nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n        }\n        AddUpdateCommand c = new AddUpdateCommand(null);\n        c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n        if (nodes.size() > 0) {\n          params = new ModifiableSolrParams();\n          cmdDistrib.distribAdd(c, nodes, params);\n        }\n      }\n\n      nodes.clear();\n\n      for (SolrClient c : clients) {\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n      }\n\n      final AtomicInteger commits = new AtomicInteger();\n      for (JettySolrRunner jetty : jettys) {\n        CoreContainer cores = jetty.getCoreContainer();\n        try (SolrCore core = cores.getCore(\"collection1\")) {\n          core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n            @Override\n            public void init(NamedList args) {\n            }\n\n            @Override\n            public void postSoftCommit() {\n            }\n\n            @Override\n            public void postCommit() {\n              commits.incrementAndGet();\n            }\n\n            @Override\n            public void newSearcher(SolrIndexSearcher newSearcher,\n                                    SolrIndexSearcher currentSearcher) {\n            }\n          });\n        }\n      }\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n\n      cmdDistrib.finish();\n\n      assertEquals(getShardCount(), commits.get());\n\n      for (SolrClient c : clients) {\n        NamedList<Object> resp = c.request(new LukeRequest());\n        assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n            ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n            ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n      }\n    }\n    \n    testMaxRetries(NodeType.FORWARD);\n    testMaxRetries(NodeType.STANDARD);\n    testOneRetry(NodeType.FORWARD);\n    testOneRetry(NodeType.STANDARD);\n    testRetryNodeAgainstBadAddress();\n    testStdNodeRetriesSocketError();\n    testForwardNodeWontRetrySocketError();\n    testNodeWontRetryBadRequest(NodeType.FORWARD);\n    testNodeWontRetryBadRequest(NodeType.STANDARD);\n    testMinRfOnRetries(NodeType.FORWARD);\n    testMinRfOnRetries(NodeType.STANDARD);\n    testDistribOpenSearcher();\n    testReqShouldRetryNoRetries();\n    testReqShouldRetryMaxRetries();\n    testReqShouldRetryBadRequest();\n    testReqShouldRetryNotFound();\n    testReqShouldRetryDBQ();\n    testDeletes(false, true);\n    testDeletes(false, false);\n    testDeletes(true, true);\n    testDeletes(true, false);\n    getRfFromResponseShouldNotCloseTheInputStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#test().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<>();\n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    List<Error> errors;\n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    long numFound;\n    HttpSolrClient client;\n    ZkNodeProps nodeProps;\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          ((HttpSolrClient) controlClient).getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      // add one doc to controlClient\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n\n      errors = cmdDistrib.getErrors();\n\n      assertEquals(errors.toString(), 0, errors.size());\n\n      numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n      assertEquals(1, numFound);\n\n      client = (HttpSolrClient) clients.get(0);\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    int id2;\n    // add another 2 docs to control and 3 to client\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      id2 = id.incrementAndGet();\n      AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n      cmd2.solrDoc = sdoc(\"id\", id2);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd2, nodes, params);\n\n      AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n      cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n      errors = cmdDistrib.getErrors();\n    }\n    assertEquals(errors.toString(), 0, errors.size());\n\n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n\n    // now delete doc 2 which is on both control and client1\n\n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribDelete(dcmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      errors = cmdDistrib.getErrors();\n    }\n\n    assertEquals(errors.toString(), 0, errors.size());\n\n\n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      int cnt = atLeast(303);\n      for (int i = 0; i < cnt; i++) {\n        nodes.clear();\n        for (SolrClient c : clients) {\n          if (random().nextBoolean()) {\n            continue;\n          }\n          HttpSolrClient httpClient = (HttpSolrClient) c;\n          nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n          nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n        }\n        AddUpdateCommand c = new AddUpdateCommand(null);\n        c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n        if (nodes.size() > 0) {\n          params = new ModifiableSolrParams();\n          cmdDistrib.distribAdd(c, nodes, params);\n        }\n      }\n\n      nodes.clear();\n\n      for (SolrClient c : clients) {\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n      }\n\n      final AtomicInteger commits = new AtomicInteger();\n      for (JettySolrRunner jetty : jettys) {\n        CoreContainer cores = jetty.getCoreContainer();\n        try (SolrCore core = cores.getCore(\"collection1\")) {\n          core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n            @Override\n            public void init(NamedList args) {\n            }\n\n            @Override\n            public void postSoftCommit() {\n            }\n\n            @Override\n            public void postCommit() {\n              commits.incrementAndGet();\n            }\n\n            @Override\n            public void newSearcher(SolrIndexSearcher newSearcher,\n                                    SolrIndexSearcher currentSearcher) {\n            }\n          });\n        }\n      }\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n\n      cmdDistrib.finish();\n\n      assertEquals(getShardCount(), commits.get());\n\n      for (SolrClient c : clients) {\n        NamedList<Object> resp = c.request(new LukeRequest());\n        assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n            ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n            ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n      }\n    }\n    \n    testMaxRetries(NodeType.FORWARD);\n    testMaxRetries(NodeType.STANDARD);\n    testOneRetry(NodeType.FORWARD);\n    testOneRetry(NodeType.STANDARD);\n    testRetryNodeAgainstBadAddress();\n    testStdNodeRetriesSocketError();\n    testForwardNodeWontRetrySocketError();\n    testNodeWontRetryBadRequest(NodeType.FORWARD);\n    testNodeWontRetryBadRequest(NodeType.STANDARD);\n    testMinRfOnRetries(NodeType.FORWARD);\n    testMinRfOnRetries(NodeType.STANDARD);\n    testDistribOpenSearcher();\n    testReqShouldRetryNoRetries();\n    testReqShouldRetryMaxRetries();\n    testReqShouldRetryBadRequest();\n    testReqShouldRetryNotFound();\n    testReqShouldRetryDBQ();\n    testDeletes(false, true);\n    testDeletes(false, false);\n    testDeletes(true, true);\n    testDeletes(true, false);\n    getRfFromResponseShouldNotCloseTheInputStream();\n    testStuckUpdates();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<>();\n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    List<Error> errors;\n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    long numFound;\n    HttpSolrClient client;\n    ZkNodeProps nodeProps;\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          ((HttpSolrClient) controlClient).getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      // add one doc to controlClient\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n\n      errors = cmdDistrib.getErrors();\n\n      assertEquals(errors.toString(), 0, errors.size());\n\n      numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n      assertEquals(1, numFound);\n\n      client = (HttpSolrClient) clients.get(0);\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    int id2;\n    // add another 2 docs to control and 3 to client\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      id2 = id.incrementAndGet();\n      AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n      cmd2.solrDoc = sdoc(\"id\", id2);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd2, nodes, params);\n\n      AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n      cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n      errors = cmdDistrib.getErrors();\n    }\n    assertEquals(errors.toString(), 0, errors.size());\n\n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n\n    // now delete doc 2 which is on both control and client1\n\n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribDelete(dcmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      errors = cmdDistrib.getErrors();\n    }\n\n    assertEquals(errors.toString(), 0, errors.size());\n\n\n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      int cnt = atLeast(303);\n      for (int i = 0; i < cnt; i++) {\n        nodes.clear();\n        for (SolrClient c : clients) {\n          if (random().nextBoolean()) {\n            continue;\n          }\n          HttpSolrClient httpClient = (HttpSolrClient) c;\n          nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n          nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n        }\n        AddUpdateCommand c = new AddUpdateCommand(null);\n        c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n        if (nodes.size() > 0) {\n          params = new ModifiableSolrParams();\n          cmdDistrib.distribAdd(c, nodes, params);\n        }\n      }\n\n      nodes.clear();\n\n      for (SolrClient c : clients) {\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n      }\n\n      final AtomicInteger commits = new AtomicInteger();\n      for (JettySolrRunner jetty : jettys) {\n        CoreContainer cores = jetty.getCoreContainer();\n        try (SolrCore core = cores.getCore(\"collection1\")) {\n          core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n            @Override\n            public void init(NamedList args) {\n            }\n\n            @Override\n            public void postSoftCommit() {\n            }\n\n            @Override\n            public void postCommit() {\n              commits.incrementAndGet();\n            }\n\n            @Override\n            public void newSearcher(SolrIndexSearcher newSearcher,\n                                    SolrIndexSearcher currentSearcher) {\n            }\n          });\n        }\n      }\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n\n      cmdDistrib.finish();\n\n      assertEquals(getShardCount(), commits.get());\n\n      for (SolrClient c : clients) {\n        NamedList<Object> resp = c.request(new LukeRequest());\n        assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n            ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n            ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n      }\n    }\n    \n    testMaxRetries(NodeType.FORWARD);\n    testMaxRetries(NodeType.STANDARD);\n    testOneRetry(NodeType.FORWARD);\n    testOneRetry(NodeType.STANDARD);\n    testRetryNodeAgainstBadAddress();\n    testStdNodeRetriesSocketError();\n    testForwardNodeWontRetrySocketError();\n    testNodeWontRetryBadRequest(NodeType.FORWARD);\n    testNodeWontRetryBadRequest(NodeType.STANDARD);\n    testMinRfOnRetries(NodeType.FORWARD);\n    testMinRfOnRetries(NodeType.STANDARD);\n    testDistribOpenSearcher();\n    testReqShouldRetryNoRetries();\n    testReqShouldRetryMaxRetries();\n    testReqShouldRetryBadRequest();\n    testReqShouldRetryNotFound();\n    testReqShouldRetryDBQ();\n    testDeletes(false, true);\n    testDeletes(false, false);\n    testDeletes(true, true);\n    testDeletes(true, false);\n    getRfFromResponseShouldNotCloseTheInputStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#test().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<>();\n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    List<Error> errors;\n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    long numFound;\n    HttpSolrClient client;\n    ZkNodeProps nodeProps;\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          ((HttpSolrClient) controlClient).getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      // add one doc to controlClient\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n\n      errors = cmdDistrib.getErrors();\n\n      assertEquals(errors.toString(), 0, errors.size());\n\n      numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n      assertEquals(1, numFound);\n\n      client = (HttpSolrClient) clients.get(0);\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    int id2;\n    // add another 2 docs to control and 3 to client\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      id2 = id.incrementAndGet();\n      AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n      cmd2.solrDoc = sdoc(\"id\", id2);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd2, nodes, params);\n\n      AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n      cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n      errors = cmdDistrib.getErrors();\n    }\n    assertEquals(errors.toString(), 0, errors.size());\n\n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n\n    // now delete doc 2 which is on both control and client1\n\n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribDelete(dcmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      errors = cmdDistrib.getErrors();\n    }\n\n    assertEquals(errors.toString(), 0, errors.size());\n\n\n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      int cnt = atLeast(303);\n      for (int i = 0; i < cnt; i++) {\n        nodes.clear();\n        for (SolrClient c : clients) {\n          if (random().nextBoolean()) {\n            continue;\n          }\n          HttpSolrClient httpClient = (HttpSolrClient) c;\n          nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n          nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n        }\n        AddUpdateCommand c = new AddUpdateCommand(null);\n        c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n        if (nodes.size() > 0) {\n          params = new ModifiableSolrParams();\n          cmdDistrib.distribAdd(c, nodes, params);\n        }\n      }\n\n      nodes.clear();\n\n      for (SolrClient c : clients) {\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n      }\n\n      final AtomicInteger commits = new AtomicInteger();\n      for (JettySolrRunner jetty : jettys) {\n        CoreContainer cores = jetty.getCoreContainer();\n        try (SolrCore core = cores.getCore(\"collection1\")) {\n          core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n            @Override\n            public void init(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n            }\n\n            @Override\n            public void postSoftCommit() {\n            }\n\n            @Override\n            public void postCommit() {\n              commits.incrementAndGet();\n            }\n\n            @Override\n            public void newSearcher(SolrIndexSearcher newSearcher,\n                                    SolrIndexSearcher currentSearcher) {\n            }\n          });\n        }\n      }\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n\n      cmdDistrib.finish();\n\n      assertEquals(getShardCount(), commits.get());\n\n      for (SolrClient c : clients) {\n        NamedList<Object> resp = c.request(new LukeRequest());\n        assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n            ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n            ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n      }\n    }\n    \n    testMaxRetries(NodeType.FORWARD);\n    testMaxRetries(NodeType.STANDARD);\n    testOneRetry(NodeType.FORWARD);\n    testOneRetry(NodeType.STANDARD);\n    testRetryNodeAgainstBadAddress();\n    testStdNodeRetriesSocketError();\n    testForwardNodeWontRetrySocketError();\n    testNodeWontRetryBadRequest(NodeType.FORWARD);\n    testNodeWontRetryBadRequest(NodeType.STANDARD);\n    testMinRfOnRetries(NodeType.FORWARD);\n    testMinRfOnRetries(NodeType.STANDARD);\n    testDistribOpenSearcher();\n    testReqShouldRetryNoRetries();\n    testReqShouldRetryMaxRetries();\n    testReqShouldRetryBadRequest();\n    testReqShouldRetryNotFound();\n    testReqShouldRetryDBQ();\n    testDeletes(false, true);\n    testDeletes(false, false);\n    testDeletes(true, true);\n    testDeletes(true, false);\n    getRfFromResponseShouldNotCloseTheInputStream();\n    testStuckUpdates();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<>();\n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    List<Error> errors;\n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    long numFound;\n    HttpSolrClient client;\n    ZkNodeProps nodeProps;\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          ((HttpSolrClient) controlClient).getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      // add one doc to controlClient\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n\n      errors = cmdDistrib.getErrors();\n\n      assertEquals(errors.toString(), 0, errors.size());\n\n      numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n      assertEquals(1, numFound);\n\n      client = (HttpSolrClient) clients.get(0);\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    int id2;\n    // add another 2 docs to control and 3 to client\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      id2 = id.incrementAndGet();\n      AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n      cmd2.solrDoc = sdoc(\"id\", id2);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd2, nodes, params);\n\n      AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n      cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n      errors = cmdDistrib.getErrors();\n    }\n    assertEquals(errors.toString(), 0, errors.size());\n\n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n\n    // now delete doc 2 which is on both control and client1\n\n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribDelete(dcmd, nodes, params);\n\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      errors = cmdDistrib.getErrors();\n    }\n\n    assertEquals(errors.toString(), 0, errors.size());\n\n\n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n\n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {\n\n      int cnt = atLeast(303);\n      for (int i = 0; i < cnt; i++) {\n        nodes.clear();\n        for (SolrClient c : clients) {\n          if (random().nextBoolean()) {\n            continue;\n          }\n          HttpSolrClient httpClient = (HttpSolrClient) c;\n          nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n          nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n        }\n        AddUpdateCommand c = new AddUpdateCommand(null);\n        c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n        if (nodes.size() > 0) {\n          params = new ModifiableSolrParams();\n          cmdDistrib.distribAdd(c, nodes, params);\n        }\n      }\n\n      nodes.clear();\n\n      for (SolrClient c : clients) {\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n      }\n\n      final AtomicInteger commits = new AtomicInteger();\n      for (JettySolrRunner jetty : jettys) {\n        CoreContainer cores = jetty.getCoreContainer();\n        try (SolrCore core = cores.getCore(\"collection1\")) {\n          core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n            @Override\n            public void init(NamedList args) {\n            }\n\n            @Override\n            public void postSoftCommit() {\n            }\n\n            @Override\n            public void postCommit() {\n              commits.incrementAndGet();\n            }\n\n            @Override\n            public void newSearcher(SolrIndexSearcher newSearcher,\n                                    SolrIndexSearcher currentSearcher) {\n            }\n          });\n        }\n      }\n      params = new ModifiableSolrParams();\n      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n\n      cmdDistrib.finish();\n\n      assertEquals(getShardCount(), commits.get());\n\n      for (SolrClient c : clients) {\n        NamedList<Object> resp = c.request(new LukeRequest());\n        assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n            ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n            ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n      }\n    }\n    \n    testMaxRetries(NodeType.FORWARD);\n    testMaxRetries(NodeType.STANDARD);\n    testOneRetry(NodeType.FORWARD);\n    testOneRetry(NodeType.STANDARD);\n    testRetryNodeAgainstBadAddress();\n    testStdNodeRetriesSocketError();\n    testForwardNodeWontRetrySocketError();\n    testNodeWontRetryBadRequest(NodeType.FORWARD);\n    testNodeWontRetryBadRequest(NodeType.STANDARD);\n    testMinRfOnRetries(NodeType.FORWARD);\n    testMinRfOnRetries(NodeType.STANDARD);\n    testDistribOpenSearcher();\n    testReqShouldRetryNoRetries();\n    testReqShouldRetryMaxRetries();\n    testReqShouldRetryBadRequest();\n    testReqShouldRetryNotFound();\n    testReqShouldRetryDBQ();\n    testDeletes(false, true);\n    testDeletes(false, false);\n    testDeletes(true, true);\n    testDeletes(true, false);\n    getRfFromResponseShouldNotCloseTheInputStream();\n    testStuckUpdates();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"482ca6c86d7073e3c19096bdc74fe0e73da4554a":["2fd332226a93e244bd33f35c03128eb09cbf3c88"],"a229cb50768e988c50a2106bdae3a92154f428bf":["2fd332226a93e244bd33f35c03128eb09cbf3c88","482ca6c86d7073e3c19096bdc74fe0e73da4554a"],"2fd332226a93e244bd33f35c03128eb09cbf3c88":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["abb23fcc2461782ab204e61213240feb77d355aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["482ca6c86d7073e3c19096bdc74fe0e73da4554a"],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"b0b597c65628ca9e73913a07e81691f8229bae35":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3","2fd332226a93e244bd33f35c03128eb09cbf3c88"]},"commit2Childs":{"482ca6c86d7073e3c19096bdc74fe0e73da4554a":["a229cb50768e988c50a2106bdae3a92154f428bf","e98520789adb1d5ad05afb4956eca0944a929688"],"a229cb50768e988c50a2106bdae3a92154f428bf":[],"2fd332226a93e244bd33f35c03128eb09cbf3c88":["482ca6c86d7073e3c19096bdc74fe0e73da4554a","a229cb50768e988c50a2106bdae3a92154f428bf","b0b597c65628ca9e73913a07e81691f8229bae35"],"abb23fcc2461782ab204e61213240feb77d355aa":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["2fd332226a93e244bd33f35c03128eb09cbf3c88","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}