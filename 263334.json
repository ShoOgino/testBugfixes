{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexReplicationClientTest#assertHandlerRevision(int,Directory).mjava","commits":[{"id":"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4","date":1368446242,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexReplicationClientTest#assertHandlerRevision(int,Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void assertHandlerRevision(int expectedID, Directory dir) throws IOException {\n    // loop as long as client is alive. test-framework will terminate us if\n    // there's a serious bug, e.g. client doesn't really update. otherwise,\n    // introducing timeouts is not good, can easily lead to false positives.\n    while (client.isUpdateThreadAlive()) {\n      // give client a chance to update\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        throw new ThreadInterruptedException(e);\n      }\n\n      try {\n        DirectoryReader reader = DirectoryReader.open(dir);\n        try {\n          int handlerID = Integer.parseInt(reader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n          if (expectedID == handlerID) {\n            return;\n          } else if (VERBOSE) {\n            System.out.println(\"expectedID=\" + expectedID + \" actual=\" + handlerID + \" generation=\" + reader.getIndexCommit().getGeneration());\n          }\n        } finally {\n          reader.close();\n        }\n      } catch (Exception e) {\n        // we can hit IndexNotFoundException or e.g. EOFException (on\n        // segments_N) because it is being copied at the same time it is read by\n        // DirectoryReader.open().\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexReplicationClientTest#assertHandlerRevision(int,Directory).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexReplicationClientTest#assertHandlerRevision(int,Directory).mjava","sourceNew":"  private void assertHandlerRevision(int expectedID, Directory dir) throws IOException {\n    // loop as long as client is alive. test-framework will terminate us if\n    // there's a serious bug, e.g. client doesn't really update. otherwise,\n    // introducing timeouts is not good, can easily lead to false positives.\n    while (client.isUpdateThreadAlive()) {\n      // give client a chance to update\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        throw new ThreadInterruptedException(e);\n      }\n\n      try {\n        DirectoryReader reader = DirectoryReader.open(dir);\n        try {\n          int handlerID = Integer.parseInt(reader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n          if (expectedID == handlerID) {\n            return;\n          } else if (VERBOSE) {\n            System.out.println(\"expectedID=\" + expectedID + \" actual=\" + handlerID + \" generation=\" + reader.getIndexCommit().getGeneration());\n          }\n        } finally {\n          reader.close();\n        }\n      } catch (Exception e) {\n        // we can hit IndexNotFoundException or e.g. EOFException (on\n        // segments_N) because it is being copied at the same time it is read by\n        // DirectoryReader.open().\n      }\n    }\n  }\n\n","sourceOld":"  private void assertHandlerRevision(int expectedID, Directory dir) throws IOException {\n    // loop as long as client is alive. test-framework will terminate us if\n    // there's a serious bug, e.g. client doesn't really update. otherwise,\n    // introducing timeouts is not good, can easily lead to false positives.\n    while (client.isUpdateThreadAlive()) {\n      // give client a chance to update\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        throw new ThreadInterruptedException(e);\n      }\n\n      try {\n        DirectoryReader reader = DirectoryReader.open(dir);\n        try {\n          int handlerID = Integer.parseInt(reader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n          if (expectedID == handlerID) {\n            return;\n          } else if (VERBOSE) {\n            System.out.println(\"expectedID=\" + expectedID + \" actual=\" + handlerID + \" generation=\" + reader.getIndexCommit().getGeneration());\n          }\n        } finally {\n          reader.close();\n        }\n      } catch (Exception e) {\n        // we can hit IndexNotFoundException or e.g. EOFException (on\n        // segments_N) because it is being copied at the same time it is read by\n        // DirectoryReader.open().\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexReplicationClientTest#assertHandlerRevision(int,Directory).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexReplicationClientTest#assertHandlerRevision(int,Directory).mjava","sourceNew":"  private void assertHandlerRevision(int expectedID, Directory dir) throws IOException {\n    // loop as long as client is alive. test-framework will terminate us if\n    // there's a serious bug, e.g. client doesn't really update. otherwise,\n    // introducing timeouts is not good, can easily lead to false positives.\n    while (client.isUpdateThreadAlive()) {\n      // give client a chance to update\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        throw new ThreadInterruptedException(e);\n      }\n\n      try {\n        DirectoryReader reader = DirectoryReader.open(dir);\n        try {\n          int handlerID = Integer.parseInt(reader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n          if (expectedID == handlerID) {\n            return;\n          } else if (VERBOSE) {\n            System.out.println(\"expectedID=\" + expectedID + \" actual=\" + handlerID + \" generation=\" + reader.getIndexCommit().getGeneration());\n          }\n        } finally {\n          reader.close();\n        }\n      } catch (Exception e) {\n        // we can hit IndexNotFoundException or e.g. EOFException (on\n        // segments_N) because it is being copied at the same time it is read by\n        // DirectoryReader.open().\n      }\n    }\n  }\n\n","sourceOld":"  private void assertHandlerRevision(int expectedID, Directory dir) throws IOException {\n    // loop as long as client is alive. test-framework will terminate us if\n    // there's a serious bug, e.g. client doesn't really update. otherwise,\n    // introducing timeouts is not good, can easily lead to false positives.\n    while (client.isUpdateThreadAlive()) {\n      // give client a chance to update\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        throw new ThreadInterruptedException(e);\n      }\n\n      try {\n        DirectoryReader reader = DirectoryReader.open(dir);\n        try {\n          int handlerID = Integer.parseInt(reader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n          if (expectedID == handlerID) {\n            return;\n          } else if (VERBOSE) {\n            System.out.println(\"expectedID=\" + expectedID + \" actual=\" + handlerID + \" generation=\" + reader.getIndexCommit().getGeneration());\n          }\n        } finally {\n          reader.close();\n        }\n      } catch (Exception e) {\n        // we can hit IndexNotFoundException or e.g. EOFException (on\n        // segments_N) because it is being copied at the same time it is read by\n        // DirectoryReader.open().\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}