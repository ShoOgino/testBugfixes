{"path":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","commits":[{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException, MergeAbortedException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file);\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      // copy successful - delete file\n      fileEntry.dir.deleteFile(fileEntry.file);\n      return length;\n    } finally {\n      is.close();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private void copyFile(FileEntry source, IndexOutput os) throws IOException {\n    IndexInput is = source.dir.openInput(source.file);\n    try {\n      long startPtr = os.getFilePointer();\n      long length = is.length();\n      os.copyBytes(is, length);\n\n      if (checkAbort != null) {\n        checkAbort.work(length);\n      }\n\n      // Verify that the output length diff is equal to original file\n      long endPtr = os.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n\n    } finally {\n      is.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException, MergeAbortedException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file);\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      // copy successful - delete file\n      fileEntry.dir.deleteFile(fileEntry.file);\n      return length;\n    } finally {\n      is.close();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private void copyFile(FileEntry source, IndexOutput os) throws IOException {\n    IndexInput is = source.dir.openInput(source.file);\n    try {\n      long startPtr = os.getFilePointer();\n      long length = is.length();\n      os.copyBytes(is, length);\n\n      if (checkAbort != null) {\n        checkAbort.work(length);\n      }\n\n      // Verify that the output length diff is equal to original file\n      long endPtr = os.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n\n    } finally {\n      is.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException, MergeAbortedException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      // copy successful - delete file\n      fileEntry.dir.deleteFile(fileEntry.file);\n      return length;\n    } finally {\n      is.close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException, MergeAbortedException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      // copy successful - delete file\n      fileEntry.dir.deleteFile(fileEntry.file);\n      return length;\n    } finally {\n      is.close();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException, MergeAbortedException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file);\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      // copy successful - delete file\n      fileEntry.dir.deleteFile(fileEntry.file);\n      return length;\n    } finally {\n      is.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException, MergeAbortedException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      // copy successful - delete file\n      fileEntry.dir.deleteFile(fileEntry.file);\n      return length;\n    } finally {\n      is.close();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException, MergeAbortedException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file);\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      // copy successful - delete file\n      fileEntry.dir.deleteFile(fileEntry.file);\n      return length;\n    } finally {\n      is.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException, MergeAbortedException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      IOUtils.closeSafely(!success, is);\n      if (success) {\n        // copy successful - delete file\n        fileEntry.dir.deleteFile(fileEntry.file);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException, MergeAbortedException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      // copy successful - delete file\n      fileEntry.dir.deleteFile(fileEntry.file);\n      return length;\n    } finally {\n      is.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException, MergeAbortedException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        fileEntry.dir.deleteFile(fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException, MergeAbortedException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      IOUtils.closeSafely(!success, is);\n      if (success) {\n        // copy successful - delete file\n        fileEntry.dir.deleteFile(fileEntry.file);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException, MergeAbortedException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        fileEntry.dir.deleteFile(fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException, MergeAbortedException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        fileEntry.dir.deleteFile(fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["67aadace85f701c87a4e0721eedcda25d8415a70"],"67aadace85f701c87a4e0721eedcda25d8415a70":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["24230fe54121f9be9d85f2c2067536296785e421"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["2553b00f699380c64959ccb27991289aae87be2e","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["0aab6e810b4b0d3743d6a048be0602801f4b3920","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"67aadace85f701c87a4e0721eedcda25d8415a70":["24230fe54121f9be9d85f2c2067536296785e421"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0aab6e810b4b0d3743d6a048be0602801f4b3920","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["ddc4c914be86e34b54f70023f45a60fa7f04e929","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["67aadace85f701c87a4e0721eedcda25d8415a70","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"2553b00f699380c64959ccb27991289aae87be2e":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}