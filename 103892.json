{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter#finish(int,long).mjava","commits":[{"id":"3a88f37cd0154833b5c58daac509eb8be347d0f2","date":1397029487,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter#finish(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter#finish(int).mjava","sourceNew":"  void finish(int numDocs, long maxPointer) throws IOException {\n    if (numDocs != totalDocs) {\n      throw new IllegalStateException(\"Expected \" + numDocs + \" docs, but got \" + totalDocs);\n    }\n    if (blockChunks > 0) {\n      writeBlock();\n    }\n    fieldsIndexOut.writeVInt(0); // end marker\n    fieldsIndexOut.writeVLong(maxPointer);\n    CodecUtil.writeFooter(fieldsIndexOut);\n  }\n\n","sourceOld":"  void finish(int numDocs) throws IOException {\n    if (numDocs != totalDocs) {\n      throw new IllegalStateException(\"Expected \" + numDocs + \" docs, but got \" + totalDocs);\n    }\n    if (blockChunks > 0) {\n      writeBlock();\n    }\n    fieldsIndexOut.writeVInt(0); // end marker\n    CodecUtil.writeFooter(fieldsIndexOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a4487b07c49a1861c05720e04624826ecbe9fa","date":1580924108,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter#finish(int,long).mjava","sourceNew":null,"sourceOld":"  void finish(int numDocs, long maxPointer) throws IOException {\n    if (numDocs != totalDocs) {\n      throw new IllegalStateException(\"Expected \" + numDocs + \" docs, but got \" + totalDocs);\n    }\n    if (blockChunks > 0) {\n      writeBlock();\n    }\n    fieldsIndexOut.writeVInt(0); // end marker\n    fieldsIndexOut.writeVLong(maxPointer);\n    CodecUtil.writeFooter(fieldsIndexOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70a4487b07c49a1861c05720e04624826ecbe9fa":["3a88f37cd0154833b5c58daac509eb8be347d0f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3a88f37cd0154833b5c58daac509eb8be347d0f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70a4487b07c49a1861c05720e04624826ecbe9fa"]},"commit2Childs":{"70a4487b07c49a1861c05720e04624826ecbe9fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a88f37cd0154833b5c58daac509eb8be347d0f2"],"3a88f37cd0154833b5c58daac509eb8be347d0f2":["70a4487b07c49a1861c05720e04624826ecbe9fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}