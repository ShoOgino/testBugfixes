{"path":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#UninvertingReader(AtomicReader,Map[String,Type]).mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#UninvertingReader(AtomicReader,Map[String,Type]).mjava","pathOld":"/dev/null","sourceNew":"  UninvertingReader(AtomicReader in, Map<String,Type> mapping) {\n    super(in);\n    this.mapping = mapping;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      FieldInfo.DocValuesType type = fi.getDocValuesType();\n      if (fi.isIndexed() && !fi.hasDocValues()) {\n        Type t = mapping.get(fi.name);\n        if (t != null) {\n          switch(t) {\n            case INTEGER:\n            case LONG:\n            case FLOAT:\n            case DOUBLE:\n              type = FieldInfo.DocValuesType.NUMERIC;\n              break;\n            case BINARY:\n              type = FieldInfo.DocValuesType.BINARY;\n              break;\n            case SORTED:\n              type = FieldInfo.DocValuesType.SORTED;\n              break;\n            case SORTED_SET:\n              type = FieldInfo.DocValuesType.SORTED_SET;\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                      fi.hasPayloads(), fi.getIndexOptions(), type, fi.getNormType(), null));\n    }\n    fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36a4a25c2f02edc0c96bc51a298c45b1764e662d","date":1399923529,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#UninvertingReader(AtomicReader,Map[String,Type]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#UninvertingReader(AtomicReader,Map[String,Type]).mjava","sourceNew":"  UninvertingReader(AtomicReader in, Map<String,Type> mapping) {\n    super(in);\n    this.mapping = mapping;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      FieldInfo.DocValuesType type = fi.getDocValuesType();\n      if (fi.isIndexed() && !fi.hasDocValues()) {\n        Type t = mapping.get(fi.name);\n        if (t != null) {\n          switch(t) {\n            case INTEGER:\n            case LONG:\n            case FLOAT:\n            case DOUBLE:\n              type = FieldInfo.DocValuesType.NUMERIC;\n              break;\n            case BINARY:\n              type = FieldInfo.DocValuesType.BINARY;\n              break;\n            case SORTED:\n              type = FieldInfo.DocValuesType.SORTED;\n              break;\n            case SORTED_SET_BINARY:\n            case SORTED_SET_INTEGER:\n            case SORTED_SET_FLOAT:\n            case SORTED_SET_LONG:\n            case SORTED_SET_DOUBLE:\n              type = FieldInfo.DocValuesType.SORTED_SET;\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                      fi.hasPayloads(), fi.getIndexOptions(), type, fi.getNormType(), null));\n    }\n    fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","sourceOld":"  UninvertingReader(AtomicReader in, Map<String,Type> mapping) {\n    super(in);\n    this.mapping = mapping;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      FieldInfo.DocValuesType type = fi.getDocValuesType();\n      if (fi.isIndexed() && !fi.hasDocValues()) {\n        Type t = mapping.get(fi.name);\n        if (t != null) {\n          switch(t) {\n            case INTEGER:\n            case LONG:\n            case FLOAT:\n            case DOUBLE:\n              type = FieldInfo.DocValuesType.NUMERIC;\n              break;\n            case BINARY:\n              type = FieldInfo.DocValuesType.BINARY;\n              break;\n            case SORTED:\n              type = FieldInfo.DocValuesType.SORTED;\n              break;\n            case SORTED_SET:\n              type = FieldInfo.DocValuesType.SORTED_SET;\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                      fi.hasPayloads(), fi.getIndexOptions(), type, fi.getNormType(), null));\n    }\n    fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7c19b4ecf30c060f4d2e29c25f027e73262713d","date":1400023065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#UninvertingReader(AtomicReader,Map[String,Type]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#UninvertingReader(AtomicReader,Map[String,Type]).mjava","sourceNew":"  /** \n   * Create a new UninvertingReader with the specified mapping \n   * <p>\n   * Expert: This should almost never be used. Use {@link #wrap(DirectoryReader, Map)}\n   * instead.\n   *  \n   * @lucene.internal\n   */\n  public UninvertingReader(AtomicReader in, Map<String,Type> mapping) {\n    super(in);\n    this.mapping = mapping;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      FieldInfo.DocValuesType type = fi.getDocValuesType();\n      if (fi.isIndexed() && !fi.hasDocValues()) {\n        Type t = mapping.get(fi.name);\n        if (t != null) {\n          switch(t) {\n            case INTEGER:\n            case LONG:\n            case FLOAT:\n            case DOUBLE:\n              type = FieldInfo.DocValuesType.NUMERIC;\n              break;\n            case BINARY:\n              type = FieldInfo.DocValuesType.BINARY;\n              break;\n            case SORTED:\n              type = FieldInfo.DocValuesType.SORTED;\n              break;\n            case SORTED_SET_BINARY:\n            case SORTED_SET_INTEGER:\n            case SORTED_SET_FLOAT:\n            case SORTED_SET_LONG:\n            case SORTED_SET_DOUBLE:\n              type = FieldInfo.DocValuesType.SORTED_SET;\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                      fi.hasPayloads(), fi.getIndexOptions(), type, fi.getNormType(), null));\n    }\n    fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","sourceOld":"  UninvertingReader(AtomicReader in, Map<String,Type> mapping) {\n    super(in);\n    this.mapping = mapping;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      FieldInfo.DocValuesType type = fi.getDocValuesType();\n      if (fi.isIndexed() && !fi.hasDocValues()) {\n        Type t = mapping.get(fi.name);\n        if (t != null) {\n          switch(t) {\n            case INTEGER:\n            case LONG:\n            case FLOAT:\n            case DOUBLE:\n              type = FieldInfo.DocValuesType.NUMERIC;\n              break;\n            case BINARY:\n              type = FieldInfo.DocValuesType.BINARY;\n              break;\n            case SORTED:\n              type = FieldInfo.DocValuesType.SORTED;\n              break;\n            case SORTED_SET_BINARY:\n            case SORTED_SET_INTEGER:\n            case SORTED_SET_FLOAT:\n            case SORTED_SET_LONG:\n            case SORTED_SET_DOUBLE:\n              type = FieldInfo.DocValuesType.SORTED_SET;\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                      fi.hasPayloads(), fi.getIndexOptions(), type, fi.getNormType(), null));\n    }\n    fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#UninvertingReader(AtomicReader,Map[String,Type]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Create a new UninvertingReader with the specified mapping \n   * <p>\n   * Expert: This should almost never be used. Use {@link #wrap(DirectoryReader, Map)}\n   * instead.\n   *  \n   * @lucene.internal\n   */\n  public UninvertingReader(AtomicReader in, Map<String,Type> mapping) {\n    super(in);\n    this.mapping = mapping;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      FieldInfo.DocValuesType type = fi.getDocValuesType();\n      if (fi.isIndexed() && !fi.hasDocValues()) {\n        Type t = mapping.get(fi.name);\n        if (t != null) {\n          switch(t) {\n            case INTEGER:\n            case LONG:\n            case FLOAT:\n            case DOUBLE:\n              type = FieldInfo.DocValuesType.NUMERIC;\n              break;\n            case BINARY:\n              type = FieldInfo.DocValuesType.BINARY;\n              break;\n            case SORTED:\n              type = FieldInfo.DocValuesType.SORTED;\n              break;\n            case SORTED_SET_BINARY:\n            case SORTED_SET_INTEGER:\n            case SORTED_SET_FLOAT:\n            case SORTED_SET_LONG:\n            case SORTED_SET_DOUBLE:\n              type = FieldInfo.DocValuesType.SORTED_SET;\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                      fi.hasPayloads(), fi.getIndexOptions(), type, fi.getNormType(), null));\n    }\n    fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#UninvertingReader(AtomicReader,Map[String,Type]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Create a new UninvertingReader with the specified mapping \n   * <p>\n   * Expert: This should almost never be used. Use {@link #wrap(DirectoryReader, Map)}\n   * instead.\n   *  \n   * @lucene.internal\n   */\n  public UninvertingReader(AtomicReader in, Map<String,Type> mapping) {\n    super(in);\n    this.mapping = mapping;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      FieldInfo.DocValuesType type = fi.getDocValuesType();\n      if (fi.isIndexed() && !fi.hasDocValues()) {\n        Type t = mapping.get(fi.name);\n        if (t != null) {\n          switch(t) {\n            case INTEGER:\n            case LONG:\n            case FLOAT:\n            case DOUBLE:\n              type = FieldInfo.DocValuesType.NUMERIC;\n              break;\n            case BINARY:\n              type = FieldInfo.DocValuesType.BINARY;\n              break;\n            case SORTED:\n              type = FieldInfo.DocValuesType.SORTED;\n              break;\n            case SORTED_SET_BINARY:\n            case SORTED_SET_INTEGER:\n            case SORTED_SET_FLOAT:\n            case SORTED_SET_LONG:\n            case SORTED_SET_DOUBLE:\n              type = FieldInfo.DocValuesType.SORTED_SET;\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                      fi.hasPayloads(), fi.getIndexOptions(), type, fi.getNormType(), null));\n    }\n    fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71","date":1400675008,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#UninvertingReader(AtomicReader,Map[String,Type]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#UninvertingReader(AtomicReader,Map[String,Type]).mjava","sourceNew":"  /** \n   * Create a new UninvertingReader with the specified mapping \n   * <p>\n   * Expert: This should almost never be used. Use {@link #wrap(DirectoryReader, Map)}\n   * instead.\n   *  \n   * @lucene.internal\n   */\n  public UninvertingReader(AtomicReader in, Map<String,Type> mapping) {\n    super(in);\n    this.mapping = mapping;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      FieldInfo.DocValuesType type = fi.getDocValuesType();\n      if (fi.isIndexed() && !fi.hasDocValues()) {\n        Type t = mapping.get(fi.name);\n        if (t != null) {\n          switch(t) {\n            case INTEGER:\n            case LONG:\n            case FLOAT:\n            case DOUBLE:\n              type = FieldInfo.DocValuesType.NUMERIC;\n              break;\n            case BINARY:\n              type = FieldInfo.DocValuesType.BINARY;\n              break;\n            case SORTED:\n              type = FieldInfo.DocValuesType.SORTED;\n              break;\n            case SORTED_SET_BINARY:\n            case SORTED_SET_INTEGER:\n            case SORTED_SET_FLOAT:\n            case SORTED_SET_LONG:\n            case SORTED_SET_DOUBLE:\n              type = FieldInfo.DocValuesType.SORTED_SET;\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                      fi.hasPayloads(), fi.getIndexOptions(), type, fi.getNormType(), -1, null));\n    }\n    fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","sourceOld":"  /** \n   * Create a new UninvertingReader with the specified mapping \n   * <p>\n   * Expert: This should almost never be used. Use {@link #wrap(DirectoryReader, Map)}\n   * instead.\n   *  \n   * @lucene.internal\n   */\n  public UninvertingReader(AtomicReader in, Map<String,Type> mapping) {\n    super(in);\n    this.mapping = mapping;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      FieldInfo.DocValuesType type = fi.getDocValuesType();\n      if (fi.isIndexed() && !fi.hasDocValues()) {\n        Type t = mapping.get(fi.name);\n        if (t != null) {\n          switch(t) {\n            case INTEGER:\n            case LONG:\n            case FLOAT:\n            case DOUBLE:\n              type = FieldInfo.DocValuesType.NUMERIC;\n              break;\n            case BINARY:\n              type = FieldInfo.DocValuesType.BINARY;\n              break;\n            case SORTED:\n              type = FieldInfo.DocValuesType.SORTED;\n              break;\n            case SORTED_SET_BINARY:\n            case SORTED_SET_INTEGER:\n            case SORTED_SET_FLOAT:\n            case SORTED_SET_LONG:\n            case SORTED_SET_DOUBLE:\n              type = FieldInfo.DocValuesType.SORTED_SET;\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                      fi.hasPayloads(), fi.getIndexOptions(), type, fi.getNormType(), null));\n    }\n    fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","bugFix":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a656b32c3aa151037a8c52e9b134acc3cbf482bc","date":1400688195,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#UninvertingReader(AtomicReader,Map[String,Type]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#UninvertingReader(AtomicReader,Map[String,Type]).mjava","sourceNew":"  /** \n   * Create a new UninvertingReader with the specified mapping \n   * <p>\n   * Expert: This should almost never be used. Use {@link #wrap(DirectoryReader, Map)}\n   * instead.\n   *  \n   * @lucene.internal\n   */\n  public UninvertingReader(AtomicReader in, Map<String,Type> mapping) {\n    super(in);\n    this.mapping = mapping;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      FieldInfo.DocValuesType type = fi.getDocValuesType();\n      if (fi.isIndexed() && !fi.hasDocValues()) {\n        Type t = mapping.get(fi.name);\n        if (t != null) {\n          switch(t) {\n            case INTEGER:\n            case LONG:\n            case FLOAT:\n            case DOUBLE:\n              type = FieldInfo.DocValuesType.NUMERIC;\n              break;\n            case BINARY:\n              type = FieldInfo.DocValuesType.BINARY;\n              break;\n            case SORTED:\n              type = FieldInfo.DocValuesType.SORTED;\n              break;\n            case SORTED_SET_BINARY:\n            case SORTED_SET_INTEGER:\n            case SORTED_SET_FLOAT:\n            case SORTED_SET_LONG:\n            case SORTED_SET_DOUBLE:\n              type = FieldInfo.DocValuesType.SORTED_SET;\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                      fi.hasPayloads(), fi.getIndexOptions(), type, fi.getNormType(), -1, null));\n    }\n    fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","sourceOld":"  /** \n   * Create a new UninvertingReader with the specified mapping \n   * <p>\n   * Expert: This should almost never be used. Use {@link #wrap(DirectoryReader, Map)}\n   * instead.\n   *  \n   * @lucene.internal\n   */\n  public UninvertingReader(AtomicReader in, Map<String,Type> mapping) {\n    super(in);\n    this.mapping = mapping;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      FieldInfo.DocValuesType type = fi.getDocValuesType();\n      if (fi.isIndexed() && !fi.hasDocValues()) {\n        Type t = mapping.get(fi.name);\n        if (t != null) {\n          switch(t) {\n            case INTEGER:\n            case LONG:\n            case FLOAT:\n            case DOUBLE:\n              type = FieldInfo.DocValuesType.NUMERIC;\n              break;\n            case BINARY:\n              type = FieldInfo.DocValuesType.BINARY;\n              break;\n            case SORTED:\n              type = FieldInfo.DocValuesType.SORTED;\n              break;\n            case SORTED_SET_BINARY:\n            case SORTED_SET_INTEGER:\n            case SORTED_SET_FLOAT:\n            case SORTED_SET_LONG:\n            case SORTED_SET_DOUBLE:\n              type = FieldInfo.DocValuesType.SORTED_SET;\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                      fi.hasPayloads(), fi.getIndexOptions(), type, fi.getNormType(), null));\n    }\n    fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#UninvertingReader(AtomicReader,Map[String,Type]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#UninvertingReader(AtomicReader,Map[String,Type]).mjava","sourceNew":"  /** \n   * Create a new UninvertingReader with the specified mapping \n   * <p>\n   * Expert: This should almost never be used. Use {@link #wrap(DirectoryReader, Map)}\n   * instead.\n   *  \n   * @lucene.internal\n   */\n  public UninvertingReader(AtomicReader in, Map<String,Type> mapping) {\n    super(in);\n    this.mapping = mapping;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      FieldInfo.DocValuesType type = fi.getDocValuesType();\n      if (fi.isIndexed() && !fi.hasDocValues()) {\n        Type t = mapping.get(fi.name);\n        if (t != null) {\n          switch(t) {\n            case INTEGER:\n            case LONG:\n            case FLOAT:\n            case DOUBLE:\n              type = FieldInfo.DocValuesType.NUMERIC;\n              break;\n            case BINARY:\n              type = FieldInfo.DocValuesType.BINARY;\n              break;\n            case SORTED:\n              type = FieldInfo.DocValuesType.SORTED;\n              break;\n            case SORTED_SET_BINARY:\n            case SORTED_SET_INTEGER:\n            case SORTED_SET_FLOAT:\n            case SORTED_SET_LONG:\n            case SORTED_SET_DOUBLE:\n              type = FieldInfo.DocValuesType.SORTED_SET;\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                      fi.hasPayloads(), fi.getIndexOptions(), type, fi.getNormType(), -1, null));\n    }\n    fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","sourceOld":"  /** \n   * Create a new UninvertingReader with the specified mapping \n   * <p>\n   * Expert: This should almost never be used. Use {@link #wrap(DirectoryReader, Map)}\n   * instead.\n   *  \n   * @lucene.internal\n   */\n  public UninvertingReader(AtomicReader in, Map<String,Type> mapping) {\n    super(in);\n    this.mapping = mapping;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      FieldInfo.DocValuesType type = fi.getDocValuesType();\n      if (fi.isIndexed() && !fi.hasDocValues()) {\n        Type t = mapping.get(fi.name);\n        if (t != null) {\n          switch(t) {\n            case INTEGER:\n            case LONG:\n            case FLOAT:\n            case DOUBLE:\n              type = FieldInfo.DocValuesType.NUMERIC;\n              break;\n            case BINARY:\n              type = FieldInfo.DocValuesType.BINARY;\n              break;\n            case SORTED:\n              type = FieldInfo.DocValuesType.SORTED;\n              break;\n            case SORTED_SET_BINARY:\n            case SORTED_SET_INTEGER:\n            case SORTED_SET_FLOAT:\n            case SORTED_SET_LONG:\n            case SORTED_SET_DOUBLE:\n              type = FieldInfo.DocValuesType.SORTED_SET;\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                      fi.hasPayloads(), fi.getIndexOptions(), type, fi.getNormType(), null));\n    }\n    fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#UninvertingReader(AtomicReader,Map[String,Type]).mjava","sourceNew":null,"sourceOld":"  /** \n   * Create a new UninvertingReader with the specified mapping \n   * <p>\n   * Expert: This should almost never be used. Use {@link #wrap(DirectoryReader, Map)}\n   * instead.\n   *  \n   * @lucene.internal\n   */\n  public UninvertingReader(AtomicReader in, Map<String,Type> mapping) {\n    super(in);\n    this.mapping = mapping;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      FieldInfo.DocValuesType type = fi.getDocValuesType();\n      if (fi.isIndexed() && !fi.hasDocValues()) {\n        Type t = mapping.get(fi.name);\n        if (t != null) {\n          switch(t) {\n            case INTEGER:\n            case LONG:\n            case FLOAT:\n            case DOUBLE:\n              type = FieldInfo.DocValuesType.NUMERIC;\n              break;\n            case BINARY:\n              type = FieldInfo.DocValuesType.BINARY;\n              break;\n            case SORTED:\n              type = FieldInfo.DocValuesType.SORTED;\n              break;\n            case SORTED_SET_BINARY:\n            case SORTED_SET_INTEGER:\n            case SORTED_SET_FLOAT:\n            case SORTED_SET_LONG:\n            case SORTED_SET_DOUBLE:\n              type = FieldInfo.DocValuesType.SORTED_SET;\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                      fi.hasPayloads(), fi.getIndexOptions(), type, fi.getNormType(), -1, null));\n    }\n    fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36a4a25c2f02edc0c96bc51a298c45b1764e662d":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7c19b4ecf30c060f4d2e29c25f027e73262713d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":["93dd449115a9247533e44bab47e8429e5dccbc6d","ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7605579001505896d48b07160075a5c8b8e128e":["56572ec06f1407c066d6b7399413178b33176cd8","ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c7c19b4ecf30c060f4d2e29c25f027e73262713d":["36a4a25c2f02edc0c96bc51a298c45b1764e662d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71"],"ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"36a4a25c2f02edc0c96bc51a298c45b1764e662d":["c7c19b4ecf30c060f4d2e29c25f027e73262713d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a656b32c3aa151037a8c52e9b134acc3cbf482bc","56572ec06f1407c066d6b7399413178b33176cd8","ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["36a4a25c2f02edc0c96bc51a298c45b1764e662d"],"b7605579001505896d48b07160075a5c8b8e128e":[],"56572ec06f1407c066d6b7399413178b33176cd8":["b7605579001505896d48b07160075a5c8b8e128e"],"c7c19b4ecf30c060f4d2e29c25f027e73262713d":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71":["a656b32c3aa151037a8c52e9b134acc3cbf482bc","b7605579001505896d48b07160075a5c8b8e128e","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a656b32c3aa151037a8c52e9b134acc3cbf482bc","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}