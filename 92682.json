{"path":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestDeprecatedPayloadScoreQuery#testEquality().mjava","commits":[{"id":"1abe64b887edbb37f6261531cf8a62d88d63fdcb","date":1510236307,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestDeprecatedPayloadScoreQuery#testEquality().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEquality() {\n    SpanQuery sq1 = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(\"field\", \"two\"));\n    PayloadFunction minFunc = new MinPayloadFunction();\n    PayloadFunction maxFunc = new MaxPayloadFunction();\n    PayloadScoreQuery query1 = new PayloadScoreQuery(sq1, minFunc, true);\n    PayloadScoreQuery query2 = new PayloadScoreQuery(sq2, minFunc, true);\n    PayloadScoreQuery query3 = new PayloadScoreQuery(sq2, maxFunc, true);\n    PayloadScoreQuery query4 = new PayloadScoreQuery(sq2, maxFunc, false);\n    PayloadScoreQuery query5 = new PayloadScoreQuery(sq1, minFunc);\n\n    assertEquals(query1, query5);\n    assertFalse(query1.equals(query2));\n    assertFalse(query1.equals(query3));\n    assertFalse(query1.equals(query4));\n    assertFalse(query2.equals(query3));\n    assertFalse(query2.equals(query4));\n    assertFalse(query3.equals(query4));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2","date":1510236334,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestDeprecatedPayloadScoreQuery#testEquality().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testEquality() {\n    SpanQuery sq1 = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(\"field\", \"two\"));\n    PayloadFunction minFunc = new MinPayloadFunction();\n    PayloadFunction maxFunc = new MaxPayloadFunction();\n    PayloadScoreQuery query1 = new PayloadScoreQuery(sq1, minFunc, true);\n    PayloadScoreQuery query2 = new PayloadScoreQuery(sq2, minFunc, true);\n    PayloadScoreQuery query3 = new PayloadScoreQuery(sq2, maxFunc, true);\n    PayloadScoreQuery query4 = new PayloadScoreQuery(sq2, maxFunc, false);\n    PayloadScoreQuery query5 = new PayloadScoreQuery(sq1, minFunc);\n\n    assertEquals(query1, query5);\n    assertFalse(query1.equals(query2));\n    assertFalse(query1.equals(query3));\n    assertFalse(query1.equals(query4));\n    assertFalse(query2.equals(query3));\n    assertFalse(query2.equals(query4));\n    assertFalse(query3.equals(query4));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1abe64b887edbb37f6261531cf8a62d88d63fdcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2":["1abe64b887edbb37f6261531cf8a62d88d63fdcb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d9b8e4987e93a0ea580f91defdc31ce5dd572e2"]},"commit2Childs":{"1abe64b887edbb37f6261531cf8a62d88d63fdcb":["4d9b8e4987e93a0ea580f91defdc31ce5dd572e2"],"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1abe64b887edbb37f6261531cf8a62d88d63fdcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}