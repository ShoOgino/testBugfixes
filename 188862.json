{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map<String, Object> m = new HashMap<>();\n    m.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    m.putAll(message.getProperties());\n    overseer.offerStateUpdate(Utils.toJSON(m));\n  }\n\n","sourceOld":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":["b693a83132c9e45afcd564fd65a25b60ed80388b","64707d25b6352cf02909d3916038a3b3cec7f0a8","cfb61c9baefa8681e40fca3c803f61bf485a9d8d","19498030e0adab22f604f935cae3c03dcf0952a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map<String, Object> m = new HashMap<>();\n    m.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    m.putAll(message.getProperties());\n    overseer.offerStateUpdate(Utils.toJSON(m));\n  }\n\n","sourceOld":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map<String, Object> m = new HashMap<>();\n    m.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    m.putAll(message.getProperties());\n    overseer.offerStateUpdate(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#balanceProperty(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void balanceProperty(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map<String, Object> m = new HashMap<>();\n    m.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    m.putAll(message.getProperties());\n    overseer.offerStateUpdate(Utils.toJSON(m));\n  }\n\n","sourceOld":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map<String, Object> m = new HashMap<>();\n    m.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    m.putAll(message.getProperties());\n    overseer.offerStateUpdate(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#balanceProperty(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","sourceNew":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map<String, Object> m = new HashMap<>();\n    m.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    m.putAll(message.getProperties());\n    overseer.offerStateUpdate(Utils.toJSON(m));\n  }\n\n","sourceOld":"  private void balanceProperty(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map<String, Object> m = new HashMap<>();\n    m.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    m.putAll(message.getProperties());\n    overseer.offerStateUpdate(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"c526352db87264a72a7a9ad68c1b769b81e54305":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b94236357aaa22b76c10629851fe4e376e0cea82":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["c526352db87264a72a7a9ad68c1b769b81e54305"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}