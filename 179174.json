{"path":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery#toString(String).mjava","commits":[{"id":"e91b7d9f5000faefb0e81b98e76ad5b9463283e8","date":1433799348,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery#toString(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String toString(String field) {\n    assert x.length == y.length;\n\n    final StringBuilder sb = new StringBuilder();\n    sb.append(getClass().getSimpleName());\n    sb.append(':');\n    if (!getField().equals(field)) {\n      sb.append(\" field=\");\n      sb.append(getField());\n      sb.append(':');\n    }\n    sb.append(\" Points: \");\n    for (int i=0; i<x.length; ++i) {\n      sb.append(\"[\")\n        .append(x[i])\n        .append(\", \")\n        .append(y[i])\n        .append(\"] \");\n    }\n    sb.append(ToStringUtils.boost(getBoost()));\n\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery#toString(String).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    assert x.length == y.length;\n\n    final StringBuilder sb = new StringBuilder();\n    sb.append(getClass().getSimpleName());\n    sb.append(':');\n    if (!getField().equals(field)) {\n      sb.append(\" field=\");\n      sb.append(getField());\n      sb.append(':');\n    }\n    sb.append(\" Points: \");\n    for (int i=0; i<x.length; ++i) {\n      sb.append(\"[\")\n        .append(x[i])\n        .append(\", \")\n        .append(y[i])\n        .append(\"] \");\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    assert x.length == y.length;\n\n    final StringBuilder sb = new StringBuilder();\n    sb.append(getClass().getSimpleName());\n    sb.append(':');\n    if (!getField().equals(field)) {\n      sb.append(\" field=\");\n      sb.append(getField());\n      sb.append(':');\n    }\n    sb.append(\" Points: \");\n    for (int i=0; i<x.length; ++i) {\n      sb.append(\"[\")\n        .append(x[i])\n        .append(\", \")\n        .append(y[i])\n        .append(\"] \");\n    }\n    sb.append(ToStringUtils.boost(getBoost()));\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointInPolygonQuery#toString(String).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery#toString(String).mjava","sourceNew":"  /** print out this polygon query */\n  @Override\n  public String toString(String field) {\n    assert x.length == y.length;\n\n    final StringBuilder sb = new StringBuilder();\n    sb.append(getClass().getSimpleName());\n    sb.append(':');\n    if (!getField().equals(field)) {\n      sb.append(\" field=\");\n      sb.append(getField());\n      sb.append(':');\n    }\n    sb.append(\" Points: \");\n    for (int i=0; i<x.length; ++i) {\n      sb.append(\"[\")\n        .append(x[i])\n        .append(\", \")\n        .append(y[i])\n        .append(\"] \");\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    assert x.length == y.length;\n\n    final StringBuilder sb = new StringBuilder();\n    sb.append(getClass().getSimpleName());\n    sb.append(':');\n    if (!getField().equals(field)) {\n      sb.append(\" field=\");\n      sb.append(getField());\n      sb.append(':');\n    }\n    sb.append(\" Points: \");\n    for (int i=0; i<x.length; ++i) {\n      sb.append(\"[\")\n        .append(x[i])\n        .append(\", \")\n        .append(y[i])\n        .append(\"] \");\n    }\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointInPolygonQuery#toString(String).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery#toString(String).mjava","sourceNew":"  /** print out this polygon query */\n  @Override\n  public String toString(String field) {\n    assert x.length == y.length;\n\n    final StringBuilder sb = new StringBuilder();\n    sb.append(getClass().getSimpleName());\n    sb.append(':');\n    if (!getField().equals(field)) {\n      sb.append(\" field=\");\n      sb.append(getField());\n      sb.append(':');\n    }\n    sb.append(\" Points: \");\n    for (int i=0; i<x.length; ++i) {\n      sb.append(\"[\")\n          .append(x[i])\n          .append(\", \")\n          .append(y[i])\n          .append(\"] \");\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    assert x.length == y.length;\n\n    final StringBuilder sb = new StringBuilder();\n    sb.append(getClass().getSimpleName());\n    sb.append(':');\n    if (!getField().equals(field)) {\n      sb.append(\" field=\");\n      sb.append(getField());\n      sb.append(':');\n    }\n    sb.append(\" Points: \");\n    for (int i=0; i<x.length; ++i) {\n      sb.append(\"[\")\n        .append(x[i])\n        .append(\", \")\n        .append(y[i])\n        .append(\"] \");\n    }\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["2dfdf766e55e943d942055d7de53c7ad6bc45283","937923083e4d137932336fc80f3d78758ff698a6"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"e91b7d9f5000faefb0e81b98e76ad5b9463283e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"937923083e4d137932336fc80f3d78758ff698a6":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"e91b7d9f5000faefb0e81b98e76ad5b9463283e8":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}