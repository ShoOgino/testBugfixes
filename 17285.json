{"path":"backwards/src/java/org/apache/lucene/document/AbstractField#toString().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/document/AbstractField#toString().mjava","pathOld":"/dev/null","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (isStored) {\n      result.append(\"stored\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (omitTermFreqAndPositions) {\n      result.append(\",omitTermFreqAndPositions\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/document/AbstractField#toString().mjava","pathOld":"backwards/src/java/org/apache/lucene/document/AbstractField#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (isStored) {\n      result.append(\"stored\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (omitTermFreqAndPositions) {\n      result.append(\",omitTermFreqAndPositions\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (isStored) {\n      result.append(\"stored\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (omitTermFreqAndPositions) {\n      result.append(\",omitTermFreqAndPositions\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":6,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/AbstractField#toString().mjava","pathOld":"backwards/src/java/org/apache/lucene/document/AbstractField#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (isStored) {\n      result.append(\"stored\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (omitTermFreqAndPositions) {\n      result.append(\",omitTermFreqAndPositions\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (isStored) {\n      result.append(\"stored\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (omitTermFreqAndPositions) {\n      result.append(\",omitTermFreqAndPositions\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}