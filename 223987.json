{"path":"lucene/core/src/java/org/apache/lucene/search/SortField#setMissingValue(Object).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#setMissingValue(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#setMissingValue(Object).mjava","sourceNew":"  public SortField setMissingValue(Object missingValue) {\n    if (type != Type.BYTE && type != Type.SHORT && type != Type.INT && type != Type.FLOAT && type != Type.LONG && type != Type.DOUBLE) {\n      throw new IllegalArgumentException( \"Missing value only works for numeric types\" );\n    }\n    this.missingValue = missingValue;\n    return this;\n  }\n\n","sourceOld":"  public SortField setMissingValue(Object missingValue) {\n    if (type != Type.BYTE && type != Type.SHORT && type != Type.INT && type != Type.FLOAT && type != Type.LONG && type != Type.DOUBLE) {\n      throw new IllegalArgumentException( \"Missing value only works for numeric types\" );\n    }\n    this.missingValue = missingValue;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#setMissingValue(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortField#setMissingValue(Object).mjava","sourceNew":"  public SortField setMissingValue(Object missingValue) {\n    if (type != Type.INT && type != Type.FLOAT && type != Type.LONG && type != Type.DOUBLE) {\n      throw new IllegalArgumentException( \"Missing value only works for numeric types\" );\n    }\n    this.missingValue = missingValue;\n    return this;\n  }\n\n","sourceOld":"  public SortField setMissingValue(Object missingValue) {\n    if (type != Type.BYTE && type != Type.SHORT && type != Type.INT && type != Type.FLOAT && type != Type.LONG && type != Type.DOUBLE) {\n      throw new IllegalArgumentException( \"Missing value only works for numeric types\" );\n    }\n    this.missingValue = missingValue;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#setMissingValue(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortField#setMissingValue(Object).mjava","sourceNew":"  public SortField setMissingValue(Object missingValue) {\n    if (type != Type.INT && type != Type.FLOAT && type != Type.LONG && type != Type.DOUBLE) {\n      throw new IllegalArgumentException( \"Missing value only works for numeric types\" );\n    }\n    this.missingValue = missingValue;\n    return this;\n  }\n\n","sourceOld":"  public SortField setMissingValue(Object missingValue) {\n    if (type != Type.BYTE && type != Type.SHORT && type != Type.INT && type != Type.FLOAT && type != Type.LONG && type != Type.DOUBLE) {\n      throw new IllegalArgumentException( \"Missing value only works for numeric types\" );\n    }\n    this.missingValue = missingValue;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7615b855702e008d91a95a2578bf05d27372f599","date":1389802891,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#setMissingValue(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortField#setMissingValue(Object).mjava","sourceNew":"  public void setMissingValue(Object missingValue) {\n    if (type == Type.STRING) {\n      if (missingValue != STRING_FIRST && missingValue != STRING_LAST) {\n        throw new IllegalArgumentException(\"For STRING type, missing value must be either STRING_FIRST or STRING_LAST\");\n      }\n    } else if (type != Type.INT && type != Type.FLOAT && type != Type.LONG && type != Type.DOUBLE) {\n      throw new IllegalArgumentException(\"Missing value only works for numeric or STRING types\");\n    }\n    this.missingValue = missingValue;\n  }\n\n","sourceOld":"  public SortField setMissingValue(Object missingValue) {\n    if (type != Type.INT && type != Type.FLOAT && type != Type.LONG && type != Type.DOUBLE) {\n      throw new IllegalArgumentException( \"Missing value only works for numeric types\" );\n    }\n    this.missingValue = missingValue;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#setMissingValue(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortField#setMissingValue(Object).mjava","sourceNew":"  public void setMissingValue(Object missingValue) {\n    if (type == Type.STRING) {\n      if (missingValue != STRING_FIRST && missingValue != STRING_LAST) {\n        throw new IllegalArgumentException(\"For STRING type, missing value must be either STRING_FIRST or STRING_LAST\");\n      }\n    } else if (type != Type.INT && type != Type.FLOAT && type != Type.LONG && type != Type.DOUBLE) {\n      throw new IllegalArgumentException(\"Missing value only works for numeric or STRING types\");\n    }\n    this.missingValue = missingValue;\n  }\n\n","sourceOld":"  public SortField setMissingValue(Object missingValue) {\n    if (type != Type.INT && type != Type.FLOAT && type != Type.LONG && type != Type.DOUBLE) {\n      throw new IllegalArgumentException( \"Missing value only works for numeric types\" );\n    }\n    this.missingValue = missingValue;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"400558e34d57baf6a8e8c42d60fc1a87b5acb596","date":1405940665,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#setMissingValue(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortField#setMissingValue(Object).mjava","sourceNew":"  public void setMissingValue(Object missingValue) {\n    if (type == Type.STRING || type == Type.STRING_VAL) {\n      if (missingValue != STRING_FIRST && missingValue != STRING_LAST) {\n        throw new IllegalArgumentException(\"For STRING type, missing value must be either STRING_FIRST or STRING_LAST\");\n      }\n    } else if (type != Type.INT && type != Type.FLOAT && type != Type.LONG && type != Type.DOUBLE) {\n      throw new IllegalArgumentException(\"Missing value only works for numeric or STRING types\");\n    }\n    this.missingValue = missingValue;\n  }\n\n","sourceOld":"  public void setMissingValue(Object missingValue) {\n    if (type == Type.STRING) {\n      if (missingValue != STRING_FIRST && missingValue != STRING_LAST) {\n        throw new IllegalArgumentException(\"For STRING type, missing value must be either STRING_FIRST or STRING_LAST\");\n      }\n    } else if (type != Type.INT && type != Type.FLOAT && type != Type.LONG && type != Type.DOUBLE) {\n      throw new IllegalArgumentException(\"Missing value only works for numeric or STRING types\");\n    }\n    this.missingValue = missingValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45ad8e15b7c86a5318c4ecefdf401bb098cf9610","date":1450794968,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#setMissingValue(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortField#setMissingValue(Object).mjava","sourceNew":"  /** Set the value to use for documents that don't have a value. */\n  public void setMissingValue(Object missingValue) {\n    if (type == Type.STRING || type == Type.STRING_VAL) {\n      if (missingValue != STRING_FIRST && missingValue != STRING_LAST) {\n        throw new IllegalArgumentException(\"For STRING type, missing value must be either STRING_FIRST or STRING_LAST\");\n      }\n    } else if (type == Type.INT) {\n      if (missingValue != null && missingValue.getClass() != Integer.class)\n        throw new IllegalArgumentException(\"Missing values for Type.INT can only be of type java.lang.Integer, but got \" + missingValue.getClass());\n    } else if (type == Type.LONG) {\n      if (missingValue != null && missingValue.getClass() != Long.class)\n        throw new IllegalArgumentException(\"Missing values for Type.LONG can only be of type java.lang.Long, but got \" + missingValue.getClass());\n    } else if (type == Type.FLOAT) {\n      if (missingValue != null && missingValue.getClass() != Float.class)\n        throw new IllegalArgumentException(\"Missing values for Type.FLOAT can only be of type java.lang.Float, but got \" + missingValue.getClass());\n    } else if (type == Type.DOUBLE) {\n      if (missingValue != null && missingValue.getClass() != Double.class)\n        throw new IllegalArgumentException(\"Missing values for Type.DOUBLE can only be of type java.lang.Double, but got \" + missingValue.getClass());\n    } else {\n      throw new IllegalArgumentException(\"Missing value only works for numeric or STRING types\");\n    }\n    this.missingValue = missingValue;\n  }\n\n","sourceOld":"  public void setMissingValue(Object missingValue) {\n    if (type == Type.STRING || type == Type.STRING_VAL) {\n      if (missingValue != STRING_FIRST && missingValue != STRING_LAST) {\n        throw new IllegalArgumentException(\"For STRING type, missing value must be either STRING_FIRST or STRING_LAST\");\n      }\n    } else if (type != Type.INT && type != Type.FLOAT && type != Type.LONG && type != Type.DOUBLE) {\n      throw new IllegalArgumentException(\"Missing value only works for numeric or STRING types\");\n    }\n    this.missingValue = missingValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","59a0020b413d44dd79d85d7a66ed5004265fb453"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["59a0020b413d44dd79d85d7a66ed5004265fb453","7615b855702e008d91a95a2578bf05d27372f599"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7615b855702e008d91a95a2578bf05d27372f599":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"400558e34d57baf6a8e8c42d60fc1a87b5acb596":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"45ad8e15b7c86a5318c4ecefdf401bb098cf9610":["400558e34d57baf6a8e8c42d60fc1a87b5acb596"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45ad8e15b7c86a5318c4ecefdf401bb098cf9610"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"27ab7b234eab0cbc020836989b96ed430e1065bb":["400558e34d57baf6a8e8c42d60fc1a87b5acb596"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","27ab7b234eab0cbc020836989b96ed430e1065bb","7615b855702e008d91a95a2578bf05d27372f599"],"7615b855702e008d91a95a2578bf05d27372f599":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"400558e34d57baf6a8e8c42d60fc1a87b5acb596":["45ad8e15b7c86a5318c4ecefdf401bb098cf9610"],"45ad8e15b7c86a5318c4ecefdf401bb098cf9610":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}