{"path":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBoolQuery().mjava","commits":[{"id":"a7a755b469192b8f8010d9a0f6e274bf304c45cf","date":1504276635,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBoolQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testBoolQuery() throws Exception {\n      assertQueryEquals(\"bool\",\n          \"{!bool must='{!lucene}foo_s:a' must='{!lucene}foo_s:b'}\",\n          \"{!bool must='{!lucene}foo_s:b' must='{!lucene}foo_s:a'}\");\n    assertQueryEquals(\"bool\",\n        \"{!bool must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' \" +\n            \"must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' filter='{!lucene}foo_s:e'}\",\n        \"{!bool must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' \" +\n            \"must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' filter='{!lucene}foo_s:e'}\");\n    try {\n      assertQueryEquals\n          (\"bool\"\n              , \"{!bool must='{!lucene}foo_s:a'}\"\n              , \"{!bool should='{!lucene}foo_s:a'}\"\n          );\n      fail(\"queries should not have been equal\");\n    } catch(AssertionFailedError e) {\n      assertTrue(\"queries were not equal, as expected\", true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBoolQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testBoolQuery() throws Exception {\n      assertQueryEquals(\"bool\",\n          \"{!bool must='{!lucene}foo_s:a' must='{!lucene}foo_s:b'}\",\n          \"{!bool must='{!lucene}foo_s:b' must='{!lucene}foo_s:a'}\");\n    assertQueryEquals(\"bool\",\n        \"{!bool must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' \" +\n            \"must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' filter='{!lucene}foo_s:e'}\",\n        \"{!bool must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' \" +\n            \"must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' filter='{!lucene}foo_s:e'}\");\n    try {\n      assertQueryEquals\n          (\"bool\"\n              , \"{!bool must='{!lucene}foo_s:a'}\"\n              , \"{!bool should='{!lucene}foo_s:a'}\"\n          );\n      fail(\"queries should not have been equal\");\n    } catch(AssertionFailedError e) {\n      assertTrue(\"queries were not equal, as expected\", true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBoolQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testBoolQuery() throws Exception {\n      assertQueryEquals(\"bool\",\n          \"{!bool must='{!lucene}foo_s:a' must='{!lucene}foo_s:b'}\",\n          \"{!bool must='{!lucene}foo_s:b' must='{!lucene}foo_s:a'}\");\n    assertQueryEquals(\"bool\",\n        \"{!bool must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' \" +\n            \"must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' filter='{!lucene}foo_s:e'}\",\n        \"{!bool must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' \" +\n            \"must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' filter='{!lucene}foo_s:e'}\");\n    try {\n      assertQueryEquals\n          (\"bool\"\n              , \"{!bool must='{!lucene}foo_s:a'}\"\n              , \"{!bool should='{!lucene}foo_s:a'}\"\n          );\n      fail(\"queries should not have been equal\");\n    } catch(AssertionFailedError e) {\n      assertTrue(\"queries were not equal, as expected\", true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBoolQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testBoolQuery() throws Exception {\n      assertQueryEquals(\"bool\",\n          \"{!bool must='{!lucene}foo_s:a' must='{!lucene}foo_s:b'}\",\n          \"{!bool must='{!lucene}foo_s:b' must='{!lucene}foo_s:a'}\");\n    assertQueryEquals(\"bool\",\n        \"{!bool must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' \" +\n            \"must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' filter='{!lucene}foo_s:e'}\",\n        \"{!bool must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' \" +\n            \"must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' filter='{!lucene}foo_s:e'}\");\n    try {\n      assertQueryEquals\n          (\"bool\"\n              , \"{!bool must='{!lucene}foo_s:a'}\"\n              , \"{!bool should='{!lucene}foo_s:a'}\"\n          );\n      fail(\"queries should not have been equal\");\n    } catch(AssertionFailedError e) {\n      assertTrue(\"queries were not equal, as expected\", true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464e7336798bc8a1281d5cf610c649c5a0784e83","date":1541256496,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBoolQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBoolQuery().mjava","sourceNew":"  public void testBoolQuery() throws Exception {\n      assertQueryEquals(\"bool\",\n          \"{!bool must='{!lucene}foo_s:a' must='{!lucene}foo_s:b'}\",\n          \"{!bool must='{!lucene}foo_s:b' must='{!lucene}foo_s:a'}\");\n    assertQueryEquals(\"bool\",\n        \"{!bool must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' \" +\n            \"must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' filter='{!lucene}foo_s:e'}\",\n        \"{!bool must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' \" +\n            \"must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' filter='{!lucene}foo_s:e'}\");\n\n    expectThrows(AssertionFailedError.class, \"queries should not have been equal\",\n        () -> assertQueryEquals\n            (\"bool\"\n                , \"{!bool must='{!lucene}foo_s:a'}\"\n                , \"{!bool should='{!lucene}foo_s:a'}\"\n            )\n    );\n  }\n\n","sourceOld":"  public void testBoolQuery() throws Exception {\n      assertQueryEquals(\"bool\",\n          \"{!bool must='{!lucene}foo_s:a' must='{!lucene}foo_s:b'}\",\n          \"{!bool must='{!lucene}foo_s:b' must='{!lucene}foo_s:a'}\");\n    assertQueryEquals(\"bool\",\n        \"{!bool must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' \" +\n            \"must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' filter='{!lucene}foo_s:e'}\",\n        \"{!bool must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' \" +\n            \"must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' filter='{!lucene}foo_s:e'}\");\n    try {\n      assertQueryEquals\n          (\"bool\"\n              , \"{!bool must='{!lucene}foo_s:a'}\"\n              , \"{!bool should='{!lucene}foo_s:a'}\"\n          );\n      fail(\"queries should not have been equal\");\n    } catch(AssertionFailedError e) {\n      assertTrue(\"queries were not equal, as expected\", true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBoolQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBoolQuery().mjava","sourceNew":"  public void testBoolQuery() throws Exception {\n      assertQueryEquals(\"bool\",\n          \"{!bool must='{!lucene}foo_s:a' must='{!lucene}foo_s:b'}\",\n          \"{!bool must='{!lucene}foo_s:b' must='{!lucene}foo_s:a'}\");\n    assertQueryEquals(\"bool\",\n        \"{!bool must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' \" +\n            \"must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' filter='{!lucene}foo_s:e'}\",\n        \"{!bool must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' \" +\n            \"must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' filter='{!lucene}foo_s:e'}\");\n\n    expectThrows(AssertionError.class, \"queries should not have been equal\",\n        () -> assertQueryEquals\n            (\"bool\"\n                , \"{!bool must='{!lucene}foo_s:a'}\"\n                , \"{!bool should='{!lucene}foo_s:a'}\"\n            )\n    );\n  }\n\n","sourceOld":"  public void testBoolQuery() throws Exception {\n      assertQueryEquals(\"bool\",\n          \"{!bool must='{!lucene}foo_s:a' must='{!lucene}foo_s:b'}\",\n          \"{!bool must='{!lucene}foo_s:b' must='{!lucene}foo_s:a'}\");\n    assertQueryEquals(\"bool\",\n        \"{!bool must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' \" +\n            \"must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' filter='{!lucene}foo_s:e'}\",\n        \"{!bool must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' \" +\n            \"must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' filter='{!lucene}foo_s:e'}\");\n\n    expectThrows(AssertionFailedError.class, \"queries should not have been equal\",\n        () -> assertQueryEquals\n            (\"bool\"\n                , \"{!bool must='{!lucene}foo_s:a'}\"\n                , \"{!bool should='{!lucene}foo_s:a'}\"\n            )\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBoolQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBoolQuery().mjava","sourceNew":"  public void testBoolQuery() throws Exception {\n      assertQueryEquals(\"bool\",\n          \"{!bool must='{!lucene}foo_s:a' must='{!lucene}foo_s:b'}\",\n          \"{!bool must='{!lucene}foo_s:b' must='{!lucene}foo_s:a'}\");\n    assertQueryEquals(\"bool\",\n        \"{!bool must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' \" +\n            \"must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' filter='{!lucene}foo_s:e'}\",\n        \"{!bool must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' \" +\n            \"must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' filter='{!lucene}foo_s:e'}\");\n\n    expectThrows(AssertionFailedError.class, \"queries should not have been equal\",\n        () -> assertQueryEquals\n            (\"bool\"\n                , \"{!bool must='{!lucene}foo_s:a'}\"\n                , \"{!bool should='{!lucene}foo_s:a'}\"\n            )\n    );\n  }\n\n","sourceOld":"  public void testBoolQuery() throws Exception {\n      assertQueryEquals(\"bool\",\n          \"{!bool must='{!lucene}foo_s:a' must='{!lucene}foo_s:b'}\",\n          \"{!bool must='{!lucene}foo_s:b' must='{!lucene}foo_s:a'}\");\n    assertQueryEquals(\"bool\",\n        \"{!bool must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' \" +\n            \"must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' filter='{!lucene}foo_s:e'}\",\n        \"{!bool must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' \" +\n            \"must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' filter='{!lucene}foo_s:e'}\");\n\n    expectThrows(AssertionError.class, \"queries should not have been equal\",\n        () -> assertQueryEquals\n            (\"bool\"\n                , \"{!bool must='{!lucene}foo_s:a'}\"\n                , \"{!bool should='{!lucene}foo_s:a'}\"\n            )\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBoolQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testBoolQuery().mjava","sourceNew":"  public void testBoolQuery() throws Exception {\n      assertQueryEquals(\"bool\",\n          \"{!bool must='{!lucene}foo_s:a' must='{!lucene}foo_s:b'}\",\n          \"{!bool must='{!lucene}foo_s:b' must='{!lucene}foo_s:a'}\");\n    assertQueryEquals(\"bool\",\n        \"{!bool must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' \" +\n            \"must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' filter='{!lucene}foo_s:e'}\",\n        \"{!bool must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' \" +\n            \"must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' filter='{!lucene}foo_s:e'}\");\n\n    expectThrows(AssertionError.class, \"queries should not have been equal\",\n        () -> assertQueryEquals\n            (\"bool\"\n                , \"{!bool must='{!lucene}foo_s:a'}\"\n                , \"{!bool should='{!lucene}foo_s:a'}\"\n            )\n    );\n  }\n\n","sourceOld":"  public void testBoolQuery() throws Exception {\n      assertQueryEquals(\"bool\",\n          \"{!bool must='{!lucene}foo_s:a' must='{!lucene}foo_s:b'}\",\n          \"{!bool must='{!lucene}foo_s:b' must='{!lucene}foo_s:a'}\");\n    assertQueryEquals(\"bool\",\n        \"{!bool must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' \" +\n            \"must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' filter='{!lucene}foo_s:e'}\",\n        \"{!bool must='{!lucene}foo_s:c' filter='{!lucene}foo_s:d' \" +\n            \"must_not='{!lucene}foo_s:a' should='{!lucene}foo_s:b' filter='{!lucene}foo_s:e'}\");\n\n    expectThrows(AssertionFailedError.class, \"queries should not have been equal\",\n        () -> assertQueryEquals\n            (\"bool\"\n                , \"{!bool must='{!lucene}foo_s:a'}\"\n                , \"{!bool should='{!lucene}foo_s:a'}\"\n            )\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a7a755b469192b8f8010d9a0f6e274bf304c45cf"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["464e7336798bc8a1281d5cf610c649c5a0784e83"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a7a755b469192b8f8010d9a0f6e274bf304c45cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"a7a755b469192b8f8010d9a0f6e274bf304c45cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"464e7336798bc8a1281d5cf610c649c5a0784e83":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["464e7336798bc8a1281d5cf610c649c5a0784e83"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b21283ed01203901a7257aa4b7f0a0899c86e56e","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","3a7809d1d753b67f48b1a706e17034bf8b624ea3","a7a755b469192b8f8010d9a0f6e274bf304c45cf"],"a7a755b469192b8f8010d9a0f6e274bf304c45cf":["b21283ed01203901a7257aa4b7f0a0899c86e56e","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"464e7336798bc8a1281d5cf610c649c5a0784e83":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}