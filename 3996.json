{"path":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#allocSlice(byte[],int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#allocSlice(byte[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#allocSlice(byte[],int).mjava","sourceNew":"  public int allocSlice(final byte[] slice, final int upto) {\n\n    final int level = slice[upto] & 15;\n    final int newLevel = nextLevelArray[level];\n    final int newSize = levelSizeArray[newLevel];\n\n    // Maybe allocate another block\n    if (byteUpto > BYTE_BLOCK_SIZE-newSize)\n      nextBuffer();\n\n    final int newUpto = byteUpto;\n    final int offset = newUpto + byteOffset;\n    byteUpto += newSize;\n\n    // Copy forward the past 3 bytes (which we are about\n    // to overwrite with the forwarding address):\n    buffer[newUpto] = slice[upto-3];\n    buffer[newUpto+1] = slice[upto-2];\n    buffer[newUpto+2] = slice[upto-1];\n\n    // Write forwarding address at end of last slice:\n    slice[upto-3] = (byte) (offset >>> 24);\n    slice[upto-2] = (byte) (offset >>> 16);\n    slice[upto-1] = (byte) (offset >>> 8);\n    slice[upto] = (byte) offset;\n        \n    // Write new level:\n    buffer[byteUpto-1] = (byte) (16|newLevel);\n\n    return newUpto+3;\n  }\n\n","sourceOld":"  public int allocSlice(final byte[] slice, final int upto) {\n\n    final int level = slice[upto] & 15;\n    final int newLevel = nextLevelArray[level];\n    final int newSize = levelSizeArray[newLevel];\n\n    // Maybe allocate another block\n    if (byteUpto > BYTE_BLOCK_SIZE-newSize)\n      nextBuffer();\n\n    final int newUpto = byteUpto;\n    final int offset = newUpto + byteOffset;\n    byteUpto += newSize;\n\n    // Copy forward the past 3 bytes (which we are about\n    // to overwrite with the forwarding address):\n    buffer[newUpto] = slice[upto-3];\n    buffer[newUpto+1] = slice[upto-2];\n    buffer[newUpto+2] = slice[upto-1];\n\n    // Write forwarding address at end of last slice:\n    slice[upto-3] = (byte) (offset >>> 24);\n    slice[upto-2] = (byte) (offset >>> 16);\n    slice[upto-1] = (byte) (offset >>> 8);\n    slice[upto] = (byte) offset;\n        \n    // Write new level:\n    buffer[byteUpto-1] = (byte) (16|newLevel);\n\n    return newUpto+3;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#allocSlice(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#allocSlice(byte[],int).mjava","sourceNew":"  /**\n   * Creates a new byte slice with the given starting size and \n   * returns the slices offset in the pool.\n   */\n  public int allocSlice(final byte[] slice, final int upto) {\n\n    final int level = slice[upto] & 15;\n    final int newLevel = NEXT_LEVEL_ARRAY[level];\n    final int newSize = LEVEL_SIZE_ARRAY[newLevel];\n\n    // Maybe allocate another block\n    if (byteUpto > BYTE_BLOCK_SIZE-newSize)\n      nextBuffer();\n\n    final int newUpto = byteUpto;\n    final int offset = newUpto + byteOffset;\n    byteUpto += newSize;\n\n    // Copy forward the past 3 bytes (which we are about\n    // to overwrite with the forwarding address):\n    buffer[newUpto] = slice[upto-3];\n    buffer[newUpto+1] = slice[upto-2];\n    buffer[newUpto+2] = slice[upto-1];\n\n    // Write forwarding address at end of last slice:\n    slice[upto-3] = (byte) (offset >>> 24);\n    slice[upto-2] = (byte) (offset >>> 16);\n    slice[upto-1] = (byte) (offset >>> 8);\n    slice[upto] = (byte) offset;\n        \n    // Write new level:\n    buffer[byteUpto-1] = (byte) (16|newLevel);\n\n    return newUpto+3;\n  }\n\n","sourceOld":"  public int allocSlice(final byte[] slice, final int upto) {\n\n    final int level = slice[upto] & 15;\n    final int newLevel = nextLevelArray[level];\n    final int newSize = levelSizeArray[newLevel];\n\n    // Maybe allocate another block\n    if (byteUpto > BYTE_BLOCK_SIZE-newSize)\n      nextBuffer();\n\n    final int newUpto = byteUpto;\n    final int offset = newUpto + byteOffset;\n    byteUpto += newSize;\n\n    // Copy forward the past 3 bytes (which we are about\n    // to overwrite with the forwarding address):\n    buffer[newUpto] = slice[upto-3];\n    buffer[newUpto+1] = slice[upto-2];\n    buffer[newUpto+2] = slice[upto-1];\n\n    // Write forwarding address at end of last slice:\n    slice[upto-3] = (byte) (offset >>> 24);\n    slice[upto-2] = (byte) (offset >>> 16);\n    slice[upto-1] = (byte) (offset >>> 8);\n    slice[upto] = (byte) offset;\n        \n    // Write new level:\n    buffer[byteUpto-1] = (byte) (16|newLevel);\n\n    return newUpto+3;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c447e0427ce53ca53d708ce8b64eaf8cfd372591","date":1359552077,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#allocSlice(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#allocSlice(byte[],int).mjava","sourceNew":"  /**\n   * Creates a new byte slice with the given starting size and \n   * returns the slices offset in the pool.\n   */\n  public int allocSlice(final byte[] slice, final int upto) {\n\n    final int level = slice[upto] & 15;\n    final int newLevel = NEXT_LEVEL_ARRAY[level];\n    final int newSize = LEVEL_SIZE_ARRAY[newLevel];\n\n    // Maybe allocate another block\n    if (byteUpto > BYTE_BLOCK_SIZE-newSize) {\n      nextBuffer();\n    }\n\n    final int newUpto = byteUpto;\n    final int offset = newUpto + byteOffset;\n    byteUpto += newSize;\n\n    // Copy forward the past 3 bytes (which we are about\n    // to overwrite with the forwarding address):\n    buffer[newUpto] = slice[upto-3];\n    buffer[newUpto+1] = slice[upto-2];\n    buffer[newUpto+2] = slice[upto-1];\n\n    // Write forwarding address at end of last slice:\n    slice[upto-3] = (byte) (offset >>> 24);\n    slice[upto-2] = (byte) (offset >>> 16);\n    slice[upto-1] = (byte) (offset >>> 8);\n    slice[upto] = (byte) offset;\n        \n    // Write new level:\n    buffer[byteUpto-1] = (byte) (16|newLevel);\n\n    return newUpto+3;\n  }\n\n","sourceOld":"  /**\n   * Creates a new byte slice with the given starting size and \n   * returns the slices offset in the pool.\n   */\n  public int allocSlice(final byte[] slice, final int upto) {\n\n    final int level = slice[upto] & 15;\n    final int newLevel = NEXT_LEVEL_ARRAY[level];\n    final int newSize = LEVEL_SIZE_ARRAY[newLevel];\n\n    // Maybe allocate another block\n    if (byteUpto > BYTE_BLOCK_SIZE-newSize)\n      nextBuffer();\n\n    final int newUpto = byteUpto;\n    final int offset = newUpto + byteOffset;\n    byteUpto += newSize;\n\n    // Copy forward the past 3 bytes (which we are about\n    // to overwrite with the forwarding address):\n    buffer[newUpto] = slice[upto-3];\n    buffer[newUpto+1] = slice[upto-2];\n    buffer[newUpto+2] = slice[upto-1];\n\n    // Write forwarding address at end of last slice:\n    slice[upto-3] = (byte) (offset >>> 24);\n    slice[upto-2] = (byte) (offset >>> 16);\n    slice[upto-1] = (byte) (offset >>> 8);\n    slice[upto] = (byte) offset;\n        \n    // Write new level:\n    buffer[byteUpto-1] = (byte) (16|newLevel);\n\n    return newUpto+3;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#allocSlice(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#allocSlice(byte[],int).mjava","sourceNew":"  /**\n   * Creates a new byte slice with the given starting size and \n   * returns the slices offset in the pool.\n   */\n  public int allocSlice(final byte[] slice, final int upto) {\n\n    final int level = slice[upto] & 15;\n    final int newLevel = NEXT_LEVEL_ARRAY[level];\n    final int newSize = LEVEL_SIZE_ARRAY[newLevel];\n\n    // Maybe allocate another block\n    if (byteUpto > BYTE_BLOCK_SIZE-newSize) {\n      nextBuffer();\n    }\n\n    final int newUpto = byteUpto;\n    final int offset = newUpto + byteOffset;\n    byteUpto += newSize;\n\n    // Copy forward the past 3 bytes (which we are about\n    // to overwrite with the forwarding address):\n    buffer[newUpto] = slice[upto-3];\n    buffer[newUpto+1] = slice[upto-2];\n    buffer[newUpto+2] = slice[upto-1];\n\n    // Write forwarding address at end of last slice:\n    slice[upto-3] = (byte) (offset >>> 24);\n    slice[upto-2] = (byte) (offset >>> 16);\n    slice[upto-1] = (byte) (offset >>> 8);\n    slice[upto] = (byte) offset;\n        \n    // Write new level:\n    buffer[byteUpto-1] = (byte) (16|newLevel);\n\n    return newUpto+3;\n  }\n\n","sourceOld":"  /**\n   * Creates a new byte slice with the given starting size and \n   * returns the slices offset in the pool.\n   */\n  public int allocSlice(final byte[] slice, final int upto) {\n\n    final int level = slice[upto] & 15;\n    final int newLevel = NEXT_LEVEL_ARRAY[level];\n    final int newSize = LEVEL_SIZE_ARRAY[newLevel];\n\n    // Maybe allocate another block\n    if (byteUpto > BYTE_BLOCK_SIZE-newSize)\n      nextBuffer();\n\n    final int newUpto = byteUpto;\n    final int offset = newUpto + byteOffset;\n    byteUpto += newSize;\n\n    // Copy forward the past 3 bytes (which we are about\n    // to overwrite with the forwarding address):\n    buffer[newUpto] = slice[upto-3];\n    buffer[newUpto+1] = slice[upto-2];\n    buffer[newUpto+2] = slice[upto-1];\n\n    // Write forwarding address at end of last slice:\n    slice[upto-3] = (byte) (offset >>> 24);\n    slice[upto-2] = (byte) (offset >>> 16);\n    slice[upto-1] = (byte) (offset >>> 8);\n    slice[upto] = (byte) offset;\n        \n    // Write new level:\n    buffer[byteUpto-1] = (byte) (16|newLevel);\n\n    return newUpto+3;\n  }\n\n","bugFix":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c447e0427ce53ca53d708ce8b64eaf8cfd372591":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63","c447e0427ce53ca53d708ce8b64eaf8cfd372591"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"c447e0427ce53ca53d708ce8b64eaf8cfd372591":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["c447e0427ce53ca53d708ce8b64eaf8cfd372591","d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}