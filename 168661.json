{"path":"lucene/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","commits":[{"id":"985161df9b1c14b4aa862d74d48cf51561579e62","date":1302636954,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    final List<BytesRef> savedTerms = new ArrayList<BytesRef>();\n    int nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(new BytesRef(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    final List<BytesRef> savedTerms = new ArrayList<BytesRef>();\n    int nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(new BytesRef(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    final List<BytesRef> savedTerms = new ArrayList<BytesRef>();\n    int nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(new BytesRef(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    final List<BytesRef> savedTerms = new ArrayList<BytesRef>();\n    int nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(new BytesRef(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","sourceNew":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    final List<BytesRef> savedTerms = new ArrayList<BytesRef>();\n    int nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(new BytesRef(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","sourceOld":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    final List<BytesRef> savedTerms = new ArrayList<BytesRef>();\n    int nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(new BytesRef(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","sourceNew":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    final List<BytesRef> savedTerms = new ArrayList<BytesRef>();\n    int nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","sourceOld":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    final List<BytesRef> savedTerms = new ArrayList<BytesRef>();\n    int nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(new BytesRef(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","sourceNew":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    final List<BytesRef> savedTerms = new ArrayList<BytesRef>();\n    int nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","sourceOld":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    final List<BytesRef> savedTerms = new ArrayList<BytesRef>();\n    int nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e6e919043fa85ee891123768dd655a98edbbf63c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","985161df9b1c14b4aa862d74d48cf51561579e62"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","985161df9b1c14b4aa862d74d48cf51561579e62"],"3cc749c053615f5871f3b95715fe292f34e70a53":["985161df9b1c14b4aa862d74d48cf51561579e62"],"962d04139994fce5193143ef35615499a9a96d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","985161df9b1c14b4aa862d74d48cf51561579e62"],"e6e919043fa85ee891123768dd655a98edbbf63c":["3cc749c053615f5871f3b95715fe292f34e70a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"985161df9b1c14b4aa862d74d48cf51561579e62":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","985161df9b1c14b4aa862d74d48cf51561579e62"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["e6e919043fa85ee891123768dd655a98edbbf63c"],"962d04139994fce5193143ef35615499a9a96d78":[],"e6e919043fa85ee891123768dd655a98edbbf63c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"985161df9b1c14b4aa862d74d48cf51561579e62":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","3cc749c053615f5871f3b95715fe292f34e70a53","962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}