{"path":"lucene/src/java/org/apache/lucene/index/MultiReader#doOpenIfChanged().mjava","commits":[{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":2,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doOpenIfChanged().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#reopen().mjava","sourceNew":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. IndexReader.openIfChanged(subReader) \n   * returned a new instance), then a new MultiReader instance \n   * is returned, otherwise this instance is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#openIfChanged}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doOpenIfChanged(false);\n  }\n\n","sourceOld":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. subReader.reopen() \n   * returned a new instance != subReader), then a new ParallelReader instance \n   * is returned, otherwise this instance is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#reopen()}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    // doReopen calls ensureOpen\n    return doReopen(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac7dd9818a7652666183eb1d4bfadc4317bba7df","date":1323510702,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doOpenIfChanged().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doOpenIfChanged().mjava","sourceNew":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. IndexReader.openIfChanged(subReader) \n   * returned a new instance), then a new MultiReader instance \n   * is returned, otherwise this instance is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#openIfChanged}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doReopen(false);\n  }\n\n","sourceOld":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. IndexReader.openIfChanged(subReader) \n   * returned a new instance), then a new MultiReader instance \n   * is returned, otherwise this instance is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#openIfChanged}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doOpenIfChanged(false);\n  }\n\n","bugFix":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doOpenIfChanged().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doOpenIfChanged().mjava","sourceNew":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. IndexReader.openIfChanged(subReader) \n   * returned a new instance), then a new MultiReader instance \n   * is returned, otherwise this instance is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#openIfChanged}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doReopen(false);\n  }\n\n","sourceOld":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. IndexReader.openIfChanged(subReader) \n   * returned a new instance), then a new MultiReader instance \n   * is returned, otherwise this instance is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#openIfChanged}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doOpenIfChanged(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","date":1323543613,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doOpenIfChanged().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doOpenIfChanged().mjava","sourceNew":"  @Override\n  protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doReopen(false);\n  }\n\n","sourceOld":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. IndexReader.openIfChanged(subReader) \n   * returned a new instance), then a new MultiReader instance \n   * is returned, otherwise this instance is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#openIfChanged}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doReopen(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doOpenIfChanged().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doOpenIfChanged().mjava","sourceNew":"  @Override\n  protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doReopen(false);\n  }\n\n","sourceOld":"  /**\n   * Tries to reopen the subreaders.\n   * <br>\n   * If one or more subreaders could be re-opened (i. e. IndexReader.openIfChanged(subReader) \n   * returned a new instance), then a new MultiReader instance \n   * is returned, otherwise this instance is returned.\n   * <p>\n   * A re-opened instance might share one or more subreaders with the old \n   * instance. Index modification operations result in undefined behavior\n   * when performed before the old instance is closed.\n   * (see {@link IndexReader#openIfChanged}).\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error \n   */\n  @Override\n  protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doReopen(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doOpenIfChanged().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doOpenIfChanged().mjava","sourceNew":"  @Override\n  protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean changed = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        final IndexReader newSubReader = IndexReader.openIfChanged(subReaders[i]);\n        if (newSubReader != null) {\n          newSubReaders[i] = newSubReader;\n          changed = true;\n        } else {\n          newSubReaders[i] = subReaders[i];\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && changed) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (changed) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      return new MultiReader(newSubReaders, newDecrefOnClose);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doReopen(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doOpenIfChanged().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doOpenIfChanged().mjava","sourceNew":"  @Override\n  protected synchronized CompositeIndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    // nocommit: remove this method\n    return null;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean changed = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        final IndexReader newSubReader = IndexReader.openIfChanged(subReaders[i]);\n        if (newSubReader != null) {\n          newSubReaders[i] = newSubReader;\n          changed = true;\n        } else {\n          newSubReaders[i] = subReaders[i];\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && changed) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (changed) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      return new MultiReader(newSubReaders, newDecrefOnClose);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doOpenIfChanged().mjava","sourceNew":null,"sourceOld":"  @Override\n  protected synchronized CompositeIndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    // nocommit: remove this method\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doOpenIfChanged().mjava","sourceNew":null,"sourceOld":"  @Override\n  protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean changed = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        final IndexReader newSubReader = IndexReader.openIfChanged(subReaders[i]);\n        if (newSubReader != null) {\n          newSubReaders[i] = newSubReader;\n          changed = true;\n        } else {\n          newSubReaders[i] = subReaders[i];\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && changed) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (changed) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      return new MultiReader(newSubReaders, newDecrefOnClose);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["ac7dd9818a7652666183eb1d4bfadc4317bba7df"],"ac7dd9818a7652666183eb1d4bfadc4317bba7df":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"893d07555f01912f57b453a320e4d46363a31b50":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["8a8259c922a83abc544609227a60d48e5ee93e7e","ac7dd9818a7652666183eb1d4bfadc4317bba7df"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9ce667c6d3400b22523701c549c0d35e26da8b46","893d07555f01912f57b453a320e4d46363a31b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["9ce667c6d3400b22523701c549c0d35e26da8b46"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["ac7dd9818a7652666183eb1d4bfadc4317bba7df","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","9ce667c6d3400b22523701c549c0d35e26da8b46"],"ac7dd9818a7652666183eb1d4bfadc4317bba7df":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"893d07555f01912f57b453a320e4d46363a31b50":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["893d07555f01912f57b453a320e4d46363a31b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}