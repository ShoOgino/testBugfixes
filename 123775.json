{"path":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrap().mjava","commits":[{"id":"cf4e43a4d7a969632d4bec76fd5bba149cb81487","date":1342043143,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrap().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBootstrap() throws Exception {\n    // test bootstrap_conf\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", TEST_HOME()};\n    ZkCLI.main(args);\n\n\n    assertTrue(zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", true));\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/collection1\", true));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrap().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBootstrap() throws Exception {\n    // test bootstrap_conf\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", TEST_HOME()};\n    ZkCLI.main(args);\n\n\n    assertTrue(zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", true));\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/collection1\", true));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96c692b5bdca33a6392254cacfbe5a5136a19209","date":1342993627,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrap().mjava","sourceNew":"  @Test\n  public void testBootstrap() throws Exception {\n    // test bootstrap_conf\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_HOME};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/collection1\", true));\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_MULTICORE_HOME};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core0\", true));\n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core1\", true));\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testBootstrap() throws Exception {\n    // test bootstrap_conf\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", TEST_HOME()};\n    ZkCLI.main(args);\n\n\n    assertTrue(zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", true));\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/collection1\", true));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrap().mjava","sourceNew":"  @Test\n  public void testBootstrap() throws Exception {\n    // test bootstrap_conf\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_HOME};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/collection1\", true));\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_MULTICORE_HOME};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core0\", true));\n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core1\", true));\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testBootstrap() throws Exception {\n    // test bootstrap_conf\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", TEST_HOME()};\n    ZkCLI.main(args);\n\n\n    assertTrue(zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/collection1\", true));\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/collection1\", true));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrap().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBootstrap() throws Exception {\n    // test bootstrap_conf\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_HOME};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/collection1\", true));\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_MULTICORE_HOME};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core0\", true));\n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core1\", true));\n    \n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0e70591e1e23afedf79324b42591f71a3e711b5","date":1355181494,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrap().mjava","sourceNew":"  @Test\n  public void testBootstrap() throws Exception {\n    // test bootstrap_conf\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_HOME};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/collection1\", true));\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_MULTICORE_HOME};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core0\", true));\n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core1\", true));\n  }\n\n","sourceOld":"  @Test\n  public void testBootstrap() throws Exception {\n    // test bootstrap_conf\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_HOME};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/collection1\", true));\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_MULTICORE_HOME};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core0\", true));\n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core1\", true));\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrap().mjava","sourceNew":"  @Test\n  public void testBootstrap() throws Exception {\n    // test bootstrap_conf\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_HOME};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/collection1\", true));\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_MULTICORE_HOME};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core0\", true));\n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core1\", true));\n  }\n\n","sourceOld":"  @Test\n  public void testBootstrap() throws Exception {\n    // test bootstrap_conf\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_HOME};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/collection1\", true));\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_MULTICORE_HOME};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core0\", true));\n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core1\", true));\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9","date":1366986755,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrap().mjava","sourceNew":"  @Test\n  public void testBootstrap() throws Exception {\n    // test bootstrap_conf\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", this.solrHome};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/collection1\", true));\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_MULTICORE_HOME};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core0\", true));\n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core1\", true));\n  }\n\n","sourceOld":"  @Test\n  public void testBootstrap() throws Exception {\n    // test bootstrap_conf\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_HOME};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/collection1\", true));\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_MULTICORE_HOME};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core0\", true));\n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core1\", true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fb75838ea3c6b1fa977394f436bfffb53b417bc","date":1418226395,"type":4,"author":"Timothy Potter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrap().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testBootstrap() throws Exception {\n    // test bootstrap_conf\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", this.solrHome};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/collection1\", true));\n    \n    args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\",\n        \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_MULTICORE_HOME};\n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core0\", true));\n    assertTrue(zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/core1\", true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["96c692b5bdca33a6392254cacfbe5a5136a19209","d0e70591e1e23afedf79324b42591f71a3e711b5"],"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9":["d0e70591e1e23afedf79324b42591f71a3e711b5"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","96c692b5bdca33a6392254cacfbe5a5136a19209"],"96c692b5bdca33a6392254cacfbe5a5136a19209":["cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"cf4e43a4d7a969632d4bec76fd5bba149cb81487":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"6fb75838ea3c6b1fa977394f436bfffb53b417bc":["e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0e70591e1e23afedf79324b42591f71a3e711b5":["96c692b5bdca33a6392254cacfbe5a5136a19209"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","96c692b5bdca33a6392254cacfbe5a5136a19209"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6fb75838ea3c6b1fa977394f436bfffb53b417bc"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9":["6fb75838ea3c6b1fa977394f436bfffb53b417bc"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"96c692b5bdca33a6392254cacfbe5a5136a19209":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","d0e70591e1e23afedf79324b42591f71a3e711b5","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"cf4e43a4d7a969632d4bec76fd5bba149cb81487":["96c692b5bdca33a6392254cacfbe5a5136a19209","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","cf4e43a4d7a969632d4bec76fd5bba149cb81487","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"6fb75838ea3c6b1fa977394f436bfffb53b417bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0e70591e1e23afedf79324b42591f71a3e711b5":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}