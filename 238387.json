{"path":"backwards/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc2_Query1_Slop_6_or_more_Should_match().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc2_Query1_Slop_6_or_more_Should_match().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test DOC_2 and QUERY_1.\n   * 6 should be the minimum slop to make QUERY_1 match DOC_2.\n   * Before LUCENE-1310, 7 was the minimum.\n   */\n  public void testDoc2_Query1_Slop_6_or_more_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      int numResultsExpected = slop<6 ? 0 : 1;\n      float score1 = checkPhraseQuery(DOC_2, QUERY_1, slop, numResultsExpected);\n      if (numResultsExpected>0) {\n        float score2 = checkPhraseQuery(DOC_2_B, QUERY_1, slop, 1);\n        assertTrue(\"slop=\"+slop+\" score2=\"+score2+\" should be greater than score1 \"+score1, score2>score1);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc2_Query1_Slop_6_or_more_Should_match().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc2_Query1_Slop_6_or_more_Should_match().mjava","sourceNew":"  /**\n   * Test DOC_2 and QUERY_1.\n   * 6 should be the minimum slop to make QUERY_1 match DOC_2.\n   * Before LUCENE-1310, 7 was the minimum.\n   */\n  public void testDoc2_Query1_Slop_6_or_more_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      int numResultsExpected = slop<6 ? 0 : 1;\n      float score1 = checkPhraseQuery(DOC_2, QUERY_1, slop, numResultsExpected);\n      if (numResultsExpected>0) {\n        float score2 = checkPhraseQuery(DOC_2_B, QUERY_1, slop, 1);\n        assertTrue(\"slop=\"+slop+\" score2=\"+score2+\" should be greater than score1 \"+score1, score2>score1);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test DOC_2 and QUERY_1.\n   * 6 should be the minimum slop to make QUERY_1 match DOC_2.\n   * Before LUCENE-1310, 7 was the minimum.\n   */\n  public void testDoc2_Query1_Slop_6_or_more_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      int numResultsExpected = slop<6 ? 0 : 1;\n      float score1 = checkPhraseQuery(DOC_2, QUERY_1, slop, numResultsExpected);\n      if (numResultsExpected>0) {\n        float score2 = checkPhraseQuery(DOC_2_B, QUERY_1, slop, 1);\n        assertTrue(\"slop=\"+slop+\" score2=\"+score2+\" should be greater than score1 \"+score1, score2>score1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}