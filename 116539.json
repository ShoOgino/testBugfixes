{"path":"src/java/org/apache/lucene/index/DirectoryIndexReader#init(Directory,SegmentInfos,boolean,boolean).mjava","commits":[{"id":"5712975970a595c28f1988efd007e1b8a617a92f","date":1219499238,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryIndexReader#init(Directory,SegmentInfos,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#init(Directory,SegmentInfos,boolean).mjava","sourceNew":"  void init(Directory directory, SegmentInfos segmentInfos, boolean closeDirectory, boolean readOnly)\n    throws IOException {\n    this.directory = directory;\n    this.segmentInfos = segmentInfos;\n    this.closeDirectory = closeDirectory;\n    this.readOnly = readOnly;\n\n    if (!readOnly && segmentInfos != null) {\n      // We assume that this segments_N was previously\n      // properly sync'd:\n      for(int i=0;i<segmentInfos.size();i++) {\n        final SegmentInfo info = segmentInfos.info(i);\n        List files = info.files();\n        for(int j=0;j<files.size();j++)\n          synced.add(files.get(j));\n      }\n    }\n  }\n\n","sourceOld":"  void init(Directory directory, SegmentInfos segmentInfos, boolean closeDirectory)\n    throws IOException {\n    this.directory = directory;\n    this.segmentInfos = segmentInfos;\n    this.closeDirectory = closeDirectory;\n\n    if (segmentInfos != null) {\n      // We assume that this segments_N was previously\n      // properly sync'd:\n      for(int i=0;i<segmentInfos.size();i++) {\n        final SegmentInfo info = segmentInfos.info(i);\n        List files = info.files();\n        for(int j=0;j<files.size();j++)\n          synced.add(files.get(j));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f44610301174bfb430443d89a88dc1c502feea1","date":1231194664,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryIndexReader#init(Directory,SegmentInfos,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#init(Directory,SegmentInfos,boolean,boolean).mjava","sourceNew":"  void init(Directory directory, SegmentInfos segmentInfos, boolean closeDirectory, boolean readOnly)\n    throws IOException {\n    this.directory = directory;\n    this.segmentInfos = segmentInfos;\n    this.closeDirectory = closeDirectory;\n    this.readOnly = readOnly;\n\n    if (!readOnly && segmentInfos != null) {\n      // We assume that this segments_N was previously\n      // properly sync'd:\n      synced.addAll(segmentInfos.files(directory, true));\n    }\n  }\n\n","sourceOld":"  void init(Directory directory, SegmentInfos segmentInfos, boolean closeDirectory, boolean readOnly)\n    throws IOException {\n    this.directory = directory;\n    this.segmentInfos = segmentInfos;\n    this.closeDirectory = closeDirectory;\n    this.readOnly = readOnly;\n\n    if (!readOnly && segmentInfos != null) {\n      // We assume that this segments_N was previously\n      // properly sync'd:\n      for(int i=0;i<segmentInfos.size();i++) {\n        final SegmentInfo info = segmentInfos.info(i);\n        List files = info.files();\n        for(int j=0;j<files.size();j++)\n          synced.add(files.get(j));\n      }\n    }\n  }\n\n","bugFix":["e82780afe6097066eb5befb86e9432f077667e3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryIndexReader#init(Directory,SegmentInfos,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#init(Directory,SegmentInfos,boolean,boolean).mjava","sourceNew":"  void init(Directory directory, SegmentInfos segmentInfos, boolean closeDirectory, boolean readOnly)\n    throws IOException {\n    this.directory = directory;\n    this.segmentInfos = segmentInfos;\n    this.closeDirectory = closeDirectory;\n    this.readOnly = readOnly;\n\n    if (readOnly) {\n      assert this instanceof ReadOnlySegmentReader ||\n        this instanceof ReadOnlyMultiSegmentReader;\n    } else {\n      assert !(this instanceof ReadOnlySegmentReader) &&\n        !(this instanceof ReadOnlyMultiSegmentReader);\n    }\n\n    if (!readOnly && segmentInfos != null) {\n      // We assume that this segments_N was previously\n      // properly sync'd:\n      synced.addAll(segmentInfos.files(directory, true));\n    }\n  }\n\n","sourceOld":"  void init(Directory directory, SegmentInfos segmentInfos, boolean closeDirectory, boolean readOnly)\n    throws IOException {\n    this.directory = directory;\n    this.segmentInfos = segmentInfos;\n    this.closeDirectory = closeDirectory;\n    this.readOnly = readOnly;\n\n    if (!readOnly && segmentInfos != null) {\n      // We assume that this segments_N was previously\n      // properly sync'd:\n      synced.addAll(segmentInfos.files(directory, true));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#init(Directory,SegmentInfos,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  void init(Directory directory, SegmentInfos segmentInfos, boolean closeDirectory, boolean readOnly)\n    throws IOException {\n    this.directory = directory;\n    this.segmentInfos = segmentInfos;\n    this.closeDirectory = closeDirectory;\n    this.readOnly = readOnly;\n\n    if (readOnly) {\n      assert this instanceof ReadOnlySegmentReader ||\n        this instanceof ReadOnlyMultiSegmentReader;\n    } else {\n      assert !(this instanceof ReadOnlySegmentReader) &&\n        !(this instanceof ReadOnlyMultiSegmentReader);\n    }\n\n    if (!readOnly && segmentInfos != null) {\n      // We assume that this segments_N was previously\n      // properly sync'd:\n      synced.addAll(segmentInfos.files(directory, true));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["0f44610301174bfb430443d89a88dc1c502feea1"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"0f44610301174bfb430443d89a88dc1c502feea1":["5712975970a595c28f1988efd007e1b8a617a92f"],"5712975970a595c28f1988efd007e1b8a617a92f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f44610301174bfb430443d89a88dc1c502feea1":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"5712975970a595c28f1988efd007e1b8a617a92f":["0f44610301174bfb430443d89a88dc1c502feea1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5712975970a595c28f1988efd007e1b8a617a92f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}