{"path":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#concurrentUpdates(ModifiableSolrParams,String).mjava","commits":[{"id":"11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6","date":1547236077,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#concurrentUpdates(ModifiableSolrParams,String).mjava","pathOld":"/dev/null","sourceNew":"  private void concurrentUpdates(ModifiableSolrParams params, String alias) throws SolrServerException, IOException {\n    // In this method we intentionally rely on timing of a race condition but the gap in collection creation time vs\n    // requesting the list of aliases and adding a single doc should be very large (1-2 seconds vs a few ms so we\n    // should always win the race) This is necessary  because we are testing that we can guard against specific race\n    // conditions that happen while a collection is being created. To test this without timing sensitivity we would\n    // need a means to pass a semaphore to the server that it can use to delay collection creation\n    //\n    // This method must NOT gain any Thread.sleep() statements, nor should it gain any long running operations\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"2\", \"timestamp_dt\", \"2017-10-24T00:00:00Z\"),\n        sdoc(\"id\", \"3\", \"timestamp_dt\", \"2017-10-25T00:00:00Z\"),\n        sdoc(\"id\", \"4\", \"timestamp_dt\", \"2017-10-23T00:00:00Z\"),\n        sdoc(\"id\", \"5\", \"timestamp_dt\", \"2017-10-25T23:00:00Z\")), // should cause preemptive creation\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    List<String> colsT1;\n    colsT1 = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3, colsT1.size());\n    assertTrue(\"Preemptive creation appears to not be asynchronous anymore\", !colsT1.contains(\"myalias_2017-10-26\"));\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 3, alias);\n\n    // Here we quickly add another doc in a separate request, before the collection creation has completed.\n    // This has the potential to incorrectly cause preemptive collection creation to run twice and create a\n    // second collection. TimeRoutedAliasUpdateProcessor is meant to guard against this race condition.\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"6\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), // might cause duplicate preemptive creation\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#concurrentUpdates(ModifiableSolrParams,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#concurrentUpdates(ModifiableSolrParams,String).mjava","sourceNew":"  private void concurrentUpdates(ModifiableSolrParams params, String alias) throws SolrServerException, IOException {\n    // In this method we intentionally rely on timing of a race condition but the gap in collection creation time vs\n    // requesting the list of aliases and adding a single doc should be very large (1-2 seconds vs a few ms so we\n    // should always win the race) This is necessary  because we are testing that we can guard against specific race\n    // conditions that happen while a collection is being created. To test this without timing sensitivity we would\n    // need a means to pass a semaphore to the server that it can use to delay collection creation\n    //\n    // This method must NOT gain any Thread.sleep() statements, nor should it gain any long running operations\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"2\", \"timestamp_dt\", \"2017-10-24T00:00:00Z\"),\n        sdoc(\"id\", \"3\", \"timestamp_dt\", \"2017-10-25T00:00:00Z\"),\n        sdoc(\"id\", \"4\", \"timestamp_dt\", \"2017-10-23T00:00:00Z\"),\n        sdoc(\"id\", \"5\", \"timestamp_dt\", \"2017-10-25T23:00:00Z\")), // should cause preemptive creation\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    List<String> colsT1;\n    colsT1 = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3, colsT1.size());\n    assertTrue(\"Preemptive creation appears to not be asynchronous anymore\", !colsT1.contains(\"myalias_2017-10-26\"));\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 3, alias);\n\n    // Here we quickly add another doc in a separate request, before the collection creation has completed.\n    // This has the potential to incorrectly cause preemptive collection creation to run twice and create a\n    // second collection. RoutedAliasUpdateProcessor is meant to guard against this race condition.\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"6\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), // might cause duplicate preemptive creation\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n  }\n\n","sourceOld":"  private void concurrentUpdates(ModifiableSolrParams params, String alias) throws SolrServerException, IOException {\n    // In this method we intentionally rely on timing of a race condition but the gap in collection creation time vs\n    // requesting the list of aliases and adding a single doc should be very large (1-2 seconds vs a few ms so we\n    // should always win the race) This is necessary  because we are testing that we can guard against specific race\n    // conditions that happen while a collection is being created. To test this without timing sensitivity we would\n    // need a means to pass a semaphore to the server that it can use to delay collection creation\n    //\n    // This method must NOT gain any Thread.sleep() statements, nor should it gain any long running operations\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"2\", \"timestamp_dt\", \"2017-10-24T00:00:00Z\"),\n        sdoc(\"id\", \"3\", \"timestamp_dt\", \"2017-10-25T00:00:00Z\"),\n        sdoc(\"id\", \"4\", \"timestamp_dt\", \"2017-10-23T00:00:00Z\"),\n        sdoc(\"id\", \"5\", \"timestamp_dt\", \"2017-10-25T23:00:00Z\")), // should cause preemptive creation\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    List<String> colsT1;\n    colsT1 = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3, colsT1.size());\n    assertTrue(\"Preemptive creation appears to not be asynchronous anymore\", !colsT1.contains(\"myalias_2017-10-26\"));\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 3, alias);\n\n    // Here we quickly add another doc in a separate request, before the collection creation has completed.\n    // This has the potential to incorrectly cause preemptive collection creation to run twice and create a\n    // second collection. TimeRoutedAliasUpdateProcessor is meant to guard against this race condition.\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"6\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), // might cause duplicate preemptive creation\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"105e345cf3c0abed3cb6c109274a379cb2655adc","date":1561038472,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#concurrentUpdates(ModifiableSolrParams,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#concurrentUpdates(ModifiableSolrParams,String).mjava","sourceNew":"  private void concurrentUpdates(ModifiableSolrParams params, String alias) throws SolrServerException, IOException {\n    // In this method we intentionally rely on timing of a race condition but the gap in collection creation time vs\n    // requesting the list of aliases and adding a single doc should be very large (1-2 seconds vs a few ms so we\n    // should always win the race) This is necessary  because we are testing that we can guard against specific race\n    // conditions that happen while a collection is being created. To test this without timing sensitivity we would\n    // need a means to pass a semaphore to the server that it can use to delay collection creation\n    //\n    // This method must NOT gain any Thread.sleep() statements, nor should it gain any long running operations\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"2\", \"timestamp_dt\", \"2017-10-24T00:00:00Z\"),\n        sdoc(\"id\", \"3\", \"timestamp_dt\", \"2017-10-25T00:00:00Z\"),\n        sdoc(\"id\", \"4\", \"timestamp_dt\", \"2017-10-23T00:00:00Z\"),\n        sdoc(\"id\", \"5\", \"timestamp_dt\", \"2017-10-25T23:00:00Z\")), // should cause preemptive creation\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    List<String> colsT1;\n    colsT1 = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3, colsT1.size());\n    assertTrue(\"Preemptive creation appears to not be asynchronous anymore\", !colsT1.contains(\"myalias\" + TRA + \"2017-10-26\"));\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 3, alias);\n\n    // Here we quickly add another doc in a separate request, before the collection creation has completed.\n    // This has the potential to incorrectly cause preemptive collection creation to run twice and create a\n    // second collection. RoutedAliasUpdateProcessor is meant to guard against this race condition.\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"6\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), // might cause duplicate preemptive creation\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n  }\n\n","sourceOld":"  private void concurrentUpdates(ModifiableSolrParams params, String alias) throws SolrServerException, IOException {\n    // In this method we intentionally rely on timing of a race condition but the gap in collection creation time vs\n    // requesting the list of aliases and adding a single doc should be very large (1-2 seconds vs a few ms so we\n    // should always win the race) This is necessary  because we are testing that we can guard against specific race\n    // conditions that happen while a collection is being created. To test this without timing sensitivity we would\n    // need a means to pass a semaphore to the server that it can use to delay collection creation\n    //\n    // This method must NOT gain any Thread.sleep() statements, nor should it gain any long running operations\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"2\", \"timestamp_dt\", \"2017-10-24T00:00:00Z\"),\n        sdoc(\"id\", \"3\", \"timestamp_dt\", \"2017-10-25T00:00:00Z\"),\n        sdoc(\"id\", \"4\", \"timestamp_dt\", \"2017-10-23T00:00:00Z\"),\n        sdoc(\"id\", \"5\", \"timestamp_dt\", \"2017-10-25T23:00:00Z\")), // should cause preemptive creation\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    List<String> colsT1;\n    colsT1 = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3, colsT1.size());\n    assertTrue(\"Preemptive creation appears to not be asynchronous anymore\", !colsT1.contains(\"myalias_2017-10-26\"));\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 3, alias);\n\n    // Here we quickly add another doc in a separate request, before the collection creation has completed.\n    // This has the potential to incorrectly cause preemptive collection creation to run twice and create a\n    // second collection. RoutedAliasUpdateProcessor is meant to guard against this race condition.\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"6\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), // might cause duplicate preemptive creation\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#concurrentUpdates(ModifiableSolrParams,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#concurrentUpdates(ModifiableSolrParams,String).mjava","sourceNew":"  private void concurrentUpdates(ModifiableSolrParams params, String alias) throws SolrServerException, IOException {\n    // In this method we intentionally rely on timing of a race condition but the gap in collection creation time vs\n    // requesting the list of aliases and adding a single doc should be very large (1-2 seconds vs a few ms so we\n    // should always win the race) This is necessary  because we are testing that we can guard against specific race\n    // conditions that happen while a collection is being created. To test this without timing sensitivity we would\n    // need a means to pass a semaphore to the server that it can use to delay collection creation\n    //\n    // This method must NOT gain any Thread.sleep() statements, nor should it gain any long running operations\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"2\", \"timestamp_dt\", \"2017-10-24T00:00:00Z\"),\n        sdoc(\"id\", \"3\", \"timestamp_dt\", \"2017-10-25T00:00:00Z\"),\n        sdoc(\"id\", \"4\", \"timestamp_dt\", \"2017-10-23T00:00:00Z\"),\n        sdoc(\"id\", \"5\", \"timestamp_dt\", \"2017-10-25T23:00:00Z\")), // should cause preemptive creation\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    List<String> colsT1;\n    colsT1 = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3, colsT1.size());\n    assertTrue(\"Preemptive creation appears to not be asynchronous anymore\", !colsT1.contains(\"myalias\" + TRA + \"2017-10-26\"));\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 3, alias);\n\n    // Here we quickly add another doc in a separate request, before the collection creation has completed.\n    // This has the potential to incorrectly cause preemptive collection creation to run twice and create a\n    // second collection. MaintainRoutedAliasCmd is meant to guard against this race condition by acquiring\n    // a lock on the collection name.\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"6\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), // might cause duplicate preemptive creation\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n  }\n\n","sourceOld":"  private void concurrentUpdates(ModifiableSolrParams params, String alias) throws SolrServerException, IOException {\n    // In this method we intentionally rely on timing of a race condition but the gap in collection creation time vs\n    // requesting the list of aliases and adding a single doc should be very large (1-2 seconds vs a few ms so we\n    // should always win the race) This is necessary  because we are testing that we can guard against specific race\n    // conditions that happen while a collection is being created. To test this without timing sensitivity we would\n    // need a means to pass a semaphore to the server that it can use to delay collection creation\n    //\n    // This method must NOT gain any Thread.sleep() statements, nor should it gain any long running operations\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"2\", \"timestamp_dt\", \"2017-10-24T00:00:00Z\"),\n        sdoc(\"id\", \"3\", \"timestamp_dt\", \"2017-10-25T00:00:00Z\"),\n        sdoc(\"id\", \"4\", \"timestamp_dt\", \"2017-10-23T00:00:00Z\"),\n        sdoc(\"id\", \"5\", \"timestamp_dt\", \"2017-10-25T23:00:00Z\")), // should cause preemptive creation\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    List<String> colsT1;\n    colsT1 = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3, colsT1.size());\n    assertTrue(\"Preemptive creation appears to not be asynchronous anymore\", !colsT1.contains(\"myalias\" + TRA + \"2017-10-26\"));\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 3, alias);\n\n    // Here we quickly add another doc in a separate request, before the collection creation has completed.\n    // This has the potential to incorrectly cause preemptive collection creation to run twice and create a\n    // second collection. RoutedAliasUpdateProcessor is meant to guard against this race condition.\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"6\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), // might cause duplicate preemptive creation\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"105e345cf3c0abed3cb6c109274a379cb2655adc":["b627755385655c7cd3fb296f17593658805cf4d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["105e345cf3c0abed3cb6c109274a379cb2655adc"],"11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"105e345cf3c0abed3cb6c109274a379cb2655adc":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6"],"b627755385655c7cd3fb296f17593658805cf4d5":["105e345cf3c0abed3cb6c109274a379cb2655adc"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6":["b627755385655c7cd3fb296f17593658805cf4d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}