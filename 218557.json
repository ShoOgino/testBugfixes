{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#addRange(Object,int,int,long,long,int).mjava","commits":[{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#addRange(Object,int,int,long,long,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(precisionStep, minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange(precisionStep, (int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08566707eaac91c2a59f35d09c29d3423b8b0caf","date":1235326633,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#addRange(Object,int,long,long,int,int).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#addRange(Object,int,int,long,long,int).mjava","sourceNew":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift, final int level\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift, level);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift, level);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","sourceOld":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(precisionStep, minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange(precisionStep, (int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"08566707eaac91c2a59f35d09c29d3423b8b0caf":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08566707eaac91c2a59f35d09c29d3423b8b0caf"]},"commit2Childs":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["08566707eaac91c2a59f35d09c29d3423b8b0caf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"08566707eaac91c2a59f35d09c29d3423b8b0caf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}