{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndRemoveRole().mjava","commits":[{"id":"30f9ea0e61a3df8b29a67bce1ea06c83201ad871","date":1457138084,"type":1,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndRemoveRole().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndRemoveRole().mjava","sourceNew":"  private void testAddAndRemoveRole() throws InterruptedException, IOException, SolrServerException {\n    cloudClient.setDefaultCollection(DEFAULT_COLLECTION);\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminRequest.AddRole addRoleRequest = new CollectionAdminRequest.AddRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\");\n    addRoleRequest.process(cloudClient);\n\n    CollectionAdminRequest.ClusterStatus clusterStatusRequest = new CollectionAdminRequest.ClusterStatus()\n            .setCollectionName(DEFAULT_COLLECTION);\n    CollectionAdminResponse response = clusterStatusRequest.process(cloudClient);\n\n    NamedList<Object> rsp = response.getResponse();\n    NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    List<String> overseer = (List<String>) roles.get(\"overseer\");\n    assertNotNull(overseer);\n    assertEquals(1, overseer.size());\n    assertTrue(overseer.contains(replica.getNodeName()));\n    \n    // Remove role\n    new CollectionAdminRequest.RemoveRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\")\n            .process(cloudClient);\n\n    clusterStatusRequest = new CollectionAdminRequest.ClusterStatus();\n    clusterStatusRequest.setCollectionName(DEFAULT_COLLECTION);\n    response = clusterStatusRequest.process(cloudClient);\n\n    rsp = response.getResponse();\n    cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    overseer = (List<String>) roles.get(\"overseer\");\n    assertFalse(overseer.contains(replica.getNodeName()));\n  }\n\n","sourceOld":"  private void testAddAndRemoveRole() throws InterruptedException, IOException, SolrServerException {\n    cloudClient.setDefaultCollection(DEFAULT_COLLECTION);\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminRequest.AddRole addRoleRequest = new CollectionAdminRequest.AddRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\");\n    addRoleRequest.process(cloudClient);\n\n    CollectionAdminRequest.ClusterStatus clusterStatusRequest = new CollectionAdminRequest.ClusterStatus()\n            .setCollectionName(DEFAULT_COLLECTION);\n    CollectionAdminResponse response = clusterStatusRequest.process(cloudClient);\n\n    NamedList<Object> rsp = response.getResponse();\n    NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    List<String> overseer = (List<String>) roles.get(\"overseer\");\n    assertNotNull(overseer);\n    assertEquals(1, overseer.size());\n    assertTrue(overseer.contains(replica.getNodeName()));\n    \n    // Remove role\n    new CollectionAdminRequest.RemoveRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\")\n            .process(cloudClient);\n\n    clusterStatusRequest = new CollectionAdminRequest.ClusterStatus();\n    clusterStatusRequest.setCollectionName(DEFAULT_COLLECTION);\n    response = clusterStatusRequest.process(cloudClient);\n\n    rsp = response.getResponse();\n    cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    overseer = (List<String>) roles.get(\"overseer\");\n    assertFalse(overseer.contains(replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndRemoveRole().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndRemoveRole().mjava","sourceNew":"  private void testAddAndRemoveRole() throws InterruptedException, IOException, SolrServerException {\n    cloudClient.setDefaultCollection(DEFAULT_COLLECTION);\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminRequest.AddRole addRoleRequest = new CollectionAdminRequest.AddRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\");\n    addRoleRequest.process(cloudClient);\n\n    CollectionAdminRequest.ClusterStatus clusterStatusRequest = new CollectionAdminRequest.ClusterStatus()\n            .setCollectionName(DEFAULT_COLLECTION);\n    CollectionAdminResponse response = clusterStatusRequest.process(cloudClient);\n\n    NamedList<Object> rsp = response.getResponse();\n    NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    List<String> overseer = (List<String>) roles.get(\"overseer\");\n    assertNotNull(overseer);\n    assertEquals(1, overseer.size());\n    assertTrue(overseer.contains(replica.getNodeName()));\n    \n    // Remove role\n    new CollectionAdminRequest.RemoveRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\")\n            .process(cloudClient);\n\n    clusterStatusRequest = new CollectionAdminRequest.ClusterStatus();\n    clusterStatusRequest.setCollectionName(DEFAULT_COLLECTION);\n    response = clusterStatusRequest.process(cloudClient);\n\n    rsp = response.getResponse();\n    cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    overseer = (List<String>) roles.get(\"overseer\");\n    assertFalse(overseer.contains(replica.getNodeName()));\n  }\n\n","sourceOld":"  private void testAddAndRemoveRole() throws InterruptedException, IOException, SolrServerException {\n    cloudClient.setDefaultCollection(DEFAULT_COLLECTION);\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminRequest.AddRole addRoleRequest = new CollectionAdminRequest.AddRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\");\n    addRoleRequest.process(cloudClient);\n\n    CollectionAdminRequest.ClusterStatus clusterStatusRequest = new CollectionAdminRequest.ClusterStatus()\n            .setCollectionName(DEFAULT_COLLECTION);\n    CollectionAdminResponse response = clusterStatusRequest.process(cloudClient);\n\n    NamedList<Object> rsp = response.getResponse();\n    NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    List<String> overseer = (List<String>) roles.get(\"overseer\");\n    assertNotNull(overseer);\n    assertEquals(1, overseer.size());\n    assertTrue(overseer.contains(replica.getNodeName()));\n    \n    // Remove role\n    new CollectionAdminRequest.RemoveRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\")\n            .process(cloudClient);\n\n    clusterStatusRequest = new CollectionAdminRequest.ClusterStatus();\n    clusterStatusRequest.setCollectionName(DEFAULT_COLLECTION);\n    response = clusterStatusRequest.process(cloudClient);\n\n    rsp = response.getResponse();\n    cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    overseer = (List<String>) roles.get(\"overseer\");\n    assertFalse(overseer.contains(replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndRemoveRole().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndRemoveRole().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testAddAndRemoveRole() throws InterruptedException, IOException, SolrServerException {\n\n    String node = cluster.getRandomJetty(random()).getNodeName();\n\n    CollectionAdminRequest.addRole(node, \"overseer\").process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.getClusterStatus().process(cluster.getSolrClient());\n\n    NamedList<Object> rsp = response.getResponse();\n    NamedList<Object> cs = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cs);\n    Map<String, Object> roles = (Map<String, Object>) cs.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    List<String> overseer = (List<String>) roles.get(\"overseer\");\n    assertNotNull(overseer);\n    assertEquals(1, overseer.size());\n    assertTrue(overseer.contains(node));\n    \n    // Remove role\n    CollectionAdminRequest.removeRole(node, \"overseer\").process(cluster.getSolrClient());\n\n    response = CollectionAdminRequest.getClusterStatus().process(cluster.getSolrClient());\n    rsp = response.getResponse();\n    cs = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cs);\n    roles = (Map<String, Object>) cs.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    overseer = (List<String>) roles.get(\"overseer\");\n    assertFalse(overseer.contains(node));\n  }\n\n","sourceOld":"  private void testAddAndRemoveRole() throws InterruptedException, IOException, SolrServerException {\n    cloudClient.setDefaultCollection(DEFAULT_COLLECTION);\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminRequest.AddRole addRoleRequest = new CollectionAdminRequest.AddRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\");\n    addRoleRequest.process(cloudClient);\n\n    CollectionAdminRequest.ClusterStatus clusterStatusRequest = new CollectionAdminRequest.ClusterStatus()\n            .setCollectionName(DEFAULT_COLLECTION);\n    CollectionAdminResponse response = clusterStatusRequest.process(cloudClient);\n\n    NamedList<Object> rsp = response.getResponse();\n    NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    List<String> overseer = (List<String>) roles.get(\"overseer\");\n    assertNotNull(overseer);\n    assertEquals(1, overseer.size());\n    assertTrue(overseer.contains(replica.getNodeName()));\n    \n    // Remove role\n    new CollectionAdminRequest.RemoveRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\")\n            .process(cloudClient);\n\n    clusterStatusRequest = new CollectionAdminRequest.ClusterStatus();\n    clusterStatusRequest.setCollectionName(DEFAULT_COLLECTION);\n    response = clusterStatusRequest.process(cloudClient);\n\n    rsp = response.getResponse();\n    cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    overseer = (List<String>) roles.get(\"overseer\");\n    assertFalse(overseer.contains(replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndRemoveRole().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndRemoveRole().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testAddAndRemoveRole() throws InterruptedException, IOException, SolrServerException {\n\n    String node = cluster.getRandomJetty(random()).getNodeName();\n\n    CollectionAdminRequest.addRole(node, \"overseer\").process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.getClusterStatus().process(cluster.getSolrClient());\n\n    NamedList<Object> rsp = response.getResponse();\n    NamedList<Object> cs = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cs);\n    Map<String, Object> roles = (Map<String, Object>) cs.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    List<String> overseer = (List<String>) roles.get(\"overseer\");\n    assertNotNull(overseer);\n    assertEquals(1, overseer.size());\n    assertTrue(overseer.contains(node));\n    \n    // Remove role\n    CollectionAdminRequest.removeRole(node, \"overseer\").process(cluster.getSolrClient());\n\n    response = CollectionAdminRequest.getClusterStatus().process(cluster.getSolrClient());\n    rsp = response.getResponse();\n    cs = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cs);\n    roles = (Map<String, Object>) cs.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    overseer = (List<String>) roles.get(\"overseer\");\n    assertFalse(overseer.contains(node));\n  }\n\n","sourceOld":"  private void testAddAndRemoveRole() throws InterruptedException, IOException, SolrServerException {\n    cloudClient.setDefaultCollection(DEFAULT_COLLECTION);\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminRequest.AddRole addRoleRequest = new CollectionAdminRequest.AddRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\");\n    addRoleRequest.process(cloudClient);\n\n    CollectionAdminRequest.ClusterStatus clusterStatusRequest = new CollectionAdminRequest.ClusterStatus()\n            .setCollectionName(DEFAULT_COLLECTION);\n    CollectionAdminResponse response = clusterStatusRequest.process(cloudClient);\n\n    NamedList<Object> rsp = response.getResponse();\n    NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    List<String> overseer = (List<String>) roles.get(\"overseer\");\n    assertNotNull(overseer);\n    assertEquals(1, overseer.size());\n    assertTrue(overseer.contains(replica.getNodeName()));\n    \n    // Remove role\n    new CollectionAdminRequest.RemoveRole()\n            .setNode(replica.getNodeName())\n            .setRole(\"overseer\")\n            .process(cloudClient);\n\n    clusterStatusRequest = new CollectionAdminRequest.ClusterStatus();\n    clusterStatusRequest.setCollectionName(DEFAULT_COLLECTION);\n    response = clusterStatusRequest.process(cloudClient);\n\n    rsp = response.getResponse();\n    cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    roles = (Map<String, Object>) cluster.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    overseer = (List<String>) roles.get(\"overseer\");\n    assertFalse(overseer.contains(replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42d6fc6d08217c412f5a576929068b6e678deaf6","date":1484847963,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndRemoveRole().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testAddAndRemoveRole() throws InterruptedException, IOException, SolrServerException {\n\n    String node = cluster.getRandomJetty(random()).getNodeName();\n\n    CollectionAdminRequest.addRole(node, \"overseer\").process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.getClusterStatus().process(cluster.getSolrClient());\n\n    NamedList<Object> rsp = response.getResponse();\n    NamedList<Object> cs = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cs);\n    Map<String, Object> roles = (Map<String, Object>) cs.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    List<String> overseer = (List<String>) roles.get(\"overseer\");\n    assertNotNull(overseer);\n    assertEquals(1, overseer.size());\n    assertTrue(overseer.contains(node));\n    \n    // Remove role\n    CollectionAdminRequest.removeRole(node, \"overseer\").process(cluster.getSolrClient());\n\n    response = CollectionAdminRequest.getClusterStatus().process(cluster.getSolrClient());\n    rsp = response.getResponse();\n    cs = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cs);\n    roles = (Map<String, Object>) cs.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    overseer = (List<String>) roles.get(\"overseer\");\n    assertFalse(overseer.contains(node));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndRemoveRole().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testAddAndRemoveRole() throws InterruptedException, IOException, SolrServerException {\n\n    String node = cluster.getRandomJetty(random()).getNodeName();\n\n    CollectionAdminRequest.addRole(node, \"overseer\").process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.getClusterStatus().process(cluster.getSolrClient());\n\n    NamedList<Object> rsp = response.getResponse();\n    NamedList<Object> cs = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cs);\n    Map<String, Object> roles = (Map<String, Object>) cs.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    List<String> overseer = (List<String>) roles.get(\"overseer\");\n    assertNotNull(overseer);\n    assertEquals(1, overseer.size());\n    assertTrue(overseer.contains(node));\n    \n    // Remove role\n    CollectionAdminRequest.removeRole(node, \"overseer\").process(cluster.getSolrClient());\n\n    response = CollectionAdminRequest.getClusterStatus().process(cluster.getSolrClient());\n    rsp = response.getResponse();\n    cs = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cs);\n    roles = (Map<String, Object>) cs.get(\"roles\");\n    assertNotNull(\"Role information should not be null\", roles);\n    overseer = (List<String>) roles.get(\"overseer\");\n    assertFalse(overseer.contains(node));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"636a04bc82e662bf141a55f1d10f52e1c76c727b":["922ddd897402a6df25c766ea8300443be5e82b3d"],"922ddd897402a6df25c766ea8300443be5e82b3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42d6fc6d08217c412f5a576929068b6e678deaf6":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["f03e4bed5023ec3ef93a771b8888cae991cf448d","42d6fc6d08217c412f5a576929068b6e678deaf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42d6fc6d08217c412f5a576929068b6e678deaf6"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["922ddd897402a6df25c766ea8300443be5e82b3d","636a04bc82e662bf141a55f1d10f52e1c76c727b"]},"commit2Childs":{"636a04bc82e662bf141a55f1d10f52e1c76c727b":["42d6fc6d08217c412f5a576929068b6e678deaf6","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"922ddd897402a6df25c766ea8300443be5e82b3d":["636a04bc82e662bf141a55f1d10f52e1c76c727b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["922ddd897402a6df25c766ea8300443be5e82b3d","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["922ddd897402a6df25c766ea8300443be5e82b3d"],"42d6fc6d08217c412f5a576929068b6e678deaf6":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}