{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testOneDimEqual().mjava","commits":[{"id":"25b2820b242e28867a2f4edae536382216c511dc","date":1454059647,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testOneDimEqual().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testOneDimEqual().mjava","sourceNew":"  public void testOneDimEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int numDocs = atLeast(1000);\n    int theEqualDim = random().nextInt(numDims);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n      if (docID > 0) {\n        docValues[docID][theEqualDim] = docValues[0][theEqualDim];\n      }\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","sourceOld":"  public void testOneDimEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int numDocs = atLeast(1000);\n    int theEqualDim = random().nextInt(numDims);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n      if (docID > 0) {\n        docValues[docID][theEqualDim] = docValues[0][theEqualDim];\n      }\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testOneDimEqual().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testOneDimEqual().mjava","sourceNew":"  public void testOneDimEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int numDocs = atLeast(1000);\n    int theEqualDim = random().nextInt(numDims);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n      if (docID > 0) {\n        docValues[docID][theEqualDim] = docValues[0][theEqualDim];\n      }\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","sourceOld":"  public void testOneDimEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int numDocs = atLeast(1000);\n    int theEqualDim = random().nextInt(numDims);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n      if (docID > 0) {\n        docValues[docID][theEqualDim] = docValues[0][theEqualDim];\n      }\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testOneDimEqual().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testOneDimEqual().mjava","sourceNew":"  public void testOneDimEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int numDocs = atLeast(1000);\n    int theEqualDim = random().nextInt(numDims);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n      if (docID > 0) {\n        docValues[docID][theEqualDim] = docValues[0][theEqualDim];\n      }\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","sourceOld":"  public void testOneDimEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int numDocs = atLeast(1000);\n    int theEqualDim = random().nextInt(numDims);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n      if (docID > 0) {\n        docValues[docID][theEqualDim] = docValues[0][theEqualDim];\n      }\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testOneDimEqual().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testOneDimEqual().mjava","sourceNew":"  public void testOneDimEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int numDocs = atLeast(1000);\n    int theEqualDim = random().nextInt(numDims);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n      if (docID > 0) {\n        docValues[docID][theEqualDim] = docValues[0][theEqualDim];\n      }\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","sourceOld":"  public void testOneDimEqual() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int numDocs = atLeast(1000);\n    int theEqualDim = random().nextInt(numDims);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n      if (docID > 0) {\n        docValues[docID][theEqualDim] = docValues[0][theEqualDim];\n      }\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"25b2820b242e28867a2f4edae536382216c511dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d15e34266d75e4e8b95da046cd0afc812367b38"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","25b2820b242e28867a2f4edae536382216c511dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"]},"commit2Childs":{"25b2820b242e28867a2f4edae536382216c511dc":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25b2820b242e28867a2f4edae536382216c511dc","1e6acbaae7af722f17204ceccf0f7db5753eccf3","8d15e34266d75e4e8b95da046cd0afc812367b38"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"8d15e34266d75e4e8b95da046cd0afc812367b38":["4522ffca5a1f420c6a02198c9332d7c596a30ca5","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}