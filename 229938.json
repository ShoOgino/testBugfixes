{"path":"backwards/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","pathOld":"/dev/null","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() throws IOException {\n\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n\n      // Forcefully remove waiting ThreadStates from line\n      waitQueue.abort();\n\n      // Wait for all other threads to finish with\n      // DocumentsWriter:\n      pauseAllThreads();\n\n      try {\n\n        assert 0 == waitQueue.numWaiting;\n\n        waitQueue.waitingBytes = 0;\n\n        try {\n          abortedFiles = openFiles();\n        } catch (Throwable t) {\n          abortedFiles = null;\n        }\n\n        deletesInRAM.clear();\n\n        openFiles.clear();\n\n        for(int i=0;i<threadStates.length;i++)\n          try {\n            threadStates[i].consumer.abort();\n          } catch (Throwable t) {\n          }\n\n        try {\n          consumer.abort();\n        } catch (Throwable t) {\n        }\n\n        docStoreSegment = null;\n        numDocsInStore = 0;\n        docStoreOffset = 0;\n\n        // Reset all postings data\n        doAfterFlush();\n\n      } finally {\n        resumeAllThreads();\n      }\n    } finally {\n      aborting = false;\n      notifyAll();\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() throws IOException {\n\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n\n      // Forcefully remove waiting ThreadStates from line\n      waitQueue.abort();\n\n      // Wait for all other threads to finish with\n      // DocumentsWriter:\n      pauseAllThreads();\n\n      try {\n\n        assert 0 == waitQueue.numWaiting;\n\n        waitQueue.waitingBytes = 0;\n\n        try {\n          abortedFiles = openFiles();\n        } catch (Throwable t) {\n          abortedFiles = null;\n        }\n\n        deletesInRAM.clear();\n\n        openFiles.clear();\n\n        for(int i=0;i<threadStates.length;i++)\n          try {\n            threadStates[i].consumer.abort();\n          } catch (Throwable t) {\n          }\n\n        try {\n          consumer.abort();\n        } catch (Throwable t) {\n        }\n\n        docStoreSegment = null;\n        numDocsInStore = 0;\n        docStoreOffset = 0;\n\n        // Reset all postings data\n        doAfterFlush();\n\n      } finally {\n        resumeAllThreads();\n      }\n    } finally {\n      aborting = false;\n      notifyAll();\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() throws IOException {\n\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n\n      // Forcefully remove waiting ThreadStates from line\n      waitQueue.abort();\n\n      // Wait for all other threads to finish with\n      // DocumentsWriter:\n      pauseAllThreads();\n\n      try {\n\n        assert 0 == waitQueue.numWaiting;\n\n        waitQueue.waitingBytes = 0;\n\n        try {\n          abortedFiles = openFiles();\n        } catch (Throwable t) {\n          abortedFiles = null;\n        }\n\n        deletesInRAM.clear();\n\n        openFiles.clear();\n\n        for(int i=0;i<threadStates.length;i++)\n          try {\n            threadStates[i].consumer.abort();\n          } catch (Throwable t) {\n          }\n\n        try {\n          consumer.abort();\n        } catch (Throwable t) {\n        }\n\n        docStoreSegment = null;\n        numDocsInStore = 0;\n        docStoreOffset = 0;\n\n        // Reset all postings data\n        doAfterFlush();\n\n      } finally {\n        resumeAllThreads();\n      }\n    } finally {\n      aborting = false;\n      notifyAll();\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}