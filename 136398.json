{"path":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    TermFreqVector result = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    int [] freqs = result.getTermFrequencies();\n    assertTrue(terms != null && terms.length == 3 && freqs != null && freqs.length == 3);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    TermFreqVector [] results = reader.getTermFreqVectors(0);\n    assertTrue(results != null);\n    assertTrue(\"We do not have 3 term freq vectors, we have: \" + results.length, results.length == 3);      \n  }    \n\n","sourceOld":"  public void testTermVectors() throws IOException {\n    TermFreqVector result = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    int [] freqs = result.getTermFrequencies();\n    assertTrue(terms != null && terms.length == 3 && freqs != null && freqs.length == 3);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    TermFreqVector [] results = reader.getTermFreqVectors(0);\n    assertTrue(results != null);\n    assertTrue(\"We do not have 3 term freq vectors, we have: \" + results.length, results.length == 3);      \n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    TermFreqVector result = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(result != null);\n    BytesRef [] terms = result.getTerms();\n    int [] freqs = result.getTermFrequencies();\n    assertTrue(terms != null && terms.length == 3 && freqs != null && freqs.length == 3);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i].utf8ToString();\n      int freq = freqs[i];\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    TermFreqVector [] results = reader.getTermFreqVectors(0);\n    assertTrue(results != null);\n    assertTrue(\"We do not have 3 term freq vectors, we have: \" + results.length, results.length == 3);      \n  }    \n\n","sourceOld":"  public void testTermVectors() throws IOException {\n    TermFreqVector result = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    int [] freqs = result.getTermFrequencies();\n    assertTrue(terms != null && terms.length == 3 && freqs != null && freqs.length == 3);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    TermFreqVector [] results = reader.getTermFreqVectors(0);\n    assertTrue(results != null);\n    assertTrue(\"We do not have 3 term freq vectors, we have: \" + results.length, results.length == 3);      \n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    TermFreqVector result = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(result != null);\n    BytesRef [] terms = result.getTerms();\n    int [] freqs = result.getTermFrequencies();\n    assertTrue(terms != null && terms.length == 3 && freqs != null && freqs.length == 3);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i].utf8ToString();\n      int freq = freqs[i];\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    TermFreqVector [] results = reader.getTermFreqVectors(0);\n    assertTrue(results != null);\n    assertTrue(\"We do not have 3 term freq vectors, we have: \" + results.length, results.length == 3);      \n  }    \n\n","sourceOld":"  public void testTermVectors() throws IOException {\n    TermFreqVector result = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    int [] freqs = result.getTermFrequencies();\n    assertTrue(terms != null && terms.length == 3 && freqs != null && freqs.length == 3);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    TermFreqVector [] results = reader.getTermFreqVectors(0);\n    assertTrue(results != null);\n    assertTrue(\"We do not have 3 term freq vectors, we have: \" + results.length, results.length == 3);      \n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    Terms result = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(result);\n    assertEquals(3, result.getUniqueTermCount());\n    TermsEnum termsEnum = result.iterator(null);\n    while(termsEnum.next() != null) {\n      String term = termsEnum.term().utf8ToString();\n      int freq = (int) termsEnum.totalTermFreq();\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    Fields results = reader.getTermVectors(0);\n    assertTrue(results != null);\n    assertEquals(\"We do not have 3 term freq vectors\", 3, results.getUniqueFieldCount());      \n  }    \n\n","sourceOld":"  public void testTermVectors() throws IOException {\n    TermFreqVector result = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(result != null);\n    BytesRef [] terms = result.getTerms();\n    int [] freqs = result.getTermFrequencies();\n    assertTrue(terms != null && terms.length == 3 && freqs != null && freqs.length == 3);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i].utf8ToString();\n      int freq = freqs[i];\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    TermFreqVector [] results = reader.getTermFreqVectors(0);\n    assertTrue(results != null);\n    assertTrue(\"We do not have 3 term freq vectors, we have: \" + results.length, results.length == 3);      \n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    Terms result = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(result);\n    assertEquals(3, result.getUniqueTermCount());\n    TermsEnum termsEnum = result.iterator(null);\n    while(termsEnum.next() != null) {\n      String term = termsEnum.term().utf8ToString();\n      int freq = (int) termsEnum.totalTermFreq();\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    Fields results = reader.getTermVectors(0);\n    assertTrue(results != null);\n    assertEquals(\"We do not have 3 term freq vectors\", 3, results.getUniqueFieldCount());      \n  }    \n\n","sourceOld":"  public void testTermVectors() throws IOException {\n    Terms result = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(result);\n    assertEquals(3, result.getUniqueTermCount());\n    TermsEnum termsEnum = result.iterator(null);\n    while(termsEnum.next() != null) {\n      String term = termsEnum.term().utf8ToString();\n      int freq = (int) termsEnum.totalTermFreq();\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    Fields results = reader.getTermVectors(0);\n    assertTrue(results != null);\n    assertEquals(\"We do not have 3 term freq vectors\", 3, results.getUniqueFieldCount());      \n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["3cc749c053615f5871f3b95715fe292f34e70a53","5f4e87790277826a2aea119328600dfb07761f32"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}