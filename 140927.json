{"path":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","sourceOld":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","sourceOld":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","sourceOld":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#load(SolrQueryRequest,SolrQueryResponse,ContentStream,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream, UpdateRequestProcessor processor) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","sourceOld":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"042e4d934397657ba04c82b46cc5665076bc5c58":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["042e4d934397657ba04c82b46cc5665076bc5c58"]},"commit2Childs":{"042e4d934397657ba04c82b46cc5665076bc5c58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["042e4d934397657ba04c82b46cc5665076bc5c58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}