{"path":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithKerberos#testKerberizedSolr().mjava","commits":[{"id":"8293bb9f086fce9590482de97de6eac8381ae15a","date":1432275970,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithKerberos#testKerberizedSolr().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testKerberizedSolr() throws Exception {\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setCollectionName(\"testcollection\");\n    create.setConfigName(\"conf1\");\n    create.setNumShards(1);\n    create.setReplicationFactor(1);\n    create.process(cloudClient);\n    \n    waitForCollection(cloudClient.getZkStateReader(), \"testcollection\", 1);\n    CollectionAdminRequest.List list = new CollectionAdminRequest.List();\n    \n    CollectionAdminResponse response = list.process(cloudClient);\n    assertTrue(\"Expected to see testcollection but it doesn't exist\",\n        ((ArrayList) response.getResponse().get(\"collections\")).contains(\"testcollection\"));\n    \n    cloudClient.setDefaultCollection(\"testcollection\");\n    indexDoc(cloudClient, params(\"commit\", \"true\"), getDoc(\"id\", 1));\n    //cloudClient.commit();\n\n    QueryResponse queryResponse = cloudClient.query(new SolrQuery(\"*:*\"));\n    assertEquals(\"Expected #docs and actual isn't the same\", 1, queryResponse.getResults().size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3520d5fa773e185e7bca1f52ab1781b4bcacd081","date":1432322471,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithKerberos#testKerberizedSolr().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithKerberos#testKerberizedSolr().mjava","sourceNew":"  @Test\n  public void testKerberizedSolr() throws Exception {\n    HttpClientUtil.setConfigurer(new Krb5HttpClientConfigurer());\n    CloudSolrClient testClient = createCloudClient(\"testcollection\");\n    \n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setCollectionName(\"testcollection\");\n    create.setConfigName(\"conf1\");\n    create.setNumShards(1);\n    create.setReplicationFactor(1);\n    create.process(testClient);\n    \n    waitForCollection(testClient.getZkStateReader(), \"testcollection\", 1);\n    CollectionAdminRequest.List list = new CollectionAdminRequest.List();\n    \n    CollectionAdminResponse response = list.process(testClient);\n    assertTrue(\"Expected to see testcollection but it doesn't exist\",\n        ((ArrayList) response.getResponse().get(\"collections\")).contains(\"testcollection\"));\n    \n    testClient.setDefaultCollection(\"testcollection\");\n    indexDoc(testClient, params(\"commit\", \"true\"), getDoc(\"id\", 1));\n    //cloudClient.commit();\n\n    QueryResponse queryResponse = testClient.query(new SolrQuery(\"*:*\"));\n    assertEquals(\"Expected #docs and actual isn't the same\", 1, queryResponse.getResults().size());\n    testClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testKerberizedSolr() throws Exception {\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setCollectionName(\"testcollection\");\n    create.setConfigName(\"conf1\");\n    create.setNumShards(1);\n    create.setReplicationFactor(1);\n    create.process(cloudClient);\n    \n    waitForCollection(cloudClient.getZkStateReader(), \"testcollection\", 1);\n    CollectionAdminRequest.List list = new CollectionAdminRequest.List();\n    \n    CollectionAdminResponse response = list.process(cloudClient);\n    assertTrue(\"Expected to see testcollection but it doesn't exist\",\n        ((ArrayList) response.getResponse().get(\"collections\")).contains(\"testcollection\"));\n    \n    cloudClient.setDefaultCollection(\"testcollection\");\n    indexDoc(cloudClient, params(\"commit\", \"true\"), getDoc(\"id\", 1));\n    //cloudClient.commit();\n\n    QueryResponse queryResponse = cloudClient.query(new SolrQuery(\"*:*\"));\n    assertEquals(\"Expected #docs and actual isn't the same\", 1, queryResponse.getResults().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cf9922276fa57152a5408fd4df275179f91a104","date":1432445323,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithKerberos#testKerberizedSolr().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithKerberos#testKerberizedSolr().mjava","sourceNew":"  @Test\n  public void testKerberizedSolr() throws Exception {\n    CloudSolrClient testClient = null;\n    try {\n      HttpClientUtil.setConfigurer(new Krb5HttpClientConfigurer());\n      testClient = createCloudClient(\"testcollection\");\n\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(\"testcollection\");\n      create.setConfigName(\"conf1\");\n      create.setNumShards(1);\n      create.setReplicationFactor(1);\n      create.process(testClient);\n\n      waitForCollection(testClient.getZkStateReader(), \"testcollection\", 1);\n      CollectionAdminRequest.List list = new CollectionAdminRequest.List();\n\n      CollectionAdminResponse response = list.process(testClient);\n      assertTrue(\"Expected to see testcollection but it doesn't exist\",\n          ((ArrayList) response.getResponse().get(\"collections\")).contains(\"testcollection\"));\n\n      testClient.setDefaultCollection(\"testcollection\");\n      indexDoc(testClient, params(\"commit\", \"true\"), getDoc(\"id\", 1));\n\n      QueryResponse queryResponse = testClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"Expected #docs and actual isn't the same\", 1, queryResponse.getResults().size());\n    } finally {\n      if(testClient != null)\n        testClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testKerberizedSolr() throws Exception {\n    HttpClientUtil.setConfigurer(new Krb5HttpClientConfigurer());\n    CloudSolrClient testClient = createCloudClient(\"testcollection\");\n    \n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setCollectionName(\"testcollection\");\n    create.setConfigName(\"conf1\");\n    create.setNumShards(1);\n    create.setReplicationFactor(1);\n    create.process(testClient);\n    \n    waitForCollection(testClient.getZkStateReader(), \"testcollection\", 1);\n    CollectionAdminRequest.List list = new CollectionAdminRequest.List();\n    \n    CollectionAdminResponse response = list.process(testClient);\n    assertTrue(\"Expected to see testcollection but it doesn't exist\",\n        ((ArrayList) response.getResponse().get(\"collections\")).contains(\"testcollection\"));\n    \n    testClient.setDefaultCollection(\"testcollection\");\n    indexDoc(testClient, params(\"commit\", \"true\"), getDoc(\"id\", 1));\n    //cloudClient.commit();\n\n    QueryResponse queryResponse = testClient.query(new SolrQuery(\"*:*\"));\n    assertEquals(\"Expected #docs and actual isn't the same\", 1, queryResponse.getResults().size());\n    testClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56c5e935e2f4830591e0b601b70925e02766a941","date":1440553685,"type":4,"author":"Anshum Gupta","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithKerberos#testKerberizedSolr().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testKerberizedSolr() throws Exception {\n    CloudSolrClient testClient = null;\n    try {\n      HttpClientUtil.setConfigurer(new Krb5HttpClientConfigurer());\n      testClient = createCloudClient(\"testcollection\");\n\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(\"testcollection\");\n      create.setConfigName(\"conf1\");\n      create.setNumShards(1);\n      create.setReplicationFactor(1);\n      create.process(testClient);\n\n      waitForCollection(testClient.getZkStateReader(), \"testcollection\", 1);\n      CollectionAdminRequest.List list = new CollectionAdminRequest.List();\n\n      CollectionAdminResponse response = list.process(testClient);\n      assertTrue(\"Expected to see testcollection but it doesn't exist\",\n          ((ArrayList) response.getResponse().get(\"collections\")).contains(\"testcollection\"));\n\n      testClient.setDefaultCollection(\"testcollection\");\n      indexDoc(testClient, params(\"commit\", \"true\"), getDoc(\"id\", 1));\n\n      QueryResponse queryResponse = testClient.query(new SolrQuery(\"*:*\"));\n      assertEquals(\"Expected #docs and actual isn't the same\", 1, queryResponse.getResults().size());\n    } finally {\n      if(testClient != null)\n        testClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5cf9922276fa57152a5408fd4df275179f91a104":["3520d5fa773e185e7bca1f52ab1781b4bcacd081"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8293bb9f086fce9590482de97de6eac8381ae15a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56c5e935e2f4830591e0b601b70925e02766a941":["5cf9922276fa57152a5408fd4df275179f91a104"],"3520d5fa773e185e7bca1f52ab1781b4bcacd081":["8293bb9f086fce9590482de97de6eac8381ae15a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56c5e935e2f4830591e0b601b70925e02766a941"]},"commit2Childs":{"5cf9922276fa57152a5408fd4df275179f91a104":["56c5e935e2f4830591e0b601b70925e02766a941"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8293bb9f086fce9590482de97de6eac8381ae15a"],"8293bb9f086fce9590482de97de6eac8381ae15a":["3520d5fa773e185e7bca1f52ab1781b4bcacd081"],"3520d5fa773e185e7bca1f52ab1781b4bcacd081":["5cf9922276fa57152a5408fd4df275179f91a104"],"56c5e935e2f4830591e0b601b70925e02766a941":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}