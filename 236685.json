{"path":"src/test/org/apache/solr/handler/component/TermsComponentTest#testSortCount().mjava","commits":[{"id":"67522804713e97a3b2085fc409aeb8abe67c304d","date":1251129392,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/TermsComponentTest#testSortCount().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortCount() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"standardfilt\");\n    params.add(TermsParams.TERMS_LOWER,  \"s\");\n    params.add(TermsParams.TERMS_LOWER_INCLUSIVE, \"false\");\n    params.add(TermsParams.TERMS_PREFIX_STR, \"s\");\n    params.add(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_COUNT);\n    \n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"standardfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 3, terms.size() == 3);\n    assertTrue(\"Item 0 name is not 'snake'\", terms.getName(0).equals(\"snake\"));\n    assertTrue(\"Item 0 frequency is not '3'\", (Integer) terms.getVal(0) == 3);\n    assertTrue(\"Item 1 name is not 'shark'\", terms.getName(1).equals(\"shark\"));\n    assertTrue(\"Item 1 frequency is not '2'\", (Integer) terms.getVal(1) == 2);\n    assertTrue(\"Item 2 name is not 'spider'\", terms.getName(2).equals(\"spider\"));\n    assertTrue(\"Item 2 frequency is not '1'\", (Integer) terms.getVal(2) == 1);    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#testSortCount().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermsComponentTest#testSortCount().mjava","sourceNew":"  public void testSortCount() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"standardfilt\");\n    params.add(TermsParams.TERMS_LOWER,  \"s\");\n    params.add(TermsParams.TERMS_LOWER_INCLUSIVE, \"false\");\n    params.add(TermsParams.TERMS_PREFIX_STR, \"s\");\n    params.add(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_COUNT);\n    \n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"standardfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 3, terms.size() == 3);\n    assertTrue(\"Item 0 name is not 'snake'\", terms.getName(0).equals(\"snake\"));\n    assertTrue(\"Item 0 frequency is not '3'\", (Integer) terms.getVal(0) == 3);\n    assertTrue(\"Item 1 name is not 'shark'\", terms.getName(1).equals(\"shark\"));\n    assertTrue(\"Item 1 frequency is not '2'\", (Integer) terms.getVal(1) == 2);\n    assertTrue(\"Item 2 name is not 'spider'\", terms.getName(2).equals(\"spider\"));\n    assertTrue(\"Item 2 frequency is not '1'\", (Integer) terms.getVal(2) == 1);    \n  }\n\n","sourceOld":"  public void testSortCount() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"standardfilt\");\n    params.add(TermsParams.TERMS_LOWER,  \"s\");\n    params.add(TermsParams.TERMS_LOWER_INCLUSIVE, \"false\");\n    params.add(TermsParams.TERMS_PREFIX_STR, \"s\");\n    params.add(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_COUNT);\n    \n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"standardfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 3, terms.size() == 3);\n    assertTrue(\"Item 0 name is not 'snake'\", terms.getName(0).equals(\"snake\"));\n    assertTrue(\"Item 0 frequency is not '3'\", (Integer) terms.getVal(0) == 3);\n    assertTrue(\"Item 1 name is not 'shark'\", terms.getName(1).equals(\"shark\"));\n    assertTrue(\"Item 1 frequency is not '2'\", (Integer) terms.getVal(1) == 2);\n    assertTrue(\"Item 2 name is not 'spider'\", terms.getName(2).equals(\"spider\"));\n    assertTrue(\"Item 2 frequency is not '1'\", (Integer) terms.getVal(2) == 1);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["67522804713e97a3b2085fc409aeb8abe67c304d"],"67522804713e97a3b2085fc409aeb8abe67c304d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["67522804713e97a3b2085fc409aeb8abe67c304d"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"67522804713e97a3b2085fc409aeb8abe67c304d":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}