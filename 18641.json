{"path":"solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,SolrIndexSearcher,int,Query[],Filter[]).mjava","commits":[{"id":"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd","date":1320399315,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,SolrIndexSearcher,int,Query[],Filter[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,IndexSearcher,int,Query[],Filter[]).mjava","sourceNew":"  public TopDocs optimize(BooleanQuery original,\n                          SolrIndexSearcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","sourceOld":"  public TopDocs optimize(BooleanQuery original,\n                          IndexSearcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,SolrIndexSearcher,int,Query[],Filter[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,SolrIndexSearcher,int,Query[],Filter[]).mjava","sourceNew":"  public TopDocs optimize(BooleanQuery original,\n                          SolrIndexSearcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(new FilteredQuery(query, filter), numHits);\n    }\n\n  }\n\n","sourceOld":"  public TopDocs optimize(BooleanQuery original,\n                          SolrIndexSearcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,SolrIndexSearcher,int,Query[],Filter[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,SolrIndexSearcher,int,Query[],Filter[]).mjava","sourceNew":"  public TopDocs optimize(BooleanQuery original,\n                          SolrIndexSearcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new QueryWrapperFilter(new CachingWrapperQuery(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(new FilteredQuery(query, filter), numHits);\n    }\n\n  }\n\n","sourceOld":"  public TopDocs optimize(BooleanQuery original,\n                          SolrIndexSearcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(new FilteredQuery(query, filter), numHits);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,SolrIndexSearcher,int,Query[],Filter[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,SolrIndexSearcher,int,Query[],Filter[]).mjava","sourceNew":"  public TopDocs optimize(BooleanQuery original,\n                          SolrIndexSearcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new QueryWrapperFilter(new CachingWrapperQuery(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(new FilteredQuery(query, filter), numHits);\n    }\n\n  }\n\n","sourceOld":"  public TopDocs optimize(BooleanQuery original,\n                          SolrIndexSearcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(new FilteredQuery(query, filter), numHits);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,SolrIndexSearcher,int,Query[],Filter[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,SolrIndexSearcher,int,Query[],Filter[]).mjava","sourceNew":"  public TopDocs optimize(BooleanQuery original,\n                          SolrIndexSearcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    BooleanQuery.Builder filterQuery = null;\n\n    for (BooleanClause c : original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery.Builder();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new QueryWrapperFilter(new CachingWrapperQuery(filterQuery.build())); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query.build(); filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(new FilteredQuery(query.build(), filter), numHits);\n    }\n\n  }\n\n","sourceOld":"  public TopDocs optimize(BooleanQuery original,\n                          SolrIndexSearcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new QueryWrapperFilter(new CachingWrapperQuery(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(new FilteredQuery(query, filter), numHits);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,SolrIndexSearcher,int,Query[],Filter[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,SolrIndexSearcher,int,Query[],Filter[]).mjava","sourceNew":"  public TopDocs optimize(BooleanQuery original,\n                          SolrIndexSearcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    BooleanQuery.Builder filterQuery = null;\n\n    for (BooleanClause c : original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery.Builder();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new QueryWrapperFilter(new CachingWrapperQuery(filterQuery.build())); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query.build(); filterOut[0] = filter;\n      return null;\n    } else {\n      query.add(filter, Occur.FILTER);\n      return searcher.search(query.build(), numHits);\n    }\n\n  }\n\n","sourceOld":"  public TopDocs optimize(BooleanQuery original,\n                          SolrIndexSearcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    BooleanQuery.Builder filterQuery = null;\n\n    for (BooleanClause c : original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery.Builder();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new QueryWrapperFilter(new CachingWrapperQuery(filterQuery.build())); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query.build(); filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(new FilteredQuery(query.build(), filter), numHits);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ec0d45746967f32f35c0461dec63476e30b720","date":1437468606,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,SolrIndexSearcher,int,Query[],Filter[]).mjava","sourceNew":null,"sourceOld":"  public TopDocs optimize(BooleanQuery original,\n                          SolrIndexSearcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    BooleanQuery.Builder filterQuery = null;\n\n    for (BooleanClause c : original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery.Builder();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new QueryWrapperFilter(new CachingWrapperQuery(filterQuery.build())); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query.build(); filterOut[0] = filter;\n      return null;\n    } else {\n      query.add(filter, Occur.FILTER);\n      return searcher.search(query.build(), numHits);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"1db68e96dd908fcd79ef809095822736aa601d08":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"94ec0d45746967f32f35c0461dec63476e30b720":["1db68e96dd908fcd79ef809095822736aa601d08"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["94ec0d45746967f32f35c0461dec63476e30b720"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["1db68e96dd908fcd79ef809095822736aa601d08"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1db68e96dd908fcd79ef809095822736aa601d08":["94ec0d45746967f32f35c0461dec63476e30b720"],"94ec0d45746967f32f35c0461dec63476e30b720":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd"],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}