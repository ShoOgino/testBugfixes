{"path":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest.SaslZkTestServer#run().mjava","commits":[{"id":"740d1c1026cde7506b133f0518c3216f45babaec","date":1421114638,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest.SaslZkTestServer#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() throws InterruptedException {\n      try {\n        kdc = KerberosTestUtil.getKdc(new File(kdcDir));\n        // Don't require that credentials match the entire principal string, e.g.\n        // can match \"solr\" rather than \"solr/host@DOMAIN\"\n        System.setProperty(\"zookeeper.kerberos.removeRealmFromPrincipal\", \"true\");\n        System.setProperty(\"zookeeper.kerberos.removeHostFromPrincipal\", \"true\");\n        File keytabFile = new File(kdcDir, \"keytabs\");\n        String zkClientPrincipal = \"solr\";\n        String zkServerPrincipal = \"zookeeper/127.0.0.1\";\n\n        kdc.start();\n        // Create ZK client and server principals and load them into the Configuration\n        kdc.createPrincipal(keytabFile, zkClientPrincipal, zkServerPrincipal);\n        KerberosTestUtil.JaasConfiguration jaas = new KerberosTestUtil.JaasConfiguration(\n        zkClientPrincipal, keytabFile, zkServerPrincipal, keytabFile);\n        Configuration.setConfiguration(jaas);\n      } catch (Exception ex) {\n        throw new RuntimeException(ex);\n      }\n      super.run();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20be168d828ac40d262f85364d02f15b491dd88b","date":1469725145,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest.SaslZkTestServer#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest.SaslZkTestServer#run().mjava","sourceNew":"    @Override\n    public void run() throws InterruptedException {\n      try {\n        // Don't require that credentials match the entire principal string, e.g.\n        // can match \"solr\" rather than \"solr/host@DOMAIN\"\n        System.setProperty(\"zookeeper.kerberos.removeRealmFromPrincipal\", \"true\");\n        System.setProperty(\"zookeeper.kerberos.removeHostFromPrincipal\", \"true\");\n        File keytabFile = new File(kdcDir, \"keytabs\");\n        String zkClientPrincipal = \"solr\";\n        String zkServerPrincipal = \"zookeeper/127.0.0.1\";\n\n        kerberosTestServices = KerberosTestServices.builder()\n            .withKdc(new File(kdcDir))\n            .withJaasConfiguration(zkClientPrincipal, keytabFile, zkServerPrincipal, keytabFile)\n            .build();\n        kerberosTestServices.start();\n\n        kerberosTestServices.getKdc().createPrincipal(keytabFile, zkClientPrincipal, zkServerPrincipal);\n      } catch (Exception ex) {\n        throw new RuntimeException(ex);\n      }\n      super.run();\n    }\n\n","sourceOld":"    @Override\n    public void run() throws InterruptedException {\n      try {\n        kdc = KerberosTestUtil.getKdc(new File(kdcDir));\n        // Don't require that credentials match the entire principal string, e.g.\n        // can match \"solr\" rather than \"solr/host@DOMAIN\"\n        System.setProperty(\"zookeeper.kerberos.removeRealmFromPrincipal\", \"true\");\n        System.setProperty(\"zookeeper.kerberos.removeHostFromPrincipal\", \"true\");\n        File keytabFile = new File(kdcDir, \"keytabs\");\n        String zkClientPrincipal = \"solr\";\n        String zkServerPrincipal = \"zookeeper/127.0.0.1\";\n\n        kdc.start();\n        // Create ZK client and server principals and load them into the Configuration\n        kdc.createPrincipal(keytabFile, zkClientPrincipal, zkServerPrincipal);\n        KerberosTestUtil.JaasConfiguration jaas = new KerberosTestUtil.JaasConfiguration(\n        zkClientPrincipal, keytabFile, zkServerPrincipal, keytabFile);\n        Configuration.setConfiguration(jaas);\n      } catch (Exception ex) {\n        throw new RuntimeException(ex);\n      }\n      super.run();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest.SaslZkTestServer#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest.SaslZkTestServer#run().mjava","sourceNew":"    @Override\n    public void run() throws InterruptedException {\n      try {\n        // Don't require that credentials match the entire principal string, e.g.\n        // can match \"solr\" rather than \"solr/host@DOMAIN\"\n        System.setProperty(\"zookeeper.kerberos.removeRealmFromPrincipal\", \"true\");\n        System.setProperty(\"zookeeper.kerberos.removeHostFromPrincipal\", \"true\");\n        File keytabFile = new File(kdcDir, \"keytabs\");\n        String zkClientPrincipal = \"solr\";\n        String zkServerPrincipal = \"zookeeper/127.0.0.1\";\n\n        kerberosTestServices = KerberosTestServices.builder()\n            .withKdc(new File(kdcDir))\n            .withJaasConfiguration(zkClientPrincipal, keytabFile, zkServerPrincipal, keytabFile)\n            .build();\n        kerberosTestServices.start();\n\n        kerberosTestServices.getKdc().createPrincipal(keytabFile, zkClientPrincipal, zkServerPrincipal);\n      } catch (Exception ex) {\n        throw new RuntimeException(ex);\n      }\n      super.run();\n    }\n\n","sourceOld":"    @Override\n    public void run() throws InterruptedException {\n      try {\n        kdc = KerberosTestUtil.getKdc(new File(kdcDir));\n        // Don't require that credentials match the entire principal string, e.g.\n        // can match \"solr\" rather than \"solr/host@DOMAIN\"\n        System.setProperty(\"zookeeper.kerberos.removeRealmFromPrincipal\", \"true\");\n        System.setProperty(\"zookeeper.kerberos.removeHostFromPrincipal\", \"true\");\n        File keytabFile = new File(kdcDir, \"keytabs\");\n        String zkClientPrincipal = \"solr\";\n        String zkServerPrincipal = \"zookeeper/127.0.0.1\";\n\n        kdc.start();\n        // Create ZK client and server principals and load them into the Configuration\n        kdc.createPrincipal(keytabFile, zkClientPrincipal, zkServerPrincipal);\n        KerberosTestUtil.JaasConfiguration jaas = new KerberosTestUtil.JaasConfiguration(\n        zkClientPrincipal, keytabFile, zkServerPrincipal, keytabFile);\n        Configuration.setConfiguration(jaas);\n      } catch (Exception ex) {\n        throw new RuntimeException(ex);\n      }\n      super.run();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest.SaslZkTestServer#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest.SaslZkTestServer#run().mjava","sourceNew":"    @Override\n    public void run() throws InterruptedException {\n      try {\n        // Don't require that credentials match the entire principal string, e.g.\n        // can match \"solr\" rather than \"solr/host@DOMAIN\"\n        System.setProperty(\"zookeeper.kerberos.removeRealmFromPrincipal\", \"true\");\n        System.setProperty(\"zookeeper.kerberos.removeHostFromPrincipal\", \"true\");\n        File keytabFile = new File(kdcDir, \"keytabs\");\n        String zkClientPrincipal = \"solr\";\n        String zkServerPrincipal = \"zookeeper/127.0.0.1\";\n\n        kerberosTestServices = KerberosTestServices.builder()\n            .withKdc(new File(kdcDir))\n            .withJaasConfiguration(zkClientPrincipal, keytabFile, zkServerPrincipal, keytabFile)\n            .build();\n        kerberosTestServices.start();\n\n        kerberosTestServices.getKdc().createPrincipal(keytabFile, zkClientPrincipal, zkServerPrincipal);\n      } catch (Exception ex) {\n        throw new RuntimeException(ex);\n      }\n      super.run();\n    }\n\n","sourceOld":"    @Override\n    public void run() throws InterruptedException {\n      try {\n        kdc = KerberosTestUtil.getKdc(new File(kdcDir));\n        // Don't require that credentials match the entire principal string, e.g.\n        // can match \"solr\" rather than \"solr/host@DOMAIN\"\n        System.setProperty(\"zookeeper.kerberos.removeRealmFromPrincipal\", \"true\");\n        System.setProperty(\"zookeeper.kerberos.removeHostFromPrincipal\", \"true\");\n        File keytabFile = new File(kdcDir, \"keytabs\");\n        String zkClientPrincipal = \"solr\";\n        String zkServerPrincipal = \"zookeeper/127.0.0.1\";\n\n        kdc.start();\n        // Create ZK client and server principals and load them into the Configuration\n        kdc.createPrincipal(keytabFile, zkClientPrincipal, zkServerPrincipal);\n        KerberosTestUtil.JaasConfiguration jaas = new KerberosTestUtil.JaasConfiguration(\n        zkClientPrincipal, keytabFile, zkServerPrincipal, keytabFile);\n        Configuration.setConfiguration(jaas);\n      } catch (Exception ex) {\n        throw new RuntimeException(ex);\n      }\n      super.run();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest.SaslZkTestServer#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest.SaslZkTestServer#run().mjava","sourceNew":"    @Override\n    public void run() throws InterruptedException, IOException {\n      try {\n        // Don't require that credentials match the entire principal string, e.g.\n        // can match \"solr\" rather than \"solr/host@DOMAIN\"\n        System.setProperty(\"zookeeper.kerberos.removeRealmFromPrincipal\", \"true\");\n        System.setProperty(\"zookeeper.kerberos.removeHostFromPrincipal\", \"true\");\n        File keytabFile = new File(kdcDir, \"keytabs\");\n        String zkClientPrincipal = \"solr\";\n        String zkServerPrincipal = \"zookeeper/127.0.0.1\";\n\n        kerberosTestServices = KerberosTestServices.builder()\n            .withKdc(new File(kdcDir))\n            .withJaasConfiguration(zkClientPrincipal, keytabFile, zkServerPrincipal, keytabFile)\n           \n            .build();\n        kerberosTestServices.start();\n\n        kerberosTestServices.getKdc().createPrincipal(keytabFile, zkClientPrincipal, zkServerPrincipal);\n      } catch (Exception ex) {\n        throw new RuntimeException(ex);\n      }\n      super.run(false);\n    }\n\n","sourceOld":"    @Override\n    public void run() throws InterruptedException {\n      try {\n        // Don't require that credentials match the entire principal string, e.g.\n        // can match \"solr\" rather than \"solr/host@DOMAIN\"\n        System.setProperty(\"zookeeper.kerberos.removeRealmFromPrincipal\", \"true\");\n        System.setProperty(\"zookeeper.kerberos.removeHostFromPrincipal\", \"true\");\n        File keytabFile = new File(kdcDir, \"keytabs\");\n        String zkClientPrincipal = \"solr\";\n        String zkServerPrincipal = \"zookeeper/127.0.0.1\";\n\n        kerberosTestServices = KerberosTestServices.builder()\n            .withKdc(new File(kdcDir))\n            .withJaasConfiguration(zkClientPrincipal, keytabFile, zkServerPrincipal, keytabFile)\n            .build();\n        kerberosTestServices.start();\n\n        kerberosTestServices.getKdc().createPrincipal(keytabFile, zkClientPrincipal, zkServerPrincipal);\n      } catch (Exception ex) {\n        throw new RuntimeException(ex);\n      }\n      super.run();\n    }\n\n","bugFix":["740d1c1026cde7506b133f0518c3216f45babaec"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4aaf8920f2769408ed82072eedbd14b207b831cc","date":1544374251,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest.SaslZkTestServer#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest.SaslZkTestServer#run().mjava","sourceNew":"    @Override\n    public void run() throws InterruptedException, IOException {\n      try {\n        // Don't require that credentials match the entire principal string, e.g.\n        // can match \"solr\" rather than \"solr/host@DOMAIN\"\n        System.setProperty(\"zookeeper.kerberos.removeRealmFromPrincipal\", \"true\");\n        System.setProperty(\"zookeeper.kerberos.removeHostFromPrincipal\", \"true\");\n        File keytabFile = new File(kdcDir, \"keytabs\");\n        String zkClientPrincipal = \"solr\";\n        String zkServerPrincipal = \"zookeeper/localhost\";\n\n        kerberosTestServices = KerberosTestServices.builder()\n            .withKdc(new File(kdcDir))\n            .withJaasConfiguration(zkClientPrincipal, keytabFile, zkServerPrincipal, keytabFile)\n           \n            .build();\n        kerberosTestServices.start();\n\n        kerberosTestServices.getKdc().createPrincipal(keytabFile, zkClientPrincipal, zkServerPrincipal);\n      } catch (Exception ex) {\n        throw new RuntimeException(ex);\n      }\n      super.run(false);\n    }\n\n","sourceOld":"    @Override\n    public void run() throws InterruptedException, IOException {\n      try {\n        // Don't require that credentials match the entire principal string, e.g.\n        // can match \"solr\" rather than \"solr/host@DOMAIN\"\n        System.setProperty(\"zookeeper.kerberos.removeRealmFromPrincipal\", \"true\");\n        System.setProperty(\"zookeeper.kerberos.removeHostFromPrincipal\", \"true\");\n        File keytabFile = new File(kdcDir, \"keytabs\");\n        String zkClientPrincipal = \"solr\";\n        String zkServerPrincipal = \"zookeeper/127.0.0.1\";\n\n        kerberosTestServices = KerberosTestServices.builder()\n            .withKdc(new File(kdcDir))\n            .withJaasConfiguration(zkClientPrincipal, keytabFile, zkServerPrincipal, keytabFile)\n           \n            .build();\n        kerberosTestServices.start();\n\n        kerberosTestServices.getKdc().createPrincipal(keytabFile, zkClientPrincipal, zkServerPrincipal);\n      } catch (Exception ex) {\n        throw new RuntimeException(ex);\n      }\n      super.run(false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest.SaslZkTestServer#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest.SaslZkTestServer#run().mjava","sourceNew":"    @Override\n    public void run() throws InterruptedException, IOException {\n      try {\n        // Don't require that credentials match the entire principal string, e.g.\n        // can match \"solr\" rather than \"solr/host@DOMAIN\"\n        System.setProperty(\"zookeeper.kerberos.removeRealmFromPrincipal\", \"true\");\n        System.setProperty(\"zookeeper.kerberos.removeHostFromPrincipal\", \"true\");\n        File keytabFile = kdcDir.resolve(\"keytabs\").toFile();\n        String zkClientPrincipal = \"solr\";\n        String zkServerPrincipal = \"zookeeper/localhost\";\n\n        kerberosTestServices = KerberosTestServices.builder()\n            .withKdc(kdcDir.toFile())\n            .withJaasConfiguration(zkClientPrincipal, keytabFile, zkServerPrincipal, keytabFile)\n           \n            .build();\n        kerberosTestServices.start();\n\n        kerberosTestServices.getKdc().createPrincipal(keytabFile, zkClientPrincipal, zkServerPrincipal);\n      } catch (Exception ex) {\n        throw new RuntimeException(ex);\n      }\n      super.run(false);\n    }\n\n","sourceOld":"    @Override\n    public void run() throws InterruptedException, IOException {\n      try {\n        // Don't require that credentials match the entire principal string, e.g.\n        // can match \"solr\" rather than \"solr/host@DOMAIN\"\n        System.setProperty(\"zookeeper.kerberos.removeRealmFromPrincipal\", \"true\");\n        System.setProperty(\"zookeeper.kerberos.removeHostFromPrincipal\", \"true\");\n        File keytabFile = new File(kdcDir, \"keytabs\");\n        String zkClientPrincipal = \"solr\";\n        String zkServerPrincipal = \"zookeeper/localhost\";\n\n        kerberosTestServices = KerberosTestServices.builder()\n            .withKdc(new File(kdcDir))\n            .withJaasConfiguration(zkClientPrincipal, keytabFile, zkServerPrincipal, keytabFile)\n           \n            .build();\n        kerberosTestServices.start();\n\n        kerberosTestServices.getKdc().createPrincipal(keytabFile, zkClientPrincipal, zkServerPrincipal);\n      } catch (Exception ex) {\n        throw new RuntimeException(ex);\n      }\n      super.run(false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4aaf8920f2769408ed82072eedbd14b207b831cc":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["20be168d828ac40d262f85364d02f15b491dd88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"740d1c1026cde7506b133f0518c3216f45babaec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["4aaf8920f2769408ed82072eedbd14b207b831cc"],"20be168d828ac40d262f85364d02f15b491dd88b":["740d1c1026cde7506b133f0518c3216f45babaec"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["740d1c1026cde7506b133f0518c3216f45babaec","20be168d828ac40d262f85364d02f15b491dd88b"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["740d1c1026cde7506b133f0518c3216f45babaec","20be168d828ac40d262f85364d02f15b491dd88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1778938cb7fb298e6e07a43e2d5acaf552d61518"]},"commit2Childs":{"4aaf8920f2769408ed82072eedbd14b207b831cc":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["4aaf8920f2769408ed82072eedbd14b207b831cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["740d1c1026cde7506b133f0518c3216f45babaec"],"740d1c1026cde7506b133f0518c3216f45babaec":["20be168d828ac40d262f85364d02f15b491dd88b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"20be168d828ac40d262f85364d02f15b491dd88b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}