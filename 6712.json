{"path":"src/java/org/apache/solr/util/TestHarness#validateXPath(String,String...).mjava","commits":[{"id":"f66f1826f07774581d2ec661444fc987bdd1a85d","date":1144730206,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness#validateXPath(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A helper method which valides a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public String validateXPath(String xml, String... tests)\n    throws XPathExpressionException, SAXException {\n        \n    if (tests==null || tests.length == 0) return null;\n                \n    Document document=null;\n    try {\n      document = builder.parse(new ByteArrayInputStream\n                               (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n                \n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) xpath.evaluate(xp, document,\n                                              XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n                \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/TestHarness#validateXPath(String,String...).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#validateXPath(String,String...).mjava","sourceNew":"  /**\n   * A helper method which valides a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public String validateXPath(String xml, String... tests)\n    throws XPathExpressionException, SAXException {\n        \n    if (tests==null || tests.length == 0) return null;\n                \n    Document document=null;\n    try {\n      document = builder.parse(new ByteArrayInputStream\n                               (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n                \n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) xpath.evaluate(xp, document,\n                                              XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n                \n  }\n\n","sourceOld":"  /**\n   * A helper method which valides a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public String validateXPath(String xml, String... tests)\n    throws XPathExpressionException, SAXException {\n        \n    if (tests==null || tests.length == 0) return null;\n                \n    Document document=null;\n    try {\n      document = builder.parse(new ByteArrayInputStream\n                               (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n                \n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) xpath.evaluate(xp, document,\n                                              XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n                \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["f66f1826f07774581d2ec661444fc987bdd1a85d"],"f66f1826f07774581d2ec661444fc987bdd1a85d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f66f1826f07774581d2ec661444fc987bdd1a85d"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"f66f1826f07774581d2ec661444fc987bdd1a85d":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}