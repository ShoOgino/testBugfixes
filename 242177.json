{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestPhraseWildcardQuery#testExplain().mjava","commits":[{"id":"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e","date":1574848425,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestPhraseWildcardQuery#testExplain().mjava","pathOld":"/dev/null","sourceNew":"  public void testExplain() throws IOException {\n    Query testQuery = phraseWildcardQuery(field(0), 100, 0, true, \"t?e\", \"b*\", \"b*\");\n\n    // Verify the standard way to get the query explanation.\n    for (ScoreDoc scoreDoc : searcher.search(testQuery, MAX_DOCS).scoreDocs) {\n      Explanation explanation = searcher.explain(testQuery, scoreDoc.doc);\n      assertTrue(explanation.getValue().doubleValue() > 0);\n      assertEquals(\"weight(phraseWildcard(title:\\\"t?e b* b*\\\") in 1) [AssertingSimilarity], result of:\", explanation.getDescription());\n    }\n\n    // Verify that if we call PhraseWildcardQuery.PhraseWildcardWeight.scorer() twice,\n    // the scoring is correct (even if it is not the standard path expected by the scorer() method).\n    int resultCount = 0;\n    Weight weight = testQuery.createWeight(searcher, ScoreMode.TOP_SCORES, 1);\n    for (LeafReaderContext leafReaderContext : searcher.getIndexReader().leaves()) {\n      Scorer scorer = weight.scorer(leafReaderContext);\n      if (scorer != null) {\n        DocIdSetIterator iterator = scorer.iterator();\n        while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          resultCount++;\n        }\n      }\n    }\n    assertEquals(1, resultCount);\n\n    int explanationWithNonNullScoreCount = 0;\n    for (LeafReaderContext leafReaderContext : searcher.getIndexReader().leaves()) {\n      Explanation explanation = weight.explain(leafReaderContext, 1);\n      if (explanation.getValue().doubleValue() > 0) {\n        explanationWithNonNullScoreCount++;\n      }\n    }\n    assertEquals(1, explanationWithNonNullScoreCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09e5dc262444ea5a99c67e020fd11a935d45cc19","date":1591799425,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestPhraseWildcardQuery#testExplain().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestPhraseWildcardQuery#testExplain().mjava","sourceNew":"  public void testExplain() throws IOException {\n    Query testQuery = phraseWildcardQuery(field(0), 100, 0, true, \"t?e\", \"b*\", \"b*\");\n\n    // Verify the standard way to get the query explanation.\n    for (ScoreDoc scoreDoc : searcher.search(testQuery, MAX_DOCS).scoreDocs) {\n      Explanation explanation = searcher.explain(testQuery, scoreDoc.doc);\n      assertTrue(explanation.getValue().doubleValue() > 0);\n      assertTrue(\"Unexpected explanation \\\"\" + explanation.getDescription() + \"\\\"\",\n          explanation.getDescription().startsWith(\"weight(phraseWildcard(title:\\\"t?e b* b*\\\")\"));\n    }\n\n    // Verify that if we call PhraseWildcardQuery.PhraseWildcardWeight.scorer() twice,\n    // the scoring is correct (even if it is not the standard path expected by the scorer() method).\n    int resultCount = 0;\n    Weight weight = testQuery.createWeight(searcher, ScoreMode.TOP_SCORES, 1);\n    for (LeafReaderContext leafReaderContext : searcher.getIndexReader().leaves()) {\n      Scorer scorer = weight.scorer(leafReaderContext);\n      if (scorer != null) {\n        DocIdSetIterator iterator = scorer.iterator();\n        while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          resultCount++;\n        }\n      }\n    }\n    assertEquals(1, resultCount);\n\n    int explanationWithNonNullScoreCount = 0;\n    for (LeafReaderContext leafReaderContext : searcher.getIndexReader().leaves()) {\n      Explanation explanation = weight.explain(leafReaderContext, 1);\n      if (explanation.getValue().doubleValue() > 0) {\n        explanationWithNonNullScoreCount++;\n      }\n    }\n    assertEquals(1, explanationWithNonNullScoreCount);\n  }\n\n","sourceOld":"  public void testExplain() throws IOException {\n    Query testQuery = phraseWildcardQuery(field(0), 100, 0, true, \"t?e\", \"b*\", \"b*\");\n\n    // Verify the standard way to get the query explanation.\n    for (ScoreDoc scoreDoc : searcher.search(testQuery, MAX_DOCS).scoreDocs) {\n      Explanation explanation = searcher.explain(testQuery, scoreDoc.doc);\n      assertTrue(explanation.getValue().doubleValue() > 0);\n      assertEquals(\"weight(phraseWildcard(title:\\\"t?e b* b*\\\") in 1) [AssertingSimilarity], result of:\", explanation.getDescription());\n    }\n\n    // Verify that if we call PhraseWildcardQuery.PhraseWildcardWeight.scorer() twice,\n    // the scoring is correct (even if it is not the standard path expected by the scorer() method).\n    int resultCount = 0;\n    Weight weight = testQuery.createWeight(searcher, ScoreMode.TOP_SCORES, 1);\n    for (LeafReaderContext leafReaderContext : searcher.getIndexReader().leaves()) {\n      Scorer scorer = weight.scorer(leafReaderContext);\n      if (scorer != null) {\n        DocIdSetIterator iterator = scorer.iterator();\n        while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          resultCount++;\n        }\n      }\n    }\n    assertEquals(1, resultCount);\n\n    int explanationWithNonNullScoreCount = 0;\n    for (LeafReaderContext leafReaderContext : searcher.getIndexReader().leaves()) {\n      Explanation explanation = weight.explain(leafReaderContext, 1);\n      if (explanation.getValue().doubleValue() > 0) {\n        explanationWithNonNullScoreCount++;\n      }\n    }\n    assertEquals(1, explanationWithNonNullScoreCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09e5dc262444ea5a99c67e020fd11a935d45cc19":["b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09e5dc262444ea5a99c67e020fd11a935d45cc19"]},"commit2Childs":{"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e":["09e5dc262444ea5a99c67e020fd11a935d45cc19"],"09e5dc262444ea5a99c67e020fd11a935d45cc19":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}