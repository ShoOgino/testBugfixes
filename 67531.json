{"path":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testImportCommand() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadAndInit(dc_singleEntity);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.document.entities.get(0);\n      List l = new ArrayList();\n      l.add(createMap(\"id\", 1, \"desc\", \"one\"));\n      MockDataSource.setIterator(\"select * from x\", l.iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"import\"));\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi);\n      Assert.assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.TRUE, swi.commitCalled);\n      Assert.assertEquals(1, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount\n              .get());\n      Assert\n              .assertEquals(1, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.rowsCount\n              .get());\n\n      for (int i = 0; i < l.size(); i++) {\n        Map<String, Object> map = (Map<String, Object>) l.get(i);\n        SolrInputDocument doc = swi.docs.get(i);\n        for (Map.Entry<String, Object> entry : map.entrySet()) {\n          Assert.assertEquals(entry.getValue(), doc.getFieldValue(entry\n                  .getKey()));\n        }\n      }\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testImportCommand() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadAndInit(dc_singleEntity);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.document.entities.get(0);\n      List l = new ArrayList();\n      l.add(createMap(\"id\", 1, \"desc\", \"one\"));\n      MockDataSource.setIterator(\"select * from x\", l.iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"import\"));\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi);\n      Assert.assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.TRUE, swi.commitCalled);\n      Assert.assertEquals(1, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount\n              .get());\n      Assert\n              .assertEquals(1, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.rowsCount\n              .get());\n\n      for (int i = 0; i < l.size(); i++) {\n        Map<String, Object> map = (Map<String, Object>) l.get(i);\n        SolrInputDocument doc = swi.docs.get(i);\n        for (Map.Entry<String, Object> entry : map.entrySet()) {\n          Assert.assertEquals(entry.getValue(), doc.getFieldValue(entry\n                  .getKey()));\n        }\n      }\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","sourceNew":"  @Test\n  public void testImportCommand() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadAndInit(dc_singleEntity);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.document.entities.get(0);\n      List l = new ArrayList();\n      l.add(createMap(\"id\", 1, \"desc\", \"one\"));\n      MockDataSource.setIterator(\"select * from x\", l.iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"import\"));\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi);\n      Assert.assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.TRUE, swi.commitCalled);\n      Assert.assertEquals(1, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount\n              .get());\n      Assert\n              .assertEquals(1, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.rowsCount\n              .get());\n\n      for (int i = 0; i < l.size(); i++) {\n        Map<String, Object> map = (Map<String, Object>) l.get(i);\n        SolrInputDocument doc = swi.docs.get(i);\n        for (Map.Entry<String, Object> entry : map.entrySet()) {\n          Assert.assertEquals(entry.getValue(), doc.getFieldValue(entry\n                  .getKey()));\n        }\n      }\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testImportCommand() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadAndInit(dc_singleEntity);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.document.entities.get(0);\n      List l = new ArrayList();\n      l.add(createMap(\"id\", 1, \"desc\", \"one\"));\n      MockDataSource.setIterator(\"select * from x\", l.iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"import\"));\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi);\n      Assert.assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.TRUE, swi.commitCalled);\n      Assert.assertEquals(1, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount\n              .get());\n      Assert\n              .assertEquals(1, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.rowsCount\n              .get());\n\n      for (int i = 0; i < l.size(); i++) {\n        Map<String, Object> map = (Map<String, Object>) l.get(i);\n        SolrInputDocument doc = swi.docs.get(i);\n        for (Map.Entry<String, Object> entry : map.entrySet()) {\n          Assert.assertEquals(entry.getValue(), doc.getFieldValue(entry\n                  .getKey()));\n        }\n      }\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testImportCommand() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadAndInit(dc_singleEntity);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.document.entities.get(0);\n      List l = new ArrayList();\n      l.add(createMap(\"id\", 1, \"desc\", \"one\"));\n      MockDataSource.setIterator(\"select * from x\", l.iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"import\"));\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi);\n      Assert.assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.TRUE, swi.commitCalled);\n      Assert.assertEquals(1, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount\n              .get());\n      Assert\n              .assertEquals(1, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.rowsCount\n              .get());\n\n      for (int i = 0; i < l.size(); i++) {\n        Map<String, Object> map = (Map<String, Object>) l.get(i);\n        SolrInputDocument doc = swi.docs.get(i);\n        for (Map.Entry<String, Object> entry : map.entrySet()) {\n          Assert.assertEquals(entry.getValue(), doc.getFieldValue(entry\n                  .getKey()));\n        }\n      }\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","date":1286986267,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","sourceNew":"  @Test\n  public void testImportCommand() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_singleEntity);\n    DataConfig cfg = di.getConfig();\n    DataConfig.Entity ent = cfg.document.entities.get(0);\n    List l = new ArrayList();\n    l.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n    ent.dataSrc = new MockDataSource();\n    ent.isDocRoot = true;\n    DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"import\"));\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(1, swi.docs.size());\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.docCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.rowsCount.get());\n\n    for (int i = 0; i < l.size(); i++) {\n      Map<String, Object> map = (Map<String, Object>) l.get(i);\n      SolrInputDocument doc = swi.docs.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testImportCommand() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadAndInit(dc_singleEntity);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.document.entities.get(0);\n      List l = new ArrayList();\n      l.add(createMap(\"id\", 1, \"desc\", \"one\"));\n      MockDataSource.setIterator(\"select * from x\", l.iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"import\"));\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi);\n      Assert.assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.TRUE, swi.commitCalled);\n      Assert.assertEquals(1, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount\n              .get());\n      Assert\n              .assertEquals(1, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.rowsCount\n              .get());\n\n      for (int i = 0; i < l.size(); i++) {\n        Map<String, Object> map = (Map<String, Object>) l.get(i);\n        SolrInputDocument doc = swi.docs.get(i);\n        for (Map.Entry<String, Object> entry : map.entrySet()) {\n          Assert.assertEquals(entry.getValue(), doc.getFieldValue(entry\n                  .getKey()));\n        }\n      }\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","sourceNew":"  @Test\n  public void testImportCommand() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_singleEntity);\n    DataConfig cfg = di.getConfig();\n    DataConfig.Entity ent = cfg.document.entities.get(0);\n    List l = new ArrayList();\n    l.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n    ent.dataSrc = new MockDataSource();\n    ent.isDocRoot = true;\n    DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"import\"));\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(1, swi.docs.size());\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.docCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.rowsCount.get());\n\n    for (int i = 0; i < l.size(); i++) {\n      Map<String, Object> map = (Map<String, Object>) l.get(i);\n      SolrInputDocument doc = swi.docs.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testImportCommand() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadAndInit(dc_singleEntity);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.document.entities.get(0);\n      List l = new ArrayList();\n      l.add(createMap(\"id\", 1, \"desc\", \"one\"));\n      MockDataSource.setIterator(\"select * from x\", l.iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"import\"));\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi);\n      Assert.assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.TRUE, swi.commitCalled);\n      Assert.assertEquals(1, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount\n              .get());\n      Assert\n              .assertEquals(1, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.rowsCount\n              .get());\n\n      for (int i = 0; i < l.size(); i++) {\n        Map<String, Object> map = (Map<String, Object>) l.get(i);\n        SolrInputDocument doc = swi.docs.get(i);\n        for (Map.Entry<String, Object> entry : map.entrySet()) {\n          Assert.assertEquals(entry.getValue(), doc.getFieldValue(entry\n                  .getKey()));\n        }\n      }\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c8b911ab9e4d7823a9dbde3782c4fd4e695c85","date":1288714145,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","sourceNew":"  @Test\n  public void testImportCommand() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_singleEntity);\n    DataConfig cfg = di.getConfig();\n    DataConfig.Entity ent = cfg.document.entities.get(0);\n    List l = new ArrayList();\n    l.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n    ent.dataSrc = new MockDataSource();\n    ent.isDocRoot = true;\n    DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"import\"));\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(Boolean.TRUE, swi.finishCalled);\n    assertEquals(1, swi.docs.size());\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.docCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.rowsCount.get());\n\n    for (int i = 0; i < l.size(); i++) {\n      Map<String, Object> map = (Map<String, Object>) l.get(i);\n      SolrInputDocument doc = swi.docs.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testImportCommand() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_singleEntity);\n    DataConfig cfg = di.getConfig();\n    DataConfig.Entity ent = cfg.document.entities.get(0);\n    List l = new ArrayList();\n    l.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n    ent.dataSrc = new MockDataSource();\n    ent.isDocRoot = true;\n    DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"import\"));\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(1, swi.docs.size());\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.docCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.rowsCount.get());\n\n    for (int i = 0; i < l.size(); i++) {\n      Map<String, Object> map = (Map<String, Object>) l.get(i);\n      SolrInputDocument doc = swi.docs.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","sourceNew":"  @Test\n  public void testImportCommand() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_singleEntity);\n    DataConfig cfg = di.getConfig();\n    DataConfig.Entity ent = cfg.document.entities.get(0);\n    List l = new ArrayList();\n    l.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n    ent.dataSrc = new MockDataSource();\n    ent.isDocRoot = true;\n    DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"import\"));\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(Boolean.TRUE, swi.finishCalled);\n    assertEquals(1, swi.docs.size());\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.docCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.rowsCount.get());\n\n    for (int i = 0; i < l.size(); i++) {\n      Map<String, Object> map = (Map<String, Object>) l.get(i);\n      SolrInputDocument doc = swi.docs.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testImportCommand() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_singleEntity);\n    DataConfig cfg = di.getConfig();\n    DataConfig.Entity ent = cfg.document.entities.get(0);\n    List l = new ArrayList();\n    l.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n    ent.dataSrc = new MockDataSource();\n    ent.isDocRoot = true;\n    DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"import\"));\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(1, swi.docs.size());\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.docCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.rowsCount.get());\n\n    for (int i = 0; i < l.size(); i++) {\n      Map<String, Object> map = (Map<String, Object>) l.get(i);\n      SolrInputDocument doc = swi.docs.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","sourceNew":"  @Test\n  public void testImportCommand() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_singleEntity);\n    DataConfig cfg = di.getConfig();\n    DataConfig.Entity ent = cfg.document.entities.get(0);\n    List l = new ArrayList();\n    l.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n    ent.dataSrc = new MockDataSource();\n    ent.isDocRoot = true;\n    DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"import\"));\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(Boolean.TRUE, swi.finishCalled);\n    assertEquals(1, swi.docs.size());\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.docCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.rowsCount.get());\n\n    for (int i = 0; i < l.size(); i++) {\n      Map<String, Object> map = (Map<String, Object>) l.get(i);\n      SolrInputDocument doc = swi.docs.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testImportCommand() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadAndInit(dc_singleEntity);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.document.entities.get(0);\n      List l = new ArrayList();\n      l.add(createMap(\"id\", 1, \"desc\", \"one\"));\n      MockDataSource.setIterator(\"select * from x\", l.iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"import\"));\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi);\n      Assert.assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.TRUE, swi.commitCalled);\n      Assert.assertEquals(1, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount\n              .get());\n      Assert\n              .assertEquals(1, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.rowsCount\n              .get());\n\n      for (int i = 0; i < l.size(); i++) {\n        Map<String, Object> map = (Map<String, Object>) l.get(i);\n        SolrInputDocument doc = swi.docs.get(i);\n        for (Map.Entry<String, Object> entry : map.entrySet()) {\n          Assert.assertEquals(entry.getValue(), doc.getFieldValue(entry\n                  .getKey()));\n        }\n      }\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","sourceNew":"  @Test\n  public void testImportCommand() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_singleEntity);\n    DataConfig cfg = di.getConfig();\n    DataConfig.Entity ent = cfg.document.entities.get(0);\n    List l = new ArrayList();\n    l.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n    ent.dataSrc = new MockDataSource();\n    ent.isDocRoot = true;\n    DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"import\"));\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(Boolean.TRUE, swi.finishCalled);\n    assertEquals(1, swi.docs.size());\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.docCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.rowsCount.get());\n\n    for (int i = 0; i < l.size(); i++) {\n      Map<String, Object> map = (Map<String, Object>) l.get(i);\n      SolrInputDocument doc = swi.docs.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testImportCommand() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_singleEntity);\n    DataConfig cfg = di.getConfig();\n    DataConfig.Entity ent = cfg.document.entities.get(0);\n    List l = new ArrayList();\n    l.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n    ent.dataSrc = new MockDataSource();\n    ent.isDocRoot = true;\n    DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"import\"));\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(Boolean.TRUE, swi.finishCalled);\n    assertEquals(1, swi.docs.size());\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.docCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.rowsCount.get());\n\n    for (int i = 0; i < l.size(); i++) {\n      Map<String, Object> map = (Map<String, Object>) l.get(i);\n      SolrInputDocument doc = swi.docs.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testImportCommand().mjava","sourceNew":"  @Test\n  public void testImportCommand() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_singleEntity);\n    DataConfig cfg = di.getConfig();\n    DataConfig.Entity ent = cfg.document.entities.get(0);\n    List l = new ArrayList();\n    l.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n    ent.dataSrc = new MockDataSource();\n    ent.isDocRoot = true;\n    DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"import\"));\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(Boolean.TRUE, swi.finishCalled);\n    assertEquals(1, swi.docs.size());\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.docCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.rowsCount.get());\n\n    for (int i = 0; i < l.size(); i++) {\n      Map<String, Object> map = (Map<String, Object>) l.get(i);\n      SolrInputDocument doc = swi.docs.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testImportCommand() {\n    DataImporter di = new DataImporter();\n    di.loadAndInit(dc_singleEntity);\n    DataConfig cfg = di.getConfig();\n    DataConfig.Entity ent = cfg.document.entities.get(0);\n    List l = new ArrayList();\n    l.add(createMap(\"id\", 1, \"desc\", \"one\"));\n    MockDataSource.setIterator(\"select * from x\", l.iterator());\n    ent.dataSrc = new MockDataSource();\n    ent.isDocRoot = true;\n    DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"import\"));\n    SolrWriterImpl swi = new SolrWriterImpl();\n    di.runCmd(rp, swi);\n    assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n    assertEquals(Boolean.TRUE, swi.commitCalled);\n    assertEquals(Boolean.TRUE, swi.finishCalled);\n    assertEquals(1, swi.docs.size());\n    assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.docCount.get());\n    assertEquals(1, di.getDocBuilder().importStatistics.rowsCount.get());\n\n    for (int i = 0; i < l.size(); i++) {\n      Map<String, Object> map = (Map<String, Object>) l.get(i);\n      SolrInputDocument doc = swi.docs.get(i);\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        assertEquals(entry.getValue(), doc.getFieldValue(entry.getKey()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["61c8b911ab9e4d7823a9dbde3782c4fd4e695c85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"85a883878c0af761245ab048babc63d099f835f3":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","61c8b911ab9e4d7823a9dbde3782c4fd4e695c85"],"61c8b911ab9e4d7823a9dbde3782c4fd4e695c85":["fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","61c8b911ab9e4d7823a9dbde3782c4fd4e695c85"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["61c8b911ab9e4d7823a9dbde3782c4fd4e695c85","61c8b911ab9e4d7823a9dbde3782c4fd4e695c85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["1da8d55113b689b06716246649de6f62430f15c0","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"85a883878c0af761245ab048babc63d099f835f3":[],"61c8b911ab9e4d7823a9dbde3782c4fd4e695c85":["c26f00b574427b55127e869b935845554afde1fa","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1da8d55113b689b06716246649de6f62430f15c0":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["85a883878c0af761245ab048babc63d099f835f3"],"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead":["61c8b911ab9e4d7823a9dbde3782c4fd4e695c85","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}